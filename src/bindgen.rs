/* automatically generated by rust-bindgen 0.59.2 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[repr(C)]
    #[derive(Default)]
    pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
    impl<T> __IncompleteArrayField<T> {
        #[inline]
        pub const fn new() -> Self {
            __IncompleteArrayField(::std::marker::PhantomData, [])
        }
        #[inline]
        pub fn as_ptr(&self) -> *const T {
            self as *const _ as *const T
        }
        #[inline]
        pub fn as_mut_ptr(&mut self) -> *mut T {
            self as *mut _ as *mut T
        }
        #[inline]
        pub unsafe fn as_slice(&self, len: usize) -> &[T] {
            ::std::slice::from_raw_parts(self.as_ptr(), len)
        }
        #[inline]
        pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
            ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
        }
    }
    impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__IncompleteArrayField")
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const WINAPI_FAMILY_PC_APP: u32 = 2;
    pub const WINAPI_FAMILY_PHONE_APP: u32 = 3;
    pub const WINAPI_FAMILY_SYSTEM: u32 = 4;
    pub const WINAPI_FAMILY_SERVER: u32 = 5;
    pub const WINAPI_FAMILY_GAMES: u32 = 6;
    pub const WINAPI_FAMILY_DESKTOP_APP: u32 = 100;
    pub const WINAPI_FAMILY_APP: u32 = 2;
    pub const WINAPI_FAMILY: u32 = 100;
    pub const _SAL_VERSION: u32 = 20;
    pub const __SAL_H_VERSION: u32 = 180000000;
    pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
    pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
    pub const __SAL_H_FULL_VER: u32 = 140050727;
    pub const __SPECSTRINGS_STRICT_LEVEL: u32 = 1;
    pub const __drv_typeConst: u32 = 0;
    pub const __drv_typeCond: u32 = 1;
    pub const __drv_typeBitset: u32 = 2;
    pub const __drv_typeExpr: u32 = 3;
    pub const _WIN32_WINNT_NT4: u32 = 1024;
    pub const _WIN32_WINNT_WIN2K: u32 = 1280;
    pub const _WIN32_WINNT_WINXP: u32 = 1281;
    pub const _WIN32_WINNT_WS03: u32 = 1282;
    pub const _WIN32_WINNT_WIN6: u32 = 1536;
    pub const _WIN32_WINNT_VISTA: u32 = 1536;
    pub const _WIN32_WINNT_WS08: u32 = 1536;
    pub const _WIN32_WINNT_LONGHORN: u32 = 1536;
    pub const _WIN32_WINNT_WIN7: u32 = 1537;
    pub const _WIN32_WINNT_WIN8: u32 = 1538;
    pub const _WIN32_WINNT_WINBLUE: u32 = 1539;
    pub const _WIN32_WINNT_WINTHRESHOLD: u32 = 2560;
    pub const _WIN32_WINNT_WIN10: u32 = 2560;
    pub const _WIN32_IE_IE20: u32 = 512;
    pub const _WIN32_IE_IE30: u32 = 768;
    pub const _WIN32_IE_IE302: u32 = 770;
    pub const _WIN32_IE_IE40: u32 = 1024;
    pub const _WIN32_IE_IE401: u32 = 1025;
    pub const _WIN32_IE_IE50: u32 = 1280;
    pub const _WIN32_IE_IE501: u32 = 1281;
    pub const _WIN32_IE_IE55: u32 = 1360;
    pub const _WIN32_IE_IE60: u32 = 1536;
    pub const _WIN32_IE_IE60SP1: u32 = 1537;
    pub const _WIN32_IE_IE60SP2: u32 = 1539;
    pub const _WIN32_IE_IE70: u32 = 1792;
    pub const _WIN32_IE_IE80: u32 = 2048;
    pub const _WIN32_IE_IE90: u32 = 2304;
    pub const _WIN32_IE_IE100: u32 = 2560;
    pub const _WIN32_IE_IE110: u32 = 2560;
    pub const _WIN32_IE_NT4: u32 = 512;
    pub const _WIN32_IE_NT4SP1: u32 = 512;
    pub const _WIN32_IE_NT4SP2: u32 = 512;
    pub const _WIN32_IE_NT4SP3: u32 = 770;
    pub const _WIN32_IE_NT4SP4: u32 = 1025;
    pub const _WIN32_IE_NT4SP5: u32 = 1025;
    pub const _WIN32_IE_NT4SP6: u32 = 1280;
    pub const _WIN32_IE_WIN98: u32 = 1025;
    pub const _WIN32_IE_WIN98SE: u32 = 1280;
    pub const _WIN32_IE_WINME: u32 = 1360;
    pub const _WIN32_IE_WIN2K: u32 = 1281;
    pub const _WIN32_IE_WIN2KSP1: u32 = 1281;
    pub const _WIN32_IE_WIN2KSP2: u32 = 1281;
    pub const _WIN32_IE_WIN2KSP3: u32 = 1281;
    pub const _WIN32_IE_WIN2KSP4: u32 = 1281;
    pub const _WIN32_IE_XP: u32 = 1536;
    pub const _WIN32_IE_XPSP1: u32 = 1537;
    pub const _WIN32_IE_XPSP2: u32 = 1539;
    pub const _WIN32_IE_WS03: u32 = 1538;
    pub const _WIN32_IE_WS03SP1: u32 = 1539;
    pub const _WIN32_IE_WIN6: u32 = 1792;
    pub const _WIN32_IE_LONGHORN: u32 = 1792;
    pub const _WIN32_IE_WIN7: u32 = 2048;
    pub const _WIN32_IE_WIN8: u32 = 2560;
    pub const _WIN32_IE_WINBLUE: u32 = 2560;
    pub const _WIN32_IE_WINTHRESHOLD: u32 = 2560;
    pub const _WIN32_IE_WIN10: u32 = 2560;
    pub const NTDDI_WIN2K: u32 = 83886080;
    pub const NTDDI_WIN2KSP1: u32 = 83886336;
    pub const NTDDI_WIN2KSP2: u32 = 83886592;
    pub const NTDDI_WIN2KSP3: u32 = 83886848;
    pub const NTDDI_WIN2KSP4: u32 = 83887104;
    pub const NTDDI_WINXP: u32 = 83951616;
    pub const NTDDI_WINXPSP1: u32 = 83951872;
    pub const NTDDI_WINXPSP2: u32 = 83952128;
    pub const NTDDI_WINXPSP3: u32 = 83952384;
    pub const NTDDI_WINXPSP4: u32 = 83952640;
    pub const NTDDI_WS03: u32 = 84017152;
    pub const NTDDI_WS03SP1: u32 = 84017408;
    pub const NTDDI_WS03SP2: u32 = 84017664;
    pub const NTDDI_WS03SP3: u32 = 84017920;
    pub const NTDDI_WS03SP4: u32 = 84018176;
    pub const NTDDI_WIN6: u32 = 100663296;
    pub const NTDDI_WIN6SP1: u32 = 100663552;
    pub const NTDDI_WIN6SP2: u32 = 100663808;
    pub const NTDDI_WIN6SP3: u32 = 100664064;
    pub const NTDDI_WIN6SP4: u32 = 100664320;
    pub const NTDDI_VISTA: u32 = 100663296;
    pub const NTDDI_VISTASP1: u32 = 100663552;
    pub const NTDDI_VISTASP2: u32 = 100663808;
    pub const NTDDI_VISTASP3: u32 = 100664064;
    pub const NTDDI_VISTASP4: u32 = 100664320;
    pub const NTDDI_LONGHORN: u32 = 100663296;
    pub const NTDDI_WS08: u32 = 100663552;
    pub const NTDDI_WS08SP2: u32 = 100663808;
    pub const NTDDI_WS08SP3: u32 = 100664064;
    pub const NTDDI_WS08SP4: u32 = 100664320;
    pub const NTDDI_WIN7: u32 = 100728832;
    pub const NTDDI_WIN8: u32 = 100794368;
    pub const NTDDI_WINBLUE: u32 = 100859904;
    pub const NTDDI_WINTHRESHOLD: u32 = 167772160;
    pub const NTDDI_WIN10: u32 = 167772160;
    pub const NTDDI_WIN10_TH2: u32 = 167772161;
    pub const NTDDI_WIN10_RS1: u32 = 167772162;
    pub const NTDDI_WIN10_RS2: u32 = 167772163;
    pub const NTDDI_WIN10_RS3: u32 = 167772164;
    pub const NTDDI_WIN10_RS4: u32 = 167772165;
    pub const NTDDI_WIN10_RS5: u32 = 167772166;
    pub const NTDDI_WIN10_19H1: u32 = 167772167;
    pub const NTDDI_WIN10_VB: u32 = 167772168;
    pub const WDK_NTDDI_VERSION: u32 = 167772168;
    pub const OSVERSION_MASK: u32 = 4294901760;
    pub const SPVERSION_MASK: u32 = 65280;
    pub const SUBVERSION_MASK: u32 = 255;
    pub const _WIN32_WINNT: u32 = 2560;
    pub const NTDDI_VERSION: u32 = 167772168;
    pub const WINVER: u32 = 2560;
    pub const _WIN32_IE: u32 = 2560;
    pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
    pub const _CRT_PACKING: u32 = 8;
    pub const _HAS_EXCEPTIONS: u32 = 1;
    pub const NULL: u32 = 0;
    pub const _HAS_CXX17: u32 = 0;
    pub const _HAS_CXX20: u32 = 0;
    pub const _HAS_CXX23: u32 = 0;
    pub const _HAS_NODISCARD: u32 = 1;
    pub const EXCEPTION_EXECUTE_HANDLER: u32 = 1;
    pub const EXCEPTION_CONTINUE_SEARCH: u32 = 0;
    pub const EXCEPTION_CONTINUE_EXECUTION: i32 = -1;
    pub const __GNUC_VA_LIST: u32 = 1;
    pub const STRICT: u32 = 1;
    pub const MAX_PATH: u32 = 260;
    pub const FALSE: u32 = 0;
    pub const TRUE: u32 = 1;
    pub const _ARGMAX: u32 = 100;
    pub const _CRT_INT_MAX: u32 = 2147483647;
    pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
    pub const _CRT_HAS_CXX17: u32 = 0;
    pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
    pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
    pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
    pub const __STDC_SECURE_LIB__: u32 = 200411;
    pub const __GOT_SECURE_LIB__: u32 = 200411;
    pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
    pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
    pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
    pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
    pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
    pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
    pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
    pub const _UPPER: u32 = 1;
    pub const _LOWER: u32 = 2;
    pub const _DIGIT: u32 = 4;
    pub const _SPACE: u32 = 8;
    pub const _PUNCT: u32 = 16;
    pub const _CONTROL: u32 = 32;
    pub const _BLANK: u32 = 64;
    pub const _HEX: u32 = 128;
    pub const _LEADBYTE: u32 = 32768;
    pub const _ALPHA: u32 = 259;
    pub const ANYSIZE_ARRAY: u32 = 1;
    pub const DISPATCH_LEVEL: u32 = 2;
    pub const APC_LEVEL: u32 = 1;
    pub const PASSIVE_LEVEL: u32 = 0;
    pub const HIGH_LEVEL: u32 = 15;
    pub const MEMORY_ALLOCATION_ALIGNMENT: u32 = 16;
    pub const SYSTEM_CACHE_ALIGNMENT_SIZE: u32 = 64;
    pub const PRAGMA_DEPRECATED_DDK: u32 = 0;
    pub const UCSCHAR_INVALID_CHARACTER: u32 = 4294967295;
    pub const MIN_UCSCHAR: u32 = 0;
    pub const MAX_UCSCHAR: u32 = 1114111;
    pub const ALL_PROCESSOR_GROUPS: u32 = 65535;
    pub const MAXIMUM_PROC_PER_GROUP: u32 = 64;
    pub const MAXIMUM_PROCESSORS: u32 = 64;
    pub const APPLICATION_ERROR_MASK: u32 = 536870912;
    pub const ERROR_SEVERITY_SUCCESS: u32 = 0;
    pub const ERROR_SEVERITY_INFORMATIONAL: u32 = 1073741824;
    pub const ERROR_SEVERITY_WARNING: u32 = 2147483648;
    pub const ERROR_SEVERITY_ERROR: u32 = 3221225472;
    pub const MAXLONGLONG: u64 = 9223372036854775807;
    pub const UNICODE_STRING_MAX_CHARS: u32 = 32767;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const EDEADLK: u32 = 36;
    pub const ENAMETOOLONG: u32 = 38;
    pub const ENOLCK: u32 = 39;
    pub const ENOSYS: u32 = 40;
    pub const ENOTEMPTY: u32 = 41;
    pub const EINVAL: u32 = 22;
    pub const ERANGE: u32 = 34;
    pub const EILSEQ: u32 = 42;
    pub const STRUNCATE: u32 = 80;
    pub const EDEADLOCK: u32 = 36;
    pub const EADDRINUSE: u32 = 100;
    pub const EADDRNOTAVAIL: u32 = 101;
    pub const EAFNOSUPPORT: u32 = 102;
    pub const EALREADY: u32 = 103;
    pub const EBADMSG: u32 = 104;
    pub const ECANCELED: u32 = 105;
    pub const ECONNABORTED: u32 = 106;
    pub const ECONNREFUSED: u32 = 107;
    pub const ECONNRESET: u32 = 108;
    pub const EDESTADDRREQ: u32 = 109;
    pub const EHOSTUNREACH: u32 = 110;
    pub const EIDRM: u32 = 111;
    pub const EINPROGRESS: u32 = 112;
    pub const EISCONN: u32 = 113;
    pub const ELOOP: u32 = 114;
    pub const EMSGSIZE: u32 = 115;
    pub const ENETDOWN: u32 = 116;
    pub const ENETRESET: u32 = 117;
    pub const ENETUNREACH: u32 = 118;
    pub const ENOBUFS: u32 = 119;
    pub const ENODATA: u32 = 120;
    pub const ENOLINK: u32 = 121;
    pub const ENOMSG: u32 = 122;
    pub const ENOPROTOOPT: u32 = 123;
    pub const ENOSR: u32 = 124;
    pub const ENOSTR: u32 = 125;
    pub const ENOTCONN: u32 = 126;
    pub const ENOTRECOVERABLE: u32 = 127;
    pub const ENOTSOCK: u32 = 128;
    pub const ENOTSUP: u32 = 129;
    pub const EOPNOTSUPP: u32 = 130;
    pub const EOTHER: u32 = 131;
    pub const EOVERFLOW: u32 = 132;
    pub const EOWNERDEAD: u32 = 133;
    pub const EPROTO: u32 = 134;
    pub const EPROTONOSUPPORT: u32 = 135;
    pub const EPROTOTYPE: u32 = 136;
    pub const ETIME: u32 = 137;
    pub const ETIMEDOUT: u32 = 138;
    pub const ETXTBSY: u32 = 139;
    pub const EWOULDBLOCK: u32 = 140;
    pub const _NLSCMPERROR: u32 = 2147483647;
    pub const MINCHAR: u32 = 128;
    pub const MAXCHAR: u32 = 127;
    pub const MINSHORT: u32 = 32768;
    pub const MAXSHORT: u32 = 32767;
    pub const MINLONG: u32 = 2147483648;
    pub const MAXLONG: u32 = 2147483647;
    pub const MAXBYTE: u32 = 255;
    pub const MAXWORD: u32 = 65535;
    pub const MAXDWORD: u32 = 4294967295;
    pub const ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
    pub const ENCLAVE_LONG_ID_LENGTH: u32 = 32;
    pub const VER_SERVER_NT: u32 = 2147483648;
    pub const VER_WORKSTATION_NT: u32 = 1073741824;
    pub const VER_SUITE_SMALLBUSINESS: u32 = 1;
    pub const VER_SUITE_ENTERPRISE: u32 = 2;
    pub const VER_SUITE_BACKOFFICE: u32 = 4;
    pub const VER_SUITE_COMMUNICATIONS: u32 = 8;
    pub const VER_SUITE_TERMINAL: u32 = 16;
    pub const VER_SUITE_SMALLBUSINESS_RESTRICTED: u32 = 32;
    pub const VER_SUITE_EMBEDDEDNT: u32 = 64;
    pub const VER_SUITE_DATACENTER: u32 = 128;
    pub const VER_SUITE_SINGLEUSERTS: u32 = 256;
    pub const VER_SUITE_PERSONAL: u32 = 512;
    pub const VER_SUITE_BLADE: u32 = 1024;
    pub const VER_SUITE_EMBEDDED_RESTRICTED: u32 = 2048;
    pub const VER_SUITE_SECURITY_APPLIANCE: u32 = 4096;
    pub const VER_SUITE_STORAGE_SERVER: u32 = 8192;
    pub const VER_SUITE_COMPUTE_SERVER: u32 = 16384;
    pub const VER_SUITE_WH_SERVER: u32 = 32768;
    pub const VER_SUITE_MULTIUSERTS: u32 = 131072;
    pub const PRODUCT_UNDEFINED: u32 = 0;
    pub const PRODUCT_ULTIMATE: u32 = 1;
    pub const PRODUCT_HOME_BASIC: u32 = 2;
    pub const PRODUCT_HOME_PREMIUM: u32 = 3;
    pub const PRODUCT_ENTERPRISE: u32 = 4;
    pub const PRODUCT_HOME_BASIC_N: u32 = 5;
    pub const PRODUCT_BUSINESS: u32 = 6;
    pub const PRODUCT_STANDARD_SERVER: u32 = 7;
    pub const PRODUCT_DATACENTER_SERVER: u32 = 8;
    pub const PRODUCT_SMALLBUSINESS_SERVER: u32 = 9;
    pub const PRODUCT_ENTERPRISE_SERVER: u32 = 10;
    pub const PRODUCT_STARTER: u32 = 11;
    pub const PRODUCT_DATACENTER_SERVER_CORE: u32 = 12;
    pub const PRODUCT_STANDARD_SERVER_CORE: u32 = 13;
    pub const PRODUCT_ENTERPRISE_SERVER_CORE: u32 = 14;
    pub const PRODUCT_ENTERPRISE_SERVER_IA64: u32 = 15;
    pub const PRODUCT_BUSINESS_N: u32 = 16;
    pub const PRODUCT_WEB_SERVER: u32 = 17;
    pub const PRODUCT_CLUSTER_SERVER: u32 = 18;
    pub const PRODUCT_HOME_SERVER: u32 = 19;
    pub const PRODUCT_STORAGE_EXPRESS_SERVER: u32 = 20;
    pub const PRODUCT_STORAGE_STANDARD_SERVER: u32 = 21;
    pub const PRODUCT_STORAGE_WORKGROUP_SERVER: u32 = 22;
    pub const PRODUCT_STORAGE_ENTERPRISE_SERVER: u32 = 23;
    pub const PRODUCT_SERVER_FOR_SMALLBUSINESS: u32 = 24;
    pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM: u32 = 25;
    pub const PRODUCT_HOME_PREMIUM_N: u32 = 26;
    pub const PRODUCT_ENTERPRISE_N: u32 = 27;
    pub const PRODUCT_ULTIMATE_N: u32 = 28;
    pub const PRODUCT_WEB_SERVER_CORE: u32 = 29;
    pub const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT: u32 = 30;
    pub const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY: u32 = 31;
    pub const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING: u32 = 32;
    pub const PRODUCT_SERVER_FOUNDATION: u32 = 33;
    pub const PRODUCT_HOME_PREMIUM_SERVER: u32 = 34;
    pub const PRODUCT_SERVER_FOR_SMALLBUSINESS_V: u32 = 35;
    pub const PRODUCT_STANDARD_SERVER_V: u32 = 36;
    pub const PRODUCT_DATACENTER_SERVER_V: u32 = 37;
    pub const PRODUCT_ENTERPRISE_SERVER_V: u32 = 38;
    pub const PRODUCT_DATACENTER_SERVER_CORE_V: u32 = 39;
    pub const PRODUCT_STANDARD_SERVER_CORE_V: u32 = 40;
    pub const PRODUCT_ENTERPRISE_SERVER_CORE_V: u32 = 41;
    pub const PRODUCT_HYPERV: u32 = 42;
    pub const PRODUCT_STORAGE_EXPRESS_SERVER_CORE: u32 = 43;
    pub const PRODUCT_STORAGE_STANDARD_SERVER_CORE: u32 = 44;
    pub const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE: u32 = 45;
    pub const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE: u32 = 46;
    pub const PRODUCT_STARTER_N: u32 = 47;
    pub const PRODUCT_PROFESSIONAL: u32 = 48;
    pub const PRODUCT_PROFESSIONAL_N: u32 = 49;
    pub const PRODUCT_SB_SOLUTION_SERVER: u32 = 50;
    pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS: u32 = 51;
    pub const PRODUCT_STANDARD_SERVER_SOLUTIONS: u32 = 52;
    pub const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE: u32 = 53;
    pub const PRODUCT_SB_SOLUTION_SERVER_EM: u32 = 54;
    pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM: u32 = 55;
    pub const PRODUCT_SOLUTION_EMBEDDEDSERVER: u32 = 56;
    pub const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE: u32 = 57;
    pub const PRODUCT_PROFESSIONAL_EMBEDDED: u32 = 58;
    pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT: u32 = 59;
    pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL: u32 = 60;
    pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC: u32 = 61;
    pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC: u32 = 62;
    pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE: u32 = 63;
    pub const PRODUCT_CLUSTER_SERVER_V: u32 = 64;
    pub const PRODUCT_EMBEDDED: u32 = 65;
    pub const PRODUCT_STARTER_E: u32 = 66;
    pub const PRODUCT_HOME_BASIC_E: u32 = 67;
    pub const PRODUCT_HOME_PREMIUM_E: u32 = 68;
    pub const PRODUCT_PROFESSIONAL_E: u32 = 69;
    pub const PRODUCT_ENTERPRISE_E: u32 = 70;
    pub const PRODUCT_ULTIMATE_E: u32 = 71;
    pub const PRODUCT_ENTERPRISE_EVALUATION: u32 = 72;
    pub const PRODUCT_MULTIPOINT_STANDARD_SERVER: u32 = 76;
    pub const PRODUCT_MULTIPOINT_PREMIUM_SERVER: u32 = 77;
    pub const PRODUCT_STANDARD_EVALUATION_SERVER: u32 = 79;
    pub const PRODUCT_DATACENTER_EVALUATION_SERVER: u32 = 80;
    pub const PRODUCT_ENTERPRISE_N_EVALUATION: u32 = 84;
    pub const PRODUCT_EMBEDDED_AUTOMOTIVE: u32 = 85;
    pub const PRODUCT_EMBEDDED_INDUSTRY_A: u32 = 86;
    pub const PRODUCT_THINPC: u32 = 87;
    pub const PRODUCT_EMBEDDED_A: u32 = 88;
    pub const PRODUCT_EMBEDDED_INDUSTRY: u32 = 89;
    pub const PRODUCT_EMBEDDED_E: u32 = 90;
    pub const PRODUCT_EMBEDDED_INDUSTRY_E: u32 = 91;
    pub const PRODUCT_EMBEDDED_INDUSTRY_A_E: u32 = 92;
    pub const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER: u32 = 95;
    pub const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER: u32 = 96;
    pub const PRODUCT_CORE_ARM: u32 = 97;
    pub const PRODUCT_CORE_N: u32 = 98;
    pub const PRODUCT_CORE_COUNTRYSPECIFIC: u32 = 99;
    pub const PRODUCT_CORE_SINGLELANGUAGE: u32 = 100;
    pub const PRODUCT_CORE: u32 = 101;
    pub const PRODUCT_PROFESSIONAL_WMC: u32 = 103;
    pub const PRODUCT_EMBEDDED_INDUSTRY_EVAL: u32 = 105;
    pub const PRODUCT_EMBEDDED_INDUSTRY_E_EVAL: u32 = 106;
    pub const PRODUCT_EMBEDDED_EVAL: u32 = 107;
    pub const PRODUCT_EMBEDDED_E_EVAL: u32 = 108;
    pub const PRODUCT_NANO_SERVER: u32 = 109;
    pub const PRODUCT_CLOUD_STORAGE_SERVER: u32 = 110;
    pub const PRODUCT_CORE_CONNECTED: u32 = 111;
    pub const PRODUCT_PROFESSIONAL_STUDENT: u32 = 112;
    pub const PRODUCT_CORE_CONNECTED_N: u32 = 113;
    pub const PRODUCT_PROFESSIONAL_STUDENT_N: u32 = 114;
    pub const PRODUCT_CORE_CONNECTED_SINGLELANGUAGE: u32 = 115;
    pub const PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC: u32 = 116;
    pub const PRODUCT_CONNECTED_CAR: u32 = 117;
    pub const PRODUCT_INDUSTRY_HANDHELD: u32 = 118;
    pub const PRODUCT_PPI_PRO: u32 = 119;
    pub const PRODUCT_ARM64_SERVER: u32 = 120;
    pub const PRODUCT_EDUCATION: u32 = 121;
    pub const PRODUCT_EDUCATION_N: u32 = 122;
    pub const PRODUCT_IOTUAP: u32 = 123;
    pub const PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER: u32 = 124;
    pub const PRODUCT_ENTERPRISE_S: u32 = 125;
    pub const PRODUCT_ENTERPRISE_S_N: u32 = 126;
    pub const PRODUCT_PROFESSIONAL_S: u32 = 127;
    pub const PRODUCT_PROFESSIONAL_S_N: u32 = 128;
    pub const PRODUCT_ENTERPRISE_S_EVALUATION: u32 = 129;
    pub const PRODUCT_ENTERPRISE_S_N_EVALUATION: u32 = 130;
    pub const PRODUCT_HOLOGRAPHIC: u32 = 135;
    pub const PRODUCT_HOLOGRAPHIC_BUSINESS: u32 = 136;
    pub const PRODUCT_PRO_SINGLE_LANGUAGE: u32 = 138;
    pub const PRODUCT_PRO_CHINA: u32 = 139;
    pub const PRODUCT_ENTERPRISE_SUBSCRIPTION: u32 = 140;
    pub const PRODUCT_ENTERPRISE_SUBSCRIPTION_N: u32 = 141;
    pub const PRODUCT_DATACENTER_NANO_SERVER: u32 = 143;
    pub const PRODUCT_STANDARD_NANO_SERVER: u32 = 144;
    pub const PRODUCT_DATACENTER_A_SERVER_CORE: u32 = 145;
    pub const PRODUCT_STANDARD_A_SERVER_CORE: u32 = 146;
    pub const PRODUCT_DATACENTER_WS_SERVER_CORE: u32 = 147;
    pub const PRODUCT_STANDARD_WS_SERVER_CORE: u32 = 148;
    pub const PRODUCT_UTILITY_VM: u32 = 149;
    pub const PRODUCT_DATACENTER_EVALUATION_SERVER_CORE: u32 = 159;
    pub const PRODUCT_STANDARD_EVALUATION_SERVER_CORE: u32 = 160;
    pub const PRODUCT_PRO_WORKSTATION: u32 = 161;
    pub const PRODUCT_PRO_WORKSTATION_N: u32 = 162;
    pub const PRODUCT_PRO_FOR_EDUCATION: u32 = 164;
    pub const PRODUCT_PRO_FOR_EDUCATION_N: u32 = 165;
    pub const PRODUCT_AZURE_SERVER_CORE: u32 = 168;
    pub const PRODUCT_AZURE_NANO_SERVER: u32 = 169;
    pub const PRODUCT_ENTERPRISEG: u32 = 171;
    pub const PRODUCT_ENTERPRISEGN: u32 = 172;
    pub const PRODUCT_SERVERRDSH: u32 = 175;
    pub const PRODUCT_CLOUD: u32 = 178;
    pub const PRODUCT_CLOUDN: u32 = 179;
    pub const PRODUCT_HUBOS: u32 = 180;
    pub const PRODUCT_ONECOREUPDATEOS: u32 = 182;
    pub const PRODUCT_CLOUDE: u32 = 183;
    pub const PRODUCT_ANDROMEDA: u32 = 184;
    pub const PRODUCT_IOTOS: u32 = 185;
    pub const PRODUCT_CLOUDEN: u32 = 186;
    pub const PRODUCT_IOTEDGEOS: u32 = 187;
    pub const PRODUCT_IOTENTERPRISE: u32 = 188;
    pub const PRODUCT_LITE: u32 = 189;
    pub const PRODUCT_IOTENTERPRISES: u32 = 191;
    pub const PRODUCT_XBOX_SYSTEMOS: u32 = 192;
    pub const PRODUCT_XBOX_NATIVEOS: u32 = 193;
    pub const PRODUCT_XBOX_GAMEOS: u32 = 194;
    pub const PRODUCT_XBOX_ERAOS: u32 = 195;
    pub const PRODUCT_XBOX_DURANGOHOSTOS: u32 = 196;
    pub const PRODUCT_XBOX_SCARLETTHOSTOS: u32 = 197;
    pub const PRODUCT_UNLICENSED: u32 = 2882382797;
    pub const LANG_NEUTRAL: u32 = 0;
    pub const LANG_INVARIANT: u32 = 127;
    pub const LANG_AFRIKAANS: u32 = 54;
    pub const LANG_ALBANIAN: u32 = 28;
    pub const LANG_ALSATIAN: u32 = 132;
    pub const LANG_AMHARIC: u32 = 94;
    pub const LANG_ARABIC: u32 = 1;
    pub const LANG_ARMENIAN: u32 = 43;
    pub const LANG_ASSAMESE: u32 = 77;
    pub const LANG_AZERI: u32 = 44;
    pub const LANG_AZERBAIJANI: u32 = 44;
    pub const LANG_BANGLA: u32 = 69;
    pub const LANG_BASHKIR: u32 = 109;
    pub const LANG_BASQUE: u32 = 45;
    pub const LANG_BELARUSIAN: u32 = 35;
    pub const LANG_BENGALI: u32 = 69;
    pub const LANG_BRETON: u32 = 126;
    pub const LANG_BOSNIAN: u32 = 26;
    pub const LANG_BOSNIAN_NEUTRAL: u32 = 30746;
    pub const LANG_BULGARIAN: u32 = 2;
    pub const LANG_CATALAN: u32 = 3;
    pub const LANG_CENTRAL_KURDISH: u32 = 146;
    pub const LANG_CHEROKEE: u32 = 92;
    pub const LANG_CHINESE: u32 = 4;
    pub const LANG_CHINESE_SIMPLIFIED: u32 = 4;
    pub const LANG_CHINESE_TRADITIONAL: u32 = 31748;
    pub const LANG_CORSICAN: u32 = 131;
    pub const LANG_CROATIAN: u32 = 26;
    pub const LANG_CZECH: u32 = 5;
    pub const LANG_DANISH: u32 = 6;
    pub const LANG_DARI: u32 = 140;
    pub const LANG_DIVEHI: u32 = 101;
    pub const LANG_DUTCH: u32 = 19;
    pub const LANG_ENGLISH: u32 = 9;
    pub const LANG_ESTONIAN: u32 = 37;
    pub const LANG_FAEROESE: u32 = 56;
    pub const LANG_FARSI: u32 = 41;
    pub const LANG_FILIPINO: u32 = 100;
    pub const LANG_FINNISH: u32 = 11;
    pub const LANG_FRENCH: u32 = 12;
    pub const LANG_FRISIAN: u32 = 98;
    pub const LANG_FULAH: u32 = 103;
    pub const LANG_GALICIAN: u32 = 86;
    pub const LANG_GEORGIAN: u32 = 55;
    pub const LANG_GERMAN: u32 = 7;
    pub const LANG_GREEK: u32 = 8;
    pub const LANG_GREENLANDIC: u32 = 111;
    pub const LANG_GUJARATI: u32 = 71;
    pub const LANG_HAUSA: u32 = 104;
    pub const LANG_HAWAIIAN: u32 = 117;
    pub const LANG_HEBREW: u32 = 13;
    pub const LANG_HINDI: u32 = 57;
    pub const LANG_HUNGARIAN: u32 = 14;
    pub const LANG_ICELANDIC: u32 = 15;
    pub const LANG_IGBO: u32 = 112;
    pub const LANG_INDONESIAN: u32 = 33;
    pub const LANG_INUKTITUT: u32 = 93;
    pub const LANG_IRISH: u32 = 60;
    pub const LANG_ITALIAN: u32 = 16;
    pub const LANG_JAPANESE: u32 = 17;
    pub const LANG_KANNADA: u32 = 75;
    pub const LANG_KASHMIRI: u32 = 96;
    pub const LANG_KAZAK: u32 = 63;
    pub const LANG_KHMER: u32 = 83;
    pub const LANG_KICHE: u32 = 134;
    pub const LANG_KINYARWANDA: u32 = 135;
    pub const LANG_KONKANI: u32 = 87;
    pub const LANG_KOREAN: u32 = 18;
    pub const LANG_KYRGYZ: u32 = 64;
    pub const LANG_LAO: u32 = 84;
    pub const LANG_LATVIAN: u32 = 38;
    pub const LANG_LITHUANIAN: u32 = 39;
    pub const LANG_LOWER_SORBIAN: u32 = 46;
    pub const LANG_LUXEMBOURGISH: u32 = 110;
    pub const LANG_MACEDONIAN: u32 = 47;
    pub const LANG_MALAY: u32 = 62;
    pub const LANG_MALAYALAM: u32 = 76;
    pub const LANG_MALTESE: u32 = 58;
    pub const LANG_MANIPURI: u32 = 88;
    pub const LANG_MAORI: u32 = 129;
    pub const LANG_MAPUDUNGUN: u32 = 122;
    pub const LANG_MARATHI: u32 = 78;
    pub const LANG_MOHAWK: u32 = 124;
    pub const LANG_MONGOLIAN: u32 = 80;
    pub const LANG_NEPALI: u32 = 97;
    pub const LANG_NORWEGIAN: u32 = 20;
    pub const LANG_OCCITAN: u32 = 130;
    pub const LANG_ODIA: u32 = 72;
    pub const LANG_ORIYA: u32 = 72;
    pub const LANG_PASHTO: u32 = 99;
    pub const LANG_PERSIAN: u32 = 41;
    pub const LANG_POLISH: u32 = 21;
    pub const LANG_PORTUGUESE: u32 = 22;
    pub const LANG_PULAR: u32 = 103;
    pub const LANG_PUNJABI: u32 = 70;
    pub const LANG_QUECHUA: u32 = 107;
    pub const LANG_ROMANIAN: u32 = 24;
    pub const LANG_ROMANSH: u32 = 23;
    pub const LANG_RUSSIAN: u32 = 25;
    pub const LANG_SAKHA: u32 = 133;
    pub const LANG_SAMI: u32 = 59;
    pub const LANG_SANSKRIT: u32 = 79;
    pub const LANG_SCOTTISH_GAELIC: u32 = 145;
    pub const LANG_SERBIAN: u32 = 26;
    pub const LANG_SERBIAN_NEUTRAL: u32 = 31770;
    pub const LANG_SINDHI: u32 = 89;
    pub const LANG_SINHALESE: u32 = 91;
    pub const LANG_SLOVAK: u32 = 27;
    pub const LANG_SLOVENIAN: u32 = 36;
    pub const LANG_SOTHO: u32 = 108;
    pub const LANG_SPANISH: u32 = 10;
    pub const LANG_SWAHILI: u32 = 65;
    pub const LANG_SWEDISH: u32 = 29;
    pub const LANG_SYRIAC: u32 = 90;
    pub const LANG_TAJIK: u32 = 40;
    pub const LANG_TAMAZIGHT: u32 = 95;
    pub const LANG_TAMIL: u32 = 73;
    pub const LANG_TATAR: u32 = 68;
    pub const LANG_TELUGU: u32 = 74;
    pub const LANG_THAI: u32 = 30;
    pub const LANG_TIBETAN: u32 = 81;
    pub const LANG_TIGRIGNA: u32 = 115;
    pub const LANG_TIGRINYA: u32 = 115;
    pub const LANG_TSWANA: u32 = 50;
    pub const LANG_TURKISH: u32 = 31;
    pub const LANG_TURKMEN: u32 = 66;
    pub const LANG_UIGHUR: u32 = 128;
    pub const LANG_UKRAINIAN: u32 = 34;
    pub const LANG_UPPER_SORBIAN: u32 = 46;
    pub const LANG_URDU: u32 = 32;
    pub const LANG_UZBEK: u32 = 67;
    pub const LANG_VALENCIAN: u32 = 3;
    pub const LANG_VIETNAMESE: u32 = 42;
    pub const LANG_WELSH: u32 = 82;
    pub const LANG_WOLOF: u32 = 136;
    pub const LANG_XHOSA: u32 = 52;
    pub const LANG_YAKUT: u32 = 133;
    pub const LANG_YI: u32 = 120;
    pub const LANG_YORUBA: u32 = 106;
    pub const LANG_ZULU: u32 = 53;
    pub const SUBLANG_NEUTRAL: u32 = 0;
    pub const SUBLANG_DEFAULT: u32 = 1;
    pub const SUBLANG_SYS_DEFAULT: u32 = 2;
    pub const SUBLANG_CUSTOM_DEFAULT: u32 = 3;
    pub const SUBLANG_CUSTOM_UNSPECIFIED: u32 = 4;
    pub const SUBLANG_UI_CUSTOM_DEFAULT: u32 = 5;
    pub const SUBLANG_AFRIKAANS_SOUTH_AFRICA: u32 = 1;
    pub const SUBLANG_ALBANIAN_ALBANIA: u32 = 1;
    pub const SUBLANG_ALSATIAN_FRANCE: u32 = 1;
    pub const SUBLANG_AMHARIC_ETHIOPIA: u32 = 1;
    pub const SUBLANG_ARABIC_SAUDI_ARABIA: u32 = 1;
    pub const SUBLANG_ARABIC_IRAQ: u32 = 2;
    pub const SUBLANG_ARABIC_EGYPT: u32 = 3;
    pub const SUBLANG_ARABIC_LIBYA: u32 = 4;
    pub const SUBLANG_ARABIC_ALGERIA: u32 = 5;
    pub const SUBLANG_ARABIC_MOROCCO: u32 = 6;
    pub const SUBLANG_ARABIC_TUNISIA: u32 = 7;
    pub const SUBLANG_ARABIC_OMAN: u32 = 8;
    pub const SUBLANG_ARABIC_YEMEN: u32 = 9;
    pub const SUBLANG_ARABIC_SYRIA: u32 = 10;
    pub const SUBLANG_ARABIC_JORDAN: u32 = 11;
    pub const SUBLANG_ARABIC_LEBANON: u32 = 12;
    pub const SUBLANG_ARABIC_KUWAIT: u32 = 13;
    pub const SUBLANG_ARABIC_UAE: u32 = 14;
    pub const SUBLANG_ARABIC_BAHRAIN: u32 = 15;
    pub const SUBLANG_ARABIC_QATAR: u32 = 16;
    pub const SUBLANG_ARMENIAN_ARMENIA: u32 = 1;
    pub const SUBLANG_ASSAMESE_INDIA: u32 = 1;
    pub const SUBLANG_AZERI_LATIN: u32 = 1;
    pub const SUBLANG_AZERI_CYRILLIC: u32 = 2;
    pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN: u32 = 1;
    pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC: u32 = 2;
    pub const SUBLANG_BANGLA_INDIA: u32 = 1;
    pub const SUBLANG_BANGLA_BANGLADESH: u32 = 2;
    pub const SUBLANG_BASHKIR_RUSSIA: u32 = 1;
    pub const SUBLANG_BASQUE_BASQUE: u32 = 1;
    pub const SUBLANG_BELARUSIAN_BELARUS: u32 = 1;
    pub const SUBLANG_BENGALI_INDIA: u32 = 1;
    pub const SUBLANG_BENGALI_BANGLADESH: u32 = 2;
    pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 5;
    pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 8;
    pub const SUBLANG_BRETON_FRANCE: u32 = 1;
    pub const SUBLANG_BULGARIAN_BULGARIA: u32 = 1;
    pub const SUBLANG_CATALAN_CATALAN: u32 = 1;
    pub const SUBLANG_CENTRAL_KURDISH_IRAQ: u32 = 1;
    pub const SUBLANG_CHEROKEE_CHEROKEE: u32 = 1;
    pub const SUBLANG_CHINESE_TRADITIONAL: u32 = 1;
    pub const SUBLANG_CHINESE_SIMPLIFIED: u32 = 2;
    pub const SUBLANG_CHINESE_HONGKONG: u32 = 3;
    pub const SUBLANG_CHINESE_SINGAPORE: u32 = 4;
    pub const SUBLANG_CHINESE_MACAU: u32 = 5;
    pub const SUBLANG_CORSICAN_FRANCE: u32 = 1;
    pub const SUBLANG_CZECH_CZECH_REPUBLIC: u32 = 1;
    pub const SUBLANG_CROATIAN_CROATIA: u32 = 1;
    pub const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 4;
    pub const SUBLANG_DANISH_DENMARK: u32 = 1;
    pub const SUBLANG_DARI_AFGHANISTAN: u32 = 1;
    pub const SUBLANG_DIVEHI_MALDIVES: u32 = 1;
    pub const SUBLANG_DUTCH: u32 = 1;
    pub const SUBLANG_DUTCH_BELGIAN: u32 = 2;
    pub const SUBLANG_ENGLISH_US: u32 = 1;
    pub const SUBLANG_ENGLISH_UK: u32 = 2;
    pub const SUBLANG_ENGLISH_AUS: u32 = 3;
    pub const SUBLANG_ENGLISH_CAN: u32 = 4;
    pub const SUBLANG_ENGLISH_NZ: u32 = 5;
    pub const SUBLANG_ENGLISH_EIRE: u32 = 6;
    pub const SUBLANG_ENGLISH_SOUTH_AFRICA: u32 = 7;
    pub const SUBLANG_ENGLISH_JAMAICA: u32 = 8;
    pub const SUBLANG_ENGLISH_CARIBBEAN: u32 = 9;
    pub const SUBLANG_ENGLISH_BELIZE: u32 = 10;
    pub const SUBLANG_ENGLISH_TRINIDAD: u32 = 11;
    pub const SUBLANG_ENGLISH_ZIMBABWE: u32 = 12;
    pub const SUBLANG_ENGLISH_PHILIPPINES: u32 = 13;
    pub const SUBLANG_ENGLISH_INDIA: u32 = 16;
    pub const SUBLANG_ENGLISH_MALAYSIA: u32 = 17;
    pub const SUBLANG_ENGLISH_SINGAPORE: u32 = 18;
    pub const SUBLANG_ESTONIAN_ESTONIA: u32 = 1;
    pub const SUBLANG_FAEROESE_FAROE_ISLANDS: u32 = 1;
    pub const SUBLANG_FILIPINO_PHILIPPINES: u32 = 1;
    pub const SUBLANG_FINNISH_FINLAND: u32 = 1;
    pub const SUBLANG_FRENCH: u32 = 1;
    pub const SUBLANG_FRENCH_BELGIAN: u32 = 2;
    pub const SUBLANG_FRENCH_CANADIAN: u32 = 3;
    pub const SUBLANG_FRENCH_SWISS: u32 = 4;
    pub const SUBLANG_FRENCH_LUXEMBOURG: u32 = 5;
    pub const SUBLANG_FRENCH_MONACO: u32 = 6;
    pub const SUBLANG_FRISIAN_NETHERLANDS: u32 = 1;
    pub const SUBLANG_FULAH_SENEGAL: u32 = 2;
    pub const SUBLANG_GALICIAN_GALICIAN: u32 = 1;
    pub const SUBLANG_GEORGIAN_GEORGIA: u32 = 1;
    pub const SUBLANG_GERMAN: u32 = 1;
    pub const SUBLANG_GERMAN_SWISS: u32 = 2;
    pub const SUBLANG_GERMAN_AUSTRIAN: u32 = 3;
    pub const SUBLANG_GERMAN_LUXEMBOURG: u32 = 4;
    pub const SUBLANG_GERMAN_LIECHTENSTEIN: u32 = 5;
    pub const SUBLANG_GREEK_GREECE: u32 = 1;
    pub const SUBLANG_GREENLANDIC_GREENLAND: u32 = 1;
    pub const SUBLANG_GUJARATI_INDIA: u32 = 1;
    pub const SUBLANG_HAUSA_NIGERIA_LATIN: u32 = 1;
    pub const SUBLANG_HAWAIIAN_US: u32 = 1;
    pub const SUBLANG_HEBREW_ISRAEL: u32 = 1;
    pub const SUBLANG_HINDI_INDIA: u32 = 1;
    pub const SUBLANG_HUNGARIAN_HUNGARY: u32 = 1;
    pub const SUBLANG_ICELANDIC_ICELAND: u32 = 1;
    pub const SUBLANG_IGBO_NIGERIA: u32 = 1;
    pub const SUBLANG_INDONESIAN_INDONESIA: u32 = 1;
    pub const SUBLANG_INUKTITUT_CANADA: u32 = 1;
    pub const SUBLANG_INUKTITUT_CANADA_LATIN: u32 = 2;
    pub const SUBLANG_IRISH_IRELAND: u32 = 2;
    pub const SUBLANG_ITALIAN: u32 = 1;
    pub const SUBLANG_ITALIAN_SWISS: u32 = 2;
    pub const SUBLANG_JAPANESE_JAPAN: u32 = 1;
    pub const SUBLANG_KANNADA_INDIA: u32 = 1;
    pub const SUBLANG_KASHMIRI_SASIA: u32 = 2;
    pub const SUBLANG_KASHMIRI_INDIA: u32 = 2;
    pub const SUBLANG_KAZAK_KAZAKHSTAN: u32 = 1;
    pub const SUBLANG_KHMER_CAMBODIA: u32 = 1;
    pub const SUBLANG_KICHE_GUATEMALA: u32 = 1;
    pub const SUBLANG_KINYARWANDA_RWANDA: u32 = 1;
    pub const SUBLANG_KONKANI_INDIA: u32 = 1;
    pub const SUBLANG_KOREAN: u32 = 1;
    pub const SUBLANG_KYRGYZ_KYRGYZSTAN: u32 = 1;
    pub const SUBLANG_LAO_LAO: u32 = 1;
    pub const SUBLANG_LATVIAN_LATVIA: u32 = 1;
    pub const SUBLANG_LITHUANIAN: u32 = 1;
    pub const SUBLANG_LOWER_SORBIAN_GERMANY: u32 = 2;
    pub const SUBLANG_LUXEMBOURGISH_LUXEMBOURG: u32 = 1;
    pub const SUBLANG_MACEDONIAN_MACEDONIA: u32 = 1;
    pub const SUBLANG_MALAY_MALAYSIA: u32 = 1;
    pub const SUBLANG_MALAY_BRUNEI_DARUSSALAM: u32 = 2;
    pub const SUBLANG_MALAYALAM_INDIA: u32 = 1;
    pub const SUBLANG_MALTESE_MALTA: u32 = 1;
    pub const SUBLANG_MAORI_NEW_ZEALAND: u32 = 1;
    pub const SUBLANG_MAPUDUNGUN_CHILE: u32 = 1;
    pub const SUBLANG_MARATHI_INDIA: u32 = 1;
    pub const SUBLANG_MOHAWK_MOHAWK: u32 = 1;
    pub const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA: u32 = 1;
    pub const SUBLANG_MONGOLIAN_PRC: u32 = 2;
    pub const SUBLANG_NEPALI_INDIA: u32 = 2;
    pub const SUBLANG_NEPALI_NEPAL: u32 = 1;
    pub const SUBLANG_NORWEGIAN_BOKMAL: u32 = 1;
    pub const SUBLANG_NORWEGIAN_NYNORSK: u32 = 2;
    pub const SUBLANG_OCCITAN_FRANCE: u32 = 1;
    pub const SUBLANG_ODIA_INDIA: u32 = 1;
    pub const SUBLANG_ORIYA_INDIA: u32 = 1;
    pub const SUBLANG_PASHTO_AFGHANISTAN: u32 = 1;
    pub const SUBLANG_PERSIAN_IRAN: u32 = 1;
    pub const SUBLANG_POLISH_POLAND: u32 = 1;
    pub const SUBLANG_PORTUGUESE: u32 = 2;
    pub const SUBLANG_PORTUGUESE_BRAZILIAN: u32 = 1;
    pub const SUBLANG_PULAR_SENEGAL: u32 = 2;
    pub const SUBLANG_PUNJABI_INDIA: u32 = 1;
    pub const SUBLANG_PUNJABI_PAKISTAN: u32 = 2;
    pub const SUBLANG_QUECHUA_BOLIVIA: u32 = 1;
    pub const SUBLANG_QUECHUA_ECUADOR: u32 = 2;
    pub const SUBLANG_QUECHUA_PERU: u32 = 3;
    pub const SUBLANG_ROMANIAN_ROMANIA: u32 = 1;
    pub const SUBLANG_ROMANSH_SWITZERLAND: u32 = 1;
    pub const SUBLANG_RUSSIAN_RUSSIA: u32 = 1;
    pub const SUBLANG_SAKHA_RUSSIA: u32 = 1;
    pub const SUBLANG_SAMI_NORTHERN_NORWAY: u32 = 1;
    pub const SUBLANG_SAMI_NORTHERN_SWEDEN: u32 = 2;
    pub const SUBLANG_SAMI_NORTHERN_FINLAND: u32 = 3;
    pub const SUBLANG_SAMI_LULE_NORWAY: u32 = 4;
    pub const SUBLANG_SAMI_LULE_SWEDEN: u32 = 5;
    pub const SUBLANG_SAMI_SOUTHERN_NORWAY: u32 = 6;
    pub const SUBLANG_SAMI_SOUTHERN_SWEDEN: u32 = 7;
    pub const SUBLANG_SAMI_SKOLT_FINLAND: u32 = 8;
    pub const SUBLANG_SAMI_INARI_FINLAND: u32 = 9;
    pub const SUBLANG_SANSKRIT_INDIA: u32 = 1;
    pub const SUBLANG_SCOTTISH_GAELIC: u32 = 1;
    pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 6;
    pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 7;
    pub const SUBLANG_SERBIAN_MONTENEGRO_LATIN: u32 = 11;
    pub const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC: u32 = 12;
    pub const SUBLANG_SERBIAN_SERBIA_LATIN: u32 = 9;
    pub const SUBLANG_SERBIAN_SERBIA_CYRILLIC: u32 = 10;
    pub const SUBLANG_SERBIAN_CROATIA: u32 = 1;
    pub const SUBLANG_SERBIAN_LATIN: u32 = 2;
    pub const SUBLANG_SERBIAN_CYRILLIC: u32 = 3;
    pub const SUBLANG_SINDHI_INDIA: u32 = 1;
    pub const SUBLANG_SINDHI_PAKISTAN: u32 = 2;
    pub const SUBLANG_SINDHI_AFGHANISTAN: u32 = 2;
    pub const SUBLANG_SINHALESE_SRI_LANKA: u32 = 1;
    pub const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA: u32 = 1;
    pub const SUBLANG_SLOVAK_SLOVAKIA: u32 = 1;
    pub const SUBLANG_SLOVENIAN_SLOVENIA: u32 = 1;
    pub const SUBLANG_SPANISH: u32 = 1;
    pub const SUBLANG_SPANISH_MEXICAN: u32 = 2;
    pub const SUBLANG_SPANISH_MODERN: u32 = 3;
    pub const SUBLANG_SPANISH_GUATEMALA: u32 = 4;
    pub const SUBLANG_SPANISH_COSTA_RICA: u32 = 5;
    pub const SUBLANG_SPANISH_PANAMA: u32 = 6;
    pub const SUBLANG_SPANISH_DOMINICAN_REPUBLIC: u32 = 7;
    pub const SUBLANG_SPANISH_VENEZUELA: u32 = 8;
    pub const SUBLANG_SPANISH_COLOMBIA: u32 = 9;
    pub const SUBLANG_SPANISH_PERU: u32 = 10;
    pub const SUBLANG_SPANISH_ARGENTINA: u32 = 11;
    pub const SUBLANG_SPANISH_ECUADOR: u32 = 12;
    pub const SUBLANG_SPANISH_CHILE: u32 = 13;
    pub const SUBLANG_SPANISH_URUGUAY: u32 = 14;
    pub const SUBLANG_SPANISH_PARAGUAY: u32 = 15;
    pub const SUBLANG_SPANISH_BOLIVIA: u32 = 16;
    pub const SUBLANG_SPANISH_EL_SALVADOR: u32 = 17;
    pub const SUBLANG_SPANISH_HONDURAS: u32 = 18;
    pub const SUBLANG_SPANISH_NICARAGUA: u32 = 19;
    pub const SUBLANG_SPANISH_PUERTO_RICO: u32 = 20;
    pub const SUBLANG_SPANISH_US: u32 = 21;
    pub const SUBLANG_SWAHILI_KENYA: u32 = 1;
    pub const SUBLANG_SWEDISH: u32 = 1;
    pub const SUBLANG_SWEDISH_FINLAND: u32 = 2;
    pub const SUBLANG_SYRIAC_SYRIA: u32 = 1;
    pub const SUBLANG_TAJIK_TAJIKISTAN: u32 = 1;
    pub const SUBLANG_TAMAZIGHT_ALGERIA_LATIN: u32 = 2;
    pub const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH: u32 = 4;
    pub const SUBLANG_TAMIL_INDIA: u32 = 1;
    pub const SUBLANG_TAMIL_SRI_LANKA: u32 = 2;
    pub const SUBLANG_TATAR_RUSSIA: u32 = 1;
    pub const SUBLANG_TELUGU_INDIA: u32 = 1;
    pub const SUBLANG_THAI_THAILAND: u32 = 1;
    pub const SUBLANG_TIBETAN_PRC: u32 = 1;
    pub const SUBLANG_TIGRIGNA_ERITREA: u32 = 2;
    pub const SUBLANG_TIGRINYA_ERITREA: u32 = 2;
    pub const SUBLANG_TIGRINYA_ETHIOPIA: u32 = 1;
    pub const SUBLANG_TSWANA_BOTSWANA: u32 = 2;
    pub const SUBLANG_TSWANA_SOUTH_AFRICA: u32 = 1;
    pub const SUBLANG_TURKISH_TURKEY: u32 = 1;
    pub const SUBLANG_TURKMEN_TURKMENISTAN: u32 = 1;
    pub const SUBLANG_UIGHUR_PRC: u32 = 1;
    pub const SUBLANG_UKRAINIAN_UKRAINE: u32 = 1;
    pub const SUBLANG_UPPER_SORBIAN_GERMANY: u32 = 1;
    pub const SUBLANG_URDU_PAKISTAN: u32 = 1;
    pub const SUBLANG_URDU_INDIA: u32 = 2;
    pub const SUBLANG_UZBEK_LATIN: u32 = 1;
    pub const SUBLANG_UZBEK_CYRILLIC: u32 = 2;
    pub const SUBLANG_VALENCIAN_VALENCIA: u32 = 2;
    pub const SUBLANG_VIETNAMESE_VIETNAM: u32 = 1;
    pub const SUBLANG_WELSH_UNITED_KINGDOM: u32 = 1;
    pub const SUBLANG_WOLOF_SENEGAL: u32 = 1;
    pub const SUBLANG_XHOSA_SOUTH_AFRICA: u32 = 1;
    pub const SUBLANG_YAKUT_RUSSIA: u32 = 1;
    pub const SUBLANG_YI_PRC: u32 = 1;
    pub const SUBLANG_YORUBA_NIGERIA: u32 = 1;
    pub const SUBLANG_ZULU_SOUTH_AFRICA: u32 = 1;
    pub const SORT_DEFAULT: u32 = 0;
    pub const SORT_INVARIANT_MATH: u32 = 1;
    pub const SORT_JAPANESE_XJIS: u32 = 0;
    pub const SORT_JAPANESE_UNICODE: u32 = 1;
    pub const SORT_JAPANESE_RADICALSTROKE: u32 = 4;
    pub const SORT_CHINESE_BIG5: u32 = 0;
    pub const SORT_CHINESE_PRCP: u32 = 0;
    pub const SORT_CHINESE_UNICODE: u32 = 1;
    pub const SORT_CHINESE_PRC: u32 = 2;
    pub const SORT_CHINESE_BOPOMOFO: u32 = 3;
    pub const SORT_CHINESE_RADICALSTROKE: u32 = 4;
    pub const SORT_KOREAN_KSC: u32 = 0;
    pub const SORT_KOREAN_UNICODE: u32 = 1;
    pub const SORT_GERMAN_PHONE_BOOK: u32 = 1;
    pub const SORT_HUNGARIAN_DEFAULT: u32 = 0;
    pub const SORT_HUNGARIAN_TECHNICAL: u32 = 1;
    pub const SORT_GEORGIAN_TRADITIONAL: u32 = 0;
    pub const SORT_GEORGIAN_MODERN: u32 = 1;
    pub const NLS_VALID_LOCALE_MASK: u32 = 1048575;
    pub const LOCALE_NAME_MAX_LENGTH: u32 = 85;
    pub const LOCALE_TRANSIENT_KEYBOARD1: u32 = 8192;
    pub const LOCALE_TRANSIENT_KEYBOARD2: u32 = 9216;
    pub const LOCALE_TRANSIENT_KEYBOARD3: u32 = 10240;
    pub const LOCALE_TRANSIENT_KEYBOARD4: u32 = 11264;
    pub const MAXIMUM_WAIT_OBJECTS: u32 = 64;
    pub const MAXIMUM_SUSPEND_COUNT: u32 = 127;
    pub const _MM_HINT_T0: u32 = 1;
    pub const _MM_HINT_T1: u32 = 2;
    pub const _MM_HINT_T2: u32 = 3;
    pub const _MM_HINT_NTA: u32 = 0;
    pub const PF_TEMPORAL_LEVEL_1: u32 = 1;
    pub const PF_TEMPORAL_LEVEL_2: u32 = 2;
    pub const PF_TEMPORAL_LEVEL_3: u32 = 3;
    pub const PF_NON_TEMPORAL_LEVEL_ALL: u32 = 0;
    pub const EXCEPTION_READ_FAULT: u32 = 0;
    pub const EXCEPTION_WRITE_FAULT: u32 = 1;
    pub const EXCEPTION_EXECUTE_FAULT: u32 = 8;
    pub const CONTEXT_AMD64: u32 = 1048576;
    pub const CONTEXT_CONTROL: u32 = 1048577;
    pub const CONTEXT_INTEGER: u32 = 1048578;
    pub const CONTEXT_SEGMENTS: u32 = 1048580;
    pub const CONTEXT_FLOATING_POINT: u32 = 1048584;
    pub const CONTEXT_DEBUG_REGISTERS: u32 = 1048592;
    pub const CONTEXT_FULL: u32 = 1048587;
    pub const CONTEXT_ALL: u32 = 1048607;
    pub const CONTEXT_XSTATE: u32 = 1048640;
    pub const CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
    pub const CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
    pub const CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
    pub const CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
    pub const INITIAL_MXCSR: u32 = 8064;
    pub const INITIAL_FPCSR: u32 = 639;
    pub const RUNTIME_FUNCTION_INDIRECT: u32 = 1;
    pub const UNW_FLAG_NHANDLER: u32 = 0;
    pub const UNW_FLAG_EHANDLER: u32 = 1;
    pub const UNW_FLAG_UHANDLER: u32 = 2;
    pub const UNW_FLAG_CHAININFO: u32 = 4;
    pub const UNW_FLAG_NO_EPILOGUE: u32 = 2147483648;
    pub const UNWIND_CHAIN_LIMIT: u32 = 32;
    pub const UNWIND_HISTORY_TABLE_SIZE: u32 = 12;
    pub const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME: &[u8; 34usize] =
        b"OutOfProcessFunctionTableCallback\0";
    pub const WOW64_CONTEXT_i386: u32 = 65536;
    pub const WOW64_CONTEXT_i486: u32 = 65536;
    pub const WOW64_CONTEXT_CONTROL: u32 = 65537;
    pub const WOW64_CONTEXT_INTEGER: u32 = 65538;
    pub const WOW64_CONTEXT_SEGMENTS: u32 = 65540;
    pub const WOW64_CONTEXT_FLOATING_POINT: u32 = 65544;
    pub const WOW64_CONTEXT_DEBUG_REGISTERS: u32 = 65552;
    pub const WOW64_CONTEXT_EXTENDED_REGISTERS: u32 = 65568;
    pub const WOW64_CONTEXT_FULL: u32 = 65543;
    pub const WOW64_CONTEXT_ALL: u32 = 65599;
    pub const WOW64_CONTEXT_XSTATE: u32 = 65600;
    pub const WOW64_CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
    pub const WOW64_CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
    pub const WOW64_CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
    pub const WOW64_CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
    pub const WOW64_SIZE_OF_80387_REGISTERS: u32 = 80;
    pub const WOW64_MAXIMUM_SUPPORTED_EXTENSION: u32 = 512;
    pub const EXCEPTION_NONCONTINUABLE: u32 = 1;
    pub const EXCEPTION_UNWINDING: u32 = 2;
    pub const EXCEPTION_EXIT_UNWIND: u32 = 4;
    pub const EXCEPTION_STACK_INVALID: u32 = 8;
    pub const EXCEPTION_NESTED_CALL: u32 = 16;
    pub const EXCEPTION_TARGET_UNWIND: u32 = 32;
    pub const EXCEPTION_COLLIDED_UNWIND: u32 = 64;
    pub const EXCEPTION_UNWIND: u32 = 102;
    pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15;
    pub const DELETE: u32 = 65536;
    pub const READ_CONTROL: u32 = 131072;
    pub const WRITE_DAC: u32 = 262144;
    pub const WRITE_OWNER: u32 = 524288;
    pub const SYNCHRONIZE: u32 = 1048576;
    pub const STANDARD_RIGHTS_REQUIRED: u32 = 983040;
    pub const STANDARD_RIGHTS_READ: u32 = 131072;
    pub const STANDARD_RIGHTS_WRITE: u32 = 131072;
    pub const STANDARD_RIGHTS_EXECUTE: u32 = 131072;
    pub const STANDARD_RIGHTS_ALL: u32 = 2031616;
    pub const SPECIFIC_RIGHTS_ALL: u32 = 65535;
    pub const ACCESS_SYSTEM_SECURITY: u32 = 16777216;
    pub const MAXIMUM_ALLOWED: u32 = 33554432;
    pub const GENERIC_READ: u32 = 2147483648;
    pub const GENERIC_WRITE: u32 = 1073741824;
    pub const GENERIC_EXECUTE: u32 = 536870912;
    pub const GENERIC_ALL: u32 = 268435456;
    pub const SID_REVISION: u32 = 1;
    pub const SID_MAX_SUB_AUTHORITIES: u32 = 15;
    pub const SID_RECOMMENDED_SUB_AUTHORITIES: u32 = 1;
    pub const SECURITY_MAX_SID_STRING_CHARACTERS: u32 = 187;
    pub const SID_HASH_SIZE: u32 = 32;
    pub const SECURITY_NULL_RID: u32 = 0;
    pub const SECURITY_WORLD_RID: u32 = 0;
    pub const SECURITY_LOCAL_RID: u32 = 0;
    pub const SECURITY_LOCAL_LOGON_RID: u32 = 1;
    pub const SECURITY_CREATOR_OWNER_RID: u32 = 0;
    pub const SECURITY_CREATOR_GROUP_RID: u32 = 1;
    pub const SECURITY_CREATOR_OWNER_SERVER_RID: u32 = 2;
    pub const SECURITY_CREATOR_GROUP_SERVER_RID: u32 = 3;
    pub const SECURITY_CREATOR_OWNER_RIGHTS_RID: u32 = 4;
    pub const SECURITY_DIALUP_RID: u32 = 1;
    pub const SECURITY_NETWORK_RID: u32 = 2;
    pub const SECURITY_BATCH_RID: u32 = 3;
    pub const SECURITY_INTERACTIVE_RID: u32 = 4;
    pub const SECURITY_LOGON_IDS_RID: u32 = 5;
    pub const SECURITY_LOGON_IDS_RID_COUNT: u32 = 3;
    pub const SECURITY_SERVICE_RID: u32 = 6;
    pub const SECURITY_ANONYMOUS_LOGON_RID: u32 = 7;
    pub const SECURITY_PROXY_RID: u32 = 8;
    pub const SECURITY_ENTERPRISE_CONTROLLERS_RID: u32 = 9;
    pub const SECURITY_SERVER_LOGON_RID: u32 = 9;
    pub const SECURITY_PRINCIPAL_SELF_RID: u32 = 10;
    pub const SECURITY_AUTHENTICATED_USER_RID: u32 = 11;
    pub const SECURITY_RESTRICTED_CODE_RID: u32 = 12;
    pub const SECURITY_TERMINAL_SERVER_RID: u32 = 13;
    pub const SECURITY_REMOTE_LOGON_RID: u32 = 14;
    pub const SECURITY_THIS_ORGANIZATION_RID: u32 = 15;
    pub const SECURITY_IUSER_RID: u32 = 17;
    pub const SECURITY_LOCAL_SYSTEM_RID: u32 = 18;
    pub const SECURITY_LOCAL_SERVICE_RID: u32 = 19;
    pub const SECURITY_NETWORK_SERVICE_RID: u32 = 20;
    pub const SECURITY_NT_NON_UNIQUE: u32 = 21;
    pub const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT: u32 = 3;
    pub const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID: u32 = 22;
    pub const SECURITY_BUILTIN_DOMAIN_RID: u32 = 32;
    pub const SECURITY_WRITE_RESTRICTED_CODE_RID: u32 = 33;
    pub const SECURITY_PACKAGE_BASE_RID: u32 = 64;
    pub const SECURITY_PACKAGE_RID_COUNT: u32 = 2;
    pub const SECURITY_PACKAGE_NTLM_RID: u32 = 10;
    pub const SECURITY_PACKAGE_SCHANNEL_RID: u32 = 14;
    pub const SECURITY_PACKAGE_DIGEST_RID: u32 = 21;
    pub const SECURITY_CRED_TYPE_BASE_RID: u32 = 65;
    pub const SECURITY_CRED_TYPE_RID_COUNT: u32 = 2;
    pub const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID: u32 = 1;
    pub const SECURITY_MIN_BASE_RID: u32 = 80;
    pub const SECURITY_SERVICE_ID_BASE_RID: u32 = 80;
    pub const SECURITY_SERVICE_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_RESERVED_ID_BASE_RID: u32 = 81;
    pub const SECURITY_APPPOOL_ID_BASE_RID: u32 = 82;
    pub const SECURITY_APPPOOL_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_VIRTUALSERVER_ID_BASE_RID: u32 = 83;
    pub const SECURITY_VIRTUALSERVER_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID: u32 = 84;
    pub const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID: u32 = 85;
    pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_WMIHOST_ID_BASE_RID: u32 = 86;
    pub const SECURITY_WMIHOST_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_TASK_ID_BASE_RID: u32 = 87;
    pub const SECURITY_NFS_ID_BASE_RID: u32 = 88;
    pub const SECURITY_COM_ID_BASE_RID: u32 = 89;
    pub const SECURITY_WINDOW_MANAGER_BASE_RID: u32 = 90;
    pub const SECURITY_RDV_GFX_BASE_RID: u32 = 91;
    pub const SECURITY_DASHOST_ID_BASE_RID: u32 = 92;
    pub const SECURITY_DASHOST_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_USERMANAGER_ID_BASE_RID: u32 = 93;
    pub const SECURITY_USERMANAGER_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_WINRM_ID_BASE_RID: u32 = 94;
    pub const SECURITY_WINRM_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_CCG_ID_BASE_RID: u32 = 95;
    pub const SECURITY_UMFD_BASE_RID: u32 = 96;
    pub const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT: u32 = 6;
    pub const SECURITY_MAX_BASE_RID: u32 = 111;
    pub const SECURITY_MAX_ALWAYS_FILTERED: u32 = 999;
    pub const SECURITY_MIN_NEVER_FILTERED: u32 = 1000;
    pub const SECURITY_OTHER_ORGANIZATION_RID: u32 = 1000;
    pub const SECURITY_WINDOWSMOBILE_ID_BASE_RID: u32 = 112;
    pub const SECURITY_INSTALLER_GROUP_CAPABILITY_BASE: u32 = 32;
    pub const SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT: u32 = 9;
    pub const SECURITY_INSTALLER_CAPABILITY_RID_COUNT: u32 = 10;
    pub const SECURITY_LOCAL_ACCOUNT_RID: u32 = 113;
    pub const SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID: u32 = 114;
    pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED: u32 = 496;
    pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS: u32 = 497;
    pub const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS: u32 = 498;
    pub const FOREST_USER_RID_MAX: u32 = 499;
    pub const DOMAIN_USER_RID_ADMIN: u32 = 500;
    pub const DOMAIN_USER_RID_GUEST: u32 = 501;
    pub const DOMAIN_USER_RID_KRBTGT: u32 = 502;
    pub const DOMAIN_USER_RID_DEFAULT_ACCOUNT: u32 = 503;
    pub const DOMAIN_USER_RID_WDAG_ACCOUNT: u32 = 504;
    pub const DOMAIN_USER_RID_MAX: u32 = 999;
    pub const DOMAIN_GROUP_RID_ADMINS: u32 = 512;
    pub const DOMAIN_GROUP_RID_USERS: u32 = 513;
    pub const DOMAIN_GROUP_RID_GUESTS: u32 = 514;
    pub const DOMAIN_GROUP_RID_COMPUTERS: u32 = 515;
    pub const DOMAIN_GROUP_RID_CONTROLLERS: u32 = 516;
    pub const DOMAIN_GROUP_RID_CERT_ADMINS: u32 = 517;
    pub const DOMAIN_GROUP_RID_SCHEMA_ADMINS: u32 = 518;
    pub const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS: u32 = 519;
    pub const DOMAIN_GROUP_RID_POLICY_ADMINS: u32 = 520;
    pub const DOMAIN_GROUP_RID_READONLY_CONTROLLERS: u32 = 521;
    pub const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS: u32 = 522;
    pub const DOMAIN_GROUP_RID_CDC_RESERVED: u32 = 524;
    pub const DOMAIN_GROUP_RID_PROTECTED_USERS: u32 = 525;
    pub const DOMAIN_GROUP_RID_KEY_ADMINS: u32 = 526;
    pub const DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS: u32 = 527;
    pub const DOMAIN_ALIAS_RID_ADMINS: u32 = 544;
    pub const DOMAIN_ALIAS_RID_USERS: u32 = 545;
    pub const DOMAIN_ALIAS_RID_GUESTS: u32 = 546;
    pub const DOMAIN_ALIAS_RID_POWER_USERS: u32 = 547;
    pub const DOMAIN_ALIAS_RID_ACCOUNT_OPS: u32 = 548;
    pub const DOMAIN_ALIAS_RID_SYSTEM_OPS: u32 = 549;
    pub const DOMAIN_ALIAS_RID_PRINT_OPS: u32 = 550;
    pub const DOMAIN_ALIAS_RID_BACKUP_OPS: u32 = 551;
    pub const DOMAIN_ALIAS_RID_REPLICATOR: u32 = 552;
    pub const DOMAIN_ALIAS_RID_RAS_SERVERS: u32 = 553;
    pub const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS: u32 = 554;
    pub const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS: u32 = 555;
    pub const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS: u32 = 556;
    pub const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS: u32 = 557;
    pub const DOMAIN_ALIAS_RID_MONITORING_USERS: u32 = 558;
    pub const DOMAIN_ALIAS_RID_LOGGING_USERS: u32 = 559;
    pub const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS: u32 = 560;
    pub const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS: u32 = 561;
    pub const DOMAIN_ALIAS_RID_DCOM_USERS: u32 = 562;
    pub const DOMAIN_ALIAS_RID_IUSERS: u32 = 568;
    pub const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS: u32 = 569;
    pub const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP: u32 = 571;
    pub const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP: u32 = 572;
    pub const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP: u32 = 573;
    pub const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP: u32 = 574;
    pub const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS: u32 = 575;
    pub const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS: u32 = 576;
    pub const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS: u32 = 577;
    pub const DOMAIN_ALIAS_RID_HYPER_V_ADMINS: u32 = 578;
    pub const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS: u32 = 579;
    pub const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS: u32 = 580;
    pub const DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT: u32 = 581;
    pub const DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS: u32 = 582;
    pub const DOMAIN_ALIAS_RID_DEVICE_OWNERS: u32 = 583;
    pub const SECURITY_APP_PACKAGE_BASE_RID: u32 = 2;
    pub const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT: u32 = 2;
    pub const SECURITY_APP_PACKAGE_RID_COUNT: u32 = 8;
    pub const SECURITY_CAPABILITY_BASE_RID: u32 = 3;
    pub const SECURITY_CAPABILITY_APP_RID: u32 = 1024;
    pub const SECURITY_BUILTIN_CAPABILITY_RID_COUNT: u32 = 2;
    pub const SECURITY_CAPABILITY_RID_COUNT: u32 = 5;
    pub const SECURITY_PARENT_PACKAGE_RID_COUNT: u32 = 8;
    pub const SECURITY_CHILD_PACKAGE_RID_COUNT: u32 = 12;
    pub const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE: u32 = 1;
    pub const SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE: u32 = 2;
    pub const SECURITY_CAPABILITY_INTERNET_CLIENT: u32 = 1;
    pub const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER: u32 = 2;
    pub const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER: u32 = 3;
    pub const SECURITY_CAPABILITY_PICTURES_LIBRARY: u32 = 4;
    pub const SECURITY_CAPABILITY_VIDEOS_LIBRARY: u32 = 5;
    pub const SECURITY_CAPABILITY_MUSIC_LIBRARY: u32 = 6;
    pub const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY: u32 = 7;
    pub const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION: u32 = 8;
    pub const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES: u32 = 9;
    pub const SECURITY_CAPABILITY_REMOVABLE_STORAGE: u32 = 10;
    pub const SECURITY_CAPABILITY_APPOINTMENTS: u32 = 11;
    pub const SECURITY_CAPABILITY_CONTACTS: u32 = 12;
    pub const SECURITY_CAPABILITY_INTERNET_EXPLORER: u32 = 4096;
    pub const SECURITY_MANDATORY_UNTRUSTED_RID: u32 = 0;
    pub const SECURITY_MANDATORY_LOW_RID: u32 = 4096;
    pub const SECURITY_MANDATORY_MEDIUM_RID: u32 = 8192;
    pub const SECURITY_MANDATORY_MEDIUM_PLUS_RID: u32 = 8448;
    pub const SECURITY_MANDATORY_HIGH_RID: u32 = 12288;
    pub const SECURITY_MANDATORY_SYSTEM_RID: u32 = 16384;
    pub const SECURITY_MANDATORY_PROTECTED_PROCESS_RID: u32 = 20480;
    pub const SECURITY_MANDATORY_MAXIMUM_USER_RID: u32 = 16384;
    pub const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT: u32 = 1;
    pub const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID: u32 = 1;
    pub const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID: u32 = 2;
    pub const SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID: u32 = 3;
    pub const SECURITY_AUTHENTICATION_KEY_TRUST_RID: u32 = 4;
    pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID: u32 = 5;
    pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID: u32 = 6;
    pub const SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT: u32 = 2;
    pub const SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID: u32 = 1024;
    pub const SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID: u32 = 512;
    pub const SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID: u32 = 0;
    pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID: u32 = 8192;
    pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID: u32 = 4096;
    pub const SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID: u32 = 2048;
    pub const SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID: u32 = 1536;
    pub const SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID: u32 = 1024;
    pub const SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID: u32 = 0;
    pub const SECURITY_TRUSTED_INSTALLER_RID1: u32 = 956008885;
    pub const SECURITY_TRUSTED_INSTALLER_RID2: u32 = 3418522649;
    pub const SECURITY_TRUSTED_INSTALLER_RID3: u32 = 1831038044;
    pub const SECURITY_TRUSTED_INSTALLER_RID4: u32 = 1853292631;
    pub const SECURITY_TRUSTED_INSTALLER_RID5: u32 = 2271478464;
    pub const SE_GROUP_MANDATORY: u32 = 1;
    pub const SE_GROUP_ENABLED_BY_DEFAULT: u32 = 2;
    pub const SE_GROUP_ENABLED: u32 = 4;
    pub const SE_GROUP_OWNER: u32 = 8;
    pub const SE_GROUP_USE_FOR_DENY_ONLY: u32 = 16;
    pub const SE_GROUP_INTEGRITY: u32 = 32;
    pub const SE_GROUP_INTEGRITY_ENABLED: u32 = 64;
    pub const SE_GROUP_LOGON_ID: u32 = 3221225472;
    pub const SE_GROUP_RESOURCE: u32 = 536870912;
    pub const SE_GROUP_VALID_ATTRIBUTES: u32 = 3758096511;
    pub const ACL_REVISION: u32 = 2;
    pub const ACL_REVISION_DS: u32 = 4;
    pub const ACL_REVISION1: u32 = 1;
    pub const ACL_REVISION2: u32 = 2;
    pub const ACL_REVISION3: u32 = 3;
    pub const ACL_REVISION4: u32 = 4;
    pub const MAX_ACL_REVISION: u32 = 4;
    pub const ACCESS_MIN_MS_ACE_TYPE: u32 = 0;
    pub const ACCESS_ALLOWED_ACE_TYPE: u32 = 0;
    pub const ACCESS_DENIED_ACE_TYPE: u32 = 1;
    pub const SYSTEM_AUDIT_ACE_TYPE: u32 = 2;
    pub const SYSTEM_ALARM_ACE_TYPE: u32 = 3;
    pub const ACCESS_MAX_MS_V2_ACE_TYPE: u32 = 3;
    pub const ACCESS_ALLOWED_COMPOUND_ACE_TYPE: u32 = 4;
    pub const ACCESS_MAX_MS_V3_ACE_TYPE: u32 = 4;
    pub const ACCESS_MIN_MS_OBJECT_ACE_TYPE: u32 = 5;
    pub const ACCESS_ALLOWED_OBJECT_ACE_TYPE: u32 = 5;
    pub const ACCESS_DENIED_OBJECT_ACE_TYPE: u32 = 6;
    pub const SYSTEM_AUDIT_OBJECT_ACE_TYPE: u32 = 7;
    pub const SYSTEM_ALARM_OBJECT_ACE_TYPE: u32 = 8;
    pub const ACCESS_MAX_MS_OBJECT_ACE_TYPE: u32 = 8;
    pub const ACCESS_MAX_MS_V4_ACE_TYPE: u32 = 8;
    pub const ACCESS_MAX_MS_ACE_TYPE: u32 = 8;
    pub const ACCESS_ALLOWED_CALLBACK_ACE_TYPE: u32 = 9;
    pub const ACCESS_DENIED_CALLBACK_ACE_TYPE: u32 = 10;
    pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE: u32 = 11;
    pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE: u32 = 12;
    pub const SYSTEM_AUDIT_CALLBACK_ACE_TYPE: u32 = 13;
    pub const SYSTEM_ALARM_CALLBACK_ACE_TYPE: u32 = 14;
    pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE: u32 = 15;
    pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE: u32 = 16;
    pub const SYSTEM_MANDATORY_LABEL_ACE_TYPE: u32 = 17;
    pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE: u32 = 18;
    pub const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE: u32 = 19;
    pub const SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE: u32 = 20;
    pub const SYSTEM_ACCESS_FILTER_ACE_TYPE: u32 = 21;
    pub const ACCESS_MAX_MS_V5_ACE_TYPE: u32 = 21;
    pub const OBJECT_INHERIT_ACE: u32 = 1;
    pub const CONTAINER_INHERIT_ACE: u32 = 2;
    pub const NO_PROPAGATE_INHERIT_ACE: u32 = 4;
    pub const INHERIT_ONLY_ACE: u32 = 8;
    pub const INHERITED_ACE: u32 = 16;
    pub const VALID_INHERIT_FLAGS: u32 = 31;
    pub const CRITICAL_ACE_FLAG: u32 = 32;
    pub const SUCCESSFUL_ACCESS_ACE_FLAG: u32 = 64;
    pub const FAILED_ACCESS_ACE_FLAG: u32 = 128;
    pub const TRUST_PROTECTED_FILTER_ACE_FLAG: u32 = 64;
    pub const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP: u32 = 1;
    pub const SYSTEM_MANDATORY_LABEL_NO_READ_UP: u32 = 2;
    pub const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP: u32 = 4;
    pub const SYSTEM_MANDATORY_LABEL_VALID_MASK: u32 = 7;
    pub const SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK: u32 = 16777215;
    pub const SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK: u32 = 4294967295;
    pub const SYSTEM_ACCESS_FILTER_VALID_MASK: u32 = 16777215;
    pub const SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK: u32 = 4294967295;
    pub const ACE_OBJECT_TYPE_PRESENT: u32 = 1;
    pub const ACE_INHERITED_OBJECT_TYPE_PRESENT: u32 = 2;
    pub const SECURITY_DESCRIPTOR_REVISION: u32 = 1;
    pub const SECURITY_DESCRIPTOR_REVISION1: u32 = 1;
    pub const SE_OWNER_DEFAULTED: u32 = 1;
    pub const SE_GROUP_DEFAULTED: u32 = 2;
    pub const SE_DACL_PRESENT: u32 = 4;
    pub const SE_DACL_DEFAULTED: u32 = 8;
    pub const SE_SACL_PRESENT: u32 = 16;
    pub const SE_SACL_DEFAULTED: u32 = 32;
    pub const SE_DACL_AUTO_INHERIT_REQ: u32 = 256;
    pub const SE_SACL_AUTO_INHERIT_REQ: u32 = 512;
    pub const SE_DACL_AUTO_INHERITED: u32 = 1024;
    pub const SE_SACL_AUTO_INHERITED: u32 = 2048;
    pub const SE_DACL_PROTECTED: u32 = 4096;
    pub const SE_SACL_PROTECTED: u32 = 8192;
    pub const SE_RM_CONTROL_VALID: u32 = 16384;
    pub const SE_SELF_RELATIVE: u32 = 32768;
    pub const ACCESS_OBJECT_GUID: u32 = 0;
    pub const ACCESS_PROPERTY_SET_GUID: u32 = 1;
    pub const ACCESS_PROPERTY_GUID: u32 = 2;
    pub const ACCESS_MAX_LEVEL: u32 = 4;
    pub const AUDIT_ALLOW_NO_PRIVILEGE: u32 = 1;
    pub const ACCESS_DS_SOURCE_A: &[u8; 3usize] = b"DS\0";
    pub const ACCESS_DS_SOURCE_W: &[u8; 3usize] = b"DS\0";
    pub const ACCESS_DS_OBJECT_TYPE_NAME_A: &[u8; 25usize] = b"Directory Service Object\0";
    pub const ACCESS_DS_OBJECT_TYPE_NAME_W: &[u8; 25usize] = b"Directory Service Object\0";
    pub const SE_PRIVILEGE_ENABLED_BY_DEFAULT: u32 = 1;
    pub const SE_PRIVILEGE_ENABLED: u32 = 2;
    pub const SE_PRIVILEGE_REMOVED: u32 = 4;
    pub const SE_PRIVILEGE_USED_FOR_ACCESS: u32 = 2147483648;
    pub const SE_PRIVILEGE_VALID_ATTRIBUTES: u32 = 2147483655;
    pub const PRIVILEGE_SET_ALL_NECESSARY: u32 = 1;
    pub const ACCESS_REASON_TYPE_MASK: u32 = 16711680;
    pub const ACCESS_REASON_DATA_MASK: u32 = 65535;
    pub const ACCESS_REASON_STAGING_MASK: u32 = 2147483648;
    pub const ACCESS_REASON_EXDATA_MASK: u32 = 2130706432;
    pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE: u32 = 1;
    pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE: u32 = 2;
    pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE: u32 = 4;
    pub const SE_SECURITY_DESCRIPTOR_VALID_FLAGS: u32 = 7;
    pub const SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING: u32 = 8;
    pub const SE_ACCESS_CHECK_VALID_FLAGS: u32 = 8;
    pub const SE_ACTIVATE_AS_USER_CAPABILITY: &[u8; 15usize] = b"activateAsUser\0";
    pub const SE_CONSTRAINED_IMPERSONATION_CAPABILITY: &[u8; 25usize] =
        b"constrainedImpersonation\0";
    pub const SE_SESSION_IMPERSONATION_CAPABILITY: &[u8; 21usize] = b"sessionImpersonation\0";
    pub const SE_MUMA_CAPABILITY: &[u8; 5usize] = b"muma\0";
    pub const SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY: &[u8; 23usize] = b"developmentModeNetwork\0";
    pub const TOKEN_ASSIGN_PRIMARY: u32 = 1;
    pub const TOKEN_DUPLICATE: u32 = 2;
    pub const TOKEN_IMPERSONATE: u32 = 4;
    pub const TOKEN_QUERY: u32 = 8;
    pub const TOKEN_QUERY_SOURCE: u32 = 16;
    pub const TOKEN_ADJUST_PRIVILEGES: u32 = 32;
    pub const TOKEN_ADJUST_GROUPS: u32 = 64;
    pub const TOKEN_ADJUST_DEFAULT: u32 = 128;
    pub const TOKEN_ADJUST_SESSIONID: u32 = 256;
    pub const TOKEN_ALL_ACCESS_P: u32 = 983295;
    pub const TOKEN_ALL_ACCESS: u32 = 983551;
    pub const TOKEN_READ: u32 = 131080;
    pub const TOKEN_WRITE: u32 = 131296;
    pub const TOKEN_EXECUTE: u32 = 131072;
    pub const TOKEN_TRUST_CONSTRAINT_MASK: u32 = 131096;
    pub const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8: u32 = 24;
    pub const TOKEN_ACCESS_PSEUDO_HANDLE: u32 = 24;
    pub const TOKEN_MANDATORY_POLICY_OFF: u32 = 0;
    pub const TOKEN_MANDATORY_POLICY_NO_WRITE_UP: u32 = 1;
    pub const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN: u32 = 2;
    pub const TOKEN_MANDATORY_POLICY_VALID_MASK: u32 = 3;
    pub const POLICY_AUDIT_SUBCATEGORY_COUNT: u32 = 59;
    pub const TOKEN_SOURCE_LENGTH: u32 = 8;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID: u32 = 0;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64: u32 = 1;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64: u32 = 2;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING: u32 = 3;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN: u32 = 4;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID: u32 = 5;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN: u32 = 6;
    pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING: u32 = 16;
    pub const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE: u32 = 1;
    pub const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE: u32 = 2;
    pub const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY: u32 = 4;
    pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT: u32 = 8;
    pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED: u32 = 16;
    pub const CLAIM_SECURITY_ATTRIBUTE_MANDATORY: u32 = 32;
    pub const CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS: u32 = 63;
    pub const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS: u32 = 4294901760;
    pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1: u32 = 1;
    pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION: u32 = 1;
    pub const SECURITY_DYNAMIC_TRACKING: u32 = 1;
    pub const SECURITY_STATIC_TRACKING: u32 = 0;
    pub const DISABLE_MAX_PRIVILEGE: u32 = 1;
    pub const SANDBOX_INERT: u32 = 2;
    pub const LUA_TOKEN: u32 = 4;
    pub const WRITE_RESTRICTED: u32 = 8;
    pub const OWNER_SECURITY_INFORMATION: u32 = 1;
    pub const GROUP_SECURITY_INFORMATION: u32 = 2;
    pub const DACL_SECURITY_INFORMATION: u32 = 4;
    pub const SACL_SECURITY_INFORMATION: u32 = 8;
    pub const LABEL_SECURITY_INFORMATION: u32 = 16;
    pub const ATTRIBUTE_SECURITY_INFORMATION: u32 = 32;
    pub const SCOPE_SECURITY_INFORMATION: u32 = 64;
    pub const PROCESS_TRUST_LABEL_SECURITY_INFORMATION: u32 = 128;
    pub const ACCESS_FILTER_SECURITY_INFORMATION: u32 = 256;
    pub const BACKUP_SECURITY_INFORMATION: u32 = 65536;
    pub const PROTECTED_DACL_SECURITY_INFORMATION: u32 = 2147483648;
    pub const PROTECTED_SACL_SECURITY_INFORMATION: u32 = 1073741824;
    pub const UNPROTECTED_DACL_SECURITY_INFORMATION: u32 = 536870912;
    pub const UNPROTECTED_SACL_SECURITY_INFORMATION: u32 = 268435456;
    pub const SE_SIGNING_LEVEL_UNCHECKED: u32 = 0;
    pub const SE_SIGNING_LEVEL_UNSIGNED: u32 = 1;
    pub const SE_SIGNING_LEVEL_ENTERPRISE: u32 = 2;
    pub const SE_SIGNING_LEVEL_CUSTOM_1: u32 = 3;
    pub const SE_SIGNING_LEVEL_DEVELOPER: u32 = 3;
    pub const SE_SIGNING_LEVEL_AUTHENTICODE: u32 = 4;
    pub const SE_SIGNING_LEVEL_CUSTOM_2: u32 = 5;
    pub const SE_SIGNING_LEVEL_STORE: u32 = 6;
    pub const SE_SIGNING_LEVEL_CUSTOM_3: u32 = 7;
    pub const SE_SIGNING_LEVEL_ANTIMALWARE: u32 = 7;
    pub const SE_SIGNING_LEVEL_MICROSOFT: u32 = 8;
    pub const SE_SIGNING_LEVEL_CUSTOM_4: u32 = 9;
    pub const SE_SIGNING_LEVEL_CUSTOM_5: u32 = 10;
    pub const SE_SIGNING_LEVEL_DYNAMIC_CODEGEN: u32 = 11;
    pub const SE_SIGNING_LEVEL_WINDOWS: u32 = 12;
    pub const SE_SIGNING_LEVEL_CUSTOM_7: u32 = 13;
    pub const SE_SIGNING_LEVEL_WINDOWS_TCB: u32 = 14;
    pub const SE_SIGNING_LEVEL_CUSTOM_6: u32 = 15;
    pub const SE_LEARNING_MODE_FLAG_PERMISSIVE: u32 = 1;
    pub const PROCESS_TERMINATE: u32 = 1;
    pub const PROCESS_CREATE_THREAD: u32 = 2;
    pub const PROCESS_SET_SESSIONID: u32 = 4;
    pub const PROCESS_VM_OPERATION: u32 = 8;
    pub const PROCESS_VM_READ: u32 = 16;
    pub const PROCESS_VM_WRITE: u32 = 32;
    pub const PROCESS_DUP_HANDLE: u32 = 64;
    pub const PROCESS_CREATE_PROCESS: u32 = 128;
    pub const PROCESS_SET_QUOTA: u32 = 256;
    pub const PROCESS_SET_INFORMATION: u32 = 512;
    pub const PROCESS_QUERY_INFORMATION: u32 = 1024;
    pub const PROCESS_SUSPEND_RESUME: u32 = 2048;
    pub const PROCESS_QUERY_LIMITED_INFORMATION: u32 = 4096;
    pub const PROCESS_SET_LIMITED_INFORMATION: u32 = 8192;
    pub const PROCESS_ALL_ACCESS: u32 = 2097151;
    pub const THREAD_TERMINATE: u32 = 1;
    pub const THREAD_SUSPEND_RESUME: u32 = 2;
    pub const THREAD_GET_CONTEXT: u32 = 8;
    pub const THREAD_SET_CONTEXT: u32 = 16;
    pub const THREAD_QUERY_INFORMATION: u32 = 64;
    pub const THREAD_SET_INFORMATION: u32 = 32;
    pub const THREAD_SET_THREAD_TOKEN: u32 = 128;
    pub const THREAD_IMPERSONATE: u32 = 256;
    pub const THREAD_DIRECT_IMPERSONATION: u32 = 512;
    pub const THREAD_SET_LIMITED_INFORMATION: u32 = 1024;
    pub const THREAD_QUERY_LIMITED_INFORMATION: u32 = 2048;
    pub const THREAD_RESUME: u32 = 4096;
    pub const THREAD_ALL_ACCESS: u32 = 2097151;
    pub const JOB_OBJECT_ASSIGN_PROCESS: u32 = 1;
    pub const JOB_OBJECT_SET_ATTRIBUTES: u32 = 2;
    pub const JOB_OBJECT_QUERY: u32 = 4;
    pub const JOB_OBJECT_TERMINATE: u32 = 8;
    pub const JOB_OBJECT_SET_SECURITY_ATTRIBUTES: u32 = 16;
    pub const JOB_OBJECT_IMPERSONATE: u32 = 32;
    pub const JOB_OBJECT_ALL_ACCESS: u32 = 2031679;
    pub const FLS_MAXIMUM_AVAILABLE: u32 = 4080;
    pub const TLS_MINIMUM_AVAILABLE: u32 = 64;
    pub const THREAD_DYNAMIC_CODE_ALLOW: u32 = 1;
    pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
    pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
    pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
    pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
    pub const MEMORY_PRIORITY_LOWEST: u32 = 0;
    pub const MEMORY_PRIORITY_VERY_LOW: u32 = 1;
    pub const MEMORY_PRIORITY_LOW: u32 = 2;
    pub const MEMORY_PRIORITY_MEDIUM: u32 = 3;
    pub const MEMORY_PRIORITY_BELOW_NORMAL: u32 = 4;
    pub const MEMORY_PRIORITY_NORMAL: u32 = 5;
    pub const DYNAMIC_EH_CONTINUATION_TARGET_ADD: u32 = 1;
    pub const DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED: u32 = 2;
    pub const DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD: u32 = 1;
    pub const DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED: u32 = 2;
    pub const QUOTA_LIMITS_HARDWS_MIN_ENABLE: u32 = 1;
    pub const QUOTA_LIMITS_HARDWS_MIN_DISABLE: u32 = 2;
    pub const QUOTA_LIMITS_HARDWS_MAX_ENABLE: u32 = 4;
    pub const QUOTA_LIMITS_HARDWS_MAX_DISABLE: u32 = 8;
    pub const QUOTA_LIMITS_USE_DEFAULT_LIMITS: u32 = 16;
    pub const MAX_HW_COUNTERS: u32 = 16;
    pub const THREAD_PROFILING_FLAG_DISPATCH: u32 = 1;
    pub const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG: u32 = 64;
    pub const JOB_OBJECT_TERMINATE_AT_END_OF_JOB: u32 = 0;
    pub const JOB_OBJECT_POST_AT_END_OF_JOB: u32 = 1;
    pub const JOB_OBJECT_MSG_END_OF_JOB_TIME: u32 = 1;
    pub const JOB_OBJECT_MSG_END_OF_PROCESS_TIME: u32 = 2;
    pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT: u32 = 3;
    pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO: u32 = 4;
    pub const JOB_OBJECT_MSG_NEW_PROCESS: u32 = 6;
    pub const JOB_OBJECT_MSG_EXIT_PROCESS: u32 = 7;
    pub const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS: u32 = 8;
    pub const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT: u32 = 9;
    pub const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT: u32 = 10;
    pub const JOB_OBJECT_MSG_NOTIFICATION_LIMIT: u32 = 11;
    pub const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT: u32 = 12;
    pub const JOB_OBJECT_MSG_SILO_TERMINATED: u32 = 13;
    pub const JOB_OBJECT_MSG_MINIMUM: u32 = 1;
    pub const JOB_OBJECT_MSG_MAXIMUM: u32 = 13;
    pub const JOB_OBJECT_VALID_COMPLETION_FILTER: u32 = 16382;
    pub const JOB_OBJECT_LIMIT_WORKINGSET: u32 = 1;
    pub const JOB_OBJECT_LIMIT_PROCESS_TIME: u32 = 2;
    pub const JOB_OBJECT_LIMIT_JOB_TIME: u32 = 4;
    pub const JOB_OBJECT_LIMIT_ACTIVE_PROCESS: u32 = 8;
    pub const JOB_OBJECT_LIMIT_AFFINITY: u32 = 16;
    pub const JOB_OBJECT_LIMIT_PRIORITY_CLASS: u32 = 32;
    pub const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME: u32 = 64;
    pub const JOB_OBJECT_LIMIT_SCHEDULING_CLASS: u32 = 128;
    pub const JOB_OBJECT_LIMIT_PROCESS_MEMORY: u32 = 256;
    pub const JOB_OBJECT_LIMIT_JOB_MEMORY: u32 = 512;
    pub const JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH: u32 = 512;
    pub const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION: u32 = 1024;
    pub const JOB_OBJECT_LIMIT_BREAKAWAY_OK: u32 = 2048;
    pub const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK: u32 = 4096;
    pub const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: u32 = 8192;
    pub const JOB_OBJECT_LIMIT_SUBSET_AFFINITY: u32 = 16384;
    pub const JOB_OBJECT_LIMIT_JOB_MEMORY_LOW: u32 = 32768;
    pub const JOB_OBJECT_LIMIT_JOB_READ_BYTES: u32 = 65536;
    pub const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES: u32 = 131072;
    pub const JOB_OBJECT_LIMIT_RATE_CONTROL: u32 = 262144;
    pub const JOB_OBJECT_LIMIT_CPU_RATE_CONTROL: u32 = 262144;
    pub const JOB_OBJECT_LIMIT_IO_RATE_CONTROL: u32 = 524288;
    pub const JOB_OBJECT_LIMIT_NET_RATE_CONTROL: u32 = 1048576;
    pub const JOB_OBJECT_LIMIT_VALID_FLAGS: u32 = 524287;
    pub const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS: u32 = 255;
    pub const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS: u32 = 32767;
    pub const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS: u32 = 2064900;
    pub const JOB_OBJECT_UILIMIT_NONE: u32 = 0;
    pub const JOB_OBJECT_UILIMIT_HANDLES: u32 = 1;
    pub const JOB_OBJECT_UILIMIT_READCLIPBOARD: u32 = 2;
    pub const JOB_OBJECT_UILIMIT_WRITECLIPBOARD: u32 = 4;
    pub const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS: u32 = 8;
    pub const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS: u32 = 16;
    pub const JOB_OBJECT_UILIMIT_GLOBALATOMS: u32 = 32;
    pub const JOB_OBJECT_UILIMIT_DESKTOP: u32 = 64;
    pub const JOB_OBJECT_UILIMIT_EXITWINDOWS: u32 = 128;
    pub const JOB_OBJECT_UILIMIT_ALL: u32 = 255;
    pub const JOB_OBJECT_UI_VALID_FLAGS: u32 = 255;
    pub const JOB_OBJECT_SECURITY_NO_ADMIN: u32 = 1;
    pub const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN: u32 = 2;
    pub const JOB_OBJECT_SECURITY_ONLY_TOKEN: u32 = 4;
    pub const JOB_OBJECT_SECURITY_FILTER_TOKENS: u32 = 8;
    pub const JOB_OBJECT_SECURITY_VALID_FLAGS: u32 = 15;
    pub const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE: u32 = 1;
    pub const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED: u32 = 2;
    pub const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP: u32 = 4;
    pub const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY: u32 = 8;
    pub const JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE: u32 = 16;
    pub const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS: u32 = 31;
    pub const EVENT_MODIFY_STATE: u32 = 2;
    pub const EVENT_ALL_ACCESS: u32 = 2031619;
    pub const MUTANT_QUERY_STATE: u32 = 1;
    pub const MUTANT_ALL_ACCESS: u32 = 2031617;
    pub const SEMAPHORE_MODIFY_STATE: u32 = 2;
    pub const SEMAPHORE_ALL_ACCESS: u32 = 2031619;
    pub const TIMER_QUERY_STATE: u32 = 1;
    pub const TIMER_MODIFY_STATE: u32 = 2;
    pub const TIMER_ALL_ACCESS: u32 = 2031619;
    pub const TIME_ZONE_ID_UNKNOWN: u32 = 0;
    pub const TIME_ZONE_ID_STANDARD: u32 = 1;
    pub const TIME_ZONE_ID_DAYLIGHT: u32 = 2;
    pub const LTP_PC_SMT: u32 = 1;
    pub const CACHE_FULLY_ASSOCIATIVE: u32 = 255;
    pub const SYSTEM_CPU_SET_INFORMATION_PARKED: u32 = 1;
    pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED: u32 = 2;
    pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS: u32 = 4;
    pub const SYSTEM_CPU_SET_INFORMATION_REALTIME: u32 = 8;
    pub const PROCESSOR_INTEL_386: u32 = 386;
    pub const PROCESSOR_INTEL_486: u32 = 486;
    pub const PROCESSOR_INTEL_PENTIUM: u32 = 586;
    pub const PROCESSOR_INTEL_IA64: u32 = 2200;
    pub const PROCESSOR_AMD_X8664: u32 = 8664;
    pub const PROCESSOR_MIPS_R4000: u32 = 4000;
    pub const PROCESSOR_ALPHA_21064: u32 = 21064;
    pub const PROCESSOR_PPC_601: u32 = 601;
    pub const PROCESSOR_PPC_603: u32 = 603;
    pub const PROCESSOR_PPC_604: u32 = 604;
    pub const PROCESSOR_PPC_620: u32 = 620;
    pub const PROCESSOR_HITACHI_SH3: u32 = 10003;
    pub const PROCESSOR_HITACHI_SH3E: u32 = 10004;
    pub const PROCESSOR_HITACHI_SH4: u32 = 10005;
    pub const PROCESSOR_MOTOROLA_821: u32 = 821;
    pub const PROCESSOR_SHx_SH3: u32 = 103;
    pub const PROCESSOR_SHx_SH4: u32 = 104;
    pub const PROCESSOR_STRONGARM: u32 = 2577;
    pub const PROCESSOR_ARM720: u32 = 1824;
    pub const PROCESSOR_ARM820: u32 = 2080;
    pub const PROCESSOR_ARM920: u32 = 2336;
    pub const PROCESSOR_ARM_7TDMI: u32 = 70001;
    pub const PROCESSOR_OPTIL: u32 = 18767;
    pub const PROCESSOR_ARCHITECTURE_INTEL: u32 = 0;
    pub const PROCESSOR_ARCHITECTURE_MIPS: u32 = 1;
    pub const PROCESSOR_ARCHITECTURE_ALPHA: u32 = 2;
    pub const PROCESSOR_ARCHITECTURE_PPC: u32 = 3;
    pub const PROCESSOR_ARCHITECTURE_SHX: u32 = 4;
    pub const PROCESSOR_ARCHITECTURE_ARM: u32 = 5;
    pub const PROCESSOR_ARCHITECTURE_IA64: u32 = 6;
    pub const PROCESSOR_ARCHITECTURE_ALPHA64: u32 = 7;
    pub const PROCESSOR_ARCHITECTURE_MSIL: u32 = 8;
    pub const PROCESSOR_ARCHITECTURE_AMD64: u32 = 9;
    pub const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64: u32 = 10;
    pub const PROCESSOR_ARCHITECTURE_NEUTRAL: u32 = 11;
    pub const PROCESSOR_ARCHITECTURE_ARM64: u32 = 12;
    pub const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64: u32 = 13;
    pub const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64: u32 = 14;
    pub const PROCESSOR_ARCHITECTURE_UNKNOWN: u32 = 65535;
    pub const PF_FLOATING_POINT_PRECISION_ERRATA: u32 = 0;
    pub const PF_FLOATING_POINT_EMULATED: u32 = 1;
    pub const PF_COMPARE_EXCHANGE_DOUBLE: u32 = 2;
    pub const PF_MMX_INSTRUCTIONS_AVAILABLE: u32 = 3;
    pub const PF_PPC_MOVEMEM_64BIT_OK: u32 = 4;
    pub const PF_ALPHA_BYTE_INSTRUCTIONS: u32 = 5;
    pub const PF_XMMI_INSTRUCTIONS_AVAILABLE: u32 = 6;
    pub const PF_3DNOW_INSTRUCTIONS_AVAILABLE: u32 = 7;
    pub const PF_RDTSC_INSTRUCTION_AVAILABLE: u32 = 8;
    pub const PF_PAE_ENABLED: u32 = 9;
    pub const PF_XMMI64_INSTRUCTIONS_AVAILABLE: u32 = 10;
    pub const PF_SSE_DAZ_MODE_AVAILABLE: u32 = 11;
    pub const PF_NX_ENABLED: u32 = 12;
    pub const PF_SSE3_INSTRUCTIONS_AVAILABLE: u32 = 13;
    pub const PF_COMPARE_EXCHANGE128: u32 = 14;
    pub const PF_COMPARE64_EXCHANGE128: u32 = 15;
    pub const PF_CHANNELS_ENABLED: u32 = 16;
    pub const PF_XSAVE_ENABLED: u32 = 17;
    pub const PF_ARM_VFP_32_REGISTERS_AVAILABLE: u32 = 18;
    pub const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE: u32 = 19;
    pub const PF_SECOND_LEVEL_ADDRESS_TRANSLATION: u32 = 20;
    pub const PF_VIRT_FIRMWARE_ENABLED: u32 = 21;
    pub const PF_RDWRFSGSBASE_AVAILABLE: u32 = 22;
    pub const PF_FASTFAIL_AVAILABLE: u32 = 23;
    pub const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE: u32 = 24;
    pub const PF_ARM_64BIT_LOADSTORE_ATOMIC: u32 = 25;
    pub const PF_ARM_EXTERNAL_CACHE_AVAILABLE: u32 = 26;
    pub const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE: u32 = 27;
    pub const PF_RDRAND_INSTRUCTION_AVAILABLE: u32 = 28;
    pub const PF_ARM_V8_INSTRUCTIONS_AVAILABLE: u32 = 29;
    pub const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE: u32 = 30;
    pub const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE: u32 = 31;
    pub const PF_RDTSCP_INSTRUCTION_AVAILABLE: u32 = 32;
    pub const PF_RDPID_INSTRUCTION_AVAILABLE: u32 = 33;
    pub const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE: u32 = 34;
    pub const PF_MONITORX_INSTRUCTION_AVAILABLE: u32 = 35;
    pub const PF_SSSE3_INSTRUCTIONS_AVAILABLE: u32 = 36;
    pub const PF_SSE4_1_INSTRUCTIONS_AVAILABLE: u32 = 37;
    pub const PF_SSE4_2_INSTRUCTIONS_AVAILABLE: u32 = 38;
    pub const PF_AVX_INSTRUCTIONS_AVAILABLE: u32 = 39;
    pub const PF_AVX2_INSTRUCTIONS_AVAILABLE: u32 = 40;
    pub const PF_AVX512F_INSTRUCTIONS_AVAILABLE: u32 = 41;
    pub const XSTATE_LEGACY_FLOATING_POINT: u32 = 0;
    pub const XSTATE_LEGACY_SSE: u32 = 1;
    pub const XSTATE_GSSE: u32 = 2;
    pub const XSTATE_AVX: u32 = 2;
    pub const XSTATE_MPX_BNDREGS: u32 = 3;
    pub const XSTATE_MPX_BNDCSR: u32 = 4;
    pub const XSTATE_AVX512_KMASK: u32 = 5;
    pub const XSTATE_AVX512_ZMM_H: u32 = 6;
    pub const XSTATE_AVX512_ZMM: u32 = 7;
    pub const XSTATE_IPT: u32 = 8;
    pub const XSTATE_CET_U: u32 = 11;
    pub const XSTATE_LWP: u32 = 62;
    pub const MAXIMUM_XSTATE_FEATURES: u32 = 64;
    pub const XSTATE_COMPACTION_ENABLE: u32 = 63;
    pub const XSTATE_ALIGN_BIT: u32 = 1;
    pub const XSTATE_CONTROLFLAG_XSAVEOPT_MASK: u32 = 1;
    pub const XSTATE_CONTROLFLAG_XSAVEC_MASK: u32 = 2;
    pub const XSTATE_CONTROLFLAG_VALID_MASK: u32 = 3;
    pub const CFG_CALL_TARGET_VALID: u32 = 1;
    pub const CFG_CALL_TARGET_PROCESSED: u32 = 2;
    pub const CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID: u32 = 4;
    pub const SECTION_QUERY: u32 = 1;
    pub const SECTION_MAP_WRITE: u32 = 2;
    pub const SECTION_MAP_READ: u32 = 4;
    pub const SECTION_MAP_EXECUTE: u32 = 8;
    pub const SECTION_EXTEND_SIZE: u32 = 16;
    pub const SECTION_MAP_EXECUTE_EXPLICIT: u32 = 32;
    pub const SECTION_ALL_ACCESS: u32 = 983071;
    pub const SESSION_QUERY_ACCESS: u32 = 1;
    pub const SESSION_MODIFY_ACCESS: u32 = 2;
    pub const SESSION_ALL_ACCESS: u32 = 983043;
    pub const PAGE_NOACCESS: u32 = 1;
    pub const PAGE_READONLY: u32 = 2;
    pub const PAGE_READWRITE: u32 = 4;
    pub const PAGE_WRITECOPY: u32 = 8;
    pub const PAGE_EXECUTE: u32 = 16;
    pub const PAGE_EXECUTE_READ: u32 = 32;
    pub const PAGE_EXECUTE_READWRITE: u32 = 64;
    pub const PAGE_EXECUTE_WRITECOPY: u32 = 128;
    pub const PAGE_GUARD: u32 = 256;
    pub const PAGE_NOCACHE: u32 = 512;
    pub const PAGE_WRITECOMBINE: u32 = 1024;
    pub const PAGE_GRAPHICS_NOACCESS: u32 = 2048;
    pub const PAGE_GRAPHICS_READONLY: u32 = 4096;
    pub const PAGE_GRAPHICS_READWRITE: u32 = 8192;
    pub const PAGE_GRAPHICS_EXECUTE: u32 = 16384;
    pub const PAGE_GRAPHICS_EXECUTE_READ: u32 = 32768;
    pub const PAGE_GRAPHICS_EXECUTE_READWRITE: u32 = 65536;
    pub const PAGE_GRAPHICS_COHERENT: u32 = 131072;
    pub const PAGE_GRAPHICS_NOCACHE: u32 = 262144;
    pub const PAGE_ENCLAVE_THREAD_CONTROL: u32 = 2147483648;
    pub const PAGE_REVERT_TO_FILE_MAP: u32 = 2147483648;
    pub const PAGE_TARGETS_NO_UPDATE: u32 = 1073741824;
    pub const PAGE_TARGETS_INVALID: u32 = 1073741824;
    pub const PAGE_ENCLAVE_UNVALIDATED: u32 = 536870912;
    pub const PAGE_ENCLAVE_MASK: u32 = 268435456;
    pub const PAGE_ENCLAVE_DECOMMIT: u32 = 268435456;
    pub const PAGE_ENCLAVE_SS_FIRST: u32 = 268435457;
    pub const PAGE_ENCLAVE_SS_REST: u32 = 268435458;
    pub const MEM_COMMIT: u32 = 4096;
    pub const MEM_RESERVE: u32 = 8192;
    pub const MEM_REPLACE_PLACEHOLDER: u32 = 16384;
    pub const MEM_RESERVE_PLACEHOLDER: u32 = 262144;
    pub const MEM_RESET: u32 = 524288;
    pub const MEM_TOP_DOWN: u32 = 1048576;
    pub const MEM_WRITE_WATCH: u32 = 2097152;
    pub const MEM_PHYSICAL: u32 = 4194304;
    pub const MEM_ROTATE: u32 = 8388608;
    pub const MEM_DIFFERENT_IMAGE_BASE_OK: u32 = 8388608;
    pub const MEM_RESET_UNDO: u32 = 16777216;
    pub const MEM_LARGE_PAGES: u32 = 536870912;
    pub const MEM_4MB_PAGES: u32 = 2147483648;
    pub const MEM_64K_PAGES: u32 = 541065216;
    pub const MEM_UNMAP_WITH_TRANSIENT_BOOST: u32 = 1;
    pub const MEM_COALESCE_PLACEHOLDERS: u32 = 1;
    pub const MEM_PRESERVE_PLACEHOLDER: u32 = 2;
    pub const MEM_DECOMMIT: u32 = 16384;
    pub const MEM_RELEASE: u32 = 32768;
    pub const MEM_FREE: u32 = 65536;
    pub const MEM_EXTENDED_PARAMETER_GRAPHICS: u32 = 1;
    pub const MEM_EXTENDED_PARAMETER_NONPAGED: u32 = 2;
    pub const MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL: u32 = 4;
    pub const MEM_EXTENDED_PARAMETER_NONPAGED_LARGE: u32 = 8;
    pub const MEM_EXTENDED_PARAMETER_NONPAGED_HUGE: u32 = 16;
    pub const MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES: u32 = 32;
    pub const MEM_EXTENDED_PARAMETER_TYPE_BITS: u32 = 8;
    pub const SEC_PARTITION_OWNER_HANDLE: u32 = 262144;
    pub const SEC_64K_PAGES: u32 = 524288;
    pub const SEC_FILE: u32 = 8388608;
    pub const SEC_IMAGE: u32 = 16777216;
    pub const SEC_PROTECTED_IMAGE: u32 = 33554432;
    pub const SEC_RESERVE: u32 = 67108864;
    pub const SEC_COMMIT: u32 = 134217728;
    pub const SEC_NOCACHE: u32 = 268435456;
    pub const SEC_WRITECOMBINE: u32 = 1073741824;
    pub const SEC_LARGE_PAGES: u32 = 2147483648;
    pub const SEC_IMAGE_NO_EXECUTE: u32 = 285212672;
    pub const MEM_PRIVATE: u32 = 131072;
    pub const MEM_MAPPED: u32 = 262144;
    pub const MEM_IMAGE: u32 = 16777216;
    pub const WRITE_WATCH_FLAG_RESET: u32 = 1;
    pub const ENCLAVE_TYPE_SGX: u32 = 1;
    pub const ENCLAVE_TYPE_SGX2: u32 = 2;
    pub const ENCLAVE_TYPE_VBS: u32 = 16;
    pub const ENCLAVE_VBS_FLAG_DEBUG: u32 = 1;
    pub const ENCLAVE_TYPE_VBS_BASIC: u32 = 17;
    pub const VBS_BASIC_PAGE_MEASURED_DATA: u32 = 1;
    pub const VBS_BASIC_PAGE_UNMEASURED_DATA: u32 = 2;
    pub const VBS_BASIC_PAGE_ZERO_FILL: u32 = 3;
    pub const VBS_BASIC_PAGE_THREAD_DESCRIPTOR: u32 = 4;
    pub const VBS_BASIC_PAGE_SYSTEM_CALL: u32 = 5;
    pub const FILE_READ_DATA: u32 = 1;
    pub const FILE_LIST_DIRECTORY: u32 = 1;
    pub const FILE_WRITE_DATA: u32 = 2;
    pub const FILE_ADD_FILE: u32 = 2;
    pub const FILE_APPEND_DATA: u32 = 4;
    pub const FILE_ADD_SUBDIRECTORY: u32 = 4;
    pub const FILE_CREATE_PIPE_INSTANCE: u32 = 4;
    pub const FILE_READ_EA: u32 = 8;
    pub const FILE_WRITE_EA: u32 = 16;
    pub const FILE_EXECUTE: u32 = 32;
    pub const FILE_TRAVERSE: u32 = 32;
    pub const FILE_DELETE_CHILD: u32 = 64;
    pub const FILE_READ_ATTRIBUTES: u32 = 128;
    pub const FILE_WRITE_ATTRIBUTES: u32 = 256;
    pub const FILE_ALL_ACCESS: u32 = 2032127;
    pub const FILE_GENERIC_READ: u32 = 1179785;
    pub const FILE_GENERIC_WRITE: u32 = 1179926;
    pub const FILE_GENERIC_EXECUTE: u32 = 1179808;
    pub const FILE_SHARE_READ: u32 = 1;
    pub const FILE_SHARE_WRITE: u32 = 2;
    pub const FILE_SHARE_DELETE: u32 = 4;
    pub const FILE_ATTRIBUTE_READONLY: u32 = 1;
    pub const FILE_ATTRIBUTE_HIDDEN: u32 = 2;
    pub const FILE_ATTRIBUTE_SYSTEM: u32 = 4;
    pub const FILE_ATTRIBUTE_DIRECTORY: u32 = 16;
    pub const FILE_ATTRIBUTE_ARCHIVE: u32 = 32;
    pub const FILE_ATTRIBUTE_DEVICE: u32 = 64;
    pub const FILE_ATTRIBUTE_NORMAL: u32 = 128;
    pub const FILE_ATTRIBUTE_TEMPORARY: u32 = 256;
    pub const FILE_ATTRIBUTE_SPARSE_FILE: u32 = 512;
    pub const FILE_ATTRIBUTE_REPARSE_POINT: u32 = 1024;
    pub const FILE_ATTRIBUTE_COMPRESSED: u32 = 2048;
    pub const FILE_ATTRIBUTE_OFFLINE: u32 = 4096;
    pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: u32 = 8192;
    pub const FILE_ATTRIBUTE_ENCRYPTED: u32 = 16384;
    pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: u32 = 32768;
    pub const FILE_ATTRIBUTE_VIRTUAL: u32 = 65536;
    pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: u32 = 131072;
    pub const FILE_ATTRIBUTE_EA: u32 = 262144;
    pub const FILE_ATTRIBUTE_PINNED: u32 = 524288;
    pub const FILE_ATTRIBUTE_UNPINNED: u32 = 1048576;
    pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: u32 = 262144;
    pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: u32 = 4194304;
    pub const TREE_CONNECT_ATTRIBUTE_PRIVACY: u32 = 16384;
    pub const TREE_CONNECT_ATTRIBUTE_INTEGRITY: u32 = 32768;
    pub const TREE_CONNECT_ATTRIBUTE_GLOBAL: u32 = 4;
    pub const TREE_CONNECT_ATTRIBUTE_PINNED: u32 = 2;
    pub const FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL: u32 = 536870912;
    pub const FILE_NOTIFY_CHANGE_FILE_NAME: u32 = 1;
    pub const FILE_NOTIFY_CHANGE_DIR_NAME: u32 = 2;
    pub const FILE_NOTIFY_CHANGE_ATTRIBUTES: u32 = 4;
    pub const FILE_NOTIFY_CHANGE_SIZE: u32 = 8;
    pub const FILE_NOTIFY_CHANGE_LAST_WRITE: u32 = 16;
    pub const FILE_NOTIFY_CHANGE_LAST_ACCESS: u32 = 32;
    pub const FILE_NOTIFY_CHANGE_CREATION: u32 = 64;
    pub const FILE_NOTIFY_CHANGE_SECURITY: u32 = 256;
    pub const FILE_ACTION_ADDED: u32 = 1;
    pub const FILE_ACTION_REMOVED: u32 = 2;
    pub const FILE_ACTION_MODIFIED: u32 = 3;
    pub const FILE_ACTION_RENAMED_OLD_NAME: u32 = 4;
    pub const FILE_ACTION_RENAMED_NEW_NAME: u32 = 5;
    pub const FILE_CASE_SENSITIVE_SEARCH: u32 = 1;
    pub const FILE_CASE_PRESERVED_NAMES: u32 = 2;
    pub const FILE_UNICODE_ON_DISK: u32 = 4;
    pub const FILE_PERSISTENT_ACLS: u32 = 8;
    pub const FILE_FILE_COMPRESSION: u32 = 16;
    pub const FILE_VOLUME_QUOTAS: u32 = 32;
    pub const FILE_SUPPORTS_SPARSE_FILES: u32 = 64;
    pub const FILE_SUPPORTS_REPARSE_POINTS: u32 = 128;
    pub const FILE_SUPPORTS_REMOTE_STORAGE: u32 = 256;
    pub const FILE_RETURNS_CLEANUP_RESULT_INFO: u32 = 512;
    pub const FILE_SUPPORTS_POSIX_UNLINK_RENAME: u32 = 1024;
    pub const FILE_VOLUME_IS_COMPRESSED: u32 = 32768;
    pub const FILE_SUPPORTS_OBJECT_IDS: u32 = 65536;
    pub const FILE_SUPPORTS_ENCRYPTION: u32 = 131072;
    pub const FILE_NAMED_STREAMS: u32 = 262144;
    pub const FILE_READ_ONLY_VOLUME: u32 = 524288;
    pub const FILE_SEQUENTIAL_WRITE_ONCE: u32 = 1048576;
    pub const FILE_SUPPORTS_TRANSACTIONS: u32 = 2097152;
    pub const FILE_SUPPORTS_HARD_LINKS: u32 = 4194304;
    pub const FILE_SUPPORTS_EXTENDED_ATTRIBUTES: u32 = 8388608;
    pub const FILE_SUPPORTS_OPEN_BY_FILE_ID: u32 = 16777216;
    pub const FILE_SUPPORTS_USN_JOURNAL: u32 = 33554432;
    pub const FILE_SUPPORTS_INTEGRITY_STREAMS: u32 = 67108864;
    pub const FILE_SUPPORTS_BLOCK_REFCOUNTING: u32 = 134217728;
    pub const FILE_SUPPORTS_SPARSE_VDL: u32 = 268435456;
    pub const FILE_DAX_VOLUME: u32 = 536870912;
    pub const FILE_SUPPORTS_GHOSTING: u32 = 1073741824;
    pub const FILE_CS_FLAG_CASE_SENSITIVE_DIR: u32 = 1;
    pub const FLUSH_FLAGS_FILE_DATA_ONLY: u32 = 1;
    pub const FLUSH_FLAGS_NO_SYNC: u32 = 2;
    pub const FLUSH_FLAGS_FILE_DATA_SYNC_ONLY: u32 = 4;
    pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: u32 = 16384;
    pub const IO_REPARSE_TAG_RESERVED_ZERO: u32 = 0;
    pub const IO_REPARSE_TAG_RESERVED_ONE: u32 = 1;
    pub const IO_REPARSE_TAG_RESERVED_TWO: u32 = 2;
    pub const IO_REPARSE_TAG_RESERVED_RANGE: u32 = 2;
    pub const IO_REPARSE_TAG_MOUNT_POINT: u32 = 2684354563;
    pub const IO_REPARSE_TAG_HSM: u32 = 3221225476;
    pub const IO_REPARSE_TAG_HSM2: u32 = 2147483654;
    pub const IO_REPARSE_TAG_SIS: u32 = 2147483655;
    pub const IO_REPARSE_TAG_WIM: u32 = 2147483656;
    pub const IO_REPARSE_TAG_CSV: u32 = 2147483657;
    pub const IO_REPARSE_TAG_DFS: u32 = 2147483658;
    pub const IO_REPARSE_TAG_SYMLINK: u32 = 2684354572;
    pub const IO_REPARSE_TAG_DFSR: u32 = 2147483666;
    pub const IO_REPARSE_TAG_DEDUP: u32 = 2147483667;
    pub const IO_REPARSE_TAG_NFS: u32 = 2147483668;
    pub const IO_REPARSE_TAG_FILE_PLACEHOLDER: u32 = 2147483669;
    pub const IO_REPARSE_TAG_WOF: u32 = 2147483671;
    pub const IO_REPARSE_TAG_WCI: u32 = 2147483672;
    pub const IO_REPARSE_TAG_WCI_1: u32 = 2415923224;
    pub const IO_REPARSE_TAG_GLOBAL_REPARSE: u32 = 2684354585;
    pub const IO_REPARSE_TAG_CLOUD: u32 = 2415919130;
    pub const IO_REPARSE_TAG_CLOUD_1: u32 = 2415923226;
    pub const IO_REPARSE_TAG_CLOUD_2: u32 = 2415927322;
    pub const IO_REPARSE_TAG_CLOUD_3: u32 = 2415931418;
    pub const IO_REPARSE_TAG_CLOUD_4: u32 = 2415935514;
    pub const IO_REPARSE_TAG_CLOUD_5: u32 = 2415939610;
    pub const IO_REPARSE_TAG_CLOUD_6: u32 = 2415943706;
    pub const IO_REPARSE_TAG_CLOUD_7: u32 = 2415947802;
    pub const IO_REPARSE_TAG_CLOUD_8: u32 = 2415951898;
    pub const IO_REPARSE_TAG_CLOUD_9: u32 = 2415955994;
    pub const IO_REPARSE_TAG_CLOUD_A: u32 = 2415960090;
    pub const IO_REPARSE_TAG_CLOUD_B: u32 = 2415964186;
    pub const IO_REPARSE_TAG_CLOUD_C: u32 = 2415968282;
    pub const IO_REPARSE_TAG_CLOUD_D: u32 = 2415972378;
    pub const IO_REPARSE_TAG_CLOUD_E: u32 = 2415976474;
    pub const IO_REPARSE_TAG_CLOUD_F: u32 = 2415980570;
    pub const IO_REPARSE_TAG_CLOUD_MASK: u32 = 61440;
    pub const IO_REPARSE_TAG_APPEXECLINK: u32 = 2147483675;
    pub const IO_REPARSE_TAG_PROJFS: u32 = 2415919132;
    pub const IO_REPARSE_TAG_STORAGE_SYNC: u32 = 2147483678;
    pub const IO_REPARSE_TAG_WCI_TOMBSTONE: u32 = 2684354591;
    pub const IO_REPARSE_TAG_UNHANDLED: u32 = 2147483680;
    pub const IO_REPARSE_TAG_ONEDRIVE: u32 = 2147483681;
    pub const IO_REPARSE_TAG_PROJFS_TOMBSTONE: u32 = 2684354594;
    pub const IO_REPARSE_TAG_AF_UNIX: u32 = 2147483683;
    pub const IO_REPARSE_TAG_WCI_LINK: u32 = 2684354599;
    pub const IO_REPARSE_TAG_WCI_LINK_1: u32 = 2684358695;
    pub const SCRUB_DATA_INPUT_FLAG_RESUME: u32 = 1;
    pub const SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC: u32 = 2;
    pub const SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA: u32 = 4;
    pub const SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY: u32 = 8;
    pub const SCRUB_DATA_INPUT_FLAG_SKIP_DATA: u32 = 16;
    pub const SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID: u32 = 32;
    pub const SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED: u32 = 64;
    pub const SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE: u32 = 1;
    pub const SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE: u32 = 65536;
    pub const SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED: u32 = 131072;
    pub const SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED: u32 = 262144;
    pub const SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS: u32 = 1;
    pub const IO_COMPLETION_MODIFY_STATE: u32 = 2;
    pub const IO_COMPLETION_ALL_ACCESS: u32 = 2031619;
    pub const IO_QOS_MAX_RESERVATION: u32 = 1000000000;
    pub const SMB_CCF_APP_INSTANCE_EA_NAME: &[u8; 29usize] = b"ClusteredApplicationInstance\0";
    pub const NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR: u32 = 1;
    pub const DUPLICATE_CLOSE_SOURCE: u32 = 1;
    pub const DUPLICATE_SAME_ACCESS: u32 = 2;
    pub const POWERBUTTON_ACTION_INDEX_NOTHING: u32 = 0;
    pub const POWERBUTTON_ACTION_INDEX_SLEEP: u32 = 1;
    pub const POWERBUTTON_ACTION_INDEX_HIBERNATE: u32 = 2;
    pub const POWERBUTTON_ACTION_INDEX_SHUTDOWN: u32 = 3;
    pub const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY: u32 = 4;
    pub const POWERBUTTON_ACTION_VALUE_NOTHING: u32 = 0;
    pub const POWERBUTTON_ACTION_VALUE_SLEEP: u32 = 2;
    pub const POWERBUTTON_ACTION_VALUE_HIBERNATE: u32 = 3;
    pub const POWERBUTTON_ACTION_VALUE_SHUTDOWN: u32 = 6;
    pub const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY: u32 = 8;
    pub const PERFSTATE_POLICY_CHANGE_IDEAL: u32 = 0;
    pub const PERFSTATE_POLICY_CHANGE_SINGLE: u32 = 1;
    pub const PERFSTATE_POLICY_CHANGE_ROCKET: u32 = 2;
    pub const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE: u32 = 3;
    pub const PERFSTATE_POLICY_CHANGE_DECREASE_MAX: u32 = 2;
    pub const PERFSTATE_POLICY_CHANGE_INCREASE_MAX: u32 = 3;
    pub const PROCESSOR_THROTTLE_DISABLED: u32 = 0;
    pub const PROCESSOR_THROTTLE_ENABLED: u32 = 1;
    pub const PROCESSOR_THROTTLE_AUTOMATIC: u32 = 2;
    pub const PROCESSOR_PERF_BOOST_POLICY_DISABLED: u32 = 0;
    pub const PROCESSOR_PERF_BOOST_POLICY_MAX: u32 = 100;
    pub const PROCESSOR_PERF_BOOST_MODE_DISABLED: u32 = 0;
    pub const PROCESSOR_PERF_BOOST_MODE_ENABLED: u32 = 1;
    pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE: u32 = 2;
    pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED: u32 = 3;
    pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE: u32 = 4;
    pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED: u32 = 5;
    pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED: u32 = 6;
    pub const PROCESSOR_PERF_BOOST_MODE_MAX: u32 = 6;
    pub const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED: u32 = 0;
    pub const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED: u32 = 1;
    pub const PROCESSOR_PERF_PERFORMANCE_PREFERENCE: u32 = 255;
    pub const PROCESSOR_PERF_ENERGY_PREFERENCE: u32 = 0;
    pub const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW: u32 = 0;
    pub const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW: u32 = 1270000000;
    pub const PROCESSOR_DUTY_CYCLING_DISABLED: u32 = 0;
    pub const PROCESSOR_DUTY_CYCLING_ENABLED: u32 = 1;
    pub const CORE_PARKING_POLICY_CHANGE_IDEAL: u32 = 0;
    pub const CORE_PARKING_POLICY_CHANGE_SINGLE: u32 = 1;
    pub const CORE_PARKING_POLICY_CHANGE_ROCKET: u32 = 2;
    pub const CORE_PARKING_POLICY_CHANGE_MULTISTEP: u32 = 3;
    pub const CORE_PARKING_POLICY_CHANGE_MAX: u32 = 3;
    pub const POWER_DEVICE_IDLE_POLICY_PERFORMANCE: u32 = 0;
    pub const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE: u32 = 1;
    pub const POWER_CONNECTIVITY_IN_STANDBY_DISABLED: u32 = 0;
    pub const POWER_CONNECTIVITY_IN_STANDBY_ENABLED: u32 = 1;
    pub const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED: u32 = 2;
    pub const POWER_DISCONNECTED_STANDBY_MODE_NORMAL: u32 = 0;
    pub const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE: u32 = 1;
    pub const POWER_SYSTEM_MAXIMUM: u32 = 7;
    pub const DIAGNOSTIC_REASON_VERSION: u32 = 0;
    pub const DIAGNOSTIC_REASON_SIMPLE_STRING: u32 = 1;
    pub const DIAGNOSTIC_REASON_DETAILED_STRING: u32 = 2;
    pub const DIAGNOSTIC_REASON_NOT_SPECIFIED: u32 = 2147483648;
    pub const DIAGNOSTIC_REASON_INVALID_FLAGS: i64 = -2147483656;
    pub const POWER_REQUEST_CONTEXT_VERSION: u32 = 0;
    pub const POWER_REQUEST_CONTEXT_SIMPLE_STRING: u32 = 1;
    pub const POWER_REQUEST_CONTEXT_DETAILED_STRING: u32 = 2;
    pub const PDCAP_D0_SUPPORTED: u32 = 1;
    pub const PDCAP_D1_SUPPORTED: u32 = 2;
    pub const PDCAP_D2_SUPPORTED: u32 = 4;
    pub const PDCAP_D3_SUPPORTED: u32 = 8;
    pub const PDCAP_WAKE_FROM_D0_SUPPORTED: u32 = 16;
    pub const PDCAP_WAKE_FROM_D1_SUPPORTED: u32 = 32;
    pub const PDCAP_WAKE_FROM_D2_SUPPORTED: u32 = 64;
    pub const PDCAP_WAKE_FROM_D3_SUPPORTED: u32 = 128;
    pub const PDCAP_WARM_EJECT_SUPPORTED: u32 = 256;
    pub const POWER_SETTING_VALUE_VERSION: u32 = 1;
    pub const POWER_PLATFORM_ROLE_V1: u32 = 1;
    pub const POWER_PLATFORM_ROLE_V2: u32 = 2;
    pub const POWER_PLATFORM_ROLE_VERSION: u32 = 2;
    pub const PROC_IDLE_BUCKET_COUNT: u32 = 6;
    pub const PROC_IDLE_BUCKET_COUNT_EX: u32 = 16;
    pub const ACPI_PPM_SOFTWARE_ALL: u32 = 252;
    pub const ACPI_PPM_SOFTWARE_ANY: u32 = 253;
    pub const ACPI_PPM_HARDWARE_ALL: u32 = 254;
    pub const MS_PPM_SOFTWARE_ALL: u32 = 1;
    pub const PPM_FIRMWARE_ACPI1C2: u32 = 1;
    pub const PPM_FIRMWARE_ACPI1C3: u32 = 2;
    pub const PPM_FIRMWARE_ACPI1TSTATES: u32 = 4;
    pub const PPM_FIRMWARE_CST: u32 = 8;
    pub const PPM_FIRMWARE_CSD: u32 = 16;
    pub const PPM_FIRMWARE_PCT: u32 = 32;
    pub const PPM_FIRMWARE_PSS: u32 = 64;
    pub const PPM_FIRMWARE_XPSS: u32 = 128;
    pub const PPM_FIRMWARE_PPC: u32 = 256;
    pub const PPM_FIRMWARE_PSD: u32 = 512;
    pub const PPM_FIRMWARE_PTC: u32 = 1024;
    pub const PPM_FIRMWARE_TSS: u32 = 2048;
    pub const PPM_FIRMWARE_TPC: u32 = 4096;
    pub const PPM_FIRMWARE_TSD: u32 = 8192;
    pub const PPM_FIRMWARE_PCCH: u32 = 16384;
    pub const PPM_FIRMWARE_PCCP: u32 = 32768;
    pub const PPM_FIRMWARE_OSC: u32 = 65536;
    pub const PPM_FIRMWARE_PDC: u32 = 131072;
    pub const PPM_FIRMWARE_CPC: u32 = 262144;
    pub const PPM_FIRMWARE_LPI: u32 = 524288;
    pub const PPM_PERFORMANCE_IMPLEMENTATION_NONE: u32 = 0;
    pub const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES: u32 = 1;
    pub const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1: u32 = 2;
    pub const PPM_PERFORMANCE_IMPLEMENTATION_CPPC: u32 = 3;
    pub const PPM_PERFORMANCE_IMPLEMENTATION_PEP: u32 = 4;
    pub const PPM_IDLE_IMPLEMENTATION_NONE: u32 = 0;
    pub const PPM_IDLE_IMPLEMENTATION_CSTATES: u32 = 1;
    pub const PPM_IDLE_IMPLEMENTATION_PEP: u32 = 2;
    pub const PPM_IDLE_IMPLEMENTATION_MICROPEP: u32 = 3;
    pub const PPM_IDLE_IMPLEMENTATION_LPISTATES: u32 = 4;
    pub const POWER_ACTION_QUERY_ALLOWED: u32 = 1;
    pub const POWER_ACTION_UI_ALLOWED: u32 = 2;
    pub const POWER_ACTION_OVERRIDE_APPS: u32 = 4;
    pub const POWER_ACTION_HIBERBOOT: u32 = 8;
    pub const POWER_ACTION_USER_NOTIFY: u32 = 16;
    pub const POWER_ACTION_DOZE_TO_HIBERNATE: u32 = 32;
    pub const POWER_ACTION_ACPI_CRITICAL: u32 = 16777216;
    pub const POWER_ACTION_ACPI_USER_NOTIFY: u32 = 33554432;
    pub const POWER_ACTION_DIRECTED_DRIPS: u32 = 67108864;
    pub const POWER_ACTION_PSEUDO_TRANSITION: u32 = 134217728;
    pub const POWER_ACTION_LIGHTEST_FIRST: u32 = 268435456;
    pub const POWER_ACTION_LOCK_CONSOLE: u32 = 536870912;
    pub const POWER_ACTION_DISABLE_WAKES: u32 = 1073741824;
    pub const POWER_ACTION_CRITICAL: u32 = 2147483648;
    pub const POWER_LEVEL_USER_NOTIFY_TEXT: u32 = 1;
    pub const POWER_LEVEL_USER_NOTIFY_SOUND: u32 = 2;
    pub const POWER_LEVEL_USER_NOTIFY_EXEC: u32 = 4;
    pub const POWER_USER_NOTIFY_BUTTON: u32 = 8;
    pub const POWER_USER_NOTIFY_SHUTDOWN: u32 = 16;
    pub const POWER_USER_NOTIFY_FORCED_SHUTDOWN: u32 = 32;
    pub const POWER_FORCE_TRIGGER_RESET: u32 = 2147483648;
    pub const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK: u32 = 7;
    pub const BATTERY_DISCHARGE_FLAGS_ENABLE: u32 = 2147483648;
    pub const NUM_DISCHARGE_POLICIES: u32 = 4;
    pub const DISCHARGE_POLICY_CRITICAL: u32 = 0;
    pub const DISCHARGE_POLICY_LOW: u32 = 1;
    pub const PROCESSOR_IDLESTATE_POLICY_COUNT: u32 = 3;
    pub const PO_THROTTLE_NONE: u32 = 0;
    pub const PO_THROTTLE_CONSTANT: u32 = 1;
    pub const PO_THROTTLE_DEGRADE: u32 = 2;
    pub const PO_THROTTLE_ADAPTIVE: u32 = 3;
    pub const PO_THROTTLE_MAXIMUM: u32 = 4;
    pub const HIBERFILE_TYPE_NONE: u32 = 0;
    pub const HIBERFILE_TYPE_REDUCED: u32 = 1;
    pub const HIBERFILE_TYPE_FULL: u32 = 2;
    pub const HIBERFILE_TYPE_MAX: u32 = 3;
    pub const IMAGE_DOS_SIGNATURE: u32 = 23117;
    pub const IMAGE_OS2_SIGNATURE: u32 = 17742;
    pub const IMAGE_OS2_SIGNATURE_LE: u32 = 17740;
    pub const IMAGE_VXD_SIGNATURE: u32 = 17740;
    pub const IMAGE_NT_SIGNATURE: u32 = 17744;
    pub const IMAGE_SIZEOF_FILE_HEADER: u32 = 20;
    pub const IMAGE_FILE_RELOCS_STRIPPED: u32 = 1;
    pub const IMAGE_FILE_EXECUTABLE_IMAGE: u32 = 2;
    pub const IMAGE_FILE_LINE_NUMS_STRIPPED: u32 = 4;
    pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED: u32 = 8;
    pub const IMAGE_FILE_AGGRESIVE_WS_TRIM: u32 = 16;
    pub const IMAGE_FILE_LARGE_ADDRESS_AWARE: u32 = 32;
    pub const IMAGE_FILE_BYTES_REVERSED_LO: u32 = 128;
    pub const IMAGE_FILE_32BIT_MACHINE: u32 = 256;
    pub const IMAGE_FILE_DEBUG_STRIPPED: u32 = 512;
    pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: u32 = 1024;
    pub const IMAGE_FILE_NET_RUN_FROM_SWAP: u32 = 2048;
    pub const IMAGE_FILE_SYSTEM: u32 = 4096;
    pub const IMAGE_FILE_DLL: u32 = 8192;
    pub const IMAGE_FILE_UP_SYSTEM_ONLY: u32 = 16384;
    pub const IMAGE_FILE_BYTES_REVERSED_HI: u32 = 32768;
    pub const IMAGE_FILE_MACHINE_UNKNOWN: u32 = 0;
    pub const IMAGE_FILE_MACHINE_TARGET_HOST: u32 = 1;
    pub const IMAGE_FILE_MACHINE_I386: u32 = 332;
    pub const IMAGE_FILE_MACHINE_R3000: u32 = 354;
    pub const IMAGE_FILE_MACHINE_R4000: u32 = 358;
    pub const IMAGE_FILE_MACHINE_R10000: u32 = 360;
    pub const IMAGE_FILE_MACHINE_WCEMIPSV2: u32 = 361;
    pub const IMAGE_FILE_MACHINE_ALPHA: u32 = 388;
    pub const IMAGE_FILE_MACHINE_SH3: u32 = 418;
    pub const IMAGE_FILE_MACHINE_SH3DSP: u32 = 419;
    pub const IMAGE_FILE_MACHINE_SH3E: u32 = 420;
    pub const IMAGE_FILE_MACHINE_SH4: u32 = 422;
    pub const IMAGE_FILE_MACHINE_SH5: u32 = 424;
    pub const IMAGE_FILE_MACHINE_ARM: u32 = 448;
    pub const IMAGE_FILE_MACHINE_THUMB: u32 = 450;
    pub const IMAGE_FILE_MACHINE_ARMNT: u32 = 452;
    pub const IMAGE_FILE_MACHINE_AM33: u32 = 467;
    pub const IMAGE_FILE_MACHINE_POWERPC: u32 = 496;
    pub const IMAGE_FILE_MACHINE_POWERPCFP: u32 = 497;
    pub const IMAGE_FILE_MACHINE_IA64: u32 = 512;
    pub const IMAGE_FILE_MACHINE_MIPS16: u32 = 614;
    pub const IMAGE_FILE_MACHINE_ALPHA64: u32 = 644;
    pub const IMAGE_FILE_MACHINE_MIPSFPU: u32 = 870;
    pub const IMAGE_FILE_MACHINE_MIPSFPU16: u32 = 1126;
    pub const IMAGE_FILE_MACHINE_AXP64: u32 = 644;
    pub const IMAGE_FILE_MACHINE_TRICORE: u32 = 1312;
    pub const IMAGE_FILE_MACHINE_CEF: u32 = 3311;
    pub const IMAGE_FILE_MACHINE_EBC: u32 = 3772;
    pub const IMAGE_FILE_MACHINE_AMD64: u32 = 34404;
    pub const IMAGE_FILE_MACHINE_M32R: u32 = 36929;
    pub const IMAGE_FILE_MACHINE_ARM64: u32 = 43620;
    pub const IMAGE_FILE_MACHINE_CEE: u32 = 49390;
    pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES: u32 = 16;
    pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC: u32 = 267;
    pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC: u32 = 523;
    pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC: u32 = 263;
    pub const IMAGE_NT_OPTIONAL_HDR_MAGIC: u32 = 523;
    pub const IMAGE_SUBSYSTEM_UNKNOWN: u32 = 0;
    pub const IMAGE_SUBSYSTEM_NATIVE: u32 = 1;
    pub const IMAGE_SUBSYSTEM_WINDOWS_GUI: u32 = 2;
    pub const IMAGE_SUBSYSTEM_WINDOWS_CUI: u32 = 3;
    pub const IMAGE_SUBSYSTEM_OS2_CUI: u32 = 5;
    pub const IMAGE_SUBSYSTEM_POSIX_CUI: u32 = 7;
    pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: u32 = 8;
    pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: u32 = 9;
    pub const IMAGE_SUBSYSTEM_EFI_APPLICATION: u32 = 10;
    pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: u32 = 11;
    pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: u32 = 12;
    pub const IMAGE_SUBSYSTEM_EFI_ROM: u32 = 13;
    pub const IMAGE_SUBSYSTEM_XBOX: u32 = 14;
    pub const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: u32 = 16;
    pub const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG: u32 = 17;
    pub const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: u32 = 32;
    pub const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: u32 = 64;
    pub const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: u32 = 128;
    pub const IMAGE_DLLCHARACTERISTICS_NX_COMPAT: u32 = 256;
    pub const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: u32 = 512;
    pub const IMAGE_DLLCHARACTERISTICS_NO_SEH: u32 = 1024;
    pub const IMAGE_DLLCHARACTERISTICS_NO_BIND: u32 = 2048;
    pub const IMAGE_DLLCHARACTERISTICS_APPCONTAINER: u32 = 4096;
    pub const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: u32 = 8192;
    pub const IMAGE_DLLCHARACTERISTICS_GUARD_CF: u32 = 16384;
    pub const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: u32 = 32768;
    pub const IMAGE_DIRECTORY_ENTRY_EXPORT: u32 = 0;
    pub const IMAGE_DIRECTORY_ENTRY_IMPORT: u32 = 1;
    pub const IMAGE_DIRECTORY_ENTRY_RESOURCE: u32 = 2;
    pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION: u32 = 3;
    pub const IMAGE_DIRECTORY_ENTRY_SECURITY: u32 = 4;
    pub const IMAGE_DIRECTORY_ENTRY_BASERELOC: u32 = 5;
    pub const IMAGE_DIRECTORY_ENTRY_DEBUG: u32 = 6;
    pub const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: u32 = 7;
    pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: u32 = 8;
    pub const IMAGE_DIRECTORY_ENTRY_TLS: u32 = 9;
    pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: u32 = 10;
    pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: u32 = 11;
    pub const IMAGE_DIRECTORY_ENTRY_IAT: u32 = 12;
    pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: u32 = 13;
    pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: u32 = 14;
    pub const IMAGE_SIZEOF_SHORT_NAME: u32 = 8;
    pub const IMAGE_SIZEOF_SECTION_HEADER: u32 = 40;
    pub const IMAGE_SCN_TYPE_NO_PAD: u32 = 8;
    pub const IMAGE_SCN_CNT_CODE: u32 = 32;
    pub const IMAGE_SCN_CNT_INITIALIZED_DATA: u32 = 64;
    pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA: u32 = 128;
    pub const IMAGE_SCN_LNK_OTHER: u32 = 256;
    pub const IMAGE_SCN_LNK_INFO: u32 = 512;
    pub const IMAGE_SCN_LNK_REMOVE: u32 = 2048;
    pub const IMAGE_SCN_LNK_COMDAT: u32 = 4096;
    pub const IMAGE_SCN_NO_DEFER_SPEC_EXC: u32 = 16384;
    pub const IMAGE_SCN_GPREL: u32 = 32768;
    pub const IMAGE_SCN_MEM_FARDATA: u32 = 32768;
    pub const IMAGE_SCN_MEM_PURGEABLE: u32 = 131072;
    pub const IMAGE_SCN_MEM_16BIT: u32 = 131072;
    pub const IMAGE_SCN_MEM_LOCKED: u32 = 262144;
    pub const IMAGE_SCN_MEM_PRELOAD: u32 = 524288;
    pub const IMAGE_SCN_ALIGN_1BYTES: u32 = 1048576;
    pub const IMAGE_SCN_ALIGN_2BYTES: u32 = 2097152;
    pub const IMAGE_SCN_ALIGN_4BYTES: u32 = 3145728;
    pub const IMAGE_SCN_ALIGN_8BYTES: u32 = 4194304;
    pub const IMAGE_SCN_ALIGN_16BYTES: u32 = 5242880;
    pub const IMAGE_SCN_ALIGN_32BYTES: u32 = 6291456;
    pub const IMAGE_SCN_ALIGN_64BYTES: u32 = 7340032;
    pub const IMAGE_SCN_ALIGN_128BYTES: u32 = 8388608;
    pub const IMAGE_SCN_ALIGN_256BYTES: u32 = 9437184;
    pub const IMAGE_SCN_ALIGN_512BYTES: u32 = 10485760;
    pub const IMAGE_SCN_ALIGN_1024BYTES: u32 = 11534336;
    pub const IMAGE_SCN_ALIGN_2048BYTES: u32 = 12582912;
    pub const IMAGE_SCN_ALIGN_4096BYTES: u32 = 13631488;
    pub const IMAGE_SCN_ALIGN_8192BYTES: u32 = 14680064;
    pub const IMAGE_SCN_ALIGN_MASK: u32 = 15728640;
    pub const IMAGE_SCN_LNK_NRELOC_OVFL: u32 = 16777216;
    pub const IMAGE_SCN_MEM_DISCARDABLE: u32 = 33554432;
    pub const IMAGE_SCN_MEM_NOT_CACHED: u32 = 67108864;
    pub const IMAGE_SCN_MEM_NOT_PAGED: u32 = 134217728;
    pub const IMAGE_SCN_MEM_SHARED: u32 = 268435456;
    pub const IMAGE_SCN_MEM_EXECUTE: u32 = 536870912;
    pub const IMAGE_SCN_MEM_READ: u32 = 1073741824;
    pub const IMAGE_SCN_MEM_WRITE: u32 = 2147483648;
    pub const IMAGE_SCN_SCALE_INDEX: u32 = 1;
    pub const IMAGE_SIZEOF_SYMBOL: u32 = 18;
    pub const IMAGE_SYM_SECTION_MAX: u32 = 65279;
    pub const IMAGE_SYM_SECTION_MAX_EX: u32 = 2147483647;
    pub const IMAGE_SYM_TYPE_NULL: u32 = 0;
    pub const IMAGE_SYM_TYPE_VOID: u32 = 1;
    pub const IMAGE_SYM_TYPE_CHAR: u32 = 2;
    pub const IMAGE_SYM_TYPE_SHORT: u32 = 3;
    pub const IMAGE_SYM_TYPE_INT: u32 = 4;
    pub const IMAGE_SYM_TYPE_LONG: u32 = 5;
    pub const IMAGE_SYM_TYPE_FLOAT: u32 = 6;
    pub const IMAGE_SYM_TYPE_DOUBLE: u32 = 7;
    pub const IMAGE_SYM_TYPE_STRUCT: u32 = 8;
    pub const IMAGE_SYM_TYPE_UNION: u32 = 9;
    pub const IMAGE_SYM_TYPE_ENUM: u32 = 10;
    pub const IMAGE_SYM_TYPE_MOE: u32 = 11;
    pub const IMAGE_SYM_TYPE_BYTE: u32 = 12;
    pub const IMAGE_SYM_TYPE_WORD: u32 = 13;
    pub const IMAGE_SYM_TYPE_UINT: u32 = 14;
    pub const IMAGE_SYM_TYPE_DWORD: u32 = 15;
    pub const IMAGE_SYM_TYPE_PCODE: u32 = 32768;
    pub const IMAGE_SYM_DTYPE_NULL: u32 = 0;
    pub const IMAGE_SYM_DTYPE_POINTER: u32 = 1;
    pub const IMAGE_SYM_DTYPE_FUNCTION: u32 = 2;
    pub const IMAGE_SYM_DTYPE_ARRAY: u32 = 3;
    pub const IMAGE_SYM_CLASS_NULL: u32 = 0;
    pub const IMAGE_SYM_CLASS_AUTOMATIC: u32 = 1;
    pub const IMAGE_SYM_CLASS_EXTERNAL: u32 = 2;
    pub const IMAGE_SYM_CLASS_STATIC: u32 = 3;
    pub const IMAGE_SYM_CLASS_REGISTER: u32 = 4;
    pub const IMAGE_SYM_CLASS_EXTERNAL_DEF: u32 = 5;
    pub const IMAGE_SYM_CLASS_LABEL: u32 = 6;
    pub const IMAGE_SYM_CLASS_UNDEFINED_LABEL: u32 = 7;
    pub const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: u32 = 8;
    pub const IMAGE_SYM_CLASS_ARGUMENT: u32 = 9;
    pub const IMAGE_SYM_CLASS_STRUCT_TAG: u32 = 10;
    pub const IMAGE_SYM_CLASS_MEMBER_OF_UNION: u32 = 11;
    pub const IMAGE_SYM_CLASS_UNION_TAG: u32 = 12;
    pub const IMAGE_SYM_CLASS_TYPE_DEFINITION: u32 = 13;
    pub const IMAGE_SYM_CLASS_UNDEFINED_STATIC: u32 = 14;
    pub const IMAGE_SYM_CLASS_ENUM_TAG: u32 = 15;
    pub const IMAGE_SYM_CLASS_MEMBER_OF_ENUM: u32 = 16;
    pub const IMAGE_SYM_CLASS_REGISTER_PARAM: u32 = 17;
    pub const IMAGE_SYM_CLASS_BIT_FIELD: u32 = 18;
    pub const IMAGE_SYM_CLASS_FAR_EXTERNAL: u32 = 68;
    pub const IMAGE_SYM_CLASS_BLOCK: u32 = 100;
    pub const IMAGE_SYM_CLASS_FUNCTION: u32 = 101;
    pub const IMAGE_SYM_CLASS_END_OF_STRUCT: u32 = 102;
    pub const IMAGE_SYM_CLASS_FILE: u32 = 103;
    pub const IMAGE_SYM_CLASS_SECTION: u32 = 104;
    pub const IMAGE_SYM_CLASS_WEAK_EXTERNAL: u32 = 105;
    pub const IMAGE_SYM_CLASS_CLR_TOKEN: u32 = 107;
    pub const N_BTMASK: u32 = 15;
    pub const N_TMASK: u32 = 48;
    pub const N_TMASK1: u32 = 192;
    pub const N_TMASK2: u32 = 240;
    pub const N_BTSHFT: u32 = 4;
    pub const N_TSHIFT: u32 = 2;
    pub const IMAGE_COMDAT_SELECT_NODUPLICATES: u32 = 1;
    pub const IMAGE_COMDAT_SELECT_ANY: u32 = 2;
    pub const IMAGE_COMDAT_SELECT_SAME_SIZE: u32 = 3;
    pub const IMAGE_COMDAT_SELECT_EXACT_MATCH: u32 = 4;
    pub const IMAGE_COMDAT_SELECT_ASSOCIATIVE: u32 = 5;
    pub const IMAGE_COMDAT_SELECT_LARGEST: u32 = 6;
    pub const IMAGE_COMDAT_SELECT_NEWEST: u32 = 7;
    pub const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: u32 = 1;
    pub const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: u32 = 2;
    pub const IMAGE_WEAK_EXTERN_SEARCH_ALIAS: u32 = 3;
    pub const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY: u32 = 4;
    pub const IMAGE_REL_I386_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_I386_DIR16: u32 = 1;
    pub const IMAGE_REL_I386_REL16: u32 = 2;
    pub const IMAGE_REL_I386_DIR32: u32 = 6;
    pub const IMAGE_REL_I386_DIR32NB: u32 = 7;
    pub const IMAGE_REL_I386_SEG12: u32 = 9;
    pub const IMAGE_REL_I386_SECTION: u32 = 10;
    pub const IMAGE_REL_I386_SECREL: u32 = 11;
    pub const IMAGE_REL_I386_TOKEN: u32 = 12;
    pub const IMAGE_REL_I386_SECREL7: u32 = 13;
    pub const IMAGE_REL_I386_REL32: u32 = 20;
    pub const IMAGE_REL_MIPS_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_MIPS_REFHALF: u32 = 1;
    pub const IMAGE_REL_MIPS_REFWORD: u32 = 2;
    pub const IMAGE_REL_MIPS_JMPADDR: u32 = 3;
    pub const IMAGE_REL_MIPS_REFHI: u32 = 4;
    pub const IMAGE_REL_MIPS_REFLO: u32 = 5;
    pub const IMAGE_REL_MIPS_GPREL: u32 = 6;
    pub const IMAGE_REL_MIPS_LITERAL: u32 = 7;
    pub const IMAGE_REL_MIPS_SECTION: u32 = 10;
    pub const IMAGE_REL_MIPS_SECREL: u32 = 11;
    pub const IMAGE_REL_MIPS_SECRELLO: u32 = 12;
    pub const IMAGE_REL_MIPS_SECRELHI: u32 = 13;
    pub const IMAGE_REL_MIPS_TOKEN: u32 = 14;
    pub const IMAGE_REL_MIPS_JMPADDR16: u32 = 16;
    pub const IMAGE_REL_MIPS_REFWORDNB: u32 = 34;
    pub const IMAGE_REL_MIPS_PAIR: u32 = 37;
    pub const IMAGE_REL_ALPHA_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_ALPHA_REFLONG: u32 = 1;
    pub const IMAGE_REL_ALPHA_REFQUAD: u32 = 2;
    pub const IMAGE_REL_ALPHA_GPREL32: u32 = 3;
    pub const IMAGE_REL_ALPHA_LITERAL: u32 = 4;
    pub const IMAGE_REL_ALPHA_LITUSE: u32 = 5;
    pub const IMAGE_REL_ALPHA_GPDISP: u32 = 6;
    pub const IMAGE_REL_ALPHA_BRADDR: u32 = 7;
    pub const IMAGE_REL_ALPHA_HINT: u32 = 8;
    pub const IMAGE_REL_ALPHA_INLINE_REFLONG: u32 = 9;
    pub const IMAGE_REL_ALPHA_REFHI: u32 = 10;
    pub const IMAGE_REL_ALPHA_REFLO: u32 = 11;
    pub const IMAGE_REL_ALPHA_PAIR: u32 = 12;
    pub const IMAGE_REL_ALPHA_MATCH: u32 = 13;
    pub const IMAGE_REL_ALPHA_SECTION: u32 = 14;
    pub const IMAGE_REL_ALPHA_SECREL: u32 = 15;
    pub const IMAGE_REL_ALPHA_REFLONGNB: u32 = 16;
    pub const IMAGE_REL_ALPHA_SECRELLO: u32 = 17;
    pub const IMAGE_REL_ALPHA_SECRELHI: u32 = 18;
    pub const IMAGE_REL_ALPHA_REFQ3: u32 = 19;
    pub const IMAGE_REL_ALPHA_REFQ2: u32 = 20;
    pub const IMAGE_REL_ALPHA_REFQ1: u32 = 21;
    pub const IMAGE_REL_ALPHA_GPRELLO: u32 = 22;
    pub const IMAGE_REL_ALPHA_GPRELHI: u32 = 23;
    pub const IMAGE_REL_PPC_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_PPC_ADDR64: u32 = 1;
    pub const IMAGE_REL_PPC_ADDR32: u32 = 2;
    pub const IMAGE_REL_PPC_ADDR24: u32 = 3;
    pub const IMAGE_REL_PPC_ADDR16: u32 = 4;
    pub const IMAGE_REL_PPC_ADDR14: u32 = 5;
    pub const IMAGE_REL_PPC_REL24: u32 = 6;
    pub const IMAGE_REL_PPC_REL14: u32 = 7;
    pub const IMAGE_REL_PPC_TOCREL16: u32 = 8;
    pub const IMAGE_REL_PPC_TOCREL14: u32 = 9;
    pub const IMAGE_REL_PPC_ADDR32NB: u32 = 10;
    pub const IMAGE_REL_PPC_SECREL: u32 = 11;
    pub const IMAGE_REL_PPC_SECTION: u32 = 12;
    pub const IMAGE_REL_PPC_IFGLUE: u32 = 13;
    pub const IMAGE_REL_PPC_IMGLUE: u32 = 14;
    pub const IMAGE_REL_PPC_SECREL16: u32 = 15;
    pub const IMAGE_REL_PPC_REFHI: u32 = 16;
    pub const IMAGE_REL_PPC_REFLO: u32 = 17;
    pub const IMAGE_REL_PPC_PAIR: u32 = 18;
    pub const IMAGE_REL_PPC_SECRELLO: u32 = 19;
    pub const IMAGE_REL_PPC_SECRELHI: u32 = 20;
    pub const IMAGE_REL_PPC_GPREL: u32 = 21;
    pub const IMAGE_REL_PPC_TOKEN: u32 = 22;
    pub const IMAGE_REL_PPC_TYPEMASK: u32 = 255;
    pub const IMAGE_REL_PPC_NEG: u32 = 256;
    pub const IMAGE_REL_PPC_BRTAKEN: u32 = 512;
    pub const IMAGE_REL_PPC_BRNTAKEN: u32 = 1024;
    pub const IMAGE_REL_PPC_TOCDEFN: u32 = 2048;
    pub const IMAGE_REL_SH3_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_SH3_DIRECT16: u32 = 1;
    pub const IMAGE_REL_SH3_DIRECT32: u32 = 2;
    pub const IMAGE_REL_SH3_DIRECT8: u32 = 3;
    pub const IMAGE_REL_SH3_DIRECT8_WORD: u32 = 4;
    pub const IMAGE_REL_SH3_DIRECT8_LONG: u32 = 5;
    pub const IMAGE_REL_SH3_DIRECT4: u32 = 6;
    pub const IMAGE_REL_SH3_DIRECT4_WORD: u32 = 7;
    pub const IMAGE_REL_SH3_DIRECT4_LONG: u32 = 8;
    pub const IMAGE_REL_SH3_PCREL8_WORD: u32 = 9;
    pub const IMAGE_REL_SH3_PCREL8_LONG: u32 = 10;
    pub const IMAGE_REL_SH3_PCREL12_WORD: u32 = 11;
    pub const IMAGE_REL_SH3_STARTOF_SECTION: u32 = 12;
    pub const IMAGE_REL_SH3_SIZEOF_SECTION: u32 = 13;
    pub const IMAGE_REL_SH3_SECTION: u32 = 14;
    pub const IMAGE_REL_SH3_SECREL: u32 = 15;
    pub const IMAGE_REL_SH3_DIRECT32_NB: u32 = 16;
    pub const IMAGE_REL_SH3_GPREL4_LONG: u32 = 17;
    pub const IMAGE_REL_SH3_TOKEN: u32 = 18;
    pub const IMAGE_REL_SHM_PCRELPT: u32 = 19;
    pub const IMAGE_REL_SHM_REFLO: u32 = 20;
    pub const IMAGE_REL_SHM_REFHALF: u32 = 21;
    pub const IMAGE_REL_SHM_RELLO: u32 = 22;
    pub const IMAGE_REL_SHM_RELHALF: u32 = 23;
    pub const IMAGE_REL_SHM_PAIR: u32 = 24;
    pub const IMAGE_REL_SH_NOMODE: u32 = 32768;
    pub const IMAGE_REL_ARM_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_ARM_ADDR32: u32 = 1;
    pub const IMAGE_REL_ARM_ADDR32NB: u32 = 2;
    pub const IMAGE_REL_ARM_BRANCH24: u32 = 3;
    pub const IMAGE_REL_ARM_BRANCH11: u32 = 4;
    pub const IMAGE_REL_ARM_TOKEN: u32 = 5;
    pub const IMAGE_REL_ARM_GPREL12: u32 = 6;
    pub const IMAGE_REL_ARM_GPREL7: u32 = 7;
    pub const IMAGE_REL_ARM_BLX24: u32 = 8;
    pub const IMAGE_REL_ARM_BLX11: u32 = 9;
    pub const IMAGE_REL_ARM_SECTION: u32 = 14;
    pub const IMAGE_REL_ARM_SECREL: u32 = 15;
    pub const IMAGE_REL_ARM_MOV32A: u32 = 16;
    pub const IMAGE_REL_ARM_MOV32: u32 = 16;
    pub const IMAGE_REL_ARM_MOV32T: u32 = 17;
    pub const IMAGE_REL_THUMB_MOV32: u32 = 17;
    pub const IMAGE_REL_ARM_BRANCH20T: u32 = 18;
    pub const IMAGE_REL_THUMB_BRANCH20: u32 = 18;
    pub const IMAGE_REL_ARM_BRANCH24T: u32 = 20;
    pub const IMAGE_REL_THUMB_BRANCH24: u32 = 20;
    pub const IMAGE_REL_ARM_BLX23T: u32 = 21;
    pub const IMAGE_REL_THUMB_BLX23: u32 = 21;
    pub const IMAGE_REL_AM_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_AM_ADDR32: u32 = 1;
    pub const IMAGE_REL_AM_ADDR32NB: u32 = 2;
    pub const IMAGE_REL_AM_CALL32: u32 = 3;
    pub const IMAGE_REL_AM_FUNCINFO: u32 = 4;
    pub const IMAGE_REL_AM_REL32_1: u32 = 5;
    pub const IMAGE_REL_AM_REL32_2: u32 = 6;
    pub const IMAGE_REL_AM_SECREL: u32 = 7;
    pub const IMAGE_REL_AM_SECTION: u32 = 8;
    pub const IMAGE_REL_AM_TOKEN: u32 = 9;
    pub const IMAGE_REL_ARM64_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_ARM64_ADDR32: u32 = 1;
    pub const IMAGE_REL_ARM64_ADDR32NB: u32 = 2;
    pub const IMAGE_REL_ARM64_BRANCH26: u32 = 3;
    pub const IMAGE_REL_ARM64_PAGEBASE_REL21: u32 = 4;
    pub const IMAGE_REL_ARM64_REL21: u32 = 5;
    pub const IMAGE_REL_ARM64_PAGEOFFSET_12A: u32 = 6;
    pub const IMAGE_REL_ARM64_PAGEOFFSET_12L: u32 = 7;
    pub const IMAGE_REL_ARM64_SECREL: u32 = 8;
    pub const IMAGE_REL_ARM64_SECREL_LOW12A: u32 = 9;
    pub const IMAGE_REL_ARM64_SECREL_HIGH12A: u32 = 10;
    pub const IMAGE_REL_ARM64_SECREL_LOW12L: u32 = 11;
    pub const IMAGE_REL_ARM64_TOKEN: u32 = 12;
    pub const IMAGE_REL_ARM64_SECTION: u32 = 13;
    pub const IMAGE_REL_ARM64_ADDR64: u32 = 14;
    pub const IMAGE_REL_ARM64_BRANCH19: u32 = 15;
    pub const IMAGE_REL_AMD64_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_AMD64_ADDR64: u32 = 1;
    pub const IMAGE_REL_AMD64_ADDR32: u32 = 2;
    pub const IMAGE_REL_AMD64_ADDR32NB: u32 = 3;
    pub const IMAGE_REL_AMD64_REL32: u32 = 4;
    pub const IMAGE_REL_AMD64_REL32_1: u32 = 5;
    pub const IMAGE_REL_AMD64_REL32_2: u32 = 6;
    pub const IMAGE_REL_AMD64_REL32_3: u32 = 7;
    pub const IMAGE_REL_AMD64_REL32_4: u32 = 8;
    pub const IMAGE_REL_AMD64_REL32_5: u32 = 9;
    pub const IMAGE_REL_AMD64_SECTION: u32 = 10;
    pub const IMAGE_REL_AMD64_SECREL: u32 = 11;
    pub const IMAGE_REL_AMD64_SECREL7: u32 = 12;
    pub const IMAGE_REL_AMD64_TOKEN: u32 = 13;
    pub const IMAGE_REL_AMD64_SREL32: u32 = 14;
    pub const IMAGE_REL_AMD64_PAIR: u32 = 15;
    pub const IMAGE_REL_AMD64_SSPAN32: u32 = 16;
    pub const IMAGE_REL_AMD64_EHANDLER: u32 = 17;
    pub const IMAGE_REL_AMD64_IMPORT_BR: u32 = 18;
    pub const IMAGE_REL_AMD64_IMPORT_CALL: u32 = 19;
    pub const IMAGE_REL_AMD64_CFG_BR: u32 = 20;
    pub const IMAGE_REL_AMD64_CFG_BR_REX: u32 = 21;
    pub const IMAGE_REL_AMD64_CFG_CALL: u32 = 22;
    pub const IMAGE_REL_AMD64_INDIR_BR: u32 = 23;
    pub const IMAGE_REL_AMD64_INDIR_BR_REX: u32 = 24;
    pub const IMAGE_REL_AMD64_INDIR_CALL: u32 = 25;
    pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST: u32 = 32;
    pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST: u32 = 47;
    pub const IMAGE_REL_IA64_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_IA64_IMM14: u32 = 1;
    pub const IMAGE_REL_IA64_IMM22: u32 = 2;
    pub const IMAGE_REL_IA64_IMM64: u32 = 3;
    pub const IMAGE_REL_IA64_DIR32: u32 = 4;
    pub const IMAGE_REL_IA64_DIR64: u32 = 5;
    pub const IMAGE_REL_IA64_PCREL21B: u32 = 6;
    pub const IMAGE_REL_IA64_PCREL21M: u32 = 7;
    pub const IMAGE_REL_IA64_PCREL21F: u32 = 8;
    pub const IMAGE_REL_IA64_GPREL22: u32 = 9;
    pub const IMAGE_REL_IA64_LTOFF22: u32 = 10;
    pub const IMAGE_REL_IA64_SECTION: u32 = 11;
    pub const IMAGE_REL_IA64_SECREL22: u32 = 12;
    pub const IMAGE_REL_IA64_SECREL64I: u32 = 13;
    pub const IMAGE_REL_IA64_SECREL32: u32 = 14;
    pub const IMAGE_REL_IA64_DIR32NB: u32 = 16;
    pub const IMAGE_REL_IA64_SREL14: u32 = 17;
    pub const IMAGE_REL_IA64_SREL22: u32 = 18;
    pub const IMAGE_REL_IA64_SREL32: u32 = 19;
    pub const IMAGE_REL_IA64_UREL32: u32 = 20;
    pub const IMAGE_REL_IA64_PCREL60X: u32 = 21;
    pub const IMAGE_REL_IA64_PCREL60B: u32 = 22;
    pub const IMAGE_REL_IA64_PCREL60F: u32 = 23;
    pub const IMAGE_REL_IA64_PCREL60I: u32 = 24;
    pub const IMAGE_REL_IA64_PCREL60M: u32 = 25;
    pub const IMAGE_REL_IA64_IMMGPREL64: u32 = 26;
    pub const IMAGE_REL_IA64_TOKEN: u32 = 27;
    pub const IMAGE_REL_IA64_GPREL32: u32 = 28;
    pub const IMAGE_REL_IA64_ADDEND: u32 = 31;
    pub const IMAGE_REL_CEF_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_CEF_ADDR32: u32 = 1;
    pub const IMAGE_REL_CEF_ADDR64: u32 = 2;
    pub const IMAGE_REL_CEF_ADDR32NB: u32 = 3;
    pub const IMAGE_REL_CEF_SECTION: u32 = 4;
    pub const IMAGE_REL_CEF_SECREL: u32 = 5;
    pub const IMAGE_REL_CEF_TOKEN: u32 = 6;
    pub const IMAGE_REL_CEE_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_CEE_ADDR32: u32 = 1;
    pub const IMAGE_REL_CEE_ADDR64: u32 = 2;
    pub const IMAGE_REL_CEE_ADDR32NB: u32 = 3;
    pub const IMAGE_REL_CEE_SECTION: u32 = 4;
    pub const IMAGE_REL_CEE_SECREL: u32 = 5;
    pub const IMAGE_REL_CEE_TOKEN: u32 = 6;
    pub const IMAGE_REL_M32R_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_M32R_ADDR32: u32 = 1;
    pub const IMAGE_REL_M32R_ADDR32NB: u32 = 2;
    pub const IMAGE_REL_M32R_ADDR24: u32 = 3;
    pub const IMAGE_REL_M32R_GPREL16: u32 = 4;
    pub const IMAGE_REL_M32R_PCREL24: u32 = 5;
    pub const IMAGE_REL_M32R_PCREL16: u32 = 6;
    pub const IMAGE_REL_M32R_PCREL8: u32 = 7;
    pub const IMAGE_REL_M32R_REFHALF: u32 = 8;
    pub const IMAGE_REL_M32R_REFHI: u32 = 9;
    pub const IMAGE_REL_M32R_REFLO: u32 = 10;
    pub const IMAGE_REL_M32R_PAIR: u32 = 11;
    pub const IMAGE_REL_M32R_SECTION: u32 = 12;
    pub const IMAGE_REL_M32R_SECREL32: u32 = 13;
    pub const IMAGE_REL_M32R_TOKEN: u32 = 14;
    pub const IMAGE_REL_EBC_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_EBC_ADDR32NB: u32 = 1;
    pub const IMAGE_REL_EBC_REL32: u32 = 2;
    pub const IMAGE_REL_EBC_SECTION: u32 = 3;
    pub const IMAGE_REL_EBC_SECREL: u32 = 4;
    pub const EMARCH_ENC_I17_IMM7B_INST_WORD_X: u32 = 3;
    pub const EMARCH_ENC_I17_IMM7B_SIZE_X: u32 = 7;
    pub const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X: u32 = 4;
    pub const EMARCH_ENC_I17_IMM7B_VAL_POS_X: u32 = 0;
    pub const EMARCH_ENC_I17_IMM9D_INST_WORD_X: u32 = 3;
    pub const EMARCH_ENC_I17_IMM9D_SIZE_X: u32 = 9;
    pub const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X: u32 = 18;
    pub const EMARCH_ENC_I17_IMM9D_VAL_POS_X: u32 = 7;
    pub const EMARCH_ENC_I17_IMM5C_INST_WORD_X: u32 = 3;
    pub const EMARCH_ENC_I17_IMM5C_SIZE_X: u32 = 5;
    pub const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X: u32 = 13;
    pub const EMARCH_ENC_I17_IMM5C_VAL_POS_X: u32 = 16;
    pub const EMARCH_ENC_I17_IC_INST_WORD_X: u32 = 3;
    pub const EMARCH_ENC_I17_IC_SIZE_X: u32 = 1;
    pub const EMARCH_ENC_I17_IC_INST_WORD_POS_X: u32 = 12;
    pub const EMARCH_ENC_I17_IC_VAL_POS_X: u32 = 21;
    pub const EMARCH_ENC_I17_IMM41a_INST_WORD_X: u32 = 1;
    pub const EMARCH_ENC_I17_IMM41a_SIZE_X: u32 = 10;
    pub const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X: u32 = 14;
    pub const EMARCH_ENC_I17_IMM41a_VAL_POS_X: u32 = 22;
    pub const EMARCH_ENC_I17_IMM41b_INST_WORD_X: u32 = 1;
    pub const EMARCH_ENC_I17_IMM41b_SIZE_X: u32 = 8;
    pub const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X: u32 = 24;
    pub const EMARCH_ENC_I17_IMM41b_VAL_POS_X: u32 = 32;
    pub const EMARCH_ENC_I17_IMM41c_INST_WORD_X: u32 = 2;
    pub const EMARCH_ENC_I17_IMM41c_SIZE_X: u32 = 23;
    pub const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X: u32 = 0;
    pub const EMARCH_ENC_I17_IMM41c_VAL_POS_X: u32 = 40;
    pub const EMARCH_ENC_I17_SIGN_INST_WORD_X: u32 = 3;
    pub const EMARCH_ENC_I17_SIGN_SIZE_X: u32 = 1;
    pub const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X: u32 = 27;
    pub const EMARCH_ENC_I17_SIGN_VAL_POS_X: u32 = 63;
    pub const X3_OPCODE_INST_WORD_X: u32 = 3;
    pub const X3_OPCODE_SIZE_X: u32 = 4;
    pub const X3_OPCODE_INST_WORD_POS_X: u32 = 28;
    pub const X3_OPCODE_SIGN_VAL_POS_X: u32 = 0;
    pub const X3_I_INST_WORD_X: u32 = 3;
    pub const X3_I_SIZE_X: u32 = 1;
    pub const X3_I_INST_WORD_POS_X: u32 = 27;
    pub const X3_I_SIGN_VAL_POS_X: u32 = 59;
    pub const X3_D_WH_INST_WORD_X: u32 = 3;
    pub const X3_D_WH_SIZE_X: u32 = 3;
    pub const X3_D_WH_INST_WORD_POS_X: u32 = 24;
    pub const X3_D_WH_SIGN_VAL_POS_X: u32 = 0;
    pub const X3_IMM20_INST_WORD_X: u32 = 3;
    pub const X3_IMM20_SIZE_X: u32 = 20;
    pub const X3_IMM20_INST_WORD_POS_X: u32 = 4;
    pub const X3_IMM20_SIGN_VAL_POS_X: u32 = 0;
    pub const X3_IMM39_1_INST_WORD_X: u32 = 2;
    pub const X3_IMM39_1_SIZE_X: u32 = 23;
    pub const X3_IMM39_1_INST_WORD_POS_X: u32 = 0;
    pub const X3_IMM39_1_SIGN_VAL_POS_X: u32 = 36;
    pub const X3_IMM39_2_INST_WORD_X: u32 = 1;
    pub const X3_IMM39_2_SIZE_X: u32 = 16;
    pub const X3_IMM39_2_INST_WORD_POS_X: u32 = 16;
    pub const X3_IMM39_2_SIGN_VAL_POS_X: u32 = 20;
    pub const X3_P_INST_WORD_X: u32 = 3;
    pub const X3_P_SIZE_X: u32 = 4;
    pub const X3_P_INST_WORD_POS_X: u32 = 0;
    pub const X3_P_SIGN_VAL_POS_X: u32 = 0;
    pub const X3_TMPLT_INST_WORD_X: u32 = 0;
    pub const X3_TMPLT_SIZE_X: u32 = 4;
    pub const X3_TMPLT_INST_WORD_POS_X: u32 = 0;
    pub const X3_TMPLT_SIGN_VAL_POS_X: u32 = 0;
    pub const X3_BTYPE_QP_INST_WORD_X: u32 = 2;
    pub const X3_BTYPE_QP_SIZE_X: u32 = 9;
    pub const X3_BTYPE_QP_INST_WORD_POS_X: u32 = 23;
    pub const X3_BTYPE_QP_INST_VAL_POS_X: u32 = 0;
    pub const X3_EMPTY_INST_WORD_X: u32 = 1;
    pub const X3_EMPTY_SIZE_X: u32 = 2;
    pub const X3_EMPTY_INST_WORD_POS_X: u32 = 14;
    pub const X3_EMPTY_INST_VAL_POS_X: u32 = 0;
    pub const IMAGE_REL_BASED_ABSOLUTE: u32 = 0;
    pub const IMAGE_REL_BASED_HIGH: u32 = 1;
    pub const IMAGE_REL_BASED_LOW: u32 = 2;
    pub const IMAGE_REL_BASED_HIGHLOW: u32 = 3;
    pub const IMAGE_REL_BASED_HIGHADJ: u32 = 4;
    pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_5: u32 = 5;
    pub const IMAGE_REL_BASED_RESERVED: u32 = 6;
    pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_7: u32 = 7;
    pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_8: u32 = 8;
    pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_9: u32 = 9;
    pub const IMAGE_REL_BASED_DIR64: u32 = 10;
    pub const IMAGE_REL_BASED_IA64_IMM64: u32 = 9;
    pub const IMAGE_REL_BASED_MIPS_JMPADDR: u32 = 5;
    pub const IMAGE_REL_BASED_MIPS_JMPADDR16: u32 = 9;
    pub const IMAGE_REL_BASED_ARM_MOV32: u32 = 5;
    pub const IMAGE_REL_BASED_THUMB_MOV32: u32 = 7;
    pub const IMAGE_ARCHIVE_START_SIZE: u32 = 8;
    pub const IMAGE_ARCHIVE_START: &[u8; 9usize] = b"!<arch>\n\0";
    pub const IMAGE_ARCHIVE_END: &[u8; 3usize] = b"`\n\0";
    pub const IMAGE_ARCHIVE_PAD: &[u8; 2usize] = b"\n\0";
    pub const IMAGE_ARCHIVE_LINKER_MEMBER: &[u8; 17usize] = b"/               \0";
    pub const IMAGE_ARCHIVE_LONGNAMES_MEMBER: &[u8; 17usize] = b"//              \0";
    pub const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER: &[u8; 17usize] = b"/<HYBRIDMAP>/   \0";
    pub const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: u32 = 60;
    pub const IMAGE_ORDINAL_FLAG64: i64 = -9223372036854775808;
    pub const IMAGE_ORDINAL_FLAG32: u32 = 2147483648;
    pub const IMAGE_ORDINAL_FLAG: i64 = -9223372036854775808;
    pub const IMAGE_RESOURCE_NAME_IS_STRING: u32 = 2147483648;
    pub const IMAGE_RESOURCE_DATA_IS_DIRECTORY: u32 = 2147483648;
    pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE: u32 = 1;
    pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE: u32 = 2;
    pub const IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER: u32 = 3;
    pub const IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER: u32 = 4;
    pub const IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH: u32 = 5;
    pub const IMAGE_HOT_PATCH_BASE_OBLIGATORY: u32 = 1;
    pub const IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK: u32 = 2;
    pub const IMAGE_HOT_PATCH_CHUNK_INVERSE: u32 = 2147483648;
    pub const IMAGE_HOT_PATCH_CHUNK_OBLIGATORY: u32 = 1073741824;
    pub const IMAGE_HOT_PATCH_CHUNK_RESERVED: u32 = 1072705536;
    pub const IMAGE_HOT_PATCH_CHUNK_TYPE: u32 = 1032192;
    pub const IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA: u32 = 32768;
    pub const IMAGE_HOT_PATCH_CHUNK_TARGET_RVA: u32 = 16384;
    pub const IMAGE_HOT_PATCH_CHUNK_SIZE: u32 = 4095;
    pub const IMAGE_HOT_PATCH_NONE: u32 = 0;
    pub const IMAGE_HOT_PATCH_FUNCTION: u32 = 114688;
    pub const IMAGE_HOT_PATCH_ABSOLUTE: u32 = 180224;
    pub const IMAGE_HOT_PATCH_REL32: u32 = 245760;
    pub const IMAGE_HOT_PATCH_CALL_TARGET: u32 = 278528;
    pub const IMAGE_HOT_PATCH_INDIRECT: u32 = 376832;
    pub const IMAGE_HOT_PATCH_NO_CALL_TARGET: u32 = 409600;
    pub const IMAGE_HOT_PATCH_DYNAMIC_VALUE: u32 = 491520;
    pub const IMAGE_GUARD_CF_INSTRUMENTED: u32 = 256;
    pub const IMAGE_GUARD_CFW_INSTRUMENTED: u32 = 512;
    pub const IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT: u32 = 1024;
    pub const IMAGE_GUARD_SECURITY_COOKIE_UNUSED: u32 = 2048;
    pub const IMAGE_GUARD_PROTECT_DELAYLOAD_IAT: u32 = 4096;
    pub const IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION: u32 = 8192;
    pub const IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT: u32 = 16384;
    pub const IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION: u32 = 32768;
    pub const IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT: u32 = 65536;
    pub const IMAGE_GUARD_RF_INSTRUMENTED: u32 = 131072;
    pub const IMAGE_GUARD_RF_ENABLE: u32 = 262144;
    pub const IMAGE_GUARD_RF_STRICT: u32 = 524288;
    pub const IMAGE_GUARD_RETPOLINE_PRESENT: u32 = 1048576;
    pub const IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT: u32 = 4194304;
    pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK: u32 = 4026531840;
    pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT: u32 = 28;
    pub const IMAGE_GUARD_FLAG_FID_SUPPRESSED: u32 = 1;
    pub const IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED: u32 = 2;
    pub const IMAGE_ENCLAVE_LONG_ID_LENGTH: u32 = 32;
    pub const IMAGE_ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
    pub const IMAGE_ENCLAVE_POLICY_DEBUGGABLE: u32 = 1;
    pub const IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE: u32 = 1;
    pub const IMAGE_ENCLAVE_IMPORT_MATCH_NONE: u32 = 0;
    pub const IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID: u32 = 1;
    pub const IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID: u32 = 2;
    pub const IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID: u32 = 3;
    pub const IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID: u32 = 4;
    pub const IMAGE_DEBUG_TYPE_UNKNOWN: u32 = 0;
    pub const IMAGE_DEBUG_TYPE_COFF: u32 = 1;
    pub const IMAGE_DEBUG_TYPE_CODEVIEW: u32 = 2;
    pub const IMAGE_DEBUG_TYPE_FPO: u32 = 3;
    pub const IMAGE_DEBUG_TYPE_MISC: u32 = 4;
    pub const IMAGE_DEBUG_TYPE_EXCEPTION: u32 = 5;
    pub const IMAGE_DEBUG_TYPE_FIXUP: u32 = 6;
    pub const IMAGE_DEBUG_TYPE_OMAP_TO_SRC: u32 = 7;
    pub const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: u32 = 8;
    pub const IMAGE_DEBUG_TYPE_BORLAND: u32 = 9;
    pub const IMAGE_DEBUG_TYPE_RESERVED10: u32 = 10;
    pub const IMAGE_DEBUG_TYPE_CLSID: u32 = 11;
    pub const IMAGE_DEBUG_TYPE_VC_FEATURE: u32 = 12;
    pub const IMAGE_DEBUG_TYPE_POGO: u32 = 13;
    pub const IMAGE_DEBUG_TYPE_ILTCG: u32 = 14;
    pub const IMAGE_DEBUG_TYPE_MPX: u32 = 15;
    pub const IMAGE_DEBUG_TYPE_REPRO: u32 = 16;
    pub const IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS: u32 = 20;
    pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT: u32 = 1;
    pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE: u32 = 2;
    pub const IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE: u32 = 4;
    pub const IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC: u32 = 8;
    pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1: u32 = 16;
    pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2: u32 = 32;
    pub const FRAME_FPO: u32 = 0;
    pub const FRAME_TRAP: u32 = 1;
    pub const FRAME_TSS: u32 = 2;
    pub const FRAME_NONFPO: u32 = 3;
    pub const SIZEOF_RFPO_DATA: u32 = 16;
    pub const IMAGE_DEBUG_MISC_EXENAME: u32 = 1;
    pub const IMAGE_SEPARATE_DEBUG_SIGNATURE: u32 = 18756;
    pub const NON_PAGED_DEBUG_SIGNATURE: u32 = 18766;
    pub const IMAGE_SEPARATE_DEBUG_FLAGS_MASK: u32 = 32768;
    pub const IMAGE_SEPARATE_DEBUG_MISMATCH: u32 = 32768;
    pub const IMPORT_OBJECT_HDR_SIG2: u32 = 65535;
    pub const RTL_RUN_ONCE_CHECK_ONLY: u32 = 1;
    pub const RTL_RUN_ONCE_ASYNC: u32 = 2;
    pub const RTL_RUN_ONCE_INIT_FAILED: u32 = 4;
    pub const RTL_RUN_ONCE_CTX_RESERVED_BITS: u32 = 2;
    pub const FAST_FAIL_LEGACY_GS_VIOLATION: u32 = 0;
    pub const FAST_FAIL_VTGUARD_CHECK_FAILURE: u32 = 1;
    pub const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE: u32 = 2;
    pub const FAST_FAIL_CORRUPT_LIST_ENTRY: u32 = 3;
    pub const FAST_FAIL_INCORRECT_STACK: u32 = 4;
    pub const FAST_FAIL_INVALID_ARG: u32 = 5;
    pub const FAST_FAIL_GS_COOKIE_INIT: u32 = 6;
    pub const FAST_FAIL_FATAL_APP_EXIT: u32 = 7;
    pub const FAST_FAIL_RANGE_CHECK_FAILURE: u32 = 8;
    pub const FAST_FAIL_UNSAFE_REGISTRY_ACCESS: u32 = 9;
    pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE: u32 = 10;
    pub const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE: u32 = 11;
    pub const FAST_FAIL_INVALID_FIBER_SWITCH: u32 = 12;
    pub const FAST_FAIL_INVALID_SET_OF_CONTEXT: u32 = 13;
    pub const FAST_FAIL_INVALID_REFERENCE_COUNT: u32 = 14;
    pub const FAST_FAIL_INVALID_JUMP_BUFFER: u32 = 18;
    pub const FAST_FAIL_MRDATA_MODIFIED: u32 = 19;
    pub const FAST_FAIL_CERTIFICATION_FAILURE: u32 = 20;
    pub const FAST_FAIL_INVALID_EXCEPTION_CHAIN: u32 = 21;
    pub const FAST_FAIL_CRYPTO_LIBRARY: u32 = 22;
    pub const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT: u32 = 23;
    pub const FAST_FAIL_INVALID_IMAGE_BASE: u32 = 24;
    pub const FAST_FAIL_DLOAD_PROTECTION_FAILURE: u32 = 25;
    pub const FAST_FAIL_UNSAFE_EXTENSION_CALL: u32 = 26;
    pub const FAST_FAIL_DEPRECATED_SERVICE_INVOKED: u32 = 27;
    pub const FAST_FAIL_INVALID_BUFFER_ACCESS: u32 = 28;
    pub const FAST_FAIL_INVALID_BALANCED_TREE: u32 = 29;
    pub const FAST_FAIL_INVALID_NEXT_THREAD: u32 = 30;
    pub const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED: u32 = 31;
    pub const FAST_FAIL_APCS_DISABLED: u32 = 32;
    pub const FAST_FAIL_INVALID_IDLE_STATE: u32 = 33;
    pub const FAST_FAIL_MRDATA_PROTECTION_FAILURE: u32 = 34;
    pub const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION: u32 = 35;
    pub const FAST_FAIL_INVALID_LOCK_STATE: u32 = 36;
    pub const FAST_FAIL_GUARD_JUMPTABLE: u32 = 37;
    pub const FAST_FAIL_INVALID_LONGJUMP_TARGET: u32 = 38;
    pub const FAST_FAIL_INVALID_DISPATCH_CONTEXT: u32 = 39;
    pub const FAST_FAIL_INVALID_THREAD: u32 = 40;
    pub const FAST_FAIL_INVALID_SYSCALL_NUMBER: u32 = 41;
    pub const FAST_FAIL_INVALID_FILE_OPERATION: u32 = 42;
    pub const FAST_FAIL_LPAC_ACCESS_DENIED: u32 = 43;
    pub const FAST_FAIL_GUARD_SS_FAILURE: u32 = 44;
    pub const FAST_FAIL_LOADER_CONTINUITY_FAILURE: u32 = 45;
    pub const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE: u32 = 46;
    pub const FAST_FAIL_INVALID_CONTROL_STACK: u32 = 47;
    pub const FAST_FAIL_SET_CONTEXT_DENIED: u32 = 48;
    pub const FAST_FAIL_INVALID_IAT: u32 = 49;
    pub const FAST_FAIL_HEAP_METADATA_CORRUPTION: u32 = 50;
    pub const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION: u32 = 51;
    pub const FAST_FAIL_LOW_LABEL_ACCESS_DENIED: u32 = 52;
    pub const FAST_FAIL_ENCLAVE_CALL_FAILURE: u32 = 53;
    pub const FAST_FAIL_UNHANDLED_LSS_EXCEPTON: u32 = 54;
    pub const FAST_FAIL_ADMINLESS_ACCESS_DENIED: u32 = 55;
    pub const FAST_FAIL_UNEXPECTED_CALL: u32 = 56;
    pub const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS: u32 = 57;
    pub const FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR: u32 = 58;
    pub const FAST_FAIL_FLAGS_CORRUPTION: u32 = 59;
    pub const FAST_FAIL_VEH_CORRUPTION: u32 = 60;
    pub const FAST_FAIL_ETW_CORRUPTION: u32 = 61;
    pub const FAST_FAIL_RIO_ABORT: u32 = 62;
    pub const FAST_FAIL_INVALID_PFN: u32 = 63;
    pub const FAST_FAIL_INVALID_FAST_FAIL_CODE: u32 = 4294967295;
    pub const HEAP_NO_SERIALIZE: u32 = 1;
    pub const HEAP_GROWABLE: u32 = 2;
    pub const HEAP_GENERATE_EXCEPTIONS: u32 = 4;
    pub const HEAP_ZERO_MEMORY: u32 = 8;
    pub const HEAP_REALLOC_IN_PLACE_ONLY: u32 = 16;
    pub const HEAP_TAIL_CHECKING_ENABLED: u32 = 32;
    pub const HEAP_FREE_CHECKING_ENABLED: u32 = 64;
    pub const HEAP_DISABLE_COALESCE_ON_FREE: u32 = 128;
    pub const HEAP_CREATE_ALIGN_16: u32 = 65536;
    pub const HEAP_CREATE_ENABLE_TRACING: u32 = 131072;
    pub const HEAP_CREATE_ENABLE_EXECUTE: u32 = 262144;
    pub const HEAP_MAXIMUM_TAG: u32 = 4095;
    pub const HEAP_PSEUDO_TAG_FLAG: u32 = 32768;
    pub const HEAP_TAG_SHIFT: u32 = 18;
    pub const HEAP_CREATE_SEGMENT_HEAP: u32 = 256;
    pub const HEAP_CREATE_HARDENED: u32 = 512;
    pub const IS_TEXT_UNICODE_ASCII16: u32 = 1;
    pub const IS_TEXT_UNICODE_REVERSE_ASCII16: u32 = 16;
    pub const IS_TEXT_UNICODE_STATISTICS: u32 = 2;
    pub const IS_TEXT_UNICODE_REVERSE_STATISTICS: u32 = 32;
    pub const IS_TEXT_UNICODE_CONTROLS: u32 = 4;
    pub const IS_TEXT_UNICODE_REVERSE_CONTROLS: u32 = 64;
    pub const IS_TEXT_UNICODE_SIGNATURE: u32 = 8;
    pub const IS_TEXT_UNICODE_REVERSE_SIGNATURE: u32 = 128;
    pub const IS_TEXT_UNICODE_ILLEGAL_CHARS: u32 = 256;
    pub const IS_TEXT_UNICODE_ODD_LENGTH: u32 = 512;
    pub const IS_TEXT_UNICODE_DBCS_LEADBYTE: u32 = 1024;
    pub const IS_TEXT_UNICODE_NULL_BYTES: u32 = 4096;
    pub const IS_TEXT_UNICODE_UNICODE_MASK: u32 = 15;
    pub const IS_TEXT_UNICODE_REVERSE_MASK: u32 = 240;
    pub const IS_TEXT_UNICODE_NOT_UNICODE_MASK: u32 = 3840;
    pub const IS_TEXT_UNICODE_NOT_ASCII_MASK: u32 = 61440;
    pub const COMPRESSION_FORMAT_NONE: u32 = 0;
    pub const COMPRESSION_FORMAT_DEFAULT: u32 = 1;
    pub const COMPRESSION_FORMAT_LZNT1: u32 = 2;
    pub const COMPRESSION_FORMAT_XPRESS: u32 = 3;
    pub const COMPRESSION_FORMAT_XPRESS_HUFF: u32 = 4;
    pub const COMPRESSION_ENGINE_STANDARD: u32 = 0;
    pub const COMPRESSION_ENGINE_MAXIMUM: u32 = 256;
    pub const COMPRESSION_ENGINE_HIBER: u32 = 512;
    pub const SEF_DACL_AUTO_INHERIT: u32 = 1;
    pub const SEF_SACL_AUTO_INHERIT: u32 = 2;
    pub const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT: u32 = 4;
    pub const SEF_AVOID_PRIVILEGE_CHECK: u32 = 8;
    pub const SEF_AVOID_OWNER_CHECK: u32 = 16;
    pub const SEF_DEFAULT_OWNER_FROM_PARENT: u32 = 32;
    pub const SEF_DEFAULT_GROUP_FROM_PARENT: u32 = 64;
    pub const SEF_MACL_NO_WRITE_UP: u32 = 256;
    pub const SEF_MACL_NO_READ_UP: u32 = 512;
    pub const SEF_MACL_NO_EXECUTE_UP: u32 = 1024;
    pub const SEF_AI_USE_EXTRA_PARAMS: u32 = 2048;
    pub const SEF_AVOID_OWNER_RESTRICTION: u32 = 4096;
    pub const SEF_FORCE_USER_MODE: u32 = 8192;
    pub const SEF_MACL_VALID_FLAGS: u32 = 1792;
    pub const MESSAGE_RESOURCE_UNICODE: u32 = 1;
    pub const MESSAGE_RESOURCE_UTF8: u32 = 2;
    pub const VER_EQUAL: u32 = 1;
    pub const VER_GREATER: u32 = 2;
    pub const VER_GREATER_EQUAL: u32 = 3;
    pub const VER_LESS: u32 = 4;
    pub const VER_LESS_EQUAL: u32 = 5;
    pub const VER_AND: u32 = 6;
    pub const VER_OR: u32 = 7;
    pub const VER_CONDITION_MASK: u32 = 7;
    pub const VER_NUM_BITS_PER_CONDITION_MASK: u32 = 3;
    pub const VER_MINORVERSION: u32 = 1;
    pub const VER_MAJORVERSION: u32 = 2;
    pub const VER_BUILDNUMBER: u32 = 4;
    pub const VER_PLATFORMID: u32 = 8;
    pub const VER_SERVICEPACKMINOR: u32 = 16;
    pub const VER_SERVICEPACKMAJOR: u32 = 32;
    pub const VER_SUITENAME: u32 = 64;
    pub const VER_PRODUCT_TYPE: u32 = 128;
    pub const VER_NT_WORKSTATION: u32 = 1;
    pub const VER_NT_DOMAIN_CONTROLLER: u32 = 2;
    pub const VER_NT_SERVER: u32 = 3;
    pub const VER_PLATFORM_WIN32s: u32 = 0;
    pub const VER_PLATFORM_WIN32_WINDOWS: u32 = 1;
    pub const VER_PLATFORM_WIN32_NT: u32 = 2;
    pub const RTL_UMS_VERSION: u32 = 256;
    pub const VRL_PREDEFINED_CLASS_BEGIN: u32 = 1;
    pub const VRL_CUSTOM_CLASS_BEGIN: u32 = 256;
    pub const VRL_CLASS_CONSISTENCY: u32 = 1;
    pub const VRL_ENABLE_KERNEL_BREAKS: u32 = 2147483648;
    pub const CTMF_INCLUDE_APPCONTAINER: u32 = 1;
    pub const CTMF_INCLUDE_LPAC: u32 = 2;
    pub const CTMF_VALID_FLAGS: u32 = 3;
    pub const FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN: u32 = 1;
    pub const WRITE_NV_MEMORY_FLAG_FLUSH: u32 = 1;
    pub const WRITE_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
    pub const WRITE_NV_MEMORY_FLAG_PERSIST: u32 = 3;
    pub const WRITE_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
    pub const FILL_NV_MEMORY_FLAG_FLUSH: u32 = 1;
    pub const FILL_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
    pub const FILL_NV_MEMORY_FLAG_PERSIST: u32 = 3;
    pub const FILL_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
    pub const RTL_CORRELATION_VECTOR_STRING_LENGTH: u32 = 129;
    pub const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH: u32 = 16;
    pub const RTL_CORRELATION_VECTOR_V1_LENGTH: u32 = 64;
    pub const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH: u32 = 22;
    pub const RTL_CORRELATION_VECTOR_V2_LENGTH: u32 = 128;
    pub const IMAGE_POLICY_METADATA_VERSION: u32 = 1;
    pub const IMAGE_POLICY_SECTION_NAME: &[u8; 9usize] = b".tPolicy\0";
    pub const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO: u32 = 16777216;
    pub const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN: u32 = 33554432;
    pub const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT: u32 = 67108864;
    pub const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE: u32 = 134217728;
    pub const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO: u32 = 268435456;
    pub const RTL_CRITICAL_SECTION_ALL_FLAG_BITS: u32 = 4278190080;
    pub const RTL_CRITICAL_SECTION_FLAG_RESERVED: u32 = 3758096384;
    pub const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT: u32 = 1;
    pub const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
    pub const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION: u32 = 1;
    pub const WT_EXECUTEDEFAULT: u32 = 0;
    pub const WT_EXECUTEINIOTHREAD: u32 = 1;
    pub const WT_EXECUTEINUITHREAD: u32 = 2;
    pub const WT_EXECUTEINWAITTHREAD: u32 = 4;
    pub const WT_EXECUTEONLYONCE: u32 = 8;
    pub const WT_EXECUTEINTIMERTHREAD: u32 = 32;
    pub const WT_EXECUTELONGFUNCTION: u32 = 16;
    pub const WT_EXECUTEINPERSISTENTIOTHREAD: u32 = 64;
    pub const WT_EXECUTEINPERSISTENTTHREAD: u32 = 128;
    pub const WT_TRANSFER_IMPERSONATION: u32 = 256;
    pub const WT_EXECUTEINLONGTHREAD: u32 = 16;
    pub const WT_EXECUTEDELETEWAIT: u32 = 8;
    pub const ACTIVATION_CONTEXT_PATH_TYPE_NONE: u32 = 1;
    pub const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE: u32 = 2;
    pub const ACTIVATION_CONTEXT_PATH_TYPE_URL: u32 = 3;
    pub const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF: u32 = 4;
    pub const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID: u32 = 1;
    pub const PERFORMANCE_DATA_VERSION: u32 = 1;
    pub const READ_THREAD_PROFILING_FLAG_DISPATCHING: u32 = 1;
    pub const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS: u32 = 2;
    pub const UNIFIEDBUILDREVISION_KEY: &[u8; 63usize] =
        b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\0";
    pub const UNIFIEDBUILDREVISION_VALUE: &[u8; 4usize] = b"UBR\0";
    pub const UNIFIEDBUILDREVISION_MIN: u32 = 0;
    pub const DEVICEFAMILYDEVICEFORM_KEY: &[u8; 67usize] =
        b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\\OEM\0";
    pub const DEVICEFAMILYDEVICEFORM_VALUE: &[u8; 11usize] = b"DeviceForm\0";
    pub const DEVICEFAMILYINFOENUM_UAP: u32 = 0;
    pub const DEVICEFAMILYINFOENUM_WINDOWS_8X: u32 = 1;
    pub const DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X: u32 = 2;
    pub const DEVICEFAMILYINFOENUM_DESKTOP: u32 = 3;
    pub const DEVICEFAMILYINFOENUM_MOBILE: u32 = 4;
    pub const DEVICEFAMILYINFOENUM_XBOX: u32 = 5;
    pub const DEVICEFAMILYINFOENUM_TEAM: u32 = 6;
    pub const DEVICEFAMILYINFOENUM_IOT: u32 = 7;
    pub const DEVICEFAMILYINFOENUM_IOT_HEADLESS: u32 = 8;
    pub const DEVICEFAMILYINFOENUM_SERVER: u32 = 9;
    pub const DEVICEFAMILYINFOENUM_HOLOGRAPHIC: u32 = 10;
    pub const DEVICEFAMILYINFOENUM_XBOXSRA: u32 = 11;
    pub const DEVICEFAMILYINFOENUM_XBOXERA: u32 = 12;
    pub const DEVICEFAMILYINFOENUM_SERVER_NANO: u32 = 13;
    pub const DEVICEFAMILYINFOENUM_8828080: u32 = 14;
    pub const DEVICEFAMILYINFOENUM_7067329: u32 = 15;
    pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE: u32 = 16;
    pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS: u32 = 17;
    pub const DEVICEFAMILYINFOENUM_MAX: u32 = 17;
    pub const DEVICEFAMILYDEVICEFORM_UNKNOWN: u32 = 0;
    pub const DEVICEFAMILYDEVICEFORM_PHONE: u32 = 1;
    pub const DEVICEFAMILYDEVICEFORM_TABLET: u32 = 2;
    pub const DEVICEFAMILYDEVICEFORM_DESKTOP: u32 = 3;
    pub const DEVICEFAMILYDEVICEFORM_NOTEBOOK: u32 = 4;
    pub const DEVICEFAMILYDEVICEFORM_CONVERTIBLE: u32 = 5;
    pub const DEVICEFAMILYDEVICEFORM_DETACHABLE: u32 = 6;
    pub const DEVICEFAMILYDEVICEFORM_ALLINONE: u32 = 7;
    pub const DEVICEFAMILYDEVICEFORM_STICKPC: u32 = 8;
    pub const DEVICEFAMILYDEVICEFORM_PUCK: u32 = 9;
    pub const DEVICEFAMILYDEVICEFORM_LARGESCREEN: u32 = 10;
    pub const DEVICEFAMILYDEVICEFORM_HMD: u32 = 11;
    pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD: u32 = 12;
    pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET: u32 = 13;
    pub const DEVICEFAMILYDEVICEFORM_BANKING: u32 = 14;
    pub const DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION: u32 = 15;
    pub const DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE: u32 = 16;
    pub const DEVICEFAMILYDEVICEFORM_GAMING: u32 = 17;
    pub const DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION: u32 = 18;
    pub const DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION: u32 = 19;
    pub const DEVICEFAMILYDEVICEFORM_KIOSK: u32 = 20;
    pub const DEVICEFAMILYDEVICEFORM_MAKER_BOARD: u32 = 21;
    pub const DEVICEFAMILYDEVICEFORM_MEDICAL: u32 = 22;
    pub const DEVICEFAMILYDEVICEFORM_NETWORKING: u32 = 23;
    pub const DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE: u32 = 24;
    pub const DEVICEFAMILYDEVICEFORM_PRINTING: u32 = 25;
    pub const DEVICEFAMILYDEVICEFORM_THIN_CLIENT: u32 = 26;
    pub const DEVICEFAMILYDEVICEFORM_TOY: u32 = 27;
    pub const DEVICEFAMILYDEVICEFORM_VENDING: u32 = 28;
    pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER: u32 = 29;
    pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE: u32 = 30;
    pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_S: u32 = 31;
    pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X: u32 = 32;
    pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT: u32 = 33;
    pub const DEVICEFAMILYDEVICEFORM_MAX: u32 = 33;
    pub const DLL_PROCESS_ATTACH: u32 = 1;
    pub const DLL_THREAD_ATTACH: u32 = 2;
    pub const DLL_THREAD_DETACH: u32 = 3;
    pub const DLL_PROCESS_DETACH: u32 = 0;
    pub const EVENTLOG_SEQUENTIAL_READ: u32 = 1;
    pub const EVENTLOG_SEEK_READ: u32 = 2;
    pub const EVENTLOG_FORWARDS_READ: u32 = 4;
    pub const EVENTLOG_BACKWARDS_READ: u32 = 8;
    pub const EVENTLOG_SUCCESS: u32 = 0;
    pub const EVENTLOG_ERROR_TYPE: u32 = 1;
    pub const EVENTLOG_WARNING_TYPE: u32 = 2;
    pub const EVENTLOG_INFORMATION_TYPE: u32 = 4;
    pub const EVENTLOG_AUDIT_SUCCESS: u32 = 8;
    pub const EVENTLOG_AUDIT_FAILURE: u32 = 16;
    pub const EVENTLOG_START_PAIRED_EVENT: u32 = 1;
    pub const EVENTLOG_END_PAIRED_EVENT: u32 = 2;
    pub const EVENTLOG_END_ALL_PAIRED_EVENTS: u32 = 4;
    pub const EVENTLOG_PAIRED_EVENT_ACTIVE: u32 = 8;
    pub const EVENTLOG_PAIRED_EVENT_INACTIVE: u32 = 16;
    pub const MAXLOGICALLOGNAMESIZE: u32 = 256;
    pub const KEY_QUERY_VALUE: u32 = 1;
    pub const KEY_SET_VALUE: u32 = 2;
    pub const KEY_CREATE_SUB_KEY: u32 = 4;
    pub const KEY_ENUMERATE_SUB_KEYS: u32 = 8;
    pub const KEY_NOTIFY: u32 = 16;
    pub const KEY_CREATE_LINK: u32 = 32;
    pub const KEY_WOW64_32KEY: u32 = 512;
    pub const KEY_WOW64_64KEY: u32 = 256;
    pub const KEY_WOW64_RES: u32 = 768;
    pub const KEY_READ: u32 = 131097;
    pub const KEY_WRITE: u32 = 131078;
    pub const KEY_EXECUTE: u32 = 131097;
    pub const KEY_ALL_ACCESS: u32 = 983103;
    pub const REG_OPTION_RESERVED: u32 = 0;
    pub const REG_OPTION_NON_VOLATILE: u32 = 0;
    pub const REG_OPTION_VOLATILE: u32 = 1;
    pub const REG_OPTION_CREATE_LINK: u32 = 2;
    pub const REG_OPTION_BACKUP_RESTORE: u32 = 4;
    pub const REG_OPTION_OPEN_LINK: u32 = 8;
    pub const REG_OPTION_DONT_VIRTUALIZE: u32 = 16;
    pub const REG_LEGAL_OPTION: u32 = 31;
    pub const REG_OPEN_LEGAL_OPTION: u32 = 28;
    pub const REG_CREATED_NEW_KEY: u32 = 1;
    pub const REG_OPENED_EXISTING_KEY: u32 = 2;
    pub const REG_STANDARD_FORMAT: u32 = 1;
    pub const REG_LATEST_FORMAT: u32 = 2;
    pub const REG_NO_COMPRESSION: u32 = 4;
    pub const REG_WHOLE_HIVE_VOLATILE: u32 = 1;
    pub const REG_REFRESH_HIVE: u32 = 2;
    pub const REG_NO_LAZY_FLUSH: u32 = 4;
    pub const REG_FORCE_RESTORE: u32 = 8;
    pub const REG_APP_HIVE: u32 = 16;
    pub const REG_PROCESS_PRIVATE: u32 = 32;
    pub const REG_START_JOURNAL: u32 = 64;
    pub const REG_HIVE_EXACT_FILE_GROWTH: u32 = 128;
    pub const REG_HIVE_NO_RM: u32 = 256;
    pub const REG_HIVE_SINGLE_LOG: u32 = 512;
    pub const REG_BOOT_HIVE: u32 = 1024;
    pub const REG_LOAD_HIVE_OPEN_HANDLE: u32 = 2048;
    pub const REG_FLUSH_HIVE_FILE_GROWTH: u32 = 4096;
    pub const REG_OPEN_READ_ONLY: u32 = 8192;
    pub const REG_IMMUTABLE: u32 = 16384;
    pub const REG_NO_IMPERSONATION_FALLBACK: u32 = 32768;
    pub const REG_APP_HIVE_OPEN_READ_ONLY: u32 = 8192;
    pub const REG_FORCE_UNLOAD: u32 = 1;
    pub const REG_UNLOAD_LEGAL_FLAGS: u32 = 1;
    pub const REG_NOTIFY_CHANGE_NAME: u32 = 1;
    pub const REG_NOTIFY_CHANGE_ATTRIBUTES: u32 = 2;
    pub const REG_NOTIFY_CHANGE_LAST_SET: u32 = 4;
    pub const REG_NOTIFY_CHANGE_SECURITY: u32 = 8;
    pub const REG_NOTIFY_THREAD_AGNOSTIC: u32 = 268435456;
    pub const REG_LEGAL_CHANGE_FILTER: u32 = 268435471;
    pub const REG_NONE: u32 = 0;
    pub const REG_SZ: u32 = 1;
    pub const REG_EXPAND_SZ: u32 = 2;
    pub const REG_BINARY: u32 = 3;
    pub const REG_DWORD: u32 = 4;
    pub const REG_DWORD_LITTLE_ENDIAN: u32 = 4;
    pub const REG_DWORD_BIG_ENDIAN: u32 = 5;
    pub const REG_LINK: u32 = 6;
    pub const REG_MULTI_SZ: u32 = 7;
    pub const REG_RESOURCE_LIST: u32 = 8;
    pub const REG_FULL_RESOURCE_DESCRIPTOR: u32 = 9;
    pub const REG_RESOURCE_REQUIREMENTS_LIST: u32 = 10;
    pub const REG_QWORD: u32 = 11;
    pub const REG_QWORD_LITTLE_ENDIAN: u32 = 11;
    pub const SERVICE_KERNEL_DRIVER: u32 = 1;
    pub const SERVICE_FILE_SYSTEM_DRIVER: u32 = 2;
    pub const SERVICE_ADAPTER: u32 = 4;
    pub const SERVICE_RECOGNIZER_DRIVER: u32 = 8;
    pub const SERVICE_DRIVER: u32 = 11;
    pub const SERVICE_WIN32_OWN_PROCESS: u32 = 16;
    pub const SERVICE_WIN32_SHARE_PROCESS: u32 = 32;
    pub const SERVICE_WIN32: u32 = 48;
    pub const SERVICE_USER_SERVICE: u32 = 64;
    pub const SERVICE_USERSERVICE_INSTANCE: u32 = 128;
    pub const SERVICE_USER_SHARE_PROCESS: u32 = 96;
    pub const SERVICE_USER_OWN_PROCESS: u32 = 80;
    pub const SERVICE_INTERACTIVE_PROCESS: u32 = 256;
    pub const SERVICE_PKG_SERVICE: u32 = 512;
    pub const SERVICE_TYPE_ALL: u32 = 1023;
    pub const SERVICE_BOOT_START: u32 = 0;
    pub const SERVICE_SYSTEM_START: u32 = 1;
    pub const SERVICE_AUTO_START: u32 = 2;
    pub const SERVICE_DEMAND_START: u32 = 3;
    pub const SERVICE_DISABLED: u32 = 4;
    pub const SERVICE_ERROR_IGNORE: u32 = 0;
    pub const SERVICE_ERROR_NORMAL: u32 = 1;
    pub const SERVICE_ERROR_SEVERE: u32 = 2;
    pub const SERVICE_ERROR_CRITICAL: u32 = 3;
    pub const CM_SERVICE_NETWORK_BOOT_LOAD: u32 = 1;
    pub const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD: u32 = 2;
    pub const CM_SERVICE_USB_DISK_BOOT_LOAD: u32 = 4;
    pub const CM_SERVICE_SD_DISK_BOOT_LOAD: u32 = 8;
    pub const CM_SERVICE_USB3_DISK_BOOT_LOAD: u32 = 16;
    pub const CM_SERVICE_MEASURED_BOOT_LOAD: u32 = 32;
    pub const CM_SERVICE_VERIFIER_BOOT_LOAD: u32 = 64;
    pub const CM_SERVICE_WINPE_BOOT_LOAD: u32 = 128;
    pub const CM_SERVICE_RAM_DISK_BOOT_LOAD: u32 = 256;
    pub const CM_SERVICE_VALID_PROMOTION_MASK: u32 = 511;
    pub const TAPE_ERASE_SHORT: u32 = 0;
    pub const TAPE_ERASE_LONG: u32 = 1;
    pub const TAPE_LOAD: u32 = 0;
    pub const TAPE_UNLOAD: u32 = 1;
    pub const TAPE_TENSION: u32 = 2;
    pub const TAPE_LOCK: u32 = 3;
    pub const TAPE_UNLOCK: u32 = 4;
    pub const TAPE_FORMAT: u32 = 5;
    pub const TAPE_SETMARKS: u32 = 0;
    pub const TAPE_FILEMARKS: u32 = 1;
    pub const TAPE_SHORT_FILEMARKS: u32 = 2;
    pub const TAPE_LONG_FILEMARKS: u32 = 3;
    pub const TAPE_ABSOLUTE_POSITION: u32 = 0;
    pub const TAPE_LOGICAL_POSITION: u32 = 1;
    pub const TAPE_PSEUDO_LOGICAL_POSITION: u32 = 2;
    pub const TAPE_REWIND: u32 = 0;
    pub const TAPE_ABSOLUTE_BLOCK: u32 = 1;
    pub const TAPE_LOGICAL_BLOCK: u32 = 2;
    pub const TAPE_PSEUDO_LOGICAL_BLOCK: u32 = 3;
    pub const TAPE_SPACE_END_OF_DATA: u32 = 4;
    pub const TAPE_SPACE_RELATIVE_BLOCKS: u32 = 5;
    pub const TAPE_SPACE_FILEMARKS: u32 = 6;
    pub const TAPE_SPACE_SEQUENTIAL_FMKS: u32 = 7;
    pub const TAPE_SPACE_SETMARKS: u32 = 8;
    pub const TAPE_SPACE_SEQUENTIAL_SMKS: u32 = 9;
    pub const TAPE_DRIVE_FIXED: u32 = 1;
    pub const TAPE_DRIVE_SELECT: u32 = 2;
    pub const TAPE_DRIVE_INITIATOR: u32 = 4;
    pub const TAPE_DRIVE_ERASE_SHORT: u32 = 16;
    pub const TAPE_DRIVE_ERASE_LONG: u32 = 32;
    pub const TAPE_DRIVE_ERASE_BOP_ONLY: u32 = 64;
    pub const TAPE_DRIVE_ERASE_IMMEDIATE: u32 = 128;
    pub const TAPE_DRIVE_TAPE_CAPACITY: u32 = 256;
    pub const TAPE_DRIVE_TAPE_REMAINING: u32 = 512;
    pub const TAPE_DRIVE_FIXED_BLOCK: u32 = 1024;
    pub const TAPE_DRIVE_VARIABLE_BLOCK: u32 = 2048;
    pub const TAPE_DRIVE_WRITE_PROTECT: u32 = 4096;
    pub const TAPE_DRIVE_EOT_WZ_SIZE: u32 = 8192;
    pub const TAPE_DRIVE_ECC: u32 = 65536;
    pub const TAPE_DRIVE_COMPRESSION: u32 = 131072;
    pub const TAPE_DRIVE_PADDING: u32 = 262144;
    pub const TAPE_DRIVE_REPORT_SMKS: u32 = 524288;
    pub const TAPE_DRIVE_GET_ABSOLUTE_BLK: u32 = 1048576;
    pub const TAPE_DRIVE_GET_LOGICAL_BLK: u32 = 2097152;
    pub const TAPE_DRIVE_SET_EOT_WZ_SIZE: u32 = 4194304;
    pub const TAPE_DRIVE_EJECT_MEDIA: u32 = 16777216;
    pub const TAPE_DRIVE_CLEAN_REQUESTS: u32 = 33554432;
    pub const TAPE_DRIVE_SET_CMP_BOP_ONLY: u32 = 67108864;
    pub const TAPE_DRIVE_RESERVED_BIT: u32 = 2147483648;
    pub const TAPE_DRIVE_LOAD_UNLOAD: u32 = 2147483649;
    pub const TAPE_DRIVE_TENSION: u32 = 2147483650;
    pub const TAPE_DRIVE_LOCK_UNLOCK: u32 = 2147483652;
    pub const TAPE_DRIVE_REWIND_IMMEDIATE: u32 = 2147483656;
    pub const TAPE_DRIVE_SET_BLOCK_SIZE: u32 = 2147483664;
    pub const TAPE_DRIVE_LOAD_UNLD_IMMED: u32 = 2147483680;
    pub const TAPE_DRIVE_TENSION_IMMED: u32 = 2147483712;
    pub const TAPE_DRIVE_LOCK_UNLK_IMMED: u32 = 2147483776;
    pub const TAPE_DRIVE_SET_ECC: u32 = 2147483904;
    pub const TAPE_DRIVE_SET_COMPRESSION: u32 = 2147484160;
    pub const TAPE_DRIVE_SET_PADDING: u32 = 2147484672;
    pub const TAPE_DRIVE_SET_REPORT_SMKS: u32 = 2147485696;
    pub const TAPE_DRIVE_ABSOLUTE_BLK: u32 = 2147487744;
    pub const TAPE_DRIVE_ABS_BLK_IMMED: u32 = 2147491840;
    pub const TAPE_DRIVE_LOGICAL_BLK: u32 = 2147500032;
    pub const TAPE_DRIVE_LOG_BLK_IMMED: u32 = 2147516416;
    pub const TAPE_DRIVE_END_OF_DATA: u32 = 2147549184;
    pub const TAPE_DRIVE_RELATIVE_BLKS: u32 = 2147614720;
    pub const TAPE_DRIVE_FILEMARKS: u32 = 2147745792;
    pub const TAPE_DRIVE_SEQUENTIAL_FMKS: u32 = 2148007936;
    pub const TAPE_DRIVE_SETMARKS: u32 = 2148532224;
    pub const TAPE_DRIVE_SEQUENTIAL_SMKS: u32 = 2149580800;
    pub const TAPE_DRIVE_REVERSE_POSITION: u32 = 2151677952;
    pub const TAPE_DRIVE_SPACE_IMMEDIATE: u32 = 2155872256;
    pub const TAPE_DRIVE_WRITE_SETMARKS: u32 = 2164260864;
    pub const TAPE_DRIVE_WRITE_FILEMARKS: u32 = 2181038080;
    pub const TAPE_DRIVE_WRITE_SHORT_FMKS: u32 = 2214592512;
    pub const TAPE_DRIVE_WRITE_LONG_FMKS: u32 = 2281701376;
    pub const TAPE_DRIVE_WRITE_MARK_IMMED: u32 = 2415919104;
    pub const TAPE_DRIVE_FORMAT: u32 = 2684354560;
    pub const TAPE_DRIVE_FORMAT_IMMEDIATE: u32 = 3221225472;
    pub const TAPE_DRIVE_HIGH_FEATURES: u32 = 2147483648;
    pub const TAPE_FIXED_PARTITIONS: u32 = 0;
    pub const TAPE_SELECT_PARTITIONS: u32 = 1;
    pub const TAPE_INITIATOR_PARTITIONS: u32 = 2;
    pub const TAPE_QUERY_DRIVE_PARAMETERS: u32 = 0;
    pub const TAPE_QUERY_MEDIA_CAPACITY: u32 = 1;
    pub const TAPE_CHECK_FOR_DRIVE_PROBLEM: u32 = 2;
    pub const TAPE_QUERY_IO_ERROR_DATA: u32 = 3;
    pub const TAPE_QUERY_DEVICE_ERROR_DATA: u32 = 4;
    pub const TRANSACTION_MANAGER_VOLATILE: u32 = 1;
    pub const TRANSACTION_MANAGER_COMMIT_DEFAULT: u32 = 0;
    pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME: u32 = 2;
    pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES: u32 = 4;
    pub const TRANSACTION_MANAGER_COMMIT_LOWEST: u32 = 8;
    pub const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY: u32 = 16;
    pub const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS: u32 = 32;
    pub const TRANSACTION_MANAGER_MAXIMUM_OPTION: u32 = 63;
    pub const TRANSACTION_DO_NOT_PROMOTE: u32 = 1;
    pub const TRANSACTION_MAXIMUM_OPTION: u32 = 1;
    pub const RESOURCE_MANAGER_VOLATILE: u32 = 1;
    pub const RESOURCE_MANAGER_COMMUNICATION: u32 = 2;
    pub const RESOURCE_MANAGER_MAXIMUM_OPTION: u32 = 3;
    pub const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY: u32 = 1;
    pub const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO: u32 = 2;
    pub const CRM_PROTOCOL_MAXIMUM_OPTION: u32 = 3;
    pub const ENLISTMENT_SUPERIOR: u32 = 1;
    pub const ENLISTMENT_MAXIMUM_OPTION: u32 = 1;
    pub const TRANSACTION_NOTIFY_MASK: u32 = 1073741823;
    pub const TRANSACTION_NOTIFY_PREPREPARE: u32 = 1;
    pub const TRANSACTION_NOTIFY_PREPARE: u32 = 2;
    pub const TRANSACTION_NOTIFY_COMMIT: u32 = 4;
    pub const TRANSACTION_NOTIFY_ROLLBACK: u32 = 8;
    pub const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE: u32 = 16;
    pub const TRANSACTION_NOTIFY_PREPARE_COMPLETE: u32 = 32;
    pub const TRANSACTION_NOTIFY_COMMIT_COMPLETE: u32 = 64;
    pub const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE: u32 = 128;
    pub const TRANSACTION_NOTIFY_RECOVER: u32 = 256;
    pub const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT: u32 = 512;
    pub const TRANSACTION_NOTIFY_DELEGATE_COMMIT: u32 = 1024;
    pub const TRANSACTION_NOTIFY_RECOVER_QUERY: u32 = 2048;
    pub const TRANSACTION_NOTIFY_ENLIST_PREPREPARE: u32 = 4096;
    pub const TRANSACTION_NOTIFY_LAST_RECOVER: u32 = 8192;
    pub const TRANSACTION_NOTIFY_INDOUBT: u32 = 16384;
    pub const TRANSACTION_NOTIFY_PROPAGATE_PULL: u32 = 32768;
    pub const TRANSACTION_NOTIFY_PROPAGATE_PUSH: u32 = 65536;
    pub const TRANSACTION_NOTIFY_MARSHAL: u32 = 131072;
    pub const TRANSACTION_NOTIFY_ENLIST_MASK: u32 = 262144;
    pub const TRANSACTION_NOTIFY_RM_DISCONNECTED: u32 = 16777216;
    pub const TRANSACTION_NOTIFY_TM_ONLINE: u32 = 33554432;
    pub const TRANSACTION_NOTIFY_COMMIT_REQUEST: u32 = 67108864;
    pub const TRANSACTION_NOTIFY_PROMOTE: u32 = 134217728;
    pub const TRANSACTION_NOTIFY_PROMOTE_NEW: u32 = 268435456;
    pub const TRANSACTION_NOTIFY_REQUEST_OUTCOME: u32 = 536870912;
    pub const TRANSACTION_NOTIFY_COMMIT_FINALIZE: u32 = 1073741824;
    pub const TRANSACTIONMANAGER_OBJECT_PATH: &[u8; 21usize] = b"\\TransactionManager\\\0";
    pub const TRANSACTION_OBJECT_PATH: &[u8; 14usize] = b"\\Transaction\\\0";
    pub const ENLISTMENT_OBJECT_PATH: &[u8; 13usize] = b"\\Enlistment\\\0";
    pub const RESOURCE_MANAGER_OBJECT_PATH: &[u8; 18usize] = b"\\ResourceManager\\\0";
    pub const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED: u32 = 1;
    pub const KTM_MARSHAL_BLOB_VERSION_MAJOR: u32 = 1;
    pub const KTM_MARSHAL_BLOB_VERSION_MINOR: u32 = 1;
    pub const MAX_TRANSACTION_DESCRIPTION_LENGTH: u32 = 64;
    pub const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH: u32 = 64;
    pub const TRANSACTIONMANAGER_QUERY_INFORMATION: u32 = 1;
    pub const TRANSACTIONMANAGER_SET_INFORMATION: u32 = 2;
    pub const TRANSACTIONMANAGER_RECOVER: u32 = 4;
    pub const TRANSACTIONMANAGER_RENAME: u32 = 8;
    pub const TRANSACTIONMANAGER_CREATE_RM: u32 = 16;
    pub const TRANSACTIONMANAGER_BIND_TRANSACTION: u32 = 32;
    pub const TRANSACTIONMANAGER_GENERIC_READ: u32 = 131073;
    pub const TRANSACTIONMANAGER_GENERIC_WRITE: u32 = 131102;
    pub const TRANSACTIONMANAGER_GENERIC_EXECUTE: u32 = 131072;
    pub const TRANSACTIONMANAGER_ALL_ACCESS: u32 = 983103;
    pub const TRANSACTION_QUERY_INFORMATION: u32 = 1;
    pub const TRANSACTION_SET_INFORMATION: u32 = 2;
    pub const TRANSACTION_ENLIST: u32 = 4;
    pub const TRANSACTION_COMMIT: u32 = 8;
    pub const TRANSACTION_ROLLBACK: u32 = 16;
    pub const TRANSACTION_PROPAGATE: u32 = 32;
    pub const TRANSACTION_RIGHT_RESERVED1: u32 = 64;
    pub const TRANSACTION_GENERIC_READ: u32 = 1179649;
    pub const TRANSACTION_GENERIC_WRITE: u32 = 1179710;
    pub const TRANSACTION_GENERIC_EXECUTE: u32 = 1179672;
    pub const TRANSACTION_ALL_ACCESS: u32 = 2031679;
    pub const TRANSACTION_RESOURCE_MANAGER_RIGHTS: u32 = 1179703;
    pub const RESOURCEMANAGER_QUERY_INFORMATION: u32 = 1;
    pub const RESOURCEMANAGER_SET_INFORMATION: u32 = 2;
    pub const RESOURCEMANAGER_RECOVER: u32 = 4;
    pub const RESOURCEMANAGER_ENLIST: u32 = 8;
    pub const RESOURCEMANAGER_GET_NOTIFICATION: u32 = 16;
    pub const RESOURCEMANAGER_REGISTER_PROTOCOL: u32 = 32;
    pub const RESOURCEMANAGER_COMPLETE_PROPAGATION: u32 = 64;
    pub const RESOURCEMANAGER_GENERIC_READ: u32 = 1179649;
    pub const RESOURCEMANAGER_GENERIC_WRITE: u32 = 1179774;
    pub const RESOURCEMANAGER_GENERIC_EXECUTE: u32 = 1179740;
    pub const RESOURCEMANAGER_ALL_ACCESS: u32 = 2031743;
    pub const ENLISTMENT_QUERY_INFORMATION: u32 = 1;
    pub const ENLISTMENT_SET_INFORMATION: u32 = 2;
    pub const ENLISTMENT_RECOVER: u32 = 4;
    pub const ENLISTMENT_SUBORDINATE_RIGHTS: u32 = 8;
    pub const ENLISTMENT_SUPERIOR_RIGHTS: u32 = 16;
    pub const ENLISTMENT_GENERIC_READ: u32 = 131073;
    pub const ENLISTMENT_GENERIC_WRITE: u32 = 131102;
    pub const ENLISTMENT_GENERIC_EXECUTE: u32 = 131100;
    pub const ENLISTMENT_ALL_ACCESS: u32 = 983071;
    pub const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION: u32 = 1;
    pub const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION: u32 = 2;
    pub const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION: u32 = 3;
    pub const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION: u32 = 4;
    pub const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION: u32 = 5;
    pub const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION: u32 = 6;
    pub const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION: u32 = 7;
    pub const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE: u32 = 8;
    pub const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES: u32 = 9;
    pub const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS: u32 = 10;
    pub const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO: u32 = 11;
    pub const ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES: u32 = 12;
    pub const APP_LOCAL_DEVICE_ID_SIZE: u32 = 32;
    pub const DM_UPDATE: u32 = 1;
    pub const DM_COPY: u32 = 2;
    pub const DM_PROMPT: u32 = 4;
    pub const DM_MODIFY: u32 = 8;
    pub const DM_IN_BUFFER: u32 = 8;
    pub const DM_IN_PROMPT: u32 = 4;
    pub const DM_OUT_BUFFER: u32 = 2;
    pub const DM_OUT_DEFAULT: u32 = 1;
    pub const DC_FIELDS: u32 = 1;
    pub const DC_PAPERS: u32 = 2;
    pub const DC_PAPERSIZE: u32 = 3;
    pub const DC_MINEXTENT: u32 = 4;
    pub const DC_MAXEXTENT: u32 = 5;
    pub const DC_BINS: u32 = 6;
    pub const DC_DUPLEX: u32 = 7;
    pub const DC_SIZE: u32 = 8;
    pub const DC_EXTRA: u32 = 9;
    pub const DC_VERSION: u32 = 10;
    pub const DC_DRIVER: u32 = 11;
    pub const DC_BINNAMES: u32 = 12;
    pub const DC_ENUMRESOLUTIONS: u32 = 13;
    pub const DC_FILEDEPENDENCIES: u32 = 14;
    pub const DC_TRUETYPE: u32 = 15;
    pub const DC_PAPERNAMES: u32 = 16;
    pub const DC_ORIENTATION: u32 = 17;
    pub const DC_COPIES: u32 = 18;
    pub const FIND_FIRST_EX_CASE_SENSITIVE: u32 = 1;
    pub const FIND_FIRST_EX_LARGE_FETCH: u32 = 2;
    pub const FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY: u32 = 4;
    pub const LOCKFILE_FAIL_IMMEDIATELY: u32 = 1;
    pub const LOCKFILE_EXCLUSIVE_LOCK: u32 = 2;
    pub const PROCESS_HEAP_REGION: u32 = 1;
    pub const PROCESS_HEAP_UNCOMMITTED_RANGE: u32 = 2;
    pub const PROCESS_HEAP_ENTRY_BUSY: u32 = 4;
    pub const PROCESS_HEAP_SEG_ALLOC: u32 = 8;
    pub const PROCESS_HEAP_ENTRY_MOVEABLE: u32 = 16;
    pub const PROCESS_HEAP_ENTRY_DDESHARE: u32 = 32;
    pub const EXCEPTION_DEBUG_EVENT: u32 = 1;
    pub const CREATE_THREAD_DEBUG_EVENT: u32 = 2;
    pub const CREATE_PROCESS_DEBUG_EVENT: u32 = 3;
    pub const EXIT_THREAD_DEBUG_EVENT: u32 = 4;
    pub const EXIT_PROCESS_DEBUG_EVENT: u32 = 5;
    pub const LOAD_DLL_DEBUG_EVENT: u32 = 6;
    pub const UNLOAD_DLL_DEBUG_EVENT: u32 = 7;
    pub const OUTPUT_DEBUG_STRING_EVENT: u32 = 8;
    pub const RIP_EVENT: u32 = 9;
    pub const LMEM_FIXED: u32 = 0;
    pub const LMEM_MOVEABLE: u32 = 2;
    pub const LMEM_NOCOMPACT: u32 = 16;
    pub const LMEM_NODISCARD: u32 = 32;
    pub const LMEM_ZEROINIT: u32 = 64;
    pub const LMEM_MODIFY: u32 = 128;
    pub const LMEM_DISCARDABLE: u32 = 3840;
    pub const LMEM_VALID_FLAGS: u32 = 3954;
    pub const LMEM_INVALID_HANDLE: u32 = 32768;
    pub const LHND: u32 = 66;
    pub const LPTR: u32 = 64;
    pub const NONZEROLHND: u32 = 2;
    pub const NONZEROLPTR: u32 = 0;
    pub const LMEM_DISCARDED: u32 = 16384;
    pub const LMEM_LOCKCOUNT: u32 = 255;
    pub const CREATE_NEW: u32 = 1;
    pub const CREATE_ALWAYS: u32 = 2;
    pub const OPEN_EXISTING: u32 = 3;
    pub const OPEN_ALWAYS: u32 = 4;
    pub const TRUNCATE_EXISTING: u32 = 5;
    pub const INIT_ONCE_CHECK_ONLY: u32 = 1;
    pub const INIT_ONCE_ASYNC: u32 = 2;
    pub const INIT_ONCE_INIT_FAILED: u32 = 4;
    pub const INIT_ONCE_CTX_RESERVED_BITS: u32 = 2;
    pub const CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
    pub const MUTEX_MODIFY_STATE: u32 = 1;
    pub const MUTEX_ALL_ACCESS: u32 = 2031617;
    pub const CREATE_MUTEX_INITIAL_OWNER: u32 = 1;
    pub const CREATE_EVENT_MANUAL_RESET: u32 = 1;
    pub const CREATE_EVENT_INITIAL_SET: u32 = 2;
    pub const CREATE_WAITABLE_TIMER_MANUAL_RESET: u32 = 1;
    pub const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION: u32 = 2;
    pub const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY: u32 = 1;
    pub const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY: u32 = 2;
    pub const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE: u32 = 4;
    pub const PROC_THREAD_ATTRIBUTE_REPLACE_VALUE: u32 = 1;
    pub const PROCESS_AFFINITY_ENABLE_AUTO_UPDATE: u32 = 1;
    pub const THREAD_POWER_THROTTLING_CURRENT_VERSION: u32 = 1;
    pub const THREAD_POWER_THROTTLING_EXECUTION_SPEED: u32 = 1;
    pub const THREAD_POWER_THROTTLING_VALID_FLAGS: u32 = 1;
    pub const PME_CURRENT_VERSION: u32 = 1;
    pub const PME_FAILFAST_ON_COMMIT_FAIL_DISABLE: u32 = 0;
    pub const PME_FAILFAST_ON_COMMIT_FAIL_ENABLE: u32 = 1;
    pub const PROCESS_POWER_THROTTLING_CURRENT_VERSION: u32 = 1;
    pub const PROCESS_POWER_THROTTLING_EXECUTION_SPEED: u32 = 1;
    pub const PROCESS_POWER_THROTTLING_VALID_FLAGS: u32 = 1;
    pub const PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND: u32 = 1;
    pub const PROCESS_LEAP_SECOND_INFO_VALID_FLAGS: u32 = 1;
    pub const USER_CET_ENVIRONMENT_WIN32_PROCESS: u32 = 0;
    pub const USER_CET_ENVIRONMENT_SGX2_ENCLAVE: u32 = 2;
    pub const USER_CET_ENVIRONMENT_VBS_ENCLAVE: u32 = 16;
    pub const USER_CET_ENVIRONMENT_VBS_BASIC_ENCLAVE: u32 = 17;
    pub const SCEX2_ALT_NETBIOS_NAME: u32 = 1;
    pub const FILE_MAP_WRITE: u32 = 2;
    pub const FILE_MAP_READ: u32 = 4;
    pub const FILE_MAP_ALL_ACCESS: u32 = 983071;
    pub const FILE_MAP_EXECUTE: u32 = 32;
    pub const FILE_MAP_COPY: u32 = 1;
    pub const FILE_MAP_RESERVE: u32 = 2147483648;
    pub const FILE_MAP_TARGETS_INVALID: u32 = 1073741824;
    pub const FILE_MAP_LARGE_PAGES: u32 = 536870912;
    pub const FILE_CACHE_MAX_HARD_ENABLE: u32 = 1;
    pub const FILE_CACHE_MAX_HARD_DISABLE: u32 = 2;
    pub const FILE_CACHE_MIN_HARD_ENABLE: u32 = 4;
    pub const FILE_CACHE_MIN_HARD_DISABLE: u32 = 8;
    pub const MEHC_PATROL_SCRUBBER_PRESENT: u32 = 1;
    pub const FIND_RESOURCE_DIRECTORY_TYPES: u32 = 256;
    pub const FIND_RESOURCE_DIRECTORY_NAMES: u32 = 512;
    pub const FIND_RESOURCE_DIRECTORY_LANGUAGES: u32 = 1024;
    pub const RESOURCE_ENUM_LN: u32 = 1;
    pub const RESOURCE_ENUM_MUI: u32 = 2;
    pub const RESOURCE_ENUM_MUI_SYSTEM: u32 = 4;
    pub const RESOURCE_ENUM_VALIDATE: u32 = 8;
    pub const RESOURCE_ENUM_MODULE_EXACT: u32 = 16;
    pub const SUPPORT_LANG_NUMBER: u32 = 32;
    pub const GET_MODULE_HANDLE_EX_FLAG_PIN: u32 = 1;
    pub const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT: u32 = 2;
    pub const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS: u32 = 4;
    pub const CURRENT_IMPORT_REDIRECTION_VERSION: u32 = 1;
    pub const DONT_RESOLVE_DLL_REFERENCES: u32 = 1;
    pub const LOAD_LIBRARY_AS_DATAFILE: u32 = 2;
    pub const LOAD_WITH_ALTERED_SEARCH_PATH: u32 = 8;
    pub const LOAD_IGNORE_CODE_AUTHZ_LEVEL: u32 = 16;
    pub const LOAD_LIBRARY_AS_IMAGE_RESOURCE: u32 = 32;
    pub const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE: u32 = 64;
    pub const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET: u32 = 128;
    pub const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR: u32 = 256;
    pub const LOAD_LIBRARY_SEARCH_APPLICATION_DIR: u32 = 512;
    pub const LOAD_LIBRARY_SEARCH_USER_DIRS: u32 = 1024;
    pub const LOAD_LIBRARY_SEARCH_SYSTEM32: u32 = 2048;
    pub const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS: u32 = 4096;
    pub const LOAD_LIBRARY_SAFE_CURRENT_DIRS: u32 = 8192;
    pub const LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER: u32 = 16384;
    pub const LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY: u32 = 32768;
    pub const PRIVATE_NAMESPACE_FLAG_DESTROY: u32 = 1;
    pub const FILE_BEGIN: u32 = 0;
    pub const FILE_CURRENT: u32 = 1;
    pub const FILE_END: u32 = 2;
    pub const FILE_FLAG_WRITE_THROUGH: u32 = 2147483648;
    pub const FILE_FLAG_OVERLAPPED: u32 = 1073741824;
    pub const FILE_FLAG_NO_BUFFERING: u32 = 536870912;
    pub const FILE_FLAG_RANDOM_ACCESS: u32 = 268435456;
    pub const FILE_FLAG_SEQUENTIAL_SCAN: u32 = 134217728;
    pub const FILE_FLAG_DELETE_ON_CLOSE: u32 = 67108864;
    pub const FILE_FLAG_BACKUP_SEMANTICS: u32 = 33554432;
    pub const FILE_FLAG_POSIX_SEMANTICS: u32 = 16777216;
    pub const FILE_FLAG_SESSION_AWARE: u32 = 8388608;
    pub const FILE_FLAG_OPEN_REPARSE_POINT: u32 = 2097152;
    pub const FILE_FLAG_OPEN_NO_RECALL: u32 = 1048576;
    pub const FILE_FLAG_FIRST_PIPE_INSTANCE: u32 = 524288;
    pub const FILE_FLAG_OPEN_REQUIRING_OPLOCK: u32 = 262144;
    pub const PROGRESS_CONTINUE: u32 = 0;
    pub const PROGRESS_CANCEL: u32 = 1;
    pub const PROGRESS_STOP: u32 = 2;
    pub const PROGRESS_QUIET: u32 = 3;
    pub const CALLBACK_CHUNK_FINISHED: u32 = 0;
    pub const CALLBACK_STREAM_SWITCH: u32 = 1;
    pub const COPY_FILE_FAIL_IF_EXISTS: u32 = 1;
    pub const COPY_FILE_RESTARTABLE: u32 = 2;
    pub const COPY_FILE_OPEN_SOURCE_FOR_WRITE: u32 = 4;
    pub const COPY_FILE_ALLOW_DECRYPTED_DESTINATION: u32 = 8;
    pub const COPY_FILE_COPY_SYMLINK: u32 = 2048;
    pub const COPY_FILE_NO_BUFFERING: u32 = 4096;
    pub const COPY_FILE_REQUEST_SECURITY_PRIVILEGES: u32 = 8192;
    pub const COPY_FILE_RESUME_FROM_PAUSE: u32 = 16384;
    pub const COPY_FILE_NO_OFFLOAD: u32 = 262144;
    pub const COPY_FILE_IGNORE_EDP_BLOCK: u32 = 4194304;
    pub const COPY_FILE_IGNORE_SOURCE_ENCRYPTION: u32 = 8388608;
    pub const COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC: u32 = 33554432;
    pub const COPY_FILE_REQUEST_COMPRESSED_TRAFFIC: u32 = 268435456;
    pub const COPY_FILE_OPEN_AND_COPY_REPARSE_POINT: u32 = 2097152;
    pub const COPY_FILE_DIRECTORY: u32 = 128;
    pub const COPY_FILE_SKIP_ALTERNATE_STREAMS: u32 = 32768;
    pub const COPY_FILE_DISABLE_PRE_ALLOCATION: u32 = 67108864;
    pub const COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE: u32 = 134217728;
    pub const REPLACEFILE_WRITE_THROUGH: u32 = 1;
    pub const REPLACEFILE_IGNORE_MERGE_ERRORS: u32 = 2;
    pub const REPLACEFILE_IGNORE_ACL_ERRORS: u32 = 4;
    pub const PIPE_ACCESS_INBOUND: u32 = 1;
    pub const PIPE_ACCESS_OUTBOUND: u32 = 2;
    pub const PIPE_ACCESS_DUPLEX: u32 = 3;
    pub const PIPE_CLIENT_END: u32 = 0;
    pub const PIPE_SERVER_END: u32 = 1;
    pub const PIPE_WAIT: u32 = 0;
    pub const PIPE_NOWAIT: u32 = 1;
    pub const PIPE_READMODE_BYTE: u32 = 0;
    pub const PIPE_READMODE_MESSAGE: u32 = 2;
    pub const PIPE_TYPE_BYTE: u32 = 0;
    pub const PIPE_TYPE_MESSAGE: u32 = 4;
    pub const PIPE_ACCEPT_REMOTE_CLIENTS: u32 = 0;
    pub const PIPE_REJECT_REMOTE_CLIENTS: u32 = 8;
    pub const PIPE_UNLIMITED_INSTANCES: u32 = 255;
    pub const SECURITY_CONTEXT_TRACKING: u32 = 262144;
    pub const SECURITY_EFFECTIVE_ONLY: u32 = 524288;
    pub const SECURITY_SQOS_PRESENT: u32 = 1048576;
    pub const SECURITY_VALID_SQOS_FLAGS: u32 = 2031616;
    pub const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS: u32 = 1;
    pub const FAIL_FAST_NO_HARD_ERROR_DLG: u32 = 2;
    pub const DTR_CONTROL_DISABLE: u32 = 0;
    pub const DTR_CONTROL_ENABLE: u32 = 1;
    pub const DTR_CONTROL_HANDSHAKE: u32 = 2;
    pub const RTS_CONTROL_DISABLE: u32 = 0;
    pub const RTS_CONTROL_ENABLE: u32 = 1;
    pub const RTS_CONTROL_HANDSHAKE: u32 = 2;
    pub const RTS_CONTROL_TOGGLE: u32 = 3;
    pub const GMEM_FIXED: u32 = 0;
    pub const GMEM_MOVEABLE: u32 = 2;
    pub const GMEM_NOCOMPACT: u32 = 16;
    pub const GMEM_NODISCARD: u32 = 32;
    pub const GMEM_ZEROINIT: u32 = 64;
    pub const GMEM_MODIFY: u32 = 128;
    pub const GMEM_DISCARDABLE: u32 = 256;
    pub const GMEM_NOT_BANKED: u32 = 4096;
    pub const GMEM_SHARE: u32 = 8192;
    pub const GMEM_DDESHARE: u32 = 8192;
    pub const GMEM_NOTIFY: u32 = 16384;
    pub const GMEM_LOWER: u32 = 4096;
    pub const GMEM_VALID_FLAGS: u32 = 32626;
    pub const GMEM_INVALID_HANDLE: u32 = 32768;
    pub const GHND: u32 = 66;
    pub const GPTR: u32 = 64;
    pub const GMEM_DISCARDED: u32 = 16384;
    pub const GMEM_LOCKCOUNT: u32 = 255;
    pub const DEBUG_PROCESS: u32 = 1;
    pub const DEBUG_ONLY_THIS_PROCESS: u32 = 2;
    pub const CREATE_SUSPENDED: u32 = 4;
    pub const DETACHED_PROCESS: u32 = 8;
    pub const CREATE_NEW_CONSOLE: u32 = 16;
    pub const NORMAL_PRIORITY_CLASS: u32 = 32;
    pub const IDLE_PRIORITY_CLASS: u32 = 64;
    pub const HIGH_PRIORITY_CLASS: u32 = 128;
    pub const REALTIME_PRIORITY_CLASS: u32 = 256;
    pub const CREATE_NEW_PROCESS_GROUP: u32 = 512;
    pub const CREATE_UNICODE_ENVIRONMENT: u32 = 1024;
    pub const CREATE_SEPARATE_WOW_VDM: u32 = 2048;
    pub const CREATE_SHARED_WOW_VDM: u32 = 4096;
    pub const CREATE_FORCEDOS: u32 = 8192;
    pub const BELOW_NORMAL_PRIORITY_CLASS: u32 = 16384;
    pub const ABOVE_NORMAL_PRIORITY_CLASS: u32 = 32768;
    pub const INHERIT_PARENT_AFFINITY: u32 = 65536;
    pub const INHERIT_CALLER_PRIORITY: u32 = 131072;
    pub const CREATE_PROTECTED_PROCESS: u32 = 262144;
    pub const EXTENDED_STARTUPINFO_PRESENT: u32 = 524288;
    pub const PROCESS_MODE_BACKGROUND_BEGIN: u32 = 1048576;
    pub const PROCESS_MODE_BACKGROUND_END: u32 = 2097152;
    pub const CREATE_SECURE_PROCESS: u32 = 4194304;
    pub const CREATE_BREAKAWAY_FROM_JOB: u32 = 16777216;
    pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL: u32 = 33554432;
    pub const CREATE_DEFAULT_ERROR_MODE: u32 = 67108864;
    pub const CREATE_NO_WINDOW: u32 = 134217728;
    pub const PROFILE_USER: u32 = 268435456;
    pub const PROFILE_KERNEL: u32 = 536870912;
    pub const PROFILE_SERVER: u32 = 1073741824;
    pub const CREATE_IGNORE_SYSTEM_DEFAULT: u32 = 2147483648;
    pub const STACK_SIZE_PARAM_IS_A_RESERVATION: u32 = 65536;
    pub const THREAD_PRIORITY_LOWEST: i32 = -2;
    pub const THREAD_PRIORITY_BELOW_NORMAL: i32 = -1;
    pub const THREAD_PRIORITY_NORMAL: u32 = 0;
    pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
    pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
    pub const THREAD_PRIORITY_ERROR_RETURN: u32 = 2147483647;
    pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
    pub const THREAD_PRIORITY_IDLE: i32 = -15;
    pub const THREAD_MODE_BACKGROUND_BEGIN: u32 = 65536;
    pub const THREAD_MODE_BACKGROUND_END: u32 = 131072;
    pub const VOLUME_NAME_DOS: u32 = 0;
    pub const VOLUME_NAME_GUID: u32 = 1;
    pub const VOLUME_NAME_NT: u32 = 2;
    pub const VOLUME_NAME_NONE: u32 = 4;
    pub const FILE_NAME_NORMALIZED: u32 = 0;
    pub const FILE_NAME_OPENED: u32 = 8;
    pub const DRIVE_UNKNOWN: u32 = 0;
    pub const DRIVE_NO_ROOT_DIR: u32 = 1;
    pub const DRIVE_REMOVABLE: u32 = 2;
    pub const DRIVE_FIXED: u32 = 3;
    pub const DRIVE_REMOTE: u32 = 4;
    pub const DRIVE_CDROM: u32 = 5;
    pub const DRIVE_RAMDISK: u32 = 6;
    pub const FILE_TYPE_UNKNOWN: u32 = 0;
    pub const FILE_TYPE_DISK: u32 = 1;
    pub const FILE_TYPE_CHAR: u32 = 2;
    pub const FILE_TYPE_PIPE: u32 = 3;
    pub const FILE_TYPE_REMOTE: u32 = 32768;
    pub const NOPARITY: u32 = 0;
    pub const ODDPARITY: u32 = 1;
    pub const EVENPARITY: u32 = 2;
    pub const MARKPARITY: u32 = 3;
    pub const SPACEPARITY: u32 = 4;
    pub const ONESTOPBIT: u32 = 0;
    pub const ONE5STOPBITS: u32 = 1;
    pub const TWOSTOPBITS: u32 = 2;
    pub const IGNORE: u32 = 0;
    pub const INFINITE: u32 = 4294967295;
    pub const CBR_110: u32 = 110;
    pub const CBR_300: u32 = 300;
    pub const CBR_600: u32 = 600;
    pub const CBR_1200: u32 = 1200;
    pub const CBR_2400: u32 = 2400;
    pub const CBR_4800: u32 = 4800;
    pub const CBR_9600: u32 = 9600;
    pub const CBR_14400: u32 = 14400;
    pub const CBR_19200: u32 = 19200;
    pub const CBR_38400: u32 = 38400;
    pub const CBR_56000: u32 = 56000;
    pub const CBR_57600: u32 = 57600;
    pub const CBR_115200: u32 = 115200;
    pub const CBR_128000: u32 = 128000;
    pub const CBR_256000: u32 = 256000;
    pub const CE_RXOVER: u32 = 1;
    pub const CE_OVERRUN: u32 = 2;
    pub const CE_RXPARITY: u32 = 4;
    pub const CE_FRAME: u32 = 8;
    pub const CE_BREAK: u32 = 16;
    pub const CE_TXFULL: u32 = 256;
    pub const CE_PTO: u32 = 512;
    pub const CE_IOE: u32 = 1024;
    pub const CE_DNS: u32 = 2048;
    pub const CE_OOP: u32 = 4096;
    pub const CE_MODE: u32 = 32768;
    pub const IE_BADID: i32 = -1;
    pub const IE_OPEN: i32 = -2;
    pub const IE_NOPEN: i32 = -3;
    pub const IE_MEMORY: i32 = -4;
    pub const IE_DEFAULT: i32 = -5;
    pub const IE_HARDWARE: i32 = -10;
    pub const IE_BYTESIZE: i32 = -11;
    pub const IE_BAUDRATE: i32 = -12;
    pub const EV_RXCHAR: u32 = 1;
    pub const EV_RXFLAG: u32 = 2;
    pub const EV_TXEMPTY: u32 = 4;
    pub const EV_CTS: u32 = 8;
    pub const EV_DSR: u32 = 16;
    pub const EV_RLSD: u32 = 32;
    pub const EV_BREAK: u32 = 64;
    pub const EV_ERR: u32 = 128;
    pub const EV_RING: u32 = 256;
    pub const EV_PERR: u32 = 512;
    pub const EV_RX80FULL: u32 = 1024;
    pub const EV_EVENT1: u32 = 2048;
    pub const EV_EVENT2: u32 = 4096;
    pub const SETXOFF: u32 = 1;
    pub const SETXON: u32 = 2;
    pub const SETRTS: u32 = 3;
    pub const CLRRTS: u32 = 4;
    pub const SETDTR: u32 = 5;
    pub const CLRDTR: u32 = 6;
    pub const RESETDEV: u32 = 7;
    pub const SETBREAK: u32 = 8;
    pub const CLRBREAK: u32 = 9;
    pub const PURGE_TXABORT: u32 = 1;
    pub const PURGE_RXABORT: u32 = 2;
    pub const PURGE_TXCLEAR: u32 = 4;
    pub const PURGE_RXCLEAR: u32 = 8;
    pub const LPTx: u32 = 128;
    pub const S_QUEUEEMPTY: u32 = 0;
    pub const S_THRESHOLD: u32 = 1;
    pub const S_ALLTHRESHOLD: u32 = 2;
    pub const S_NORMAL: u32 = 0;
    pub const S_LEGATO: u32 = 1;
    pub const S_STACCATO: u32 = 2;
    pub const S_PERIOD512: u32 = 0;
    pub const S_PERIOD1024: u32 = 1;
    pub const S_PERIOD2048: u32 = 2;
    pub const S_PERIODVOICE: u32 = 3;
    pub const S_WHITE512: u32 = 4;
    pub const S_WHITE1024: u32 = 5;
    pub const S_WHITE2048: u32 = 6;
    pub const S_WHITEVOICE: u32 = 7;
    pub const S_SERDVNA: i32 = -1;
    pub const S_SEROFM: i32 = -2;
    pub const S_SERMACT: i32 = -3;
    pub const S_SERQFUL: i32 = -4;
    pub const S_SERBDNT: i32 = -5;
    pub const S_SERDLN: i32 = -6;
    pub const S_SERDCC: i32 = -7;
    pub const S_SERDTP: i32 = -8;
    pub const S_SERDVL: i32 = -9;
    pub const S_SERDMD: i32 = -10;
    pub const S_SERDSH: i32 = -11;
    pub const S_SERDPT: i32 = -12;
    pub const S_SERDFQ: i32 = -13;
    pub const S_SERDDR: i32 = -14;
    pub const S_SERDSR: i32 = -15;
    pub const S_SERDST: i32 = -16;
    pub const NMPWAIT_WAIT_FOREVER: u32 = 4294967295;
    pub const NMPWAIT_NOWAIT: u32 = 1;
    pub const NMPWAIT_USE_DEFAULT_WAIT: u32 = 0;
    pub const FS_CASE_IS_PRESERVED: u32 = 2;
    pub const FS_CASE_SENSITIVE: u32 = 1;
    pub const FS_UNICODE_STORED_ON_DISK: u32 = 4;
    pub const FS_PERSISTENT_ACLS: u32 = 8;
    pub const FS_VOL_IS_COMPRESSED: u32 = 32768;
    pub const FS_FILE_COMPRESSION: u32 = 16;
    pub const FS_FILE_ENCRYPTION: u32 = 131072;
    pub const OF_READ: u32 = 0;
    pub const OF_WRITE: u32 = 1;
    pub const OF_READWRITE: u32 = 2;
    pub const OF_SHARE_COMPAT: u32 = 0;
    pub const OF_SHARE_EXCLUSIVE: u32 = 16;
    pub const OF_SHARE_DENY_WRITE: u32 = 32;
    pub const OF_SHARE_DENY_READ: u32 = 48;
    pub const OF_SHARE_DENY_NONE: u32 = 64;
    pub const OF_PARSE: u32 = 256;
    pub const OF_DELETE: u32 = 512;
    pub const OF_VERIFY: u32 = 1024;
    pub const OF_CANCEL: u32 = 2048;
    pub const OF_CREATE: u32 = 4096;
    pub const OF_PROMPT: u32 = 8192;
    pub const OF_EXIST: u32 = 16384;
    pub const OF_REOPEN: u32 = 32768;
    pub const OFS_MAXPATHNAME: u32 = 128;
    pub const MAXINTATOM: u32 = 49152;
    pub const SCS_32BIT_BINARY: u32 = 0;
    pub const SCS_DOS_BINARY: u32 = 1;
    pub const SCS_WOW_BINARY: u32 = 2;
    pub const SCS_PIF_BINARY: u32 = 3;
    pub const SCS_POSIX_BINARY: u32 = 4;
    pub const SCS_OS216_BINARY: u32 = 5;
    pub const SCS_64BIT_BINARY: u32 = 6;
    pub const SCS_THIS_PLATFORM_BINARY: u32 = 6;
    pub const FIBER_FLAG_FLOAT_SWITCH: u32 = 1;
    pub const UMS_VERSION: u32 = 256;
    pub const PROCESS_DEP_ENABLE: u32 = 1;
    pub const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION: u32 = 2;
    pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS: u32 = 1;
    pub const FILE_SKIP_SET_EVENT_ON_HANDLE: u32 = 2;
    pub const SEM_FAILCRITICALERRORS: u32 = 1;
    pub const SEM_NOGPFAULTERRORBOX: u32 = 2;
    pub const SEM_NOALIGNMENTFAULTEXCEPT: u32 = 4;
    pub const SEM_NOOPENFILEERRORBOX: u32 = 32768;
    pub const CRITICAL_SECTION_NO_DEBUG_INFO: u32 = 16777216;
    pub const HANDLE_FLAG_INHERIT: u32 = 1;
    pub const HANDLE_FLAG_PROTECT_FROM_CLOSE: u32 = 2;
    pub const HINSTANCE_ERROR: u32 = 32;
    pub const GET_TAPE_MEDIA_INFORMATION: u32 = 0;
    pub const GET_TAPE_DRIVE_INFORMATION: u32 = 1;
    pub const SET_TAPE_MEDIA_INFORMATION: u32 = 0;
    pub const SET_TAPE_DRIVE_INFORMATION: u32 = 1;
    pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: u32 = 256;
    pub const FORMAT_MESSAGE_IGNORE_INSERTS: u32 = 512;
    pub const FORMAT_MESSAGE_FROM_STRING: u32 = 1024;
    pub const FORMAT_MESSAGE_FROM_HMODULE: u32 = 2048;
    pub const FORMAT_MESSAGE_FROM_SYSTEM: u32 = 4096;
    pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: u32 = 8192;
    pub const FORMAT_MESSAGE_MAX_WIDTH_MASK: u32 = 255;
    pub const FILE_ENCRYPTABLE: u32 = 0;
    pub const FILE_IS_ENCRYPTED: u32 = 1;
    pub const FILE_SYSTEM_ATTR: u32 = 2;
    pub const FILE_ROOT_DIR: u32 = 3;
    pub const FILE_SYSTEM_DIR: u32 = 4;
    pub const FILE_UNKNOWN: u32 = 5;
    pub const FILE_SYSTEM_NOT_SUPPORT: u32 = 6;
    pub const FILE_USER_DISALLOWED: u32 = 7;
    pub const FILE_READ_ONLY: u32 = 8;
    pub const FILE_DIR_DISALLOWED: u32 = 9;
    pub const EFS_USE_RECOVERY_KEYS: u32 = 1;
    pub const CREATE_FOR_IMPORT: u32 = 1;
    pub const CREATE_FOR_DIR: u32 = 2;
    pub const OVERWRITE_HIDDEN: u32 = 4;
    pub const EFSRPC_SECURE_ONLY: u32 = 8;
    pub const EFS_DROP_ALTERNATE_STREAMS: u32 = 16;
    pub const BACKUP_INVALID: u32 = 0;
    pub const BACKUP_DATA: u32 = 1;
    pub const BACKUP_EA_DATA: u32 = 2;
    pub const BACKUP_SECURITY_DATA: u32 = 3;
    pub const BACKUP_ALTERNATE_DATA: u32 = 4;
    pub const BACKUP_LINK: u32 = 5;
    pub const BACKUP_PROPERTY_DATA: u32 = 6;
    pub const BACKUP_OBJECT_ID: u32 = 7;
    pub const BACKUP_REPARSE_DATA: u32 = 8;
    pub const BACKUP_SPARSE_BLOCK: u32 = 9;
    pub const BACKUP_TXFS_DATA: u32 = 10;
    pub const BACKUP_GHOSTED_FILE_EXTENTS: u32 = 11;
    pub const STREAM_NORMAL_ATTRIBUTE: u32 = 0;
    pub const STREAM_MODIFIED_WHEN_READ: u32 = 1;
    pub const STREAM_CONTAINS_SECURITY: u32 = 2;
    pub const STREAM_CONTAINS_PROPERTIES: u32 = 4;
    pub const STREAM_SPARSE_ATTRIBUTE: u32 = 8;
    pub const STREAM_CONTAINS_GHOSTED_FILE_EXTENTS: u32 = 16;
    pub const STARTF_USESHOWWINDOW: u32 = 1;
    pub const STARTF_USESIZE: u32 = 2;
    pub const STARTF_USEPOSITION: u32 = 4;
    pub const STARTF_USECOUNTCHARS: u32 = 8;
    pub const STARTF_USEFILLATTRIBUTE: u32 = 16;
    pub const STARTF_RUNFULLSCREEN: u32 = 32;
    pub const STARTF_FORCEONFEEDBACK: u32 = 64;
    pub const STARTF_FORCEOFFFEEDBACK: u32 = 128;
    pub const STARTF_USESTDHANDLES: u32 = 256;
    pub const STARTF_USEHOTKEY: u32 = 512;
    pub const STARTF_TITLEISLINKNAME: u32 = 2048;
    pub const STARTF_TITLEISAPPID: u32 = 4096;
    pub const STARTF_PREVENTPINNING: u32 = 8192;
    pub const STARTF_UNTRUSTEDSOURCE: u32 = 32768;
    pub const SHUTDOWN_NORETRY: u32 = 1;
    pub const PROTECTION_LEVEL_WINTCB_LIGHT: u32 = 0;
    pub const PROTECTION_LEVEL_WINDOWS: u32 = 1;
    pub const PROTECTION_LEVEL_WINDOWS_LIGHT: u32 = 2;
    pub const PROTECTION_LEVEL_ANTIMALWARE_LIGHT: u32 = 3;
    pub const PROTECTION_LEVEL_LSA_LIGHT: u32 = 4;
    pub const PROTECTION_LEVEL_WINTCB: u32 = 5;
    pub const PROTECTION_LEVEL_CODEGEN_LIGHT: u32 = 6;
    pub const PROTECTION_LEVEL_AUTHENTICODE: u32 = 7;
    pub const PROTECTION_LEVEL_PPL_APP: u32 = 8;
    pub const PROTECTION_LEVEL_SAME: u32 = 4294967295;
    pub const PROTECTION_LEVEL_NONE: u32 = 4294967294;
    pub const PROCESS_NAME_NATIVE: u32 = 1;
    pub const PROC_THREAD_ATTRIBUTE_NUMBER: u32 = 65535;
    pub const PROC_THREAD_ATTRIBUTE_THREAD: u32 = 65536;
    pub const PROC_THREAD_ATTRIBUTE_INPUT: u32 = 131072;
    pub const PROC_THREAD_ATTRIBUTE_ADDITIVE: u32 = 262144;
    pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE: u32 = 1;
    pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE: u32 = 2;
    pub const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE: u32 = 4;
    pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK: u32 = 768;
    pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER: u32 = 0;
    pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON: u32 = 256;
    pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF: u32 = 512;
    pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS: u32 =
        768;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK: u32 = 12288;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER: u32 = 0;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON: u32 = 4096;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF: u32 = 8192;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED: u32 = 12288;
    pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK: u32 = 196608;
    pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER: u32 = 0;
    pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON: u32 = 65536;
    pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF: u32 = 131072;
    pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED: u32 = 196608;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK: u32 = 3145728;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER: u32 = 0;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON: u32 = 1048576;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF: u32 = 2097152;
    pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED: u32 = 3145728;
    pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK: u32 = 50331648;
    pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER: u32 = 0;
    pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON: u32 = 16777216;
    pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF: u32 = 33554432;
    pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED: u32 = 50331648;
    pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK: u32 = 805306368;
    pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER: u32 = 0;
    pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON: u32 =
        268435456;
    pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF: u32 =
        536870912;
    pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED: u32 =
        805306368;
    pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED: u32 = 1;
    pub const PROCESS_CREATION_CHILD_PROCESS_OVERRIDE: u32 = 2;
    pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE: u32 = 4;
    pub const PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT: u32 = 1;
    pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE: u32 = 1;
    pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE: u32 = 2;
    pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE: u32 = 4;
    pub const ATOM_FLAG_GLOBAL: u32 = 2;
    pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A: &[u8; 25usize] = b"GetSystemWow64DirectoryA\0";
    pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W: &[u8; 25usize] = b"GetSystemWow64DirectoryA\0";
    pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A: &[u8; 25usize] = b"GetSystemWow64DirectoryW\0";
    pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W: &[u8; 25usize] = b"GetSystemWow64DirectoryW\0";
    pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A: &[u8; 25usize] = b"GetSystemWow64DirectoryA\0";
    pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W: &[u8; 25usize] = b"GetSystemWow64DirectoryA\0";
    pub const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE: u32 = 1;
    pub const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE: u32 = 65536;
    pub const BASE_SEARCH_PATH_PERMANENT: u32 = 32768;
    pub const BASE_SEARCH_PATH_INVALID_FLAGS: i32 = -98306;
    pub const DDD_RAW_TARGET_PATH: u32 = 1;
    pub const DDD_REMOVE_DEFINITION: u32 = 2;
    pub const DDD_EXACT_MATCH_ON_REMOVE: u32 = 4;
    pub const DDD_NO_BROADCAST_SYSTEM: u32 = 8;
    pub const DDD_LUID_BROADCAST_DRIVE: u32 = 16;
    pub const COPYFILE2_MESSAGE_COPY_OFFLOAD: u32 = 1;
    pub const MOVEFILE_REPLACE_EXISTING: u32 = 1;
    pub const MOVEFILE_COPY_ALLOWED: u32 = 2;
    pub const MOVEFILE_DELAY_UNTIL_REBOOT: u32 = 4;
    pub const MOVEFILE_WRITE_THROUGH: u32 = 8;
    pub const MOVEFILE_CREATE_HARDLINK: u32 = 16;
    pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE: u32 = 32;
    pub const EVENTLOG_FULL_INFO: u32 = 0;
    pub const OPERATION_API_VERSION: u32 = 1;
    pub const OPERATION_START_TRACE_CURRENT_THREAD: u32 = 1;
    pub const OPERATION_END_DISCARD: u32 = 1;
    pub const MAX_COMPUTERNAME_LENGTH: u32 = 15;
    pub const LOGON32_LOGON_INTERACTIVE: u32 = 2;
    pub const LOGON32_LOGON_NETWORK: u32 = 3;
    pub const LOGON32_LOGON_BATCH: u32 = 4;
    pub const LOGON32_LOGON_SERVICE: u32 = 5;
    pub const LOGON32_LOGON_UNLOCK: u32 = 7;
    pub const LOGON32_LOGON_NETWORK_CLEARTEXT: u32 = 8;
    pub const LOGON32_LOGON_NEW_CREDENTIALS: u32 = 9;
    pub const LOGON32_PROVIDER_DEFAULT: u32 = 0;
    pub const LOGON32_PROVIDER_WINNT35: u32 = 1;
    pub const LOGON32_PROVIDER_WINNT40: u32 = 2;
    pub const LOGON32_PROVIDER_WINNT50: u32 = 3;
    pub const LOGON32_PROVIDER_VIRTUAL: u32 = 4;
    pub const LOGON_WITH_PROFILE: u32 = 1;
    pub const LOGON_NETCREDENTIALS_ONLY: u32 = 2;
    pub const LOGON_ZERO_PASSWORD_BUFFER: u32 = 2147483648;
    pub const HW_PROFILE_GUIDLEN: u32 = 39;
    pub const MAX_PROFILE_LEN: u32 = 80;
    pub const DOCKINFO_UNDOCKED: u32 = 1;
    pub const DOCKINFO_DOCKED: u32 = 2;
    pub const DOCKINFO_USER_SUPPLIED: u32 = 4;
    pub const DOCKINFO_USER_UNDOCKED: u32 = 5;
    pub const DOCKINFO_USER_DOCKED: u32 = 6;
    pub const FACILITY_NULL: u32 = 0;
    pub const FACILITY_RPC: u32 = 1;
    pub const FACILITY_DISPATCH: u32 = 2;
    pub const FACILITY_STORAGE: u32 = 3;
    pub const FACILITY_ITF: u32 = 4;
    pub const FACILITY_WIN32: u32 = 7;
    pub const FACILITY_WINDOWS: u32 = 8;
    pub const FACILITY_SSPI: u32 = 9;
    pub const FACILITY_SECURITY: u32 = 9;
    pub const FACILITY_CONTROL: u32 = 10;
    pub const FACILITY_CERT: u32 = 11;
    pub const FACILITY_INTERNET: u32 = 12;
    pub const FACILITY_MEDIASERVER: u32 = 13;
    pub const FACILITY_MSMQ: u32 = 14;
    pub const FACILITY_SETUPAPI: u32 = 15;
    pub const FACILITY_SCARD: u32 = 16;
    pub const FACILITY_COMPLUS: u32 = 17;
    pub const FACILITY_AAF: u32 = 18;
    pub const FACILITY_URT: u32 = 19;
    pub const FACILITY_ACS: u32 = 20;
    pub const FACILITY_DPLAY: u32 = 21;
    pub const FACILITY_UMI: u32 = 22;
    pub const FACILITY_SXS: u32 = 23;
    pub const FACILITY_WINDOWS_CE: u32 = 24;
    pub const FACILITY_HTTP: u32 = 25;
    pub const FACILITY_USERMODE_COMMONLOG: u32 = 26;
    pub const FACILITY_WER: u32 = 27;
    pub const FACILITY_USERMODE_FILTER_MANAGER: u32 = 31;
    pub const FACILITY_BACKGROUNDCOPY: u32 = 32;
    pub const FACILITY_CONFIGURATION: u32 = 33;
    pub const FACILITY_WIA: u32 = 33;
    pub const FACILITY_STATE_MANAGEMENT: u32 = 34;
    pub const FACILITY_METADIRECTORY: u32 = 35;
    pub const FACILITY_WINDOWSUPDATE: u32 = 36;
    pub const FACILITY_DIRECTORYSERVICE: u32 = 37;
    pub const FACILITY_GRAPHICS: u32 = 38;
    pub const FACILITY_SHELL: u32 = 39;
    pub const FACILITY_NAP: u32 = 39;
    pub const FACILITY_TPM_SERVICES: u32 = 40;
    pub const FACILITY_TPM_SOFTWARE: u32 = 41;
    pub const FACILITY_UI: u32 = 42;
    pub const FACILITY_XAML: u32 = 43;
    pub const FACILITY_ACTION_QUEUE: u32 = 44;
    pub const FACILITY_PLA: u32 = 48;
    pub const FACILITY_WINDOWS_SETUP: u32 = 48;
    pub const FACILITY_FVE: u32 = 49;
    pub const FACILITY_FWP: u32 = 50;
    pub const FACILITY_WINRM: u32 = 51;
    pub const FACILITY_NDIS: u32 = 52;
    pub const FACILITY_USERMODE_HYPERVISOR: u32 = 53;
    pub const FACILITY_CMI: u32 = 54;
    pub const FACILITY_USERMODE_VIRTUALIZATION: u32 = 55;
    pub const FACILITY_USERMODE_VOLMGR: u32 = 56;
    pub const FACILITY_BCD: u32 = 57;
    pub const FACILITY_USERMODE_VHD: u32 = 58;
    pub const FACILITY_USERMODE_HNS: u32 = 59;
    pub const FACILITY_SDIAG: u32 = 60;
    pub const FACILITY_WEBSERVICES: u32 = 61;
    pub const FACILITY_WINPE: u32 = 61;
    pub const FACILITY_WPN: u32 = 62;
    pub const FACILITY_WINDOWS_STORE: u32 = 63;
    pub const FACILITY_INPUT: u32 = 64;
    pub const FACILITY_QUIC: u32 = 65;
    pub const FACILITY_EAP: u32 = 66;
    pub const FACILITY_WINDOWS_DEFENDER: u32 = 80;
    pub const FACILITY_OPC: u32 = 81;
    pub const FACILITY_XPS: u32 = 82;
    pub const FACILITY_MBN: u32 = 84;
    pub const FACILITY_POWERSHELL: u32 = 84;
    pub const FACILITY_RAS: u32 = 83;
    pub const FACILITY_P2P_INT: u32 = 98;
    pub const FACILITY_P2P: u32 = 99;
    pub const FACILITY_DAF: u32 = 100;
    pub const FACILITY_BLUETOOTH_ATT: u32 = 101;
    pub const FACILITY_AUDIO: u32 = 102;
    pub const FACILITY_STATEREPOSITORY: u32 = 103;
    pub const FACILITY_VISUALCPP: u32 = 109;
    pub const FACILITY_SCRIPT: u32 = 112;
    pub const FACILITY_PARSE: u32 = 113;
    pub const FACILITY_BLB: u32 = 120;
    pub const FACILITY_BLB_CLI: u32 = 121;
    pub const FACILITY_WSBAPP: u32 = 122;
    pub const FACILITY_BLBUI: u32 = 128;
    pub const FACILITY_USN: u32 = 129;
    pub const FACILITY_USERMODE_VOLSNAP: u32 = 130;
    pub const FACILITY_TIERING: u32 = 131;
    pub const FACILITY_WSB_ONLINE: u32 = 133;
    pub const FACILITY_ONLINE_ID: u32 = 134;
    pub const FACILITY_DEVICE_UPDATE_AGENT: u32 = 135;
    pub const FACILITY_DRVSERVICING: u32 = 136;
    pub const FACILITY_DLS: u32 = 153;
    pub const FACILITY_DELIVERY_OPTIMIZATION: u32 = 208;
    pub const FACILITY_USERMODE_SPACES: u32 = 231;
    pub const FACILITY_USER_MODE_SECURITY_CORE: u32 = 232;
    pub const FACILITY_USERMODE_LICENSING: u32 = 234;
    pub const FACILITY_SOS: u32 = 160;
    pub const FACILITY_DEBUGGERS: u32 = 176;
    pub const FACILITY_SPP: u32 = 256;
    pub const FACILITY_RESTORE: u32 = 256;
    pub const FACILITY_DMSERVER: u32 = 256;
    pub const FACILITY_DEPLOYMENT_SERVICES_SERVER: u32 = 257;
    pub const FACILITY_DEPLOYMENT_SERVICES_IMAGING: u32 = 258;
    pub const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT: u32 = 259;
    pub const FACILITY_DEPLOYMENT_SERVICES_UTIL: u32 = 260;
    pub const FACILITY_DEPLOYMENT_SERVICES_BINLSVC: u32 = 261;
    pub const FACILITY_DEPLOYMENT_SERVICES_PXE: u32 = 263;
    pub const FACILITY_DEPLOYMENT_SERVICES_TFTP: u32 = 264;
    pub const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT: u32 = 272;
    pub const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING: u32 = 278;
    pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER: u32 = 289;
    pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT: u32 = 290;
    pub const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER: u32 = 293;
    pub const FACILITY_LINGUISTIC_SERVICES: u32 = 305;
    pub const FACILITY_AUDIOSTREAMING: u32 = 1094;
    pub const FACILITY_TTD: u32 = 1490;
    pub const FACILITY_ACCELERATOR: u32 = 1536;
    pub const FACILITY_WMAAECMA: u32 = 1996;
    pub const FACILITY_DIRECTMUSIC: u32 = 2168;
    pub const FACILITY_DIRECT3D10: u32 = 2169;
    pub const FACILITY_DXGI: u32 = 2170;
    pub const FACILITY_DXGI_DDI: u32 = 2171;
    pub const FACILITY_DIRECT3D11: u32 = 2172;
    pub const FACILITY_DIRECT3D11_DEBUG: u32 = 2173;
    pub const FACILITY_DIRECT3D12: u32 = 2174;
    pub const FACILITY_DIRECT3D12_DEBUG: u32 = 2175;
    pub const FACILITY_DXCORE: u32 = 2176;
    pub const FACILITY_LEAP: u32 = 2184;
    pub const FACILITY_AUDCLNT: u32 = 2185;
    pub const FACILITY_WINCODEC_DWRITE_DWM: u32 = 2200;
    pub const FACILITY_WINML: u32 = 2192;
    pub const FACILITY_DIRECT2D: u32 = 2201;
    pub const FACILITY_DEFRAG: u32 = 2304;
    pub const FACILITY_USERMODE_SDBUS: u32 = 2305;
    pub const FACILITY_JSCRIPT: u32 = 2306;
    pub const FACILITY_PIDGENX: u32 = 2561;
    pub const FACILITY_EAS: u32 = 85;
    pub const FACILITY_WEB: u32 = 885;
    pub const FACILITY_WEB_SOCKET: u32 = 886;
    pub const FACILITY_MOBILE: u32 = 1793;
    pub const FACILITY_SQLITE: u32 = 1967;
    pub const FACILITY_UTC: u32 = 1989;
    pub const FACILITY_WEP: u32 = 2049;
    pub const FACILITY_SYNCENGINE: u32 = 2050;
    pub const FACILITY_XBOX: u32 = 2339;
    pub const FACILITY_GAME: u32 = 2340;
    pub const FACILITY_PIX: u32 = 2748;
    pub const ERROR_SUCCESS: u32 = 0;
    pub const NO_ERROR: u32 = 0;
    pub const ERROR_INVALID_FUNCTION: u32 = 1;
    pub const ERROR_FILE_NOT_FOUND: u32 = 2;
    pub const ERROR_PATH_NOT_FOUND: u32 = 3;
    pub const ERROR_TOO_MANY_OPEN_FILES: u32 = 4;
    pub const ERROR_ACCESS_DENIED: u32 = 5;
    pub const ERROR_INVALID_HANDLE: u32 = 6;
    pub const ERROR_ARENA_TRASHED: u32 = 7;
    pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 8;
    pub const ERROR_INVALID_BLOCK: u32 = 9;
    pub const ERROR_BAD_ENVIRONMENT: u32 = 10;
    pub const ERROR_BAD_FORMAT: u32 = 11;
    pub const ERROR_INVALID_ACCESS: u32 = 12;
    pub const ERROR_INVALID_DATA: u32 = 13;
    pub const ERROR_OUTOFMEMORY: u32 = 14;
    pub const ERROR_INVALID_DRIVE: u32 = 15;
    pub const ERROR_CURRENT_DIRECTORY: u32 = 16;
    pub const ERROR_NOT_SAME_DEVICE: u32 = 17;
    pub const ERROR_NO_MORE_FILES: u32 = 18;
    pub const ERROR_WRITE_PROTECT: u32 = 19;
    pub const ERROR_BAD_UNIT: u32 = 20;
    pub const ERROR_NOT_READY: u32 = 21;
    pub const ERROR_BAD_COMMAND: u32 = 22;
    pub const ERROR_CRC: u32 = 23;
    pub const ERROR_BAD_LENGTH: u32 = 24;
    pub const ERROR_SEEK: u32 = 25;
    pub const ERROR_NOT_DOS_DISK: u32 = 26;
    pub const ERROR_SECTOR_NOT_FOUND: u32 = 27;
    pub const ERROR_OUT_OF_PAPER: u32 = 28;
    pub const ERROR_WRITE_FAULT: u32 = 29;
    pub const ERROR_READ_FAULT: u32 = 30;
    pub const ERROR_GEN_FAILURE: u32 = 31;
    pub const ERROR_SHARING_VIOLATION: u32 = 32;
    pub const ERROR_LOCK_VIOLATION: u32 = 33;
    pub const ERROR_WRONG_DISK: u32 = 34;
    pub const ERROR_SHARING_BUFFER_EXCEEDED: u32 = 36;
    pub const ERROR_HANDLE_EOF: u32 = 38;
    pub const ERROR_HANDLE_DISK_FULL: u32 = 39;
    pub const ERROR_NOT_SUPPORTED: u32 = 50;
    pub const ERROR_REM_NOT_LIST: u32 = 51;
    pub const ERROR_DUP_NAME: u32 = 52;
    pub const ERROR_BAD_NETPATH: u32 = 53;
    pub const ERROR_NETWORK_BUSY: u32 = 54;
    pub const ERROR_DEV_NOT_EXIST: u32 = 55;
    pub const ERROR_TOO_MANY_CMDS: u32 = 56;
    pub const ERROR_ADAP_HDW_ERR: u32 = 57;
    pub const ERROR_BAD_NET_RESP: u32 = 58;
    pub const ERROR_UNEXP_NET_ERR: u32 = 59;
    pub const ERROR_BAD_REM_ADAP: u32 = 60;
    pub const ERROR_PRINTQ_FULL: u32 = 61;
    pub const ERROR_NO_SPOOL_SPACE: u32 = 62;
    pub const ERROR_PRINT_CANCELLED: u32 = 63;
    pub const ERROR_NETNAME_DELETED: u32 = 64;
    pub const ERROR_NETWORK_ACCESS_DENIED: u32 = 65;
    pub const ERROR_BAD_DEV_TYPE: u32 = 66;
    pub const ERROR_BAD_NET_NAME: u32 = 67;
    pub const ERROR_TOO_MANY_NAMES: u32 = 68;
    pub const ERROR_TOO_MANY_SESS: u32 = 69;
    pub const ERROR_SHARING_PAUSED: u32 = 70;
    pub const ERROR_REQ_NOT_ACCEP: u32 = 71;
    pub const ERROR_REDIR_PAUSED: u32 = 72;
    pub const ERROR_FILE_EXISTS: u32 = 80;
    pub const ERROR_CANNOT_MAKE: u32 = 82;
    pub const ERROR_FAIL_I24: u32 = 83;
    pub const ERROR_OUT_OF_STRUCTURES: u32 = 84;
    pub const ERROR_ALREADY_ASSIGNED: u32 = 85;
    pub const ERROR_INVALID_PASSWORD: u32 = 86;
    pub const ERROR_INVALID_PARAMETER: u32 = 87;
    pub const ERROR_NET_WRITE_FAULT: u32 = 88;
    pub const ERROR_NO_PROC_SLOTS: u32 = 89;
    pub const ERROR_TOO_MANY_SEMAPHORES: u32 = 100;
    pub const ERROR_EXCL_SEM_ALREADY_OWNED: u32 = 101;
    pub const ERROR_SEM_IS_SET: u32 = 102;
    pub const ERROR_TOO_MANY_SEM_REQUESTS: u32 = 103;
    pub const ERROR_INVALID_AT_INTERRUPT_TIME: u32 = 104;
    pub const ERROR_SEM_OWNER_DIED: u32 = 105;
    pub const ERROR_SEM_USER_LIMIT: u32 = 106;
    pub const ERROR_DISK_CHANGE: u32 = 107;
    pub const ERROR_DRIVE_LOCKED: u32 = 108;
    pub const ERROR_BROKEN_PIPE: u32 = 109;
    pub const ERROR_OPEN_FAILED: u32 = 110;
    pub const ERROR_BUFFER_OVERFLOW: u32 = 111;
    pub const ERROR_DISK_FULL: u32 = 112;
    pub const ERROR_NO_MORE_SEARCH_HANDLES: u32 = 113;
    pub const ERROR_INVALID_TARGET_HANDLE: u32 = 114;
    pub const ERROR_INVALID_CATEGORY: u32 = 117;
    pub const ERROR_INVALID_VERIFY_SWITCH: u32 = 118;
    pub const ERROR_BAD_DRIVER_LEVEL: u32 = 119;
    pub const ERROR_CALL_NOT_IMPLEMENTED: u32 = 120;
    pub const ERROR_SEM_TIMEOUT: u32 = 121;
    pub const ERROR_INSUFFICIENT_BUFFER: u32 = 122;
    pub const ERROR_INVALID_NAME: u32 = 123;
    pub const ERROR_INVALID_LEVEL: u32 = 124;
    pub const ERROR_NO_VOLUME_LABEL: u32 = 125;
    pub const ERROR_MOD_NOT_FOUND: u32 = 126;
    pub const ERROR_PROC_NOT_FOUND: u32 = 127;
    pub const ERROR_WAIT_NO_CHILDREN: u32 = 128;
    pub const ERROR_CHILD_NOT_COMPLETE: u32 = 129;
    pub const ERROR_DIRECT_ACCESS_HANDLE: u32 = 130;
    pub const ERROR_NEGATIVE_SEEK: u32 = 131;
    pub const ERROR_SEEK_ON_DEVICE: u32 = 132;
    pub const ERROR_IS_JOIN_TARGET: u32 = 133;
    pub const ERROR_IS_JOINED: u32 = 134;
    pub const ERROR_IS_SUBSTED: u32 = 135;
    pub const ERROR_NOT_JOINED: u32 = 136;
    pub const ERROR_NOT_SUBSTED: u32 = 137;
    pub const ERROR_JOIN_TO_JOIN: u32 = 138;
    pub const ERROR_SUBST_TO_SUBST: u32 = 139;
    pub const ERROR_JOIN_TO_SUBST: u32 = 140;
    pub const ERROR_SUBST_TO_JOIN: u32 = 141;
    pub const ERROR_BUSY_DRIVE: u32 = 142;
    pub const ERROR_SAME_DRIVE: u32 = 143;
    pub const ERROR_DIR_NOT_ROOT: u32 = 144;
    pub const ERROR_DIR_NOT_EMPTY: u32 = 145;
    pub const ERROR_IS_SUBST_PATH: u32 = 146;
    pub const ERROR_IS_JOIN_PATH: u32 = 147;
    pub const ERROR_PATH_BUSY: u32 = 148;
    pub const ERROR_IS_SUBST_TARGET: u32 = 149;
    pub const ERROR_SYSTEM_TRACE: u32 = 150;
    pub const ERROR_INVALID_EVENT_COUNT: u32 = 151;
    pub const ERROR_TOO_MANY_MUXWAITERS: u32 = 152;
    pub const ERROR_INVALID_LIST_FORMAT: u32 = 153;
    pub const ERROR_LABEL_TOO_LONG: u32 = 154;
    pub const ERROR_TOO_MANY_TCBS: u32 = 155;
    pub const ERROR_SIGNAL_REFUSED: u32 = 156;
    pub const ERROR_DISCARDED: u32 = 157;
    pub const ERROR_NOT_LOCKED: u32 = 158;
    pub const ERROR_BAD_THREADID_ADDR: u32 = 159;
    pub const ERROR_BAD_ARGUMENTS: u32 = 160;
    pub const ERROR_BAD_PATHNAME: u32 = 161;
    pub const ERROR_SIGNAL_PENDING: u32 = 162;
    pub const ERROR_MAX_THRDS_REACHED: u32 = 164;
    pub const ERROR_LOCK_FAILED: u32 = 167;
    pub const ERROR_BUSY: u32 = 170;
    pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS: u32 = 171;
    pub const ERROR_CANCEL_VIOLATION: u32 = 173;
    pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED: u32 = 174;
    pub const ERROR_INVALID_SEGMENT_NUMBER: u32 = 180;
    pub const ERROR_INVALID_ORDINAL: u32 = 182;
    pub const ERROR_ALREADY_EXISTS: u32 = 183;
    pub const ERROR_INVALID_FLAG_NUMBER: u32 = 186;
    pub const ERROR_SEM_NOT_FOUND: u32 = 187;
    pub const ERROR_INVALID_STARTING_CODESEG: u32 = 188;
    pub const ERROR_INVALID_STACKSEG: u32 = 189;
    pub const ERROR_INVALID_MODULETYPE: u32 = 190;
    pub const ERROR_INVALID_EXE_SIGNATURE: u32 = 191;
    pub const ERROR_EXE_MARKED_INVALID: u32 = 192;
    pub const ERROR_BAD_EXE_FORMAT: u32 = 193;
    pub const ERROR_ITERATED_DATA_EXCEEDS_64k: u32 = 194;
    pub const ERROR_INVALID_MINALLOCSIZE: u32 = 195;
    pub const ERROR_DYNLINK_FROM_INVALID_RING: u32 = 196;
    pub const ERROR_IOPL_NOT_ENABLED: u32 = 197;
    pub const ERROR_INVALID_SEGDPL: u32 = 198;
    pub const ERROR_AUTODATASEG_EXCEEDS_64k: u32 = 199;
    pub const ERROR_RING2SEG_MUST_BE_MOVABLE: u32 = 200;
    pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM: u32 = 201;
    pub const ERROR_INFLOOP_IN_RELOC_CHAIN: u32 = 202;
    pub const ERROR_ENVVAR_NOT_FOUND: u32 = 203;
    pub const ERROR_NO_SIGNAL_SENT: u32 = 205;
    pub const ERROR_FILENAME_EXCED_RANGE: u32 = 206;
    pub const ERROR_RING2_STACK_IN_USE: u32 = 207;
    pub const ERROR_META_EXPANSION_TOO_LONG: u32 = 208;
    pub const ERROR_INVALID_SIGNAL_NUMBER: u32 = 209;
    pub const ERROR_THREAD_1_INACTIVE: u32 = 210;
    pub const ERROR_LOCKED: u32 = 212;
    pub const ERROR_TOO_MANY_MODULES: u32 = 214;
    pub const ERROR_NESTING_NOT_ALLOWED: u32 = 215;
    pub const ERROR_EXE_MACHINE_TYPE_MISMATCH: u32 = 216;
    pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY: u32 = 217;
    pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY: u32 = 218;
    pub const ERROR_FILE_CHECKED_OUT: u32 = 220;
    pub const ERROR_CHECKOUT_REQUIRED: u32 = 221;
    pub const ERROR_BAD_FILE_TYPE: u32 = 222;
    pub const ERROR_FILE_TOO_LARGE: u32 = 223;
    pub const ERROR_FORMS_AUTH_REQUIRED: u32 = 224;
    pub const ERROR_VIRUS_INFECTED: u32 = 225;
    pub const ERROR_VIRUS_DELETED: u32 = 226;
    pub const ERROR_PIPE_LOCAL: u32 = 229;
    pub const ERROR_BAD_PIPE: u32 = 230;
    pub const ERROR_PIPE_BUSY: u32 = 231;
    pub const ERROR_NO_DATA: u32 = 232;
    pub const ERROR_PIPE_NOT_CONNECTED: u32 = 233;
    pub const ERROR_MORE_DATA: u32 = 234;
    pub const ERROR_NO_WORK_DONE: u32 = 235;
    pub const ERROR_VC_DISCONNECTED: u32 = 240;
    pub const ERROR_INVALID_EA_NAME: u32 = 254;
    pub const ERROR_EA_LIST_INCONSISTENT: u32 = 255;
    pub const WAIT_TIMEOUT: u32 = 258;
    pub const ERROR_NO_MORE_ITEMS: u32 = 259;
    pub const ERROR_CANNOT_COPY: u32 = 266;
    pub const ERROR_DIRECTORY: u32 = 267;
    pub const ERROR_EAS_DIDNT_FIT: u32 = 275;
    pub const ERROR_EA_FILE_CORRUPT: u32 = 276;
    pub const ERROR_EA_TABLE_FULL: u32 = 277;
    pub const ERROR_INVALID_EA_HANDLE: u32 = 278;
    pub const ERROR_EAS_NOT_SUPPORTED: u32 = 282;
    pub const ERROR_NOT_OWNER: u32 = 288;
    pub const ERROR_TOO_MANY_POSTS: u32 = 298;
    pub const ERROR_PARTIAL_COPY: u32 = 299;
    pub const ERROR_OPLOCK_NOT_GRANTED: u32 = 300;
    pub const ERROR_INVALID_OPLOCK_PROTOCOL: u32 = 301;
    pub const ERROR_DISK_TOO_FRAGMENTED: u32 = 302;
    pub const ERROR_DELETE_PENDING: u32 = 303;
    pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING: u32 = 304;
    pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME: u32 = 305;
    pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT: u32 = 306;
    pub const ERROR_INVALID_LOCK_RANGE: u32 = 307;
    pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT: u32 = 308;
    pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED: u32 = 309;
    pub const ERROR_INVALID_EXCEPTION_HANDLER: u32 = 310;
    pub const ERROR_DUPLICATE_PRIVILEGES: u32 = 311;
    pub const ERROR_NO_RANGES_PROCESSED: u32 = 312;
    pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE: u32 = 313;
    pub const ERROR_DISK_RESOURCES_EXHAUSTED: u32 = 314;
    pub const ERROR_INVALID_TOKEN: u32 = 315;
    pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED: u32 = 316;
    pub const ERROR_MR_MID_NOT_FOUND: u32 = 317;
    pub const ERROR_SCOPE_NOT_FOUND: u32 = 318;
    pub const ERROR_UNDEFINED_SCOPE: u32 = 319;
    pub const ERROR_INVALID_CAP: u32 = 320;
    pub const ERROR_DEVICE_UNREACHABLE: u32 = 321;
    pub const ERROR_DEVICE_NO_RESOURCES: u32 = 322;
    pub const ERROR_DATA_CHECKSUM_ERROR: u32 = 323;
    pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION: u32 = 324;
    pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED: u32 = 326;
    pub const ERROR_OFFSET_ALIGNMENT_VIOLATION: u32 = 327;
    pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST: u32 = 328;
    pub const ERROR_OPERATION_IN_PROGRESS: u32 = 329;
    pub const ERROR_BAD_DEVICE_PATH: u32 = 330;
    pub const ERROR_TOO_MANY_DESCRIPTORS: u32 = 331;
    pub const ERROR_SCRUB_DATA_DISABLED: u32 = 332;
    pub const ERROR_NOT_REDUNDANT_STORAGE: u32 = 333;
    pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED: u32 = 334;
    pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED: u32 = 335;
    pub const ERROR_DIRECTORY_NOT_SUPPORTED: u32 = 336;
    pub const ERROR_NOT_READ_FROM_COPY: u32 = 337;
    pub const ERROR_FT_WRITE_FAILURE: u32 = 338;
    pub const ERROR_FT_DI_SCAN_REQUIRED: u32 = 339;
    pub const ERROR_INVALID_KERNEL_INFO_VERSION: u32 = 340;
    pub const ERROR_INVALID_PEP_INFO_VERSION: u32 = 341;
    pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED: u32 = 342;
    pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN: u32 = 343;
    pub const ERROR_COMPRESSION_NOT_BENEFICIAL: u32 = 344;
    pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH: u32 = 345;
    pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS: u32 = 346;
    pub const ERROR_BLOCK_TOO_MANY_REFERENCES: u32 = 347;
    pub const ERROR_MARKED_TO_DISALLOW_WRITES: u32 = 348;
    pub const ERROR_ENCLAVE_FAILURE: u32 = 349;
    pub const ERROR_FAIL_NOACTION_REBOOT: u32 = 350;
    pub const ERROR_FAIL_SHUTDOWN: u32 = 351;
    pub const ERROR_FAIL_RESTART: u32 = 352;
    pub const ERROR_MAX_SESSIONS_REACHED: u32 = 353;
    pub const ERROR_NETWORK_ACCESS_DENIED_EDP: u32 = 354;
    pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL: u32 = 355;
    pub const ERROR_EDP_POLICY_DENIES_OPERATION: u32 = 356;
    pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED: u32 = 357;
    pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT: u32 = 358;
    pub const ERROR_DEVICE_IN_MAINTENANCE: u32 = 359;
    pub const ERROR_NOT_SUPPORTED_ON_DAX: u32 = 360;
    pub const ERROR_DAX_MAPPING_EXISTS: u32 = 361;
    pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING: u32 = 362;
    pub const ERROR_CLOUD_FILE_METADATA_CORRUPT: u32 = 363;
    pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE: u32 = 364;
    pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE: u32 = 365;
    pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH: u32 = 366;
    pub const ERROR_CHILD_PROCESS_BLOCKED: u32 = 367;
    pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE: u32 = 368;
    pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE: u32 = 369;
    pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT: u32 = 370;
    pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY: u32 = 371;
    pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN: u32 = 372;
    pub const ERROR_GDI_HANDLE_LEAK: u32 = 373;
    pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS: u32 = 374;
    pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED: u32 = 375;
    pub const ERROR_NOT_A_CLOUD_FILE: u32 = 376;
    pub const ERROR_CLOUD_FILE_NOT_IN_SYNC: u32 = 377;
    pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED: u32 = 378;
    pub const ERROR_CLOUD_FILE_NOT_SUPPORTED: u32 = 379;
    pub const ERROR_CLOUD_FILE_INVALID_REQUEST: u32 = 380;
    pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME: u32 = 381;
    pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY: u32 = 382;
    pub const ERROR_CLOUD_FILE_VALIDATION_FAILED: u32 = 383;
    pub const ERROR_SMB1_NOT_AVAILABLE: u32 = 384;
    pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION: u32 = 385;
    pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED: u32 = 386;
    pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES: u32 = 387;
    pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE: u32 = 388;
    pub const ERROR_CLOUD_FILE_UNSUCCESSFUL: u32 = 389;
    pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT: u32 = 390;
    pub const ERROR_CLOUD_FILE_IN_USE: u32 = 391;
    pub const ERROR_CLOUD_FILE_PINNED: u32 = 392;
    pub const ERROR_CLOUD_FILE_REQUEST_ABORTED: u32 = 393;
    pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT: u32 = 394;
    pub const ERROR_CLOUD_FILE_ACCESS_DENIED: u32 = 395;
    pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS: u32 = 396;
    pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT: u32 = 397;
    pub const ERROR_CLOUD_FILE_REQUEST_CANCELED: u32 = 398;
    pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED: u32 = 399;
    pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND: u32 = 400;
    pub const ERROR_THREAD_MODE_NOT_BACKGROUND: u32 = 401;
    pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND: u32 = 402;
    pub const ERROR_PROCESS_MODE_NOT_BACKGROUND: u32 = 403;
    pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED: u32 = 404;
    pub const ERROR_NOT_A_CLOUD_SYNC_ROOT: u32 = 405;
    pub const ERROR_FILE_PROTECTED_UNDER_DPL: u32 = 406;
    pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED: u32 = 407;
    pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND: u32 = 408;
    pub const ERROR_APPX_FILE_NOT_ENCRYPTED: u32 = 409;
    pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED: u32 = 410;
    pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET: u32 = 411;
    pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE: u32 = 412;
    pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER: u32 = 413;
    pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT: u32 = 414;
    pub const ERROR_FT_READ_FAILURE: u32 = 415;
    pub const ERROR_STORAGE_RESERVE_ID_INVALID: u32 = 416;
    pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST: u32 = 417;
    pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS: u32 = 418;
    pub const ERROR_STORAGE_RESERVE_NOT_EMPTY: u32 = 419;
    pub const ERROR_NOT_A_DAX_VOLUME: u32 = 420;
    pub const ERROR_NOT_DAX_MAPPABLE: u32 = 421;
    pub const ERROR_TIME_SENSITIVE_THREAD: u32 = 422;
    pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER: u32 = 423;
    pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR: u32 = 424;
    pub const ERROR_FILE_NOT_SUPPORTED: u32 = 425;
    pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT: u32 = 426;
    pub const ERROR_NO_TASK_QUEUE: u32 = 427;
    pub const ERROR_SRC_SRV_DLL_LOAD_FAILED: u32 = 428;
    pub const ERROR_NOT_SUPPORTED_WITH_BTT: u32 = 429;
    pub const ERROR_ENCRYPTION_DISABLED: u32 = 430;
    pub const ERROR_ENCRYPTING_METADATA_DISALLOWED: u32 = 431;
    pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG: u32 = 432;
    pub const ERROR_NO_SUCH_DEVICE: u32 = 433;
    pub const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED: u32 = 434;
    pub const ERROR_FILE_SNAP_IN_PROGRESS: u32 = 435;
    pub const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED: u32 = 436;
    pub const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED: u32 = 437;
    pub const ERROR_FILE_SNAP_IO_NOT_COORDINATED: u32 = 438;
    pub const ERROR_FILE_SNAP_UNEXPECTED_ERROR: u32 = 439;
    pub const ERROR_FILE_SNAP_INVALID_PARAMETER: u32 = 440;
    pub const ERROR_UNSATISFIED_DEPENDENCIES: u32 = 441;
    pub const ERROR_CASE_SENSITIVE_PATH: u32 = 442;
    pub const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR: u32 = 443;
    pub const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED: u32 = 444;
    pub const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION: u32 = 445;
    pub const ERROR_DLP_POLICY_DENIES_OPERATION: u32 = 446;
    pub const ERROR_DLP_POLICY_SILENTLY_FAIL: u32 = 449;
    pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED: u32 = 450;
    pub const ERROR_CAPAUTHZ_CHANGE_TYPE: u32 = 451;
    pub const ERROR_CAPAUTHZ_NOT_PROVISIONED: u32 = 452;
    pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED: u32 = 453;
    pub const ERROR_CAPAUTHZ_NO_POLICY: u32 = 454;
    pub const ERROR_CAPAUTHZ_DB_CORRUPTED: u32 = 455;
    pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG: u32 = 456;
    pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY: u32 = 457;
    pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR: u32 = 458;
    pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED: u32 = 459;
    pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH: u32 = 460;
    pub const ERROR_CIMFS_IMAGE_CORRUPT: u32 = 470;
    pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT: u32 = 480;
    pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT: u32 = 481;
    pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT: u32 = 482;
    pub const ERROR_DEVICE_HARDWARE_ERROR: u32 = 483;
    pub const ERROR_INVALID_ADDRESS: u32 = 487;
    pub const ERROR_HAS_SYSTEM_CRITICAL_FILES: u32 = 488;
    pub const ERROR_VRF_CFG_AND_IO_ENABLED: u32 = 1183;
    pub const ERROR_PARTITION_TERMINATING: u32 = 1184;
    pub const ERROR_USER_PROFILE_LOAD: u32 = 500;
    pub const ERROR_ARITHMETIC_OVERFLOW: u32 = 534;
    pub const ERROR_PIPE_CONNECTED: u32 = 535;
    pub const ERROR_PIPE_LISTENING: u32 = 536;
    pub const ERROR_VERIFIER_STOP: u32 = 537;
    pub const ERROR_ABIOS_ERROR: u32 = 538;
    pub const ERROR_WX86_WARNING: u32 = 539;
    pub const ERROR_WX86_ERROR: u32 = 540;
    pub const ERROR_TIMER_NOT_CANCELED: u32 = 541;
    pub const ERROR_UNWIND: u32 = 542;
    pub const ERROR_BAD_STACK: u32 = 543;
    pub const ERROR_INVALID_UNWIND_TARGET: u32 = 544;
    pub const ERROR_INVALID_PORT_ATTRIBUTES: u32 = 545;
    pub const ERROR_PORT_MESSAGE_TOO_LONG: u32 = 546;
    pub const ERROR_INVALID_QUOTA_LOWER: u32 = 547;
    pub const ERROR_DEVICE_ALREADY_ATTACHED: u32 = 548;
    pub const ERROR_INSTRUCTION_MISALIGNMENT: u32 = 549;
    pub const ERROR_PROFILING_NOT_STARTED: u32 = 550;
    pub const ERROR_PROFILING_NOT_STOPPED: u32 = 551;
    pub const ERROR_COULD_NOT_INTERPRET: u32 = 552;
    pub const ERROR_PROFILING_AT_LIMIT: u32 = 553;
    pub const ERROR_CANT_WAIT: u32 = 554;
    pub const ERROR_CANT_TERMINATE_SELF: u32 = 555;
    pub const ERROR_UNEXPECTED_MM_CREATE_ERR: u32 = 556;
    pub const ERROR_UNEXPECTED_MM_MAP_ERROR: u32 = 557;
    pub const ERROR_UNEXPECTED_MM_EXTEND_ERR: u32 = 558;
    pub const ERROR_BAD_FUNCTION_TABLE: u32 = 559;
    pub const ERROR_NO_GUID_TRANSLATION: u32 = 560;
    pub const ERROR_INVALID_LDT_SIZE: u32 = 561;
    pub const ERROR_INVALID_LDT_OFFSET: u32 = 563;
    pub const ERROR_INVALID_LDT_DESCRIPTOR: u32 = 564;
    pub const ERROR_TOO_MANY_THREADS: u32 = 565;
    pub const ERROR_THREAD_NOT_IN_PROCESS: u32 = 566;
    pub const ERROR_PAGEFILE_QUOTA_EXCEEDED: u32 = 567;
    pub const ERROR_LOGON_SERVER_CONFLICT: u32 = 568;
    pub const ERROR_SYNCHRONIZATION_REQUIRED: u32 = 569;
    pub const ERROR_NET_OPEN_FAILED: u32 = 570;
    pub const ERROR_IO_PRIVILEGE_FAILED: u32 = 571;
    pub const ERROR_CONTROL_C_EXIT: u32 = 572;
    pub const ERROR_MISSING_SYSTEMFILE: u32 = 573;
    pub const ERROR_UNHANDLED_EXCEPTION: u32 = 574;
    pub const ERROR_APP_INIT_FAILURE: u32 = 575;
    pub const ERROR_PAGEFILE_CREATE_FAILED: u32 = 576;
    pub const ERROR_INVALID_IMAGE_HASH: u32 = 577;
    pub const ERROR_NO_PAGEFILE: u32 = 578;
    pub const ERROR_ILLEGAL_FLOAT_CONTEXT: u32 = 579;
    pub const ERROR_NO_EVENT_PAIR: u32 = 580;
    pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR: u32 = 581;
    pub const ERROR_ILLEGAL_CHARACTER: u32 = 582;
    pub const ERROR_UNDEFINED_CHARACTER: u32 = 583;
    pub const ERROR_FLOPPY_VOLUME: u32 = 584;
    pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT: u32 = 585;
    pub const ERROR_BACKUP_CONTROLLER: u32 = 586;
    pub const ERROR_MUTANT_LIMIT_EXCEEDED: u32 = 587;
    pub const ERROR_FS_DRIVER_REQUIRED: u32 = 588;
    pub const ERROR_CANNOT_LOAD_REGISTRY_FILE: u32 = 589;
    pub const ERROR_DEBUG_ATTACH_FAILED: u32 = 590;
    pub const ERROR_SYSTEM_PROCESS_TERMINATED: u32 = 591;
    pub const ERROR_DATA_NOT_ACCEPTED: u32 = 592;
    pub const ERROR_VDM_HARD_ERROR: u32 = 593;
    pub const ERROR_DRIVER_CANCEL_TIMEOUT: u32 = 594;
    pub const ERROR_REPLY_MESSAGE_MISMATCH: u32 = 595;
    pub const ERROR_LOST_WRITEBEHIND_DATA: u32 = 596;
    pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID: u32 = 597;
    pub const ERROR_NOT_TINY_STREAM: u32 = 598;
    pub const ERROR_STACK_OVERFLOW_READ: u32 = 599;
    pub const ERROR_CONVERT_TO_LARGE: u32 = 600;
    pub const ERROR_FOUND_OUT_OF_SCOPE: u32 = 601;
    pub const ERROR_ALLOCATE_BUCKET: u32 = 602;
    pub const ERROR_MARSHALL_OVERFLOW: u32 = 603;
    pub const ERROR_INVALID_VARIANT: u32 = 604;
    pub const ERROR_BAD_COMPRESSION_BUFFER: u32 = 605;
    pub const ERROR_AUDIT_FAILED: u32 = 606;
    pub const ERROR_TIMER_RESOLUTION_NOT_SET: u32 = 607;
    pub const ERROR_INSUFFICIENT_LOGON_INFO: u32 = 608;
    pub const ERROR_BAD_DLL_ENTRYPOINT: u32 = 609;
    pub const ERROR_BAD_SERVICE_ENTRYPOINT: u32 = 610;
    pub const ERROR_IP_ADDRESS_CONFLICT1: u32 = 611;
    pub const ERROR_IP_ADDRESS_CONFLICT2: u32 = 612;
    pub const ERROR_REGISTRY_QUOTA_LIMIT: u32 = 613;
    pub const ERROR_NO_CALLBACK_ACTIVE: u32 = 614;
    pub const ERROR_PWD_TOO_SHORT: u32 = 615;
    pub const ERROR_PWD_TOO_RECENT: u32 = 616;
    pub const ERROR_PWD_HISTORY_CONFLICT: u32 = 617;
    pub const ERROR_UNSUPPORTED_COMPRESSION: u32 = 618;
    pub const ERROR_INVALID_HW_PROFILE: u32 = 619;
    pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH: u32 = 620;
    pub const ERROR_QUOTA_LIST_INCONSISTENT: u32 = 621;
    pub const ERROR_EVALUATION_EXPIRATION: u32 = 622;
    pub const ERROR_ILLEGAL_DLL_RELOCATION: u32 = 623;
    pub const ERROR_DLL_INIT_FAILED_LOGOFF: u32 = 624;
    pub const ERROR_VALIDATE_CONTINUE: u32 = 625;
    pub const ERROR_NO_MORE_MATCHES: u32 = 626;
    pub const ERROR_RANGE_LIST_CONFLICT: u32 = 627;
    pub const ERROR_SERVER_SID_MISMATCH: u32 = 628;
    pub const ERROR_CANT_ENABLE_DENY_ONLY: u32 = 629;
    pub const ERROR_FLOAT_MULTIPLE_FAULTS: u32 = 630;
    pub const ERROR_FLOAT_MULTIPLE_TRAPS: u32 = 631;
    pub const ERROR_NOINTERFACE: u32 = 632;
    pub const ERROR_DRIVER_FAILED_SLEEP: u32 = 633;
    pub const ERROR_CORRUPT_SYSTEM_FILE: u32 = 634;
    pub const ERROR_COMMITMENT_MINIMUM: u32 = 635;
    pub const ERROR_PNP_RESTART_ENUMERATION: u32 = 636;
    pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE: u32 = 637;
    pub const ERROR_PNP_REBOOT_REQUIRED: u32 = 638;
    pub const ERROR_INSUFFICIENT_POWER: u32 = 639;
    pub const ERROR_MULTIPLE_FAULT_VIOLATION: u32 = 640;
    pub const ERROR_SYSTEM_SHUTDOWN: u32 = 641;
    pub const ERROR_PORT_NOT_SET: u32 = 642;
    pub const ERROR_DS_VERSION_CHECK_FAILURE: u32 = 643;
    pub const ERROR_RANGE_NOT_FOUND: u32 = 644;
    pub const ERROR_NOT_SAFE_MODE_DRIVER: u32 = 646;
    pub const ERROR_FAILED_DRIVER_ENTRY: u32 = 647;
    pub const ERROR_DEVICE_ENUMERATION_ERROR: u32 = 648;
    pub const ERROR_MOUNT_POINT_NOT_RESOLVED: u32 = 649;
    pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER: u32 = 650;
    pub const ERROR_MCA_OCCURED: u32 = 651;
    pub const ERROR_DRIVER_DATABASE_ERROR: u32 = 652;
    pub const ERROR_SYSTEM_HIVE_TOO_LARGE: u32 = 653;
    pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD: u32 = 654;
    pub const ERROR_VOLSNAP_PREPARE_HIBERNATE: u32 = 655;
    pub const ERROR_HIBERNATION_FAILURE: u32 = 656;
    pub const ERROR_PWD_TOO_LONG: u32 = 657;
    pub const ERROR_FILE_SYSTEM_LIMITATION: u32 = 665;
    pub const ERROR_ASSERTION_FAILURE: u32 = 668;
    pub const ERROR_ACPI_ERROR: u32 = 669;
    pub const ERROR_WOW_ASSERTION: u32 = 670;
    pub const ERROR_PNP_BAD_MPS_TABLE: u32 = 671;
    pub const ERROR_PNP_TRANSLATION_FAILED: u32 = 672;
    pub const ERROR_PNP_IRQ_TRANSLATION_FAILED: u32 = 673;
    pub const ERROR_PNP_INVALID_ID: u32 = 674;
    pub const ERROR_WAKE_SYSTEM_DEBUGGER: u32 = 675;
    pub const ERROR_HANDLES_CLOSED: u32 = 676;
    pub const ERROR_EXTRANEOUS_INFORMATION: u32 = 677;
    pub const ERROR_RXACT_COMMIT_NECESSARY: u32 = 678;
    pub const ERROR_MEDIA_CHECK: u32 = 679;
    pub const ERROR_GUID_SUBSTITUTION_MADE: u32 = 680;
    pub const ERROR_STOPPED_ON_SYMLINK: u32 = 681;
    pub const ERROR_LONGJUMP: u32 = 682;
    pub const ERROR_PLUGPLAY_QUERY_VETOED: u32 = 683;
    pub const ERROR_UNWIND_CONSOLIDATE: u32 = 684;
    pub const ERROR_REGISTRY_HIVE_RECOVERED: u32 = 685;
    pub const ERROR_DLL_MIGHT_BE_INSECURE: u32 = 686;
    pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE: u32 = 687;
    pub const ERROR_DBG_EXCEPTION_NOT_HANDLED: u32 = 688;
    pub const ERROR_DBG_REPLY_LATER: u32 = 689;
    pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE: u32 = 690;
    pub const ERROR_DBG_TERMINATE_THREAD: u32 = 691;
    pub const ERROR_DBG_TERMINATE_PROCESS: u32 = 692;
    pub const ERROR_DBG_CONTROL_C: u32 = 693;
    pub const ERROR_DBG_PRINTEXCEPTION_C: u32 = 694;
    pub const ERROR_DBG_RIPEXCEPTION: u32 = 695;
    pub const ERROR_DBG_CONTROL_BREAK: u32 = 696;
    pub const ERROR_DBG_COMMAND_EXCEPTION: u32 = 697;
    pub const ERROR_OBJECT_NAME_EXISTS: u32 = 698;
    pub const ERROR_THREAD_WAS_SUSPENDED: u32 = 699;
    pub const ERROR_IMAGE_NOT_AT_BASE: u32 = 700;
    pub const ERROR_RXACT_STATE_CREATED: u32 = 701;
    pub const ERROR_SEGMENT_NOTIFICATION: u32 = 702;
    pub const ERROR_BAD_CURRENT_DIRECTORY: u32 = 703;
    pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP: u32 = 704;
    pub const ERROR_FT_WRITE_RECOVERY: u32 = 705;
    pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH: u32 = 706;
    pub const ERROR_RECEIVE_PARTIAL: u32 = 707;
    pub const ERROR_RECEIVE_EXPEDITED: u32 = 708;
    pub const ERROR_RECEIVE_PARTIAL_EXPEDITED: u32 = 709;
    pub const ERROR_EVENT_DONE: u32 = 710;
    pub const ERROR_EVENT_PENDING: u32 = 711;
    pub const ERROR_CHECKING_FILE_SYSTEM: u32 = 712;
    pub const ERROR_FATAL_APP_EXIT: u32 = 713;
    pub const ERROR_PREDEFINED_HANDLE: u32 = 714;
    pub const ERROR_WAS_UNLOCKED: u32 = 715;
    pub const ERROR_SERVICE_NOTIFICATION: u32 = 716;
    pub const ERROR_WAS_LOCKED: u32 = 717;
    pub const ERROR_LOG_HARD_ERROR: u32 = 718;
    pub const ERROR_ALREADY_WIN32: u32 = 719;
    pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE: u32 = 720;
    pub const ERROR_NO_YIELD_PERFORMED: u32 = 721;
    pub const ERROR_TIMER_RESUME_IGNORED: u32 = 722;
    pub const ERROR_ARBITRATION_UNHANDLED: u32 = 723;
    pub const ERROR_CARDBUS_NOT_SUPPORTED: u32 = 724;
    pub const ERROR_MP_PROCESSOR_MISMATCH: u32 = 725;
    pub const ERROR_HIBERNATED: u32 = 726;
    pub const ERROR_RESUME_HIBERNATION: u32 = 727;
    pub const ERROR_FIRMWARE_UPDATED: u32 = 728;
    pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES: u32 = 729;
    pub const ERROR_WAKE_SYSTEM: u32 = 730;
    pub const ERROR_WAIT_1: u32 = 731;
    pub const ERROR_WAIT_2: u32 = 732;
    pub const ERROR_WAIT_3: u32 = 733;
    pub const ERROR_WAIT_63: u32 = 734;
    pub const ERROR_ABANDONED_WAIT_0: u32 = 735;
    pub const ERROR_ABANDONED_WAIT_63: u32 = 736;
    pub const ERROR_USER_APC: u32 = 737;
    pub const ERROR_KERNEL_APC: u32 = 738;
    pub const ERROR_ALERTED: u32 = 739;
    pub const ERROR_ELEVATION_REQUIRED: u32 = 740;
    pub const ERROR_REPARSE: u32 = 741;
    pub const ERROR_OPLOCK_BREAK_IN_PROGRESS: u32 = 742;
    pub const ERROR_VOLUME_MOUNTED: u32 = 743;
    pub const ERROR_RXACT_COMMITTED: u32 = 744;
    pub const ERROR_NOTIFY_CLEANUP: u32 = 745;
    pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED: u32 = 746;
    pub const ERROR_PAGE_FAULT_TRANSITION: u32 = 747;
    pub const ERROR_PAGE_FAULT_DEMAND_ZERO: u32 = 748;
    pub const ERROR_PAGE_FAULT_COPY_ON_WRITE: u32 = 749;
    pub const ERROR_PAGE_FAULT_GUARD_PAGE: u32 = 750;
    pub const ERROR_PAGE_FAULT_PAGING_FILE: u32 = 751;
    pub const ERROR_CACHE_PAGE_LOCKED: u32 = 752;
    pub const ERROR_CRASH_DUMP: u32 = 753;
    pub const ERROR_BUFFER_ALL_ZEROS: u32 = 754;
    pub const ERROR_REPARSE_OBJECT: u32 = 755;
    pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED: u32 = 756;
    pub const ERROR_TRANSLATION_COMPLETE: u32 = 757;
    pub const ERROR_NOTHING_TO_TERMINATE: u32 = 758;
    pub const ERROR_PROCESS_NOT_IN_JOB: u32 = 759;
    pub const ERROR_PROCESS_IN_JOB: u32 = 760;
    pub const ERROR_VOLSNAP_HIBERNATE_READY: u32 = 761;
    pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY: u32 = 762;
    pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED: u32 = 763;
    pub const ERROR_INTERRUPT_STILL_CONNECTED: u32 = 764;
    pub const ERROR_WAIT_FOR_OPLOCK: u32 = 765;
    pub const ERROR_DBG_EXCEPTION_HANDLED: u32 = 766;
    pub const ERROR_DBG_CONTINUE: u32 = 767;
    pub const ERROR_CALLBACK_POP_STACK: u32 = 768;
    pub const ERROR_COMPRESSION_DISABLED: u32 = 769;
    pub const ERROR_CANTFETCHBACKWARDS: u32 = 770;
    pub const ERROR_CANTSCROLLBACKWARDS: u32 = 771;
    pub const ERROR_ROWSNOTRELEASED: u32 = 772;
    pub const ERROR_BAD_ACCESSOR_FLAGS: u32 = 773;
    pub const ERROR_ERRORS_ENCOUNTERED: u32 = 774;
    pub const ERROR_NOT_CAPABLE: u32 = 775;
    pub const ERROR_REQUEST_OUT_OF_SEQUENCE: u32 = 776;
    pub const ERROR_VERSION_PARSE_ERROR: u32 = 777;
    pub const ERROR_BADSTARTPOSITION: u32 = 778;
    pub const ERROR_MEMORY_HARDWARE: u32 = 779;
    pub const ERROR_DISK_REPAIR_DISABLED: u32 = 780;
    pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE: u32 = 781;
    pub const ERROR_SYSTEM_POWERSTATE_TRANSITION: u32 = 782;
    pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION: u32 = 783;
    pub const ERROR_MCA_EXCEPTION: u32 = 784;
    pub const ERROR_ACCESS_AUDIT_BY_POLICY: u32 = 785;
    pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY: u32 = 786;
    pub const ERROR_ABANDON_HIBERFILE: u32 = 787;
    pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED: u32 = 788;
    pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR: u32 = 789;
    pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR: u32 = 790;
    pub const ERROR_BAD_MCFG_TABLE: u32 = 791;
    pub const ERROR_DISK_REPAIR_REDIRECTED: u32 = 792;
    pub const ERROR_DISK_REPAIR_UNSUCCESSFUL: u32 = 793;
    pub const ERROR_CORRUPT_LOG_OVERFULL: u32 = 794;
    pub const ERROR_CORRUPT_LOG_CORRUPTED: u32 = 795;
    pub const ERROR_CORRUPT_LOG_UNAVAILABLE: u32 = 796;
    pub const ERROR_CORRUPT_LOG_DELETED_FULL: u32 = 797;
    pub const ERROR_CORRUPT_LOG_CLEARED: u32 = 798;
    pub const ERROR_ORPHAN_NAME_EXHAUSTED: u32 = 799;
    pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE: u32 = 800;
    pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK: u32 = 801;
    pub const ERROR_CANNOT_BREAK_OPLOCK: u32 = 802;
    pub const ERROR_OPLOCK_HANDLE_CLOSED: u32 = 803;
    pub const ERROR_NO_ACE_CONDITION: u32 = 804;
    pub const ERROR_INVALID_ACE_CONDITION: u32 = 805;
    pub const ERROR_FILE_HANDLE_REVOKED: u32 = 806;
    pub const ERROR_IMAGE_AT_DIFFERENT_BASE: u32 = 807;
    pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE: u32 = 808;
    pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS: u32 = 809;
    pub const ERROR_QUOTA_ACTIVITY: u32 = 810;
    pub const ERROR_HANDLE_REVOKED: u32 = 811;
    pub const ERROR_CALLBACK_INVOKE_INLINE: u32 = 812;
    pub const ERROR_CPU_SET_INVALID: u32 = 813;
    pub const ERROR_ENCLAVE_NOT_TERMINATED: u32 = 814;
    pub const ERROR_ENCLAVE_VIOLATION: u32 = 815;
    pub const ERROR_EA_ACCESS_DENIED: u32 = 994;
    pub const ERROR_OPERATION_ABORTED: u32 = 995;
    pub const ERROR_IO_INCOMPLETE: u32 = 996;
    pub const ERROR_IO_PENDING: u32 = 997;
    pub const ERROR_NOACCESS: u32 = 998;
    pub const ERROR_SWAPERROR: u32 = 999;
    pub const ERROR_STACK_OVERFLOW: u32 = 1001;
    pub const ERROR_INVALID_MESSAGE: u32 = 1002;
    pub const ERROR_CAN_NOT_COMPLETE: u32 = 1003;
    pub const ERROR_INVALID_FLAGS: u32 = 1004;
    pub const ERROR_UNRECOGNIZED_VOLUME: u32 = 1005;
    pub const ERROR_FILE_INVALID: u32 = 1006;
    pub const ERROR_FULLSCREEN_MODE: u32 = 1007;
    pub const ERROR_NO_TOKEN: u32 = 1008;
    pub const ERROR_BADDB: u32 = 1009;
    pub const ERROR_BADKEY: u32 = 1010;
    pub const ERROR_CANTOPEN: u32 = 1011;
    pub const ERROR_CANTREAD: u32 = 1012;
    pub const ERROR_CANTWRITE: u32 = 1013;
    pub const ERROR_REGISTRY_RECOVERED: u32 = 1014;
    pub const ERROR_REGISTRY_CORRUPT: u32 = 1015;
    pub const ERROR_REGISTRY_IO_FAILED: u32 = 1016;
    pub const ERROR_NOT_REGISTRY_FILE: u32 = 1017;
    pub const ERROR_KEY_DELETED: u32 = 1018;
    pub const ERROR_NO_LOG_SPACE: u32 = 1019;
    pub const ERROR_KEY_HAS_CHILDREN: u32 = 1020;
    pub const ERROR_CHILD_MUST_BE_VOLATILE: u32 = 1021;
    pub const ERROR_NOTIFY_ENUM_DIR: u32 = 1022;
    pub const ERROR_DEPENDENT_SERVICES_RUNNING: u32 = 1051;
    pub const ERROR_INVALID_SERVICE_CONTROL: u32 = 1052;
    pub const ERROR_SERVICE_REQUEST_TIMEOUT: u32 = 1053;
    pub const ERROR_SERVICE_NO_THREAD: u32 = 1054;
    pub const ERROR_SERVICE_DATABASE_LOCKED: u32 = 1055;
    pub const ERROR_SERVICE_ALREADY_RUNNING: u32 = 1056;
    pub const ERROR_INVALID_SERVICE_ACCOUNT: u32 = 1057;
    pub const ERROR_SERVICE_DISABLED: u32 = 1058;
    pub const ERROR_CIRCULAR_DEPENDENCY: u32 = 1059;
    pub const ERROR_SERVICE_DOES_NOT_EXIST: u32 = 1060;
    pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL: u32 = 1061;
    pub const ERROR_SERVICE_NOT_ACTIVE: u32 = 1062;
    pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT: u32 = 1063;
    pub const ERROR_EXCEPTION_IN_SERVICE: u32 = 1064;
    pub const ERROR_DATABASE_DOES_NOT_EXIST: u32 = 1065;
    pub const ERROR_SERVICE_SPECIFIC_ERROR: u32 = 1066;
    pub const ERROR_PROCESS_ABORTED: u32 = 1067;
    pub const ERROR_SERVICE_DEPENDENCY_FAIL: u32 = 1068;
    pub const ERROR_SERVICE_LOGON_FAILED: u32 = 1069;
    pub const ERROR_SERVICE_START_HANG: u32 = 1070;
    pub const ERROR_INVALID_SERVICE_LOCK: u32 = 1071;
    pub const ERROR_SERVICE_MARKED_FOR_DELETE: u32 = 1072;
    pub const ERROR_SERVICE_EXISTS: u32 = 1073;
    pub const ERROR_ALREADY_RUNNING_LKG: u32 = 1074;
    pub const ERROR_SERVICE_DEPENDENCY_DELETED: u32 = 1075;
    pub const ERROR_BOOT_ALREADY_ACCEPTED: u32 = 1076;
    pub const ERROR_SERVICE_NEVER_STARTED: u32 = 1077;
    pub const ERROR_DUPLICATE_SERVICE_NAME: u32 = 1078;
    pub const ERROR_DIFFERENT_SERVICE_ACCOUNT: u32 = 1079;
    pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE: u32 = 1080;
    pub const ERROR_CANNOT_DETECT_PROCESS_ABORT: u32 = 1081;
    pub const ERROR_NO_RECOVERY_PROGRAM: u32 = 1082;
    pub const ERROR_SERVICE_NOT_IN_EXE: u32 = 1083;
    pub const ERROR_NOT_SAFEBOOT_SERVICE: u32 = 1084;
    pub const ERROR_END_OF_MEDIA: u32 = 1100;
    pub const ERROR_FILEMARK_DETECTED: u32 = 1101;
    pub const ERROR_BEGINNING_OF_MEDIA: u32 = 1102;
    pub const ERROR_SETMARK_DETECTED: u32 = 1103;
    pub const ERROR_NO_DATA_DETECTED: u32 = 1104;
    pub const ERROR_PARTITION_FAILURE: u32 = 1105;
    pub const ERROR_INVALID_BLOCK_LENGTH: u32 = 1106;
    pub const ERROR_DEVICE_NOT_PARTITIONED: u32 = 1107;
    pub const ERROR_UNABLE_TO_LOCK_MEDIA: u32 = 1108;
    pub const ERROR_UNABLE_TO_UNLOAD_MEDIA: u32 = 1109;
    pub const ERROR_MEDIA_CHANGED: u32 = 1110;
    pub const ERROR_BUS_RESET: u32 = 1111;
    pub const ERROR_NO_MEDIA_IN_DRIVE: u32 = 1112;
    pub const ERROR_NO_UNICODE_TRANSLATION: u32 = 1113;
    pub const ERROR_DLL_INIT_FAILED: u32 = 1114;
    pub const ERROR_SHUTDOWN_IN_PROGRESS: u32 = 1115;
    pub const ERROR_NO_SHUTDOWN_IN_PROGRESS: u32 = 1116;
    pub const ERROR_IO_DEVICE: u32 = 1117;
    pub const ERROR_SERIAL_NO_DEVICE: u32 = 1118;
    pub const ERROR_IRQ_BUSY: u32 = 1119;
    pub const ERROR_MORE_WRITES: u32 = 1120;
    pub const ERROR_COUNTER_TIMEOUT: u32 = 1121;
    pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND: u32 = 1122;
    pub const ERROR_FLOPPY_WRONG_CYLINDER: u32 = 1123;
    pub const ERROR_FLOPPY_UNKNOWN_ERROR: u32 = 1124;
    pub const ERROR_FLOPPY_BAD_REGISTERS: u32 = 1125;
    pub const ERROR_DISK_RECALIBRATE_FAILED: u32 = 1126;
    pub const ERROR_DISK_OPERATION_FAILED: u32 = 1127;
    pub const ERROR_DISK_RESET_FAILED: u32 = 1128;
    pub const ERROR_EOM_OVERFLOW: u32 = 1129;
    pub const ERROR_NOT_ENOUGH_SERVER_MEMORY: u32 = 1130;
    pub const ERROR_POSSIBLE_DEADLOCK: u32 = 1131;
    pub const ERROR_MAPPED_ALIGNMENT: u32 = 1132;
    pub const ERROR_SET_POWER_STATE_VETOED: u32 = 1140;
    pub const ERROR_SET_POWER_STATE_FAILED: u32 = 1141;
    pub const ERROR_TOO_MANY_LINKS: u32 = 1142;
    pub const ERROR_OLD_WIN_VERSION: u32 = 1150;
    pub const ERROR_APP_WRONG_OS: u32 = 1151;
    pub const ERROR_SINGLE_INSTANCE_APP: u32 = 1152;
    pub const ERROR_RMODE_APP: u32 = 1153;
    pub const ERROR_INVALID_DLL: u32 = 1154;
    pub const ERROR_NO_ASSOCIATION: u32 = 1155;
    pub const ERROR_DDE_FAIL: u32 = 1156;
    pub const ERROR_DLL_NOT_FOUND: u32 = 1157;
    pub const ERROR_NO_MORE_USER_HANDLES: u32 = 1158;
    pub const ERROR_MESSAGE_SYNC_ONLY: u32 = 1159;
    pub const ERROR_SOURCE_ELEMENT_EMPTY: u32 = 1160;
    pub const ERROR_DESTINATION_ELEMENT_FULL: u32 = 1161;
    pub const ERROR_ILLEGAL_ELEMENT_ADDRESS: u32 = 1162;
    pub const ERROR_MAGAZINE_NOT_PRESENT: u32 = 1163;
    pub const ERROR_DEVICE_REINITIALIZATION_NEEDED: u32 = 1164;
    pub const ERROR_DEVICE_REQUIRES_CLEANING: u32 = 1165;
    pub const ERROR_DEVICE_DOOR_OPEN: u32 = 1166;
    pub const ERROR_DEVICE_NOT_CONNECTED: u32 = 1167;
    pub const ERROR_NOT_FOUND: u32 = 1168;
    pub const ERROR_NO_MATCH: u32 = 1169;
    pub const ERROR_SET_NOT_FOUND: u32 = 1170;
    pub const ERROR_POINT_NOT_FOUND: u32 = 1171;
    pub const ERROR_NO_TRACKING_SERVICE: u32 = 1172;
    pub const ERROR_NO_VOLUME_ID: u32 = 1173;
    pub const ERROR_UNABLE_TO_REMOVE_REPLACED: u32 = 1175;
    pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT: u32 = 1176;
    pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2: u32 = 1177;
    pub const ERROR_JOURNAL_DELETE_IN_PROGRESS: u32 = 1178;
    pub const ERROR_JOURNAL_NOT_ACTIVE: u32 = 1179;
    pub const ERROR_POTENTIAL_FILE_FOUND: u32 = 1180;
    pub const ERROR_JOURNAL_ENTRY_DELETED: u32 = 1181;
    pub const ERROR_SHUTDOWN_IS_SCHEDULED: u32 = 1190;
    pub const ERROR_SHUTDOWN_USERS_LOGGED_ON: u32 = 1191;
    pub const ERROR_BAD_DEVICE: u32 = 1200;
    pub const ERROR_CONNECTION_UNAVAIL: u32 = 1201;
    pub const ERROR_DEVICE_ALREADY_REMEMBERED: u32 = 1202;
    pub const ERROR_NO_NET_OR_BAD_PATH: u32 = 1203;
    pub const ERROR_BAD_PROVIDER: u32 = 1204;
    pub const ERROR_CANNOT_OPEN_PROFILE: u32 = 1205;
    pub const ERROR_BAD_PROFILE: u32 = 1206;
    pub const ERROR_NOT_CONTAINER: u32 = 1207;
    pub const ERROR_EXTENDED_ERROR: u32 = 1208;
    pub const ERROR_INVALID_GROUPNAME: u32 = 1209;
    pub const ERROR_INVALID_COMPUTERNAME: u32 = 1210;
    pub const ERROR_INVALID_EVENTNAME: u32 = 1211;
    pub const ERROR_INVALID_DOMAINNAME: u32 = 1212;
    pub const ERROR_INVALID_SERVICENAME: u32 = 1213;
    pub const ERROR_INVALID_NETNAME: u32 = 1214;
    pub const ERROR_INVALID_SHARENAME: u32 = 1215;
    pub const ERROR_INVALID_PASSWORDNAME: u32 = 1216;
    pub const ERROR_INVALID_MESSAGENAME: u32 = 1217;
    pub const ERROR_INVALID_MESSAGEDEST: u32 = 1218;
    pub const ERROR_SESSION_CREDENTIAL_CONFLICT: u32 = 1219;
    pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED: u32 = 1220;
    pub const ERROR_DUP_DOMAINNAME: u32 = 1221;
    pub const ERROR_NO_NETWORK: u32 = 1222;
    pub const ERROR_CANCELLED: u32 = 1223;
    pub const ERROR_USER_MAPPED_FILE: u32 = 1224;
    pub const ERROR_CONNECTION_REFUSED: u32 = 1225;
    pub const ERROR_GRACEFUL_DISCONNECT: u32 = 1226;
    pub const ERROR_ADDRESS_ALREADY_ASSOCIATED: u32 = 1227;
    pub const ERROR_ADDRESS_NOT_ASSOCIATED: u32 = 1228;
    pub const ERROR_CONNECTION_INVALID: u32 = 1229;
    pub const ERROR_CONNECTION_ACTIVE: u32 = 1230;
    pub const ERROR_NETWORK_UNREACHABLE: u32 = 1231;
    pub const ERROR_HOST_UNREACHABLE: u32 = 1232;
    pub const ERROR_PROTOCOL_UNREACHABLE: u32 = 1233;
    pub const ERROR_PORT_UNREACHABLE: u32 = 1234;
    pub const ERROR_REQUEST_ABORTED: u32 = 1235;
    pub const ERROR_CONNECTION_ABORTED: u32 = 1236;
    pub const ERROR_RETRY: u32 = 1237;
    pub const ERROR_CONNECTION_COUNT_LIMIT: u32 = 1238;
    pub const ERROR_LOGIN_TIME_RESTRICTION: u32 = 1239;
    pub const ERROR_LOGIN_WKSTA_RESTRICTION: u32 = 1240;
    pub const ERROR_INCORRECT_ADDRESS: u32 = 1241;
    pub const ERROR_ALREADY_REGISTERED: u32 = 1242;
    pub const ERROR_SERVICE_NOT_FOUND: u32 = 1243;
    pub const ERROR_NOT_AUTHENTICATED: u32 = 1244;
    pub const ERROR_NOT_LOGGED_ON: u32 = 1245;
    pub const ERROR_CONTINUE: u32 = 1246;
    pub const ERROR_ALREADY_INITIALIZED: u32 = 1247;
    pub const ERROR_NO_MORE_DEVICES: u32 = 1248;
    pub const ERROR_NO_SUCH_SITE: u32 = 1249;
    pub const ERROR_DOMAIN_CONTROLLER_EXISTS: u32 = 1250;
    pub const ERROR_ONLY_IF_CONNECTED: u32 = 1251;
    pub const ERROR_OVERRIDE_NOCHANGES: u32 = 1252;
    pub const ERROR_BAD_USER_PROFILE: u32 = 1253;
    pub const ERROR_NOT_SUPPORTED_ON_SBS: u32 = 1254;
    pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS: u32 = 1255;
    pub const ERROR_HOST_DOWN: u32 = 1256;
    pub const ERROR_NON_ACCOUNT_SID: u32 = 1257;
    pub const ERROR_NON_DOMAIN_SID: u32 = 1258;
    pub const ERROR_APPHELP_BLOCK: u32 = 1259;
    pub const ERROR_ACCESS_DISABLED_BY_POLICY: u32 = 1260;
    pub const ERROR_REG_NAT_CONSUMPTION: u32 = 1261;
    pub const ERROR_CSCSHARE_OFFLINE: u32 = 1262;
    pub const ERROR_PKINIT_FAILURE: u32 = 1263;
    pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE: u32 = 1264;
    pub const ERROR_DOWNGRADE_DETECTED: u32 = 1265;
    pub const ERROR_MACHINE_LOCKED: u32 = 1271;
    pub const ERROR_SMB_GUEST_LOGON_BLOCKED: u32 = 1272;
    pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA: u32 = 1273;
    pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED: u32 = 1274;
    pub const ERROR_DRIVER_BLOCKED: u32 = 1275;
    pub const ERROR_INVALID_IMPORT_OF_NON_DLL: u32 = 1276;
    pub const ERROR_ACCESS_DISABLED_WEBBLADE: u32 = 1277;
    pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER: u32 = 1278;
    pub const ERROR_RECOVERY_FAILURE: u32 = 1279;
    pub const ERROR_ALREADY_FIBER: u32 = 1280;
    pub const ERROR_ALREADY_THREAD: u32 = 1281;
    pub const ERROR_STACK_BUFFER_OVERRUN: u32 = 1282;
    pub const ERROR_PARAMETER_QUOTA_EXCEEDED: u32 = 1283;
    pub const ERROR_DEBUGGER_INACTIVE: u32 = 1284;
    pub const ERROR_DELAY_LOAD_FAILED: u32 = 1285;
    pub const ERROR_VDM_DISALLOWED: u32 = 1286;
    pub const ERROR_UNIDENTIFIED_ERROR: u32 = 1287;
    pub const ERROR_INVALID_CRUNTIME_PARAMETER: u32 = 1288;
    pub const ERROR_BEYOND_VDL: u32 = 1289;
    pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE: u32 = 1290;
    pub const ERROR_DRIVER_PROCESS_TERMINATED: u32 = 1291;
    pub const ERROR_IMPLEMENTATION_LIMIT: u32 = 1292;
    pub const ERROR_PROCESS_IS_PROTECTED: u32 = 1293;
    pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING: u32 = 1294;
    pub const ERROR_DISK_QUOTA_EXCEEDED: u32 = 1295;
    pub const ERROR_CONTENT_BLOCKED: u32 = 1296;
    pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE: u32 = 1297;
    pub const ERROR_APP_HANG: u32 = 1298;
    pub const ERROR_INVALID_LABEL: u32 = 1299;
    pub const ERROR_NOT_ALL_ASSIGNED: u32 = 1300;
    pub const ERROR_SOME_NOT_MAPPED: u32 = 1301;
    pub const ERROR_NO_QUOTAS_FOR_ACCOUNT: u32 = 1302;
    pub const ERROR_LOCAL_USER_SESSION_KEY: u32 = 1303;
    pub const ERROR_NULL_LM_PASSWORD: u32 = 1304;
    pub const ERROR_UNKNOWN_REVISION: u32 = 1305;
    pub const ERROR_REVISION_MISMATCH: u32 = 1306;
    pub const ERROR_INVALID_OWNER: u32 = 1307;
    pub const ERROR_INVALID_PRIMARY_GROUP: u32 = 1308;
    pub const ERROR_NO_IMPERSONATION_TOKEN: u32 = 1309;
    pub const ERROR_CANT_DISABLE_MANDATORY: u32 = 1310;
    pub const ERROR_NO_LOGON_SERVERS: u32 = 1311;
    pub const ERROR_NO_SUCH_LOGON_SESSION: u32 = 1312;
    pub const ERROR_NO_SUCH_PRIVILEGE: u32 = 1313;
    pub const ERROR_PRIVILEGE_NOT_HELD: u32 = 1314;
    pub const ERROR_INVALID_ACCOUNT_NAME: u32 = 1315;
    pub const ERROR_USER_EXISTS: u32 = 1316;
    pub const ERROR_NO_SUCH_USER: u32 = 1317;
    pub const ERROR_GROUP_EXISTS: u32 = 1318;
    pub const ERROR_NO_SUCH_GROUP: u32 = 1319;
    pub const ERROR_MEMBER_IN_GROUP: u32 = 1320;
    pub const ERROR_MEMBER_NOT_IN_GROUP: u32 = 1321;
    pub const ERROR_LAST_ADMIN: u32 = 1322;
    pub const ERROR_WRONG_PASSWORD: u32 = 1323;
    pub const ERROR_ILL_FORMED_PASSWORD: u32 = 1324;
    pub const ERROR_PASSWORD_RESTRICTION: u32 = 1325;
    pub const ERROR_LOGON_FAILURE: u32 = 1326;
    pub const ERROR_ACCOUNT_RESTRICTION: u32 = 1327;
    pub const ERROR_INVALID_LOGON_HOURS: u32 = 1328;
    pub const ERROR_INVALID_WORKSTATION: u32 = 1329;
    pub const ERROR_PASSWORD_EXPIRED: u32 = 1330;
    pub const ERROR_ACCOUNT_DISABLED: u32 = 1331;
    pub const ERROR_NONE_MAPPED: u32 = 1332;
    pub const ERROR_TOO_MANY_LUIDS_REQUESTED: u32 = 1333;
    pub const ERROR_LUIDS_EXHAUSTED: u32 = 1334;
    pub const ERROR_INVALID_SUB_AUTHORITY: u32 = 1335;
    pub const ERROR_INVALID_ACL: u32 = 1336;
    pub const ERROR_INVALID_SID: u32 = 1337;
    pub const ERROR_INVALID_SECURITY_DESCR: u32 = 1338;
    pub const ERROR_BAD_INHERITANCE_ACL: u32 = 1340;
    pub const ERROR_SERVER_DISABLED: u32 = 1341;
    pub const ERROR_SERVER_NOT_DISABLED: u32 = 1342;
    pub const ERROR_INVALID_ID_AUTHORITY: u32 = 1343;
    pub const ERROR_ALLOTTED_SPACE_EXCEEDED: u32 = 1344;
    pub const ERROR_INVALID_GROUP_ATTRIBUTES: u32 = 1345;
    pub const ERROR_BAD_IMPERSONATION_LEVEL: u32 = 1346;
    pub const ERROR_CANT_OPEN_ANONYMOUS: u32 = 1347;
    pub const ERROR_BAD_VALIDATION_CLASS: u32 = 1348;
    pub const ERROR_BAD_TOKEN_TYPE: u32 = 1349;
    pub const ERROR_NO_SECURITY_ON_OBJECT: u32 = 1350;
    pub const ERROR_CANT_ACCESS_DOMAIN_INFO: u32 = 1351;
    pub const ERROR_INVALID_SERVER_STATE: u32 = 1352;
    pub const ERROR_INVALID_DOMAIN_STATE: u32 = 1353;
    pub const ERROR_INVALID_DOMAIN_ROLE: u32 = 1354;
    pub const ERROR_NO_SUCH_DOMAIN: u32 = 1355;
    pub const ERROR_DOMAIN_EXISTS: u32 = 1356;
    pub const ERROR_DOMAIN_LIMIT_EXCEEDED: u32 = 1357;
    pub const ERROR_INTERNAL_DB_CORRUPTION: u32 = 1358;
    pub const ERROR_INTERNAL_ERROR: u32 = 1359;
    pub const ERROR_GENERIC_NOT_MAPPED: u32 = 1360;
    pub const ERROR_BAD_DESCRIPTOR_FORMAT: u32 = 1361;
    pub const ERROR_NOT_LOGON_PROCESS: u32 = 1362;
    pub const ERROR_LOGON_SESSION_EXISTS: u32 = 1363;
    pub const ERROR_NO_SUCH_PACKAGE: u32 = 1364;
    pub const ERROR_BAD_LOGON_SESSION_STATE: u32 = 1365;
    pub const ERROR_LOGON_SESSION_COLLISION: u32 = 1366;
    pub const ERROR_INVALID_LOGON_TYPE: u32 = 1367;
    pub const ERROR_CANNOT_IMPERSONATE: u32 = 1368;
    pub const ERROR_RXACT_INVALID_STATE: u32 = 1369;
    pub const ERROR_RXACT_COMMIT_FAILURE: u32 = 1370;
    pub const ERROR_SPECIAL_ACCOUNT: u32 = 1371;
    pub const ERROR_SPECIAL_GROUP: u32 = 1372;
    pub const ERROR_SPECIAL_USER: u32 = 1373;
    pub const ERROR_MEMBERS_PRIMARY_GROUP: u32 = 1374;
    pub const ERROR_TOKEN_ALREADY_IN_USE: u32 = 1375;
    pub const ERROR_NO_SUCH_ALIAS: u32 = 1376;
    pub const ERROR_MEMBER_NOT_IN_ALIAS: u32 = 1377;
    pub const ERROR_MEMBER_IN_ALIAS: u32 = 1378;
    pub const ERROR_ALIAS_EXISTS: u32 = 1379;
    pub const ERROR_LOGON_NOT_GRANTED: u32 = 1380;
    pub const ERROR_TOO_MANY_SECRETS: u32 = 1381;
    pub const ERROR_SECRET_TOO_LONG: u32 = 1382;
    pub const ERROR_INTERNAL_DB_ERROR: u32 = 1383;
    pub const ERROR_TOO_MANY_CONTEXT_IDS: u32 = 1384;
    pub const ERROR_LOGON_TYPE_NOT_GRANTED: u32 = 1385;
    pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED: u32 = 1386;
    pub const ERROR_NO_SUCH_MEMBER: u32 = 1387;
    pub const ERROR_INVALID_MEMBER: u32 = 1388;
    pub const ERROR_TOO_MANY_SIDS: u32 = 1389;
    pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED: u32 = 1390;
    pub const ERROR_NO_INHERITANCE: u32 = 1391;
    pub const ERROR_FILE_CORRUPT: u32 = 1392;
    pub const ERROR_DISK_CORRUPT: u32 = 1393;
    pub const ERROR_NO_USER_SESSION_KEY: u32 = 1394;
    pub const ERROR_LICENSE_QUOTA_EXCEEDED: u32 = 1395;
    pub const ERROR_WRONG_TARGET_NAME: u32 = 1396;
    pub const ERROR_MUTUAL_AUTH_FAILED: u32 = 1397;
    pub const ERROR_TIME_SKEW: u32 = 1398;
    pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED: u32 = 1399;
    pub const ERROR_INVALID_WINDOW_HANDLE: u32 = 1400;
    pub const ERROR_INVALID_MENU_HANDLE: u32 = 1401;
    pub const ERROR_INVALID_CURSOR_HANDLE: u32 = 1402;
    pub const ERROR_INVALID_ACCEL_HANDLE: u32 = 1403;
    pub const ERROR_INVALID_HOOK_HANDLE: u32 = 1404;
    pub const ERROR_INVALID_DWP_HANDLE: u32 = 1405;
    pub const ERROR_TLW_WITH_WSCHILD: u32 = 1406;
    pub const ERROR_CANNOT_FIND_WND_CLASS: u32 = 1407;
    pub const ERROR_WINDOW_OF_OTHER_THREAD: u32 = 1408;
    pub const ERROR_HOTKEY_ALREADY_REGISTERED: u32 = 1409;
    pub const ERROR_CLASS_ALREADY_EXISTS: u32 = 1410;
    pub const ERROR_CLASS_DOES_NOT_EXIST: u32 = 1411;
    pub const ERROR_CLASS_HAS_WINDOWS: u32 = 1412;
    pub const ERROR_INVALID_INDEX: u32 = 1413;
    pub const ERROR_INVALID_ICON_HANDLE: u32 = 1414;
    pub const ERROR_PRIVATE_DIALOG_INDEX: u32 = 1415;
    pub const ERROR_LISTBOX_ID_NOT_FOUND: u32 = 1416;
    pub const ERROR_NO_WILDCARD_CHARACTERS: u32 = 1417;
    pub const ERROR_CLIPBOARD_NOT_OPEN: u32 = 1418;
    pub const ERROR_HOTKEY_NOT_REGISTERED: u32 = 1419;
    pub const ERROR_WINDOW_NOT_DIALOG: u32 = 1420;
    pub const ERROR_CONTROL_ID_NOT_FOUND: u32 = 1421;
    pub const ERROR_INVALID_COMBOBOX_MESSAGE: u32 = 1422;
    pub const ERROR_WINDOW_NOT_COMBOBOX: u32 = 1423;
    pub const ERROR_INVALID_EDIT_HEIGHT: u32 = 1424;
    pub const ERROR_DC_NOT_FOUND: u32 = 1425;
    pub const ERROR_INVALID_HOOK_FILTER: u32 = 1426;
    pub const ERROR_INVALID_FILTER_PROC: u32 = 1427;
    pub const ERROR_HOOK_NEEDS_HMOD: u32 = 1428;
    pub const ERROR_GLOBAL_ONLY_HOOK: u32 = 1429;
    pub const ERROR_JOURNAL_HOOK_SET: u32 = 1430;
    pub const ERROR_HOOK_NOT_INSTALLED: u32 = 1431;
    pub const ERROR_INVALID_LB_MESSAGE: u32 = 1432;
    pub const ERROR_SETCOUNT_ON_BAD_LB: u32 = 1433;
    pub const ERROR_LB_WITHOUT_TABSTOPS: u32 = 1434;
    pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD: u32 = 1435;
    pub const ERROR_CHILD_WINDOW_MENU: u32 = 1436;
    pub const ERROR_NO_SYSTEM_MENU: u32 = 1437;
    pub const ERROR_INVALID_MSGBOX_STYLE: u32 = 1438;
    pub const ERROR_INVALID_SPI_VALUE: u32 = 1439;
    pub const ERROR_SCREEN_ALREADY_LOCKED: u32 = 1440;
    pub const ERROR_HWNDS_HAVE_DIFF_PARENT: u32 = 1441;
    pub const ERROR_NOT_CHILD_WINDOW: u32 = 1442;
    pub const ERROR_INVALID_GW_COMMAND: u32 = 1443;
    pub const ERROR_INVALID_THREAD_ID: u32 = 1444;
    pub const ERROR_NON_MDICHILD_WINDOW: u32 = 1445;
    pub const ERROR_POPUP_ALREADY_ACTIVE: u32 = 1446;
    pub const ERROR_NO_SCROLLBARS: u32 = 1447;
    pub const ERROR_INVALID_SCROLLBAR_RANGE: u32 = 1448;
    pub const ERROR_INVALID_SHOWWIN_COMMAND: u32 = 1449;
    pub const ERROR_NO_SYSTEM_RESOURCES: u32 = 1450;
    pub const ERROR_NONPAGED_SYSTEM_RESOURCES: u32 = 1451;
    pub const ERROR_PAGED_SYSTEM_RESOURCES: u32 = 1452;
    pub const ERROR_WORKING_SET_QUOTA: u32 = 1453;
    pub const ERROR_PAGEFILE_QUOTA: u32 = 1454;
    pub const ERROR_COMMITMENT_LIMIT: u32 = 1455;
    pub const ERROR_MENU_ITEM_NOT_FOUND: u32 = 1456;
    pub const ERROR_INVALID_KEYBOARD_HANDLE: u32 = 1457;
    pub const ERROR_HOOK_TYPE_NOT_ALLOWED: u32 = 1458;
    pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION: u32 = 1459;
    pub const ERROR_TIMEOUT: u32 = 1460;
    pub const ERROR_INVALID_MONITOR_HANDLE: u32 = 1461;
    pub const ERROR_INCORRECT_SIZE: u32 = 1462;
    pub const ERROR_SYMLINK_CLASS_DISABLED: u32 = 1463;
    pub const ERROR_SYMLINK_NOT_SUPPORTED: u32 = 1464;
    pub const ERROR_XML_PARSE_ERROR: u32 = 1465;
    pub const ERROR_XMLDSIG_ERROR: u32 = 1466;
    pub const ERROR_RESTART_APPLICATION: u32 = 1467;
    pub const ERROR_WRONG_COMPARTMENT: u32 = 1468;
    pub const ERROR_AUTHIP_FAILURE: u32 = 1469;
    pub const ERROR_NO_NVRAM_RESOURCES: u32 = 1470;
    pub const ERROR_NOT_GUI_PROCESS: u32 = 1471;
    pub const ERROR_EVENTLOG_FILE_CORRUPT: u32 = 1500;
    pub const ERROR_EVENTLOG_CANT_START: u32 = 1501;
    pub const ERROR_LOG_FILE_FULL: u32 = 1502;
    pub const ERROR_EVENTLOG_FILE_CHANGED: u32 = 1503;
    pub const ERROR_CONTAINER_ASSIGNED: u32 = 1504;
    pub const ERROR_JOB_NO_CONTAINER: u32 = 1505;
    pub const ERROR_INVALID_TASK_NAME: u32 = 1550;
    pub const ERROR_INVALID_TASK_INDEX: u32 = 1551;
    pub const ERROR_THREAD_ALREADY_IN_TASK: u32 = 1552;
    pub const ERROR_INSTALL_SERVICE_FAILURE: u32 = 1601;
    pub const ERROR_INSTALL_USEREXIT: u32 = 1602;
    pub const ERROR_INSTALL_FAILURE: u32 = 1603;
    pub const ERROR_INSTALL_SUSPEND: u32 = 1604;
    pub const ERROR_UNKNOWN_PRODUCT: u32 = 1605;
    pub const ERROR_UNKNOWN_FEATURE: u32 = 1606;
    pub const ERROR_UNKNOWN_COMPONENT: u32 = 1607;
    pub const ERROR_UNKNOWN_PROPERTY: u32 = 1608;
    pub const ERROR_INVALID_HANDLE_STATE: u32 = 1609;
    pub const ERROR_BAD_CONFIGURATION: u32 = 1610;
    pub const ERROR_INDEX_ABSENT: u32 = 1611;
    pub const ERROR_INSTALL_SOURCE_ABSENT: u32 = 1612;
    pub const ERROR_INSTALL_PACKAGE_VERSION: u32 = 1613;
    pub const ERROR_PRODUCT_UNINSTALLED: u32 = 1614;
    pub const ERROR_BAD_QUERY_SYNTAX: u32 = 1615;
    pub const ERROR_INVALID_FIELD: u32 = 1616;
    pub const ERROR_DEVICE_REMOVED: u32 = 1617;
    pub const ERROR_INSTALL_ALREADY_RUNNING: u32 = 1618;
    pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED: u32 = 1619;
    pub const ERROR_INSTALL_PACKAGE_INVALID: u32 = 1620;
    pub const ERROR_INSTALL_UI_FAILURE: u32 = 1621;
    pub const ERROR_INSTALL_LOG_FAILURE: u32 = 1622;
    pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED: u32 = 1623;
    pub const ERROR_INSTALL_TRANSFORM_FAILURE: u32 = 1624;
    pub const ERROR_INSTALL_PACKAGE_REJECTED: u32 = 1625;
    pub const ERROR_FUNCTION_NOT_CALLED: u32 = 1626;
    pub const ERROR_FUNCTION_FAILED: u32 = 1627;
    pub const ERROR_INVALID_TABLE: u32 = 1628;
    pub const ERROR_DATATYPE_MISMATCH: u32 = 1629;
    pub const ERROR_UNSUPPORTED_TYPE: u32 = 1630;
    pub const ERROR_CREATE_FAILED: u32 = 1631;
    pub const ERROR_INSTALL_TEMP_UNWRITABLE: u32 = 1632;
    pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED: u32 = 1633;
    pub const ERROR_INSTALL_NOTUSED: u32 = 1634;
    pub const ERROR_PATCH_PACKAGE_OPEN_FAILED: u32 = 1635;
    pub const ERROR_PATCH_PACKAGE_INVALID: u32 = 1636;
    pub const ERROR_PATCH_PACKAGE_UNSUPPORTED: u32 = 1637;
    pub const ERROR_PRODUCT_VERSION: u32 = 1638;
    pub const ERROR_INVALID_COMMAND_LINE: u32 = 1639;
    pub const ERROR_INSTALL_REMOTE_DISALLOWED: u32 = 1640;
    pub const ERROR_SUCCESS_REBOOT_INITIATED: u32 = 1641;
    pub const ERROR_PATCH_TARGET_NOT_FOUND: u32 = 1642;
    pub const ERROR_PATCH_PACKAGE_REJECTED: u32 = 1643;
    pub const ERROR_INSTALL_TRANSFORM_REJECTED: u32 = 1644;
    pub const ERROR_INSTALL_REMOTE_PROHIBITED: u32 = 1645;
    pub const ERROR_PATCH_REMOVAL_UNSUPPORTED: u32 = 1646;
    pub const ERROR_UNKNOWN_PATCH: u32 = 1647;
    pub const ERROR_PATCH_NO_SEQUENCE: u32 = 1648;
    pub const ERROR_PATCH_REMOVAL_DISALLOWED: u32 = 1649;
    pub const ERROR_INVALID_PATCH_XML: u32 = 1650;
    pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT: u32 = 1651;
    pub const ERROR_INSTALL_SERVICE_SAFEBOOT: u32 = 1652;
    pub const ERROR_FAIL_FAST_EXCEPTION: u32 = 1653;
    pub const ERROR_INSTALL_REJECTED: u32 = 1654;
    pub const ERROR_DYNAMIC_CODE_BLOCKED: u32 = 1655;
    pub const ERROR_NOT_SAME_OBJECT: u32 = 1656;
    pub const ERROR_STRICT_CFG_VIOLATION: u32 = 1657;
    pub const ERROR_SET_CONTEXT_DENIED: u32 = 1660;
    pub const ERROR_CROSS_PARTITION_VIOLATION: u32 = 1661;
    pub const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT: u32 = 1662;
    pub const RPC_S_INVALID_STRING_BINDING: u32 = 1700;
    pub const RPC_S_WRONG_KIND_OF_BINDING: u32 = 1701;
    pub const RPC_S_INVALID_BINDING: u32 = 1702;
    pub const RPC_S_PROTSEQ_NOT_SUPPORTED: u32 = 1703;
    pub const RPC_S_INVALID_RPC_PROTSEQ: u32 = 1704;
    pub const RPC_S_INVALID_STRING_UUID: u32 = 1705;
    pub const RPC_S_INVALID_ENDPOINT_FORMAT: u32 = 1706;
    pub const RPC_S_INVALID_NET_ADDR: u32 = 1707;
    pub const RPC_S_NO_ENDPOINT_FOUND: u32 = 1708;
    pub const RPC_S_INVALID_TIMEOUT: u32 = 1709;
    pub const RPC_S_OBJECT_NOT_FOUND: u32 = 1710;
    pub const RPC_S_ALREADY_REGISTERED: u32 = 1711;
    pub const RPC_S_TYPE_ALREADY_REGISTERED: u32 = 1712;
    pub const RPC_S_ALREADY_LISTENING: u32 = 1713;
    pub const RPC_S_NO_PROTSEQS_REGISTERED: u32 = 1714;
    pub const RPC_S_NOT_LISTENING: u32 = 1715;
    pub const RPC_S_UNKNOWN_MGR_TYPE: u32 = 1716;
    pub const RPC_S_UNKNOWN_IF: u32 = 1717;
    pub const RPC_S_NO_BINDINGS: u32 = 1718;
    pub const RPC_S_NO_PROTSEQS: u32 = 1719;
    pub const RPC_S_CANT_CREATE_ENDPOINT: u32 = 1720;
    pub const RPC_S_OUT_OF_RESOURCES: u32 = 1721;
    pub const RPC_S_SERVER_UNAVAILABLE: u32 = 1722;
    pub const RPC_S_SERVER_TOO_BUSY: u32 = 1723;
    pub const RPC_S_INVALID_NETWORK_OPTIONS: u32 = 1724;
    pub const RPC_S_NO_CALL_ACTIVE: u32 = 1725;
    pub const RPC_S_CALL_FAILED: u32 = 1726;
    pub const RPC_S_CALL_FAILED_DNE: u32 = 1727;
    pub const RPC_S_PROTOCOL_ERROR: u32 = 1728;
    pub const RPC_S_PROXY_ACCESS_DENIED: u32 = 1729;
    pub const RPC_S_UNSUPPORTED_TRANS_SYN: u32 = 1730;
    pub const RPC_S_UNSUPPORTED_TYPE: u32 = 1732;
    pub const RPC_S_INVALID_TAG: u32 = 1733;
    pub const RPC_S_INVALID_BOUND: u32 = 1734;
    pub const RPC_S_NO_ENTRY_NAME: u32 = 1735;
    pub const RPC_S_INVALID_NAME_SYNTAX: u32 = 1736;
    pub const RPC_S_UNSUPPORTED_NAME_SYNTAX: u32 = 1737;
    pub const RPC_S_UUID_NO_ADDRESS: u32 = 1739;
    pub const RPC_S_DUPLICATE_ENDPOINT: u32 = 1740;
    pub const RPC_S_UNKNOWN_AUTHN_TYPE: u32 = 1741;
    pub const RPC_S_MAX_CALLS_TOO_SMALL: u32 = 1742;
    pub const RPC_S_STRING_TOO_LONG: u32 = 1743;
    pub const RPC_S_PROTSEQ_NOT_FOUND: u32 = 1744;
    pub const RPC_S_PROCNUM_OUT_OF_RANGE: u32 = 1745;
    pub const RPC_S_BINDING_HAS_NO_AUTH: u32 = 1746;
    pub const RPC_S_UNKNOWN_AUTHN_SERVICE: u32 = 1747;
    pub const RPC_S_UNKNOWN_AUTHN_LEVEL: u32 = 1748;
    pub const RPC_S_INVALID_AUTH_IDENTITY: u32 = 1749;
    pub const RPC_S_UNKNOWN_AUTHZ_SERVICE: u32 = 1750;
    pub const EPT_S_INVALID_ENTRY: u32 = 1751;
    pub const EPT_S_CANT_PERFORM_OP: u32 = 1752;
    pub const EPT_S_NOT_REGISTERED: u32 = 1753;
    pub const RPC_S_NOTHING_TO_EXPORT: u32 = 1754;
    pub const RPC_S_INCOMPLETE_NAME: u32 = 1755;
    pub const RPC_S_INVALID_VERS_OPTION: u32 = 1756;
    pub const RPC_S_NO_MORE_MEMBERS: u32 = 1757;
    pub const RPC_S_NOT_ALL_OBJS_UNEXPORTED: u32 = 1758;
    pub const RPC_S_INTERFACE_NOT_FOUND: u32 = 1759;
    pub const RPC_S_ENTRY_ALREADY_EXISTS: u32 = 1760;
    pub const RPC_S_ENTRY_NOT_FOUND: u32 = 1761;
    pub const RPC_S_NAME_SERVICE_UNAVAILABLE: u32 = 1762;
    pub const RPC_S_INVALID_NAF_ID: u32 = 1763;
    pub const RPC_S_CANNOT_SUPPORT: u32 = 1764;
    pub const RPC_S_NO_CONTEXT_AVAILABLE: u32 = 1765;
    pub const RPC_S_INTERNAL_ERROR: u32 = 1766;
    pub const RPC_S_ZERO_DIVIDE: u32 = 1767;
    pub const RPC_S_ADDRESS_ERROR: u32 = 1768;
    pub const RPC_S_FP_DIV_ZERO: u32 = 1769;
    pub const RPC_S_FP_UNDERFLOW: u32 = 1770;
    pub const RPC_S_FP_OVERFLOW: u32 = 1771;
    pub const RPC_X_NO_MORE_ENTRIES: u32 = 1772;
    pub const RPC_X_SS_CHAR_TRANS_OPEN_FAIL: u32 = 1773;
    pub const RPC_X_SS_CHAR_TRANS_SHORT_FILE: u32 = 1774;
    pub const RPC_X_SS_IN_NULL_CONTEXT: u32 = 1775;
    pub const RPC_X_SS_CONTEXT_DAMAGED: u32 = 1777;
    pub const RPC_X_SS_HANDLES_MISMATCH: u32 = 1778;
    pub const RPC_X_SS_CANNOT_GET_CALL_HANDLE: u32 = 1779;
    pub const RPC_X_NULL_REF_POINTER: u32 = 1780;
    pub const RPC_X_ENUM_VALUE_OUT_OF_RANGE: u32 = 1781;
    pub const RPC_X_BYTE_COUNT_TOO_SMALL: u32 = 1782;
    pub const RPC_X_BAD_STUB_DATA: u32 = 1783;
    pub const ERROR_INVALID_USER_BUFFER: u32 = 1784;
    pub const ERROR_UNRECOGNIZED_MEDIA: u32 = 1785;
    pub const ERROR_NO_TRUST_LSA_SECRET: u32 = 1786;
    pub const ERROR_NO_TRUST_SAM_ACCOUNT: u32 = 1787;
    pub const ERROR_TRUSTED_DOMAIN_FAILURE: u32 = 1788;
    pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE: u32 = 1789;
    pub const ERROR_TRUST_FAILURE: u32 = 1790;
    pub const RPC_S_CALL_IN_PROGRESS: u32 = 1791;
    pub const ERROR_NETLOGON_NOT_STARTED: u32 = 1792;
    pub const ERROR_ACCOUNT_EXPIRED: u32 = 1793;
    pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES: u32 = 1794;
    pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED: u32 = 1795;
    pub const ERROR_UNKNOWN_PORT: u32 = 1796;
    pub const ERROR_UNKNOWN_PRINTER_DRIVER: u32 = 1797;
    pub const ERROR_UNKNOWN_PRINTPROCESSOR: u32 = 1798;
    pub const ERROR_INVALID_SEPARATOR_FILE: u32 = 1799;
    pub const ERROR_INVALID_PRIORITY: u32 = 1800;
    pub const ERROR_INVALID_PRINTER_NAME: u32 = 1801;
    pub const ERROR_PRINTER_ALREADY_EXISTS: u32 = 1802;
    pub const ERROR_INVALID_PRINTER_COMMAND: u32 = 1803;
    pub const ERROR_INVALID_DATATYPE: u32 = 1804;
    pub const ERROR_INVALID_ENVIRONMENT: u32 = 1805;
    pub const RPC_S_NO_MORE_BINDINGS: u32 = 1806;
    pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT: u32 = 1807;
    pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT: u32 = 1808;
    pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT: u32 = 1809;
    pub const ERROR_DOMAIN_TRUST_INCONSISTENT: u32 = 1810;
    pub const ERROR_SERVER_HAS_OPEN_HANDLES: u32 = 1811;
    pub const ERROR_RESOURCE_DATA_NOT_FOUND: u32 = 1812;
    pub const ERROR_RESOURCE_TYPE_NOT_FOUND: u32 = 1813;
    pub const ERROR_RESOURCE_NAME_NOT_FOUND: u32 = 1814;
    pub const ERROR_RESOURCE_LANG_NOT_FOUND: u32 = 1815;
    pub const ERROR_NOT_ENOUGH_QUOTA: u32 = 1816;
    pub const RPC_S_NO_INTERFACES: u32 = 1817;
    pub const RPC_S_CALL_CANCELLED: u32 = 1818;
    pub const RPC_S_BINDING_INCOMPLETE: u32 = 1819;
    pub const RPC_S_COMM_FAILURE: u32 = 1820;
    pub const RPC_S_UNSUPPORTED_AUTHN_LEVEL: u32 = 1821;
    pub const RPC_S_NO_PRINC_NAME: u32 = 1822;
    pub const RPC_S_NOT_RPC_ERROR: u32 = 1823;
    pub const RPC_S_UUID_LOCAL_ONLY: u32 = 1824;
    pub const RPC_S_SEC_PKG_ERROR: u32 = 1825;
    pub const RPC_S_NOT_CANCELLED: u32 = 1826;
    pub const RPC_X_INVALID_ES_ACTION: u32 = 1827;
    pub const RPC_X_WRONG_ES_VERSION: u32 = 1828;
    pub const RPC_X_WRONG_STUB_VERSION: u32 = 1829;
    pub const RPC_X_INVALID_PIPE_OBJECT: u32 = 1830;
    pub const RPC_X_WRONG_PIPE_ORDER: u32 = 1831;
    pub const RPC_X_WRONG_PIPE_VERSION: u32 = 1832;
    pub const RPC_S_COOKIE_AUTH_FAILED: u32 = 1833;
    pub const RPC_S_DO_NOT_DISTURB: u32 = 1834;
    pub const RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED: u32 = 1835;
    pub const RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH: u32 = 1836;
    pub const RPC_S_GROUP_MEMBER_NOT_FOUND: u32 = 1898;
    pub const EPT_S_CANT_CREATE: u32 = 1899;
    pub const RPC_S_INVALID_OBJECT: u32 = 1900;
    pub const ERROR_INVALID_TIME: u32 = 1901;
    pub const ERROR_INVALID_FORM_NAME: u32 = 1902;
    pub const ERROR_INVALID_FORM_SIZE: u32 = 1903;
    pub const ERROR_ALREADY_WAITING: u32 = 1904;
    pub const ERROR_PRINTER_DELETED: u32 = 1905;
    pub const ERROR_INVALID_PRINTER_STATE: u32 = 1906;
    pub const ERROR_PASSWORD_MUST_CHANGE: u32 = 1907;
    pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND: u32 = 1908;
    pub const ERROR_ACCOUNT_LOCKED_OUT: u32 = 1909;
    pub const OR_INVALID_OXID: u32 = 1910;
    pub const OR_INVALID_OID: u32 = 1911;
    pub const OR_INVALID_SET: u32 = 1912;
    pub const RPC_S_SEND_INCOMPLETE: u32 = 1913;
    pub const RPC_S_INVALID_ASYNC_HANDLE: u32 = 1914;
    pub const RPC_S_INVALID_ASYNC_CALL: u32 = 1915;
    pub const RPC_X_PIPE_CLOSED: u32 = 1916;
    pub const RPC_X_PIPE_DISCIPLINE_ERROR: u32 = 1917;
    pub const RPC_X_PIPE_EMPTY: u32 = 1918;
    pub const ERROR_NO_SITENAME: u32 = 1919;
    pub const ERROR_CANT_ACCESS_FILE: u32 = 1920;
    pub const ERROR_CANT_RESOLVE_FILENAME: u32 = 1921;
    pub const RPC_S_ENTRY_TYPE_MISMATCH: u32 = 1922;
    pub const RPC_S_NOT_ALL_OBJS_EXPORTED: u32 = 1923;
    pub const RPC_S_INTERFACE_NOT_EXPORTED: u32 = 1924;
    pub const RPC_S_PROFILE_NOT_ADDED: u32 = 1925;
    pub const RPC_S_PRF_ELT_NOT_ADDED: u32 = 1926;
    pub const RPC_S_PRF_ELT_NOT_REMOVED: u32 = 1927;
    pub const RPC_S_GRP_ELT_NOT_ADDED: u32 = 1928;
    pub const RPC_S_GRP_ELT_NOT_REMOVED: u32 = 1929;
    pub const ERROR_KM_DRIVER_BLOCKED: u32 = 1930;
    pub const ERROR_CONTEXT_EXPIRED: u32 = 1931;
    pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED: u32 = 1932;
    pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED: u32 = 1933;
    pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED: u32 = 1934;
    pub const ERROR_AUTHENTICATION_FIREWALL_FAILED: u32 = 1935;
    pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED: u32 = 1936;
    pub const ERROR_NTLM_BLOCKED: u32 = 1937;
    pub const ERROR_PASSWORD_CHANGE_REQUIRED: u32 = 1938;
    pub const ERROR_LOST_MODE_LOGON_RESTRICTION: u32 = 1939;
    pub const ERROR_INVALID_PIXEL_FORMAT: u32 = 2000;
    pub const ERROR_BAD_DRIVER: u32 = 2001;
    pub const ERROR_INVALID_WINDOW_STYLE: u32 = 2002;
    pub const ERROR_METAFILE_NOT_SUPPORTED: u32 = 2003;
    pub const ERROR_TRANSFORM_NOT_SUPPORTED: u32 = 2004;
    pub const ERROR_CLIPPING_NOT_SUPPORTED: u32 = 2005;
    pub const ERROR_INVALID_CMM: u32 = 2010;
    pub const ERROR_INVALID_PROFILE: u32 = 2011;
    pub const ERROR_TAG_NOT_FOUND: u32 = 2012;
    pub const ERROR_TAG_NOT_PRESENT: u32 = 2013;
    pub const ERROR_DUPLICATE_TAG: u32 = 2014;
    pub const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE: u32 = 2015;
    pub const ERROR_PROFILE_NOT_FOUND: u32 = 2016;
    pub const ERROR_INVALID_COLORSPACE: u32 = 2017;
    pub const ERROR_ICM_NOT_ENABLED: u32 = 2018;
    pub const ERROR_DELETING_ICM_XFORM: u32 = 2019;
    pub const ERROR_INVALID_TRANSFORM: u32 = 2020;
    pub const ERROR_COLORSPACE_MISMATCH: u32 = 2021;
    pub const ERROR_INVALID_COLORINDEX: u32 = 2022;
    pub const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE: u32 = 2023;
    pub const ERROR_CONNECTED_OTHER_PASSWORD: u32 = 2108;
    pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT: u32 = 2109;
    pub const ERROR_BAD_USERNAME: u32 = 2202;
    pub const ERROR_NOT_CONNECTED: u32 = 2250;
    pub const ERROR_OPEN_FILES: u32 = 2401;
    pub const ERROR_ACTIVE_CONNECTIONS: u32 = 2402;
    pub const ERROR_DEVICE_IN_USE: u32 = 2404;
    pub const ERROR_UNKNOWN_PRINT_MONITOR: u32 = 3000;
    pub const ERROR_PRINTER_DRIVER_IN_USE: u32 = 3001;
    pub const ERROR_SPOOL_FILE_NOT_FOUND: u32 = 3002;
    pub const ERROR_SPL_NO_STARTDOC: u32 = 3003;
    pub const ERROR_SPL_NO_ADDJOB: u32 = 3004;
    pub const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED: u32 = 3005;
    pub const ERROR_PRINT_MONITOR_ALREADY_INSTALLED: u32 = 3006;
    pub const ERROR_INVALID_PRINT_MONITOR: u32 = 3007;
    pub const ERROR_PRINT_MONITOR_IN_USE: u32 = 3008;
    pub const ERROR_PRINTER_HAS_JOBS_QUEUED: u32 = 3009;
    pub const ERROR_SUCCESS_REBOOT_REQUIRED: u32 = 3010;
    pub const ERROR_SUCCESS_RESTART_REQUIRED: u32 = 3011;
    pub const ERROR_PRINTER_NOT_FOUND: u32 = 3012;
    pub const ERROR_PRINTER_DRIVER_WARNED: u32 = 3013;
    pub const ERROR_PRINTER_DRIVER_BLOCKED: u32 = 3014;
    pub const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE: u32 = 3015;
    pub const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND: u32 = 3016;
    pub const ERROR_FAIL_REBOOT_REQUIRED: u32 = 3017;
    pub const ERROR_FAIL_REBOOT_INITIATED: u32 = 3018;
    pub const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED: u32 = 3019;
    pub const ERROR_PRINT_JOB_RESTART_REQUIRED: u32 = 3020;
    pub const ERROR_INVALID_PRINTER_DRIVER_MANIFEST: u32 = 3021;
    pub const ERROR_PRINTER_NOT_SHAREABLE: u32 = 3022;
    pub const ERROR_REQUEST_PAUSED: u32 = 3050;
    pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED: u32 = 3060;
    pub const ERROR_APPEXEC_HANDLE_INVALIDATED: u32 = 3061;
    pub const ERROR_APPEXEC_INVALID_HOST_GENERATION: u32 = 3062;
    pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION: u32 = 3063;
    pub const ERROR_APPEXEC_INVALID_HOST_STATE: u32 = 3064;
    pub const ERROR_APPEXEC_NO_DONOR: u32 = 3065;
    pub const ERROR_APPEXEC_HOST_ID_MISMATCH: u32 = 3066;
    pub const ERROR_APPEXEC_UNKNOWN_USER: u32 = 3067;
    pub const ERROR_IO_REISSUE_AS_CACHED: u32 = 3950;
    pub const ERROR_WINS_INTERNAL: u32 = 4000;
    pub const ERROR_CAN_NOT_DEL_LOCAL_WINS: u32 = 4001;
    pub const ERROR_STATIC_INIT: u32 = 4002;
    pub const ERROR_INC_BACKUP: u32 = 4003;
    pub const ERROR_FULL_BACKUP: u32 = 4004;
    pub const ERROR_REC_NON_EXISTENT: u32 = 4005;
    pub const ERROR_RPL_NOT_ALLOWED: u32 = 4006;
    pub const PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED: u32 = 4050;
    pub const PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO: u32 = 4051;
    pub const PEERDIST_ERROR_MISSING_DATA: u32 = 4052;
    pub const PEERDIST_ERROR_NO_MORE: u32 = 4053;
    pub const PEERDIST_ERROR_NOT_INITIALIZED: u32 = 4054;
    pub const PEERDIST_ERROR_ALREADY_INITIALIZED: u32 = 4055;
    pub const PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS: u32 = 4056;
    pub const PEERDIST_ERROR_INVALIDATED: u32 = 4057;
    pub const PEERDIST_ERROR_ALREADY_EXISTS: u32 = 4058;
    pub const PEERDIST_ERROR_OPERATION_NOTFOUND: u32 = 4059;
    pub const PEERDIST_ERROR_ALREADY_COMPLETED: u32 = 4060;
    pub const PEERDIST_ERROR_OUT_OF_BOUNDS: u32 = 4061;
    pub const PEERDIST_ERROR_VERSION_UNSUPPORTED: u32 = 4062;
    pub const PEERDIST_ERROR_INVALID_CONFIGURATION: u32 = 4063;
    pub const PEERDIST_ERROR_NOT_LICENSED: u32 = 4064;
    pub const PEERDIST_ERROR_SERVICE_UNAVAILABLE: u32 = 4065;
    pub const PEERDIST_ERROR_TRUST_FAILURE: u32 = 4066;
    pub const ERROR_DHCP_ADDRESS_CONFLICT: u32 = 4100;
    pub const ERROR_WMI_GUID_NOT_FOUND: u32 = 4200;
    pub const ERROR_WMI_INSTANCE_NOT_FOUND: u32 = 4201;
    pub const ERROR_WMI_ITEMID_NOT_FOUND: u32 = 4202;
    pub const ERROR_WMI_TRY_AGAIN: u32 = 4203;
    pub const ERROR_WMI_DP_NOT_FOUND: u32 = 4204;
    pub const ERROR_WMI_UNRESOLVED_INSTANCE_REF: u32 = 4205;
    pub const ERROR_WMI_ALREADY_ENABLED: u32 = 4206;
    pub const ERROR_WMI_GUID_DISCONNECTED: u32 = 4207;
    pub const ERROR_WMI_SERVER_UNAVAILABLE: u32 = 4208;
    pub const ERROR_WMI_DP_FAILED: u32 = 4209;
    pub const ERROR_WMI_INVALID_MOF: u32 = 4210;
    pub const ERROR_WMI_INVALID_REGINFO: u32 = 4211;
    pub const ERROR_WMI_ALREADY_DISABLED: u32 = 4212;
    pub const ERROR_WMI_READ_ONLY: u32 = 4213;
    pub const ERROR_WMI_SET_FAILURE: u32 = 4214;
    pub const ERROR_NOT_APPCONTAINER: u32 = 4250;
    pub const ERROR_APPCONTAINER_REQUIRED: u32 = 4251;
    pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER: u32 = 4252;
    pub const ERROR_INVALID_PACKAGE_SID_LENGTH: u32 = 4253;
    pub const ERROR_INVALID_MEDIA: u32 = 4300;
    pub const ERROR_INVALID_LIBRARY: u32 = 4301;
    pub const ERROR_INVALID_MEDIA_POOL: u32 = 4302;
    pub const ERROR_DRIVE_MEDIA_MISMATCH: u32 = 4303;
    pub const ERROR_MEDIA_OFFLINE: u32 = 4304;
    pub const ERROR_LIBRARY_OFFLINE: u32 = 4305;
    pub const ERROR_EMPTY: u32 = 4306;
    pub const ERROR_NOT_EMPTY: u32 = 4307;
    pub const ERROR_MEDIA_UNAVAILABLE: u32 = 4308;
    pub const ERROR_RESOURCE_DISABLED: u32 = 4309;
    pub const ERROR_INVALID_CLEANER: u32 = 4310;
    pub const ERROR_UNABLE_TO_CLEAN: u32 = 4311;
    pub const ERROR_OBJECT_NOT_FOUND: u32 = 4312;
    pub const ERROR_DATABASE_FAILURE: u32 = 4313;
    pub const ERROR_DATABASE_FULL: u32 = 4314;
    pub const ERROR_MEDIA_INCOMPATIBLE: u32 = 4315;
    pub const ERROR_RESOURCE_NOT_PRESENT: u32 = 4316;
    pub const ERROR_INVALID_OPERATION: u32 = 4317;
    pub const ERROR_MEDIA_NOT_AVAILABLE: u32 = 4318;
    pub const ERROR_DEVICE_NOT_AVAILABLE: u32 = 4319;
    pub const ERROR_REQUEST_REFUSED: u32 = 4320;
    pub const ERROR_INVALID_DRIVE_OBJECT: u32 = 4321;
    pub const ERROR_LIBRARY_FULL: u32 = 4322;
    pub const ERROR_MEDIUM_NOT_ACCESSIBLE: u32 = 4323;
    pub const ERROR_UNABLE_TO_LOAD_MEDIUM: u32 = 4324;
    pub const ERROR_UNABLE_TO_INVENTORY_DRIVE: u32 = 4325;
    pub const ERROR_UNABLE_TO_INVENTORY_SLOT: u32 = 4326;
    pub const ERROR_UNABLE_TO_INVENTORY_TRANSPORT: u32 = 4327;
    pub const ERROR_TRANSPORT_FULL: u32 = 4328;
    pub const ERROR_CONTROLLING_IEPORT: u32 = 4329;
    pub const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA: u32 = 4330;
    pub const ERROR_CLEANER_SLOT_SET: u32 = 4331;
    pub const ERROR_CLEANER_SLOT_NOT_SET: u32 = 4332;
    pub const ERROR_CLEANER_CARTRIDGE_SPENT: u32 = 4333;
    pub const ERROR_UNEXPECTED_OMID: u32 = 4334;
    pub const ERROR_CANT_DELETE_LAST_ITEM: u32 = 4335;
    pub const ERROR_MESSAGE_EXCEEDS_MAX_SIZE: u32 = 4336;
    pub const ERROR_VOLUME_CONTAINS_SYS_FILES: u32 = 4337;
    pub const ERROR_INDIGENOUS_TYPE: u32 = 4338;
    pub const ERROR_NO_SUPPORTING_DRIVES: u32 = 4339;
    pub const ERROR_CLEANER_CARTRIDGE_INSTALLED: u32 = 4340;
    pub const ERROR_IEPORT_FULL: u32 = 4341;
    pub const ERROR_FILE_OFFLINE: u32 = 4350;
    pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE: u32 = 4351;
    pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR: u32 = 4352;
    pub const ERROR_NOT_A_REPARSE_POINT: u32 = 4390;
    pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT: u32 = 4391;
    pub const ERROR_INVALID_REPARSE_DATA: u32 = 4392;
    pub const ERROR_REPARSE_TAG_INVALID: u32 = 4393;
    pub const ERROR_REPARSE_TAG_MISMATCH: u32 = 4394;
    pub const ERROR_REPARSE_POINT_ENCOUNTERED: u32 = 4395;
    pub const ERROR_APP_DATA_NOT_FOUND: u32 = 4400;
    pub const ERROR_APP_DATA_EXPIRED: u32 = 4401;
    pub const ERROR_APP_DATA_CORRUPT: u32 = 4402;
    pub const ERROR_APP_DATA_LIMIT_EXCEEDED: u32 = 4403;
    pub const ERROR_APP_DATA_REBOOT_REQUIRED: u32 = 4404;
    pub const ERROR_SECUREBOOT_ROLLBACK_DETECTED: u32 = 4420;
    pub const ERROR_SECUREBOOT_POLICY_VIOLATION: u32 = 4421;
    pub const ERROR_SECUREBOOT_INVALID_POLICY: u32 = 4422;
    pub const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND: u32 = 4423;
    pub const ERROR_SECUREBOOT_POLICY_NOT_SIGNED: u32 = 4424;
    pub const ERROR_SECUREBOOT_NOT_ENABLED: u32 = 4425;
    pub const ERROR_SECUREBOOT_FILE_REPLACED: u32 = 4426;
    pub const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED: u32 = 4427;
    pub const ERROR_SECUREBOOT_POLICY_UNKNOWN: u32 = 4428;
    pub const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION: u32 = 4429;
    pub const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH: u32 = 4430;
    pub const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED: u32 = 4431;
    pub const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH: u32 = 4432;
    pub const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING: u32 = 4433;
    pub const ERROR_SECUREBOOT_NOT_BASE_POLICY: u32 = 4434;
    pub const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY: u32 = 4435;
    pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED: u32 = 4440;
    pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED: u32 = 4441;
    pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED: u32 = 4442;
    pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED: u32 = 4443;
    pub const ERROR_ALREADY_HAS_STREAM_ID: u32 = 4444;
    pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED: u32 = 4445;
    pub const ERROR_WOF_WIM_HEADER_CORRUPT: u32 = 4446;
    pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT: u32 = 4447;
    pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT: u32 = 4448;
    pub const ERROR_VOLUME_NOT_SIS_ENABLED: u32 = 4500;
    pub const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED: u32 = 4550;
    pub const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION: u32 = 4551;
    pub const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY: u32 = 4552;
    pub const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED: u32 = 4553;
    pub const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES: u32 = 4554;
    pub const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED: u32 = 4555;
    pub const ERROR_VSM_NOT_INITIALIZED: u32 = 4560;
    pub const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE: u32 = 4561;
    pub const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED: u32 = 4570;
    pub const ERROR_PLATFORM_MANIFEST_INVALID: u32 = 4571;
    pub const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED: u32 = 4572;
    pub const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED: u32 = 4573;
    pub const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND: u32 = 4574;
    pub const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE: u32 = 4575;
    pub const ERROR_PLATFORM_MANIFEST_NOT_SIGNED: u32 = 4576;
    pub const ERROR_DEPENDENT_RESOURCE_EXISTS: u32 = 5001;
    pub const ERROR_DEPENDENCY_NOT_FOUND: u32 = 5002;
    pub const ERROR_DEPENDENCY_ALREADY_EXISTS: u32 = 5003;
    pub const ERROR_RESOURCE_NOT_ONLINE: u32 = 5004;
    pub const ERROR_HOST_NODE_NOT_AVAILABLE: u32 = 5005;
    pub const ERROR_RESOURCE_NOT_AVAILABLE: u32 = 5006;
    pub const ERROR_RESOURCE_NOT_FOUND: u32 = 5007;
    pub const ERROR_SHUTDOWN_CLUSTER: u32 = 5008;
    pub const ERROR_CANT_EVICT_ACTIVE_NODE: u32 = 5009;
    pub const ERROR_OBJECT_ALREADY_EXISTS: u32 = 5010;
    pub const ERROR_OBJECT_IN_LIST: u32 = 5011;
    pub const ERROR_GROUP_NOT_AVAILABLE: u32 = 5012;
    pub const ERROR_GROUP_NOT_FOUND: u32 = 5013;
    pub const ERROR_GROUP_NOT_ONLINE: u32 = 5014;
    pub const ERROR_HOST_NODE_NOT_RESOURCE_OWNER: u32 = 5015;
    pub const ERROR_HOST_NODE_NOT_GROUP_OWNER: u32 = 5016;
    pub const ERROR_RESMON_CREATE_FAILED: u32 = 5017;
    pub const ERROR_RESMON_ONLINE_FAILED: u32 = 5018;
    pub const ERROR_RESOURCE_ONLINE: u32 = 5019;
    pub const ERROR_QUORUM_RESOURCE: u32 = 5020;
    pub const ERROR_NOT_QUORUM_CAPABLE: u32 = 5021;
    pub const ERROR_CLUSTER_SHUTTING_DOWN: u32 = 5022;
    pub const ERROR_INVALID_STATE: u32 = 5023;
    pub const ERROR_RESOURCE_PROPERTIES_STORED: u32 = 5024;
    pub const ERROR_NOT_QUORUM_CLASS: u32 = 5025;
    pub const ERROR_CORE_RESOURCE: u32 = 5026;
    pub const ERROR_QUORUM_RESOURCE_ONLINE_FAILED: u32 = 5027;
    pub const ERROR_QUORUMLOG_OPEN_FAILED: u32 = 5028;
    pub const ERROR_CLUSTERLOG_CORRUPT: u32 = 5029;
    pub const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE: u32 = 5030;
    pub const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE: u32 = 5031;
    pub const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND: u32 = 5032;
    pub const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE: u32 = 5033;
    pub const ERROR_QUORUM_OWNER_ALIVE: u32 = 5034;
    pub const ERROR_NETWORK_NOT_AVAILABLE: u32 = 5035;
    pub const ERROR_NODE_NOT_AVAILABLE: u32 = 5036;
    pub const ERROR_ALL_NODES_NOT_AVAILABLE: u32 = 5037;
    pub const ERROR_RESOURCE_FAILED: u32 = 5038;
    pub const ERROR_CLUSTER_INVALID_NODE: u32 = 5039;
    pub const ERROR_CLUSTER_NODE_EXISTS: u32 = 5040;
    pub const ERROR_CLUSTER_JOIN_IN_PROGRESS: u32 = 5041;
    pub const ERROR_CLUSTER_NODE_NOT_FOUND: u32 = 5042;
    pub const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND: u32 = 5043;
    pub const ERROR_CLUSTER_NETWORK_EXISTS: u32 = 5044;
    pub const ERROR_CLUSTER_NETWORK_NOT_FOUND: u32 = 5045;
    pub const ERROR_CLUSTER_NETINTERFACE_EXISTS: u32 = 5046;
    pub const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND: u32 = 5047;
    pub const ERROR_CLUSTER_INVALID_REQUEST: u32 = 5048;
    pub const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER: u32 = 5049;
    pub const ERROR_CLUSTER_NODE_DOWN: u32 = 5050;
    pub const ERROR_CLUSTER_NODE_UNREACHABLE: u32 = 5051;
    pub const ERROR_CLUSTER_NODE_NOT_MEMBER: u32 = 5052;
    pub const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS: u32 = 5053;
    pub const ERROR_CLUSTER_INVALID_NETWORK: u32 = 5054;
    pub const ERROR_CLUSTER_NODE_UP: u32 = 5056;
    pub const ERROR_CLUSTER_IPADDR_IN_USE: u32 = 5057;
    pub const ERROR_CLUSTER_NODE_NOT_PAUSED: u32 = 5058;
    pub const ERROR_CLUSTER_NO_SECURITY_CONTEXT: u32 = 5059;
    pub const ERROR_CLUSTER_NETWORK_NOT_INTERNAL: u32 = 5060;
    pub const ERROR_CLUSTER_NODE_ALREADY_UP: u32 = 5061;
    pub const ERROR_CLUSTER_NODE_ALREADY_DOWN: u32 = 5062;
    pub const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE: u32 = 5063;
    pub const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE: u32 = 5064;
    pub const ERROR_CLUSTER_NODE_ALREADY_MEMBER: u32 = 5065;
    pub const ERROR_CLUSTER_LAST_INTERNAL_NETWORK: u32 = 5066;
    pub const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS: u32 = 5067;
    pub const ERROR_INVALID_OPERATION_ON_QUORUM: u32 = 5068;
    pub const ERROR_DEPENDENCY_NOT_ALLOWED: u32 = 5069;
    pub const ERROR_CLUSTER_NODE_PAUSED: u32 = 5070;
    pub const ERROR_NODE_CANT_HOST_RESOURCE: u32 = 5071;
    pub const ERROR_CLUSTER_NODE_NOT_READY: u32 = 5072;
    pub const ERROR_CLUSTER_NODE_SHUTTING_DOWN: u32 = 5073;
    pub const ERROR_CLUSTER_JOIN_ABORTED: u32 = 5074;
    pub const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS: u32 = 5075;
    pub const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED: u32 = 5076;
    pub const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED: u32 = 5077;
    pub const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND: u32 = 5078;
    pub const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED: u32 = 5079;
    pub const ERROR_CLUSTER_RESNAME_NOT_FOUND: u32 = 5080;
    pub const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED: u32 = 5081;
    pub const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST: u32 = 5082;
    pub const ERROR_CLUSTER_DATABASE_SEQMISMATCH: u32 = 5083;
    pub const ERROR_RESMON_INVALID_STATE: u32 = 5084;
    pub const ERROR_CLUSTER_GUM_NOT_LOCKER: u32 = 5085;
    pub const ERROR_QUORUM_DISK_NOT_FOUND: u32 = 5086;
    pub const ERROR_DATABASE_BACKUP_CORRUPT: u32 = 5087;
    pub const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT: u32 = 5088;
    pub const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE: u32 = 5089;
    pub const ERROR_NO_ADMIN_ACCESS_POINT: u32 = 5090;
    pub const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE: u32 = 5890;
    pub const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND: u32 = 5891;
    pub const ERROR_CLUSTER_MEMBERSHIP_HALT: u32 = 5892;
    pub const ERROR_CLUSTER_INSTANCE_ID_MISMATCH: u32 = 5893;
    pub const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP: u32 = 5894;
    pub const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH: u32 = 5895;
    pub const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP: u32 = 5896;
    pub const ERROR_CLUSTER_PARAMETER_MISMATCH: u32 = 5897;
    pub const ERROR_NODE_CANNOT_BE_CLUSTERED: u32 = 5898;
    pub const ERROR_CLUSTER_WRONG_OS_VERSION: u32 = 5899;
    pub const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME: u32 = 5900;
    pub const ERROR_CLUSCFG_ALREADY_COMMITTED: u32 = 5901;
    pub const ERROR_CLUSCFG_ROLLBACK_FAILED: u32 = 5902;
    pub const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT: u32 = 5903;
    pub const ERROR_CLUSTER_OLD_VERSION: u32 = 5904;
    pub const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME: u32 = 5905;
    pub const ERROR_CLUSTER_NO_NET_ADAPTERS: u32 = 5906;
    pub const ERROR_CLUSTER_POISONED: u32 = 5907;
    pub const ERROR_CLUSTER_GROUP_MOVING: u32 = 5908;
    pub const ERROR_CLUSTER_RESOURCE_TYPE_BUSY: u32 = 5909;
    pub const ERROR_RESOURCE_CALL_TIMED_OUT: u32 = 5910;
    pub const ERROR_INVALID_CLUSTER_IPV6_ADDRESS: u32 = 5911;
    pub const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION: u32 = 5912;
    pub const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS: u32 = 5913;
    pub const ERROR_CLUSTER_PARTIAL_SEND: u32 = 5914;
    pub const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION: u32 = 5915;
    pub const ERROR_CLUSTER_INVALID_STRING_TERMINATION: u32 = 5916;
    pub const ERROR_CLUSTER_INVALID_STRING_FORMAT: u32 = 5917;
    pub const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS: u32 = 5918;
    pub const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS: u32 = 5919;
    pub const ERROR_CLUSTER_NULL_DATA: u32 = 5920;
    pub const ERROR_CLUSTER_PARTIAL_READ: u32 = 5921;
    pub const ERROR_CLUSTER_PARTIAL_WRITE: u32 = 5922;
    pub const ERROR_CLUSTER_CANT_DESERIALIZE_DATA: u32 = 5923;
    pub const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT: u32 = 5924;
    pub const ERROR_CLUSTER_NO_QUORUM: u32 = 5925;
    pub const ERROR_CLUSTER_INVALID_IPV6_NETWORK: u32 = 5926;
    pub const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK: u32 = 5927;
    pub const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP: u32 = 5928;
    pub const ERROR_DEPENDENCY_TREE_TOO_COMPLEX: u32 = 5929;
    pub const ERROR_EXCEPTION_IN_RESOURCE_CALL: u32 = 5930;
    pub const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION: u32 = 5931;
    pub const ERROR_CLUSTER_NOT_INSTALLED: u32 = 5932;
    pub const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE: u32 = 5933;
    pub const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER: u32 = 5934;
    pub const ERROR_CLUSTER_TOO_MANY_NODES: u32 = 5935;
    pub const ERROR_CLUSTER_OBJECT_ALREADY_USED: u32 = 5936;
    pub const ERROR_NONCORE_GROUPS_FOUND: u32 = 5937;
    pub const ERROR_FILE_SHARE_RESOURCE_CONFLICT: u32 = 5938;
    pub const ERROR_CLUSTER_EVICT_INVALID_REQUEST: u32 = 5939;
    pub const ERROR_CLUSTER_SINGLETON_RESOURCE: u32 = 5940;
    pub const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE: u32 = 5941;
    pub const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED: u32 = 5942;
    pub const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR: u32 = 5943;
    pub const ERROR_CLUSTER_GROUP_BUSY: u32 = 5944;
    pub const ERROR_CLUSTER_NOT_SHARED_VOLUME: u32 = 5945;
    pub const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR: u32 = 5946;
    pub const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE: u32 = 5947;
    pub const ERROR_CLUSTER_USE_SHARED_VOLUMES_API: u32 = 5948;
    pub const ERROR_CLUSTER_BACKUP_IN_PROGRESS: u32 = 5949;
    pub const ERROR_NON_CSV_PATH: u32 = 5950;
    pub const ERROR_CSV_VOLUME_NOT_LOCAL: u32 = 5951;
    pub const ERROR_CLUSTER_WATCHDOG_TERMINATING: u32 = 5952;
    pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES: u32 = 5953;
    pub const ERROR_CLUSTER_INVALID_NODE_WEIGHT: u32 = 5954;
    pub const ERROR_CLUSTER_RESOURCE_VETOED_CALL: u32 = 5955;
    pub const ERROR_RESMON_SYSTEM_RESOURCES_LACKING: u32 = 5956;
    pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION: u32 = 5957;
    pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE: u32 = 5958;
    pub const ERROR_CLUSTER_GROUP_QUEUED: u32 = 5959;
    pub const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS: u32 = 5960;
    pub const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED: u32 = 5961;
    pub const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS: u32 = 5962;
    pub const ERROR_CLUSTER_DISK_NOT_CONNECTED: u32 = 5963;
    pub const ERROR_DISK_NOT_CSV_CAPABLE: u32 = 5964;
    pub const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE: u32 = 5965;
    pub const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED: u32 = 5966;
    pub const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED: u32 = 5967;
    pub const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES: u32 = 5968;
    pub const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES: u32 = 5969;
    pub const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE: u32 = 5970;
    pub const ERROR_CLUSTER_AFFINITY_CONFLICT: u32 = 5971;
    pub const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE: u32 = 5972;
    pub const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS: u32 = 5973;
    pub const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED: u32 = 5974;
    pub const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED: u32 = 5975;
    pub const ERROR_CLUSTER_UPGRADE_IN_PROGRESS: u32 = 5976;
    pub const ERROR_CLUSTER_UPGRADE_INCOMPLETE: u32 = 5977;
    pub const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD: u32 = 5978;
    pub const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT: u32 = 5979;
    pub const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER: u32 = 5980;
    pub const ERROR_CLUSTER_RESOURCE_NOT_MONITORED: u32 = 5981;
    pub const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED: u32 = 5982;
    pub const ERROR_CLUSTER_RESOURCE_IS_REPLICATED: u32 = 5983;
    pub const ERROR_CLUSTER_NODE_ISOLATED: u32 = 5984;
    pub const ERROR_CLUSTER_NODE_QUARANTINED: u32 = 5985;
    pub const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED: u32 = 5986;
    pub const ERROR_CLUSTER_SPACE_DEGRADED: u32 = 5987;
    pub const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED: u32 = 5988;
    pub const ERROR_CLUSTER_CSV_INVALID_HANDLE: u32 = 5989;
    pub const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR: u32 = 5990;
    pub const ERROR_GROUPSET_NOT_AVAILABLE: u32 = 5991;
    pub const ERROR_GROUPSET_NOT_FOUND: u32 = 5992;
    pub const ERROR_GROUPSET_CANT_PROVIDE: u32 = 5993;
    pub const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND: u32 = 5994;
    pub const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY: u32 = 5995;
    pub const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION: u32 = 5996;
    pub const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS: u32 = 5997;
    pub const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME: u32 = 5998;
    pub const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE: u32 = 5999;
    pub const ERROR_ENCRYPTION_FAILED: u32 = 6000;
    pub const ERROR_DECRYPTION_FAILED: u32 = 6001;
    pub const ERROR_FILE_ENCRYPTED: u32 = 6002;
    pub const ERROR_NO_RECOVERY_POLICY: u32 = 6003;
    pub const ERROR_NO_EFS: u32 = 6004;
    pub const ERROR_WRONG_EFS: u32 = 6005;
    pub const ERROR_NO_USER_KEYS: u32 = 6006;
    pub const ERROR_FILE_NOT_ENCRYPTED: u32 = 6007;
    pub const ERROR_NOT_EXPORT_FORMAT: u32 = 6008;
    pub const ERROR_FILE_READ_ONLY: u32 = 6009;
    pub const ERROR_DIR_EFS_DISALLOWED: u32 = 6010;
    pub const ERROR_EFS_SERVER_NOT_TRUSTED: u32 = 6011;
    pub const ERROR_BAD_RECOVERY_POLICY: u32 = 6012;
    pub const ERROR_EFS_ALG_BLOB_TOO_BIG: u32 = 6013;
    pub const ERROR_VOLUME_NOT_SUPPORT_EFS: u32 = 6014;
    pub const ERROR_EFS_DISABLED: u32 = 6015;
    pub const ERROR_EFS_VERSION_NOT_SUPPORT: u32 = 6016;
    pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE: u32 = 6017;
    pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER: u32 = 6018;
    pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE: u32 = 6019;
    pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE: u32 = 6020;
    pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE: u32 = 6021;
    pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION: u32 = 6022;
    pub const ERROR_WIP_ENCRYPTION_FAILED: u32 = 6023;
    pub const ERROR_NO_BROWSER_SERVERS_FOUND: u32 = 6118;
    pub const SCHED_E_SERVICE_NOT_LOCALSYSTEM: u32 = 6200;
    pub const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM: u32 = 6250;
    pub const ERROR_LOG_SECTOR_INVALID: u32 = 6600;
    pub const ERROR_LOG_SECTOR_PARITY_INVALID: u32 = 6601;
    pub const ERROR_LOG_SECTOR_REMAPPED: u32 = 6602;
    pub const ERROR_LOG_BLOCK_INCOMPLETE: u32 = 6603;
    pub const ERROR_LOG_INVALID_RANGE: u32 = 6604;
    pub const ERROR_LOG_BLOCKS_EXHAUSTED: u32 = 6605;
    pub const ERROR_LOG_READ_CONTEXT_INVALID: u32 = 6606;
    pub const ERROR_LOG_RESTART_INVALID: u32 = 6607;
    pub const ERROR_LOG_BLOCK_VERSION: u32 = 6608;
    pub const ERROR_LOG_BLOCK_INVALID: u32 = 6609;
    pub const ERROR_LOG_READ_MODE_INVALID: u32 = 6610;
    pub const ERROR_LOG_NO_RESTART: u32 = 6611;
    pub const ERROR_LOG_METADATA_CORRUPT: u32 = 6612;
    pub const ERROR_LOG_METADATA_INVALID: u32 = 6613;
    pub const ERROR_LOG_METADATA_INCONSISTENT: u32 = 6614;
    pub const ERROR_LOG_RESERVATION_INVALID: u32 = 6615;
    pub const ERROR_LOG_CANT_DELETE: u32 = 6616;
    pub const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED: u32 = 6617;
    pub const ERROR_LOG_START_OF_LOG: u32 = 6618;
    pub const ERROR_LOG_POLICY_ALREADY_INSTALLED: u32 = 6619;
    pub const ERROR_LOG_POLICY_NOT_INSTALLED: u32 = 6620;
    pub const ERROR_LOG_POLICY_INVALID: u32 = 6621;
    pub const ERROR_LOG_POLICY_CONFLICT: u32 = 6622;
    pub const ERROR_LOG_PINNED_ARCHIVE_TAIL: u32 = 6623;
    pub const ERROR_LOG_RECORD_NONEXISTENT: u32 = 6624;
    pub const ERROR_LOG_RECORDS_RESERVED_INVALID: u32 = 6625;
    pub const ERROR_LOG_SPACE_RESERVED_INVALID: u32 = 6626;
    pub const ERROR_LOG_TAIL_INVALID: u32 = 6627;
    pub const ERROR_LOG_FULL: u32 = 6628;
    pub const ERROR_COULD_NOT_RESIZE_LOG: u32 = 6629;
    pub const ERROR_LOG_MULTIPLEXED: u32 = 6630;
    pub const ERROR_LOG_DEDICATED: u32 = 6631;
    pub const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS: u32 = 6632;
    pub const ERROR_LOG_ARCHIVE_IN_PROGRESS: u32 = 6633;
    pub const ERROR_LOG_EPHEMERAL: u32 = 6634;
    pub const ERROR_LOG_NOT_ENOUGH_CONTAINERS: u32 = 6635;
    pub const ERROR_LOG_CLIENT_ALREADY_REGISTERED: u32 = 6636;
    pub const ERROR_LOG_CLIENT_NOT_REGISTERED: u32 = 6637;
    pub const ERROR_LOG_FULL_HANDLER_IN_PROGRESS: u32 = 6638;
    pub const ERROR_LOG_CONTAINER_READ_FAILED: u32 = 6639;
    pub const ERROR_LOG_CONTAINER_WRITE_FAILED: u32 = 6640;
    pub const ERROR_LOG_CONTAINER_OPEN_FAILED: u32 = 6641;
    pub const ERROR_LOG_CONTAINER_STATE_INVALID: u32 = 6642;
    pub const ERROR_LOG_STATE_INVALID: u32 = 6643;
    pub const ERROR_LOG_PINNED: u32 = 6644;
    pub const ERROR_LOG_METADATA_FLUSH_FAILED: u32 = 6645;
    pub const ERROR_LOG_INCONSISTENT_SECURITY: u32 = 6646;
    pub const ERROR_LOG_APPENDED_FLUSH_FAILED: u32 = 6647;
    pub const ERROR_LOG_PINNED_RESERVATION: u32 = 6648;
    pub const ERROR_INVALID_TRANSACTION: u32 = 6700;
    pub const ERROR_TRANSACTION_NOT_ACTIVE: u32 = 6701;
    pub const ERROR_TRANSACTION_REQUEST_NOT_VALID: u32 = 6702;
    pub const ERROR_TRANSACTION_NOT_REQUESTED: u32 = 6703;
    pub const ERROR_TRANSACTION_ALREADY_ABORTED: u32 = 6704;
    pub const ERROR_TRANSACTION_ALREADY_COMMITTED: u32 = 6705;
    pub const ERROR_TM_INITIALIZATION_FAILED: u32 = 6706;
    pub const ERROR_RESOURCEMANAGER_READ_ONLY: u32 = 6707;
    pub const ERROR_TRANSACTION_NOT_JOINED: u32 = 6708;
    pub const ERROR_TRANSACTION_SUPERIOR_EXISTS: u32 = 6709;
    pub const ERROR_CRM_PROTOCOL_ALREADY_EXISTS: u32 = 6710;
    pub const ERROR_TRANSACTION_PROPAGATION_FAILED: u32 = 6711;
    pub const ERROR_CRM_PROTOCOL_NOT_FOUND: u32 = 6712;
    pub const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER: u32 = 6713;
    pub const ERROR_CURRENT_TRANSACTION_NOT_VALID: u32 = 6714;
    pub const ERROR_TRANSACTION_NOT_FOUND: u32 = 6715;
    pub const ERROR_RESOURCEMANAGER_NOT_FOUND: u32 = 6716;
    pub const ERROR_ENLISTMENT_NOT_FOUND: u32 = 6717;
    pub const ERROR_TRANSACTIONMANAGER_NOT_FOUND: u32 = 6718;
    pub const ERROR_TRANSACTIONMANAGER_NOT_ONLINE: u32 = 6719;
    pub const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION: u32 = 6720;
    pub const ERROR_TRANSACTION_NOT_ROOT: u32 = 6721;
    pub const ERROR_TRANSACTION_OBJECT_EXPIRED: u32 = 6722;
    pub const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED: u32 = 6723;
    pub const ERROR_TRANSACTION_RECORD_TOO_LONG: u32 = 6724;
    pub const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED: u32 = 6725;
    pub const ERROR_TRANSACTION_INTEGRITY_VIOLATED: u32 = 6726;
    pub const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH: u32 = 6727;
    pub const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT: u32 = 6728;
    pub const ERROR_TRANSACTION_MUST_WRITETHROUGH: u32 = 6729;
    pub const ERROR_TRANSACTION_NO_SUPERIOR: u32 = 6730;
    pub const ERROR_HEURISTIC_DAMAGE_POSSIBLE: u32 = 6731;
    pub const ERROR_TRANSACTIONAL_CONFLICT: u32 = 6800;
    pub const ERROR_RM_NOT_ACTIVE: u32 = 6801;
    pub const ERROR_RM_METADATA_CORRUPT: u32 = 6802;
    pub const ERROR_DIRECTORY_NOT_RM: u32 = 6803;
    pub const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE: u32 = 6805;
    pub const ERROR_LOG_RESIZE_INVALID_SIZE: u32 = 6806;
    pub const ERROR_OBJECT_NO_LONGER_EXISTS: u32 = 6807;
    pub const ERROR_STREAM_MINIVERSION_NOT_FOUND: u32 = 6808;
    pub const ERROR_STREAM_MINIVERSION_NOT_VALID: u32 = 6809;
    pub const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION: u32 = 6810;
    pub const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT: u32 = 6811;
    pub const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS: u32 = 6812;
    pub const ERROR_REMOTE_FILE_VERSION_MISMATCH: u32 = 6814;
    pub const ERROR_HANDLE_NO_LONGER_VALID: u32 = 6815;
    pub const ERROR_NO_TXF_METADATA: u32 = 6816;
    pub const ERROR_LOG_CORRUPTION_DETECTED: u32 = 6817;
    pub const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN: u32 = 6818;
    pub const ERROR_RM_DISCONNECTED: u32 = 6819;
    pub const ERROR_ENLISTMENT_NOT_SUPERIOR: u32 = 6820;
    pub const ERROR_RECOVERY_NOT_NEEDED: u32 = 6821;
    pub const ERROR_RM_ALREADY_STARTED: u32 = 6822;
    pub const ERROR_FILE_IDENTITY_NOT_PERSISTENT: u32 = 6823;
    pub const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY: u32 = 6824;
    pub const ERROR_CANT_CROSS_RM_BOUNDARY: u32 = 6825;
    pub const ERROR_TXF_DIR_NOT_EMPTY: u32 = 6826;
    pub const ERROR_INDOUBT_TRANSACTIONS_EXIST: u32 = 6827;
    pub const ERROR_TM_VOLATILE: u32 = 6828;
    pub const ERROR_ROLLBACK_TIMER_EXPIRED: u32 = 6829;
    pub const ERROR_TXF_ATTRIBUTE_CORRUPT: u32 = 6830;
    pub const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION: u32 = 6831;
    pub const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED: u32 = 6832;
    pub const ERROR_LOG_GROWTH_FAILED: u32 = 6833;
    pub const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE: u32 = 6834;
    pub const ERROR_TXF_METADATA_ALREADY_PRESENT: u32 = 6835;
    pub const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET: u32 = 6836;
    pub const ERROR_TRANSACTION_REQUIRED_PROMOTION: u32 = 6837;
    pub const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION: u32 = 6838;
    pub const ERROR_TRANSACTIONS_NOT_FROZEN: u32 = 6839;
    pub const ERROR_TRANSACTION_FREEZE_IN_PROGRESS: u32 = 6840;
    pub const ERROR_NOT_SNAPSHOT_VOLUME: u32 = 6841;
    pub const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES: u32 = 6842;
    pub const ERROR_DATA_LOST_REPAIR: u32 = 6843;
    pub const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION: u32 = 6844;
    pub const ERROR_TM_IDENTITY_MISMATCH: u32 = 6845;
    pub const ERROR_FLOATED_SECTION: u32 = 6846;
    pub const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK: u32 = 6847;
    pub const ERROR_CANNOT_ABORT_TRANSACTIONS: u32 = 6848;
    pub const ERROR_BAD_CLUSTERS: u32 = 6849;
    pub const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION: u32 = 6850;
    pub const ERROR_VOLUME_DIRTY: u32 = 6851;
    pub const ERROR_NO_LINK_TRACKING_IN_TRANSACTION: u32 = 6852;
    pub const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION: u32 = 6853;
    pub const ERROR_EXPIRED_HANDLE: u32 = 6854;
    pub const ERROR_TRANSACTION_NOT_ENLISTED: u32 = 6855;
    pub const ERROR_CTX_WINSTATION_NAME_INVALID: u32 = 7001;
    pub const ERROR_CTX_INVALID_PD: u32 = 7002;
    pub const ERROR_CTX_PD_NOT_FOUND: u32 = 7003;
    pub const ERROR_CTX_WD_NOT_FOUND: u32 = 7004;
    pub const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY: u32 = 7005;
    pub const ERROR_CTX_SERVICE_NAME_COLLISION: u32 = 7006;
    pub const ERROR_CTX_CLOSE_PENDING: u32 = 7007;
    pub const ERROR_CTX_NO_OUTBUF: u32 = 7008;
    pub const ERROR_CTX_MODEM_INF_NOT_FOUND: u32 = 7009;
    pub const ERROR_CTX_INVALID_MODEMNAME: u32 = 7010;
    pub const ERROR_CTX_MODEM_RESPONSE_ERROR: u32 = 7011;
    pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: u32 = 7012;
    pub const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER: u32 = 7013;
    pub const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE: u32 = 7014;
    pub const ERROR_CTX_MODEM_RESPONSE_BUSY: u32 = 7015;
    pub const ERROR_CTX_MODEM_RESPONSE_VOICE: u32 = 7016;
    pub const ERROR_CTX_TD_ERROR: u32 = 7017;
    pub const ERROR_CTX_WINSTATION_NOT_FOUND: u32 = 7022;
    pub const ERROR_CTX_WINSTATION_ALREADY_EXISTS: u32 = 7023;
    pub const ERROR_CTX_WINSTATION_BUSY: u32 = 7024;
    pub const ERROR_CTX_BAD_VIDEO_MODE: u32 = 7025;
    pub const ERROR_CTX_GRAPHICS_INVALID: u32 = 7035;
    pub const ERROR_CTX_LOGON_DISABLED: u32 = 7037;
    pub const ERROR_CTX_NOT_CONSOLE: u32 = 7038;
    pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: u32 = 7040;
    pub const ERROR_CTX_CONSOLE_DISCONNECT: u32 = 7041;
    pub const ERROR_CTX_CONSOLE_CONNECT: u32 = 7042;
    pub const ERROR_CTX_SHADOW_DENIED: u32 = 7044;
    pub const ERROR_CTX_WINSTATION_ACCESS_DENIED: u32 = 7045;
    pub const ERROR_CTX_INVALID_WD: u32 = 7049;
    pub const ERROR_CTX_SHADOW_INVALID: u32 = 7050;
    pub const ERROR_CTX_SHADOW_DISABLED: u32 = 7051;
    pub const ERROR_CTX_CLIENT_LICENSE_IN_USE: u32 = 7052;
    pub const ERROR_CTX_CLIENT_LICENSE_NOT_SET: u32 = 7053;
    pub const ERROR_CTX_LICENSE_NOT_AVAILABLE: u32 = 7054;
    pub const ERROR_CTX_LICENSE_CLIENT_INVALID: u32 = 7055;
    pub const ERROR_CTX_LICENSE_EXPIRED: u32 = 7056;
    pub const ERROR_CTX_SHADOW_NOT_RUNNING: u32 = 7057;
    pub const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE: u32 = 7058;
    pub const ERROR_ACTIVATION_COUNT_EXCEEDED: u32 = 7059;
    pub const ERROR_CTX_WINSTATIONS_DISABLED: u32 = 7060;
    pub const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED: u32 = 7061;
    pub const ERROR_CTX_SESSION_IN_USE: u32 = 7062;
    pub const ERROR_CTX_NO_FORCE_LOGOFF: u32 = 7063;
    pub const ERROR_CTX_ACCOUNT_RESTRICTION: u32 = 7064;
    pub const ERROR_RDP_PROTOCOL_ERROR: u32 = 7065;
    pub const ERROR_CTX_CDM_CONNECT: u32 = 7066;
    pub const ERROR_CTX_CDM_DISCONNECT: u32 = 7067;
    pub const ERROR_CTX_SECURITY_LAYER_ERROR: u32 = 7068;
    pub const ERROR_TS_INCOMPATIBLE_SESSIONS: u32 = 7069;
    pub const ERROR_TS_VIDEO_SUBSYSTEM_ERROR: u32 = 7070;
    pub const FRS_ERR_INVALID_API_SEQUENCE: u32 = 8001;
    pub const FRS_ERR_STARTING_SERVICE: u32 = 8002;
    pub const FRS_ERR_STOPPING_SERVICE: u32 = 8003;
    pub const FRS_ERR_INTERNAL_API: u32 = 8004;
    pub const FRS_ERR_INTERNAL: u32 = 8005;
    pub const FRS_ERR_SERVICE_COMM: u32 = 8006;
    pub const FRS_ERR_INSUFFICIENT_PRIV: u32 = 8007;
    pub const FRS_ERR_AUTHENTICATION: u32 = 8008;
    pub const FRS_ERR_PARENT_INSUFFICIENT_PRIV: u32 = 8009;
    pub const FRS_ERR_PARENT_AUTHENTICATION: u32 = 8010;
    pub const FRS_ERR_CHILD_TO_PARENT_COMM: u32 = 8011;
    pub const FRS_ERR_PARENT_TO_CHILD_COMM: u32 = 8012;
    pub const FRS_ERR_SYSVOL_POPULATE: u32 = 8013;
    pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: u32 = 8014;
    pub const FRS_ERR_SYSVOL_IS_BUSY: u32 = 8015;
    pub const FRS_ERR_SYSVOL_DEMOTE: u32 = 8016;
    pub const FRS_ERR_INVALID_SERVICE_PARAMETER: u32 = 8017;
    pub const DS_S_SUCCESS: u32 = 0;
    pub const ERROR_DS_NOT_INSTALLED: u32 = 8200;
    pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY: u32 = 8201;
    pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE: u32 = 8202;
    pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX: u32 = 8203;
    pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED: u32 = 8204;
    pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS: u32 = 8205;
    pub const ERROR_DS_BUSY: u32 = 8206;
    pub const ERROR_DS_UNAVAILABLE: u32 = 8207;
    pub const ERROR_DS_NO_RIDS_ALLOCATED: u32 = 8208;
    pub const ERROR_DS_NO_MORE_RIDS: u32 = 8209;
    pub const ERROR_DS_INCORRECT_ROLE_OWNER: u32 = 8210;
    pub const ERROR_DS_RIDMGR_INIT_ERROR: u32 = 8211;
    pub const ERROR_DS_OBJ_CLASS_VIOLATION: u32 = 8212;
    pub const ERROR_DS_CANT_ON_NON_LEAF: u32 = 8213;
    pub const ERROR_DS_CANT_ON_RDN: u32 = 8214;
    pub const ERROR_DS_CANT_MOD_OBJ_CLASS: u32 = 8215;
    pub const ERROR_DS_CROSS_DOM_MOVE_ERROR: u32 = 8216;
    pub const ERROR_DS_GC_NOT_AVAILABLE: u32 = 8217;
    pub const ERROR_SHARED_POLICY: u32 = 8218;
    pub const ERROR_POLICY_OBJECT_NOT_FOUND: u32 = 8219;
    pub const ERROR_POLICY_ONLY_IN_DS: u32 = 8220;
    pub const ERROR_PROMOTION_ACTIVE: u32 = 8221;
    pub const ERROR_NO_PROMOTION_ACTIVE: u32 = 8222;
    pub const ERROR_DS_OPERATIONS_ERROR: u32 = 8224;
    pub const ERROR_DS_PROTOCOL_ERROR: u32 = 8225;
    pub const ERROR_DS_TIMELIMIT_EXCEEDED: u32 = 8226;
    pub const ERROR_DS_SIZELIMIT_EXCEEDED: u32 = 8227;
    pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED: u32 = 8228;
    pub const ERROR_DS_COMPARE_FALSE: u32 = 8229;
    pub const ERROR_DS_COMPARE_TRUE: u32 = 8230;
    pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED: u32 = 8231;
    pub const ERROR_DS_STRONG_AUTH_REQUIRED: u32 = 8232;
    pub const ERROR_DS_INAPPROPRIATE_AUTH: u32 = 8233;
    pub const ERROR_DS_AUTH_UNKNOWN: u32 = 8234;
    pub const ERROR_DS_REFERRAL: u32 = 8235;
    pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION: u32 = 8236;
    pub const ERROR_DS_CONFIDENTIALITY_REQUIRED: u32 = 8237;
    pub const ERROR_DS_INAPPROPRIATE_MATCHING: u32 = 8238;
    pub const ERROR_DS_CONSTRAINT_VIOLATION: u32 = 8239;
    pub const ERROR_DS_NO_SUCH_OBJECT: u32 = 8240;
    pub const ERROR_DS_ALIAS_PROBLEM: u32 = 8241;
    pub const ERROR_DS_INVALID_DN_SYNTAX: u32 = 8242;
    pub const ERROR_DS_IS_LEAF: u32 = 8243;
    pub const ERROR_DS_ALIAS_DEREF_PROBLEM: u32 = 8244;
    pub const ERROR_DS_UNWILLING_TO_PERFORM: u32 = 8245;
    pub const ERROR_DS_LOOP_DETECT: u32 = 8246;
    pub const ERROR_DS_NAMING_VIOLATION: u32 = 8247;
    pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE: u32 = 8248;
    pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS: u32 = 8249;
    pub const ERROR_DS_SERVER_DOWN: u32 = 8250;
    pub const ERROR_DS_LOCAL_ERROR: u32 = 8251;
    pub const ERROR_DS_ENCODING_ERROR: u32 = 8252;
    pub const ERROR_DS_DECODING_ERROR: u32 = 8253;
    pub const ERROR_DS_FILTER_UNKNOWN: u32 = 8254;
    pub const ERROR_DS_PARAM_ERROR: u32 = 8255;
    pub const ERROR_DS_NOT_SUPPORTED: u32 = 8256;
    pub const ERROR_DS_NO_RESULTS_RETURNED: u32 = 8257;
    pub const ERROR_DS_CONTROL_NOT_FOUND: u32 = 8258;
    pub const ERROR_DS_CLIENT_LOOP: u32 = 8259;
    pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED: u32 = 8260;
    pub const ERROR_DS_SORT_CONTROL_MISSING: u32 = 8261;
    pub const ERROR_DS_OFFSET_RANGE_ERROR: u32 = 8262;
    pub const ERROR_DS_RIDMGR_DISABLED: u32 = 8263;
    pub const ERROR_DS_ROOT_MUST_BE_NC: u32 = 8301;
    pub const ERROR_DS_ADD_REPLICA_INHIBITED: u32 = 8302;
    pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA: u32 = 8303;
    pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED: u32 = 8304;
    pub const ERROR_DS_OBJ_STRING_NAME_EXISTS: u32 = 8305;
    pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA: u32 = 8306;
    pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA: u32 = 8307;
    pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND: u32 = 8308;
    pub const ERROR_DS_USER_BUFFER_TO_SMALL: u32 = 8309;
    pub const ERROR_DS_ATT_IS_NOT_ON_OBJ: u32 = 8310;
    pub const ERROR_DS_ILLEGAL_MOD_OPERATION: u32 = 8311;
    pub const ERROR_DS_OBJ_TOO_LARGE: u32 = 8312;
    pub const ERROR_DS_BAD_INSTANCE_TYPE: u32 = 8313;
    pub const ERROR_DS_MASTERDSA_REQUIRED: u32 = 8314;
    pub const ERROR_DS_OBJECT_CLASS_REQUIRED: u32 = 8315;
    pub const ERROR_DS_MISSING_REQUIRED_ATT: u32 = 8316;
    pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS: u32 = 8317;
    pub const ERROR_DS_ATT_ALREADY_EXISTS: u32 = 8318;
    pub const ERROR_DS_CANT_ADD_ATT_VALUES: u32 = 8320;
    pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT: u32 = 8321;
    pub const ERROR_DS_RANGE_CONSTRAINT: u32 = 8322;
    pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS: u32 = 8323;
    pub const ERROR_DS_CANT_REM_MISSING_ATT: u32 = 8324;
    pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL: u32 = 8325;
    pub const ERROR_DS_ROOT_CANT_BE_SUBREF: u32 = 8326;
    pub const ERROR_DS_NO_CHAINING: u32 = 8327;
    pub const ERROR_DS_NO_CHAINED_EVAL: u32 = 8328;
    pub const ERROR_DS_NO_PARENT_OBJECT: u32 = 8329;
    pub const ERROR_DS_PARENT_IS_AN_ALIAS: u32 = 8330;
    pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS: u32 = 8331;
    pub const ERROR_DS_CHILDREN_EXIST: u32 = 8332;
    pub const ERROR_DS_OBJ_NOT_FOUND: u32 = 8333;
    pub const ERROR_DS_ALIASED_OBJ_MISSING: u32 = 8334;
    pub const ERROR_DS_BAD_NAME_SYNTAX: u32 = 8335;
    pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS: u32 = 8336;
    pub const ERROR_DS_CANT_DEREF_ALIAS: u32 = 8337;
    pub const ERROR_DS_OUT_OF_SCOPE: u32 = 8338;
    pub const ERROR_DS_OBJECT_BEING_REMOVED: u32 = 8339;
    pub const ERROR_DS_CANT_DELETE_DSA_OBJ: u32 = 8340;
    pub const ERROR_DS_GENERIC_ERROR: u32 = 8341;
    pub const ERROR_DS_DSA_MUST_BE_INT_MASTER: u32 = 8342;
    pub const ERROR_DS_CLASS_NOT_DSA: u32 = 8343;
    pub const ERROR_DS_INSUFF_ACCESS_RIGHTS: u32 = 8344;
    pub const ERROR_DS_ILLEGAL_SUPERIOR: u32 = 8345;
    pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM: u32 = 8346;
    pub const ERROR_DS_NAME_TOO_MANY_PARTS: u32 = 8347;
    pub const ERROR_DS_NAME_TOO_LONG: u32 = 8348;
    pub const ERROR_DS_NAME_VALUE_TOO_LONG: u32 = 8349;
    pub const ERROR_DS_NAME_UNPARSEABLE: u32 = 8350;
    pub const ERROR_DS_NAME_TYPE_UNKNOWN: u32 = 8351;
    pub const ERROR_DS_NOT_AN_OBJECT: u32 = 8352;
    pub const ERROR_DS_SEC_DESC_TOO_SHORT: u32 = 8353;
    pub const ERROR_DS_SEC_DESC_INVALID: u32 = 8354;
    pub const ERROR_DS_NO_DELETED_NAME: u32 = 8355;
    pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT: u32 = 8356;
    pub const ERROR_DS_NCNAME_MUST_BE_NC: u32 = 8357;
    pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY: u32 = 8358;
    pub const ERROR_DS_CLASS_MUST_BE_CONCRETE: u32 = 8359;
    pub const ERROR_DS_INVALID_DMD: u32 = 8360;
    pub const ERROR_DS_OBJ_GUID_EXISTS: u32 = 8361;
    pub const ERROR_DS_NOT_ON_BACKLINK: u32 = 8362;
    pub const ERROR_DS_NO_CROSSREF_FOR_NC: u32 = 8363;
    pub const ERROR_DS_SHUTTING_DOWN: u32 = 8364;
    pub const ERROR_DS_UNKNOWN_OPERATION: u32 = 8365;
    pub const ERROR_DS_INVALID_ROLE_OWNER: u32 = 8366;
    pub const ERROR_DS_COULDNT_CONTACT_FSMO: u32 = 8367;
    pub const ERROR_DS_CROSS_NC_DN_RENAME: u32 = 8368;
    pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY: u32 = 8369;
    pub const ERROR_DS_REPLICATOR_ONLY: u32 = 8370;
    pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED: u32 = 8371;
    pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS: u32 = 8372;
    pub const ERROR_DS_NAME_REFERENCE_INVALID: u32 = 8373;
    pub const ERROR_DS_CROSS_REF_EXISTS: u32 = 8374;
    pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF: u32 = 8375;
    pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD: u32 = 8376;
    pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX: u32 = 8377;
    pub const ERROR_DS_DUP_RDN: u32 = 8378;
    pub const ERROR_DS_DUP_OID: u32 = 8379;
    pub const ERROR_DS_DUP_MAPI_ID: u32 = 8380;
    pub const ERROR_DS_DUP_SCHEMA_ID_GUID: u32 = 8381;
    pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME: u32 = 8382;
    pub const ERROR_DS_SEMANTIC_ATT_TEST: u32 = 8383;
    pub const ERROR_DS_SYNTAX_MISMATCH: u32 = 8384;
    pub const ERROR_DS_EXISTS_IN_MUST_HAVE: u32 = 8385;
    pub const ERROR_DS_EXISTS_IN_MAY_HAVE: u32 = 8386;
    pub const ERROR_DS_NONEXISTENT_MAY_HAVE: u32 = 8387;
    pub const ERROR_DS_NONEXISTENT_MUST_HAVE: u32 = 8388;
    pub const ERROR_DS_AUX_CLS_TEST_FAIL: u32 = 8389;
    pub const ERROR_DS_NONEXISTENT_POSS_SUP: u32 = 8390;
    pub const ERROR_DS_SUB_CLS_TEST_FAIL: u32 = 8391;
    pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX: u32 = 8392;
    pub const ERROR_DS_EXISTS_IN_AUX_CLS: u32 = 8393;
    pub const ERROR_DS_EXISTS_IN_SUB_CLS: u32 = 8394;
    pub const ERROR_DS_EXISTS_IN_POSS_SUP: u32 = 8395;
    pub const ERROR_DS_RECALCSCHEMA_FAILED: u32 = 8396;
    pub const ERROR_DS_TREE_DELETE_NOT_FINISHED: u32 = 8397;
    pub const ERROR_DS_CANT_DELETE: u32 = 8398;
    pub const ERROR_DS_ATT_SCHEMA_REQ_ID: u32 = 8399;
    pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX: u32 = 8400;
    pub const ERROR_DS_CANT_CACHE_ATT: u32 = 8401;
    pub const ERROR_DS_CANT_CACHE_CLASS: u32 = 8402;
    pub const ERROR_DS_CANT_REMOVE_ATT_CACHE: u32 = 8403;
    pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE: u32 = 8404;
    pub const ERROR_DS_CANT_RETRIEVE_DN: u32 = 8405;
    pub const ERROR_DS_MISSING_SUPREF: u32 = 8406;
    pub const ERROR_DS_CANT_RETRIEVE_INSTANCE: u32 = 8407;
    pub const ERROR_DS_CODE_INCONSISTENCY: u32 = 8408;
    pub const ERROR_DS_DATABASE_ERROR: u32 = 8409;
    pub const ERROR_DS_GOVERNSID_MISSING: u32 = 8410;
    pub const ERROR_DS_MISSING_EXPECTED_ATT: u32 = 8411;
    pub const ERROR_DS_NCNAME_MISSING_CR_REF: u32 = 8412;
    pub const ERROR_DS_SECURITY_CHECKING_ERROR: u32 = 8413;
    pub const ERROR_DS_SCHEMA_NOT_LOADED: u32 = 8414;
    pub const ERROR_DS_SCHEMA_ALLOC_FAILED: u32 = 8415;
    pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX: u32 = 8416;
    pub const ERROR_DS_GCVERIFY_ERROR: u32 = 8417;
    pub const ERROR_DS_DRA_SCHEMA_MISMATCH: u32 = 8418;
    pub const ERROR_DS_CANT_FIND_DSA_OBJ: u32 = 8419;
    pub const ERROR_DS_CANT_FIND_EXPECTED_NC: u32 = 8420;
    pub const ERROR_DS_CANT_FIND_NC_IN_CACHE: u32 = 8421;
    pub const ERROR_DS_CANT_RETRIEVE_CHILD: u32 = 8422;
    pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY: u32 = 8423;
    pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC: u32 = 8424;
    pub const ERROR_DS_BAD_HIERARCHY_FILE: u32 = 8425;
    pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED: u32 = 8426;
    pub const ERROR_DS_CONFIG_PARAM_MISSING: u32 = 8427;
    pub const ERROR_DS_COUNTING_AB_INDICES_FAILED: u32 = 8428;
    pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED: u32 = 8429;
    pub const ERROR_DS_INTERNAL_FAILURE: u32 = 8430;
    pub const ERROR_DS_UNKNOWN_ERROR: u32 = 8431;
    pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP: u32 = 8432;
    pub const ERROR_DS_REFUSING_FSMO_ROLES: u32 = 8433;
    pub const ERROR_DS_MISSING_FSMO_SETTINGS: u32 = 8434;
    pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES: u32 = 8435;
    pub const ERROR_DS_DRA_GENERIC: u32 = 8436;
    pub const ERROR_DS_DRA_INVALID_PARAMETER: u32 = 8437;
    pub const ERROR_DS_DRA_BUSY: u32 = 8438;
    pub const ERROR_DS_DRA_BAD_DN: u32 = 8439;
    pub const ERROR_DS_DRA_BAD_NC: u32 = 8440;
    pub const ERROR_DS_DRA_DN_EXISTS: u32 = 8441;
    pub const ERROR_DS_DRA_INTERNAL_ERROR: u32 = 8442;
    pub const ERROR_DS_DRA_INCONSISTENT_DIT: u32 = 8443;
    pub const ERROR_DS_DRA_CONNECTION_FAILED: u32 = 8444;
    pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE: u32 = 8445;
    pub const ERROR_DS_DRA_OUT_OF_MEM: u32 = 8446;
    pub const ERROR_DS_DRA_MAIL_PROBLEM: u32 = 8447;
    pub const ERROR_DS_DRA_REF_ALREADY_EXISTS: u32 = 8448;
    pub const ERROR_DS_DRA_REF_NOT_FOUND: u32 = 8449;
    pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE: u32 = 8450;
    pub const ERROR_DS_DRA_DB_ERROR: u32 = 8451;
    pub const ERROR_DS_DRA_NO_REPLICA: u32 = 8452;
    pub const ERROR_DS_DRA_ACCESS_DENIED: u32 = 8453;
    pub const ERROR_DS_DRA_NOT_SUPPORTED: u32 = 8454;
    pub const ERROR_DS_DRA_RPC_CANCELLED: u32 = 8455;
    pub const ERROR_DS_DRA_SOURCE_DISABLED: u32 = 8456;
    pub const ERROR_DS_DRA_SINK_DISABLED: u32 = 8457;
    pub const ERROR_DS_DRA_NAME_COLLISION: u32 = 8458;
    pub const ERROR_DS_DRA_SOURCE_REINSTALLED: u32 = 8459;
    pub const ERROR_DS_DRA_MISSING_PARENT: u32 = 8460;
    pub const ERROR_DS_DRA_PREEMPTED: u32 = 8461;
    pub const ERROR_DS_DRA_ABANDON_SYNC: u32 = 8462;
    pub const ERROR_DS_DRA_SHUTDOWN: u32 = 8463;
    pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET: u32 = 8464;
    pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA: u32 = 8465;
    pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED: u32 = 8466;
    pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH: u32 = 8467;
    pub const ERROR_DS_DUP_LINK_ID: u32 = 8468;
    pub const ERROR_DS_NAME_ERROR_RESOLVING: u32 = 8469;
    pub const ERROR_DS_NAME_ERROR_NOT_FOUND: u32 = 8470;
    pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE: u32 = 8471;
    pub const ERROR_DS_NAME_ERROR_NO_MAPPING: u32 = 8472;
    pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY: u32 = 8473;
    pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: u32 = 8474;
    pub const ERROR_DS_CONSTRUCTED_ATT_MOD: u32 = 8475;
    pub const ERROR_DS_WRONG_OM_OBJ_CLASS: u32 = 8476;
    pub const ERROR_DS_DRA_REPL_PENDING: u32 = 8477;
    pub const ERROR_DS_DS_REQUIRED: u32 = 8478;
    pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME: u32 = 8479;
    pub const ERROR_DS_NON_BASE_SEARCH: u32 = 8480;
    pub const ERROR_DS_CANT_RETRIEVE_ATTS: u32 = 8481;
    pub const ERROR_DS_BACKLINK_WITHOUT_LINK: u32 = 8482;
    pub const ERROR_DS_EPOCH_MISMATCH: u32 = 8483;
    pub const ERROR_DS_SRC_NAME_MISMATCH: u32 = 8484;
    pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL: u32 = 8485;
    pub const ERROR_DS_DST_NC_MISMATCH: u32 = 8486;
    pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC: u32 = 8487;
    pub const ERROR_DS_SRC_GUID_MISMATCH: u32 = 8488;
    pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT: u32 = 8489;
    pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS: u32 = 8490;
    pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD: u32 = 8491;
    pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION: u32 = 8492;
    pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS: u32 = 8493;
    pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT: u32 = 8494;
    pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE: u32 = 8495;
    pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE: u32 = 8496;
    pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER: u32 = 8497;
    pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP: u32 = 8498;
    pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP: u32 = 8499;
    pub const ERROR_DS_INVALID_SEARCH_FLAG: u32 = 8500;
    pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC: u32 = 8501;
    pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE: u32 = 8502;
    pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE: u32 = 8503;
    pub const ERROR_DS_SAM_INIT_FAILURE: u32 = 8504;
    pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION: u32 = 8505;
    pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID: u32 = 8506;
    pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD: u32 = 8507;
    pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE: u32 = 8508;
    pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED: u32 = 8509;
    pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA: u32 = 8510;
    pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION: u32 = 8511;
    pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE: u32 = 8512;
    pub const ERROR_DS_INVALID_GROUP_TYPE: u32 = 8513;
    pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN: u32 = 8514;
    pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN: u32 = 8515;
    pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER: u32 = 8516;
    pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER: u32 = 8517;
    pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER: u32 = 8518;
    pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER: u32 = 8519;
    pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER: u32 = 8520;
    pub const ERROR_DS_HAVE_PRIMARY_MEMBERS: u32 = 8521;
    pub const ERROR_DS_STRING_SD_CONVERSION_FAILED: u32 = 8522;
    pub const ERROR_DS_NAMING_MASTER_GC: u32 = 8523;
    pub const ERROR_DS_DNS_LOOKUP_FAILURE: u32 = 8524;
    pub const ERROR_DS_COULDNT_UPDATE_SPNS: u32 = 8525;
    pub const ERROR_DS_CANT_RETRIEVE_SD: u32 = 8526;
    pub const ERROR_DS_KEY_NOT_UNIQUE: u32 = 8527;
    pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX: u32 = 8528;
    pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD: u32 = 8529;
    pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY: u32 = 8530;
    pub const ERROR_DS_CANT_START: u32 = 8531;
    pub const ERROR_DS_INIT_FAILURE: u32 = 8532;
    pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION: u32 = 8533;
    pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST: u32 = 8534;
    pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST: u32 = 8535;
    pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED: u32 = 8536;
    pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN: u32 = 8537;
    pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER: u32 = 8538;
    pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST: u32 = 8539;
    pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH: u32 = 8540;
    pub const ERROR_SAM_INIT_FAILURE: u32 = 8541;
    pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP: u32 = 8542;
    pub const ERROR_DS_DRA_SCHEMA_CONFLICT: u32 = 8543;
    pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT: u32 = 8544;
    pub const ERROR_DS_DRA_OBJ_NC_MISMATCH: u32 = 8545;
    pub const ERROR_DS_NC_STILL_HAS_DSAS: u32 = 8546;
    pub const ERROR_DS_GC_REQUIRED: u32 = 8547;
    pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY: u32 = 8548;
    pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS: u32 = 8549;
    pub const ERROR_DS_CANT_ADD_TO_GC: u32 = 8550;
    pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC: u32 = 8551;
    pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED: u32 = 8552;
    pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC: u32 = 8553;
    pub const ERROR_DS_INVALID_NAME_FOR_SPN: u32 = 8554;
    pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS: u32 = 8555;
    pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES: u32 = 8556;
    pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: u32 = 8557;
    pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC: u32 = 8558;
    pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER: u32 = 8559;
    pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ: u32 = 8560;
    pub const ERROR_DS_INIT_FAILURE_CONSOLE: u32 = 8561;
    pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE: u32 = 8562;
    pub const ERROR_DS_FOREST_VERSION_TOO_HIGH: u32 = 8563;
    pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH: u32 = 8564;
    pub const ERROR_DS_FOREST_VERSION_TOO_LOW: u32 = 8565;
    pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW: u32 = 8566;
    pub const ERROR_DS_INCOMPATIBLE_VERSION: u32 = 8567;
    pub const ERROR_DS_LOW_DSA_VERSION: u32 = 8568;
    pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN: u32 = 8569;
    pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER: u32 = 8570;
    pub const ERROR_DS_NAME_NOT_UNIQUE: u32 = 8571;
    pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4: u32 = 8572;
    pub const ERROR_DS_OUT_OF_VERSION_STORE: u32 = 8573;
    pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED: u32 = 8574;
    pub const ERROR_DS_NO_REF_DOMAIN: u32 = 8575;
    pub const ERROR_DS_RESERVED_LINK_ID: u32 = 8576;
    pub const ERROR_DS_LINK_ID_NOT_AVAILABLE: u32 = 8577;
    pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER: u32 = 8578;
    pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE: u32 = 8579;
    pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC: u32 = 8580;
    pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG: u32 = 8581;
    pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT: u32 = 8582;
    pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL: u32 = 8583;
    pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER: u32 = 8584;
    pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD: u32 = 8585;
    pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2: u32 = 8586;
    pub const ERROR_DS_THREAD_LIMIT_EXCEEDED: u32 = 8587;
    pub const ERROR_DS_NOT_CLOSEST: u32 = 8588;
    pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF: u32 = 8589;
    pub const ERROR_DS_SINGLE_USER_MODE_FAILED: u32 = 8590;
    pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR: u32 = 8591;
    pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR: u32 = 8592;
    pub const ERROR_DS_DIFFERENT_REPL_EPOCHS: u32 = 8593;
    pub const ERROR_DS_DRS_EXTENSIONS_CHANGED: u32 = 8594;
    pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR: u32 = 8595;
    pub const ERROR_DS_NO_MSDS_INTID: u32 = 8596;
    pub const ERROR_DS_DUP_MSDS_INTID: u32 = 8597;
    pub const ERROR_DS_EXISTS_IN_RDNATTID: u32 = 8598;
    pub const ERROR_DS_AUTHORIZATION_FAILED: u32 = 8599;
    pub const ERROR_DS_INVALID_SCRIPT: u32 = 8600;
    pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED: u32 = 8601;
    pub const ERROR_DS_CROSS_REF_BUSY: u32 = 8602;
    pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN: u32 = 8603;
    pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC: u32 = 8604;
    pub const ERROR_DS_DUPLICATE_ID_FOUND: u32 = 8605;
    pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT: u32 = 8606;
    pub const ERROR_DS_GROUP_CONVERSION_ERROR: u32 = 8607;
    pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP: u32 = 8608;
    pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP: u32 = 8609;
    pub const ERROR_DS_ROLE_NOT_VERIFIED: u32 = 8610;
    pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL: u32 = 8611;
    pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS: u32 = 8612;
    pub const ERROR_DS_EXISTING_AD_CHILD_NC: u32 = 8613;
    pub const ERROR_DS_REPL_LIFETIME_EXCEEDED: u32 = 8614;
    pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER: u32 = 8615;
    pub const ERROR_DS_LDAP_SEND_QUEUE_FULL: u32 = 8616;
    pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW: u32 = 8617;
    pub const ERROR_DS_POLICY_NOT_KNOWN: u32 = 8618;
    pub const ERROR_NO_SITE_SETTINGS_OBJECT: u32 = 8619;
    pub const ERROR_NO_SECRETS: u32 = 8620;
    pub const ERROR_NO_WRITABLE_DC_FOUND: u32 = 8621;
    pub const ERROR_DS_NO_SERVER_OBJECT: u32 = 8622;
    pub const ERROR_DS_NO_NTDSA_OBJECT: u32 = 8623;
    pub const ERROR_DS_NON_ASQ_SEARCH: u32 = 8624;
    pub const ERROR_DS_AUDIT_FAILURE: u32 = 8625;
    pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE: u32 = 8626;
    pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE: u32 = 8627;
    pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP: u32 = 8628;
    pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR: u32 = 8629;
    pub const ERROR_DS_DRA_SECRETS_DENIED: u32 = 8630;
    pub const ERROR_DS_RESERVED_MAPI_ID: u32 = 8631;
    pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE: u32 = 8632;
    pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET: u32 = 8633;
    pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST: u32 = 8634;
    pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST: u32 = 8635;
    pub const ERROR_INVALID_USER_PRINCIPAL_NAME: u32 = 8636;
    pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS: u32 = 8637;
    pub const ERROR_DS_OID_NOT_FOUND: u32 = 8638;
    pub const ERROR_DS_DRA_RECYCLED_TARGET: u32 = 8639;
    pub const ERROR_DS_DISALLOWED_NC_REDIRECT: u32 = 8640;
    pub const ERROR_DS_HIGH_ADLDS_FFL: u32 = 8641;
    pub const ERROR_DS_HIGH_DSA_VERSION: u32 = 8642;
    pub const ERROR_DS_LOW_ADLDS_FFL: u32 = 8643;
    pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION: u32 = 8644;
    pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED: u32 = 8645;
    pub const ERROR_INCORRECT_ACCOUNT_TYPE: u32 = 8646;
    pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST: u32 = 8647;
    pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST: u32 = 8648;
    pub const ERROR_DS_MISSING_FOREST_TRUST: u32 = 8649;
    pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE: u32 = 8650;
    pub const DNS_ERROR_RESPONSE_CODES_BASE: u32 = 9000;
    pub const DNS_ERROR_RCODE_NO_ERROR: u32 = 0;
    pub const DNS_ERROR_MASK: u32 = 9000;
    pub const DNS_ERROR_RCODE_FORMAT_ERROR: u32 = 9001;
    pub const DNS_ERROR_RCODE_SERVER_FAILURE: u32 = 9002;
    pub const DNS_ERROR_RCODE_NAME_ERROR: u32 = 9003;
    pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED: u32 = 9004;
    pub const DNS_ERROR_RCODE_REFUSED: u32 = 9005;
    pub const DNS_ERROR_RCODE_YXDOMAIN: u32 = 9006;
    pub const DNS_ERROR_RCODE_YXRRSET: u32 = 9007;
    pub const DNS_ERROR_RCODE_NXRRSET: u32 = 9008;
    pub const DNS_ERROR_RCODE_NOTAUTH: u32 = 9009;
    pub const DNS_ERROR_RCODE_NOTZONE: u32 = 9010;
    pub const DNS_ERROR_RCODE_BADSIG: u32 = 9016;
    pub const DNS_ERROR_RCODE_BADKEY: u32 = 9017;
    pub const DNS_ERROR_RCODE_BADTIME: u32 = 9018;
    pub const DNS_ERROR_RCODE_LAST: u32 = 9018;
    pub const DNS_ERROR_DNSSEC_BASE: u32 = 9100;
    pub const DNS_ERROR_KEYMASTER_REQUIRED: u32 = 9101;
    pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE: u32 = 9102;
    pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1: u32 = 9103;
    pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS: u32 = 9104;
    pub const DNS_ERROR_UNSUPPORTED_ALGORITHM: u32 = 9105;
    pub const DNS_ERROR_INVALID_KEY_SIZE: u32 = 9106;
    pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE: u32 = 9107;
    pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION: u32 = 9108;
    pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR: u32 = 9109;
    pub const DNS_ERROR_UNEXPECTED_CNG_ERROR: u32 = 9110;
    pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION: u32 = 9111;
    pub const DNS_ERROR_KSP_NOT_ACCESSIBLE: u32 = 9112;
    pub const DNS_ERROR_TOO_MANY_SKDS: u32 = 9113;
    pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD: u32 = 9114;
    pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET: u32 = 9115;
    pub const DNS_ERROR_ROLLOVER_IN_PROGRESS: u32 = 9116;
    pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT: u32 = 9117;
    pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK: u32 = 9118;
    pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD: u32 = 9119;
    pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED: u32 = 9120;
    pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE: u32 = 9121;
    pub const DNS_ERROR_BAD_KEYMASTER: u32 = 9122;
    pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD: u32 = 9123;
    pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT: u32 = 9124;
    pub const DNS_ERROR_DNSSEC_IS_DISABLED: u32 = 9125;
    pub const DNS_ERROR_INVALID_XML: u32 = 9126;
    pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS: u32 = 9127;
    pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE: u32 = 9128;
    pub const DNS_ERROR_NSEC3_NAME_COLLISION: u32 = 9129;
    pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1: u32 = 9130;
    pub const DNS_ERROR_PACKET_FMT_BASE: u32 = 9500;
    pub const DNS_INFO_NO_RECORDS: u32 = 9501;
    pub const DNS_ERROR_BAD_PACKET: u32 = 9502;
    pub const DNS_ERROR_NO_PACKET: u32 = 9503;
    pub const DNS_ERROR_RCODE: u32 = 9504;
    pub const DNS_ERROR_UNSECURE_PACKET: u32 = 9505;
    pub const DNS_STATUS_PACKET_UNSECURE: u32 = 9505;
    pub const DNS_REQUEST_PENDING: u32 = 9506;
    pub const DNS_ERROR_NO_MEMORY: u32 = 14;
    pub const DNS_ERROR_INVALID_NAME: u32 = 123;
    pub const DNS_ERROR_INVALID_DATA: u32 = 13;
    pub const DNS_ERROR_GENERAL_API_BASE: u32 = 9550;
    pub const DNS_ERROR_INVALID_TYPE: u32 = 9551;
    pub const DNS_ERROR_INVALID_IP_ADDRESS: u32 = 9552;
    pub const DNS_ERROR_INVALID_PROPERTY: u32 = 9553;
    pub const DNS_ERROR_TRY_AGAIN_LATER: u32 = 9554;
    pub const DNS_ERROR_NOT_UNIQUE: u32 = 9555;
    pub const DNS_ERROR_NON_RFC_NAME: u32 = 9556;
    pub const DNS_STATUS_FQDN: u32 = 9557;
    pub const DNS_STATUS_DOTTED_NAME: u32 = 9558;
    pub const DNS_STATUS_SINGLE_PART_NAME: u32 = 9559;
    pub const DNS_ERROR_INVALID_NAME_CHAR: u32 = 9560;
    pub const DNS_ERROR_NUMERIC_NAME: u32 = 9561;
    pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER: u32 = 9562;
    pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION: u32 = 9563;
    pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS: u32 = 9564;
    pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS: u32 = 9565;
    pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL: u32 = 9566;
    pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE: u32 = 9567;
    pub const DNS_ERROR_BACKGROUND_LOADING: u32 = 9568;
    pub const DNS_ERROR_NOT_ALLOWED_ON_RODC: u32 = 9569;
    pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME: u32 = 9570;
    pub const DNS_ERROR_DELEGATION_REQUIRED: u32 = 9571;
    pub const DNS_ERROR_INVALID_POLICY_TABLE: u32 = 9572;
    pub const DNS_ERROR_ADDRESS_REQUIRED: u32 = 9573;
    pub const DNS_ERROR_ZONE_BASE: u32 = 9600;
    pub const DNS_ERROR_ZONE_DOES_NOT_EXIST: u32 = 9601;
    pub const DNS_ERROR_NO_ZONE_INFO: u32 = 9602;
    pub const DNS_ERROR_INVALID_ZONE_OPERATION: u32 = 9603;
    pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR: u32 = 9604;
    pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD: u32 = 9605;
    pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS: u32 = 9606;
    pub const DNS_ERROR_ZONE_LOCKED: u32 = 9607;
    pub const DNS_ERROR_ZONE_CREATION_FAILED: u32 = 9608;
    pub const DNS_ERROR_ZONE_ALREADY_EXISTS: u32 = 9609;
    pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS: u32 = 9610;
    pub const DNS_ERROR_INVALID_ZONE_TYPE: u32 = 9611;
    pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP: u32 = 9612;
    pub const DNS_ERROR_ZONE_NOT_SECONDARY: u32 = 9613;
    pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES: u32 = 9614;
    pub const DNS_ERROR_WINS_INIT_FAILED: u32 = 9615;
    pub const DNS_ERROR_NEED_WINS_SERVERS: u32 = 9616;
    pub const DNS_ERROR_NBSTAT_INIT_FAILED: u32 = 9617;
    pub const DNS_ERROR_SOA_DELETE_INVALID: u32 = 9618;
    pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS: u32 = 9619;
    pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP: u32 = 9620;
    pub const DNS_ERROR_ZONE_IS_SHUTDOWN: u32 = 9621;
    pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING: u32 = 9622;
    pub const DNS_ERROR_DATAFILE_BASE: u32 = 9650;
    pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE: u32 = 9651;
    pub const DNS_ERROR_INVALID_DATAFILE_NAME: u32 = 9652;
    pub const DNS_ERROR_DATAFILE_OPEN_FAILURE: u32 = 9653;
    pub const DNS_ERROR_FILE_WRITEBACK_FAILED: u32 = 9654;
    pub const DNS_ERROR_DATAFILE_PARSING: u32 = 9655;
    pub const DNS_ERROR_DATABASE_BASE: u32 = 9700;
    pub const DNS_ERROR_RECORD_DOES_NOT_EXIST: u32 = 9701;
    pub const DNS_ERROR_RECORD_FORMAT: u32 = 9702;
    pub const DNS_ERROR_NODE_CREATION_FAILED: u32 = 9703;
    pub const DNS_ERROR_UNKNOWN_RECORD_TYPE: u32 = 9704;
    pub const DNS_ERROR_RECORD_TIMED_OUT: u32 = 9705;
    pub const DNS_ERROR_NAME_NOT_IN_ZONE: u32 = 9706;
    pub const DNS_ERROR_CNAME_LOOP: u32 = 9707;
    pub const DNS_ERROR_NODE_IS_CNAME: u32 = 9708;
    pub const DNS_ERROR_CNAME_COLLISION: u32 = 9709;
    pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT: u32 = 9710;
    pub const DNS_ERROR_RECORD_ALREADY_EXISTS: u32 = 9711;
    pub const DNS_ERROR_SECONDARY_DATA: u32 = 9712;
    pub const DNS_ERROR_NO_CREATE_CACHE_DATA: u32 = 9713;
    pub const DNS_ERROR_NAME_DOES_NOT_EXIST: u32 = 9714;
    pub const DNS_WARNING_PTR_CREATE_FAILED: u32 = 9715;
    pub const DNS_WARNING_DOMAIN_UNDELETED: u32 = 9716;
    pub const DNS_ERROR_DS_UNAVAILABLE: u32 = 9717;
    pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS: u32 = 9718;
    pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE: u32 = 9719;
    pub const DNS_ERROR_NODE_IS_DNAME: u32 = 9720;
    pub const DNS_ERROR_DNAME_COLLISION: u32 = 9721;
    pub const DNS_ERROR_ALIAS_LOOP: u32 = 9722;
    pub const DNS_ERROR_OPERATION_BASE: u32 = 9750;
    pub const DNS_INFO_AXFR_COMPLETE: u32 = 9751;
    pub const DNS_ERROR_AXFR: u32 = 9752;
    pub const DNS_INFO_ADDED_LOCAL_WINS: u32 = 9753;
    pub const DNS_ERROR_SECURE_BASE: u32 = 9800;
    pub const DNS_STATUS_CONTINUE_NEEDED: u32 = 9801;
    pub const DNS_ERROR_SETUP_BASE: u32 = 9850;
    pub const DNS_ERROR_NO_TCPIP: u32 = 9851;
    pub const DNS_ERROR_NO_DNS_SERVERS: u32 = 9852;
    pub const DNS_ERROR_DP_BASE: u32 = 9900;
    pub const DNS_ERROR_DP_DOES_NOT_EXIST: u32 = 9901;
    pub const DNS_ERROR_DP_ALREADY_EXISTS: u32 = 9902;
    pub const DNS_ERROR_DP_NOT_ENLISTED: u32 = 9903;
    pub const DNS_ERROR_DP_ALREADY_ENLISTED: u32 = 9904;
    pub const DNS_ERROR_DP_NOT_AVAILABLE: u32 = 9905;
    pub const DNS_ERROR_DP_FSMO_ERROR: u32 = 9906;
    pub const DNS_ERROR_RRL_NOT_ENABLED: u32 = 9911;
    pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE: u32 = 9912;
    pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX: u32 = 9913;
    pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX: u32 = 9914;
    pub const DNS_ERROR_RRL_INVALID_TC_RATE: u32 = 9915;
    pub const DNS_ERROR_RRL_INVALID_LEAK_RATE: u32 = 9916;
    pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE: u32 = 9917;
    pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS: u32 = 9921;
    pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST: u32 = 9922;
    pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED: u32 = 9923;
    pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME: u32 = 9924;
    pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE: u32 = 9925;
    pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS: u32 = 9951;
    pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST: u32 = 9952;
    pub const DNS_ERROR_DEFAULT_ZONESCOPE: u32 = 9953;
    pub const DNS_ERROR_INVALID_ZONESCOPE_NAME: u32 = 9954;
    pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES: u32 = 9955;
    pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED: u32 = 9956;
    pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED: u32 = 9957;
    pub const DNS_ERROR_INVALID_SCOPE_NAME: u32 = 9958;
    pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST: u32 = 9959;
    pub const DNS_ERROR_DEFAULT_SCOPE: u32 = 9960;
    pub const DNS_ERROR_INVALID_SCOPE_OPERATION: u32 = 9961;
    pub const DNS_ERROR_SCOPE_LOCKED: u32 = 9962;
    pub const DNS_ERROR_SCOPE_ALREADY_EXISTS: u32 = 9963;
    pub const DNS_ERROR_POLICY_ALREADY_EXISTS: u32 = 9971;
    pub const DNS_ERROR_POLICY_DOES_NOT_EXIST: u32 = 9972;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA: u32 = 9973;
    pub const DNS_ERROR_POLICY_INVALID_SETTINGS: u32 = 9974;
    pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED: u32 = 9975;
    pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST: u32 = 9976;
    pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS: u32 = 9977;
    pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST: u32 = 9978;
    pub const DNS_ERROR_SUBNET_ALREADY_EXISTS: u32 = 9979;
    pub const DNS_ERROR_POLICY_LOCKED: u32 = 9980;
    pub const DNS_ERROR_POLICY_INVALID_WEIGHT: u32 = 9981;
    pub const DNS_ERROR_POLICY_INVALID_NAME: u32 = 9982;
    pub const DNS_ERROR_POLICY_MISSING_CRITERIA: u32 = 9983;
    pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME: u32 = 9984;
    pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID: u32 = 9985;
    pub const DNS_ERROR_POLICY_SCOPE_MISSING: u32 = 9986;
    pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED: u32 = 9987;
    pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED: u32 = 9988;
    pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED: u32 = 9989;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET: u32 = 9990;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL: u32 = 9991;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL: u32 = 9992;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE: u32 = 9993;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN: u32 = 9994;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE: u32 = 9995;
    pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY: u32 = 9996;
    pub const WSABASEERR: u32 = 10000;
    pub const WSAEINTR: u32 = 10004;
    pub const WSAEBADF: u32 = 10009;
    pub const WSAEACCES: u32 = 10013;
    pub const WSAEFAULT: u32 = 10014;
    pub const WSAEINVAL: u32 = 10022;
    pub const WSAEMFILE: u32 = 10024;
    pub const WSAEWOULDBLOCK: u32 = 10035;
    pub const WSAEINPROGRESS: u32 = 10036;
    pub const WSAEALREADY: u32 = 10037;
    pub const WSAENOTSOCK: u32 = 10038;
    pub const WSAEDESTADDRREQ: u32 = 10039;
    pub const WSAEMSGSIZE: u32 = 10040;
    pub const WSAEPROTOTYPE: u32 = 10041;
    pub const WSAENOPROTOOPT: u32 = 10042;
    pub const WSAEPROTONOSUPPORT: u32 = 10043;
    pub const WSAESOCKTNOSUPPORT: u32 = 10044;
    pub const WSAEOPNOTSUPP: u32 = 10045;
    pub const WSAEPFNOSUPPORT: u32 = 10046;
    pub const WSAEAFNOSUPPORT: u32 = 10047;
    pub const WSAEADDRINUSE: u32 = 10048;
    pub const WSAEADDRNOTAVAIL: u32 = 10049;
    pub const WSAENETDOWN: u32 = 10050;
    pub const WSAENETUNREACH: u32 = 10051;
    pub const WSAENETRESET: u32 = 10052;
    pub const WSAECONNABORTED: u32 = 10053;
    pub const WSAECONNRESET: u32 = 10054;
    pub const WSAENOBUFS: u32 = 10055;
    pub const WSAEISCONN: u32 = 10056;
    pub const WSAENOTCONN: u32 = 10057;
    pub const WSAESHUTDOWN: u32 = 10058;
    pub const WSAETOOMANYREFS: u32 = 10059;
    pub const WSAETIMEDOUT: u32 = 10060;
    pub const WSAECONNREFUSED: u32 = 10061;
    pub const WSAELOOP: u32 = 10062;
    pub const WSAENAMETOOLONG: u32 = 10063;
    pub const WSAEHOSTDOWN: u32 = 10064;
    pub const WSAEHOSTUNREACH: u32 = 10065;
    pub const WSAENOTEMPTY: u32 = 10066;
    pub const WSAEPROCLIM: u32 = 10067;
    pub const WSAEUSERS: u32 = 10068;
    pub const WSAEDQUOT: u32 = 10069;
    pub const WSAESTALE: u32 = 10070;
    pub const WSAEREMOTE: u32 = 10071;
    pub const WSASYSNOTREADY: u32 = 10091;
    pub const WSAVERNOTSUPPORTED: u32 = 10092;
    pub const WSANOTINITIALISED: u32 = 10093;
    pub const WSAEDISCON: u32 = 10101;
    pub const WSAENOMORE: u32 = 10102;
    pub const WSAECANCELLED: u32 = 10103;
    pub const WSAEINVALIDPROCTABLE: u32 = 10104;
    pub const WSAEINVALIDPROVIDER: u32 = 10105;
    pub const WSAEPROVIDERFAILEDINIT: u32 = 10106;
    pub const WSASYSCALLFAILURE: u32 = 10107;
    pub const WSASERVICE_NOT_FOUND: u32 = 10108;
    pub const WSATYPE_NOT_FOUND: u32 = 10109;
    pub const WSA_E_NO_MORE: u32 = 10110;
    pub const WSA_E_CANCELLED: u32 = 10111;
    pub const WSAEREFUSED: u32 = 10112;
    pub const WSAHOST_NOT_FOUND: u32 = 11001;
    pub const WSATRY_AGAIN: u32 = 11002;
    pub const WSANO_RECOVERY: u32 = 11003;
    pub const WSANO_DATA: u32 = 11004;
    pub const WSA_QOS_RECEIVERS: u32 = 11005;
    pub const WSA_QOS_SENDERS: u32 = 11006;
    pub const WSA_QOS_NO_SENDERS: u32 = 11007;
    pub const WSA_QOS_NO_RECEIVERS: u32 = 11008;
    pub const WSA_QOS_REQUEST_CONFIRMED: u32 = 11009;
    pub const WSA_QOS_ADMISSION_FAILURE: u32 = 11010;
    pub const WSA_QOS_POLICY_FAILURE: u32 = 11011;
    pub const WSA_QOS_BAD_STYLE: u32 = 11012;
    pub const WSA_QOS_BAD_OBJECT: u32 = 11013;
    pub const WSA_QOS_TRAFFIC_CTRL_ERROR: u32 = 11014;
    pub const WSA_QOS_GENERIC_ERROR: u32 = 11015;
    pub const WSA_QOS_ESERVICETYPE: u32 = 11016;
    pub const WSA_QOS_EFLOWSPEC: u32 = 11017;
    pub const WSA_QOS_EPROVSPECBUF: u32 = 11018;
    pub const WSA_QOS_EFILTERSTYLE: u32 = 11019;
    pub const WSA_QOS_EFILTERTYPE: u32 = 11020;
    pub const WSA_QOS_EFILTERCOUNT: u32 = 11021;
    pub const WSA_QOS_EOBJLENGTH: u32 = 11022;
    pub const WSA_QOS_EFLOWCOUNT: u32 = 11023;
    pub const WSA_QOS_EUNKOWNPSOBJ: u32 = 11024;
    pub const WSA_QOS_EPOLICYOBJ: u32 = 11025;
    pub const WSA_QOS_EFLOWDESC: u32 = 11026;
    pub const WSA_QOS_EPSFLOWSPEC: u32 = 11027;
    pub const WSA_QOS_EPSFILTERSPEC: u32 = 11028;
    pub const WSA_QOS_ESDMODEOBJ: u32 = 11029;
    pub const WSA_QOS_ESHAPERATEOBJ: u32 = 11030;
    pub const WSA_QOS_RESERVED_PETYPE: u32 = 11031;
    pub const WSA_SECURE_HOST_NOT_FOUND: u32 = 11032;
    pub const WSA_IPSEC_NAME_POLICY_ERROR: u32 = 11033;
    pub const ERROR_IPSEC_QM_POLICY_EXISTS: u32 = 13000;
    pub const ERROR_IPSEC_QM_POLICY_NOT_FOUND: u32 = 13001;
    pub const ERROR_IPSEC_QM_POLICY_IN_USE: u32 = 13002;
    pub const ERROR_IPSEC_MM_POLICY_EXISTS: u32 = 13003;
    pub const ERROR_IPSEC_MM_POLICY_NOT_FOUND: u32 = 13004;
    pub const ERROR_IPSEC_MM_POLICY_IN_USE: u32 = 13005;
    pub const ERROR_IPSEC_MM_FILTER_EXISTS: u32 = 13006;
    pub const ERROR_IPSEC_MM_FILTER_NOT_FOUND: u32 = 13007;
    pub const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS: u32 = 13008;
    pub const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND: u32 = 13009;
    pub const ERROR_IPSEC_MM_AUTH_EXISTS: u32 = 13010;
    pub const ERROR_IPSEC_MM_AUTH_NOT_FOUND: u32 = 13011;
    pub const ERROR_IPSEC_MM_AUTH_IN_USE: u32 = 13012;
    pub const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND: u32 = 13013;
    pub const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND: u32 = 13014;
    pub const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND: u32 = 13015;
    pub const ERROR_IPSEC_TUNNEL_FILTER_EXISTS: u32 = 13016;
    pub const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND: u32 = 13017;
    pub const ERROR_IPSEC_MM_FILTER_PENDING_DELETION: u32 = 13018;
    pub const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION: u32 = 13019;
    pub const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION: u32 = 13020;
    pub const ERROR_IPSEC_MM_POLICY_PENDING_DELETION: u32 = 13021;
    pub const ERROR_IPSEC_MM_AUTH_PENDING_DELETION: u32 = 13022;
    pub const ERROR_IPSEC_QM_POLICY_PENDING_DELETION: u32 = 13023;
    pub const WARNING_IPSEC_MM_POLICY_PRUNED: u32 = 13024;
    pub const WARNING_IPSEC_QM_POLICY_PRUNED: u32 = 13025;
    pub const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN: u32 = 13800;
    pub const ERROR_IPSEC_IKE_AUTH_FAIL: u32 = 13801;
    pub const ERROR_IPSEC_IKE_ATTRIB_FAIL: u32 = 13802;
    pub const ERROR_IPSEC_IKE_NEGOTIATION_PENDING: u32 = 13803;
    pub const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR: u32 = 13804;
    pub const ERROR_IPSEC_IKE_TIMED_OUT: u32 = 13805;
    pub const ERROR_IPSEC_IKE_NO_CERT: u32 = 13806;
    pub const ERROR_IPSEC_IKE_SA_DELETED: u32 = 13807;
    pub const ERROR_IPSEC_IKE_SA_REAPED: u32 = 13808;
    pub const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP: u32 = 13809;
    pub const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP: u32 = 13810;
    pub const ERROR_IPSEC_IKE_QUEUE_DROP_MM: u32 = 13811;
    pub const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM: u32 = 13812;
    pub const ERROR_IPSEC_IKE_DROP_NO_RESPONSE: u32 = 13813;
    pub const ERROR_IPSEC_IKE_MM_DELAY_DROP: u32 = 13814;
    pub const ERROR_IPSEC_IKE_QM_DELAY_DROP: u32 = 13815;
    pub const ERROR_IPSEC_IKE_ERROR: u32 = 13816;
    pub const ERROR_IPSEC_IKE_CRL_FAILED: u32 = 13817;
    pub const ERROR_IPSEC_IKE_INVALID_KEY_USAGE: u32 = 13818;
    pub const ERROR_IPSEC_IKE_INVALID_CERT_TYPE: u32 = 13819;
    pub const ERROR_IPSEC_IKE_NO_PRIVATE_KEY: u32 = 13820;
    pub const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY: u32 = 13821;
    pub const ERROR_IPSEC_IKE_DH_FAIL: u32 = 13822;
    pub const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED: u32 = 13823;
    pub const ERROR_IPSEC_IKE_INVALID_HEADER: u32 = 13824;
    pub const ERROR_IPSEC_IKE_NO_POLICY: u32 = 13825;
    pub const ERROR_IPSEC_IKE_INVALID_SIGNATURE: u32 = 13826;
    pub const ERROR_IPSEC_IKE_KERBEROS_ERROR: u32 = 13827;
    pub const ERROR_IPSEC_IKE_NO_PUBLIC_KEY: u32 = 13828;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR: u32 = 13829;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_SA: u32 = 13830;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_PROP: u32 = 13831;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS: u32 = 13832;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_KE: u32 = 13833;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_ID: u32 = 13834;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT: u32 = 13835;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ: u32 = 13836;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_HASH: u32 = 13837;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_SIG: u32 = 13838;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE: u32 = 13839;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY: u32 = 13840;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE: u32 = 13841;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR: u32 = 13842;
    pub const ERROR_IPSEC_IKE_INVALID_PAYLOAD: u32 = 13843;
    pub const ERROR_IPSEC_IKE_LOAD_SOFT_SA: u32 = 13844;
    pub const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN: u32 = 13845;
    pub const ERROR_IPSEC_IKE_INVALID_COOKIE: u32 = 13846;
    pub const ERROR_IPSEC_IKE_NO_PEER_CERT: u32 = 13847;
    pub const ERROR_IPSEC_IKE_PEER_CRL_FAILED: u32 = 13848;
    pub const ERROR_IPSEC_IKE_POLICY_CHANGE: u32 = 13849;
    pub const ERROR_IPSEC_IKE_NO_MM_POLICY: u32 = 13850;
    pub const ERROR_IPSEC_IKE_NOTCBPRIV: u32 = 13851;
    pub const ERROR_IPSEC_IKE_SECLOADFAIL: u32 = 13852;
    pub const ERROR_IPSEC_IKE_FAILSSPINIT: u32 = 13853;
    pub const ERROR_IPSEC_IKE_FAILQUERYSSP: u32 = 13854;
    pub const ERROR_IPSEC_IKE_SRVACQFAIL: u32 = 13855;
    pub const ERROR_IPSEC_IKE_SRVQUERYCRED: u32 = 13856;
    pub const ERROR_IPSEC_IKE_GETSPIFAIL: u32 = 13857;
    pub const ERROR_IPSEC_IKE_INVALID_FILTER: u32 = 13858;
    pub const ERROR_IPSEC_IKE_OUT_OF_MEMORY: u32 = 13859;
    pub const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED: u32 = 13860;
    pub const ERROR_IPSEC_IKE_INVALID_POLICY: u32 = 13861;
    pub const ERROR_IPSEC_IKE_UNKNOWN_DOI: u32 = 13862;
    pub const ERROR_IPSEC_IKE_INVALID_SITUATION: u32 = 13863;
    pub const ERROR_IPSEC_IKE_DH_FAILURE: u32 = 13864;
    pub const ERROR_IPSEC_IKE_INVALID_GROUP: u32 = 13865;
    pub const ERROR_IPSEC_IKE_ENCRYPT: u32 = 13866;
    pub const ERROR_IPSEC_IKE_DECRYPT: u32 = 13867;
    pub const ERROR_IPSEC_IKE_POLICY_MATCH: u32 = 13868;
    pub const ERROR_IPSEC_IKE_UNSUPPORTED_ID: u32 = 13869;
    pub const ERROR_IPSEC_IKE_INVALID_HASH: u32 = 13870;
    pub const ERROR_IPSEC_IKE_INVALID_HASH_ALG: u32 = 13871;
    pub const ERROR_IPSEC_IKE_INVALID_HASH_SIZE: u32 = 13872;
    pub const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG: u32 = 13873;
    pub const ERROR_IPSEC_IKE_INVALID_AUTH_ALG: u32 = 13874;
    pub const ERROR_IPSEC_IKE_INVALID_SIG: u32 = 13875;
    pub const ERROR_IPSEC_IKE_LOAD_FAILED: u32 = 13876;
    pub const ERROR_IPSEC_IKE_RPC_DELETE: u32 = 13877;
    pub const ERROR_IPSEC_IKE_BENIGN_REINIT: u32 = 13878;
    pub const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY: u32 = 13879;
    pub const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION: u32 = 13880;
    pub const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN: u32 = 13881;
    pub const ERROR_IPSEC_IKE_MM_LIMIT: u32 = 13882;
    pub const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED: u32 = 13883;
    pub const ERROR_IPSEC_IKE_QM_LIMIT: u32 = 13884;
    pub const ERROR_IPSEC_IKE_MM_EXPIRED: u32 = 13885;
    pub const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID: u32 = 13886;
    pub const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH: u32 = 13887;
    pub const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID: u32 = 13888;
    pub const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD: u32 = 13889;
    pub const ERROR_IPSEC_IKE_DOS_COOKIE_SENT: u32 = 13890;
    pub const ERROR_IPSEC_IKE_SHUTTING_DOWN: u32 = 13891;
    pub const ERROR_IPSEC_IKE_CGA_AUTH_FAILED: u32 = 13892;
    pub const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA: u32 = 13893;
    pub const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM: u32 = 13894;
    pub const ERROR_IPSEC_IKE_QM_EXPIRED: u32 = 13895;
    pub const ERROR_IPSEC_IKE_TOO_MANY_FILTERS: u32 = 13896;
    pub const ERROR_IPSEC_IKE_NEG_STATUS_END: u32 = 13897;
    pub const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL: u32 = 13898;
    pub const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE: u32 = 13899;
    pub const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING: u32 = 13900;
    pub const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING: u32 = 13901;
    pub const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS: u32 = 13902;
    pub const ERROR_IPSEC_IKE_RATELIMIT_DROP: u32 = 13903;
    pub const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE: u32 = 13904;
    pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE: u32 = 13905;
    pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE: u32 = 13906;
    pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY: u32 = 13907;
    pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE: u32 = 13908;
    pub const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END: u32 = 13909;
    pub const ERROR_IPSEC_BAD_SPI: u32 = 13910;
    pub const ERROR_IPSEC_SA_LIFETIME_EXPIRED: u32 = 13911;
    pub const ERROR_IPSEC_WRONG_SA: u32 = 13912;
    pub const ERROR_IPSEC_REPLAY_CHECK_FAILED: u32 = 13913;
    pub const ERROR_IPSEC_INVALID_PACKET: u32 = 13914;
    pub const ERROR_IPSEC_INTEGRITY_CHECK_FAILED: u32 = 13915;
    pub const ERROR_IPSEC_CLEAR_TEXT_DROP: u32 = 13916;
    pub const ERROR_IPSEC_AUTH_FIREWALL_DROP: u32 = 13917;
    pub const ERROR_IPSEC_THROTTLE_DROP: u32 = 13918;
    pub const ERROR_IPSEC_DOSP_BLOCK: u32 = 13925;
    pub const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST: u32 = 13926;
    pub const ERROR_IPSEC_DOSP_INVALID_PACKET: u32 = 13927;
    pub const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED: u32 = 13928;
    pub const ERROR_IPSEC_DOSP_MAX_ENTRIES: u32 = 13929;
    pub const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED: u32 = 13930;
    pub const ERROR_IPSEC_DOSP_NOT_INSTALLED: u32 = 13931;
    pub const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES: u32 = 13932;
    pub const ERROR_SXS_SECTION_NOT_FOUND: u32 = 14000;
    pub const ERROR_SXS_CANT_GEN_ACTCTX: u32 = 14001;
    pub const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT: u32 = 14002;
    pub const ERROR_SXS_ASSEMBLY_NOT_FOUND: u32 = 14003;
    pub const ERROR_SXS_MANIFEST_FORMAT_ERROR: u32 = 14004;
    pub const ERROR_SXS_MANIFEST_PARSE_ERROR: u32 = 14005;
    pub const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED: u32 = 14006;
    pub const ERROR_SXS_KEY_NOT_FOUND: u32 = 14007;
    pub const ERROR_SXS_VERSION_CONFLICT: u32 = 14008;
    pub const ERROR_SXS_WRONG_SECTION_TYPE: u32 = 14009;
    pub const ERROR_SXS_THREAD_QUERIES_DISABLED: u32 = 14010;
    pub const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET: u32 = 14011;
    pub const ERROR_SXS_UNKNOWN_ENCODING_GROUP: u32 = 14012;
    pub const ERROR_SXS_UNKNOWN_ENCODING: u32 = 14013;
    pub const ERROR_SXS_INVALID_XML_NAMESPACE_URI: u32 = 14014;
    pub const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED: u32 = 14015;
    pub const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED: u32 = 14016;
    pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE: u32 = 14017;
    pub const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE: u32 = 14018;
    pub const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE: u32 = 14019;
    pub const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT: u32 = 14020;
    pub const ERROR_SXS_DUPLICATE_DLL_NAME: u32 = 14021;
    pub const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME: u32 = 14022;
    pub const ERROR_SXS_DUPLICATE_CLSID: u32 = 14023;
    pub const ERROR_SXS_DUPLICATE_IID: u32 = 14024;
    pub const ERROR_SXS_DUPLICATE_TLBID: u32 = 14025;
    pub const ERROR_SXS_DUPLICATE_PROGID: u32 = 14026;
    pub const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME: u32 = 14027;
    pub const ERROR_SXS_FILE_HASH_MISMATCH: u32 = 14028;
    pub const ERROR_SXS_POLICY_PARSE_ERROR: u32 = 14029;
    pub const ERROR_SXS_XML_E_MISSINGQUOTE: u32 = 14030;
    pub const ERROR_SXS_XML_E_COMMENTSYNTAX: u32 = 14031;
    pub const ERROR_SXS_XML_E_BADSTARTNAMECHAR: u32 = 14032;
    pub const ERROR_SXS_XML_E_BADNAMECHAR: u32 = 14033;
    pub const ERROR_SXS_XML_E_BADCHARINSTRING: u32 = 14034;
    pub const ERROR_SXS_XML_E_XMLDECLSYNTAX: u32 = 14035;
    pub const ERROR_SXS_XML_E_BADCHARDATA: u32 = 14036;
    pub const ERROR_SXS_XML_E_MISSINGWHITESPACE: u32 = 14037;
    pub const ERROR_SXS_XML_E_EXPECTINGTAGEND: u32 = 14038;
    pub const ERROR_SXS_XML_E_MISSINGSEMICOLON: u32 = 14039;
    pub const ERROR_SXS_XML_E_UNBALANCEDPAREN: u32 = 14040;
    pub const ERROR_SXS_XML_E_INTERNALERROR: u32 = 14041;
    pub const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE: u32 = 14042;
    pub const ERROR_SXS_XML_E_INCOMPLETE_ENCODING: u32 = 14043;
    pub const ERROR_SXS_XML_E_MISSING_PAREN: u32 = 14044;
    pub const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE: u32 = 14045;
    pub const ERROR_SXS_XML_E_MULTIPLE_COLONS: u32 = 14046;
    pub const ERROR_SXS_XML_E_INVALID_DECIMAL: u32 = 14047;
    pub const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL: u32 = 14048;
    pub const ERROR_SXS_XML_E_INVALID_UNICODE: u32 = 14049;
    pub const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK: u32 = 14050;
    pub const ERROR_SXS_XML_E_UNEXPECTEDENDTAG: u32 = 14051;
    pub const ERROR_SXS_XML_E_UNCLOSEDTAG: u32 = 14052;
    pub const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE: u32 = 14053;
    pub const ERROR_SXS_XML_E_MULTIPLEROOTS: u32 = 14054;
    pub const ERROR_SXS_XML_E_INVALIDATROOTLEVEL: u32 = 14055;
    pub const ERROR_SXS_XML_E_BADXMLDECL: u32 = 14056;
    pub const ERROR_SXS_XML_E_MISSINGROOT: u32 = 14057;
    pub const ERROR_SXS_XML_E_UNEXPECTEDEOF: u32 = 14058;
    pub const ERROR_SXS_XML_E_BADPEREFINSUBSET: u32 = 14059;
    pub const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG: u32 = 14060;
    pub const ERROR_SXS_XML_E_UNCLOSEDENDTAG: u32 = 14061;
    pub const ERROR_SXS_XML_E_UNCLOSEDSTRING: u32 = 14062;
    pub const ERROR_SXS_XML_E_UNCLOSEDCOMMENT: u32 = 14063;
    pub const ERROR_SXS_XML_E_UNCLOSEDDECL: u32 = 14064;
    pub const ERROR_SXS_XML_E_UNCLOSEDCDATA: u32 = 14065;
    pub const ERROR_SXS_XML_E_RESERVEDNAMESPACE: u32 = 14066;
    pub const ERROR_SXS_XML_E_INVALIDENCODING: u32 = 14067;
    pub const ERROR_SXS_XML_E_INVALIDSWITCH: u32 = 14068;
    pub const ERROR_SXS_XML_E_BADXMLCASE: u32 = 14069;
    pub const ERROR_SXS_XML_E_INVALID_STANDALONE: u32 = 14070;
    pub const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE: u32 = 14071;
    pub const ERROR_SXS_XML_E_INVALID_VERSION: u32 = 14072;
    pub const ERROR_SXS_XML_E_MISSINGEQUALS: u32 = 14073;
    pub const ERROR_SXS_PROTECTION_RECOVERY_FAILED: u32 = 14074;
    pub const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT: u32 = 14075;
    pub const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID: u32 = 14076;
    pub const ERROR_SXS_UNTRANSLATABLE_HRESULT: u32 = 14077;
    pub const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING: u32 = 14078;
    pub const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE: u32 = 14079;
    pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME: u32 = 14080;
    pub const ERROR_SXS_ASSEMBLY_MISSING: u32 = 14081;
    pub const ERROR_SXS_CORRUPT_ACTIVATION_STACK: u32 = 14082;
    pub const ERROR_SXS_CORRUPTION: u32 = 14083;
    pub const ERROR_SXS_EARLY_DEACTIVATION: u32 = 14084;
    pub const ERROR_SXS_INVALID_DEACTIVATION: u32 = 14085;
    pub const ERROR_SXS_MULTIPLE_DEACTIVATION: u32 = 14086;
    pub const ERROR_SXS_PROCESS_TERMINATION_REQUESTED: u32 = 14087;
    pub const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT: u32 = 14088;
    pub const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY: u32 = 14089;
    pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE: u32 = 14090;
    pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME: u32 = 14091;
    pub const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE: u32 = 14092;
    pub const ERROR_SXS_IDENTITY_PARSE_ERROR: u32 = 14093;
    pub const ERROR_MALFORMED_SUBSTITUTION_STRING: u32 = 14094;
    pub const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN: u32 = 14095;
    pub const ERROR_UNMAPPED_SUBSTITUTION_STRING: u32 = 14096;
    pub const ERROR_SXS_ASSEMBLY_NOT_LOCKED: u32 = 14097;
    pub const ERROR_SXS_COMPONENT_STORE_CORRUPT: u32 = 14098;
    pub const ERROR_ADVANCED_INSTALLER_FAILED: u32 = 14099;
    pub const ERROR_XML_ENCODING_MISMATCH: u32 = 14100;
    pub const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT: u32 = 14101;
    pub const ERROR_SXS_IDENTITIES_DIFFERENT: u32 = 14102;
    pub const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT: u32 = 14103;
    pub const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY: u32 = 14104;
    pub const ERROR_SXS_MANIFEST_TOO_BIG: u32 = 14105;
    pub const ERROR_SXS_SETTING_NOT_REGISTERED: u32 = 14106;
    pub const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE: u32 = 14107;
    pub const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED: u32 = 14108;
    pub const ERROR_GENERIC_COMMAND_FAILED: u32 = 14109;
    pub const ERROR_SXS_FILE_HASH_MISSING: u32 = 14110;
    pub const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS: u32 = 14111;
    pub const ERROR_EVT_INVALID_CHANNEL_PATH: u32 = 15000;
    pub const ERROR_EVT_INVALID_QUERY: u32 = 15001;
    pub const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND: u32 = 15002;
    pub const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND: u32 = 15003;
    pub const ERROR_EVT_INVALID_PUBLISHER_NAME: u32 = 15004;
    pub const ERROR_EVT_INVALID_EVENT_DATA: u32 = 15005;
    pub const ERROR_EVT_CHANNEL_NOT_FOUND: u32 = 15007;
    pub const ERROR_EVT_MALFORMED_XML_TEXT: u32 = 15008;
    pub const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL: u32 = 15009;
    pub const ERROR_EVT_CONFIGURATION_ERROR: u32 = 15010;
    pub const ERROR_EVT_QUERY_RESULT_STALE: u32 = 15011;
    pub const ERROR_EVT_QUERY_RESULT_INVALID_POSITION: u32 = 15012;
    pub const ERROR_EVT_NON_VALIDATING_MSXML: u32 = 15013;
    pub const ERROR_EVT_FILTER_ALREADYSCOPED: u32 = 15014;
    pub const ERROR_EVT_FILTER_NOTELTSET: u32 = 15015;
    pub const ERROR_EVT_FILTER_INVARG: u32 = 15016;
    pub const ERROR_EVT_FILTER_INVTEST: u32 = 15017;
    pub const ERROR_EVT_FILTER_INVTYPE: u32 = 15018;
    pub const ERROR_EVT_FILTER_PARSEERR: u32 = 15019;
    pub const ERROR_EVT_FILTER_UNSUPPORTEDOP: u32 = 15020;
    pub const ERROR_EVT_FILTER_UNEXPECTEDTOKEN: u32 = 15021;
    pub const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL: u32 = 15022;
    pub const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE: u32 = 15023;
    pub const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE: u32 = 15024;
    pub const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE: u32 = 15025;
    pub const ERROR_EVT_FILTER_TOO_COMPLEX: u32 = 15026;
    pub const ERROR_EVT_MESSAGE_NOT_FOUND: u32 = 15027;
    pub const ERROR_EVT_MESSAGE_ID_NOT_FOUND: u32 = 15028;
    pub const ERROR_EVT_UNRESOLVED_VALUE_INSERT: u32 = 15029;
    pub const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT: u32 = 15030;
    pub const ERROR_EVT_MAX_INSERTS_REACHED: u32 = 15031;
    pub const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND: u32 = 15032;
    pub const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND: u32 = 15033;
    pub const ERROR_EVT_VERSION_TOO_OLD: u32 = 15034;
    pub const ERROR_EVT_VERSION_TOO_NEW: u32 = 15035;
    pub const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY: u32 = 15036;
    pub const ERROR_EVT_PUBLISHER_DISABLED: u32 = 15037;
    pub const ERROR_EVT_FILTER_OUT_OF_RANGE: u32 = 15038;
    pub const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE: u32 = 15080;
    pub const ERROR_EC_LOG_DISABLED: u32 = 15081;
    pub const ERROR_EC_CIRCULAR_FORWARDING: u32 = 15082;
    pub const ERROR_EC_CREDSTORE_FULL: u32 = 15083;
    pub const ERROR_EC_CRED_NOT_FOUND: u32 = 15084;
    pub const ERROR_EC_NO_ACTIVE_CHANNEL: u32 = 15085;
    pub const ERROR_MUI_FILE_NOT_FOUND: u32 = 15100;
    pub const ERROR_MUI_INVALID_FILE: u32 = 15101;
    pub const ERROR_MUI_INVALID_RC_CONFIG: u32 = 15102;
    pub const ERROR_MUI_INVALID_LOCALE_NAME: u32 = 15103;
    pub const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME: u32 = 15104;
    pub const ERROR_MUI_FILE_NOT_LOADED: u32 = 15105;
    pub const ERROR_RESOURCE_ENUM_USER_STOP: u32 = 15106;
    pub const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED: u32 = 15107;
    pub const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME: u32 = 15108;
    pub const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE: u32 = 15110;
    pub const ERROR_MRM_INVALID_PRICONFIG: u32 = 15111;
    pub const ERROR_MRM_INVALID_FILE_TYPE: u32 = 15112;
    pub const ERROR_MRM_UNKNOWN_QUALIFIER: u32 = 15113;
    pub const ERROR_MRM_INVALID_QUALIFIER_VALUE: u32 = 15114;
    pub const ERROR_MRM_NO_CANDIDATE: u32 = 15115;
    pub const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE: u32 = 15116;
    pub const ERROR_MRM_RESOURCE_TYPE_MISMATCH: u32 = 15117;
    pub const ERROR_MRM_DUPLICATE_MAP_NAME: u32 = 15118;
    pub const ERROR_MRM_DUPLICATE_ENTRY: u32 = 15119;
    pub const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER: u32 = 15120;
    pub const ERROR_MRM_FILEPATH_TOO_LONG: u32 = 15121;
    pub const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE: u32 = 15122;
    pub const ERROR_MRM_INVALID_PRI_FILE: u32 = 15126;
    pub const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND: u32 = 15127;
    pub const ERROR_MRM_MAP_NOT_FOUND: u32 = 15135;
    pub const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE: u32 = 15136;
    pub const ERROR_MRM_INVALID_QUALIFIER_OPERATOR: u32 = 15137;
    pub const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE: u32 = 15138;
    pub const ERROR_MRM_AUTOMERGE_ENABLED: u32 = 15139;
    pub const ERROR_MRM_TOO_MANY_RESOURCES: u32 = 15140;
    pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE: u32 = 15141;
    pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE: u32 = 15142;
    pub const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD: u32 = 15143;
    pub const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST: u32 = 15144;
    pub const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT: u32 = 15145;
    pub const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE: u32 = 15146;
    pub const ERROR_MRM_GENERATION_COUNT_MISMATCH: u32 = 15147;
    pub const ERROR_PRI_MERGE_VERSION_MISMATCH: u32 = 15148;
    pub const ERROR_PRI_MERGE_MISSING_SCHEMA: u32 = 15149;
    pub const ERROR_PRI_MERGE_LOAD_FILE_FAILED: u32 = 15150;
    pub const ERROR_PRI_MERGE_ADD_FILE_FAILED: u32 = 15151;
    pub const ERROR_PRI_MERGE_WRITE_FILE_FAILED: u32 = 15152;
    pub const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED: u32 = 15153;
    pub const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED: u32 = 15154;
    pub const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED: u32 = 15155;
    pub const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED: u32 = 15156;
    pub const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED: u32 = 15157;
    pub const ERROR_PRI_MERGE_INVALID_FILE_NAME: u32 = 15158;
    pub const ERROR_MRM_PACKAGE_NOT_FOUND: u32 = 15159;
    pub const ERROR_MRM_MISSING_DEFAULT_LANGUAGE: u32 = 15160;
    pub const ERROR_MCA_INVALID_CAPABILITIES_STRING: u32 = 15200;
    pub const ERROR_MCA_INVALID_VCP_VERSION: u32 = 15201;
    pub const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION: u32 = 15202;
    pub const ERROR_MCA_MCCS_VERSION_MISMATCH: u32 = 15203;
    pub const ERROR_MCA_UNSUPPORTED_MCCS_VERSION: u32 = 15204;
    pub const ERROR_MCA_INTERNAL_ERROR: u32 = 15205;
    pub const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED: u32 = 15206;
    pub const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE: u32 = 15207;
    pub const ERROR_AMBIGUOUS_SYSTEM_DEVICE: u32 = 15250;
    pub const ERROR_SYSTEM_DEVICE_NOT_FOUND: u32 = 15299;
    pub const ERROR_HASH_NOT_SUPPORTED: u32 = 15300;
    pub const ERROR_HASH_NOT_PRESENT: u32 = 15301;
    pub const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED: u32 = 15321;
    pub const ERROR_GPIO_CLIENT_INFORMATION_INVALID: u32 = 15322;
    pub const ERROR_GPIO_VERSION_NOT_SUPPORTED: u32 = 15323;
    pub const ERROR_GPIO_INVALID_REGISTRATION_PACKET: u32 = 15324;
    pub const ERROR_GPIO_OPERATION_DENIED: u32 = 15325;
    pub const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE: u32 = 15326;
    pub const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED: u32 = 15327;
    pub const ERROR_CANNOT_SWITCH_RUNLEVEL: u32 = 15400;
    pub const ERROR_INVALID_RUNLEVEL_SETTING: u32 = 15401;
    pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: u32 = 15402;
    pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: u32 = 15403;
    pub const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS: u32 = 15404;
    pub const ERROR_SERVICES_FAILED_AUTOSTART: u32 = 15405;
    pub const ERROR_COM_TASK_STOP_PENDING: u32 = 15501;
    pub const ERROR_INSTALL_OPEN_PACKAGE_FAILED: u32 = 15600;
    pub const ERROR_INSTALL_PACKAGE_NOT_FOUND: u32 = 15601;
    pub const ERROR_INSTALL_INVALID_PACKAGE: u32 = 15602;
    pub const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED: u32 = 15603;
    pub const ERROR_INSTALL_OUT_OF_DISK_SPACE: u32 = 15604;
    pub const ERROR_INSTALL_NETWORK_FAILURE: u32 = 15605;
    pub const ERROR_INSTALL_REGISTRATION_FAILURE: u32 = 15606;
    pub const ERROR_INSTALL_DEREGISTRATION_FAILURE: u32 = 15607;
    pub const ERROR_INSTALL_CANCEL: u32 = 15608;
    pub const ERROR_INSTALL_FAILED: u32 = 15609;
    pub const ERROR_REMOVE_FAILED: u32 = 15610;
    pub const ERROR_PACKAGE_ALREADY_EXISTS: u32 = 15611;
    pub const ERROR_NEEDS_REMEDIATION: u32 = 15612;
    pub const ERROR_INSTALL_PREREQUISITE_FAILED: u32 = 15613;
    pub const ERROR_PACKAGE_REPOSITORY_CORRUPTED: u32 = 15614;
    pub const ERROR_INSTALL_POLICY_FAILURE: u32 = 15615;
    pub const ERROR_PACKAGE_UPDATING: u32 = 15616;
    pub const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY: u32 = 15617;
    pub const ERROR_PACKAGES_IN_USE: u32 = 15618;
    pub const ERROR_RECOVERY_FILE_CORRUPT: u32 = 15619;
    pub const ERROR_INVALID_STAGED_SIGNATURE: u32 = 15620;
    pub const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED: u32 = 15621;
    pub const ERROR_INSTALL_PACKAGE_DOWNGRADE: u32 = 15622;
    pub const ERROR_SYSTEM_NEEDS_REMEDIATION: u32 = 15623;
    pub const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN: u32 = 15624;
    pub const ERROR_RESILIENCY_FILE_CORRUPT: u32 = 15625;
    pub const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING: u32 = 15626;
    pub const ERROR_PACKAGE_MOVE_FAILED: u32 = 15627;
    pub const ERROR_INSTALL_VOLUME_NOT_EMPTY: u32 = 15628;
    pub const ERROR_INSTALL_VOLUME_OFFLINE: u32 = 15629;
    pub const ERROR_INSTALL_VOLUME_CORRUPT: u32 = 15630;
    pub const ERROR_NEEDS_REGISTRATION: u32 = 15631;
    pub const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE: u32 = 15632;
    pub const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED: u32 = 15633;
    pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE: u32 = 15634;
    pub const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM: u32 = 15635;
    pub const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING: u32 = 15636;
    pub const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE: u32 = 15637;
    pub const ERROR_PACKAGE_STAGING_ONHOLD: u32 = 15638;
    pub const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE: u32 = 15639;
    pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY: u32 =
        15640;
    pub const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF: u32 = 15641;
    pub const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED: u32 = 15642;
    pub const ERROR_PACKAGES_REPUTATION_CHECK_FAILED: u32 = 15643;
    pub const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT: u32 = 15644;
    pub const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED: u32 = 15645;
    pub const ERROR_APPINSTALLER_ACTIVATION_BLOCKED: u32 = 15646;
    pub const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED: u32 = 15647;
    pub const ERROR_APPX_RAW_DATA_WRITE_FAILED: u32 = 15648;
    pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE: u32 = 15649;
    pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE: u32 = 15650;
    pub const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY: u32 = 15651;
    pub const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY: u32 = 15652;
    pub const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER: u32 = 15653;
    pub const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED: u32 = 15654;
    pub const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE: u32 = 15655;
    pub const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES: u32 = 15656;
    pub const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED: u32 = 15657;
    pub const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST: u32 = 15658;
    pub const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT: u32 = 15659;
    pub const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE: u32 = 15660;
    pub const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE: u32 = 15661;
    pub const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED: u32 = 15662;
    pub const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY: u32 =
        15663;
    pub const APPMODEL_ERROR_NO_PACKAGE: u32 = 15700;
    pub const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT: u32 = 15701;
    pub const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT: u32 = 15702;
    pub const APPMODEL_ERROR_NO_APPLICATION: u32 = 15703;
    pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED: u32 = 15704;
    pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID: u32 = 15705;
    pub const APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE: u32 = 15706;
    pub const APPMODEL_ERROR_NO_MUTABLE_DIRECTORY: u32 = 15707;
    pub const ERROR_STATE_LOAD_STORE_FAILED: u32 = 15800;
    pub const ERROR_STATE_GET_VERSION_FAILED: u32 = 15801;
    pub const ERROR_STATE_SET_VERSION_FAILED: u32 = 15802;
    pub const ERROR_STATE_STRUCTURED_RESET_FAILED: u32 = 15803;
    pub const ERROR_STATE_OPEN_CONTAINER_FAILED: u32 = 15804;
    pub const ERROR_STATE_CREATE_CONTAINER_FAILED: u32 = 15805;
    pub const ERROR_STATE_DELETE_CONTAINER_FAILED: u32 = 15806;
    pub const ERROR_STATE_READ_SETTING_FAILED: u32 = 15807;
    pub const ERROR_STATE_WRITE_SETTING_FAILED: u32 = 15808;
    pub const ERROR_STATE_DELETE_SETTING_FAILED: u32 = 15809;
    pub const ERROR_STATE_QUERY_SETTING_FAILED: u32 = 15810;
    pub const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED: u32 = 15811;
    pub const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED: u32 = 15812;
    pub const ERROR_STATE_ENUMERATE_CONTAINER_FAILED: u32 = 15813;
    pub const ERROR_STATE_ENUMERATE_SETTINGS_FAILED: u32 = 15814;
    pub const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: u32 = 15815;
    pub const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: u32 = 15816;
    pub const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED: u32 = 15817;
    pub const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED: u32 = 15818;
    pub const ERROR_API_UNAVAILABLE: u32 = 15841;
    pub const STORE_ERROR_UNLICENSED: u32 = 15861;
    pub const STORE_ERROR_UNLICENSED_USER: u32 = 15862;
    pub const STORE_ERROR_PENDING_COM_TRANSACTION: u32 = 15863;
    pub const STORE_ERROR_LICENSE_REVOKED: u32 = 15864;
    pub const SEVERITY_SUCCESS: u32 = 0;
    pub const SEVERITY_ERROR: u32 = 1;
    pub const FACILITY_NT_BIT: u32 = 268435456;
    pub const NOERROR: u32 = 0;
    pub const DRAGDROP_E_FIRST: u32 = 2147746048;
    pub const DRAGDROP_E_LAST: u32 = 2147746063;
    pub const DRAGDROP_S_FIRST: u32 = 262400;
    pub const DRAGDROP_S_LAST: u32 = 262415;
    pub const CLASSFACTORY_E_FIRST: u32 = 2147746064;
    pub const CLASSFACTORY_E_LAST: u32 = 2147746079;
    pub const CLASSFACTORY_S_FIRST: u32 = 262416;
    pub const CLASSFACTORY_S_LAST: u32 = 262431;
    pub const MARSHAL_E_FIRST: u32 = 2147746080;
    pub const MARSHAL_E_LAST: u32 = 2147746095;
    pub const MARSHAL_S_FIRST: u32 = 262432;
    pub const MARSHAL_S_LAST: u32 = 262447;
    pub const DATA_E_FIRST: u32 = 2147746096;
    pub const DATA_E_LAST: u32 = 2147746111;
    pub const DATA_S_FIRST: u32 = 262448;
    pub const DATA_S_LAST: u32 = 262463;
    pub const VIEW_E_FIRST: u32 = 2147746112;
    pub const VIEW_E_LAST: u32 = 2147746127;
    pub const VIEW_S_FIRST: u32 = 262464;
    pub const VIEW_S_LAST: u32 = 262479;
    pub const REGDB_E_FIRST: u32 = 2147746128;
    pub const REGDB_E_LAST: u32 = 2147746143;
    pub const REGDB_S_FIRST: u32 = 262480;
    pub const REGDB_S_LAST: u32 = 262495;
    pub const CAT_E_FIRST: u32 = 2147746144;
    pub const CAT_E_LAST: u32 = 2147746145;
    pub const CS_E_FIRST: u32 = 2147746148;
    pub const CS_E_LAST: u32 = 2147746159;
    pub const CACHE_E_FIRST: u32 = 2147746160;
    pub const CACHE_E_LAST: u32 = 2147746175;
    pub const CACHE_S_FIRST: u32 = 262512;
    pub const CACHE_S_LAST: u32 = 262527;
    pub const OLEOBJ_E_FIRST: u32 = 2147746176;
    pub const OLEOBJ_E_LAST: u32 = 2147746191;
    pub const OLEOBJ_S_FIRST: u32 = 262528;
    pub const OLEOBJ_S_LAST: u32 = 262543;
    pub const CLIENTSITE_E_FIRST: u32 = 2147746192;
    pub const CLIENTSITE_E_LAST: u32 = 2147746207;
    pub const CLIENTSITE_S_FIRST: u32 = 262544;
    pub const CLIENTSITE_S_LAST: u32 = 262559;
    pub const INPLACE_E_FIRST: u32 = 2147746208;
    pub const INPLACE_E_LAST: u32 = 2147746223;
    pub const INPLACE_S_FIRST: u32 = 262560;
    pub const INPLACE_S_LAST: u32 = 262575;
    pub const ENUM_E_FIRST: u32 = 2147746224;
    pub const ENUM_E_LAST: u32 = 2147746239;
    pub const ENUM_S_FIRST: u32 = 262576;
    pub const ENUM_S_LAST: u32 = 262591;
    pub const CONVERT10_E_FIRST: u32 = 2147746240;
    pub const CONVERT10_E_LAST: u32 = 2147746255;
    pub const CONVERT10_S_FIRST: u32 = 262592;
    pub const CONVERT10_S_LAST: u32 = 262607;
    pub const CLIPBRD_E_FIRST: u32 = 2147746256;
    pub const CLIPBRD_E_LAST: u32 = 2147746271;
    pub const CLIPBRD_S_FIRST: u32 = 262608;
    pub const CLIPBRD_S_LAST: u32 = 262623;
    pub const MK_E_FIRST: u32 = 2147746272;
    pub const MK_E_LAST: u32 = 2147746287;
    pub const MK_S_FIRST: u32 = 262624;
    pub const MK_S_LAST: u32 = 262639;
    pub const CO_E_FIRST: u32 = 2147746288;
    pub const CO_E_LAST: u32 = 2147746303;
    pub const CO_S_FIRST: u32 = 262640;
    pub const CO_S_LAST: u32 = 262655;
    pub const EVENT_E_FIRST: u32 = 2147746304;
    pub const EVENT_E_LAST: u32 = 2147746335;
    pub const EVENT_S_FIRST: u32 = 262656;
    pub const EVENT_S_LAST: u32 = 262687;
    pub const XACT_E_FIRST: u32 = 2147799040;
    pub const XACT_E_LAST: u32 = 2147799083;
    pub const XACT_S_FIRST: u32 = 315392;
    pub const XACT_S_LAST: u32 = 315408;
    pub const CONTEXT_E_FIRST: u32 = 2147803136;
    pub const CONTEXT_E_LAST: u32 = 2147803183;
    pub const CONTEXT_S_FIRST: u32 = 319488;
    pub const CONTEXT_S_LAST: u32 = 319535;
    pub const NTE_OP_OK: u32 = 0;
    pub const SCARD_S_SUCCESS: u32 = 0;
    pub const TC_NORMAL: u32 = 0;
    pub const TC_HARDERR: u32 = 1;
    pub const TC_GP_TRAP: u32 = 2;
    pub const TC_SIGNAL: u32 = 3;
    pub const AC_LINE_OFFLINE: u32 = 0;
    pub const AC_LINE_ONLINE: u32 = 1;
    pub const AC_LINE_BACKUP_POWER: u32 = 2;
    pub const AC_LINE_UNKNOWN: u32 = 255;
    pub const BATTERY_FLAG_HIGH: u32 = 1;
    pub const BATTERY_FLAG_LOW: u32 = 2;
    pub const BATTERY_FLAG_CRITICAL: u32 = 4;
    pub const BATTERY_FLAG_CHARGING: u32 = 8;
    pub const BATTERY_FLAG_NO_BATTERY: u32 = 128;
    pub const BATTERY_FLAG_UNKNOWN: u32 = 255;
    pub const BATTERY_PERCENTAGE_UNKNOWN: u32 = 255;
    pub const SYSTEM_STATUS_FLAG_POWER_SAVING_ON: u32 = 1;
    pub const BATTERY_LIFE_UNKNOWN: u32 = 4294967295;
    pub const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID: u32 = 1;
    pub const ACTCTX_FLAG_LANGID_VALID: u32 = 2;
    pub const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID: u32 = 4;
    pub const ACTCTX_FLAG_RESOURCE_NAME_VALID: u32 = 8;
    pub const ACTCTX_FLAG_SET_PROCESS_DEFAULT: u32 = 16;
    pub const ACTCTX_FLAG_APPLICATION_NAME_VALID: u32 = 32;
    pub const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF: u32 = 64;
    pub const ACTCTX_FLAG_HMODULE_VALID: u32 = 128;
    pub const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION: u32 = 1;
    pub const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX: u32 = 1;
    pub const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS: u32 = 2;
    pub const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA: u32 = 4;
    pub const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED: u32 = 1;
    pub const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX: u32 = 4;
    pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE: u32 = 8;
    pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS: u32 = 16;
    pub const QUERY_ACTCTX_FLAG_NO_ADDREF: u32 = 2147483648;
    pub const RESTART_MAX_CMD_LINE: u32 = 1024;
    pub const RESTART_NO_CRASH: u32 = 1;
    pub const RESTART_NO_HANG: u32 = 2;
    pub const RESTART_NO_PATCH: u32 = 4;
    pub const RESTART_NO_REBOOT: u32 = 8;
    pub const RECOVERY_DEFAULT_PING_INTERVAL: u32 = 5000;
    pub const RECOVERY_MAX_PING_INTERVAL: u32 = 300000;
    pub const FILE_RENAME_FLAG_REPLACE_IF_EXISTS: u32 = 1;
    pub const FILE_RENAME_FLAG_POSIX_SEMANTICS: u32 = 2;
    pub const FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE: u32 = 4;
    pub const FILE_DISPOSITION_FLAG_DO_NOT_DELETE: u32 = 0;
    pub const FILE_DISPOSITION_FLAG_DELETE: u32 = 1;
    pub const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS: u32 = 2;
    pub const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK: u32 = 4;
    pub const FILE_DISPOSITION_FLAG_ON_CLOSE: u32 = 8;
    pub const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE: u32 = 16;
    pub const STORAGE_INFO_FLAGS_ALIGNED_DEVICE: u32 = 1;
    pub const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE: u32 = 2;
    pub const STORAGE_INFO_OFFSET_UNKNOWN: u32 = 4294967295;
    pub const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK: u32 = 1;
    pub const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE: u32 = 2;
    pub const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE: u32 = 4;
    pub const RPI_FLAG_SMB2_SHARECAP_TIMEWARP: u32 = 2;
    pub const RPI_FLAG_SMB2_SHARECAP_DFS: u32 = 8;
    pub const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY: u32 = 16;
    pub const RPI_FLAG_SMB2_SHARECAP_SCALEOUT: u32 = 32;
    pub const RPI_FLAG_SMB2_SHARECAP_CLUSTER: u32 = 64;
    pub const RPI_SMB2_FLAG_SERVERCAP_DFS: u32 = 1;
    pub const RPI_SMB2_FLAG_SERVERCAP_LEASING: u32 = 2;
    pub const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU: u32 = 4;
    pub const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL: u32 = 8;
    pub const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES: u32 = 16;
    pub const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING: u32 = 32;
    pub const SYMBOLIC_LINK_FLAG_DIRECTORY: u32 = 1;
    pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE: u32 = 2;
    pub const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: u32 = 0;
    pub const R2_BLACK: u32 = 1;
    pub const R2_NOTMERGEPEN: u32 = 2;
    pub const R2_MASKNOTPEN: u32 = 3;
    pub const R2_NOTCOPYPEN: u32 = 4;
    pub const R2_MASKPENNOT: u32 = 5;
    pub const R2_NOT: u32 = 6;
    pub const R2_XORPEN: u32 = 7;
    pub const R2_NOTMASKPEN: u32 = 8;
    pub const R2_MASKPEN: u32 = 9;
    pub const R2_NOTXORPEN: u32 = 10;
    pub const R2_NOP: u32 = 11;
    pub const R2_MERGENOTPEN: u32 = 12;
    pub const R2_COPYPEN: u32 = 13;
    pub const R2_MERGEPENNOT: u32 = 14;
    pub const R2_MERGEPEN: u32 = 15;
    pub const R2_WHITE: u32 = 16;
    pub const R2_LAST: u32 = 16;
    pub const GDI_ERROR: u32 = 4294967295;
    pub const ERROR: u32 = 0;
    pub const NULLREGION: u32 = 1;
    pub const SIMPLEREGION: u32 = 2;
    pub const COMPLEXREGION: u32 = 3;
    pub const RGN_ERROR: u32 = 0;
    pub const RGN_AND: u32 = 1;
    pub const RGN_OR: u32 = 2;
    pub const RGN_XOR: u32 = 3;
    pub const RGN_DIFF: u32 = 4;
    pub const RGN_COPY: u32 = 5;
    pub const RGN_MIN: u32 = 1;
    pub const RGN_MAX: u32 = 5;
    pub const BLACKONWHITE: u32 = 1;
    pub const WHITEONBLACK: u32 = 2;
    pub const COLORONCOLOR: u32 = 3;
    pub const HALFTONE: u32 = 4;
    pub const MAXSTRETCHBLTMODE: u32 = 4;
    pub const STRETCH_ANDSCANS: u32 = 1;
    pub const STRETCH_ORSCANS: u32 = 2;
    pub const STRETCH_DELETESCANS: u32 = 3;
    pub const STRETCH_HALFTONE: u32 = 4;
    pub const ALTERNATE: u32 = 1;
    pub const WINDING: u32 = 2;
    pub const POLYFILL_LAST: u32 = 2;
    pub const LAYOUT_RTL: u32 = 1;
    pub const LAYOUT_BTT: u32 = 2;
    pub const LAYOUT_VBH: u32 = 4;
    pub const LAYOUT_ORIENTATIONMASK: u32 = 7;
    pub const LAYOUT_BITMAPORIENTATIONPRESERVED: u32 = 8;
    pub const TA_NOUPDATECP: u32 = 0;
    pub const TA_UPDATECP: u32 = 1;
    pub const TA_LEFT: u32 = 0;
    pub const TA_RIGHT: u32 = 2;
    pub const TA_CENTER: u32 = 6;
    pub const TA_TOP: u32 = 0;
    pub const TA_BOTTOM: u32 = 8;
    pub const TA_BASELINE: u32 = 24;
    pub const TA_RTLREADING: u32 = 256;
    pub const TA_MASK: u32 = 287;
    pub const VTA_BASELINE: u32 = 24;
    pub const VTA_LEFT: u32 = 8;
    pub const VTA_RIGHT: u32 = 0;
    pub const VTA_CENTER: u32 = 6;
    pub const VTA_BOTTOM: u32 = 2;
    pub const VTA_TOP: u32 = 0;
    pub const ETO_OPAQUE: u32 = 2;
    pub const ETO_CLIPPED: u32 = 4;
    pub const ETO_GLYPH_INDEX: u32 = 16;
    pub const ETO_RTLREADING: u32 = 128;
    pub const ETO_NUMERICSLOCAL: u32 = 1024;
    pub const ETO_NUMERICSLATIN: u32 = 2048;
    pub const ETO_IGNORELANGUAGE: u32 = 4096;
    pub const ETO_PDY: u32 = 8192;
    pub const ETO_REVERSE_INDEX_MAP: u32 = 65536;
    pub const ASPECT_FILTERING: u32 = 1;
    pub const DCB_RESET: u32 = 1;
    pub const DCB_ACCUMULATE: u32 = 2;
    pub const DCB_DIRTY: u32 = 2;
    pub const DCB_SET: u32 = 3;
    pub const DCB_ENABLE: u32 = 4;
    pub const DCB_DISABLE: u32 = 8;
    pub const META_SETBKCOLOR: u32 = 513;
    pub const META_SETBKMODE: u32 = 258;
    pub const META_SETMAPMODE: u32 = 259;
    pub const META_SETROP2: u32 = 260;
    pub const META_SETRELABS: u32 = 261;
    pub const META_SETPOLYFILLMODE: u32 = 262;
    pub const META_SETSTRETCHBLTMODE: u32 = 263;
    pub const META_SETTEXTCHAREXTRA: u32 = 264;
    pub const META_SETTEXTCOLOR: u32 = 521;
    pub const META_SETTEXTJUSTIFICATION: u32 = 522;
    pub const META_SETWINDOWORG: u32 = 523;
    pub const META_SETWINDOWEXT: u32 = 524;
    pub const META_SETVIEWPORTORG: u32 = 525;
    pub const META_SETVIEWPORTEXT: u32 = 526;
    pub const META_OFFSETWINDOWORG: u32 = 527;
    pub const META_SCALEWINDOWEXT: u32 = 1040;
    pub const META_OFFSETVIEWPORTORG: u32 = 529;
    pub const META_SCALEVIEWPORTEXT: u32 = 1042;
    pub const META_LINETO: u32 = 531;
    pub const META_MOVETO: u32 = 532;
    pub const META_EXCLUDECLIPRECT: u32 = 1045;
    pub const META_INTERSECTCLIPRECT: u32 = 1046;
    pub const META_ARC: u32 = 2071;
    pub const META_ELLIPSE: u32 = 1048;
    pub const META_FLOODFILL: u32 = 1049;
    pub const META_PIE: u32 = 2074;
    pub const META_RECTANGLE: u32 = 1051;
    pub const META_ROUNDRECT: u32 = 1564;
    pub const META_PATBLT: u32 = 1565;
    pub const META_SAVEDC: u32 = 30;
    pub const META_SETPIXEL: u32 = 1055;
    pub const META_OFFSETCLIPRGN: u32 = 544;
    pub const META_TEXTOUT: u32 = 1313;
    pub const META_BITBLT: u32 = 2338;
    pub const META_STRETCHBLT: u32 = 2851;
    pub const META_POLYGON: u32 = 804;
    pub const META_POLYLINE: u32 = 805;
    pub const META_ESCAPE: u32 = 1574;
    pub const META_RESTOREDC: u32 = 295;
    pub const META_FILLREGION: u32 = 552;
    pub const META_FRAMEREGION: u32 = 1065;
    pub const META_INVERTREGION: u32 = 298;
    pub const META_PAINTREGION: u32 = 299;
    pub const META_SELECTCLIPREGION: u32 = 300;
    pub const META_SELECTOBJECT: u32 = 301;
    pub const META_SETTEXTALIGN: u32 = 302;
    pub const META_CHORD: u32 = 2096;
    pub const META_SETMAPPERFLAGS: u32 = 561;
    pub const META_EXTTEXTOUT: u32 = 2610;
    pub const META_SETDIBTODEV: u32 = 3379;
    pub const META_SELECTPALETTE: u32 = 564;
    pub const META_REALIZEPALETTE: u32 = 53;
    pub const META_ANIMATEPALETTE: u32 = 1078;
    pub const META_SETPALENTRIES: u32 = 55;
    pub const META_POLYPOLYGON: u32 = 1336;
    pub const META_RESIZEPALETTE: u32 = 313;
    pub const META_DIBBITBLT: u32 = 2368;
    pub const META_DIBSTRETCHBLT: u32 = 2881;
    pub const META_DIBCREATEPATTERNBRUSH: u32 = 322;
    pub const META_STRETCHDIB: u32 = 3907;
    pub const META_EXTFLOODFILL: u32 = 1352;
    pub const META_SETLAYOUT: u32 = 329;
    pub const META_DELETEOBJECT: u32 = 496;
    pub const META_CREATEPALETTE: u32 = 247;
    pub const META_CREATEPATTERNBRUSH: u32 = 505;
    pub const META_CREATEPENINDIRECT: u32 = 762;
    pub const META_CREATEFONTINDIRECT: u32 = 763;
    pub const META_CREATEBRUSHINDIRECT: u32 = 764;
    pub const META_CREATEREGION: u32 = 1791;
    pub const NEWFRAME: u32 = 1;
    pub const ABORTDOC: u32 = 2;
    pub const NEXTBAND: u32 = 3;
    pub const SETCOLORTABLE: u32 = 4;
    pub const GETCOLORTABLE: u32 = 5;
    pub const FLUSHOUTPUT: u32 = 6;
    pub const DRAFTMODE: u32 = 7;
    pub const QUERYESCSUPPORT: u32 = 8;
    pub const SETABORTPROC: u32 = 9;
    pub const STARTDOC: u32 = 10;
    pub const ENDDOC: u32 = 11;
    pub const GETPHYSPAGESIZE: u32 = 12;
    pub const GETPRINTINGOFFSET: u32 = 13;
    pub const GETSCALINGFACTOR: u32 = 14;
    pub const MFCOMMENT: u32 = 15;
    pub const GETPENWIDTH: u32 = 16;
    pub const SETCOPYCOUNT: u32 = 17;
    pub const SELECTPAPERSOURCE: u32 = 18;
    pub const DEVICEDATA: u32 = 19;
    pub const PASSTHROUGH: u32 = 19;
    pub const GETTECHNOLGY: u32 = 20;
    pub const GETTECHNOLOGY: u32 = 20;
    pub const SETLINECAP: u32 = 21;
    pub const SETLINEJOIN: u32 = 22;
    pub const SETMITERLIMIT: u32 = 23;
    pub const BANDINFO: u32 = 24;
    pub const DRAWPATTERNRECT: u32 = 25;
    pub const GETVECTORPENSIZE: u32 = 26;
    pub const GETVECTORBRUSHSIZE: u32 = 27;
    pub const ENABLEDUPLEX: u32 = 28;
    pub const GETSETPAPERBINS: u32 = 29;
    pub const GETSETPRINTORIENT: u32 = 30;
    pub const ENUMPAPERBINS: u32 = 31;
    pub const SETDIBSCALING: u32 = 32;
    pub const EPSPRINTING: u32 = 33;
    pub const ENUMPAPERMETRICS: u32 = 34;
    pub const GETSETPAPERMETRICS: u32 = 35;
    pub const POSTSCRIPT_DATA: u32 = 37;
    pub const POSTSCRIPT_IGNORE: u32 = 38;
    pub const MOUSETRAILS: u32 = 39;
    pub const GETDEVICEUNITS: u32 = 42;
    pub const GETEXTENDEDTEXTMETRICS: u32 = 256;
    pub const GETEXTENTTABLE: u32 = 257;
    pub const GETPAIRKERNTABLE: u32 = 258;
    pub const GETTRACKKERNTABLE: u32 = 259;
    pub const EXTTEXTOUT: u32 = 512;
    pub const GETFACENAME: u32 = 513;
    pub const DOWNLOADFACE: u32 = 514;
    pub const ENABLERELATIVEWIDTHS: u32 = 768;
    pub const ENABLEPAIRKERNING: u32 = 769;
    pub const SETKERNTRACK: u32 = 770;
    pub const SETALLJUSTVALUES: u32 = 771;
    pub const SETCHARSET: u32 = 772;
    pub const STRETCHBLT: u32 = 2048;
    pub const METAFILE_DRIVER: u32 = 2049;
    pub const GETSETSCREENPARAMS: u32 = 3072;
    pub const QUERYDIBSUPPORT: u32 = 3073;
    pub const BEGIN_PATH: u32 = 4096;
    pub const CLIP_TO_PATH: u32 = 4097;
    pub const END_PATH: u32 = 4098;
    pub const EXT_DEVICE_CAPS: u32 = 4099;
    pub const RESTORE_CTM: u32 = 4100;
    pub const SAVE_CTM: u32 = 4101;
    pub const SET_ARC_DIRECTION: u32 = 4102;
    pub const SET_BACKGROUND_COLOR: u32 = 4103;
    pub const SET_POLY_MODE: u32 = 4104;
    pub const SET_SCREEN_ANGLE: u32 = 4105;
    pub const SET_SPREAD: u32 = 4106;
    pub const TRANSFORM_CTM: u32 = 4107;
    pub const SET_CLIP_BOX: u32 = 4108;
    pub const SET_BOUNDS: u32 = 4109;
    pub const SET_MIRROR_MODE: u32 = 4110;
    pub const OPENCHANNEL: u32 = 4110;
    pub const DOWNLOADHEADER: u32 = 4111;
    pub const CLOSECHANNEL: u32 = 4112;
    pub const POSTSCRIPT_PASSTHROUGH: u32 = 4115;
    pub const ENCAPSULATED_POSTSCRIPT: u32 = 4116;
    pub const POSTSCRIPT_IDENTIFY: u32 = 4117;
    pub const POSTSCRIPT_INJECTION: u32 = 4118;
    pub const CHECKJPEGFORMAT: u32 = 4119;
    pub const CHECKPNGFORMAT: u32 = 4120;
    pub const GET_PS_FEATURESETTING: u32 = 4121;
    pub const GDIPLUS_TS_QUERYVER: u32 = 4122;
    pub const GDIPLUS_TS_RECORD: u32 = 4123;
    pub const MILCORE_TS_QUERYVER_RESULT_FALSE: u32 = 0;
    pub const MILCORE_TS_QUERYVER_RESULT_TRUE: u32 = 2147483647;
    pub const SPCLPASSTHROUGH2: u32 = 4568;
    pub const PSIDENT_GDICENTRIC: u32 = 0;
    pub const PSIDENT_PSCENTRIC: u32 = 1;
    pub const PSINJECT_BEGINSTREAM: u32 = 1;
    pub const PSINJECT_PSADOBE: u32 = 2;
    pub const PSINJECT_PAGESATEND: u32 = 3;
    pub const PSINJECT_PAGES: u32 = 4;
    pub const PSINJECT_DOCNEEDEDRES: u32 = 5;
    pub const PSINJECT_DOCSUPPLIEDRES: u32 = 6;
    pub const PSINJECT_PAGEORDER: u32 = 7;
    pub const PSINJECT_ORIENTATION: u32 = 8;
    pub const PSINJECT_BOUNDINGBOX: u32 = 9;
    pub const PSINJECT_DOCUMENTPROCESSCOLORS: u32 = 10;
    pub const PSINJECT_COMMENTS: u32 = 11;
    pub const PSINJECT_BEGINDEFAULTS: u32 = 12;
    pub const PSINJECT_ENDDEFAULTS: u32 = 13;
    pub const PSINJECT_BEGINPROLOG: u32 = 14;
    pub const PSINJECT_ENDPROLOG: u32 = 15;
    pub const PSINJECT_BEGINSETUP: u32 = 16;
    pub const PSINJECT_ENDSETUP: u32 = 17;
    pub const PSINJECT_TRAILER: u32 = 18;
    pub const PSINJECT_EOF: u32 = 19;
    pub const PSINJECT_ENDSTREAM: u32 = 20;
    pub const PSINJECT_DOCUMENTPROCESSCOLORSATEND: u32 = 21;
    pub const PSINJECT_PAGENUMBER: u32 = 100;
    pub const PSINJECT_BEGINPAGESETUP: u32 = 101;
    pub const PSINJECT_ENDPAGESETUP: u32 = 102;
    pub const PSINJECT_PAGETRAILER: u32 = 103;
    pub const PSINJECT_PLATECOLOR: u32 = 104;
    pub const PSINJECT_SHOWPAGE: u32 = 105;
    pub const PSINJECT_PAGEBBOX: u32 = 106;
    pub const PSINJECT_ENDPAGECOMMENTS: u32 = 107;
    pub const PSINJECT_VMSAVE: u32 = 200;
    pub const PSINJECT_VMRESTORE: u32 = 201;
    pub const PSINJECT_DLFONT: u32 = 3722304989;
    pub const FEATURESETTING_NUP: u32 = 0;
    pub const FEATURESETTING_OUTPUT: u32 = 1;
    pub const FEATURESETTING_PSLEVEL: u32 = 2;
    pub const FEATURESETTING_CUSTPAPER: u32 = 3;
    pub const FEATURESETTING_MIRROR: u32 = 4;
    pub const FEATURESETTING_NEGATIVE: u32 = 5;
    pub const FEATURESETTING_PROTOCOL: u32 = 6;
    pub const FEATURESETTING_PRIVATE_BEGIN: u32 = 4096;
    pub const FEATURESETTING_PRIVATE_END: u32 = 8191;
    pub const PSPROTOCOL_ASCII: u32 = 0;
    pub const PSPROTOCOL_BCP: u32 = 1;
    pub const PSPROTOCOL_TBCP: u32 = 2;
    pub const PSPROTOCOL_BINARY: u32 = 3;
    pub const QDI_SETDIBITS: u32 = 1;
    pub const QDI_GETDIBITS: u32 = 2;
    pub const QDI_DIBTOSCREEN: u32 = 4;
    pub const QDI_STRETCHDIB: u32 = 8;
    pub const SP_NOTREPORTED: u32 = 16384;
    pub const SP_ERROR: i32 = -1;
    pub const SP_APPABORT: i32 = -2;
    pub const SP_USERABORT: i32 = -3;
    pub const SP_OUTOFDISK: i32 = -4;
    pub const SP_OUTOFMEMORY: i32 = -5;
    pub const PR_JOBSTATUS: u32 = 0;
    pub const OBJ_PEN: u32 = 1;
    pub const OBJ_BRUSH: u32 = 2;
    pub const OBJ_DC: u32 = 3;
    pub const OBJ_METADC: u32 = 4;
    pub const OBJ_PAL: u32 = 5;
    pub const OBJ_FONT: u32 = 6;
    pub const OBJ_BITMAP: u32 = 7;
    pub const OBJ_REGION: u32 = 8;
    pub const OBJ_METAFILE: u32 = 9;
    pub const OBJ_MEMDC: u32 = 10;
    pub const OBJ_EXTPEN: u32 = 11;
    pub const OBJ_ENHMETADC: u32 = 12;
    pub const OBJ_ENHMETAFILE: u32 = 13;
    pub const OBJ_COLORSPACE: u32 = 14;
    pub const GDI_OBJ_LAST: u32 = 14;
    pub const MWT_IDENTITY: u32 = 1;
    pub const MWT_LEFTMULTIPLY: u32 = 2;
    pub const MWT_RIGHTMULTIPLY: u32 = 3;
    pub const MWT_MIN: u32 = 1;
    pub const MWT_MAX: u32 = 3;
    pub const CS_ENABLE: u32 = 1;
    pub const CS_DISABLE: u32 = 2;
    pub const CS_DELETE_TRANSFORM: u32 = 3;
    pub const LCS_CALIBRATED_RGB: u32 = 0;
    pub const LCS_GM_BUSINESS: u32 = 1;
    pub const LCS_GM_GRAPHICS: u32 = 2;
    pub const LCS_GM_IMAGES: u32 = 4;
    pub const LCS_GM_ABS_COLORIMETRIC: u32 = 8;
    pub const CM_OUT_OF_GAMUT: u32 = 255;
    pub const CM_IN_GAMUT: u32 = 0;
    pub const ICM_ADDPROFILE: u32 = 1;
    pub const ICM_DELETEPROFILE: u32 = 2;
    pub const ICM_QUERYPROFILE: u32 = 3;
    pub const ICM_SETDEFAULTPROFILE: u32 = 4;
    pub const ICM_REGISTERICMATCHER: u32 = 5;
    pub const ICM_UNREGISTERICMATCHER: u32 = 6;
    pub const ICM_QUERYMATCH: u32 = 7;
    pub const BI_RGB: u32 = 0;
    pub const BI_RLE8: u32 = 1;
    pub const BI_RLE4: u32 = 2;
    pub const BI_BITFIELDS: u32 = 3;
    pub const BI_JPEG: u32 = 4;
    pub const BI_PNG: u32 = 5;
    pub const TCI_SRCCHARSET: u32 = 1;
    pub const TCI_SRCCODEPAGE: u32 = 2;
    pub const TCI_SRCFONTSIG: u32 = 3;
    pub const TCI_SRCLOCALE: u32 = 4096;
    pub const TMPF_FIXED_PITCH: u32 = 1;
    pub const TMPF_VECTOR: u32 = 2;
    pub const TMPF_DEVICE: u32 = 8;
    pub const TMPF_TRUETYPE: u32 = 4;
    pub const NTM_REGULAR: u32 = 64;
    pub const NTM_BOLD: u32 = 32;
    pub const NTM_ITALIC: u32 = 1;
    pub const NTM_NONNEGATIVE_AC: u32 = 65536;
    pub const NTM_PS_OPENTYPE: u32 = 131072;
    pub const NTM_TT_OPENTYPE: u32 = 262144;
    pub const NTM_MULTIPLEMASTER: u32 = 524288;
    pub const NTM_TYPE1: u32 = 1048576;
    pub const NTM_DSIG: u32 = 2097152;
    pub const LF_FACESIZE: u32 = 32;
    pub const LF_FULLFACESIZE: u32 = 64;
    pub const OUT_DEFAULT_PRECIS: u32 = 0;
    pub const OUT_STRING_PRECIS: u32 = 1;
    pub const OUT_CHARACTER_PRECIS: u32 = 2;
    pub const OUT_STROKE_PRECIS: u32 = 3;
    pub const OUT_TT_PRECIS: u32 = 4;
    pub const OUT_DEVICE_PRECIS: u32 = 5;
    pub const OUT_RASTER_PRECIS: u32 = 6;
    pub const OUT_TT_ONLY_PRECIS: u32 = 7;
    pub const OUT_OUTLINE_PRECIS: u32 = 8;
    pub const OUT_SCREEN_OUTLINE_PRECIS: u32 = 9;
    pub const OUT_PS_ONLY_PRECIS: u32 = 10;
    pub const CLIP_DEFAULT_PRECIS: u32 = 0;
    pub const CLIP_CHARACTER_PRECIS: u32 = 1;
    pub const CLIP_STROKE_PRECIS: u32 = 2;
    pub const CLIP_MASK: u32 = 15;
    pub const CLIP_LH_ANGLES: u32 = 16;
    pub const CLIP_TT_ALWAYS: u32 = 32;
    pub const CLIP_DFA_DISABLE: u32 = 64;
    pub const CLIP_EMBEDDED: u32 = 128;
    pub const DEFAULT_QUALITY: u32 = 0;
    pub const DRAFT_QUALITY: u32 = 1;
    pub const PROOF_QUALITY: u32 = 2;
    pub const NONANTIALIASED_QUALITY: u32 = 3;
    pub const ANTIALIASED_QUALITY: u32 = 4;
    pub const CLEARTYPE_QUALITY: u32 = 5;
    pub const CLEARTYPE_NATURAL_QUALITY: u32 = 6;
    pub const DEFAULT_PITCH: u32 = 0;
    pub const FIXED_PITCH: u32 = 1;
    pub const VARIABLE_PITCH: u32 = 2;
    pub const MONO_FONT: u32 = 8;
    pub const ANSI_CHARSET: u32 = 0;
    pub const DEFAULT_CHARSET: u32 = 1;
    pub const SYMBOL_CHARSET: u32 = 2;
    pub const SHIFTJIS_CHARSET: u32 = 128;
    pub const HANGEUL_CHARSET: u32 = 129;
    pub const HANGUL_CHARSET: u32 = 129;
    pub const GB2312_CHARSET: u32 = 134;
    pub const CHINESEBIG5_CHARSET: u32 = 136;
    pub const OEM_CHARSET: u32 = 255;
    pub const JOHAB_CHARSET: u32 = 130;
    pub const HEBREW_CHARSET: u32 = 177;
    pub const ARABIC_CHARSET: u32 = 178;
    pub const GREEK_CHARSET: u32 = 161;
    pub const TURKISH_CHARSET: u32 = 162;
    pub const VIETNAMESE_CHARSET: u32 = 163;
    pub const THAI_CHARSET: u32 = 222;
    pub const EASTEUROPE_CHARSET: u32 = 238;
    pub const RUSSIAN_CHARSET: u32 = 204;
    pub const MAC_CHARSET: u32 = 77;
    pub const BALTIC_CHARSET: u32 = 186;
    pub const FS_LATIN1: u32 = 1;
    pub const FS_LATIN2: u32 = 2;
    pub const FS_CYRILLIC: u32 = 4;
    pub const FS_GREEK: u32 = 8;
    pub const FS_TURKISH: u32 = 16;
    pub const FS_HEBREW: u32 = 32;
    pub const FS_ARABIC: u32 = 64;
    pub const FS_BALTIC: u32 = 128;
    pub const FS_VIETNAMESE: u32 = 256;
    pub const FS_THAI: u32 = 65536;
    pub const FS_JISJAPAN: u32 = 131072;
    pub const FS_CHINESESIMP: u32 = 262144;
    pub const FS_WANSUNG: u32 = 524288;
    pub const FS_CHINESETRAD: u32 = 1048576;
    pub const FS_JOHAB: u32 = 2097152;
    pub const FS_SYMBOL: u32 = 2147483648;
    pub const FF_DONTCARE: u32 = 0;
    pub const FF_ROMAN: u32 = 16;
    pub const FF_SWISS: u32 = 32;
    pub const FF_MODERN: u32 = 48;
    pub const FF_SCRIPT: u32 = 64;
    pub const FF_DECORATIVE: u32 = 80;
    pub const FW_DONTCARE: u32 = 0;
    pub const FW_THIN: u32 = 100;
    pub const FW_EXTRALIGHT: u32 = 200;
    pub const FW_LIGHT: u32 = 300;
    pub const FW_NORMAL: u32 = 400;
    pub const FW_MEDIUM: u32 = 500;
    pub const FW_SEMIBOLD: u32 = 600;
    pub const FW_BOLD: u32 = 700;
    pub const FW_EXTRABOLD: u32 = 800;
    pub const FW_HEAVY: u32 = 900;
    pub const FW_ULTRALIGHT: u32 = 200;
    pub const FW_REGULAR: u32 = 400;
    pub const FW_DEMIBOLD: u32 = 600;
    pub const FW_ULTRABOLD: u32 = 800;
    pub const FW_BLACK: u32 = 900;
    pub const PANOSE_COUNT: u32 = 10;
    pub const PAN_FAMILYTYPE_INDEX: u32 = 0;
    pub const PAN_SERIFSTYLE_INDEX: u32 = 1;
    pub const PAN_WEIGHT_INDEX: u32 = 2;
    pub const PAN_PROPORTION_INDEX: u32 = 3;
    pub const PAN_CONTRAST_INDEX: u32 = 4;
    pub const PAN_STROKEVARIATION_INDEX: u32 = 5;
    pub const PAN_ARMSTYLE_INDEX: u32 = 6;
    pub const PAN_LETTERFORM_INDEX: u32 = 7;
    pub const PAN_MIDLINE_INDEX: u32 = 8;
    pub const PAN_XHEIGHT_INDEX: u32 = 9;
    pub const PAN_CULTURE_LATIN: u32 = 0;
    pub const PAN_ANY: u32 = 0;
    pub const PAN_NO_FIT: u32 = 1;
    pub const PAN_FAMILY_TEXT_DISPLAY: u32 = 2;
    pub const PAN_FAMILY_SCRIPT: u32 = 3;
    pub const PAN_FAMILY_DECORATIVE: u32 = 4;
    pub const PAN_FAMILY_PICTORIAL: u32 = 5;
    pub const PAN_SERIF_COVE: u32 = 2;
    pub const PAN_SERIF_OBTUSE_COVE: u32 = 3;
    pub const PAN_SERIF_SQUARE_COVE: u32 = 4;
    pub const PAN_SERIF_OBTUSE_SQUARE_COVE: u32 = 5;
    pub const PAN_SERIF_SQUARE: u32 = 6;
    pub const PAN_SERIF_THIN: u32 = 7;
    pub const PAN_SERIF_BONE: u32 = 8;
    pub const PAN_SERIF_EXAGGERATED: u32 = 9;
    pub const PAN_SERIF_TRIANGLE: u32 = 10;
    pub const PAN_SERIF_NORMAL_SANS: u32 = 11;
    pub const PAN_SERIF_OBTUSE_SANS: u32 = 12;
    pub const PAN_SERIF_PERP_SANS: u32 = 13;
    pub const PAN_SERIF_FLARED: u32 = 14;
    pub const PAN_SERIF_ROUNDED: u32 = 15;
    pub const PAN_WEIGHT_VERY_LIGHT: u32 = 2;
    pub const PAN_WEIGHT_LIGHT: u32 = 3;
    pub const PAN_WEIGHT_THIN: u32 = 4;
    pub const PAN_WEIGHT_BOOK: u32 = 5;
    pub const PAN_WEIGHT_MEDIUM: u32 = 6;
    pub const PAN_WEIGHT_DEMI: u32 = 7;
    pub const PAN_WEIGHT_BOLD: u32 = 8;
    pub const PAN_WEIGHT_HEAVY: u32 = 9;
    pub const PAN_WEIGHT_BLACK: u32 = 10;
    pub const PAN_WEIGHT_NORD: u32 = 11;
    pub const PAN_PROP_OLD_STYLE: u32 = 2;
    pub const PAN_PROP_MODERN: u32 = 3;
    pub const PAN_PROP_EVEN_WIDTH: u32 = 4;
    pub const PAN_PROP_EXPANDED: u32 = 5;
    pub const PAN_PROP_CONDENSED: u32 = 6;
    pub const PAN_PROP_VERY_EXPANDED: u32 = 7;
    pub const PAN_PROP_VERY_CONDENSED: u32 = 8;
    pub const PAN_PROP_MONOSPACED: u32 = 9;
    pub const PAN_CONTRAST_NONE: u32 = 2;
    pub const PAN_CONTRAST_VERY_LOW: u32 = 3;
    pub const PAN_CONTRAST_LOW: u32 = 4;
    pub const PAN_CONTRAST_MEDIUM_LOW: u32 = 5;
    pub const PAN_CONTRAST_MEDIUM: u32 = 6;
    pub const PAN_CONTRAST_MEDIUM_HIGH: u32 = 7;
    pub const PAN_CONTRAST_HIGH: u32 = 8;
    pub const PAN_CONTRAST_VERY_HIGH: u32 = 9;
    pub const PAN_STROKE_GRADUAL_DIAG: u32 = 2;
    pub const PAN_STROKE_GRADUAL_TRAN: u32 = 3;
    pub const PAN_STROKE_GRADUAL_VERT: u32 = 4;
    pub const PAN_STROKE_GRADUAL_HORZ: u32 = 5;
    pub const PAN_STROKE_RAPID_VERT: u32 = 6;
    pub const PAN_STROKE_RAPID_HORZ: u32 = 7;
    pub const PAN_STROKE_INSTANT_VERT: u32 = 8;
    pub const PAN_STRAIGHT_ARMS_HORZ: u32 = 2;
    pub const PAN_STRAIGHT_ARMS_WEDGE: u32 = 3;
    pub const PAN_STRAIGHT_ARMS_VERT: u32 = 4;
    pub const PAN_STRAIGHT_ARMS_SINGLE_SERIF: u32 = 5;
    pub const PAN_STRAIGHT_ARMS_DOUBLE_SERIF: u32 = 6;
    pub const PAN_BENT_ARMS_HORZ: u32 = 7;
    pub const PAN_BENT_ARMS_WEDGE: u32 = 8;
    pub const PAN_BENT_ARMS_VERT: u32 = 9;
    pub const PAN_BENT_ARMS_SINGLE_SERIF: u32 = 10;
    pub const PAN_BENT_ARMS_DOUBLE_SERIF: u32 = 11;
    pub const PAN_LETT_NORMAL_CONTACT: u32 = 2;
    pub const PAN_LETT_NORMAL_WEIGHTED: u32 = 3;
    pub const PAN_LETT_NORMAL_BOXED: u32 = 4;
    pub const PAN_LETT_NORMAL_FLATTENED: u32 = 5;
    pub const PAN_LETT_NORMAL_ROUNDED: u32 = 6;
    pub const PAN_LETT_NORMAL_OFF_CENTER: u32 = 7;
    pub const PAN_LETT_NORMAL_SQUARE: u32 = 8;
    pub const PAN_LETT_OBLIQUE_CONTACT: u32 = 9;
    pub const PAN_LETT_OBLIQUE_WEIGHTED: u32 = 10;
    pub const PAN_LETT_OBLIQUE_BOXED: u32 = 11;
    pub const PAN_LETT_OBLIQUE_FLATTENED: u32 = 12;
    pub const PAN_LETT_OBLIQUE_ROUNDED: u32 = 13;
    pub const PAN_LETT_OBLIQUE_OFF_CENTER: u32 = 14;
    pub const PAN_LETT_OBLIQUE_SQUARE: u32 = 15;
    pub const PAN_MIDLINE_STANDARD_TRIMMED: u32 = 2;
    pub const PAN_MIDLINE_STANDARD_POINTED: u32 = 3;
    pub const PAN_MIDLINE_STANDARD_SERIFED: u32 = 4;
    pub const PAN_MIDLINE_HIGH_TRIMMED: u32 = 5;
    pub const PAN_MIDLINE_HIGH_POINTED: u32 = 6;
    pub const PAN_MIDLINE_HIGH_SERIFED: u32 = 7;
    pub const PAN_MIDLINE_CONSTANT_TRIMMED: u32 = 8;
    pub const PAN_MIDLINE_CONSTANT_POINTED: u32 = 9;
    pub const PAN_MIDLINE_CONSTANT_SERIFED: u32 = 10;
    pub const PAN_MIDLINE_LOW_TRIMMED: u32 = 11;
    pub const PAN_MIDLINE_LOW_POINTED: u32 = 12;
    pub const PAN_MIDLINE_LOW_SERIFED: u32 = 13;
    pub const PAN_XHEIGHT_CONSTANT_SMALL: u32 = 2;
    pub const PAN_XHEIGHT_CONSTANT_STD: u32 = 3;
    pub const PAN_XHEIGHT_CONSTANT_LARGE: u32 = 4;
    pub const PAN_XHEIGHT_DUCKING_SMALL: u32 = 5;
    pub const PAN_XHEIGHT_DUCKING_STD: u32 = 6;
    pub const PAN_XHEIGHT_DUCKING_LARGE: u32 = 7;
    pub const ELF_VENDOR_SIZE: u32 = 4;
    pub const ELF_VERSION: u32 = 0;
    pub const ELF_CULTURE_LATIN: u32 = 0;
    pub const RASTER_FONTTYPE: u32 = 1;
    pub const DEVICE_FONTTYPE: u32 = 2;
    pub const TRUETYPE_FONTTYPE: u32 = 4;
    pub const PC_RESERVED: u32 = 1;
    pub const PC_EXPLICIT: u32 = 2;
    pub const PC_NOCOLLAPSE: u32 = 4;
    pub const TRANSPARENT: u32 = 1;
    pub const OPAQUE: u32 = 2;
    pub const BKMODE_LAST: u32 = 2;
    pub const GM_COMPATIBLE: u32 = 1;
    pub const GM_ADVANCED: u32 = 2;
    pub const GM_LAST: u32 = 2;
    pub const PT_CLOSEFIGURE: u32 = 1;
    pub const PT_LINETO: u32 = 2;
    pub const PT_BEZIERTO: u32 = 4;
    pub const PT_MOVETO: u32 = 6;
    pub const MM_TEXT: u32 = 1;
    pub const MM_LOMETRIC: u32 = 2;
    pub const MM_HIMETRIC: u32 = 3;
    pub const MM_LOENGLISH: u32 = 4;
    pub const MM_HIENGLISH: u32 = 5;
    pub const MM_TWIPS: u32 = 6;
    pub const MM_ISOTROPIC: u32 = 7;
    pub const MM_ANISOTROPIC: u32 = 8;
    pub const MM_MIN: u32 = 1;
    pub const MM_MAX: u32 = 8;
    pub const MM_MAX_FIXEDSCALE: u32 = 6;
    pub const ABSOLUTE: u32 = 1;
    pub const RELATIVE: u32 = 2;
    pub const WHITE_BRUSH: u32 = 0;
    pub const LTGRAY_BRUSH: u32 = 1;
    pub const GRAY_BRUSH: u32 = 2;
    pub const DKGRAY_BRUSH: u32 = 3;
    pub const BLACK_BRUSH: u32 = 4;
    pub const NULL_BRUSH: u32 = 5;
    pub const HOLLOW_BRUSH: u32 = 5;
    pub const WHITE_PEN: u32 = 6;
    pub const BLACK_PEN: u32 = 7;
    pub const NULL_PEN: u32 = 8;
    pub const OEM_FIXED_FONT: u32 = 10;
    pub const ANSI_FIXED_FONT: u32 = 11;
    pub const ANSI_VAR_FONT: u32 = 12;
    pub const SYSTEM_FONT: u32 = 13;
    pub const DEVICE_DEFAULT_FONT: u32 = 14;
    pub const DEFAULT_PALETTE: u32 = 15;
    pub const SYSTEM_FIXED_FONT: u32 = 16;
    pub const DEFAULT_GUI_FONT: u32 = 17;
    pub const DC_BRUSH: u32 = 18;
    pub const DC_PEN: u32 = 19;
    pub const STOCK_LAST: u32 = 19;
    pub const CLR_INVALID: u32 = 4294967295;
    pub const BS_SOLID: u32 = 0;
    pub const BS_NULL: u32 = 1;
    pub const BS_HOLLOW: u32 = 1;
    pub const BS_HATCHED: u32 = 2;
    pub const BS_PATTERN: u32 = 3;
    pub const BS_INDEXED: u32 = 4;
    pub const BS_DIBPATTERN: u32 = 5;
    pub const BS_DIBPATTERNPT: u32 = 6;
    pub const BS_PATTERN8X8: u32 = 7;
    pub const BS_DIBPATTERN8X8: u32 = 8;
    pub const BS_MONOPATTERN: u32 = 9;
    pub const HS_HORIZONTAL: u32 = 0;
    pub const HS_VERTICAL: u32 = 1;
    pub const HS_FDIAGONAL: u32 = 2;
    pub const HS_BDIAGONAL: u32 = 3;
    pub const HS_CROSS: u32 = 4;
    pub const HS_DIAGCROSS: u32 = 5;
    pub const HS_API_MAX: u32 = 12;
    pub const PS_SOLID: u32 = 0;
    pub const PS_DASH: u32 = 1;
    pub const PS_DOT: u32 = 2;
    pub const PS_DASHDOT: u32 = 3;
    pub const PS_DASHDOTDOT: u32 = 4;
    pub const PS_NULL: u32 = 5;
    pub const PS_INSIDEFRAME: u32 = 6;
    pub const PS_USERSTYLE: u32 = 7;
    pub const PS_ALTERNATE: u32 = 8;
    pub const PS_STYLE_MASK: u32 = 15;
    pub const PS_ENDCAP_ROUND: u32 = 0;
    pub const PS_ENDCAP_SQUARE: u32 = 256;
    pub const PS_ENDCAP_FLAT: u32 = 512;
    pub const PS_ENDCAP_MASK: u32 = 3840;
    pub const PS_JOIN_ROUND: u32 = 0;
    pub const PS_JOIN_BEVEL: u32 = 4096;
    pub const PS_JOIN_MITER: u32 = 8192;
    pub const PS_JOIN_MASK: u32 = 61440;
    pub const PS_COSMETIC: u32 = 0;
    pub const PS_GEOMETRIC: u32 = 65536;
    pub const PS_TYPE_MASK: u32 = 983040;
    pub const AD_COUNTERCLOCKWISE: u32 = 1;
    pub const AD_CLOCKWISE: u32 = 2;
    pub const DRIVERVERSION: u32 = 0;
    pub const TECHNOLOGY: u32 = 2;
    pub const HORZSIZE: u32 = 4;
    pub const VERTSIZE: u32 = 6;
    pub const HORZRES: u32 = 8;
    pub const VERTRES: u32 = 10;
    pub const BITSPIXEL: u32 = 12;
    pub const PLANES: u32 = 14;
    pub const NUMBRUSHES: u32 = 16;
    pub const NUMPENS: u32 = 18;
    pub const NUMMARKERS: u32 = 20;
    pub const NUMFONTS: u32 = 22;
    pub const NUMCOLORS: u32 = 24;
    pub const PDEVICESIZE: u32 = 26;
    pub const CURVECAPS: u32 = 28;
    pub const LINECAPS: u32 = 30;
    pub const POLYGONALCAPS: u32 = 32;
    pub const TEXTCAPS: u32 = 34;
    pub const CLIPCAPS: u32 = 36;
    pub const RASTERCAPS: u32 = 38;
    pub const ASPECTX: u32 = 40;
    pub const ASPECTY: u32 = 42;
    pub const ASPECTXY: u32 = 44;
    pub const LOGPIXELSX: u32 = 88;
    pub const LOGPIXELSY: u32 = 90;
    pub const SIZEPALETTE: u32 = 104;
    pub const NUMRESERVED: u32 = 106;
    pub const COLORRES: u32 = 108;
    pub const PHYSICALWIDTH: u32 = 110;
    pub const PHYSICALHEIGHT: u32 = 111;
    pub const PHYSICALOFFSETX: u32 = 112;
    pub const PHYSICALOFFSETY: u32 = 113;
    pub const SCALINGFACTORX: u32 = 114;
    pub const SCALINGFACTORY: u32 = 115;
    pub const VREFRESH: u32 = 116;
    pub const DESKTOPVERTRES: u32 = 117;
    pub const DESKTOPHORZRES: u32 = 118;
    pub const BLTALIGNMENT: u32 = 119;
    pub const SHADEBLENDCAPS: u32 = 120;
    pub const COLORMGMTCAPS: u32 = 121;
    pub const DT_PLOTTER: u32 = 0;
    pub const DT_RASDISPLAY: u32 = 1;
    pub const DT_RASPRINTER: u32 = 2;
    pub const DT_RASCAMERA: u32 = 3;
    pub const DT_CHARSTREAM: u32 = 4;
    pub const DT_METAFILE: u32 = 5;
    pub const DT_DISPFILE: u32 = 6;
    pub const CC_NONE: u32 = 0;
    pub const CC_CIRCLES: u32 = 1;
    pub const CC_PIE: u32 = 2;
    pub const CC_CHORD: u32 = 4;
    pub const CC_ELLIPSES: u32 = 8;
    pub const CC_WIDE: u32 = 16;
    pub const CC_STYLED: u32 = 32;
    pub const CC_WIDESTYLED: u32 = 64;
    pub const CC_INTERIORS: u32 = 128;
    pub const CC_ROUNDRECT: u32 = 256;
    pub const LC_NONE: u32 = 0;
    pub const LC_POLYLINE: u32 = 2;
    pub const LC_MARKER: u32 = 4;
    pub const LC_POLYMARKER: u32 = 8;
    pub const LC_WIDE: u32 = 16;
    pub const LC_STYLED: u32 = 32;
    pub const LC_WIDESTYLED: u32 = 64;
    pub const LC_INTERIORS: u32 = 128;
    pub const PC_NONE: u32 = 0;
    pub const PC_POLYGON: u32 = 1;
    pub const PC_RECTANGLE: u32 = 2;
    pub const PC_WINDPOLYGON: u32 = 4;
    pub const PC_TRAPEZOID: u32 = 4;
    pub const PC_SCANLINE: u32 = 8;
    pub const PC_WIDE: u32 = 16;
    pub const PC_STYLED: u32 = 32;
    pub const PC_WIDESTYLED: u32 = 64;
    pub const PC_INTERIORS: u32 = 128;
    pub const PC_POLYPOLYGON: u32 = 256;
    pub const PC_PATHS: u32 = 512;
    pub const CP_NONE: u32 = 0;
    pub const CP_RECTANGLE: u32 = 1;
    pub const CP_REGION: u32 = 2;
    pub const TC_OP_CHARACTER: u32 = 1;
    pub const TC_OP_STROKE: u32 = 2;
    pub const TC_CP_STROKE: u32 = 4;
    pub const TC_CR_90: u32 = 8;
    pub const TC_CR_ANY: u32 = 16;
    pub const TC_SF_X_YINDEP: u32 = 32;
    pub const TC_SA_DOUBLE: u32 = 64;
    pub const TC_SA_INTEGER: u32 = 128;
    pub const TC_SA_CONTIN: u32 = 256;
    pub const TC_EA_DOUBLE: u32 = 512;
    pub const TC_IA_ABLE: u32 = 1024;
    pub const TC_UA_ABLE: u32 = 2048;
    pub const TC_SO_ABLE: u32 = 4096;
    pub const TC_RA_ABLE: u32 = 8192;
    pub const TC_VA_ABLE: u32 = 16384;
    pub const TC_RESERVED: u32 = 32768;
    pub const TC_SCROLLBLT: u32 = 65536;
    pub const RC_BITBLT: u32 = 1;
    pub const RC_BANDING: u32 = 2;
    pub const RC_SCALING: u32 = 4;
    pub const RC_BITMAP64: u32 = 8;
    pub const RC_GDI20_OUTPUT: u32 = 16;
    pub const RC_GDI20_STATE: u32 = 32;
    pub const RC_SAVEBITMAP: u32 = 64;
    pub const RC_DI_BITMAP: u32 = 128;
    pub const RC_PALETTE: u32 = 256;
    pub const RC_DIBTODEV: u32 = 512;
    pub const RC_BIGFONT: u32 = 1024;
    pub const RC_STRETCHBLT: u32 = 2048;
    pub const RC_FLOODFILL: u32 = 4096;
    pub const RC_STRETCHDIB: u32 = 8192;
    pub const RC_OP_DX_OUTPUT: u32 = 16384;
    pub const RC_DEVBITS: u32 = 32768;
    pub const SB_NONE: u32 = 0;
    pub const SB_CONST_ALPHA: u32 = 1;
    pub const SB_PIXEL_ALPHA: u32 = 2;
    pub const SB_PREMULT_ALPHA: u32 = 4;
    pub const SB_GRAD_RECT: u32 = 16;
    pub const SB_GRAD_TRI: u32 = 32;
    pub const CM_NONE: u32 = 0;
    pub const CM_DEVICE_ICM: u32 = 1;
    pub const CM_GAMMA_RAMP: u32 = 2;
    pub const CM_CMYK_COLOR: u32 = 4;
    pub const DIB_RGB_COLORS: u32 = 0;
    pub const DIB_PAL_COLORS: u32 = 1;
    pub const SYSPAL_ERROR: u32 = 0;
    pub const SYSPAL_STATIC: u32 = 1;
    pub const SYSPAL_NOSTATIC: u32 = 2;
    pub const SYSPAL_NOSTATIC256: u32 = 3;
    pub const CBM_INIT: u32 = 4;
    pub const FLOODFILLBORDER: u32 = 0;
    pub const FLOODFILLSURFACE: u32 = 1;
    pub const CCHDEVICENAME: u32 = 32;
    pub const CCHFORMNAME: u32 = 32;
    pub const DM_SPECVERSION: u32 = 1025;
    pub const DM_ORIENTATION: u32 = 1;
    pub const DM_PAPERSIZE: u32 = 2;
    pub const DM_PAPERLENGTH: u32 = 4;
    pub const DM_PAPERWIDTH: u32 = 8;
    pub const DM_SCALE: u32 = 16;
    pub const DM_POSITION: u32 = 32;
    pub const DM_NUP: u32 = 64;
    pub const DM_DISPLAYORIENTATION: u32 = 128;
    pub const DM_COPIES: u32 = 256;
    pub const DM_DEFAULTSOURCE: u32 = 512;
    pub const DM_PRINTQUALITY: u32 = 1024;
    pub const DM_COLOR: u32 = 2048;
    pub const DM_DUPLEX: u32 = 4096;
    pub const DM_YRESOLUTION: u32 = 8192;
    pub const DM_TTOPTION: u32 = 16384;
    pub const DM_COLLATE: u32 = 32768;
    pub const DM_FORMNAME: u32 = 65536;
    pub const DM_LOGPIXELS: u32 = 131072;
    pub const DM_BITSPERPEL: u32 = 262144;
    pub const DM_PELSWIDTH: u32 = 524288;
    pub const DM_PELSHEIGHT: u32 = 1048576;
    pub const DM_DISPLAYFLAGS: u32 = 2097152;
    pub const DM_DISPLAYFREQUENCY: u32 = 4194304;
    pub const DM_ICMMETHOD: u32 = 8388608;
    pub const DM_ICMINTENT: u32 = 16777216;
    pub const DM_MEDIATYPE: u32 = 33554432;
    pub const DM_DITHERTYPE: u32 = 67108864;
    pub const DM_PANNINGWIDTH: u32 = 134217728;
    pub const DM_PANNINGHEIGHT: u32 = 268435456;
    pub const DM_DISPLAYFIXEDOUTPUT: u32 = 536870912;
    pub const DMORIENT_PORTRAIT: u32 = 1;
    pub const DMORIENT_LANDSCAPE: u32 = 2;
    pub const DMPAPER_LETTER: u32 = 1;
    pub const DMPAPER_LETTERSMALL: u32 = 2;
    pub const DMPAPER_TABLOID: u32 = 3;
    pub const DMPAPER_LEDGER: u32 = 4;
    pub const DMPAPER_LEGAL: u32 = 5;
    pub const DMPAPER_STATEMENT: u32 = 6;
    pub const DMPAPER_EXECUTIVE: u32 = 7;
    pub const DMPAPER_A3: u32 = 8;
    pub const DMPAPER_A4: u32 = 9;
    pub const DMPAPER_A4SMALL: u32 = 10;
    pub const DMPAPER_A5: u32 = 11;
    pub const DMPAPER_B4: u32 = 12;
    pub const DMPAPER_B5: u32 = 13;
    pub const DMPAPER_FOLIO: u32 = 14;
    pub const DMPAPER_QUARTO: u32 = 15;
    pub const DMPAPER_10X14: u32 = 16;
    pub const DMPAPER_11X17: u32 = 17;
    pub const DMPAPER_NOTE: u32 = 18;
    pub const DMPAPER_ENV_9: u32 = 19;
    pub const DMPAPER_ENV_10: u32 = 20;
    pub const DMPAPER_ENV_11: u32 = 21;
    pub const DMPAPER_ENV_12: u32 = 22;
    pub const DMPAPER_ENV_14: u32 = 23;
    pub const DMPAPER_CSHEET: u32 = 24;
    pub const DMPAPER_DSHEET: u32 = 25;
    pub const DMPAPER_ESHEET: u32 = 26;
    pub const DMPAPER_ENV_DL: u32 = 27;
    pub const DMPAPER_ENV_C5: u32 = 28;
    pub const DMPAPER_ENV_C3: u32 = 29;
    pub const DMPAPER_ENV_C4: u32 = 30;
    pub const DMPAPER_ENV_C6: u32 = 31;
    pub const DMPAPER_ENV_C65: u32 = 32;
    pub const DMPAPER_ENV_B4: u32 = 33;
    pub const DMPAPER_ENV_B5: u32 = 34;
    pub const DMPAPER_ENV_B6: u32 = 35;
    pub const DMPAPER_ENV_ITALY: u32 = 36;
    pub const DMPAPER_ENV_MONARCH: u32 = 37;
    pub const DMPAPER_ENV_PERSONAL: u32 = 38;
    pub const DMPAPER_FANFOLD_US: u32 = 39;
    pub const DMPAPER_FANFOLD_STD_GERMAN: u32 = 40;
    pub const DMPAPER_FANFOLD_LGL_GERMAN: u32 = 41;
    pub const DMPAPER_ISO_B4: u32 = 42;
    pub const DMPAPER_JAPANESE_POSTCARD: u32 = 43;
    pub const DMPAPER_9X11: u32 = 44;
    pub const DMPAPER_10X11: u32 = 45;
    pub const DMPAPER_15X11: u32 = 46;
    pub const DMPAPER_ENV_INVITE: u32 = 47;
    pub const DMPAPER_RESERVED_48: u32 = 48;
    pub const DMPAPER_RESERVED_49: u32 = 49;
    pub const DMPAPER_LETTER_EXTRA: u32 = 50;
    pub const DMPAPER_LEGAL_EXTRA: u32 = 51;
    pub const DMPAPER_TABLOID_EXTRA: u32 = 52;
    pub const DMPAPER_A4_EXTRA: u32 = 53;
    pub const DMPAPER_LETTER_TRANSVERSE: u32 = 54;
    pub const DMPAPER_A4_TRANSVERSE: u32 = 55;
    pub const DMPAPER_LETTER_EXTRA_TRANSVERSE: u32 = 56;
    pub const DMPAPER_A_PLUS: u32 = 57;
    pub const DMPAPER_B_PLUS: u32 = 58;
    pub const DMPAPER_LETTER_PLUS: u32 = 59;
    pub const DMPAPER_A4_PLUS: u32 = 60;
    pub const DMPAPER_A5_TRANSVERSE: u32 = 61;
    pub const DMPAPER_B5_TRANSVERSE: u32 = 62;
    pub const DMPAPER_A3_EXTRA: u32 = 63;
    pub const DMPAPER_A5_EXTRA: u32 = 64;
    pub const DMPAPER_B5_EXTRA: u32 = 65;
    pub const DMPAPER_A2: u32 = 66;
    pub const DMPAPER_A3_TRANSVERSE: u32 = 67;
    pub const DMPAPER_A3_EXTRA_TRANSVERSE: u32 = 68;
    pub const DMPAPER_DBL_JAPANESE_POSTCARD: u32 = 69;
    pub const DMPAPER_A6: u32 = 70;
    pub const DMPAPER_JENV_KAKU2: u32 = 71;
    pub const DMPAPER_JENV_KAKU3: u32 = 72;
    pub const DMPAPER_JENV_CHOU3: u32 = 73;
    pub const DMPAPER_JENV_CHOU4: u32 = 74;
    pub const DMPAPER_LETTER_ROTATED: u32 = 75;
    pub const DMPAPER_A3_ROTATED: u32 = 76;
    pub const DMPAPER_A4_ROTATED: u32 = 77;
    pub const DMPAPER_A5_ROTATED: u32 = 78;
    pub const DMPAPER_B4_JIS_ROTATED: u32 = 79;
    pub const DMPAPER_B5_JIS_ROTATED: u32 = 80;
    pub const DMPAPER_JAPANESE_POSTCARD_ROTATED: u32 = 81;
    pub const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED: u32 = 82;
    pub const DMPAPER_A6_ROTATED: u32 = 83;
    pub const DMPAPER_JENV_KAKU2_ROTATED: u32 = 84;
    pub const DMPAPER_JENV_KAKU3_ROTATED: u32 = 85;
    pub const DMPAPER_JENV_CHOU3_ROTATED: u32 = 86;
    pub const DMPAPER_JENV_CHOU4_ROTATED: u32 = 87;
    pub const DMPAPER_B6_JIS: u32 = 88;
    pub const DMPAPER_B6_JIS_ROTATED: u32 = 89;
    pub const DMPAPER_12X11: u32 = 90;
    pub const DMPAPER_JENV_YOU4: u32 = 91;
    pub const DMPAPER_JENV_YOU4_ROTATED: u32 = 92;
    pub const DMPAPER_P16K: u32 = 93;
    pub const DMPAPER_P32K: u32 = 94;
    pub const DMPAPER_P32KBIG: u32 = 95;
    pub const DMPAPER_PENV_1: u32 = 96;
    pub const DMPAPER_PENV_2: u32 = 97;
    pub const DMPAPER_PENV_3: u32 = 98;
    pub const DMPAPER_PENV_4: u32 = 99;
    pub const DMPAPER_PENV_5: u32 = 100;
    pub const DMPAPER_PENV_6: u32 = 101;
    pub const DMPAPER_PENV_7: u32 = 102;
    pub const DMPAPER_PENV_8: u32 = 103;
    pub const DMPAPER_PENV_9: u32 = 104;
    pub const DMPAPER_PENV_10: u32 = 105;
    pub const DMPAPER_P16K_ROTATED: u32 = 106;
    pub const DMPAPER_P32K_ROTATED: u32 = 107;
    pub const DMPAPER_P32KBIG_ROTATED: u32 = 108;
    pub const DMPAPER_PENV_1_ROTATED: u32 = 109;
    pub const DMPAPER_PENV_2_ROTATED: u32 = 110;
    pub const DMPAPER_PENV_3_ROTATED: u32 = 111;
    pub const DMPAPER_PENV_4_ROTATED: u32 = 112;
    pub const DMPAPER_PENV_5_ROTATED: u32 = 113;
    pub const DMPAPER_PENV_6_ROTATED: u32 = 114;
    pub const DMPAPER_PENV_7_ROTATED: u32 = 115;
    pub const DMPAPER_PENV_8_ROTATED: u32 = 116;
    pub const DMPAPER_PENV_9_ROTATED: u32 = 117;
    pub const DMPAPER_PENV_10_ROTATED: u32 = 118;
    pub const DMPAPER_LAST: u32 = 118;
    pub const DMPAPER_USER: u32 = 256;
    pub const DMBIN_UPPER: u32 = 1;
    pub const DMBIN_ONLYONE: u32 = 1;
    pub const DMBIN_LOWER: u32 = 2;
    pub const DMBIN_MIDDLE: u32 = 3;
    pub const DMBIN_MANUAL: u32 = 4;
    pub const DMBIN_ENVELOPE: u32 = 5;
    pub const DMBIN_ENVMANUAL: u32 = 6;
    pub const DMBIN_AUTO: u32 = 7;
    pub const DMBIN_TRACTOR: u32 = 8;
    pub const DMBIN_SMALLFMT: u32 = 9;
    pub const DMBIN_LARGEFMT: u32 = 10;
    pub const DMBIN_LARGECAPACITY: u32 = 11;
    pub const DMBIN_CASSETTE: u32 = 14;
    pub const DMBIN_FORMSOURCE: u32 = 15;
    pub const DMBIN_LAST: u32 = 15;
    pub const DMBIN_USER: u32 = 256;
    pub const DMRES_DRAFT: i32 = -1;
    pub const DMRES_LOW: i32 = -2;
    pub const DMRES_MEDIUM: i32 = -3;
    pub const DMRES_HIGH: i32 = -4;
    pub const DMCOLOR_MONOCHROME: u32 = 1;
    pub const DMCOLOR_COLOR: u32 = 2;
    pub const DMDUP_SIMPLEX: u32 = 1;
    pub const DMDUP_VERTICAL: u32 = 2;
    pub const DMDUP_HORIZONTAL: u32 = 3;
    pub const DMTT_BITMAP: u32 = 1;
    pub const DMTT_DOWNLOAD: u32 = 2;
    pub const DMTT_SUBDEV: u32 = 3;
    pub const DMTT_DOWNLOAD_OUTLINE: u32 = 4;
    pub const DMCOLLATE_FALSE: u32 = 0;
    pub const DMCOLLATE_TRUE: u32 = 1;
    pub const DMDO_DEFAULT: u32 = 0;
    pub const DMDO_90: u32 = 1;
    pub const DMDO_180: u32 = 2;
    pub const DMDO_270: u32 = 3;
    pub const DMDFO_DEFAULT: u32 = 0;
    pub const DMDFO_STRETCH: u32 = 1;
    pub const DMDFO_CENTER: u32 = 2;
    pub const DM_INTERLACED: u32 = 2;
    pub const DMDISPLAYFLAGS_TEXTMODE: u32 = 4;
    pub const DMNUP_SYSTEM: u32 = 1;
    pub const DMNUP_ONEUP: u32 = 2;
    pub const DMICMMETHOD_NONE: u32 = 1;
    pub const DMICMMETHOD_SYSTEM: u32 = 2;
    pub const DMICMMETHOD_DRIVER: u32 = 3;
    pub const DMICMMETHOD_DEVICE: u32 = 4;
    pub const DMICMMETHOD_USER: u32 = 256;
    pub const DMICM_SATURATE: u32 = 1;
    pub const DMICM_CONTRAST: u32 = 2;
    pub const DMICM_COLORIMETRIC: u32 = 3;
    pub const DMICM_ABS_COLORIMETRIC: u32 = 4;
    pub const DMICM_USER: u32 = 256;
    pub const DMMEDIA_STANDARD: u32 = 1;
    pub const DMMEDIA_TRANSPARENCY: u32 = 2;
    pub const DMMEDIA_GLOSSY: u32 = 3;
    pub const DMMEDIA_USER: u32 = 256;
    pub const DMDITHER_NONE: u32 = 1;
    pub const DMDITHER_COARSE: u32 = 2;
    pub const DMDITHER_FINE: u32 = 3;
    pub const DMDITHER_LINEART: u32 = 4;
    pub const DMDITHER_ERRORDIFFUSION: u32 = 5;
    pub const DMDITHER_RESERVED6: u32 = 6;
    pub const DMDITHER_RESERVED7: u32 = 7;
    pub const DMDITHER_RESERVED8: u32 = 8;
    pub const DMDITHER_RESERVED9: u32 = 9;
    pub const DMDITHER_GRAYSCALE: u32 = 10;
    pub const DMDITHER_USER: u32 = 256;
    pub const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP: u32 = 1;
    pub const DISPLAY_DEVICE_MULTI_DRIVER: u32 = 2;
    pub const DISPLAY_DEVICE_PRIMARY_DEVICE: u32 = 4;
    pub const DISPLAY_DEVICE_MIRRORING_DRIVER: u32 = 8;
    pub const DISPLAY_DEVICE_VGA_COMPATIBLE: u32 = 16;
    pub const DISPLAY_DEVICE_REMOVABLE: u32 = 32;
    pub const DISPLAY_DEVICE_ACC_DRIVER: u32 = 64;
    pub const DISPLAY_DEVICE_MODESPRUNED: u32 = 134217728;
    pub const DISPLAY_DEVICE_RDPUDD: u32 = 16777216;
    pub const DISPLAY_DEVICE_REMOTE: u32 = 67108864;
    pub const DISPLAY_DEVICE_DISCONNECT: u32 = 33554432;
    pub const DISPLAY_DEVICE_TS_COMPATIBLE: u32 = 2097152;
    pub const DISPLAY_DEVICE_UNSAFE_MODES_ON: u32 = 524288;
    pub const DISPLAY_DEVICE_ACTIVE: u32 = 1;
    pub const DISPLAY_DEVICE_ATTACHED: u32 = 2;
    pub const DISPLAYCONFIG_MAXPATH: u32 = 1024;
    pub const DISPLAYCONFIG_PATH_MODE_IDX_INVALID: u32 = 4294967295;
    pub const DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID: u32 = 65535;
    pub const DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID: u32 = 65535;
    pub const DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID: u32 = 65535;
    pub const DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID: u32 = 65535;
    pub const DISPLAYCONFIG_SOURCE_IN_USE: u32 = 1;
    pub const DISPLAYCONFIG_TARGET_IN_USE: u32 = 1;
    pub const DISPLAYCONFIG_TARGET_FORCIBLE: u32 = 2;
    pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT: u32 = 4;
    pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH: u32 = 8;
    pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM: u32 = 16;
    pub const DISPLAYCONFIG_TARGET_IS_HMD: u32 = 32;
    pub const DISPLAYCONFIG_PATH_ACTIVE: u32 = 1;
    pub const DISPLAYCONFIG_PATH_PREFERRED_UNSCALED: u32 = 4;
    pub const DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE: u32 = 8;
    pub const DISPLAYCONFIG_PATH_VALID_FLAGS: u32 = 13;
    pub const QDC_ALL_PATHS: u32 = 1;
    pub const QDC_ONLY_ACTIVE_PATHS: u32 = 2;
    pub const QDC_DATABASE_CURRENT: u32 = 4;
    pub const QDC_VIRTUAL_MODE_AWARE: u32 = 16;
    pub const QDC_INCLUDE_HMD: u32 = 32;
    pub const SDC_TOPOLOGY_INTERNAL: u32 = 1;
    pub const SDC_TOPOLOGY_CLONE: u32 = 2;
    pub const SDC_TOPOLOGY_EXTEND: u32 = 4;
    pub const SDC_TOPOLOGY_EXTERNAL: u32 = 8;
    pub const SDC_TOPOLOGY_SUPPLIED: u32 = 16;
    pub const SDC_USE_DATABASE_CURRENT: u32 = 15;
    pub const SDC_USE_SUPPLIED_DISPLAY_CONFIG: u32 = 32;
    pub const SDC_VALIDATE: u32 = 64;
    pub const SDC_APPLY: u32 = 128;
    pub const SDC_NO_OPTIMIZATION: u32 = 256;
    pub const SDC_SAVE_TO_DATABASE: u32 = 512;
    pub const SDC_ALLOW_CHANGES: u32 = 1024;
    pub const SDC_PATH_PERSIST_IF_REQUIRED: u32 = 2048;
    pub const SDC_FORCE_MODE_ENUMERATION: u32 = 4096;
    pub const SDC_ALLOW_PATH_ORDER_CHANGES: u32 = 8192;
    pub const SDC_VIRTUAL_MODE_AWARE: u32 = 32768;
    pub const RDH_RECTANGLES: u32 = 1;
    pub const SYSRGN: u32 = 4;
    pub const GGO_METRICS: u32 = 0;
    pub const GGO_BITMAP: u32 = 1;
    pub const GGO_NATIVE: u32 = 2;
    pub const GGO_BEZIER: u32 = 3;
    pub const GGO_GRAY2_BITMAP: u32 = 4;
    pub const GGO_GRAY4_BITMAP: u32 = 5;
    pub const GGO_GRAY8_BITMAP: u32 = 6;
    pub const GGO_GLYPH_INDEX: u32 = 128;
    pub const GGO_UNHINTED: u32 = 256;
    pub const TT_POLYGON_TYPE: u32 = 24;
    pub const TT_PRIM_LINE: u32 = 1;
    pub const TT_PRIM_QSPLINE: u32 = 2;
    pub const TT_PRIM_CSPLINE: u32 = 3;
    pub const GCP_DBCS: u32 = 1;
    pub const GCP_REORDER: u32 = 2;
    pub const GCP_USEKERNING: u32 = 8;
    pub const GCP_GLYPHSHAPE: u32 = 16;
    pub const GCP_LIGATE: u32 = 32;
    pub const GCP_DIACRITIC: u32 = 256;
    pub const GCP_KASHIDA: u32 = 1024;
    pub const GCP_ERROR: u32 = 32768;
    pub const FLI_MASK: u32 = 4155;
    pub const GCP_JUSTIFY: u32 = 65536;
    pub const FLI_GLYPHS: u32 = 262144;
    pub const GCP_CLASSIN: u32 = 524288;
    pub const GCP_MAXEXTENT: u32 = 1048576;
    pub const GCP_JUSTIFYIN: u32 = 2097152;
    pub const GCP_DISPLAYZWG: u32 = 4194304;
    pub const GCP_SYMSWAPOFF: u32 = 8388608;
    pub const GCP_NUMERICOVERRIDE: u32 = 16777216;
    pub const GCP_NEUTRALOVERRIDE: u32 = 33554432;
    pub const GCP_NUMERICSLATIN: u32 = 67108864;
    pub const GCP_NUMERICSLOCAL: u32 = 134217728;
    pub const GCPCLASS_LATIN: u32 = 1;
    pub const GCPCLASS_HEBREW: u32 = 2;
    pub const GCPCLASS_ARABIC: u32 = 2;
    pub const GCPCLASS_NEUTRAL: u32 = 3;
    pub const GCPCLASS_LOCALNUMBER: u32 = 4;
    pub const GCPCLASS_LATINNUMBER: u32 = 5;
    pub const GCPCLASS_LATINNUMERICTERMINATOR: u32 = 6;
    pub const GCPCLASS_LATINNUMERICSEPARATOR: u32 = 7;
    pub const GCPCLASS_NUMERICSEPARATOR: u32 = 8;
    pub const GCPCLASS_PREBOUNDLTR: u32 = 128;
    pub const GCPCLASS_PREBOUNDRTL: u32 = 64;
    pub const GCPCLASS_POSTBOUNDLTR: u32 = 32;
    pub const GCPCLASS_POSTBOUNDRTL: u32 = 16;
    pub const GCPGLYPH_LINKBEFORE: u32 = 32768;
    pub const GCPGLYPH_LINKAFTER: u32 = 16384;
    pub const TT_AVAILABLE: u32 = 1;
    pub const TT_ENABLED: u32 = 2;
    pub const PFD_TYPE_RGBA: u32 = 0;
    pub const PFD_TYPE_COLORINDEX: u32 = 1;
    pub const PFD_MAIN_PLANE: u32 = 0;
    pub const PFD_OVERLAY_PLANE: u32 = 1;
    pub const PFD_UNDERLAY_PLANE: i32 = -1;
    pub const PFD_DOUBLEBUFFER: u32 = 1;
    pub const PFD_STEREO: u32 = 2;
    pub const PFD_DRAW_TO_WINDOW: u32 = 4;
    pub const PFD_DRAW_TO_BITMAP: u32 = 8;
    pub const PFD_SUPPORT_GDI: u32 = 16;
    pub const PFD_SUPPORT_OPENGL: u32 = 32;
    pub const PFD_GENERIC_FORMAT: u32 = 64;
    pub const PFD_NEED_PALETTE: u32 = 128;
    pub const PFD_NEED_SYSTEM_PALETTE: u32 = 256;
    pub const PFD_SWAP_EXCHANGE: u32 = 512;
    pub const PFD_SWAP_COPY: u32 = 1024;
    pub const PFD_SWAP_LAYER_BUFFERS: u32 = 2048;
    pub const PFD_GENERIC_ACCELERATED: u32 = 4096;
    pub const PFD_SUPPORT_DIRECTDRAW: u32 = 8192;
    pub const PFD_DIRECT3D_ACCELERATED: u32 = 16384;
    pub const PFD_SUPPORT_COMPOSITION: u32 = 32768;
    pub const PFD_DEPTH_DONTCARE: u32 = 536870912;
    pub const PFD_DOUBLEBUFFER_DONTCARE: u32 = 1073741824;
    pub const PFD_STEREO_DONTCARE: u32 = 2147483648;
    pub const DC_BINADJUST: u32 = 19;
    pub const DC_EMF_COMPLIANT: u32 = 20;
    pub const DC_DATATYPE_PRODUCED: u32 = 21;
    pub const DC_COLLATE: u32 = 22;
    pub const DC_MANUFACTURER: u32 = 23;
    pub const DC_MODEL: u32 = 24;
    pub const DC_PERSONALITY: u32 = 25;
    pub const DC_PRINTRATE: u32 = 26;
    pub const DC_PRINTRATEUNIT: u32 = 27;
    pub const PRINTRATEUNIT_PPM: u32 = 1;
    pub const PRINTRATEUNIT_CPS: u32 = 2;
    pub const PRINTRATEUNIT_LPM: u32 = 3;
    pub const PRINTRATEUNIT_IPM: u32 = 4;
    pub const DC_PRINTERMEM: u32 = 28;
    pub const DC_MEDIAREADY: u32 = 29;
    pub const DC_STAPLE: u32 = 30;
    pub const DC_PRINTRATEPPM: u32 = 31;
    pub const DC_COLORDEVICE: u32 = 32;
    pub const DC_NUP: u32 = 33;
    pub const DC_MEDIATYPENAMES: u32 = 34;
    pub const DC_MEDIATYPES: u32 = 35;
    pub const DCTT_BITMAP: u32 = 1;
    pub const DCTT_DOWNLOAD: u32 = 2;
    pub const DCTT_SUBDEV: u32 = 4;
    pub const DCTT_DOWNLOAD_OUTLINE: u32 = 8;
    pub const DCBA_FACEUPNONE: u32 = 0;
    pub const DCBA_FACEUPCENTER: u32 = 1;
    pub const DCBA_FACEUPLEFT: u32 = 2;
    pub const DCBA_FACEUPRIGHT: u32 = 3;
    pub const DCBA_FACEDOWNNONE: u32 = 256;
    pub const DCBA_FACEDOWNCENTER: u32 = 257;
    pub const DCBA_FACEDOWNLEFT: u32 = 258;
    pub const DCBA_FACEDOWNRIGHT: u32 = 259;
    pub const GS_8BIT_INDICES: u32 = 1;
    pub const GGI_MARK_NONEXISTING_GLYPHS: u32 = 1;
    pub const MM_MAX_NUMAXES: u32 = 16;
    pub const FR_PRIVATE: u32 = 16;
    pub const FR_NOT_ENUM: u32 = 32;
    pub const MM_MAX_AXES_NAMELEN: u32 = 16;
    pub const AC_SRC_OVER: u32 = 0;
    pub const AC_SRC_ALPHA: u32 = 1;
    pub const GRADIENT_FILL_RECT_H: u32 = 0;
    pub const GRADIENT_FILL_RECT_V: u32 = 1;
    pub const GRADIENT_FILL_TRIANGLE: u32 = 2;
    pub const GRADIENT_FILL_OP_FLAG: u32 = 255;
    pub const CA_NEGATIVE: u32 = 1;
    pub const CA_LOG_FILTER: u32 = 2;
    pub const ILLUMINANT_DEVICE_DEFAULT: u32 = 0;
    pub const ILLUMINANT_A: u32 = 1;
    pub const ILLUMINANT_B: u32 = 2;
    pub const ILLUMINANT_C: u32 = 3;
    pub const ILLUMINANT_D50: u32 = 4;
    pub const ILLUMINANT_D55: u32 = 5;
    pub const ILLUMINANT_D65: u32 = 6;
    pub const ILLUMINANT_D75: u32 = 7;
    pub const ILLUMINANT_F2: u32 = 8;
    pub const ILLUMINANT_MAX_INDEX: u32 = 8;
    pub const ILLUMINANT_TUNGSTEN: u32 = 1;
    pub const ILLUMINANT_DAYLIGHT: u32 = 3;
    pub const ILLUMINANT_FLUORESCENT: u32 = 8;
    pub const ILLUMINANT_NTSC: u32 = 3;
    pub const DI_APPBANDING: u32 = 1;
    pub const DI_ROPS_READ_DESTINATION: u32 = 2;
    pub const FONTMAPPER_MAX: u32 = 10;
    pub const ICM_OFF: u32 = 1;
    pub const ICM_ON: u32 = 2;
    pub const ICM_QUERY: u32 = 3;
    pub const ICM_DONE_OUTSIDEDC: u32 = 4;
    pub const ENHMETA_SIGNATURE: u32 = 1179469088;
    pub const ENHMETA_STOCK_OBJECT: u32 = 2147483648;
    pub const EMR_HEADER: u32 = 1;
    pub const EMR_POLYBEZIER: u32 = 2;
    pub const EMR_POLYGON: u32 = 3;
    pub const EMR_POLYLINE: u32 = 4;
    pub const EMR_POLYBEZIERTO: u32 = 5;
    pub const EMR_POLYLINETO: u32 = 6;
    pub const EMR_POLYPOLYLINE: u32 = 7;
    pub const EMR_POLYPOLYGON: u32 = 8;
    pub const EMR_SETWINDOWEXTEX: u32 = 9;
    pub const EMR_SETWINDOWORGEX: u32 = 10;
    pub const EMR_SETVIEWPORTEXTEX: u32 = 11;
    pub const EMR_SETVIEWPORTORGEX: u32 = 12;
    pub const EMR_SETBRUSHORGEX: u32 = 13;
    pub const EMR_EOF: u32 = 14;
    pub const EMR_SETPIXELV: u32 = 15;
    pub const EMR_SETMAPPERFLAGS: u32 = 16;
    pub const EMR_SETMAPMODE: u32 = 17;
    pub const EMR_SETBKMODE: u32 = 18;
    pub const EMR_SETPOLYFILLMODE: u32 = 19;
    pub const EMR_SETROP2: u32 = 20;
    pub const EMR_SETSTRETCHBLTMODE: u32 = 21;
    pub const EMR_SETTEXTALIGN: u32 = 22;
    pub const EMR_SETCOLORADJUSTMENT: u32 = 23;
    pub const EMR_SETTEXTCOLOR: u32 = 24;
    pub const EMR_SETBKCOLOR: u32 = 25;
    pub const EMR_OFFSETCLIPRGN: u32 = 26;
    pub const EMR_MOVETOEX: u32 = 27;
    pub const EMR_SETMETARGN: u32 = 28;
    pub const EMR_EXCLUDECLIPRECT: u32 = 29;
    pub const EMR_INTERSECTCLIPRECT: u32 = 30;
    pub const EMR_SCALEVIEWPORTEXTEX: u32 = 31;
    pub const EMR_SCALEWINDOWEXTEX: u32 = 32;
    pub const EMR_SAVEDC: u32 = 33;
    pub const EMR_RESTOREDC: u32 = 34;
    pub const EMR_SETWORLDTRANSFORM: u32 = 35;
    pub const EMR_MODIFYWORLDTRANSFORM: u32 = 36;
    pub const EMR_SELECTOBJECT: u32 = 37;
    pub const EMR_CREATEPEN: u32 = 38;
    pub const EMR_CREATEBRUSHINDIRECT: u32 = 39;
    pub const EMR_DELETEOBJECT: u32 = 40;
    pub const EMR_ANGLEARC: u32 = 41;
    pub const EMR_ELLIPSE: u32 = 42;
    pub const EMR_RECTANGLE: u32 = 43;
    pub const EMR_ROUNDRECT: u32 = 44;
    pub const EMR_ARC: u32 = 45;
    pub const EMR_CHORD: u32 = 46;
    pub const EMR_PIE: u32 = 47;
    pub const EMR_SELECTPALETTE: u32 = 48;
    pub const EMR_CREATEPALETTE: u32 = 49;
    pub const EMR_SETPALETTEENTRIES: u32 = 50;
    pub const EMR_RESIZEPALETTE: u32 = 51;
    pub const EMR_REALIZEPALETTE: u32 = 52;
    pub const EMR_EXTFLOODFILL: u32 = 53;
    pub const EMR_LINETO: u32 = 54;
    pub const EMR_ARCTO: u32 = 55;
    pub const EMR_POLYDRAW: u32 = 56;
    pub const EMR_SETARCDIRECTION: u32 = 57;
    pub const EMR_SETMITERLIMIT: u32 = 58;
    pub const EMR_BEGINPATH: u32 = 59;
    pub const EMR_ENDPATH: u32 = 60;
    pub const EMR_CLOSEFIGURE: u32 = 61;
    pub const EMR_FILLPATH: u32 = 62;
    pub const EMR_STROKEANDFILLPATH: u32 = 63;
    pub const EMR_STROKEPATH: u32 = 64;
    pub const EMR_FLATTENPATH: u32 = 65;
    pub const EMR_WIDENPATH: u32 = 66;
    pub const EMR_SELECTCLIPPATH: u32 = 67;
    pub const EMR_ABORTPATH: u32 = 68;
    pub const EMR_GDICOMMENT: u32 = 70;
    pub const EMR_FILLRGN: u32 = 71;
    pub const EMR_FRAMERGN: u32 = 72;
    pub const EMR_INVERTRGN: u32 = 73;
    pub const EMR_PAINTRGN: u32 = 74;
    pub const EMR_EXTSELECTCLIPRGN: u32 = 75;
    pub const EMR_BITBLT: u32 = 76;
    pub const EMR_STRETCHBLT: u32 = 77;
    pub const EMR_MASKBLT: u32 = 78;
    pub const EMR_PLGBLT: u32 = 79;
    pub const EMR_SETDIBITSTODEVICE: u32 = 80;
    pub const EMR_STRETCHDIBITS: u32 = 81;
    pub const EMR_EXTCREATEFONTINDIRECTW: u32 = 82;
    pub const EMR_EXTTEXTOUTA: u32 = 83;
    pub const EMR_EXTTEXTOUTW: u32 = 84;
    pub const EMR_POLYBEZIER16: u32 = 85;
    pub const EMR_POLYGON16: u32 = 86;
    pub const EMR_POLYLINE16: u32 = 87;
    pub const EMR_POLYBEZIERTO16: u32 = 88;
    pub const EMR_POLYLINETO16: u32 = 89;
    pub const EMR_POLYPOLYLINE16: u32 = 90;
    pub const EMR_POLYPOLYGON16: u32 = 91;
    pub const EMR_POLYDRAW16: u32 = 92;
    pub const EMR_CREATEMONOBRUSH: u32 = 93;
    pub const EMR_CREATEDIBPATTERNBRUSHPT: u32 = 94;
    pub const EMR_EXTCREATEPEN: u32 = 95;
    pub const EMR_POLYTEXTOUTA: u32 = 96;
    pub const EMR_POLYTEXTOUTW: u32 = 97;
    pub const EMR_SETICMMODE: u32 = 98;
    pub const EMR_CREATECOLORSPACE: u32 = 99;
    pub const EMR_SETCOLORSPACE: u32 = 100;
    pub const EMR_DELETECOLORSPACE: u32 = 101;
    pub const EMR_GLSRECORD: u32 = 102;
    pub const EMR_GLSBOUNDEDRECORD: u32 = 103;
    pub const EMR_PIXELFORMAT: u32 = 104;
    pub const EMR_RESERVED_105: u32 = 105;
    pub const EMR_RESERVED_106: u32 = 106;
    pub const EMR_RESERVED_107: u32 = 107;
    pub const EMR_RESERVED_108: u32 = 108;
    pub const EMR_RESERVED_109: u32 = 109;
    pub const EMR_RESERVED_110: u32 = 110;
    pub const EMR_COLORCORRECTPALETTE: u32 = 111;
    pub const EMR_SETICMPROFILEA: u32 = 112;
    pub const EMR_SETICMPROFILEW: u32 = 113;
    pub const EMR_ALPHABLEND: u32 = 114;
    pub const EMR_SETLAYOUT: u32 = 115;
    pub const EMR_TRANSPARENTBLT: u32 = 116;
    pub const EMR_RESERVED_117: u32 = 117;
    pub const EMR_GRADIENTFILL: u32 = 118;
    pub const EMR_RESERVED_119: u32 = 119;
    pub const EMR_RESERVED_120: u32 = 120;
    pub const EMR_COLORMATCHTOTARGETW: u32 = 121;
    pub const EMR_CREATECOLORSPACEW: u32 = 122;
    pub const EMR_MIN: u32 = 1;
    pub const EMR_MAX: u32 = 122;
    pub const SETICMPROFILE_EMBEDED: u32 = 1;
    pub const CREATECOLORSPACE_EMBEDED: u32 = 1;
    pub const COLORMATCHTOTARGET_EMBEDED: u32 = 1;
    pub const GDICOMMENT_IDENTIFIER: u32 = 1128875079;
    pub const GDICOMMENT_WINDOWS_METAFILE: u32 = 2147483649;
    pub const GDICOMMENT_BEGINGROUP: u32 = 2;
    pub const GDICOMMENT_ENDGROUP: u32 = 3;
    pub const GDICOMMENT_MULTIFORMATS: u32 = 1073741828;
    pub const EPS_SIGNATURE: u32 = 1179865157;
    pub const GDICOMMENT_UNICODE_STRING: u32 = 64;
    pub const GDICOMMENT_UNICODE_END: u32 = 128;
    pub const WGL_FONT_LINES: u32 = 0;
    pub const WGL_FONT_POLYGONS: u32 = 1;
    pub const LPD_DOUBLEBUFFER: u32 = 1;
    pub const LPD_STEREO: u32 = 2;
    pub const LPD_SUPPORT_GDI: u32 = 16;
    pub const LPD_SUPPORT_OPENGL: u32 = 32;
    pub const LPD_SHARE_DEPTH: u32 = 64;
    pub const LPD_SHARE_STENCIL: u32 = 128;
    pub const LPD_SHARE_ACCUM: u32 = 256;
    pub const LPD_SWAP_EXCHANGE: u32 = 512;
    pub const LPD_SWAP_COPY: u32 = 1024;
    pub const LPD_TRANSPARENT: u32 = 4096;
    pub const LPD_TYPE_RGBA: u32 = 0;
    pub const LPD_TYPE_COLORINDEX: u32 = 1;
    pub const WGL_SWAP_MAIN_PLANE: u32 = 1;
    pub const WGL_SWAP_OVERLAY1: u32 = 2;
    pub const WGL_SWAP_OVERLAY2: u32 = 4;
    pub const WGL_SWAP_OVERLAY3: u32 = 8;
    pub const WGL_SWAP_OVERLAY4: u32 = 16;
    pub const WGL_SWAP_OVERLAY5: u32 = 32;
    pub const WGL_SWAP_OVERLAY6: u32 = 64;
    pub const WGL_SWAP_OVERLAY7: u32 = 128;
    pub const WGL_SWAP_OVERLAY8: u32 = 256;
    pub const WGL_SWAP_OVERLAY9: u32 = 512;
    pub const WGL_SWAP_OVERLAY10: u32 = 1024;
    pub const WGL_SWAP_OVERLAY11: u32 = 2048;
    pub const WGL_SWAP_OVERLAY12: u32 = 4096;
    pub const WGL_SWAP_OVERLAY13: u32 = 8192;
    pub const WGL_SWAP_OVERLAY14: u32 = 16384;
    pub const WGL_SWAP_OVERLAY15: u32 = 32768;
    pub const WGL_SWAP_UNDERLAY1: u32 = 65536;
    pub const WGL_SWAP_UNDERLAY2: u32 = 131072;
    pub const WGL_SWAP_UNDERLAY3: u32 = 262144;
    pub const WGL_SWAP_UNDERLAY4: u32 = 524288;
    pub const WGL_SWAP_UNDERLAY5: u32 = 1048576;
    pub const WGL_SWAP_UNDERLAY6: u32 = 2097152;
    pub const WGL_SWAP_UNDERLAY7: u32 = 4194304;
    pub const WGL_SWAP_UNDERLAY8: u32 = 8388608;
    pub const WGL_SWAP_UNDERLAY9: u32 = 16777216;
    pub const WGL_SWAP_UNDERLAY10: u32 = 33554432;
    pub const WGL_SWAP_UNDERLAY11: u32 = 67108864;
    pub const WGL_SWAP_UNDERLAY12: u32 = 134217728;
    pub const WGL_SWAP_UNDERLAY13: u32 = 268435456;
    pub const WGL_SWAP_UNDERLAY14: u32 = 536870912;
    pub const WGL_SWAP_UNDERLAY15: u32 = 1073741824;
    pub const WGL_SWAPMULTIPLE_MAX: u32 = 16;
    pub const DIFFERENCE: u32 = 11;
    pub const SB_HORZ: u32 = 0;
    pub const SB_VERT: u32 = 1;
    pub const SB_CTL: u32 = 2;
    pub const SB_BOTH: u32 = 3;
    pub const SB_LINEUP: u32 = 0;
    pub const SB_LINELEFT: u32 = 0;
    pub const SB_LINEDOWN: u32 = 1;
    pub const SB_LINERIGHT: u32 = 1;
    pub const SB_PAGEUP: u32 = 2;
    pub const SB_PAGELEFT: u32 = 2;
    pub const SB_PAGEDOWN: u32 = 3;
    pub const SB_PAGERIGHT: u32 = 3;
    pub const SB_THUMBPOSITION: u32 = 4;
    pub const SB_THUMBTRACK: u32 = 5;
    pub const SB_TOP: u32 = 6;
    pub const SB_LEFT: u32 = 6;
    pub const SB_BOTTOM: u32 = 7;
    pub const SB_RIGHT: u32 = 7;
    pub const SB_ENDSCROLL: u32 = 8;
    pub const SW_HIDE: u32 = 0;
    pub const SW_SHOWNORMAL: u32 = 1;
    pub const SW_NORMAL: u32 = 1;
    pub const SW_SHOWMINIMIZED: u32 = 2;
    pub const SW_SHOWMAXIMIZED: u32 = 3;
    pub const SW_MAXIMIZE: u32 = 3;
    pub const SW_SHOWNOACTIVATE: u32 = 4;
    pub const SW_SHOW: u32 = 5;
    pub const SW_MINIMIZE: u32 = 6;
    pub const SW_SHOWMINNOACTIVE: u32 = 7;
    pub const SW_SHOWNA: u32 = 8;
    pub const SW_RESTORE: u32 = 9;
    pub const SW_SHOWDEFAULT: u32 = 10;
    pub const SW_FORCEMINIMIZE: u32 = 11;
    pub const SW_MAX: u32 = 11;
    pub const HIDE_WINDOW: u32 = 0;
    pub const SHOW_OPENWINDOW: u32 = 1;
    pub const SHOW_ICONWINDOW: u32 = 2;
    pub const SHOW_FULLSCREEN: u32 = 3;
    pub const SHOW_OPENNOACTIVATE: u32 = 4;
    pub const SW_PARENTCLOSING: u32 = 1;
    pub const SW_OTHERZOOM: u32 = 2;
    pub const SW_PARENTOPENING: u32 = 3;
    pub const SW_OTHERUNZOOM: u32 = 4;
    pub const AW_HOR_POSITIVE: u32 = 1;
    pub const AW_HOR_NEGATIVE: u32 = 2;
    pub const AW_VER_POSITIVE: u32 = 4;
    pub const AW_VER_NEGATIVE: u32 = 8;
    pub const AW_CENTER: u32 = 16;
    pub const AW_HIDE: u32 = 65536;
    pub const AW_ACTIVATE: u32 = 131072;
    pub const AW_SLIDE: u32 = 262144;
    pub const AW_BLEND: u32 = 524288;
    pub const KF_EXTENDED: u32 = 256;
    pub const KF_DLGMODE: u32 = 2048;
    pub const KF_MENUMODE: u32 = 4096;
    pub const KF_ALTDOWN: u32 = 8192;
    pub const KF_REPEAT: u32 = 16384;
    pub const KF_UP: u32 = 32768;
    pub const VK_LBUTTON: u32 = 1;
    pub const VK_RBUTTON: u32 = 2;
    pub const VK_CANCEL: u32 = 3;
    pub const VK_MBUTTON: u32 = 4;
    pub const VK_XBUTTON1: u32 = 5;
    pub const VK_XBUTTON2: u32 = 6;
    pub const VK_BACK: u32 = 8;
    pub const VK_TAB: u32 = 9;
    pub const VK_CLEAR: u32 = 12;
    pub const VK_RETURN: u32 = 13;
    pub const VK_SHIFT: u32 = 16;
    pub const VK_CONTROL: u32 = 17;
    pub const VK_MENU: u32 = 18;
    pub const VK_PAUSE: u32 = 19;
    pub const VK_CAPITAL: u32 = 20;
    pub const VK_KANA: u32 = 21;
    pub const VK_HANGEUL: u32 = 21;
    pub const VK_HANGUL: u32 = 21;
    pub const VK_IME_ON: u32 = 22;
    pub const VK_JUNJA: u32 = 23;
    pub const VK_FINAL: u32 = 24;
    pub const VK_HANJA: u32 = 25;
    pub const VK_KANJI: u32 = 25;
    pub const VK_IME_OFF: u32 = 26;
    pub const VK_ESCAPE: u32 = 27;
    pub const VK_CONVERT: u32 = 28;
    pub const VK_NONCONVERT: u32 = 29;
    pub const VK_ACCEPT: u32 = 30;
    pub const VK_MODECHANGE: u32 = 31;
    pub const VK_SPACE: u32 = 32;
    pub const VK_PRIOR: u32 = 33;
    pub const VK_NEXT: u32 = 34;
    pub const VK_END: u32 = 35;
    pub const VK_HOME: u32 = 36;
    pub const VK_LEFT: u32 = 37;
    pub const VK_UP: u32 = 38;
    pub const VK_RIGHT: u32 = 39;
    pub const VK_DOWN: u32 = 40;
    pub const VK_SELECT: u32 = 41;
    pub const VK_PRINT: u32 = 42;
    pub const VK_EXECUTE: u32 = 43;
    pub const VK_SNAPSHOT: u32 = 44;
    pub const VK_INSERT: u32 = 45;
    pub const VK_DELETE: u32 = 46;
    pub const VK_HELP: u32 = 47;
    pub const VK_LWIN: u32 = 91;
    pub const VK_RWIN: u32 = 92;
    pub const VK_APPS: u32 = 93;
    pub const VK_SLEEP: u32 = 95;
    pub const VK_NUMPAD0: u32 = 96;
    pub const VK_NUMPAD1: u32 = 97;
    pub const VK_NUMPAD2: u32 = 98;
    pub const VK_NUMPAD3: u32 = 99;
    pub const VK_NUMPAD4: u32 = 100;
    pub const VK_NUMPAD5: u32 = 101;
    pub const VK_NUMPAD6: u32 = 102;
    pub const VK_NUMPAD7: u32 = 103;
    pub const VK_NUMPAD8: u32 = 104;
    pub const VK_NUMPAD9: u32 = 105;
    pub const VK_MULTIPLY: u32 = 106;
    pub const VK_ADD: u32 = 107;
    pub const VK_SEPARATOR: u32 = 108;
    pub const VK_SUBTRACT: u32 = 109;
    pub const VK_DECIMAL: u32 = 110;
    pub const VK_DIVIDE: u32 = 111;
    pub const VK_F1: u32 = 112;
    pub const VK_F2: u32 = 113;
    pub const VK_F3: u32 = 114;
    pub const VK_F4: u32 = 115;
    pub const VK_F5: u32 = 116;
    pub const VK_F6: u32 = 117;
    pub const VK_F7: u32 = 118;
    pub const VK_F8: u32 = 119;
    pub const VK_F9: u32 = 120;
    pub const VK_F10: u32 = 121;
    pub const VK_F11: u32 = 122;
    pub const VK_F12: u32 = 123;
    pub const VK_F13: u32 = 124;
    pub const VK_F14: u32 = 125;
    pub const VK_F15: u32 = 126;
    pub const VK_F16: u32 = 127;
    pub const VK_F17: u32 = 128;
    pub const VK_F18: u32 = 129;
    pub const VK_F19: u32 = 130;
    pub const VK_F20: u32 = 131;
    pub const VK_F21: u32 = 132;
    pub const VK_F22: u32 = 133;
    pub const VK_F23: u32 = 134;
    pub const VK_F24: u32 = 135;
    pub const VK_NAVIGATION_VIEW: u32 = 136;
    pub const VK_NAVIGATION_MENU: u32 = 137;
    pub const VK_NAVIGATION_UP: u32 = 138;
    pub const VK_NAVIGATION_DOWN: u32 = 139;
    pub const VK_NAVIGATION_LEFT: u32 = 140;
    pub const VK_NAVIGATION_RIGHT: u32 = 141;
    pub const VK_NAVIGATION_ACCEPT: u32 = 142;
    pub const VK_NAVIGATION_CANCEL: u32 = 143;
    pub const VK_NUMLOCK: u32 = 144;
    pub const VK_SCROLL: u32 = 145;
    pub const VK_OEM_NEC_EQUAL: u32 = 146;
    pub const VK_OEM_FJ_JISHO: u32 = 146;
    pub const VK_OEM_FJ_MASSHOU: u32 = 147;
    pub const VK_OEM_FJ_TOUROKU: u32 = 148;
    pub const VK_OEM_FJ_LOYA: u32 = 149;
    pub const VK_OEM_FJ_ROYA: u32 = 150;
    pub const VK_LSHIFT: u32 = 160;
    pub const VK_RSHIFT: u32 = 161;
    pub const VK_LCONTROL: u32 = 162;
    pub const VK_RCONTROL: u32 = 163;
    pub const VK_LMENU: u32 = 164;
    pub const VK_RMENU: u32 = 165;
    pub const VK_BROWSER_BACK: u32 = 166;
    pub const VK_BROWSER_FORWARD: u32 = 167;
    pub const VK_BROWSER_REFRESH: u32 = 168;
    pub const VK_BROWSER_STOP: u32 = 169;
    pub const VK_BROWSER_SEARCH: u32 = 170;
    pub const VK_BROWSER_FAVORITES: u32 = 171;
    pub const VK_BROWSER_HOME: u32 = 172;
    pub const VK_VOLUME_MUTE: u32 = 173;
    pub const VK_VOLUME_DOWN: u32 = 174;
    pub const VK_VOLUME_UP: u32 = 175;
    pub const VK_MEDIA_NEXT_TRACK: u32 = 176;
    pub const VK_MEDIA_PREV_TRACK: u32 = 177;
    pub const VK_MEDIA_STOP: u32 = 178;
    pub const VK_MEDIA_PLAY_PAUSE: u32 = 179;
    pub const VK_LAUNCH_MAIL: u32 = 180;
    pub const VK_LAUNCH_MEDIA_SELECT: u32 = 181;
    pub const VK_LAUNCH_APP1: u32 = 182;
    pub const VK_LAUNCH_APP2: u32 = 183;
    pub const VK_OEM_1: u32 = 186;
    pub const VK_OEM_PLUS: u32 = 187;
    pub const VK_OEM_COMMA: u32 = 188;
    pub const VK_OEM_MINUS: u32 = 189;
    pub const VK_OEM_PERIOD: u32 = 190;
    pub const VK_OEM_2: u32 = 191;
    pub const VK_OEM_3: u32 = 192;
    pub const VK_GAMEPAD_A: u32 = 195;
    pub const VK_GAMEPAD_B: u32 = 196;
    pub const VK_GAMEPAD_X: u32 = 197;
    pub const VK_GAMEPAD_Y: u32 = 198;
    pub const VK_GAMEPAD_RIGHT_SHOULDER: u32 = 199;
    pub const VK_GAMEPAD_LEFT_SHOULDER: u32 = 200;
    pub const VK_GAMEPAD_LEFT_TRIGGER: u32 = 201;
    pub const VK_GAMEPAD_RIGHT_TRIGGER: u32 = 202;
    pub const VK_GAMEPAD_DPAD_UP: u32 = 203;
    pub const VK_GAMEPAD_DPAD_DOWN: u32 = 204;
    pub const VK_GAMEPAD_DPAD_LEFT: u32 = 205;
    pub const VK_GAMEPAD_DPAD_RIGHT: u32 = 206;
    pub const VK_GAMEPAD_MENU: u32 = 207;
    pub const VK_GAMEPAD_VIEW: u32 = 208;
    pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON: u32 = 209;
    pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON: u32 = 210;
    pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP: u32 = 211;
    pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN: u32 = 212;
    pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT: u32 = 213;
    pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT: u32 = 214;
    pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP: u32 = 215;
    pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN: u32 = 216;
    pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT: u32 = 217;
    pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT: u32 = 218;
    pub const VK_OEM_4: u32 = 219;
    pub const VK_OEM_5: u32 = 220;
    pub const VK_OEM_6: u32 = 221;
    pub const VK_OEM_7: u32 = 222;
    pub const VK_OEM_8: u32 = 223;
    pub const VK_OEM_AX: u32 = 225;
    pub const VK_OEM_102: u32 = 226;
    pub const VK_ICO_HELP: u32 = 227;
    pub const VK_ICO_00: u32 = 228;
    pub const VK_PROCESSKEY: u32 = 229;
    pub const VK_ICO_CLEAR: u32 = 230;
    pub const VK_PACKET: u32 = 231;
    pub const VK_OEM_RESET: u32 = 233;
    pub const VK_OEM_JUMP: u32 = 234;
    pub const VK_OEM_PA1: u32 = 235;
    pub const VK_OEM_PA2: u32 = 236;
    pub const VK_OEM_PA3: u32 = 237;
    pub const VK_OEM_WSCTRL: u32 = 238;
    pub const VK_OEM_CUSEL: u32 = 239;
    pub const VK_OEM_ATTN: u32 = 240;
    pub const VK_OEM_FINISH: u32 = 241;
    pub const VK_OEM_COPY: u32 = 242;
    pub const VK_OEM_AUTO: u32 = 243;
    pub const VK_OEM_ENLW: u32 = 244;
    pub const VK_OEM_BACKTAB: u32 = 245;
    pub const VK_ATTN: u32 = 246;
    pub const VK_CRSEL: u32 = 247;
    pub const VK_EXSEL: u32 = 248;
    pub const VK_EREOF: u32 = 249;
    pub const VK_PLAY: u32 = 250;
    pub const VK_ZOOM: u32 = 251;
    pub const VK_NONAME: u32 = 252;
    pub const VK_PA1: u32 = 253;
    pub const VK_OEM_CLEAR: u32 = 254;
    pub const WH_MIN: i32 = -1;
    pub const WH_MSGFILTER: i32 = -1;
    pub const WH_JOURNALRECORD: u32 = 0;
    pub const WH_JOURNALPLAYBACK: u32 = 1;
    pub const WH_KEYBOARD: u32 = 2;
    pub const WH_GETMESSAGE: u32 = 3;
    pub const WH_CALLWNDPROC: u32 = 4;
    pub const WH_CBT: u32 = 5;
    pub const WH_SYSMSGFILTER: u32 = 6;
    pub const WH_MOUSE: u32 = 7;
    pub const WH_DEBUG: u32 = 9;
    pub const WH_SHELL: u32 = 10;
    pub const WH_FOREGROUNDIDLE: u32 = 11;
    pub const WH_CALLWNDPROCRET: u32 = 12;
    pub const WH_KEYBOARD_LL: u32 = 13;
    pub const WH_MOUSE_LL: u32 = 14;
    pub const WH_MAX: u32 = 14;
    pub const WH_MINHOOK: i32 = -1;
    pub const WH_MAXHOOK: u32 = 14;
    pub const HC_ACTION: u32 = 0;
    pub const HC_GETNEXT: u32 = 1;
    pub const HC_SKIP: u32 = 2;
    pub const HC_NOREMOVE: u32 = 3;
    pub const HC_NOREM: u32 = 3;
    pub const HC_SYSMODALON: u32 = 4;
    pub const HC_SYSMODALOFF: u32 = 5;
    pub const HCBT_MOVESIZE: u32 = 0;
    pub const HCBT_MINMAX: u32 = 1;
    pub const HCBT_QS: u32 = 2;
    pub const HCBT_CREATEWND: u32 = 3;
    pub const HCBT_DESTROYWND: u32 = 4;
    pub const HCBT_ACTIVATE: u32 = 5;
    pub const HCBT_CLICKSKIPPED: u32 = 6;
    pub const HCBT_KEYSKIPPED: u32 = 7;
    pub const HCBT_SYSCOMMAND: u32 = 8;
    pub const HCBT_SETFOCUS: u32 = 9;
    pub const WTS_CONSOLE_CONNECT: u32 = 1;
    pub const WTS_CONSOLE_DISCONNECT: u32 = 2;
    pub const WTS_REMOTE_CONNECT: u32 = 3;
    pub const WTS_REMOTE_DISCONNECT: u32 = 4;
    pub const WTS_SESSION_LOGON: u32 = 5;
    pub const WTS_SESSION_LOGOFF: u32 = 6;
    pub const WTS_SESSION_LOCK: u32 = 7;
    pub const WTS_SESSION_UNLOCK: u32 = 8;
    pub const WTS_SESSION_REMOTE_CONTROL: u32 = 9;
    pub const WTS_SESSION_CREATE: u32 = 10;
    pub const WTS_SESSION_TERMINATE: u32 = 11;
    pub const MSGF_DIALOGBOX: u32 = 0;
    pub const MSGF_MESSAGEBOX: u32 = 1;
    pub const MSGF_MENU: u32 = 2;
    pub const MSGF_SCROLLBAR: u32 = 5;
    pub const MSGF_NEXTWINDOW: u32 = 6;
    pub const MSGF_MAX: u32 = 8;
    pub const MSGF_USER: u32 = 4096;
    pub const HSHELL_WINDOWCREATED: u32 = 1;
    pub const HSHELL_WINDOWDESTROYED: u32 = 2;
    pub const HSHELL_ACTIVATESHELLWINDOW: u32 = 3;
    pub const HSHELL_WINDOWACTIVATED: u32 = 4;
    pub const HSHELL_GETMINRECT: u32 = 5;
    pub const HSHELL_REDRAW: u32 = 6;
    pub const HSHELL_TASKMAN: u32 = 7;
    pub const HSHELL_LANGUAGE: u32 = 8;
    pub const HSHELL_SYSMENU: u32 = 9;
    pub const HSHELL_ENDTASK: u32 = 10;
    pub const HSHELL_ACCESSIBILITYSTATE: u32 = 11;
    pub const HSHELL_APPCOMMAND: u32 = 12;
    pub const HSHELL_WINDOWREPLACED: u32 = 13;
    pub const HSHELL_WINDOWREPLACING: u32 = 14;
    pub const HSHELL_MONITORCHANGED: u32 = 16;
    pub const HSHELL_HIGHBIT: u32 = 32768;
    pub const HSHELL_FLASH: u32 = 32774;
    pub const HSHELL_RUDEAPPACTIVATED: u32 = 32772;
    pub const APPCOMMAND_BROWSER_BACKWARD: u32 = 1;
    pub const APPCOMMAND_BROWSER_FORWARD: u32 = 2;
    pub const APPCOMMAND_BROWSER_REFRESH: u32 = 3;
    pub const APPCOMMAND_BROWSER_STOP: u32 = 4;
    pub const APPCOMMAND_BROWSER_SEARCH: u32 = 5;
    pub const APPCOMMAND_BROWSER_FAVORITES: u32 = 6;
    pub const APPCOMMAND_BROWSER_HOME: u32 = 7;
    pub const APPCOMMAND_VOLUME_MUTE: u32 = 8;
    pub const APPCOMMAND_VOLUME_DOWN: u32 = 9;
    pub const APPCOMMAND_VOLUME_UP: u32 = 10;
    pub const APPCOMMAND_MEDIA_NEXTTRACK: u32 = 11;
    pub const APPCOMMAND_MEDIA_PREVIOUSTRACK: u32 = 12;
    pub const APPCOMMAND_MEDIA_STOP: u32 = 13;
    pub const APPCOMMAND_MEDIA_PLAY_PAUSE: u32 = 14;
    pub const APPCOMMAND_LAUNCH_MAIL: u32 = 15;
    pub const APPCOMMAND_LAUNCH_MEDIA_SELECT: u32 = 16;
    pub const APPCOMMAND_LAUNCH_APP1: u32 = 17;
    pub const APPCOMMAND_LAUNCH_APP2: u32 = 18;
    pub const APPCOMMAND_BASS_DOWN: u32 = 19;
    pub const APPCOMMAND_BASS_BOOST: u32 = 20;
    pub const APPCOMMAND_BASS_UP: u32 = 21;
    pub const APPCOMMAND_TREBLE_DOWN: u32 = 22;
    pub const APPCOMMAND_TREBLE_UP: u32 = 23;
    pub const APPCOMMAND_MICROPHONE_VOLUME_MUTE: u32 = 24;
    pub const APPCOMMAND_MICROPHONE_VOLUME_DOWN: u32 = 25;
    pub const APPCOMMAND_MICROPHONE_VOLUME_UP: u32 = 26;
    pub const APPCOMMAND_HELP: u32 = 27;
    pub const APPCOMMAND_FIND: u32 = 28;
    pub const APPCOMMAND_NEW: u32 = 29;
    pub const APPCOMMAND_OPEN: u32 = 30;
    pub const APPCOMMAND_CLOSE: u32 = 31;
    pub const APPCOMMAND_SAVE: u32 = 32;
    pub const APPCOMMAND_PRINT: u32 = 33;
    pub const APPCOMMAND_UNDO: u32 = 34;
    pub const APPCOMMAND_REDO: u32 = 35;
    pub const APPCOMMAND_COPY: u32 = 36;
    pub const APPCOMMAND_CUT: u32 = 37;
    pub const APPCOMMAND_PASTE: u32 = 38;
    pub const APPCOMMAND_REPLY_TO_MAIL: u32 = 39;
    pub const APPCOMMAND_FORWARD_MAIL: u32 = 40;
    pub const APPCOMMAND_SEND_MAIL: u32 = 41;
    pub const APPCOMMAND_SPELL_CHECK: u32 = 42;
    pub const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE: u32 = 43;
    pub const APPCOMMAND_MIC_ON_OFF_TOGGLE: u32 = 44;
    pub const APPCOMMAND_CORRECTION_LIST: u32 = 45;
    pub const APPCOMMAND_MEDIA_PLAY: u32 = 46;
    pub const APPCOMMAND_MEDIA_PAUSE: u32 = 47;
    pub const APPCOMMAND_MEDIA_RECORD: u32 = 48;
    pub const APPCOMMAND_MEDIA_FAST_FORWARD: u32 = 49;
    pub const APPCOMMAND_MEDIA_REWIND: u32 = 50;
    pub const APPCOMMAND_MEDIA_CHANNEL_UP: u32 = 51;
    pub const APPCOMMAND_MEDIA_CHANNEL_DOWN: u32 = 52;
    pub const APPCOMMAND_DELETE: u32 = 53;
    pub const APPCOMMAND_DWM_FLIP3D: u32 = 54;
    pub const FAPPCOMMAND_MOUSE: u32 = 32768;
    pub const FAPPCOMMAND_KEY: u32 = 0;
    pub const FAPPCOMMAND_OEM: u32 = 4096;
    pub const FAPPCOMMAND_MASK: u32 = 61440;
    pub const LLKHF_EXTENDED: u32 = 1;
    pub const LLKHF_INJECTED: u32 = 16;
    pub const LLKHF_ALTDOWN: u32 = 32;
    pub const LLKHF_UP: u32 = 128;
    pub const LLKHF_LOWER_IL_INJECTED: u32 = 2;
    pub const LLMHF_INJECTED: u32 = 1;
    pub const LLMHF_LOWER_IL_INJECTED: u32 = 2;
    pub const HKL_PREV: u32 = 0;
    pub const HKL_NEXT: u32 = 1;
    pub const KLF_ACTIVATE: u32 = 1;
    pub const KLF_SUBSTITUTE_OK: u32 = 2;
    pub const KLF_REORDER: u32 = 8;
    pub const KLF_REPLACELANG: u32 = 16;
    pub const KLF_NOTELLSHELL: u32 = 128;
    pub const KLF_SETFORPROCESS: u32 = 256;
    pub const KLF_SHIFTLOCK: u32 = 65536;
    pub const KLF_RESET: u32 = 1073741824;
    pub const INPUTLANGCHANGE_SYSCHARSET: u32 = 1;
    pub const INPUTLANGCHANGE_FORWARD: u32 = 2;
    pub const INPUTLANGCHANGE_BACKWARD: u32 = 4;
    pub const KL_NAMELENGTH: u32 = 9;
    pub const GMMP_USE_DISPLAY_POINTS: u32 = 1;
    pub const GMMP_USE_HIGH_RESOLUTION_POINTS: u32 = 2;
    pub const DESKTOP_READOBJECTS: u32 = 1;
    pub const DESKTOP_CREATEWINDOW: u32 = 2;
    pub const DESKTOP_CREATEMENU: u32 = 4;
    pub const DESKTOP_HOOKCONTROL: u32 = 8;
    pub const DESKTOP_JOURNALRECORD: u32 = 16;
    pub const DESKTOP_JOURNALPLAYBACK: u32 = 32;
    pub const DESKTOP_ENUMERATE: u32 = 64;
    pub const DESKTOP_WRITEOBJECTS: u32 = 128;
    pub const DESKTOP_SWITCHDESKTOP: u32 = 256;
    pub const DF_ALLOWOTHERACCOUNTHOOK: u32 = 1;
    pub const WINSTA_ENUMDESKTOPS: u32 = 1;
    pub const WINSTA_READATTRIBUTES: u32 = 2;
    pub const WINSTA_ACCESSCLIPBOARD: u32 = 4;
    pub const WINSTA_CREATEDESKTOP: u32 = 8;
    pub const WINSTA_WRITEATTRIBUTES: u32 = 16;
    pub const WINSTA_ACCESSGLOBALATOMS: u32 = 32;
    pub const WINSTA_EXITWINDOWS: u32 = 64;
    pub const WINSTA_ENUMERATE: u32 = 256;
    pub const WINSTA_READSCREEN: u32 = 512;
    pub const WINSTA_ALL_ACCESS: u32 = 895;
    pub const CWF_CREATE_ONLY: u32 = 1;
    pub const WSF_VISIBLE: u32 = 1;
    pub const UOI_FLAGS: u32 = 1;
    pub const UOI_NAME: u32 = 2;
    pub const UOI_TYPE: u32 = 3;
    pub const UOI_USER_SID: u32 = 4;
    pub const UOI_HEAPSIZE: u32 = 5;
    pub const UOI_IO: u32 = 6;
    pub const UOI_TIMERPROC_EXCEPTION_SUPPRESSION: u32 = 7;
    pub const GWL_WNDPROC: i32 = -4;
    pub const GWL_HINSTANCE: i32 = -6;
    pub const GWL_HWNDPARENT: i32 = -8;
    pub const GWL_STYLE: i32 = -16;
    pub const GWL_EXSTYLE: i32 = -20;
    pub const GWL_USERDATA: i32 = -21;
    pub const GWL_ID: i32 = -12;
    pub const GWLP_WNDPROC: i32 = -4;
    pub const GWLP_HINSTANCE: i32 = -6;
    pub const GWLP_HWNDPARENT: i32 = -8;
    pub const GWLP_USERDATA: i32 = -21;
    pub const GWLP_ID: i32 = -12;
    pub const GCL_MENUNAME: i32 = -8;
    pub const GCL_HBRBACKGROUND: i32 = -10;
    pub const GCL_HCURSOR: i32 = -12;
    pub const GCL_HICON: i32 = -14;
    pub const GCL_HMODULE: i32 = -16;
    pub const GCL_CBWNDEXTRA: i32 = -18;
    pub const GCL_CBCLSEXTRA: i32 = -20;
    pub const GCL_WNDPROC: i32 = -24;
    pub const GCL_STYLE: i32 = -26;
    pub const GCW_ATOM: i32 = -32;
    pub const GCL_HICONSM: i32 = -34;
    pub const GCLP_MENUNAME: i32 = -8;
    pub const GCLP_HBRBACKGROUND: i32 = -10;
    pub const GCLP_HCURSOR: i32 = -12;
    pub const GCLP_HICON: i32 = -14;
    pub const GCLP_HMODULE: i32 = -16;
    pub const GCLP_WNDPROC: i32 = -24;
    pub const GCLP_HICONSM: i32 = -34;
    pub const WM_NULL: u32 = 0;
    pub const WM_CREATE: u32 = 1;
    pub const WM_DESTROY: u32 = 2;
    pub const WM_MOVE: u32 = 3;
    pub const WM_SIZE: u32 = 5;
    pub const WM_ACTIVATE: u32 = 6;
    pub const WA_INACTIVE: u32 = 0;
    pub const WA_ACTIVE: u32 = 1;
    pub const WA_CLICKACTIVE: u32 = 2;
    pub const WM_SETFOCUS: u32 = 7;
    pub const WM_KILLFOCUS: u32 = 8;
    pub const WM_ENABLE: u32 = 10;
    pub const WM_SETREDRAW: u32 = 11;
    pub const WM_SETTEXT: u32 = 12;
    pub const WM_GETTEXT: u32 = 13;
    pub const WM_GETTEXTLENGTH: u32 = 14;
    pub const WM_PAINT: u32 = 15;
    pub const WM_CLOSE: u32 = 16;
    pub const WM_QUERYENDSESSION: u32 = 17;
    pub const WM_QUERYOPEN: u32 = 19;
    pub const WM_ENDSESSION: u32 = 22;
    pub const WM_QUIT: u32 = 18;
    pub const WM_ERASEBKGND: u32 = 20;
    pub const WM_SYSCOLORCHANGE: u32 = 21;
    pub const WM_SHOWWINDOW: u32 = 24;
    pub const WM_WININICHANGE: u32 = 26;
    pub const WM_SETTINGCHANGE: u32 = 26;
    pub const WM_DEVMODECHANGE: u32 = 27;
    pub const WM_ACTIVATEAPP: u32 = 28;
    pub const WM_FONTCHANGE: u32 = 29;
    pub const WM_TIMECHANGE: u32 = 30;
    pub const WM_CANCELMODE: u32 = 31;
    pub const WM_SETCURSOR: u32 = 32;
    pub const WM_MOUSEACTIVATE: u32 = 33;
    pub const WM_CHILDACTIVATE: u32 = 34;
    pub const WM_QUEUESYNC: u32 = 35;
    pub const WM_GETMINMAXINFO: u32 = 36;
    pub const WM_PAINTICON: u32 = 38;
    pub const WM_ICONERASEBKGND: u32 = 39;
    pub const WM_NEXTDLGCTL: u32 = 40;
    pub const WM_SPOOLERSTATUS: u32 = 42;
    pub const WM_DRAWITEM: u32 = 43;
    pub const WM_MEASUREITEM: u32 = 44;
    pub const WM_DELETEITEM: u32 = 45;
    pub const WM_VKEYTOITEM: u32 = 46;
    pub const WM_CHARTOITEM: u32 = 47;
    pub const WM_SETFONT: u32 = 48;
    pub const WM_GETFONT: u32 = 49;
    pub const WM_SETHOTKEY: u32 = 50;
    pub const WM_GETHOTKEY: u32 = 51;
    pub const WM_QUERYDRAGICON: u32 = 55;
    pub const WM_COMPAREITEM: u32 = 57;
    pub const WM_GETOBJECT: u32 = 61;
    pub const WM_COMPACTING: u32 = 65;
    pub const WM_COMMNOTIFY: u32 = 68;
    pub const WM_WINDOWPOSCHANGING: u32 = 70;
    pub const WM_WINDOWPOSCHANGED: u32 = 71;
    pub const WM_POWER: u32 = 72;
    pub const PWR_OK: u32 = 1;
    pub const PWR_FAIL: i32 = -1;
    pub const PWR_SUSPENDREQUEST: u32 = 1;
    pub const PWR_SUSPENDRESUME: u32 = 2;
    pub const PWR_CRITICALRESUME: u32 = 3;
    pub const WM_COPYDATA: u32 = 74;
    pub const WM_CANCELJOURNAL: u32 = 75;
    pub const WM_NOTIFY: u32 = 78;
    pub const WM_INPUTLANGCHANGEREQUEST: u32 = 80;
    pub const WM_INPUTLANGCHANGE: u32 = 81;
    pub const WM_TCARD: u32 = 82;
    pub const WM_HELP: u32 = 83;
    pub const WM_USERCHANGED: u32 = 84;
    pub const WM_NOTIFYFORMAT: u32 = 85;
    pub const NFR_ANSI: u32 = 1;
    pub const NFR_UNICODE: u32 = 2;
    pub const NF_QUERY: u32 = 3;
    pub const NF_REQUERY: u32 = 4;
    pub const WM_CONTEXTMENU: u32 = 123;
    pub const WM_STYLECHANGING: u32 = 124;
    pub const WM_STYLECHANGED: u32 = 125;
    pub const WM_DISPLAYCHANGE: u32 = 126;
    pub const WM_GETICON: u32 = 127;
    pub const WM_SETICON: u32 = 128;
    pub const WM_NCCREATE: u32 = 129;
    pub const WM_NCDESTROY: u32 = 130;
    pub const WM_NCCALCSIZE: u32 = 131;
    pub const WM_NCHITTEST: u32 = 132;
    pub const WM_NCPAINT: u32 = 133;
    pub const WM_NCACTIVATE: u32 = 134;
    pub const WM_GETDLGCODE: u32 = 135;
    pub const WM_SYNCPAINT: u32 = 136;
    pub const WM_NCMOUSEMOVE: u32 = 160;
    pub const WM_NCLBUTTONDOWN: u32 = 161;
    pub const WM_NCLBUTTONUP: u32 = 162;
    pub const WM_NCLBUTTONDBLCLK: u32 = 163;
    pub const WM_NCRBUTTONDOWN: u32 = 164;
    pub const WM_NCRBUTTONUP: u32 = 165;
    pub const WM_NCRBUTTONDBLCLK: u32 = 166;
    pub const WM_NCMBUTTONDOWN: u32 = 167;
    pub const WM_NCMBUTTONUP: u32 = 168;
    pub const WM_NCMBUTTONDBLCLK: u32 = 169;
    pub const WM_NCXBUTTONDOWN: u32 = 171;
    pub const WM_NCXBUTTONUP: u32 = 172;
    pub const WM_NCXBUTTONDBLCLK: u32 = 173;
    pub const WM_INPUT_DEVICE_CHANGE: u32 = 254;
    pub const WM_INPUT: u32 = 255;
    pub const WM_KEYFIRST: u32 = 256;
    pub const WM_KEYDOWN: u32 = 256;
    pub const WM_KEYUP: u32 = 257;
    pub const WM_CHAR: u32 = 258;
    pub const WM_DEADCHAR: u32 = 259;
    pub const WM_SYSKEYDOWN: u32 = 260;
    pub const WM_SYSKEYUP: u32 = 261;
    pub const WM_SYSCHAR: u32 = 262;
    pub const WM_SYSDEADCHAR: u32 = 263;
    pub const WM_UNICHAR: u32 = 265;
    pub const WM_KEYLAST: u32 = 265;
    pub const UNICODE_NOCHAR: u32 = 65535;
    pub const WM_IME_STARTCOMPOSITION: u32 = 269;
    pub const WM_IME_ENDCOMPOSITION: u32 = 270;
    pub const WM_IME_COMPOSITION: u32 = 271;
    pub const WM_IME_KEYLAST: u32 = 271;
    pub const WM_INITDIALOG: u32 = 272;
    pub const WM_COMMAND: u32 = 273;
    pub const WM_SYSCOMMAND: u32 = 274;
    pub const WM_TIMER: u32 = 275;
    pub const WM_HSCROLL: u32 = 276;
    pub const WM_VSCROLL: u32 = 277;
    pub const WM_INITMENU: u32 = 278;
    pub const WM_INITMENUPOPUP: u32 = 279;
    pub const WM_GESTURE: u32 = 281;
    pub const WM_GESTURENOTIFY: u32 = 282;
    pub const WM_MENUSELECT: u32 = 287;
    pub const WM_MENUCHAR: u32 = 288;
    pub const WM_ENTERIDLE: u32 = 289;
    pub const WM_MENURBUTTONUP: u32 = 290;
    pub const WM_MENUDRAG: u32 = 291;
    pub const WM_MENUGETOBJECT: u32 = 292;
    pub const WM_UNINITMENUPOPUP: u32 = 293;
    pub const WM_MENUCOMMAND: u32 = 294;
    pub const WM_CHANGEUISTATE: u32 = 295;
    pub const WM_UPDATEUISTATE: u32 = 296;
    pub const WM_QUERYUISTATE: u32 = 297;
    pub const UIS_SET: u32 = 1;
    pub const UIS_CLEAR: u32 = 2;
    pub const UIS_INITIALIZE: u32 = 3;
    pub const UISF_HIDEFOCUS: u32 = 1;
    pub const UISF_HIDEACCEL: u32 = 2;
    pub const UISF_ACTIVE: u32 = 4;
    pub const WM_CTLCOLORMSGBOX: u32 = 306;
    pub const WM_CTLCOLOREDIT: u32 = 307;
    pub const WM_CTLCOLORLISTBOX: u32 = 308;
    pub const WM_CTLCOLORBTN: u32 = 309;
    pub const WM_CTLCOLORDLG: u32 = 310;
    pub const WM_CTLCOLORSCROLLBAR: u32 = 311;
    pub const WM_CTLCOLORSTATIC: u32 = 312;
    pub const MN_GETHMENU: u32 = 481;
    pub const WM_MOUSEFIRST: u32 = 512;
    pub const WM_MOUSEMOVE: u32 = 512;
    pub const WM_LBUTTONDOWN: u32 = 513;
    pub const WM_LBUTTONUP: u32 = 514;
    pub const WM_LBUTTONDBLCLK: u32 = 515;
    pub const WM_RBUTTONDOWN: u32 = 516;
    pub const WM_RBUTTONUP: u32 = 517;
    pub const WM_RBUTTONDBLCLK: u32 = 518;
    pub const WM_MBUTTONDOWN: u32 = 519;
    pub const WM_MBUTTONUP: u32 = 520;
    pub const WM_MBUTTONDBLCLK: u32 = 521;
    pub const WM_MOUSEWHEEL: u32 = 522;
    pub const WM_XBUTTONDOWN: u32 = 523;
    pub const WM_XBUTTONUP: u32 = 524;
    pub const WM_XBUTTONDBLCLK: u32 = 525;
    pub const WM_MOUSEHWHEEL: u32 = 526;
    pub const WM_MOUSELAST: u32 = 526;
    pub const WHEEL_DELTA: u32 = 120;
    pub const XBUTTON1: u32 = 1;
    pub const XBUTTON2: u32 = 2;
    pub const WM_PARENTNOTIFY: u32 = 528;
    pub const WM_ENTERMENULOOP: u32 = 529;
    pub const WM_EXITMENULOOP: u32 = 530;
    pub const WM_NEXTMENU: u32 = 531;
    pub const WM_SIZING: u32 = 532;
    pub const WM_CAPTURECHANGED: u32 = 533;
    pub const WM_MOVING: u32 = 534;
    pub const WM_POWERBROADCAST: u32 = 536;
    pub const PBT_APMQUERYSUSPEND: u32 = 0;
    pub const PBT_APMQUERYSTANDBY: u32 = 1;
    pub const PBT_APMQUERYSUSPENDFAILED: u32 = 2;
    pub const PBT_APMQUERYSTANDBYFAILED: u32 = 3;
    pub const PBT_APMSUSPEND: u32 = 4;
    pub const PBT_APMSTANDBY: u32 = 5;
    pub const PBT_APMRESUMECRITICAL: u32 = 6;
    pub const PBT_APMRESUMESUSPEND: u32 = 7;
    pub const PBT_APMRESUMESTANDBY: u32 = 8;
    pub const PBTF_APMRESUMEFROMFAILURE: u32 = 1;
    pub const PBT_APMBATTERYLOW: u32 = 9;
    pub const PBT_APMPOWERSTATUSCHANGE: u32 = 10;
    pub const PBT_APMOEMEVENT: u32 = 11;
    pub const PBT_APMRESUMEAUTOMATIC: u32 = 18;
    pub const PBT_POWERSETTINGCHANGE: u32 = 32787;
    pub const WM_DEVICECHANGE: u32 = 537;
    pub const WM_MDICREATE: u32 = 544;
    pub const WM_MDIDESTROY: u32 = 545;
    pub const WM_MDIACTIVATE: u32 = 546;
    pub const WM_MDIRESTORE: u32 = 547;
    pub const WM_MDINEXT: u32 = 548;
    pub const WM_MDIMAXIMIZE: u32 = 549;
    pub const WM_MDITILE: u32 = 550;
    pub const WM_MDICASCADE: u32 = 551;
    pub const WM_MDIICONARRANGE: u32 = 552;
    pub const WM_MDIGETACTIVE: u32 = 553;
    pub const WM_MDISETMENU: u32 = 560;
    pub const WM_ENTERSIZEMOVE: u32 = 561;
    pub const WM_EXITSIZEMOVE: u32 = 562;
    pub const WM_DROPFILES: u32 = 563;
    pub const WM_MDIREFRESHMENU: u32 = 564;
    pub const WM_POINTERDEVICECHANGE: u32 = 568;
    pub const WM_POINTERDEVICEINRANGE: u32 = 569;
    pub const WM_POINTERDEVICEOUTOFRANGE: u32 = 570;
    pub const WM_TOUCH: u32 = 576;
    pub const WM_NCPOINTERUPDATE: u32 = 577;
    pub const WM_NCPOINTERDOWN: u32 = 578;
    pub const WM_NCPOINTERUP: u32 = 579;
    pub const WM_POINTERUPDATE: u32 = 581;
    pub const WM_POINTERDOWN: u32 = 582;
    pub const WM_POINTERUP: u32 = 583;
    pub const WM_POINTERENTER: u32 = 585;
    pub const WM_POINTERLEAVE: u32 = 586;
    pub const WM_POINTERACTIVATE: u32 = 587;
    pub const WM_POINTERCAPTURECHANGED: u32 = 588;
    pub const WM_TOUCHHITTESTING: u32 = 589;
    pub const WM_POINTERWHEEL: u32 = 590;
    pub const WM_POINTERHWHEEL: u32 = 591;
    pub const DM_POINTERHITTEST: u32 = 592;
    pub const WM_POINTERROUTEDTO: u32 = 593;
    pub const WM_POINTERROUTEDAWAY: u32 = 594;
    pub const WM_POINTERROUTEDRELEASED: u32 = 595;
    pub const WM_IME_SETCONTEXT: u32 = 641;
    pub const WM_IME_NOTIFY: u32 = 642;
    pub const WM_IME_CONTROL: u32 = 643;
    pub const WM_IME_COMPOSITIONFULL: u32 = 644;
    pub const WM_IME_SELECT: u32 = 645;
    pub const WM_IME_CHAR: u32 = 646;
    pub const WM_IME_REQUEST: u32 = 648;
    pub const WM_IME_KEYDOWN: u32 = 656;
    pub const WM_IME_KEYUP: u32 = 657;
    pub const WM_MOUSEHOVER: u32 = 673;
    pub const WM_MOUSELEAVE: u32 = 675;
    pub const WM_NCMOUSEHOVER: u32 = 672;
    pub const WM_NCMOUSELEAVE: u32 = 674;
    pub const WM_WTSSESSION_CHANGE: u32 = 689;
    pub const WM_TABLET_FIRST: u32 = 704;
    pub const WM_TABLET_LAST: u32 = 735;
    pub const WM_DPICHANGED: u32 = 736;
    pub const WM_DPICHANGED_BEFOREPARENT: u32 = 738;
    pub const WM_DPICHANGED_AFTERPARENT: u32 = 739;
    pub const WM_GETDPISCALEDSIZE: u32 = 740;
    pub const WM_CUT: u32 = 768;
    pub const WM_COPY: u32 = 769;
    pub const WM_PASTE: u32 = 770;
    pub const WM_CLEAR: u32 = 771;
    pub const WM_UNDO: u32 = 772;
    pub const WM_RENDERFORMAT: u32 = 773;
    pub const WM_RENDERALLFORMATS: u32 = 774;
    pub const WM_DESTROYCLIPBOARD: u32 = 775;
    pub const WM_DRAWCLIPBOARD: u32 = 776;
    pub const WM_PAINTCLIPBOARD: u32 = 777;
    pub const WM_VSCROLLCLIPBOARD: u32 = 778;
    pub const WM_SIZECLIPBOARD: u32 = 779;
    pub const WM_ASKCBFORMATNAME: u32 = 780;
    pub const WM_CHANGECBCHAIN: u32 = 781;
    pub const WM_HSCROLLCLIPBOARD: u32 = 782;
    pub const WM_QUERYNEWPALETTE: u32 = 783;
    pub const WM_PALETTEISCHANGING: u32 = 784;
    pub const WM_PALETTECHANGED: u32 = 785;
    pub const WM_HOTKEY: u32 = 786;
    pub const WM_PRINT: u32 = 791;
    pub const WM_PRINTCLIENT: u32 = 792;
    pub const WM_APPCOMMAND: u32 = 793;
    pub const WM_THEMECHANGED: u32 = 794;
    pub const WM_CLIPBOARDUPDATE: u32 = 797;
    pub const WM_DWMCOMPOSITIONCHANGED: u32 = 798;
    pub const WM_DWMNCRENDERINGCHANGED: u32 = 799;
    pub const WM_DWMCOLORIZATIONCOLORCHANGED: u32 = 800;
    pub const WM_DWMWINDOWMAXIMIZEDCHANGE: u32 = 801;
    pub const WM_DWMSENDICONICTHUMBNAIL: u32 = 803;
    pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP: u32 = 806;
    pub const WM_GETTITLEBARINFOEX: u32 = 831;
    pub const WM_HANDHELDFIRST: u32 = 856;
    pub const WM_HANDHELDLAST: u32 = 863;
    pub const WM_AFXFIRST: u32 = 864;
    pub const WM_AFXLAST: u32 = 895;
    pub const WM_PENWINFIRST: u32 = 896;
    pub const WM_PENWINLAST: u32 = 911;
    pub const WM_APP: u32 = 32768;
    pub const WM_USER: u32 = 1024;
    pub const WMSZ_LEFT: u32 = 1;
    pub const WMSZ_RIGHT: u32 = 2;
    pub const WMSZ_TOP: u32 = 3;
    pub const WMSZ_TOPLEFT: u32 = 4;
    pub const WMSZ_TOPRIGHT: u32 = 5;
    pub const WMSZ_BOTTOM: u32 = 6;
    pub const WMSZ_BOTTOMLEFT: u32 = 7;
    pub const WMSZ_BOTTOMRIGHT: u32 = 8;
    pub const HTERROR: i32 = -2;
    pub const HTTRANSPARENT: i32 = -1;
    pub const HTNOWHERE: u32 = 0;
    pub const HTCLIENT: u32 = 1;
    pub const HTCAPTION: u32 = 2;
    pub const HTSYSMENU: u32 = 3;
    pub const HTGROWBOX: u32 = 4;
    pub const HTSIZE: u32 = 4;
    pub const HTMENU: u32 = 5;
    pub const HTHSCROLL: u32 = 6;
    pub const HTVSCROLL: u32 = 7;
    pub const HTMINBUTTON: u32 = 8;
    pub const HTMAXBUTTON: u32 = 9;
    pub const HTLEFT: u32 = 10;
    pub const HTRIGHT: u32 = 11;
    pub const HTTOP: u32 = 12;
    pub const HTTOPLEFT: u32 = 13;
    pub const HTTOPRIGHT: u32 = 14;
    pub const HTBOTTOM: u32 = 15;
    pub const HTBOTTOMLEFT: u32 = 16;
    pub const HTBOTTOMRIGHT: u32 = 17;
    pub const HTBORDER: u32 = 18;
    pub const HTREDUCE: u32 = 8;
    pub const HTZOOM: u32 = 9;
    pub const HTSIZEFIRST: u32 = 10;
    pub const HTSIZELAST: u32 = 17;
    pub const HTOBJECT: u32 = 19;
    pub const HTCLOSE: u32 = 20;
    pub const HTHELP: u32 = 21;
    pub const SMTO_NORMAL: u32 = 0;
    pub const SMTO_BLOCK: u32 = 1;
    pub const SMTO_ABORTIFHUNG: u32 = 2;
    pub const SMTO_NOTIMEOUTIFNOTHUNG: u32 = 8;
    pub const SMTO_ERRORONEXIT: u32 = 32;
    pub const MA_ACTIVATE: u32 = 1;
    pub const MA_ACTIVATEANDEAT: u32 = 2;
    pub const MA_NOACTIVATE: u32 = 3;
    pub const MA_NOACTIVATEANDEAT: u32 = 4;
    pub const ICON_SMALL: u32 = 0;
    pub const ICON_BIG: u32 = 1;
    pub const ICON_SMALL2: u32 = 2;
    pub const SIZE_RESTORED: u32 = 0;
    pub const SIZE_MINIMIZED: u32 = 1;
    pub const SIZE_MAXIMIZED: u32 = 2;
    pub const SIZE_MAXSHOW: u32 = 3;
    pub const SIZE_MAXHIDE: u32 = 4;
    pub const SIZENORMAL: u32 = 0;
    pub const SIZEICONIC: u32 = 1;
    pub const SIZEFULLSCREEN: u32 = 2;
    pub const SIZEZOOMSHOW: u32 = 3;
    pub const SIZEZOOMHIDE: u32 = 4;
    pub const WVR_ALIGNTOP: u32 = 16;
    pub const WVR_ALIGNLEFT: u32 = 32;
    pub const WVR_ALIGNBOTTOM: u32 = 64;
    pub const WVR_ALIGNRIGHT: u32 = 128;
    pub const WVR_HREDRAW: u32 = 256;
    pub const WVR_VREDRAW: u32 = 512;
    pub const WVR_REDRAW: u32 = 768;
    pub const WVR_VALIDRECTS: u32 = 1024;
    pub const MK_LBUTTON: u32 = 1;
    pub const MK_RBUTTON: u32 = 2;
    pub const MK_SHIFT: u32 = 4;
    pub const MK_CONTROL: u32 = 8;
    pub const MK_MBUTTON: u32 = 16;
    pub const MK_XBUTTON1: u32 = 32;
    pub const MK_XBUTTON2: u32 = 64;
    pub const TME_HOVER: u32 = 1;
    pub const TME_LEAVE: u32 = 2;
    pub const TME_NONCLIENT: u32 = 16;
    pub const TME_QUERY: u32 = 1073741824;
    pub const TME_CANCEL: u32 = 2147483648;
    pub const HOVER_DEFAULT: u32 = 4294967295;
    pub const WS_OVERLAPPED: u32 = 0;
    pub const WS_POPUP: u32 = 2147483648;
    pub const WS_CHILD: u32 = 1073741824;
    pub const WS_MINIMIZE: u32 = 536870912;
    pub const WS_VISIBLE: u32 = 268435456;
    pub const WS_DISABLED: u32 = 134217728;
    pub const WS_CLIPSIBLINGS: u32 = 67108864;
    pub const WS_CLIPCHILDREN: u32 = 33554432;
    pub const WS_MAXIMIZE: u32 = 16777216;
    pub const WS_CAPTION: u32 = 12582912;
    pub const WS_BORDER: u32 = 8388608;
    pub const WS_DLGFRAME: u32 = 4194304;
    pub const WS_VSCROLL: u32 = 2097152;
    pub const WS_HSCROLL: u32 = 1048576;
    pub const WS_SYSMENU: u32 = 524288;
    pub const WS_THICKFRAME: u32 = 262144;
    pub const WS_GROUP: u32 = 131072;
    pub const WS_TABSTOP: u32 = 65536;
    pub const WS_MINIMIZEBOX: u32 = 131072;
    pub const WS_MAXIMIZEBOX: u32 = 65536;
    pub const WS_TILED: u32 = 0;
    pub const WS_ICONIC: u32 = 536870912;
    pub const WS_SIZEBOX: u32 = 262144;
    pub const WS_OVERLAPPEDWINDOW: u32 = 13565952;
    pub const WS_POPUPWINDOW: u32 = 2156396544;
    pub const WS_CHILDWINDOW: u32 = 1073741824;
    pub const WS_EX_DLGMODALFRAME: u32 = 1;
    pub const WS_EX_NOPARENTNOTIFY: u32 = 4;
    pub const WS_EX_TOPMOST: u32 = 8;
    pub const WS_EX_ACCEPTFILES: u32 = 16;
    pub const WS_EX_TRANSPARENT: u32 = 32;
    pub const WS_EX_MDICHILD: u32 = 64;
    pub const WS_EX_TOOLWINDOW: u32 = 128;
    pub const WS_EX_WINDOWEDGE: u32 = 256;
    pub const WS_EX_CLIENTEDGE: u32 = 512;
    pub const WS_EX_CONTEXTHELP: u32 = 1024;
    pub const WS_EX_RIGHT: u32 = 4096;
    pub const WS_EX_LEFT: u32 = 0;
    pub const WS_EX_RTLREADING: u32 = 8192;
    pub const WS_EX_LTRREADING: u32 = 0;
    pub const WS_EX_LEFTSCROLLBAR: u32 = 16384;
    pub const WS_EX_RIGHTSCROLLBAR: u32 = 0;
    pub const WS_EX_CONTROLPARENT: u32 = 65536;
    pub const WS_EX_STATICEDGE: u32 = 131072;
    pub const WS_EX_APPWINDOW: u32 = 262144;
    pub const WS_EX_OVERLAPPEDWINDOW: u32 = 768;
    pub const WS_EX_PALETTEWINDOW: u32 = 392;
    pub const WS_EX_LAYERED: u32 = 524288;
    pub const WS_EX_NOINHERITLAYOUT: u32 = 1048576;
    pub const WS_EX_NOREDIRECTIONBITMAP: u32 = 2097152;
    pub const WS_EX_LAYOUTRTL: u32 = 4194304;
    pub const WS_EX_COMPOSITED: u32 = 33554432;
    pub const WS_EX_NOACTIVATE: u32 = 134217728;
    pub const CS_VREDRAW: u32 = 1;
    pub const CS_HREDRAW: u32 = 2;
    pub const CS_DBLCLKS: u32 = 8;
    pub const CS_OWNDC: u32 = 32;
    pub const CS_CLASSDC: u32 = 64;
    pub const CS_PARENTDC: u32 = 128;
    pub const CS_NOCLOSE: u32 = 512;
    pub const CS_SAVEBITS: u32 = 2048;
    pub const CS_BYTEALIGNCLIENT: u32 = 4096;
    pub const CS_BYTEALIGNWINDOW: u32 = 8192;
    pub const CS_GLOBALCLASS: u32 = 16384;
    pub const CS_IME: u32 = 65536;
    pub const CS_DROPSHADOW: u32 = 131072;
    pub const PRF_CHECKVISIBLE: u32 = 1;
    pub const PRF_NONCLIENT: u32 = 2;
    pub const PRF_CLIENT: u32 = 4;
    pub const PRF_ERASEBKGND: u32 = 8;
    pub const PRF_CHILDREN: u32 = 16;
    pub const PRF_OWNED: u32 = 32;
    pub const BDR_RAISEDOUTER: u32 = 1;
    pub const BDR_SUNKENOUTER: u32 = 2;
    pub const BDR_RAISEDINNER: u32 = 4;
    pub const BDR_SUNKENINNER: u32 = 8;
    pub const BDR_OUTER: u32 = 3;
    pub const BDR_INNER: u32 = 12;
    pub const BDR_RAISED: u32 = 5;
    pub const BDR_SUNKEN: u32 = 10;
    pub const EDGE_RAISED: u32 = 5;
    pub const EDGE_SUNKEN: u32 = 10;
    pub const EDGE_ETCHED: u32 = 6;
    pub const EDGE_BUMP: u32 = 9;
    pub const BF_LEFT: u32 = 1;
    pub const BF_TOP: u32 = 2;
    pub const BF_RIGHT: u32 = 4;
    pub const BF_BOTTOM: u32 = 8;
    pub const BF_TOPLEFT: u32 = 3;
    pub const BF_TOPRIGHT: u32 = 6;
    pub const BF_BOTTOMLEFT: u32 = 9;
    pub const BF_BOTTOMRIGHT: u32 = 12;
    pub const BF_RECT: u32 = 15;
    pub const BF_DIAGONAL: u32 = 16;
    pub const BF_DIAGONAL_ENDTOPRIGHT: u32 = 22;
    pub const BF_DIAGONAL_ENDTOPLEFT: u32 = 19;
    pub const BF_DIAGONAL_ENDBOTTOMLEFT: u32 = 25;
    pub const BF_DIAGONAL_ENDBOTTOMRIGHT: u32 = 28;
    pub const BF_MIDDLE: u32 = 2048;
    pub const BF_SOFT: u32 = 4096;
    pub const BF_ADJUST: u32 = 8192;
    pub const BF_FLAT: u32 = 16384;
    pub const BF_MONO: u32 = 32768;
    pub const DFC_CAPTION: u32 = 1;
    pub const DFC_MENU: u32 = 2;
    pub const DFC_SCROLL: u32 = 3;
    pub const DFC_BUTTON: u32 = 4;
    pub const DFC_POPUPMENU: u32 = 5;
    pub const DFCS_CAPTIONCLOSE: u32 = 0;
    pub const DFCS_CAPTIONMIN: u32 = 1;
    pub const DFCS_CAPTIONMAX: u32 = 2;
    pub const DFCS_CAPTIONRESTORE: u32 = 3;
    pub const DFCS_CAPTIONHELP: u32 = 4;
    pub const DFCS_MENUARROW: u32 = 0;
    pub const DFCS_MENUCHECK: u32 = 1;
    pub const DFCS_MENUBULLET: u32 = 2;
    pub const DFCS_MENUARROWRIGHT: u32 = 4;
    pub const DFCS_SCROLLUP: u32 = 0;
    pub const DFCS_SCROLLDOWN: u32 = 1;
    pub const DFCS_SCROLLLEFT: u32 = 2;
    pub const DFCS_SCROLLRIGHT: u32 = 3;
    pub const DFCS_SCROLLCOMBOBOX: u32 = 5;
    pub const DFCS_SCROLLSIZEGRIP: u32 = 8;
    pub const DFCS_SCROLLSIZEGRIPRIGHT: u32 = 16;
    pub const DFCS_BUTTONCHECK: u32 = 0;
    pub const DFCS_BUTTONRADIOIMAGE: u32 = 1;
    pub const DFCS_BUTTONRADIOMASK: u32 = 2;
    pub const DFCS_BUTTONRADIO: u32 = 4;
    pub const DFCS_BUTTON3STATE: u32 = 8;
    pub const DFCS_BUTTONPUSH: u32 = 16;
    pub const DFCS_INACTIVE: u32 = 256;
    pub const DFCS_PUSHED: u32 = 512;
    pub const DFCS_CHECKED: u32 = 1024;
    pub const DFCS_TRANSPARENT: u32 = 2048;
    pub const DFCS_HOT: u32 = 4096;
    pub const DFCS_ADJUSTRECT: u32 = 8192;
    pub const DFCS_FLAT: u32 = 16384;
    pub const DFCS_MONO: u32 = 32768;
    pub const DC_ACTIVE: u32 = 1;
    pub const DC_SMALLCAP: u32 = 2;
    pub const DC_ICON: u32 = 4;
    pub const DC_TEXT: u32 = 8;
    pub const DC_INBUTTON: u32 = 16;
    pub const DC_GRADIENT: u32 = 32;
    pub const DC_BUTTONS: u32 = 4096;
    pub const IDANI_OPEN: u32 = 1;
    pub const IDANI_CAPTION: u32 = 3;
    pub const CF_TEXT: u32 = 1;
    pub const CF_BITMAP: u32 = 2;
    pub const CF_METAFILEPICT: u32 = 3;
    pub const CF_SYLK: u32 = 4;
    pub const CF_DIF: u32 = 5;
    pub const CF_TIFF: u32 = 6;
    pub const CF_OEMTEXT: u32 = 7;
    pub const CF_DIB: u32 = 8;
    pub const CF_PALETTE: u32 = 9;
    pub const CF_PENDATA: u32 = 10;
    pub const CF_RIFF: u32 = 11;
    pub const CF_WAVE: u32 = 12;
    pub const CF_UNICODETEXT: u32 = 13;
    pub const CF_ENHMETAFILE: u32 = 14;
    pub const CF_HDROP: u32 = 15;
    pub const CF_LOCALE: u32 = 16;
    pub const CF_DIBV5: u32 = 17;
    pub const CF_MAX: u32 = 18;
    pub const CF_OWNERDISPLAY: u32 = 128;
    pub const CF_DSPTEXT: u32 = 129;
    pub const CF_DSPBITMAP: u32 = 130;
    pub const CF_DSPMETAFILEPICT: u32 = 131;
    pub const CF_DSPENHMETAFILE: u32 = 142;
    pub const CF_PRIVATEFIRST: u32 = 512;
    pub const CF_PRIVATELAST: u32 = 767;
    pub const CF_GDIOBJFIRST: u32 = 768;
    pub const CF_GDIOBJLAST: u32 = 1023;
    pub const FVIRTKEY: u32 = 1;
    pub const FNOINVERT: u32 = 2;
    pub const FSHIFT: u32 = 4;
    pub const FCONTROL: u32 = 8;
    pub const FALT: u32 = 16;
    pub const WPF_SETMINPOSITION: u32 = 1;
    pub const WPF_RESTORETOMAXIMIZED: u32 = 2;
    pub const WPF_ASYNCWINDOWPLACEMENT: u32 = 4;
    pub const ODT_MENU: u32 = 1;
    pub const ODT_LISTBOX: u32 = 2;
    pub const ODT_COMBOBOX: u32 = 3;
    pub const ODT_BUTTON: u32 = 4;
    pub const ODT_STATIC: u32 = 5;
    pub const ODA_DRAWENTIRE: u32 = 1;
    pub const ODA_SELECT: u32 = 2;
    pub const ODA_FOCUS: u32 = 4;
    pub const ODS_SELECTED: u32 = 1;
    pub const ODS_GRAYED: u32 = 2;
    pub const ODS_DISABLED: u32 = 4;
    pub const ODS_CHECKED: u32 = 8;
    pub const ODS_FOCUS: u32 = 16;
    pub const ODS_DEFAULT: u32 = 32;
    pub const ODS_COMBOBOXEDIT: u32 = 4096;
    pub const ODS_HOTLIGHT: u32 = 64;
    pub const ODS_INACTIVE: u32 = 128;
    pub const ODS_NOACCEL: u32 = 256;
    pub const ODS_NOFOCUSRECT: u32 = 512;
    pub const PM_NOREMOVE: u32 = 0;
    pub const PM_REMOVE: u32 = 1;
    pub const PM_NOYIELD: u32 = 2;
    pub const MOD_ALT: u32 = 1;
    pub const MOD_CONTROL: u32 = 2;
    pub const MOD_SHIFT: u32 = 4;
    pub const MOD_WIN: u32 = 8;
    pub const MOD_NOREPEAT: u32 = 16384;
    pub const IDHOT_SNAPWINDOW: i32 = -1;
    pub const IDHOT_SNAPDESKTOP: i32 = -2;
    pub const ENDSESSION_CLOSEAPP: u32 = 1;
    pub const ENDSESSION_CRITICAL: u32 = 1073741824;
    pub const ENDSESSION_LOGOFF: u32 = 2147483648;
    pub const EWX_LOGOFF: u32 = 0;
    pub const EWX_SHUTDOWN: u32 = 1;
    pub const EWX_REBOOT: u32 = 2;
    pub const EWX_FORCE: u32 = 4;
    pub const EWX_POWEROFF: u32 = 8;
    pub const EWX_FORCEIFHUNG: u32 = 16;
    pub const EWX_QUICKRESOLVE: u32 = 32;
    pub const EWX_RESTARTAPPS: u32 = 64;
    pub const EWX_HYBRID_SHUTDOWN: u32 = 4194304;
    pub const EWX_BOOTOPTIONS: u32 = 16777216;
    pub const EWX_ARSO: u32 = 67108864;
    pub const BSM_ALLCOMPONENTS: u32 = 0;
    pub const BSM_VXDS: u32 = 1;
    pub const BSM_NETDRIVER: u32 = 2;
    pub const BSM_INSTALLABLEDRIVERS: u32 = 4;
    pub const BSM_APPLICATIONS: u32 = 8;
    pub const BSM_ALLDESKTOPS: u32 = 16;
    pub const BSF_QUERY: u32 = 1;
    pub const BSF_IGNORECURRENTTASK: u32 = 2;
    pub const BSF_FLUSHDISK: u32 = 4;
    pub const BSF_NOHANG: u32 = 8;
    pub const BSF_POSTMESSAGE: u32 = 16;
    pub const BSF_FORCEIFHUNG: u32 = 32;
    pub const BSF_NOTIMEOUTIFNOTHUNG: u32 = 64;
    pub const BSF_ALLOWSFW: u32 = 128;
    pub const BSF_SENDNOTIFYMESSAGE: u32 = 256;
    pub const BSF_RETURNHDESK: u32 = 512;
    pub const BSF_LUID: u32 = 1024;
    pub const BROADCAST_QUERY_DENY: u32 = 1112363332;
    pub const DEVICE_NOTIFY_WINDOW_HANDLE: u32 = 0;
    pub const DEVICE_NOTIFY_SERVICE_HANDLE: u32 = 1;
    pub const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES: u32 = 4;
    pub const ISMEX_NOSEND: u32 = 0;
    pub const ISMEX_SEND: u32 = 1;
    pub const ISMEX_NOTIFY: u32 = 2;
    pub const ISMEX_CALLBACK: u32 = 4;
    pub const ISMEX_REPLIED: u32 = 8;
    pub const PW_CLIENTONLY: u32 = 1;
    pub const PW_RENDERFULLCONTENT: u32 = 2;
    pub const LWA_COLORKEY: u32 = 1;
    pub const LWA_ALPHA: u32 = 2;
    pub const ULW_COLORKEY: u32 = 1;
    pub const ULW_ALPHA: u32 = 2;
    pub const ULW_OPAQUE: u32 = 4;
    pub const ULW_EX_NORESIZE: u32 = 8;
    pub const FLASHW_STOP: u32 = 0;
    pub const FLASHW_CAPTION: u32 = 1;
    pub const FLASHW_TRAY: u32 = 2;
    pub const FLASHW_ALL: u32 = 3;
    pub const FLASHW_TIMER: u32 = 4;
    pub const FLASHW_TIMERNOFG: u32 = 12;
    pub const WDA_NONE: u32 = 0;
    pub const WDA_MONITOR: u32 = 1;
    pub const WDA_EXCLUDEFROMCAPTURE: u32 = 17;
    pub const SWP_NOSIZE: u32 = 1;
    pub const SWP_NOMOVE: u32 = 2;
    pub const SWP_NOZORDER: u32 = 4;
    pub const SWP_NOREDRAW: u32 = 8;
    pub const SWP_NOACTIVATE: u32 = 16;
    pub const SWP_FRAMECHANGED: u32 = 32;
    pub const SWP_SHOWWINDOW: u32 = 64;
    pub const SWP_HIDEWINDOW: u32 = 128;
    pub const SWP_NOCOPYBITS: u32 = 256;
    pub const SWP_NOOWNERZORDER: u32 = 512;
    pub const SWP_NOSENDCHANGING: u32 = 1024;
    pub const SWP_DRAWFRAME: u32 = 32;
    pub const SWP_NOREPOSITION: u32 = 512;
    pub const SWP_DEFERERASE: u32 = 8192;
    pub const SWP_ASYNCWINDOWPOS: u32 = 16384;
    pub const DLGWINDOWEXTRA: u32 = 30;
    pub const KEYEVENTF_EXTENDEDKEY: u32 = 1;
    pub const KEYEVENTF_KEYUP: u32 = 2;
    pub const KEYEVENTF_UNICODE: u32 = 4;
    pub const KEYEVENTF_SCANCODE: u32 = 8;
    pub const MOUSEEVENTF_MOVE: u32 = 1;
    pub const MOUSEEVENTF_LEFTDOWN: u32 = 2;
    pub const MOUSEEVENTF_LEFTUP: u32 = 4;
    pub const MOUSEEVENTF_RIGHTDOWN: u32 = 8;
    pub const MOUSEEVENTF_RIGHTUP: u32 = 16;
    pub const MOUSEEVENTF_MIDDLEDOWN: u32 = 32;
    pub const MOUSEEVENTF_MIDDLEUP: u32 = 64;
    pub const MOUSEEVENTF_XDOWN: u32 = 128;
    pub const MOUSEEVENTF_XUP: u32 = 256;
    pub const MOUSEEVENTF_WHEEL: u32 = 2048;
    pub const MOUSEEVENTF_HWHEEL: u32 = 4096;
    pub const MOUSEEVENTF_MOVE_NOCOALESCE: u32 = 8192;
    pub const MOUSEEVENTF_VIRTUALDESK: u32 = 16384;
    pub const MOUSEEVENTF_ABSOLUTE: u32 = 32768;
    pub const INPUT_MOUSE: u32 = 0;
    pub const INPUT_KEYBOARD: u32 = 1;
    pub const INPUT_HARDWARE: u32 = 2;
    pub const TOUCHEVENTF_MOVE: u32 = 1;
    pub const TOUCHEVENTF_DOWN: u32 = 2;
    pub const TOUCHEVENTF_UP: u32 = 4;
    pub const TOUCHEVENTF_INRANGE: u32 = 8;
    pub const TOUCHEVENTF_PRIMARY: u32 = 16;
    pub const TOUCHEVENTF_NOCOALESCE: u32 = 32;
    pub const TOUCHEVENTF_PEN: u32 = 64;
    pub const TOUCHEVENTF_PALM: u32 = 128;
    pub const TOUCHINPUTMASKF_TIMEFROMSYSTEM: u32 = 1;
    pub const TOUCHINPUTMASKF_EXTRAINFO: u32 = 2;
    pub const TOUCHINPUTMASKF_CONTACTAREA: u32 = 4;
    pub const TWF_FINETOUCH: u32 = 1;
    pub const TWF_WANTPALM: u32 = 2;
    pub const POINTER_FLAG_NONE: u32 = 0;
    pub const POINTER_FLAG_NEW: u32 = 1;
    pub const POINTER_FLAG_INRANGE: u32 = 2;
    pub const POINTER_FLAG_INCONTACT: u32 = 4;
    pub const POINTER_FLAG_FIRSTBUTTON: u32 = 16;
    pub const POINTER_FLAG_SECONDBUTTON: u32 = 32;
    pub const POINTER_FLAG_THIRDBUTTON: u32 = 64;
    pub const POINTER_FLAG_FOURTHBUTTON: u32 = 128;
    pub const POINTER_FLAG_FIFTHBUTTON: u32 = 256;
    pub const POINTER_FLAG_PRIMARY: u32 = 8192;
    pub const POINTER_FLAG_CONFIDENCE: u32 = 16384;
    pub const POINTER_FLAG_CANCELED: u32 = 32768;
    pub const POINTER_FLAG_DOWN: u32 = 65536;
    pub const POINTER_FLAG_UPDATE: u32 = 131072;
    pub const POINTER_FLAG_UP: u32 = 262144;
    pub const POINTER_FLAG_WHEEL: u32 = 524288;
    pub const POINTER_FLAG_HWHEEL: u32 = 1048576;
    pub const POINTER_FLAG_CAPTURECHANGED: u32 = 2097152;
    pub const POINTER_FLAG_HASTRANSFORM: u32 = 4194304;
    pub const POINTER_MOD_SHIFT: u32 = 4;
    pub const POINTER_MOD_CTRL: u32 = 8;
    pub const TOUCH_FLAG_NONE: u32 = 0;
    pub const TOUCH_MASK_NONE: u32 = 0;
    pub const TOUCH_MASK_CONTACTAREA: u32 = 1;
    pub const TOUCH_MASK_ORIENTATION: u32 = 2;
    pub const TOUCH_MASK_PRESSURE: u32 = 4;
    pub const PEN_FLAG_NONE: u32 = 0;
    pub const PEN_FLAG_BARREL: u32 = 1;
    pub const PEN_FLAG_INVERTED: u32 = 2;
    pub const PEN_FLAG_ERASER: u32 = 4;
    pub const PEN_MASK_NONE: u32 = 0;
    pub const PEN_MASK_PRESSURE: u32 = 1;
    pub const PEN_MASK_ROTATION: u32 = 2;
    pub const PEN_MASK_TILT_X: u32 = 4;
    pub const PEN_MASK_TILT_Y: u32 = 8;
    pub const POINTER_MESSAGE_FLAG_NEW: u32 = 1;
    pub const POINTER_MESSAGE_FLAG_INRANGE: u32 = 2;
    pub const POINTER_MESSAGE_FLAG_INCONTACT: u32 = 4;
    pub const POINTER_MESSAGE_FLAG_FIRSTBUTTON: u32 = 16;
    pub const POINTER_MESSAGE_FLAG_SECONDBUTTON: u32 = 32;
    pub const POINTER_MESSAGE_FLAG_THIRDBUTTON: u32 = 64;
    pub const POINTER_MESSAGE_FLAG_FOURTHBUTTON: u32 = 128;
    pub const POINTER_MESSAGE_FLAG_FIFTHBUTTON: u32 = 256;
    pub const POINTER_MESSAGE_FLAG_PRIMARY: u32 = 8192;
    pub const POINTER_MESSAGE_FLAG_CONFIDENCE: u32 = 16384;
    pub const POINTER_MESSAGE_FLAG_CANCELED: u32 = 32768;
    pub const PA_ACTIVATE: u32 = 1;
    pub const PA_NOACTIVATE: u32 = 3;
    pub const MAX_TOUCH_COUNT: u32 = 256;
    pub const TOUCH_FEEDBACK_DEFAULT: u32 = 1;
    pub const TOUCH_FEEDBACK_INDIRECT: u32 = 2;
    pub const TOUCH_FEEDBACK_NONE: u32 = 3;
    pub const TOUCH_HIT_TESTING_DEFAULT: u32 = 0;
    pub const TOUCH_HIT_TESTING_CLIENT: u32 = 1;
    pub const TOUCH_HIT_TESTING_NONE: u32 = 2;
    pub const TOUCH_HIT_TESTING_PROXIMITY_CLOSEST: u32 = 0;
    pub const TOUCH_HIT_TESTING_PROXIMITY_FARTHEST: u32 = 4095;
    pub const GWFS_INCLUDE_ANCESTORS: u32 = 1;
    pub const MAPVK_VK_TO_VSC: u32 = 0;
    pub const MAPVK_VSC_TO_VK: u32 = 1;
    pub const MAPVK_VK_TO_CHAR: u32 = 2;
    pub const MAPVK_VSC_TO_VK_EX: u32 = 3;
    pub const MAPVK_VK_TO_VSC_EX: u32 = 4;
    pub const MWMO_WAITALL: u32 = 1;
    pub const MWMO_ALERTABLE: u32 = 2;
    pub const MWMO_INPUTAVAILABLE: u32 = 4;
    pub const QS_KEY: u32 = 1;
    pub const QS_MOUSEMOVE: u32 = 2;
    pub const QS_MOUSEBUTTON: u32 = 4;
    pub const QS_POSTMESSAGE: u32 = 8;
    pub const QS_TIMER: u32 = 16;
    pub const QS_PAINT: u32 = 32;
    pub const QS_SENDMESSAGE: u32 = 64;
    pub const QS_HOTKEY: u32 = 128;
    pub const QS_ALLPOSTMESSAGE: u32 = 256;
    pub const QS_RAWINPUT: u32 = 1024;
    pub const QS_TOUCH: u32 = 2048;
    pub const QS_POINTER: u32 = 4096;
    pub const QS_MOUSE: u32 = 6;
    pub const QS_INPUT: u32 = 7175;
    pub const QS_ALLEVENTS: u32 = 7359;
    pub const QS_ALLINPUT: u32 = 7423;
    pub const USER_TIMER_MAXIMUM: u32 = 2147483647;
    pub const USER_TIMER_MINIMUM: u32 = 10;
    pub const TIMERV_DEFAULT_COALESCING: u32 = 0;
    pub const TIMERV_NO_COALESCING: u32 = 4294967295;
    pub const TIMERV_COALESCING_MIN: u32 = 1;
    pub const TIMERV_COALESCING_MAX: u32 = 2147483637;
    pub const SM_CXSCREEN: u32 = 0;
    pub const SM_CYSCREEN: u32 = 1;
    pub const SM_CXVSCROLL: u32 = 2;
    pub const SM_CYHSCROLL: u32 = 3;
    pub const SM_CYCAPTION: u32 = 4;
    pub const SM_CXBORDER: u32 = 5;
    pub const SM_CYBORDER: u32 = 6;
    pub const SM_CXDLGFRAME: u32 = 7;
    pub const SM_CYDLGFRAME: u32 = 8;
    pub const SM_CYVTHUMB: u32 = 9;
    pub const SM_CXHTHUMB: u32 = 10;
    pub const SM_CXICON: u32 = 11;
    pub const SM_CYICON: u32 = 12;
    pub const SM_CXCURSOR: u32 = 13;
    pub const SM_CYCURSOR: u32 = 14;
    pub const SM_CYMENU: u32 = 15;
    pub const SM_CXFULLSCREEN: u32 = 16;
    pub const SM_CYFULLSCREEN: u32 = 17;
    pub const SM_CYKANJIWINDOW: u32 = 18;
    pub const SM_MOUSEPRESENT: u32 = 19;
    pub const SM_CYVSCROLL: u32 = 20;
    pub const SM_CXHSCROLL: u32 = 21;
    pub const SM_DEBUG: u32 = 22;
    pub const SM_SWAPBUTTON: u32 = 23;
    pub const SM_RESERVED1: u32 = 24;
    pub const SM_RESERVED2: u32 = 25;
    pub const SM_RESERVED3: u32 = 26;
    pub const SM_RESERVED4: u32 = 27;
    pub const SM_CXMIN: u32 = 28;
    pub const SM_CYMIN: u32 = 29;
    pub const SM_CXSIZE: u32 = 30;
    pub const SM_CYSIZE: u32 = 31;
    pub const SM_CXFRAME: u32 = 32;
    pub const SM_CYFRAME: u32 = 33;
    pub const SM_CXMINTRACK: u32 = 34;
    pub const SM_CYMINTRACK: u32 = 35;
    pub const SM_CXDOUBLECLK: u32 = 36;
    pub const SM_CYDOUBLECLK: u32 = 37;
    pub const SM_CXICONSPACING: u32 = 38;
    pub const SM_CYICONSPACING: u32 = 39;
    pub const SM_MENUDROPALIGNMENT: u32 = 40;
    pub const SM_PENWINDOWS: u32 = 41;
    pub const SM_DBCSENABLED: u32 = 42;
    pub const SM_CMOUSEBUTTONS: u32 = 43;
    pub const SM_CXFIXEDFRAME: u32 = 7;
    pub const SM_CYFIXEDFRAME: u32 = 8;
    pub const SM_CXSIZEFRAME: u32 = 32;
    pub const SM_CYSIZEFRAME: u32 = 33;
    pub const SM_SECURE: u32 = 44;
    pub const SM_CXEDGE: u32 = 45;
    pub const SM_CYEDGE: u32 = 46;
    pub const SM_CXMINSPACING: u32 = 47;
    pub const SM_CYMINSPACING: u32 = 48;
    pub const SM_CXSMICON: u32 = 49;
    pub const SM_CYSMICON: u32 = 50;
    pub const SM_CYSMCAPTION: u32 = 51;
    pub const SM_CXSMSIZE: u32 = 52;
    pub const SM_CYSMSIZE: u32 = 53;
    pub const SM_CXMENUSIZE: u32 = 54;
    pub const SM_CYMENUSIZE: u32 = 55;
    pub const SM_ARRANGE: u32 = 56;
    pub const SM_CXMINIMIZED: u32 = 57;
    pub const SM_CYMINIMIZED: u32 = 58;
    pub const SM_CXMAXTRACK: u32 = 59;
    pub const SM_CYMAXTRACK: u32 = 60;
    pub const SM_CXMAXIMIZED: u32 = 61;
    pub const SM_CYMAXIMIZED: u32 = 62;
    pub const SM_NETWORK: u32 = 63;
    pub const SM_CLEANBOOT: u32 = 67;
    pub const SM_CXDRAG: u32 = 68;
    pub const SM_CYDRAG: u32 = 69;
    pub const SM_SHOWSOUNDS: u32 = 70;
    pub const SM_CXMENUCHECK: u32 = 71;
    pub const SM_CYMENUCHECK: u32 = 72;
    pub const SM_SLOWMACHINE: u32 = 73;
    pub const SM_MIDEASTENABLED: u32 = 74;
    pub const SM_MOUSEWHEELPRESENT: u32 = 75;
    pub const SM_XVIRTUALSCREEN: u32 = 76;
    pub const SM_YVIRTUALSCREEN: u32 = 77;
    pub const SM_CXVIRTUALSCREEN: u32 = 78;
    pub const SM_CYVIRTUALSCREEN: u32 = 79;
    pub const SM_CMONITORS: u32 = 80;
    pub const SM_SAMEDISPLAYFORMAT: u32 = 81;
    pub const SM_IMMENABLED: u32 = 82;
    pub const SM_CXFOCUSBORDER: u32 = 83;
    pub const SM_CYFOCUSBORDER: u32 = 84;
    pub const SM_TABLETPC: u32 = 86;
    pub const SM_MEDIACENTER: u32 = 87;
    pub const SM_STARTER: u32 = 88;
    pub const SM_SERVERR2: u32 = 89;
    pub const SM_MOUSEHORIZONTALWHEELPRESENT: u32 = 91;
    pub const SM_CXPADDEDBORDER: u32 = 92;
    pub const SM_DIGITIZER: u32 = 94;
    pub const SM_MAXIMUMTOUCHES: u32 = 95;
    pub const SM_CMETRICS: u32 = 97;
    pub const SM_REMOTESESSION: u32 = 4096;
    pub const SM_SHUTTINGDOWN: u32 = 8192;
    pub const SM_REMOTECONTROL: u32 = 8193;
    pub const SM_CARETBLINKINGENABLED: u32 = 8194;
    pub const SM_CONVERTIBLESLATEMODE: u32 = 8195;
    pub const SM_SYSTEMDOCKED: u32 = 8196;
    pub const PMB_ACTIVE: u32 = 1;
    pub const MNC_IGNORE: u32 = 0;
    pub const MNC_CLOSE: u32 = 1;
    pub const MNC_EXECUTE: u32 = 2;
    pub const MNC_SELECT: u32 = 3;
    pub const MNS_NOCHECK: u32 = 2147483648;
    pub const MNS_MODELESS: u32 = 1073741824;
    pub const MNS_DRAGDROP: u32 = 536870912;
    pub const MNS_AUTODISMISS: u32 = 268435456;
    pub const MNS_NOTIFYBYPOS: u32 = 134217728;
    pub const MNS_CHECKORBMP: u32 = 67108864;
    pub const MIM_MAXHEIGHT: u32 = 1;
    pub const MIM_BACKGROUND: u32 = 2;
    pub const MIM_HELPID: u32 = 4;
    pub const MIM_MENUDATA: u32 = 8;
    pub const MIM_STYLE: u32 = 16;
    pub const MIM_APPLYTOSUBMENUS: u32 = 2147483648;
    pub const MND_CONTINUE: u32 = 0;
    pub const MND_ENDMENU: u32 = 1;
    pub const MNGOF_TOPGAP: u32 = 1;
    pub const MNGOF_BOTTOMGAP: u32 = 2;
    pub const MNGO_NOINTERFACE: u32 = 0;
    pub const MNGO_NOERROR: u32 = 1;
    pub const MIIM_STATE: u32 = 1;
    pub const MIIM_ID: u32 = 2;
    pub const MIIM_SUBMENU: u32 = 4;
    pub const MIIM_CHECKMARKS: u32 = 8;
    pub const MIIM_TYPE: u32 = 16;
    pub const MIIM_DATA: u32 = 32;
    pub const MIIM_STRING: u32 = 64;
    pub const MIIM_BITMAP: u32 = 128;
    pub const MIIM_FTYPE: u32 = 256;
    pub const GMDI_USEDISABLED: u32 = 1;
    pub const GMDI_GOINTOPOPUPS: u32 = 2;
    pub const TPM_LEFTBUTTON: u32 = 0;
    pub const TPM_RIGHTBUTTON: u32 = 2;
    pub const TPM_LEFTALIGN: u32 = 0;
    pub const TPM_CENTERALIGN: u32 = 4;
    pub const TPM_RIGHTALIGN: u32 = 8;
    pub const TPM_TOPALIGN: u32 = 0;
    pub const TPM_VCENTERALIGN: u32 = 16;
    pub const TPM_BOTTOMALIGN: u32 = 32;
    pub const TPM_HORIZONTAL: u32 = 0;
    pub const TPM_VERTICAL: u32 = 64;
    pub const TPM_NONOTIFY: u32 = 128;
    pub const TPM_RETURNCMD: u32 = 256;
    pub const TPM_RECURSE: u32 = 1;
    pub const TPM_HORPOSANIMATION: u32 = 1024;
    pub const TPM_HORNEGANIMATION: u32 = 2048;
    pub const TPM_VERPOSANIMATION: u32 = 4096;
    pub const TPM_VERNEGANIMATION: u32 = 8192;
    pub const TPM_NOANIMATION: u32 = 16384;
    pub const TPM_LAYOUTRTL: u32 = 32768;
    pub const TPM_WORKAREA: u32 = 65536;
    pub const DOF_EXECUTABLE: u32 = 32769;
    pub const DOF_DOCUMENT: u32 = 32770;
    pub const DOF_DIRECTORY: u32 = 32771;
    pub const DOF_MULTIPLE: u32 = 32772;
    pub const DOF_PROGMAN: u32 = 1;
    pub const DOF_SHELLDATA: u32 = 2;
    pub const DO_DROPFILE: u32 = 1162627398;
    pub const DO_PRINTFILE: u32 = 1414419024;
    pub const DT_TOP: u32 = 0;
    pub const DT_LEFT: u32 = 0;
    pub const DT_CENTER: u32 = 1;
    pub const DT_RIGHT: u32 = 2;
    pub const DT_VCENTER: u32 = 4;
    pub const DT_BOTTOM: u32 = 8;
    pub const DT_WORDBREAK: u32 = 16;
    pub const DT_SINGLELINE: u32 = 32;
    pub const DT_EXPANDTABS: u32 = 64;
    pub const DT_TABSTOP: u32 = 128;
    pub const DT_NOCLIP: u32 = 256;
    pub const DT_EXTERNALLEADING: u32 = 512;
    pub const DT_CALCRECT: u32 = 1024;
    pub const DT_NOPREFIX: u32 = 2048;
    pub const DT_INTERNAL: u32 = 4096;
    pub const DT_EDITCONTROL: u32 = 8192;
    pub const DT_PATH_ELLIPSIS: u32 = 16384;
    pub const DT_END_ELLIPSIS: u32 = 32768;
    pub const DT_MODIFYSTRING: u32 = 65536;
    pub const DT_RTLREADING: u32 = 131072;
    pub const DT_WORD_ELLIPSIS: u32 = 262144;
    pub const DT_NOFULLWIDTHCHARBREAK: u32 = 524288;
    pub const DT_HIDEPREFIX: u32 = 1048576;
    pub const DT_PREFIXONLY: u32 = 2097152;
    pub const DST_COMPLEX: u32 = 0;
    pub const DST_TEXT: u32 = 1;
    pub const DST_PREFIXTEXT: u32 = 2;
    pub const DST_ICON: u32 = 3;
    pub const DST_BITMAP: u32 = 4;
    pub const DSS_NORMAL: u32 = 0;
    pub const DSS_UNION: u32 = 16;
    pub const DSS_DISABLED: u32 = 32;
    pub const DSS_MONO: u32 = 128;
    pub const DSS_HIDEPREFIX: u32 = 512;
    pub const DSS_PREFIXONLY: u32 = 1024;
    pub const DSS_RIGHT: u32 = 32768;
    pub const LSFW_LOCK: u32 = 1;
    pub const LSFW_UNLOCK: u32 = 2;
    pub const DCX_WINDOW: u32 = 1;
    pub const DCX_CACHE: u32 = 2;
    pub const DCX_NORESETATTRS: u32 = 4;
    pub const DCX_CLIPCHILDREN: u32 = 8;
    pub const DCX_CLIPSIBLINGS: u32 = 16;
    pub const DCX_PARENTCLIP: u32 = 32;
    pub const DCX_EXCLUDERGN: u32 = 64;
    pub const DCX_INTERSECTRGN: u32 = 128;
    pub const DCX_EXCLUDEUPDATE: u32 = 256;
    pub const DCX_INTERSECTUPDATE: u32 = 512;
    pub const DCX_LOCKWINDOWUPDATE: u32 = 1024;
    pub const DCX_VALIDATE: u32 = 2097152;
    pub const RDW_INVALIDATE: u32 = 1;
    pub const RDW_INTERNALPAINT: u32 = 2;
    pub const RDW_ERASE: u32 = 4;
    pub const RDW_VALIDATE: u32 = 8;
    pub const RDW_NOINTERNALPAINT: u32 = 16;
    pub const RDW_NOERASE: u32 = 32;
    pub const RDW_NOCHILDREN: u32 = 64;
    pub const RDW_ALLCHILDREN: u32 = 128;
    pub const RDW_UPDATENOW: u32 = 256;
    pub const RDW_ERASENOW: u32 = 512;
    pub const RDW_FRAME: u32 = 1024;
    pub const RDW_NOFRAME: u32 = 2048;
    pub const SW_SCROLLCHILDREN: u32 = 1;
    pub const SW_INVALIDATE: u32 = 2;
    pub const SW_ERASE: u32 = 4;
    pub const SW_SMOOTHSCROLL: u32 = 16;
    pub const ESB_ENABLE_BOTH: u32 = 0;
    pub const ESB_DISABLE_BOTH: u32 = 3;
    pub const ESB_DISABLE_LEFT: u32 = 1;
    pub const ESB_DISABLE_RIGHT: u32 = 2;
    pub const ESB_DISABLE_UP: u32 = 1;
    pub const ESB_DISABLE_DOWN: u32 = 2;
    pub const ESB_DISABLE_LTUP: u32 = 1;
    pub const ESB_DISABLE_RTDN: u32 = 2;
    pub const HELPINFO_WINDOW: u32 = 1;
    pub const HELPINFO_MENUITEM: u32 = 2;
    pub const MB_OK: u32 = 0;
    pub const MB_OKCANCEL: u32 = 1;
    pub const MB_ABORTRETRYIGNORE: u32 = 2;
    pub const MB_YESNOCANCEL: u32 = 3;
    pub const MB_YESNO: u32 = 4;
    pub const MB_RETRYCANCEL: u32 = 5;
    pub const MB_CANCELTRYCONTINUE: u32 = 6;
    pub const MB_ICONHAND: u32 = 16;
    pub const MB_ICONQUESTION: u32 = 32;
    pub const MB_ICONEXCLAMATION: u32 = 48;
    pub const MB_ICONASTERISK: u32 = 64;
    pub const MB_USERICON: u32 = 128;
    pub const MB_ICONWARNING: u32 = 48;
    pub const MB_ICONERROR: u32 = 16;
    pub const MB_ICONINFORMATION: u32 = 64;
    pub const MB_ICONSTOP: u32 = 16;
    pub const MB_DEFBUTTON1: u32 = 0;
    pub const MB_DEFBUTTON2: u32 = 256;
    pub const MB_DEFBUTTON3: u32 = 512;
    pub const MB_DEFBUTTON4: u32 = 768;
    pub const MB_APPLMODAL: u32 = 0;
    pub const MB_SYSTEMMODAL: u32 = 4096;
    pub const MB_TASKMODAL: u32 = 8192;
    pub const MB_HELP: u32 = 16384;
    pub const MB_NOFOCUS: u32 = 32768;
    pub const MB_SETFOREGROUND: u32 = 65536;
    pub const MB_DEFAULT_DESKTOP_ONLY: u32 = 131072;
    pub const MB_TOPMOST: u32 = 262144;
    pub const MB_RIGHT: u32 = 524288;
    pub const MB_RTLREADING: u32 = 1048576;
    pub const MB_SERVICE_NOTIFICATION: u32 = 2097152;
    pub const MB_SERVICE_NOTIFICATION_NT3X: u32 = 262144;
    pub const MB_TYPEMASK: u32 = 15;
    pub const MB_ICONMASK: u32 = 240;
    pub const MB_DEFMASK: u32 = 3840;
    pub const MB_MODEMASK: u32 = 12288;
    pub const MB_MISCMASK: u32 = 49152;
    pub const CWP_ALL: u32 = 0;
    pub const CWP_SKIPINVISIBLE: u32 = 1;
    pub const CWP_SKIPDISABLED: u32 = 2;
    pub const CWP_SKIPTRANSPARENT: u32 = 4;
    pub const CTLCOLOR_MSGBOX: u32 = 0;
    pub const CTLCOLOR_EDIT: u32 = 1;
    pub const CTLCOLOR_LISTBOX: u32 = 2;
    pub const CTLCOLOR_BTN: u32 = 3;
    pub const CTLCOLOR_DLG: u32 = 4;
    pub const CTLCOLOR_SCROLLBAR: u32 = 5;
    pub const CTLCOLOR_STATIC: u32 = 6;
    pub const CTLCOLOR_MAX: u32 = 7;
    pub const COLOR_SCROLLBAR: u32 = 0;
    pub const COLOR_BACKGROUND: u32 = 1;
    pub const COLOR_ACTIVECAPTION: u32 = 2;
    pub const COLOR_INACTIVECAPTION: u32 = 3;
    pub const COLOR_MENU: u32 = 4;
    pub const COLOR_WINDOW: u32 = 5;
    pub const COLOR_WINDOWFRAME: u32 = 6;
    pub const COLOR_MENUTEXT: u32 = 7;
    pub const COLOR_WINDOWTEXT: u32 = 8;
    pub const COLOR_CAPTIONTEXT: u32 = 9;
    pub const COLOR_ACTIVEBORDER: u32 = 10;
    pub const COLOR_INACTIVEBORDER: u32 = 11;
    pub const COLOR_APPWORKSPACE: u32 = 12;
    pub const COLOR_HIGHLIGHT: u32 = 13;
    pub const COLOR_HIGHLIGHTTEXT: u32 = 14;
    pub const COLOR_BTNFACE: u32 = 15;
    pub const COLOR_BTNSHADOW: u32 = 16;
    pub const COLOR_GRAYTEXT: u32 = 17;
    pub const COLOR_BTNTEXT: u32 = 18;
    pub const COLOR_INACTIVECAPTIONTEXT: u32 = 19;
    pub const COLOR_BTNHIGHLIGHT: u32 = 20;
    pub const COLOR_3DDKSHADOW: u32 = 21;
    pub const COLOR_3DLIGHT: u32 = 22;
    pub const COLOR_INFOTEXT: u32 = 23;
    pub const COLOR_INFOBK: u32 = 24;
    pub const COLOR_HOTLIGHT: u32 = 26;
    pub const COLOR_GRADIENTACTIVECAPTION: u32 = 27;
    pub const COLOR_GRADIENTINACTIVECAPTION: u32 = 28;
    pub const COLOR_MENUHILIGHT: u32 = 29;
    pub const COLOR_MENUBAR: u32 = 30;
    pub const COLOR_DESKTOP: u32 = 1;
    pub const COLOR_3DFACE: u32 = 15;
    pub const COLOR_3DSHADOW: u32 = 16;
    pub const COLOR_3DHIGHLIGHT: u32 = 20;
    pub const COLOR_3DHILIGHT: u32 = 20;
    pub const COLOR_BTNHILIGHT: u32 = 20;
    pub const GW_HWNDFIRST: u32 = 0;
    pub const GW_HWNDLAST: u32 = 1;
    pub const GW_HWNDNEXT: u32 = 2;
    pub const GW_HWNDPREV: u32 = 3;
    pub const GW_OWNER: u32 = 4;
    pub const GW_CHILD: u32 = 5;
    pub const GW_ENABLEDPOPUP: u32 = 6;
    pub const GW_MAX: u32 = 6;
    pub const MF_INSERT: u32 = 0;
    pub const MF_CHANGE: u32 = 128;
    pub const MF_APPEND: u32 = 256;
    pub const MF_DELETE: u32 = 512;
    pub const MF_REMOVE: u32 = 4096;
    pub const MF_BYCOMMAND: u32 = 0;
    pub const MF_BYPOSITION: u32 = 1024;
    pub const MF_SEPARATOR: u32 = 2048;
    pub const MF_ENABLED: u32 = 0;
    pub const MF_GRAYED: u32 = 1;
    pub const MF_DISABLED: u32 = 2;
    pub const MF_UNCHECKED: u32 = 0;
    pub const MF_CHECKED: u32 = 8;
    pub const MF_USECHECKBITMAPS: u32 = 512;
    pub const MF_STRING: u32 = 0;
    pub const MF_BITMAP: u32 = 4;
    pub const MF_OWNERDRAW: u32 = 256;
    pub const MF_POPUP: u32 = 16;
    pub const MF_MENUBARBREAK: u32 = 32;
    pub const MF_MENUBREAK: u32 = 64;
    pub const MF_UNHILITE: u32 = 0;
    pub const MF_HILITE: u32 = 128;
    pub const MF_DEFAULT: u32 = 4096;
    pub const MF_SYSMENU: u32 = 8192;
    pub const MF_HELP: u32 = 16384;
    pub const MF_RIGHTJUSTIFY: u32 = 16384;
    pub const MF_MOUSESELECT: u32 = 32768;
    pub const MF_END: u32 = 128;
    pub const MFT_STRING: u32 = 0;
    pub const MFT_BITMAP: u32 = 4;
    pub const MFT_MENUBARBREAK: u32 = 32;
    pub const MFT_MENUBREAK: u32 = 64;
    pub const MFT_OWNERDRAW: u32 = 256;
    pub const MFT_RADIOCHECK: u32 = 512;
    pub const MFT_SEPARATOR: u32 = 2048;
    pub const MFT_RIGHTORDER: u32 = 8192;
    pub const MFT_RIGHTJUSTIFY: u32 = 16384;
    pub const MFS_GRAYED: u32 = 3;
    pub const MFS_DISABLED: u32 = 3;
    pub const MFS_CHECKED: u32 = 8;
    pub const MFS_HILITE: u32 = 128;
    pub const MFS_ENABLED: u32 = 0;
    pub const MFS_UNCHECKED: u32 = 0;
    pub const MFS_UNHILITE: u32 = 0;
    pub const MFS_DEFAULT: u32 = 4096;
    pub const SC_SIZE: u32 = 61440;
    pub const SC_MOVE: u32 = 61456;
    pub const SC_MINIMIZE: u32 = 61472;
    pub const SC_MAXIMIZE: u32 = 61488;
    pub const SC_NEXTWINDOW: u32 = 61504;
    pub const SC_PREVWINDOW: u32 = 61520;
    pub const SC_CLOSE: u32 = 61536;
    pub const SC_VSCROLL: u32 = 61552;
    pub const SC_HSCROLL: u32 = 61568;
    pub const SC_MOUSEMENU: u32 = 61584;
    pub const SC_KEYMENU: u32 = 61696;
    pub const SC_ARRANGE: u32 = 61712;
    pub const SC_RESTORE: u32 = 61728;
    pub const SC_TASKLIST: u32 = 61744;
    pub const SC_SCREENSAVE: u32 = 61760;
    pub const SC_HOTKEY: u32 = 61776;
    pub const SC_DEFAULT: u32 = 61792;
    pub const SC_MONITORPOWER: u32 = 61808;
    pub const SC_CONTEXTHELP: u32 = 61824;
    pub const SC_SEPARATOR: u32 = 61455;
    pub const SCF_ISSECURE: u32 = 1;
    pub const SC_ICON: u32 = 61472;
    pub const SC_ZOOM: u32 = 61488;
    pub const IMAGE_BITMAP: u32 = 0;
    pub const IMAGE_ICON: u32 = 1;
    pub const IMAGE_CURSOR: u32 = 2;
    pub const IMAGE_ENHMETAFILE: u32 = 3;
    pub const LR_DEFAULTCOLOR: u32 = 0;
    pub const LR_MONOCHROME: u32 = 1;
    pub const LR_COLOR: u32 = 2;
    pub const LR_COPYRETURNORG: u32 = 4;
    pub const LR_COPYDELETEORG: u32 = 8;
    pub const LR_LOADFROMFILE: u32 = 16;
    pub const LR_LOADTRANSPARENT: u32 = 32;
    pub const LR_DEFAULTSIZE: u32 = 64;
    pub const LR_VGACOLOR: u32 = 128;
    pub const LR_LOADMAP3DCOLORS: u32 = 4096;
    pub const LR_CREATEDIBSECTION: u32 = 8192;
    pub const LR_COPYFROMRESOURCE: u32 = 16384;
    pub const LR_SHARED: u32 = 32768;
    pub const DI_MASK: u32 = 1;
    pub const DI_IMAGE: u32 = 2;
    pub const DI_NORMAL: u32 = 3;
    pub const DI_COMPAT: u32 = 4;
    pub const DI_DEFAULTSIZE: u32 = 8;
    pub const DI_NOMIRROR: u32 = 16;
    pub const RES_ICON: u32 = 1;
    pub const RES_CURSOR: u32 = 2;
    pub const ORD_LANGDRIVER: u32 = 1;
    pub const IDOK: u32 = 1;
    pub const IDCANCEL: u32 = 2;
    pub const IDABORT: u32 = 3;
    pub const IDRETRY: u32 = 4;
    pub const IDIGNORE: u32 = 5;
    pub const IDYES: u32 = 6;
    pub const IDNO: u32 = 7;
    pub const IDCLOSE: u32 = 8;
    pub const IDHELP: u32 = 9;
    pub const IDTRYAGAIN: u32 = 10;
    pub const IDCONTINUE: u32 = 11;
    pub const IDTIMEOUT: u32 = 32000;
    pub const ES_LEFT: u32 = 0;
    pub const ES_CENTER: u32 = 1;
    pub const ES_RIGHT: u32 = 2;
    pub const ES_MULTILINE: u32 = 4;
    pub const ES_UPPERCASE: u32 = 8;
    pub const ES_LOWERCASE: u32 = 16;
    pub const ES_PASSWORD: u32 = 32;
    pub const ES_AUTOVSCROLL: u32 = 64;
    pub const ES_AUTOHSCROLL: u32 = 128;
    pub const ES_NOHIDESEL: u32 = 256;
    pub const ES_OEMCONVERT: u32 = 1024;
    pub const ES_READONLY: u32 = 2048;
    pub const ES_WANTRETURN: u32 = 4096;
    pub const ES_NUMBER: u32 = 8192;
    pub const EN_SETFOCUS: u32 = 256;
    pub const EN_KILLFOCUS: u32 = 512;
    pub const EN_CHANGE: u32 = 768;
    pub const EN_UPDATE: u32 = 1024;
    pub const EN_ERRSPACE: u32 = 1280;
    pub const EN_MAXTEXT: u32 = 1281;
    pub const EN_HSCROLL: u32 = 1537;
    pub const EN_VSCROLL: u32 = 1538;
    pub const EN_ALIGN_LTR_EC: u32 = 1792;
    pub const EN_ALIGN_RTL_EC: u32 = 1793;
    pub const EN_BEFORE_PASTE: u32 = 2048;
    pub const EN_AFTER_PASTE: u32 = 2049;
    pub const EC_LEFTMARGIN: u32 = 1;
    pub const EC_RIGHTMARGIN: u32 = 2;
    pub const EC_USEFONTINFO: u32 = 65535;
    pub const EMSIS_COMPOSITIONSTRING: u32 = 1;
    pub const EIMES_GETCOMPSTRATONCE: u32 = 1;
    pub const EIMES_CANCELCOMPSTRINFOCUS: u32 = 2;
    pub const EIMES_COMPLETECOMPSTRKILLFOCUS: u32 = 4;
    pub const EM_GETSEL: u32 = 176;
    pub const EM_SETSEL: u32 = 177;
    pub const EM_GETRECT: u32 = 178;
    pub const EM_SETRECT: u32 = 179;
    pub const EM_SETRECTNP: u32 = 180;
    pub const EM_SCROLL: u32 = 181;
    pub const EM_LINESCROLL: u32 = 182;
    pub const EM_SCROLLCARET: u32 = 183;
    pub const EM_GETMODIFY: u32 = 184;
    pub const EM_SETMODIFY: u32 = 185;
    pub const EM_GETLINECOUNT: u32 = 186;
    pub const EM_LINEINDEX: u32 = 187;
    pub const EM_SETHANDLE: u32 = 188;
    pub const EM_GETHANDLE: u32 = 189;
    pub const EM_GETTHUMB: u32 = 190;
    pub const EM_LINELENGTH: u32 = 193;
    pub const EM_REPLACESEL: u32 = 194;
    pub const EM_GETLINE: u32 = 196;
    pub const EM_LIMITTEXT: u32 = 197;
    pub const EM_CANUNDO: u32 = 198;
    pub const EM_UNDO: u32 = 199;
    pub const EM_FMTLINES: u32 = 200;
    pub const EM_LINEFROMCHAR: u32 = 201;
    pub const EM_SETTABSTOPS: u32 = 203;
    pub const EM_SETPASSWORDCHAR: u32 = 204;
    pub const EM_EMPTYUNDOBUFFER: u32 = 205;
    pub const EM_GETFIRSTVISIBLELINE: u32 = 206;
    pub const EM_SETREADONLY: u32 = 207;
    pub const EM_SETWORDBREAKPROC: u32 = 208;
    pub const EM_GETWORDBREAKPROC: u32 = 209;
    pub const EM_GETPASSWORDCHAR: u32 = 210;
    pub const EM_SETMARGINS: u32 = 211;
    pub const EM_GETMARGINS: u32 = 212;
    pub const EM_SETLIMITTEXT: u32 = 197;
    pub const EM_GETLIMITTEXT: u32 = 213;
    pub const EM_POSFROMCHAR: u32 = 214;
    pub const EM_CHARFROMPOS: u32 = 215;
    pub const EM_SETIMESTATUS: u32 = 216;
    pub const EM_GETIMESTATUS: u32 = 217;
    pub const EM_ENABLEFEATURE: u32 = 218;
    pub const WB_LEFT: u32 = 0;
    pub const WB_RIGHT: u32 = 1;
    pub const WB_ISDELIMITER: u32 = 2;
    pub const BS_PUSHBUTTON: u32 = 0;
    pub const BS_DEFPUSHBUTTON: u32 = 1;
    pub const BS_CHECKBOX: u32 = 2;
    pub const BS_AUTOCHECKBOX: u32 = 3;
    pub const BS_RADIOBUTTON: u32 = 4;
    pub const BS_3STATE: u32 = 5;
    pub const BS_AUTO3STATE: u32 = 6;
    pub const BS_GROUPBOX: u32 = 7;
    pub const BS_USERBUTTON: u32 = 8;
    pub const BS_AUTORADIOBUTTON: u32 = 9;
    pub const BS_PUSHBOX: u32 = 10;
    pub const BS_OWNERDRAW: u32 = 11;
    pub const BS_TYPEMASK: u32 = 15;
    pub const BS_LEFTTEXT: u32 = 32;
    pub const BS_TEXT: u32 = 0;
    pub const BS_ICON: u32 = 64;
    pub const BS_BITMAP: u32 = 128;
    pub const BS_LEFT: u32 = 256;
    pub const BS_RIGHT: u32 = 512;
    pub const BS_CENTER: u32 = 768;
    pub const BS_TOP: u32 = 1024;
    pub const BS_BOTTOM: u32 = 2048;
    pub const BS_VCENTER: u32 = 3072;
    pub const BS_PUSHLIKE: u32 = 4096;
    pub const BS_MULTILINE: u32 = 8192;
    pub const BS_NOTIFY: u32 = 16384;
    pub const BS_FLAT: u32 = 32768;
    pub const BS_RIGHTBUTTON: u32 = 32;
    pub const BN_CLICKED: u32 = 0;
    pub const BN_PAINT: u32 = 1;
    pub const BN_HILITE: u32 = 2;
    pub const BN_UNHILITE: u32 = 3;
    pub const BN_DISABLE: u32 = 4;
    pub const BN_DOUBLECLICKED: u32 = 5;
    pub const BN_PUSHED: u32 = 2;
    pub const BN_UNPUSHED: u32 = 3;
    pub const BN_DBLCLK: u32 = 5;
    pub const BN_SETFOCUS: u32 = 6;
    pub const BN_KILLFOCUS: u32 = 7;
    pub const BM_GETCHECK: u32 = 240;
    pub const BM_SETCHECK: u32 = 241;
    pub const BM_GETSTATE: u32 = 242;
    pub const BM_SETSTATE: u32 = 243;
    pub const BM_SETSTYLE: u32 = 244;
    pub const BM_CLICK: u32 = 245;
    pub const BM_GETIMAGE: u32 = 246;
    pub const BM_SETIMAGE: u32 = 247;
    pub const BM_SETDONTCLICK: u32 = 248;
    pub const BST_UNCHECKED: u32 = 0;
    pub const BST_CHECKED: u32 = 1;
    pub const BST_INDETERMINATE: u32 = 2;
    pub const BST_PUSHED: u32 = 4;
    pub const BST_FOCUS: u32 = 8;
    pub const SS_LEFT: u32 = 0;
    pub const SS_CENTER: u32 = 1;
    pub const SS_RIGHT: u32 = 2;
    pub const SS_ICON: u32 = 3;
    pub const SS_BLACKRECT: u32 = 4;
    pub const SS_GRAYRECT: u32 = 5;
    pub const SS_WHITERECT: u32 = 6;
    pub const SS_BLACKFRAME: u32 = 7;
    pub const SS_GRAYFRAME: u32 = 8;
    pub const SS_WHITEFRAME: u32 = 9;
    pub const SS_USERITEM: u32 = 10;
    pub const SS_SIMPLE: u32 = 11;
    pub const SS_LEFTNOWORDWRAP: u32 = 12;
    pub const SS_OWNERDRAW: u32 = 13;
    pub const SS_BITMAP: u32 = 14;
    pub const SS_ENHMETAFILE: u32 = 15;
    pub const SS_ETCHEDHORZ: u32 = 16;
    pub const SS_ETCHEDVERT: u32 = 17;
    pub const SS_ETCHEDFRAME: u32 = 18;
    pub const SS_TYPEMASK: u32 = 31;
    pub const SS_REALSIZECONTROL: u32 = 64;
    pub const SS_NOPREFIX: u32 = 128;
    pub const SS_NOTIFY: u32 = 256;
    pub const SS_CENTERIMAGE: u32 = 512;
    pub const SS_RIGHTJUST: u32 = 1024;
    pub const SS_REALSIZEIMAGE: u32 = 2048;
    pub const SS_SUNKEN: u32 = 4096;
    pub const SS_EDITCONTROL: u32 = 8192;
    pub const SS_ENDELLIPSIS: u32 = 16384;
    pub const SS_PATHELLIPSIS: u32 = 32768;
    pub const SS_WORDELLIPSIS: u32 = 49152;
    pub const SS_ELLIPSISMASK: u32 = 49152;
    pub const STM_SETICON: u32 = 368;
    pub const STM_GETICON: u32 = 369;
    pub const STM_SETIMAGE: u32 = 370;
    pub const STM_GETIMAGE: u32 = 371;
    pub const STN_CLICKED: u32 = 0;
    pub const STN_DBLCLK: u32 = 1;
    pub const STN_ENABLE: u32 = 2;
    pub const STN_DISABLE: u32 = 3;
    pub const STM_MSGMAX: u32 = 372;
    pub const DWL_MSGRESULT: u32 = 0;
    pub const DWL_DLGPROC: u32 = 4;
    pub const DWL_USER: u32 = 8;
    pub const DWLP_MSGRESULT: u32 = 0;
    pub const DDL_READWRITE: u32 = 0;
    pub const DDL_READONLY: u32 = 1;
    pub const DDL_HIDDEN: u32 = 2;
    pub const DDL_SYSTEM: u32 = 4;
    pub const DDL_DIRECTORY: u32 = 16;
    pub const DDL_ARCHIVE: u32 = 32;
    pub const DDL_POSTMSGS: u32 = 8192;
    pub const DDL_DRIVES: u32 = 16384;
    pub const DDL_EXCLUSIVE: u32 = 32768;
    pub const DS_ABSALIGN: u32 = 1;
    pub const DS_SYSMODAL: u32 = 2;
    pub const DS_LOCALEDIT: u32 = 32;
    pub const DS_SETFONT: u32 = 64;
    pub const DS_MODALFRAME: u32 = 128;
    pub const DS_NOIDLEMSG: u32 = 256;
    pub const DS_SETFOREGROUND: u32 = 512;
    pub const DS_3DLOOK: u32 = 4;
    pub const DS_FIXEDSYS: u32 = 8;
    pub const DS_NOFAILCREATE: u32 = 16;
    pub const DS_CONTROL: u32 = 1024;
    pub const DS_CENTER: u32 = 2048;
    pub const DS_CENTERMOUSE: u32 = 4096;
    pub const DS_CONTEXTHELP: u32 = 8192;
    pub const DS_SHELLFONT: u32 = 72;
    pub const DM_GETDEFID: u32 = 1024;
    pub const DM_SETDEFID: u32 = 1025;
    pub const DM_REPOSITION: u32 = 1026;
    pub const DC_HASDEFID: u32 = 21323;
    pub const DLGC_WANTARROWS: u32 = 1;
    pub const DLGC_WANTTAB: u32 = 2;
    pub const DLGC_WANTALLKEYS: u32 = 4;
    pub const DLGC_WANTMESSAGE: u32 = 4;
    pub const DLGC_HASSETSEL: u32 = 8;
    pub const DLGC_DEFPUSHBUTTON: u32 = 16;
    pub const DLGC_UNDEFPUSHBUTTON: u32 = 32;
    pub const DLGC_RADIOBUTTON: u32 = 64;
    pub const DLGC_WANTCHARS: u32 = 128;
    pub const DLGC_STATIC: u32 = 256;
    pub const DLGC_BUTTON: u32 = 8192;
    pub const LB_CTLCODE: u32 = 0;
    pub const LB_OKAY: u32 = 0;
    pub const LB_ERR: i32 = -1;
    pub const LB_ERRSPACE: i32 = -2;
    pub const LBN_ERRSPACE: i32 = -2;
    pub const LBN_SELCHANGE: u32 = 1;
    pub const LBN_DBLCLK: u32 = 2;
    pub const LBN_SELCANCEL: u32 = 3;
    pub const LBN_SETFOCUS: u32 = 4;
    pub const LBN_KILLFOCUS: u32 = 5;
    pub const LB_ADDSTRING: u32 = 384;
    pub const LB_INSERTSTRING: u32 = 385;
    pub const LB_DELETESTRING: u32 = 386;
    pub const LB_SELITEMRANGEEX: u32 = 387;
    pub const LB_RESETCONTENT: u32 = 388;
    pub const LB_SETSEL: u32 = 389;
    pub const LB_SETCURSEL: u32 = 390;
    pub const LB_GETSEL: u32 = 391;
    pub const LB_GETCURSEL: u32 = 392;
    pub const LB_GETTEXT: u32 = 393;
    pub const LB_GETTEXTLEN: u32 = 394;
    pub const LB_GETCOUNT: u32 = 395;
    pub const LB_SELECTSTRING: u32 = 396;
    pub const LB_DIR: u32 = 397;
    pub const LB_GETTOPINDEX: u32 = 398;
    pub const LB_FINDSTRING: u32 = 399;
    pub const LB_GETSELCOUNT: u32 = 400;
    pub const LB_GETSELITEMS: u32 = 401;
    pub const LB_SETTABSTOPS: u32 = 402;
    pub const LB_GETHORIZONTALEXTENT: u32 = 403;
    pub const LB_SETHORIZONTALEXTENT: u32 = 404;
    pub const LB_SETCOLUMNWIDTH: u32 = 405;
    pub const LB_ADDFILE: u32 = 406;
    pub const LB_SETTOPINDEX: u32 = 407;
    pub const LB_GETITEMRECT: u32 = 408;
    pub const LB_GETITEMDATA: u32 = 409;
    pub const LB_SETITEMDATA: u32 = 410;
    pub const LB_SELITEMRANGE: u32 = 411;
    pub const LB_SETANCHORINDEX: u32 = 412;
    pub const LB_GETANCHORINDEX: u32 = 413;
    pub const LB_SETCARETINDEX: u32 = 414;
    pub const LB_GETCARETINDEX: u32 = 415;
    pub const LB_SETITEMHEIGHT: u32 = 416;
    pub const LB_GETITEMHEIGHT: u32 = 417;
    pub const LB_FINDSTRINGEXACT: u32 = 418;
    pub const LB_SETLOCALE: u32 = 421;
    pub const LB_GETLOCALE: u32 = 422;
    pub const LB_SETCOUNT: u32 = 423;
    pub const LB_INITSTORAGE: u32 = 424;
    pub const LB_ITEMFROMPOINT: u32 = 425;
    pub const LB_GETLISTBOXINFO: u32 = 434;
    pub const LB_MSGMAX: u32 = 435;
    pub const LBS_NOTIFY: u32 = 1;
    pub const LBS_SORT: u32 = 2;
    pub const LBS_NOREDRAW: u32 = 4;
    pub const LBS_MULTIPLESEL: u32 = 8;
    pub const LBS_OWNERDRAWFIXED: u32 = 16;
    pub const LBS_OWNERDRAWVARIABLE: u32 = 32;
    pub const LBS_HASSTRINGS: u32 = 64;
    pub const LBS_USETABSTOPS: u32 = 128;
    pub const LBS_NOINTEGRALHEIGHT: u32 = 256;
    pub const LBS_MULTICOLUMN: u32 = 512;
    pub const LBS_WANTKEYBOARDINPUT: u32 = 1024;
    pub const LBS_EXTENDEDSEL: u32 = 2048;
    pub const LBS_DISABLENOSCROLL: u32 = 4096;
    pub const LBS_NODATA: u32 = 8192;
    pub const LBS_NOSEL: u32 = 16384;
    pub const LBS_COMBOBOX: u32 = 32768;
    pub const LBS_STANDARD: u32 = 10485763;
    pub const CB_OKAY: u32 = 0;
    pub const CB_ERR: i32 = -1;
    pub const CB_ERRSPACE: i32 = -2;
    pub const CBN_ERRSPACE: i32 = -1;
    pub const CBN_SELCHANGE: u32 = 1;
    pub const CBN_DBLCLK: u32 = 2;
    pub const CBN_SETFOCUS: u32 = 3;
    pub const CBN_KILLFOCUS: u32 = 4;
    pub const CBN_EDITCHANGE: u32 = 5;
    pub const CBN_EDITUPDATE: u32 = 6;
    pub const CBN_DROPDOWN: u32 = 7;
    pub const CBN_CLOSEUP: u32 = 8;
    pub const CBN_SELENDOK: u32 = 9;
    pub const CBN_SELENDCANCEL: u32 = 10;
    pub const CBS_SIMPLE: u32 = 1;
    pub const CBS_DROPDOWN: u32 = 2;
    pub const CBS_DROPDOWNLIST: u32 = 3;
    pub const CBS_OWNERDRAWFIXED: u32 = 16;
    pub const CBS_OWNERDRAWVARIABLE: u32 = 32;
    pub const CBS_AUTOHSCROLL: u32 = 64;
    pub const CBS_OEMCONVERT: u32 = 128;
    pub const CBS_SORT: u32 = 256;
    pub const CBS_HASSTRINGS: u32 = 512;
    pub const CBS_NOINTEGRALHEIGHT: u32 = 1024;
    pub const CBS_DISABLENOSCROLL: u32 = 2048;
    pub const CBS_UPPERCASE: u32 = 8192;
    pub const CBS_LOWERCASE: u32 = 16384;
    pub const CB_GETEDITSEL: u32 = 320;
    pub const CB_LIMITTEXT: u32 = 321;
    pub const CB_SETEDITSEL: u32 = 322;
    pub const CB_ADDSTRING: u32 = 323;
    pub const CB_DELETESTRING: u32 = 324;
    pub const CB_DIR: u32 = 325;
    pub const CB_GETCOUNT: u32 = 326;
    pub const CB_GETCURSEL: u32 = 327;
    pub const CB_GETLBTEXT: u32 = 328;
    pub const CB_GETLBTEXTLEN: u32 = 329;
    pub const CB_INSERTSTRING: u32 = 330;
    pub const CB_RESETCONTENT: u32 = 331;
    pub const CB_FINDSTRING: u32 = 332;
    pub const CB_SELECTSTRING: u32 = 333;
    pub const CB_SETCURSEL: u32 = 334;
    pub const CB_SHOWDROPDOWN: u32 = 335;
    pub const CB_GETITEMDATA: u32 = 336;
    pub const CB_SETITEMDATA: u32 = 337;
    pub const CB_GETDROPPEDCONTROLRECT: u32 = 338;
    pub const CB_SETITEMHEIGHT: u32 = 339;
    pub const CB_GETITEMHEIGHT: u32 = 340;
    pub const CB_SETEXTENDEDUI: u32 = 341;
    pub const CB_GETEXTENDEDUI: u32 = 342;
    pub const CB_GETDROPPEDSTATE: u32 = 343;
    pub const CB_FINDSTRINGEXACT: u32 = 344;
    pub const CB_SETLOCALE: u32 = 345;
    pub const CB_GETLOCALE: u32 = 346;
    pub const CB_GETTOPINDEX: u32 = 347;
    pub const CB_SETTOPINDEX: u32 = 348;
    pub const CB_GETHORIZONTALEXTENT: u32 = 349;
    pub const CB_SETHORIZONTALEXTENT: u32 = 350;
    pub const CB_GETDROPPEDWIDTH: u32 = 351;
    pub const CB_SETDROPPEDWIDTH: u32 = 352;
    pub const CB_INITSTORAGE: u32 = 353;
    pub const CB_GETCOMBOBOXINFO: u32 = 356;
    pub const CB_MSGMAX: u32 = 357;
    pub const SBS_HORZ: u32 = 0;
    pub const SBS_VERT: u32 = 1;
    pub const SBS_TOPALIGN: u32 = 2;
    pub const SBS_LEFTALIGN: u32 = 2;
    pub const SBS_BOTTOMALIGN: u32 = 4;
    pub const SBS_RIGHTALIGN: u32 = 4;
    pub const SBS_SIZEBOXTOPLEFTALIGN: u32 = 2;
    pub const SBS_SIZEBOXBOTTOMRIGHTALIGN: u32 = 4;
    pub const SBS_SIZEBOX: u32 = 8;
    pub const SBS_SIZEGRIP: u32 = 16;
    pub const SBM_SETPOS: u32 = 224;
    pub const SBM_GETPOS: u32 = 225;
    pub const SBM_SETRANGE: u32 = 226;
    pub const SBM_SETRANGEREDRAW: u32 = 230;
    pub const SBM_GETRANGE: u32 = 227;
    pub const SBM_ENABLE_ARROWS: u32 = 228;
    pub const SBM_SETSCROLLINFO: u32 = 233;
    pub const SBM_GETSCROLLINFO: u32 = 234;
    pub const SBM_GETSCROLLBARINFO: u32 = 235;
    pub const SIF_RANGE: u32 = 1;
    pub const SIF_PAGE: u32 = 2;
    pub const SIF_POS: u32 = 4;
    pub const SIF_DISABLENOSCROLL: u32 = 8;
    pub const SIF_TRACKPOS: u32 = 16;
    pub const SIF_ALL: u32 = 23;
    pub const MDIS_ALLCHILDSTYLES: u32 = 1;
    pub const MDITILE_VERTICAL: u32 = 0;
    pub const MDITILE_HORIZONTAL: u32 = 1;
    pub const MDITILE_SKIPDISABLED: u32 = 2;
    pub const MDITILE_ZORDER: u32 = 4;
    pub const HELP_CONTEXT: u32 = 1;
    pub const HELP_QUIT: u32 = 2;
    pub const HELP_INDEX: u32 = 3;
    pub const HELP_CONTENTS: u32 = 3;
    pub const HELP_HELPONHELP: u32 = 4;
    pub const HELP_SETINDEX: u32 = 5;
    pub const HELP_SETCONTENTS: u32 = 5;
    pub const HELP_CONTEXTPOPUP: u32 = 8;
    pub const HELP_FORCEFILE: u32 = 9;
    pub const HELP_KEY: u32 = 257;
    pub const HELP_COMMAND: u32 = 258;
    pub const HELP_PARTIALKEY: u32 = 261;
    pub const HELP_MULTIKEY: u32 = 513;
    pub const HELP_SETWINPOS: u32 = 515;
    pub const HELP_CONTEXTMENU: u32 = 10;
    pub const HELP_FINDER: u32 = 11;
    pub const HELP_WM_HELP: u32 = 12;
    pub const HELP_SETPOPUP_POS: u32 = 13;
    pub const HELP_TCARD: u32 = 32768;
    pub const HELP_TCARD_DATA: u32 = 16;
    pub const HELP_TCARD_OTHER_CALLER: u32 = 17;
    pub const IDH_NO_HELP: u32 = 28440;
    pub const IDH_MISSING_CONTEXT: u32 = 28441;
    pub const IDH_GENERIC_HELP_BUTTON: u32 = 28442;
    pub const IDH_OK: u32 = 28443;
    pub const IDH_CANCEL: u32 = 28444;
    pub const IDH_HELP: u32 = 28445;
    pub const GR_GDIOBJECTS: u32 = 0;
    pub const GR_USEROBJECTS: u32 = 1;
    pub const GR_GDIOBJECTS_PEAK: u32 = 2;
    pub const GR_USEROBJECTS_PEAK: u32 = 4;
    pub const SPI_GETBEEP: u32 = 1;
    pub const SPI_SETBEEP: u32 = 2;
    pub const SPI_GETMOUSE: u32 = 3;
    pub const SPI_SETMOUSE: u32 = 4;
    pub const SPI_GETBORDER: u32 = 5;
    pub const SPI_SETBORDER: u32 = 6;
    pub const SPI_GETKEYBOARDSPEED: u32 = 10;
    pub const SPI_SETKEYBOARDSPEED: u32 = 11;
    pub const SPI_LANGDRIVER: u32 = 12;
    pub const SPI_ICONHORIZONTALSPACING: u32 = 13;
    pub const SPI_GETSCREENSAVETIMEOUT: u32 = 14;
    pub const SPI_SETSCREENSAVETIMEOUT: u32 = 15;
    pub const SPI_GETSCREENSAVEACTIVE: u32 = 16;
    pub const SPI_SETSCREENSAVEACTIVE: u32 = 17;
    pub const SPI_GETGRIDGRANULARITY: u32 = 18;
    pub const SPI_SETGRIDGRANULARITY: u32 = 19;
    pub const SPI_SETDESKWALLPAPER: u32 = 20;
    pub const SPI_SETDESKPATTERN: u32 = 21;
    pub const SPI_GETKEYBOARDDELAY: u32 = 22;
    pub const SPI_SETKEYBOARDDELAY: u32 = 23;
    pub const SPI_ICONVERTICALSPACING: u32 = 24;
    pub const SPI_GETICONTITLEWRAP: u32 = 25;
    pub const SPI_SETICONTITLEWRAP: u32 = 26;
    pub const SPI_GETMENUDROPALIGNMENT: u32 = 27;
    pub const SPI_SETMENUDROPALIGNMENT: u32 = 28;
    pub const SPI_SETDOUBLECLKWIDTH: u32 = 29;
    pub const SPI_SETDOUBLECLKHEIGHT: u32 = 30;
    pub const SPI_GETICONTITLELOGFONT: u32 = 31;
    pub const SPI_SETDOUBLECLICKTIME: u32 = 32;
    pub const SPI_SETMOUSEBUTTONSWAP: u32 = 33;
    pub const SPI_SETICONTITLELOGFONT: u32 = 34;
    pub const SPI_GETFASTTASKSWITCH: u32 = 35;
    pub const SPI_SETFASTTASKSWITCH: u32 = 36;
    pub const SPI_SETDRAGFULLWINDOWS: u32 = 37;
    pub const SPI_GETDRAGFULLWINDOWS: u32 = 38;
    pub const SPI_GETNONCLIENTMETRICS: u32 = 41;
    pub const SPI_SETNONCLIENTMETRICS: u32 = 42;
    pub const SPI_GETMINIMIZEDMETRICS: u32 = 43;
    pub const SPI_SETMINIMIZEDMETRICS: u32 = 44;
    pub const SPI_GETICONMETRICS: u32 = 45;
    pub const SPI_SETICONMETRICS: u32 = 46;
    pub const SPI_SETWORKAREA: u32 = 47;
    pub const SPI_GETWORKAREA: u32 = 48;
    pub const SPI_SETPENWINDOWS: u32 = 49;
    pub const SPI_GETHIGHCONTRAST: u32 = 66;
    pub const SPI_SETHIGHCONTRAST: u32 = 67;
    pub const SPI_GETKEYBOARDPREF: u32 = 68;
    pub const SPI_SETKEYBOARDPREF: u32 = 69;
    pub const SPI_GETSCREENREADER: u32 = 70;
    pub const SPI_SETSCREENREADER: u32 = 71;
    pub const SPI_GETANIMATION: u32 = 72;
    pub const SPI_SETANIMATION: u32 = 73;
    pub const SPI_GETFONTSMOOTHING: u32 = 74;
    pub const SPI_SETFONTSMOOTHING: u32 = 75;
    pub const SPI_SETDRAGWIDTH: u32 = 76;
    pub const SPI_SETDRAGHEIGHT: u32 = 77;
    pub const SPI_SETHANDHELD: u32 = 78;
    pub const SPI_GETLOWPOWERTIMEOUT: u32 = 79;
    pub const SPI_GETPOWEROFFTIMEOUT: u32 = 80;
    pub const SPI_SETLOWPOWERTIMEOUT: u32 = 81;
    pub const SPI_SETPOWEROFFTIMEOUT: u32 = 82;
    pub const SPI_GETLOWPOWERACTIVE: u32 = 83;
    pub const SPI_GETPOWEROFFACTIVE: u32 = 84;
    pub const SPI_SETLOWPOWERACTIVE: u32 = 85;
    pub const SPI_SETPOWEROFFACTIVE: u32 = 86;
    pub const SPI_SETCURSORS: u32 = 87;
    pub const SPI_SETICONS: u32 = 88;
    pub const SPI_GETDEFAULTINPUTLANG: u32 = 89;
    pub const SPI_SETDEFAULTINPUTLANG: u32 = 90;
    pub const SPI_SETLANGTOGGLE: u32 = 91;
    pub const SPI_GETWINDOWSEXTENSION: u32 = 92;
    pub const SPI_SETMOUSETRAILS: u32 = 93;
    pub const SPI_GETMOUSETRAILS: u32 = 94;
    pub const SPI_SETSCREENSAVERRUNNING: u32 = 97;
    pub const SPI_SCREENSAVERRUNNING: u32 = 97;
    pub const SPI_GETFILTERKEYS: u32 = 50;
    pub const SPI_SETFILTERKEYS: u32 = 51;
    pub const SPI_GETTOGGLEKEYS: u32 = 52;
    pub const SPI_SETTOGGLEKEYS: u32 = 53;
    pub const SPI_GETMOUSEKEYS: u32 = 54;
    pub const SPI_SETMOUSEKEYS: u32 = 55;
    pub const SPI_GETSHOWSOUNDS: u32 = 56;
    pub const SPI_SETSHOWSOUNDS: u32 = 57;
    pub const SPI_GETSTICKYKEYS: u32 = 58;
    pub const SPI_SETSTICKYKEYS: u32 = 59;
    pub const SPI_GETACCESSTIMEOUT: u32 = 60;
    pub const SPI_SETACCESSTIMEOUT: u32 = 61;
    pub const SPI_GETSERIALKEYS: u32 = 62;
    pub const SPI_SETSERIALKEYS: u32 = 63;
    pub const SPI_GETSOUNDSENTRY: u32 = 64;
    pub const SPI_SETSOUNDSENTRY: u32 = 65;
    pub const SPI_GETSNAPTODEFBUTTON: u32 = 95;
    pub const SPI_SETSNAPTODEFBUTTON: u32 = 96;
    pub const SPI_GETMOUSEHOVERWIDTH: u32 = 98;
    pub const SPI_SETMOUSEHOVERWIDTH: u32 = 99;
    pub const SPI_GETMOUSEHOVERHEIGHT: u32 = 100;
    pub const SPI_SETMOUSEHOVERHEIGHT: u32 = 101;
    pub const SPI_GETMOUSEHOVERTIME: u32 = 102;
    pub const SPI_SETMOUSEHOVERTIME: u32 = 103;
    pub const SPI_GETWHEELSCROLLLINES: u32 = 104;
    pub const SPI_SETWHEELSCROLLLINES: u32 = 105;
    pub const SPI_GETMENUSHOWDELAY: u32 = 106;
    pub const SPI_SETMENUSHOWDELAY: u32 = 107;
    pub const SPI_GETWHEELSCROLLCHARS: u32 = 108;
    pub const SPI_SETWHEELSCROLLCHARS: u32 = 109;
    pub const SPI_GETSHOWIMEUI: u32 = 110;
    pub const SPI_SETSHOWIMEUI: u32 = 111;
    pub const SPI_GETMOUSESPEED: u32 = 112;
    pub const SPI_SETMOUSESPEED: u32 = 113;
    pub const SPI_GETSCREENSAVERRUNNING: u32 = 114;
    pub const SPI_GETDESKWALLPAPER: u32 = 115;
    pub const SPI_GETAUDIODESCRIPTION: u32 = 116;
    pub const SPI_SETAUDIODESCRIPTION: u32 = 117;
    pub const SPI_GETSCREENSAVESECURE: u32 = 118;
    pub const SPI_SETSCREENSAVESECURE: u32 = 119;
    pub const SPI_GETHUNGAPPTIMEOUT: u32 = 120;
    pub const SPI_SETHUNGAPPTIMEOUT: u32 = 121;
    pub const SPI_GETWAITTOKILLTIMEOUT: u32 = 122;
    pub const SPI_SETWAITTOKILLTIMEOUT: u32 = 123;
    pub const SPI_GETWAITTOKILLSERVICETIMEOUT: u32 = 124;
    pub const SPI_SETWAITTOKILLSERVICETIMEOUT: u32 = 125;
    pub const SPI_GETMOUSEDOCKTHRESHOLD: u32 = 126;
    pub const SPI_SETMOUSEDOCKTHRESHOLD: u32 = 127;
    pub const SPI_GETPENDOCKTHRESHOLD: u32 = 128;
    pub const SPI_SETPENDOCKTHRESHOLD: u32 = 129;
    pub const SPI_GETWINARRANGING: u32 = 130;
    pub const SPI_SETWINARRANGING: u32 = 131;
    pub const SPI_GETMOUSEDRAGOUTTHRESHOLD: u32 = 132;
    pub const SPI_SETMOUSEDRAGOUTTHRESHOLD: u32 = 133;
    pub const SPI_GETPENDRAGOUTTHRESHOLD: u32 = 134;
    pub const SPI_SETPENDRAGOUTTHRESHOLD: u32 = 135;
    pub const SPI_GETMOUSESIDEMOVETHRESHOLD: u32 = 136;
    pub const SPI_SETMOUSESIDEMOVETHRESHOLD: u32 = 137;
    pub const SPI_GETPENSIDEMOVETHRESHOLD: u32 = 138;
    pub const SPI_SETPENSIDEMOVETHRESHOLD: u32 = 139;
    pub const SPI_GETDRAGFROMMAXIMIZE: u32 = 140;
    pub const SPI_SETDRAGFROMMAXIMIZE: u32 = 141;
    pub const SPI_GETSNAPSIZING: u32 = 142;
    pub const SPI_SETSNAPSIZING: u32 = 143;
    pub const SPI_GETDOCKMOVING: u32 = 144;
    pub const SPI_SETDOCKMOVING: u32 = 145;
    pub const MAX_TOUCH_PREDICTION_FILTER_TAPS: u32 = 3;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY: u32 = 8;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME: u32 = 8;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP: u32 = 1;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA: f64 = 0.001;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN: f64 = 0.9;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX: f64 = 0.999;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE: f64 = 0.001;
    pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA: f64 = 0.99;
    pub const SPI_GETTOUCHPREDICTIONPARAMETERS: u32 = 156;
    pub const SPI_SETTOUCHPREDICTIONPARAMETERS: u32 = 157;
    pub const MAX_LOGICALDPIOVERRIDE: u32 = 2;
    pub const MIN_LOGICALDPIOVERRIDE: i32 = -2;
    pub const SPI_GETLOGICALDPIOVERRIDE: u32 = 158;
    pub const SPI_SETLOGICALDPIOVERRIDE: u32 = 159;
    pub const SPI_GETMENURECT: u32 = 162;
    pub const SPI_SETMENURECT: u32 = 163;
    pub const SPI_GETACTIVEWINDOWTRACKING: u32 = 4096;
    pub const SPI_SETACTIVEWINDOWTRACKING: u32 = 4097;
    pub const SPI_GETMENUANIMATION: u32 = 4098;
    pub const SPI_SETMENUANIMATION: u32 = 4099;
    pub const SPI_GETCOMBOBOXANIMATION: u32 = 4100;
    pub const SPI_SETCOMBOBOXANIMATION: u32 = 4101;
    pub const SPI_GETLISTBOXSMOOTHSCROLLING: u32 = 4102;
    pub const SPI_SETLISTBOXSMOOTHSCROLLING: u32 = 4103;
    pub const SPI_GETGRADIENTCAPTIONS: u32 = 4104;
    pub const SPI_SETGRADIENTCAPTIONS: u32 = 4105;
    pub const SPI_GETKEYBOARDCUES: u32 = 4106;
    pub const SPI_SETKEYBOARDCUES: u32 = 4107;
    pub const SPI_GETMENUUNDERLINES: u32 = 4106;
    pub const SPI_SETMENUUNDERLINES: u32 = 4107;
    pub const SPI_GETACTIVEWNDTRKZORDER: u32 = 4108;
    pub const SPI_SETACTIVEWNDTRKZORDER: u32 = 4109;
    pub const SPI_GETHOTTRACKING: u32 = 4110;
    pub const SPI_SETHOTTRACKING: u32 = 4111;
    pub const SPI_GETMENUFADE: u32 = 4114;
    pub const SPI_SETMENUFADE: u32 = 4115;
    pub const SPI_GETSELECTIONFADE: u32 = 4116;
    pub const SPI_SETSELECTIONFADE: u32 = 4117;
    pub const SPI_GETTOOLTIPANIMATION: u32 = 4118;
    pub const SPI_SETTOOLTIPANIMATION: u32 = 4119;
    pub const SPI_GETTOOLTIPFADE: u32 = 4120;
    pub const SPI_SETTOOLTIPFADE: u32 = 4121;
    pub const SPI_GETCURSORSHADOW: u32 = 4122;
    pub const SPI_SETCURSORSHADOW: u32 = 4123;
    pub const SPI_GETMOUSESONAR: u32 = 4124;
    pub const SPI_SETMOUSESONAR: u32 = 4125;
    pub const SPI_GETMOUSECLICKLOCK: u32 = 4126;
    pub const SPI_SETMOUSECLICKLOCK: u32 = 4127;
    pub const SPI_GETMOUSEVANISH: u32 = 4128;
    pub const SPI_SETMOUSEVANISH: u32 = 4129;
    pub const SPI_GETFLATMENU: u32 = 4130;
    pub const SPI_SETFLATMENU: u32 = 4131;
    pub const SPI_GETDROPSHADOW: u32 = 4132;
    pub const SPI_SETDROPSHADOW: u32 = 4133;
    pub const SPI_GETBLOCKSENDINPUTRESETS: u32 = 4134;
    pub const SPI_SETBLOCKSENDINPUTRESETS: u32 = 4135;
    pub const SPI_GETUIEFFECTS: u32 = 4158;
    pub const SPI_SETUIEFFECTS: u32 = 4159;
    pub const SPI_GETDISABLEOVERLAPPEDCONTENT: u32 = 4160;
    pub const SPI_SETDISABLEOVERLAPPEDCONTENT: u32 = 4161;
    pub const SPI_GETCLIENTAREAANIMATION: u32 = 4162;
    pub const SPI_SETCLIENTAREAANIMATION: u32 = 4163;
    pub const SPI_GETCLEARTYPE: u32 = 4168;
    pub const SPI_SETCLEARTYPE: u32 = 4169;
    pub const SPI_GETSPEECHRECOGNITION: u32 = 4170;
    pub const SPI_SETSPEECHRECOGNITION: u32 = 4171;
    pub const SPI_GETCARETBROWSING: u32 = 4172;
    pub const SPI_SETCARETBROWSING: u32 = 4173;
    pub const SPI_GETTHREADLOCALINPUTSETTINGS: u32 = 4174;
    pub const SPI_SETTHREADLOCALINPUTSETTINGS: u32 = 4175;
    pub const SPI_GETSYSTEMLANGUAGEBAR: u32 = 4176;
    pub const SPI_SETSYSTEMLANGUAGEBAR: u32 = 4177;
    pub const SPI_GETFOREGROUNDLOCKTIMEOUT: u32 = 8192;
    pub const SPI_SETFOREGROUNDLOCKTIMEOUT: u32 = 8193;
    pub const SPI_GETACTIVEWNDTRKTIMEOUT: u32 = 8194;
    pub const SPI_SETACTIVEWNDTRKTIMEOUT: u32 = 8195;
    pub const SPI_GETFOREGROUNDFLASHCOUNT: u32 = 8196;
    pub const SPI_SETFOREGROUNDFLASHCOUNT: u32 = 8197;
    pub const SPI_GETCARETWIDTH: u32 = 8198;
    pub const SPI_SETCARETWIDTH: u32 = 8199;
    pub const SPI_GETMOUSECLICKLOCKTIME: u32 = 8200;
    pub const SPI_SETMOUSECLICKLOCKTIME: u32 = 8201;
    pub const SPI_GETFONTSMOOTHINGTYPE: u32 = 8202;
    pub const SPI_SETFONTSMOOTHINGTYPE: u32 = 8203;
    pub const FE_FONTSMOOTHINGSTANDARD: u32 = 1;
    pub const FE_FONTSMOOTHINGCLEARTYPE: u32 = 2;
    pub const SPI_GETFONTSMOOTHINGCONTRAST: u32 = 8204;
    pub const SPI_SETFONTSMOOTHINGCONTRAST: u32 = 8205;
    pub const SPI_GETFOCUSBORDERWIDTH: u32 = 8206;
    pub const SPI_SETFOCUSBORDERWIDTH: u32 = 8207;
    pub const SPI_GETFOCUSBORDERHEIGHT: u32 = 8208;
    pub const SPI_SETFOCUSBORDERHEIGHT: u32 = 8209;
    pub const SPI_GETFONTSMOOTHINGORIENTATION: u32 = 8210;
    pub const SPI_SETFONTSMOOTHINGORIENTATION: u32 = 8211;
    pub const FE_FONTSMOOTHINGORIENTATIONBGR: u32 = 0;
    pub const FE_FONTSMOOTHINGORIENTATIONRGB: u32 = 1;
    pub const SPI_GETMINIMUMHITRADIUS: u32 = 8212;
    pub const SPI_SETMINIMUMHITRADIUS: u32 = 8213;
    pub const SPI_GETMESSAGEDURATION: u32 = 8214;
    pub const SPI_SETMESSAGEDURATION: u32 = 8215;
    pub const SPI_GETCONTACTVISUALIZATION: u32 = 8216;
    pub const SPI_SETCONTACTVISUALIZATION: u32 = 8217;
    pub const CONTACTVISUALIZATION_OFF: u32 = 0;
    pub const CONTACTVISUALIZATION_ON: u32 = 1;
    pub const CONTACTVISUALIZATION_PRESENTATIONMODE: u32 = 2;
    pub const SPI_GETGESTUREVISUALIZATION: u32 = 8218;
    pub const SPI_SETGESTUREVISUALIZATION: u32 = 8219;
    pub const GESTUREVISUALIZATION_OFF: u32 = 0;
    pub const GESTUREVISUALIZATION_ON: u32 = 31;
    pub const GESTUREVISUALIZATION_TAP: u32 = 1;
    pub const GESTUREVISUALIZATION_DOUBLETAP: u32 = 2;
    pub const GESTUREVISUALIZATION_PRESSANDTAP: u32 = 4;
    pub const GESTUREVISUALIZATION_PRESSANDHOLD: u32 = 8;
    pub const GESTUREVISUALIZATION_RIGHTTAP: u32 = 16;
    pub const SPI_GETMOUSEWHEELROUTING: u32 = 8220;
    pub const SPI_SETMOUSEWHEELROUTING: u32 = 8221;
    pub const MOUSEWHEEL_ROUTING_FOCUS: u32 = 0;
    pub const MOUSEWHEEL_ROUTING_HYBRID: u32 = 1;
    pub const MOUSEWHEEL_ROUTING_MOUSE_POS: u32 = 2;
    pub const SPI_GETPENVISUALIZATION: u32 = 8222;
    pub const SPI_SETPENVISUALIZATION: u32 = 8223;
    pub const PENVISUALIZATION_ON: u32 = 35;
    pub const PENVISUALIZATION_OFF: u32 = 0;
    pub const PENVISUALIZATION_TAP: u32 = 1;
    pub const PENVISUALIZATION_DOUBLETAP: u32 = 2;
    pub const PENVISUALIZATION_CURSOR: u32 = 32;
    pub const SPI_GETPENARBITRATIONTYPE: u32 = 8224;
    pub const SPI_SETPENARBITRATIONTYPE: u32 = 8225;
    pub const PENARBITRATIONTYPE_NONE: u32 = 0;
    pub const PENARBITRATIONTYPE_WIN8: u32 = 1;
    pub const PENARBITRATIONTYPE_FIS: u32 = 2;
    pub const PENARBITRATIONTYPE_SPT: u32 = 3;
    pub const PENARBITRATIONTYPE_MAX: u32 = 4;
    pub const SPI_GETCARETTIMEOUT: u32 = 8226;
    pub const SPI_SETCARETTIMEOUT: u32 = 8227;
    pub const SPI_GETHANDEDNESS: u32 = 8228;
    pub const SPI_SETHANDEDNESS: u32 = 8229;
    pub const SPIF_UPDATEINIFILE: u32 = 1;
    pub const SPIF_SENDWININICHANGE: u32 = 2;
    pub const SPIF_SENDCHANGE: u32 = 2;
    pub const METRICS_USEDEFAULT: i32 = -1;
    pub const ARW_BOTTOMLEFT: u32 = 0;
    pub const ARW_BOTTOMRIGHT: u32 = 1;
    pub const ARW_TOPLEFT: u32 = 2;
    pub const ARW_TOPRIGHT: u32 = 3;
    pub const ARW_STARTMASK: u32 = 3;
    pub const ARW_STARTRIGHT: u32 = 1;
    pub const ARW_STARTTOP: u32 = 2;
    pub const ARW_LEFT: u32 = 0;
    pub const ARW_RIGHT: u32 = 0;
    pub const ARW_UP: u32 = 4;
    pub const ARW_DOWN: u32 = 4;
    pub const ARW_HIDE: u32 = 8;
    pub const SERKF_SERIALKEYSON: u32 = 1;
    pub const SERKF_AVAILABLE: u32 = 2;
    pub const SERKF_INDICATOR: u32 = 4;
    pub const HCF_HIGHCONTRASTON: u32 = 1;
    pub const HCF_AVAILABLE: u32 = 2;
    pub const HCF_HOTKEYACTIVE: u32 = 4;
    pub const HCF_CONFIRMHOTKEY: u32 = 8;
    pub const HCF_HOTKEYSOUND: u32 = 16;
    pub const HCF_INDICATOR: u32 = 32;
    pub const HCF_HOTKEYAVAILABLE: u32 = 64;
    pub const HCF_LOGONDESKTOP: u32 = 256;
    pub const HCF_DEFAULTDESKTOP: u32 = 512;
    pub const HCF_OPTION_NOTHEMECHANGE: u32 = 4096;
    pub const CDS_UPDATEREGISTRY: u32 = 1;
    pub const CDS_TEST: u32 = 2;
    pub const CDS_FULLSCREEN: u32 = 4;
    pub const CDS_GLOBAL: u32 = 8;
    pub const CDS_SET_PRIMARY: u32 = 16;
    pub const CDS_VIDEOPARAMETERS: u32 = 32;
    pub const CDS_ENABLE_UNSAFE_MODES: u32 = 256;
    pub const CDS_DISABLE_UNSAFE_MODES: u32 = 512;
    pub const CDS_RESET: u32 = 1073741824;
    pub const CDS_RESET_EX: u32 = 536870912;
    pub const CDS_NORESET: u32 = 268435456;
    pub const VP_COMMAND_GET: u32 = 1;
    pub const VP_COMMAND_SET: u32 = 2;
    pub const VP_FLAGS_TV_MODE: u32 = 1;
    pub const VP_FLAGS_TV_STANDARD: u32 = 2;
    pub const VP_FLAGS_FLICKER: u32 = 4;
    pub const VP_FLAGS_OVERSCAN: u32 = 8;
    pub const VP_FLAGS_MAX_UNSCALED: u32 = 16;
    pub const VP_FLAGS_POSITION: u32 = 32;
    pub const VP_FLAGS_BRIGHTNESS: u32 = 64;
    pub const VP_FLAGS_CONTRAST: u32 = 128;
    pub const VP_FLAGS_COPYPROTECT: u32 = 256;
    pub const VP_MODE_WIN_GRAPHICS: u32 = 1;
    pub const VP_MODE_TV_PLAYBACK: u32 = 2;
    pub const VP_TV_STANDARD_NTSC_M: u32 = 1;
    pub const VP_TV_STANDARD_NTSC_M_J: u32 = 2;
    pub const VP_TV_STANDARD_PAL_B: u32 = 4;
    pub const VP_TV_STANDARD_PAL_D: u32 = 8;
    pub const VP_TV_STANDARD_PAL_H: u32 = 16;
    pub const VP_TV_STANDARD_PAL_I: u32 = 32;
    pub const VP_TV_STANDARD_PAL_M: u32 = 64;
    pub const VP_TV_STANDARD_PAL_N: u32 = 128;
    pub const VP_TV_STANDARD_SECAM_B: u32 = 256;
    pub const VP_TV_STANDARD_SECAM_D: u32 = 512;
    pub const VP_TV_STANDARD_SECAM_G: u32 = 1024;
    pub const VP_TV_STANDARD_SECAM_H: u32 = 2048;
    pub const VP_TV_STANDARD_SECAM_K: u32 = 4096;
    pub const VP_TV_STANDARD_SECAM_K1: u32 = 8192;
    pub const VP_TV_STANDARD_SECAM_L: u32 = 16384;
    pub const VP_TV_STANDARD_WIN_VGA: u32 = 32768;
    pub const VP_TV_STANDARD_NTSC_433: u32 = 65536;
    pub const VP_TV_STANDARD_PAL_G: u32 = 131072;
    pub const VP_TV_STANDARD_PAL_60: u32 = 262144;
    pub const VP_TV_STANDARD_SECAM_L1: u32 = 524288;
    pub const VP_CP_TYPE_APS_TRIGGER: u32 = 1;
    pub const VP_CP_TYPE_MACROVISION: u32 = 2;
    pub const VP_CP_CMD_ACTIVATE: u32 = 1;
    pub const VP_CP_CMD_DEACTIVATE: u32 = 2;
    pub const VP_CP_CMD_CHANGE: u32 = 4;
    pub const DISP_CHANGE_SUCCESSFUL: u32 = 0;
    pub const DISP_CHANGE_RESTART: u32 = 1;
    pub const DISP_CHANGE_FAILED: i32 = -1;
    pub const DISP_CHANGE_BADMODE: i32 = -2;
    pub const DISP_CHANGE_NOTUPDATED: i32 = -3;
    pub const DISP_CHANGE_BADFLAGS: i32 = -4;
    pub const DISP_CHANGE_BADPARAM: i32 = -5;
    pub const DISP_CHANGE_BADDUALVIEW: i32 = -6;
    pub const EDS_RAWMODE: u32 = 2;
    pub const EDS_ROTATEDMODE: u32 = 4;
    pub const EDD_GET_DEVICE_INTERFACE_NAME: u32 = 1;
    pub const FKF_FILTERKEYSON: u32 = 1;
    pub const FKF_AVAILABLE: u32 = 2;
    pub const FKF_HOTKEYACTIVE: u32 = 4;
    pub const FKF_CONFIRMHOTKEY: u32 = 8;
    pub const FKF_HOTKEYSOUND: u32 = 16;
    pub const FKF_INDICATOR: u32 = 32;
    pub const FKF_CLICKON: u32 = 64;
    pub const SKF_STICKYKEYSON: u32 = 1;
    pub const SKF_AVAILABLE: u32 = 2;
    pub const SKF_HOTKEYACTIVE: u32 = 4;
    pub const SKF_CONFIRMHOTKEY: u32 = 8;
    pub const SKF_HOTKEYSOUND: u32 = 16;
    pub const SKF_INDICATOR: u32 = 32;
    pub const SKF_AUDIBLEFEEDBACK: u32 = 64;
    pub const SKF_TRISTATE: u32 = 128;
    pub const SKF_TWOKEYSOFF: u32 = 256;
    pub const SKF_LALTLATCHED: u32 = 268435456;
    pub const SKF_LCTLLATCHED: u32 = 67108864;
    pub const SKF_LSHIFTLATCHED: u32 = 16777216;
    pub const SKF_RALTLATCHED: u32 = 536870912;
    pub const SKF_RCTLLATCHED: u32 = 134217728;
    pub const SKF_RSHIFTLATCHED: u32 = 33554432;
    pub const SKF_LWINLATCHED: u32 = 1073741824;
    pub const SKF_RWINLATCHED: u32 = 2147483648;
    pub const SKF_LALTLOCKED: u32 = 1048576;
    pub const SKF_LCTLLOCKED: u32 = 262144;
    pub const SKF_LSHIFTLOCKED: u32 = 65536;
    pub const SKF_RALTLOCKED: u32 = 2097152;
    pub const SKF_RCTLLOCKED: u32 = 524288;
    pub const SKF_RSHIFTLOCKED: u32 = 131072;
    pub const SKF_LWINLOCKED: u32 = 4194304;
    pub const SKF_RWINLOCKED: u32 = 8388608;
    pub const MKF_MOUSEKEYSON: u32 = 1;
    pub const MKF_AVAILABLE: u32 = 2;
    pub const MKF_HOTKEYACTIVE: u32 = 4;
    pub const MKF_CONFIRMHOTKEY: u32 = 8;
    pub const MKF_HOTKEYSOUND: u32 = 16;
    pub const MKF_INDICATOR: u32 = 32;
    pub const MKF_MODIFIERS: u32 = 64;
    pub const MKF_REPLACENUMBERS: u32 = 128;
    pub const MKF_LEFTBUTTONSEL: u32 = 268435456;
    pub const MKF_RIGHTBUTTONSEL: u32 = 536870912;
    pub const MKF_LEFTBUTTONDOWN: u32 = 16777216;
    pub const MKF_RIGHTBUTTONDOWN: u32 = 33554432;
    pub const MKF_MOUSEMODE: u32 = 2147483648;
    pub const ATF_TIMEOUTON: u32 = 1;
    pub const ATF_ONOFFFEEDBACK: u32 = 2;
    pub const SSGF_NONE: u32 = 0;
    pub const SSGF_DISPLAY: u32 = 3;
    pub const SSTF_NONE: u32 = 0;
    pub const SSTF_CHARS: u32 = 1;
    pub const SSTF_BORDER: u32 = 2;
    pub const SSTF_DISPLAY: u32 = 3;
    pub const SSWF_NONE: u32 = 0;
    pub const SSWF_TITLE: u32 = 1;
    pub const SSWF_WINDOW: u32 = 2;
    pub const SSWF_DISPLAY: u32 = 3;
    pub const SSWF_CUSTOM: u32 = 4;
    pub const SSF_SOUNDSENTRYON: u32 = 1;
    pub const SSF_AVAILABLE: u32 = 2;
    pub const SSF_INDICATOR: u32 = 4;
    pub const TKF_TOGGLEKEYSON: u32 = 1;
    pub const TKF_AVAILABLE: u32 = 2;
    pub const TKF_HOTKEYACTIVE: u32 = 4;
    pub const TKF_CONFIRMHOTKEY: u32 = 8;
    pub const TKF_HOTKEYSOUND: u32 = 16;
    pub const TKF_INDICATOR: u32 = 32;
    pub const SLE_ERROR: u32 = 1;
    pub const SLE_MINORERROR: u32 = 2;
    pub const SLE_WARNING: u32 = 3;
    pub const MONITOR_DEFAULTTONULL: u32 = 0;
    pub const MONITOR_DEFAULTTOPRIMARY: u32 = 1;
    pub const MONITOR_DEFAULTTONEAREST: u32 = 2;
    pub const MONITORINFOF_PRIMARY: u32 = 1;
    pub const WINEVENT_OUTOFCONTEXT: u32 = 0;
    pub const WINEVENT_SKIPOWNTHREAD: u32 = 1;
    pub const WINEVENT_SKIPOWNPROCESS: u32 = 2;
    pub const WINEVENT_INCONTEXT: u32 = 4;
    pub const CHILDID_SELF: u32 = 0;
    pub const INDEXID_OBJECT: u32 = 0;
    pub const INDEXID_CONTAINER: u32 = 0;
    pub const EVENT_MIN: u32 = 1;
    pub const EVENT_MAX: u32 = 2147483647;
    pub const EVENT_SYSTEM_SOUND: u32 = 1;
    pub const EVENT_SYSTEM_ALERT: u32 = 2;
    pub const EVENT_SYSTEM_FOREGROUND: u32 = 3;
    pub const EVENT_SYSTEM_MENUSTART: u32 = 4;
    pub const EVENT_SYSTEM_MENUEND: u32 = 5;
    pub const EVENT_SYSTEM_MENUPOPUPSTART: u32 = 6;
    pub const EVENT_SYSTEM_MENUPOPUPEND: u32 = 7;
    pub const EVENT_SYSTEM_CAPTURESTART: u32 = 8;
    pub const EVENT_SYSTEM_CAPTUREEND: u32 = 9;
    pub const EVENT_SYSTEM_MOVESIZESTART: u32 = 10;
    pub const EVENT_SYSTEM_MOVESIZEEND: u32 = 11;
    pub const EVENT_SYSTEM_CONTEXTHELPSTART: u32 = 12;
    pub const EVENT_SYSTEM_CONTEXTHELPEND: u32 = 13;
    pub const EVENT_SYSTEM_DRAGDROPSTART: u32 = 14;
    pub const EVENT_SYSTEM_DRAGDROPEND: u32 = 15;
    pub const EVENT_SYSTEM_DIALOGSTART: u32 = 16;
    pub const EVENT_SYSTEM_DIALOGEND: u32 = 17;
    pub const EVENT_SYSTEM_SCROLLINGSTART: u32 = 18;
    pub const EVENT_SYSTEM_SCROLLINGEND: u32 = 19;
    pub const EVENT_SYSTEM_SWITCHSTART: u32 = 20;
    pub const EVENT_SYSTEM_SWITCHEND: u32 = 21;
    pub const EVENT_SYSTEM_MINIMIZESTART: u32 = 22;
    pub const EVENT_SYSTEM_MINIMIZEEND: u32 = 23;
    pub const EVENT_SYSTEM_DESKTOPSWITCH: u32 = 32;
    pub const EVENT_SYSTEM_SWITCHER_APPGRABBED: u32 = 36;
    pub const EVENT_SYSTEM_SWITCHER_APPOVERTARGET: u32 = 37;
    pub const EVENT_SYSTEM_SWITCHER_APPDROPPED: u32 = 38;
    pub const EVENT_SYSTEM_SWITCHER_CANCELLED: u32 = 39;
    pub const EVENT_SYSTEM_IME_KEY_NOTIFICATION: u32 = 41;
    pub const EVENT_SYSTEM_END: u32 = 255;
    pub const EVENT_OEM_DEFINED_START: u32 = 257;
    pub const EVENT_OEM_DEFINED_END: u32 = 511;
    pub const EVENT_UIA_EVENTID_START: u32 = 19968;
    pub const EVENT_UIA_EVENTID_END: u32 = 20223;
    pub const EVENT_UIA_PROPID_START: u32 = 29952;
    pub const EVENT_UIA_PROPID_END: u32 = 30207;
    pub const EVENT_CONSOLE_CARET: u32 = 16385;
    pub const EVENT_CONSOLE_UPDATE_REGION: u32 = 16386;
    pub const EVENT_CONSOLE_UPDATE_SIMPLE: u32 = 16387;
    pub const EVENT_CONSOLE_UPDATE_SCROLL: u32 = 16388;
    pub const EVENT_CONSOLE_LAYOUT: u32 = 16389;
    pub const EVENT_CONSOLE_START_APPLICATION: u32 = 16390;
    pub const EVENT_CONSOLE_END_APPLICATION: u32 = 16391;
    pub const CONSOLE_APPLICATION_16BIT: u32 = 0;
    pub const CONSOLE_CARET_SELECTION: u32 = 1;
    pub const CONSOLE_CARET_VISIBLE: u32 = 2;
    pub const EVENT_CONSOLE_END: u32 = 16639;
    pub const EVENT_OBJECT_CREATE: u32 = 32768;
    pub const EVENT_OBJECT_DESTROY: u32 = 32769;
    pub const EVENT_OBJECT_SHOW: u32 = 32770;
    pub const EVENT_OBJECT_HIDE: u32 = 32771;
    pub const EVENT_OBJECT_REORDER: u32 = 32772;
    pub const EVENT_OBJECT_FOCUS: u32 = 32773;
    pub const EVENT_OBJECT_SELECTION: u32 = 32774;
    pub const EVENT_OBJECT_SELECTIONADD: u32 = 32775;
    pub const EVENT_OBJECT_SELECTIONREMOVE: u32 = 32776;
    pub const EVENT_OBJECT_SELECTIONWITHIN: u32 = 32777;
    pub const EVENT_OBJECT_STATECHANGE: u32 = 32778;
    pub const EVENT_OBJECT_LOCATIONCHANGE: u32 = 32779;
    pub const EVENT_OBJECT_NAMECHANGE: u32 = 32780;
    pub const EVENT_OBJECT_DESCRIPTIONCHANGE: u32 = 32781;
    pub const EVENT_OBJECT_VALUECHANGE: u32 = 32782;
    pub const EVENT_OBJECT_PARENTCHANGE: u32 = 32783;
    pub const EVENT_OBJECT_HELPCHANGE: u32 = 32784;
    pub const EVENT_OBJECT_DEFACTIONCHANGE: u32 = 32785;
    pub const EVENT_OBJECT_ACCELERATORCHANGE: u32 = 32786;
    pub const EVENT_OBJECT_INVOKED: u32 = 32787;
    pub const EVENT_OBJECT_TEXTSELECTIONCHANGED: u32 = 32788;
    pub const EVENT_OBJECT_CONTENTSCROLLED: u32 = 32789;
    pub const EVENT_SYSTEM_ARRANGMENTPREVIEW: u32 = 32790;
    pub const EVENT_OBJECT_CLOAKED: u32 = 32791;
    pub const EVENT_OBJECT_UNCLOAKED: u32 = 32792;
    pub const EVENT_OBJECT_LIVEREGIONCHANGED: u32 = 32793;
    pub const EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED: u32 = 32800;
    pub const EVENT_OBJECT_DRAGSTART: u32 = 32801;
    pub const EVENT_OBJECT_DRAGCANCEL: u32 = 32802;
    pub const EVENT_OBJECT_DRAGCOMPLETE: u32 = 32803;
    pub const EVENT_OBJECT_DRAGENTER: u32 = 32804;
    pub const EVENT_OBJECT_DRAGLEAVE: u32 = 32805;
    pub const EVENT_OBJECT_DRAGDROPPED: u32 = 32806;
    pub const EVENT_OBJECT_IME_SHOW: u32 = 32807;
    pub const EVENT_OBJECT_IME_HIDE: u32 = 32808;
    pub const EVENT_OBJECT_IME_CHANGE: u32 = 32809;
    pub const EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED: u32 = 32816;
    pub const EVENT_OBJECT_END: u32 = 33023;
    pub const EVENT_AIA_START: u32 = 40960;
    pub const EVENT_AIA_END: u32 = 45055;
    pub const SOUND_SYSTEM_STARTUP: u32 = 1;
    pub const SOUND_SYSTEM_SHUTDOWN: u32 = 2;
    pub const SOUND_SYSTEM_BEEP: u32 = 3;
    pub const SOUND_SYSTEM_ERROR: u32 = 4;
    pub const SOUND_SYSTEM_QUESTION: u32 = 5;
    pub const SOUND_SYSTEM_WARNING: u32 = 6;
    pub const SOUND_SYSTEM_INFORMATION: u32 = 7;
    pub const SOUND_SYSTEM_MAXIMIZE: u32 = 8;
    pub const SOUND_SYSTEM_MINIMIZE: u32 = 9;
    pub const SOUND_SYSTEM_RESTOREUP: u32 = 10;
    pub const SOUND_SYSTEM_RESTOREDOWN: u32 = 11;
    pub const SOUND_SYSTEM_APPSTART: u32 = 12;
    pub const SOUND_SYSTEM_FAULT: u32 = 13;
    pub const SOUND_SYSTEM_APPEND: u32 = 14;
    pub const SOUND_SYSTEM_MENUCOMMAND: u32 = 15;
    pub const SOUND_SYSTEM_MENUPOPUP: u32 = 16;
    pub const CSOUND_SYSTEM: u32 = 16;
    pub const ALERT_SYSTEM_INFORMATIONAL: u32 = 1;
    pub const ALERT_SYSTEM_WARNING: u32 = 2;
    pub const ALERT_SYSTEM_ERROR: u32 = 3;
    pub const ALERT_SYSTEM_QUERY: u32 = 4;
    pub const ALERT_SYSTEM_CRITICAL: u32 = 5;
    pub const CALERT_SYSTEM: u32 = 6;
    pub const GUI_CARETBLINKING: u32 = 1;
    pub const GUI_INMOVESIZE: u32 = 2;
    pub const GUI_INMENUMODE: u32 = 4;
    pub const GUI_SYSTEMMENUMODE: u32 = 8;
    pub const GUI_POPUPMENUMODE: u32 = 16;
    pub const GUI_16BITTASK: u32 = 0;
    pub const USER_DEFAULT_SCREEN_DPI: u32 = 96;
    pub const STATE_SYSTEM_UNAVAILABLE: u32 = 1;
    pub const STATE_SYSTEM_SELECTED: u32 = 2;
    pub const STATE_SYSTEM_FOCUSED: u32 = 4;
    pub const STATE_SYSTEM_PRESSED: u32 = 8;
    pub const STATE_SYSTEM_CHECKED: u32 = 16;
    pub const STATE_SYSTEM_MIXED: u32 = 32;
    pub const STATE_SYSTEM_INDETERMINATE: u32 = 32;
    pub const STATE_SYSTEM_READONLY: u32 = 64;
    pub const STATE_SYSTEM_HOTTRACKED: u32 = 128;
    pub const STATE_SYSTEM_DEFAULT: u32 = 256;
    pub const STATE_SYSTEM_EXPANDED: u32 = 512;
    pub const STATE_SYSTEM_COLLAPSED: u32 = 1024;
    pub const STATE_SYSTEM_BUSY: u32 = 2048;
    pub const STATE_SYSTEM_FLOATING: u32 = 4096;
    pub const STATE_SYSTEM_MARQUEED: u32 = 8192;
    pub const STATE_SYSTEM_ANIMATED: u32 = 16384;
    pub const STATE_SYSTEM_INVISIBLE: u32 = 32768;
    pub const STATE_SYSTEM_OFFSCREEN: u32 = 65536;
    pub const STATE_SYSTEM_SIZEABLE: u32 = 131072;
    pub const STATE_SYSTEM_MOVEABLE: u32 = 262144;
    pub const STATE_SYSTEM_SELFVOICING: u32 = 524288;
    pub const STATE_SYSTEM_FOCUSABLE: u32 = 1048576;
    pub const STATE_SYSTEM_SELECTABLE: u32 = 2097152;
    pub const STATE_SYSTEM_LINKED: u32 = 4194304;
    pub const STATE_SYSTEM_TRAVERSED: u32 = 8388608;
    pub const STATE_SYSTEM_MULTISELECTABLE: u32 = 16777216;
    pub const STATE_SYSTEM_EXTSELECTABLE: u32 = 33554432;
    pub const STATE_SYSTEM_ALERT_LOW: u32 = 67108864;
    pub const STATE_SYSTEM_ALERT_MEDIUM: u32 = 134217728;
    pub const STATE_SYSTEM_ALERT_HIGH: u32 = 268435456;
    pub const STATE_SYSTEM_PROTECTED: u32 = 536870912;
    pub const STATE_SYSTEM_VALID: u32 = 1073741823;
    pub const CCHILDREN_TITLEBAR: u32 = 5;
    pub const CCHILDREN_SCROLLBAR: u32 = 5;
    pub const CURSOR_SHOWING: u32 = 1;
    pub const CURSOR_SUPPRESSED: u32 = 2;
    pub const WS_ACTIVECAPTION: u32 = 1;
    pub const GA_PARENT: u32 = 1;
    pub const GA_ROOT: u32 = 2;
    pub const GA_ROOTOWNER: u32 = 3;
    pub const RIM_INPUT: u32 = 0;
    pub const RIM_INPUTSINK: u32 = 1;
    pub const RIM_TYPEMOUSE: u32 = 0;
    pub const RIM_TYPEKEYBOARD: u32 = 1;
    pub const RIM_TYPEHID: u32 = 2;
    pub const RIM_TYPEMAX: u32 = 2;
    pub const RI_MOUSE_LEFT_BUTTON_DOWN: u32 = 1;
    pub const RI_MOUSE_LEFT_BUTTON_UP: u32 = 2;
    pub const RI_MOUSE_RIGHT_BUTTON_DOWN: u32 = 4;
    pub const RI_MOUSE_RIGHT_BUTTON_UP: u32 = 8;
    pub const RI_MOUSE_MIDDLE_BUTTON_DOWN: u32 = 16;
    pub const RI_MOUSE_MIDDLE_BUTTON_UP: u32 = 32;
    pub const RI_MOUSE_BUTTON_1_DOWN: u32 = 1;
    pub const RI_MOUSE_BUTTON_1_UP: u32 = 2;
    pub const RI_MOUSE_BUTTON_2_DOWN: u32 = 4;
    pub const RI_MOUSE_BUTTON_2_UP: u32 = 8;
    pub const RI_MOUSE_BUTTON_3_DOWN: u32 = 16;
    pub const RI_MOUSE_BUTTON_3_UP: u32 = 32;
    pub const RI_MOUSE_BUTTON_4_DOWN: u32 = 64;
    pub const RI_MOUSE_BUTTON_4_UP: u32 = 128;
    pub const RI_MOUSE_BUTTON_5_DOWN: u32 = 256;
    pub const RI_MOUSE_BUTTON_5_UP: u32 = 512;
    pub const RI_MOUSE_WHEEL: u32 = 1024;
    pub const RI_MOUSE_HWHEEL: u32 = 2048;
    pub const MOUSE_MOVE_RELATIVE: u32 = 0;
    pub const MOUSE_MOVE_ABSOLUTE: u32 = 1;
    pub const MOUSE_VIRTUAL_DESKTOP: u32 = 2;
    pub const MOUSE_ATTRIBUTES_CHANGED: u32 = 4;
    pub const MOUSE_MOVE_NOCOALESCE: u32 = 8;
    pub const KEYBOARD_OVERRUN_MAKE_CODE: u32 = 255;
    pub const RI_KEY_MAKE: u32 = 0;
    pub const RI_KEY_BREAK: u32 = 1;
    pub const RI_KEY_E0: u32 = 2;
    pub const RI_KEY_E1: u32 = 4;
    pub const RI_KEY_TERMSRV_SET_LED: u32 = 8;
    pub const RI_KEY_TERMSRV_SHADOW: u32 = 16;
    pub const RID_INPUT: u32 = 268435459;
    pub const RID_HEADER: u32 = 268435461;
    pub const RIDI_PREPARSEDDATA: u32 = 536870917;
    pub const RIDI_DEVICENAME: u32 = 536870919;
    pub const RIDI_DEVICEINFO: u32 = 536870923;
    pub const RIDEV_REMOVE: u32 = 1;
    pub const RIDEV_EXCLUDE: u32 = 16;
    pub const RIDEV_PAGEONLY: u32 = 32;
    pub const RIDEV_NOLEGACY: u32 = 48;
    pub const RIDEV_INPUTSINK: u32 = 256;
    pub const RIDEV_CAPTUREMOUSE: u32 = 512;
    pub const RIDEV_NOHOTKEYS: u32 = 512;
    pub const RIDEV_APPKEYS: u32 = 1024;
    pub const RIDEV_EXINPUTSINK: u32 = 4096;
    pub const RIDEV_DEVNOTIFY: u32 = 8192;
    pub const RIDEV_EXMODEMASK: u32 = 240;
    pub const GIDC_ARRIVAL: u32 = 1;
    pub const GIDC_REMOVAL: u32 = 2;
    pub const POINTER_DEVICE_PRODUCT_STRING_MAX: u32 = 520;
    pub const PDC_ARRIVAL: u32 = 1;
    pub const PDC_REMOVAL: u32 = 2;
    pub const PDC_ORIENTATION_0: u32 = 4;
    pub const PDC_ORIENTATION_90: u32 = 8;
    pub const PDC_ORIENTATION_180: u32 = 16;
    pub const PDC_ORIENTATION_270: u32 = 32;
    pub const PDC_MODE_DEFAULT: u32 = 64;
    pub const PDC_MODE_CENTERED: u32 = 128;
    pub const PDC_MAPPING_CHANGE: u32 = 256;
    pub const PDC_RESOLUTION: u32 = 512;
    pub const PDC_ORIGIN: u32 = 1024;
    pub const PDC_MODE_ASPECTRATIOPRESERVED: u32 = 2048;
    pub const MSGFLT_ADD: u32 = 1;
    pub const MSGFLT_REMOVE: u32 = 2;
    pub const MSGFLTINFO_NONE: u32 = 0;
    pub const MSGFLTINFO_ALREADYALLOWED_FORWND: u32 = 1;
    pub const MSGFLTINFO_ALREADYDISALLOWED_FORWND: u32 = 2;
    pub const MSGFLTINFO_ALLOWED_HIGHER: u32 = 3;
    pub const MSGFLT_RESET: u32 = 0;
    pub const MSGFLT_ALLOW: u32 = 1;
    pub const MSGFLT_DISALLOW: u32 = 2;
    pub const GF_BEGIN: u32 = 1;
    pub const GF_INERTIA: u32 = 2;
    pub const GF_END: u32 = 4;
    pub const GID_BEGIN: u32 = 1;
    pub const GID_END: u32 = 2;
    pub const GID_ZOOM: u32 = 3;
    pub const GID_PAN: u32 = 4;
    pub const GID_ROTATE: u32 = 5;
    pub const GID_TWOFINGERTAP: u32 = 6;
    pub const GID_PRESSANDTAP: u32 = 7;
    pub const GID_ROLLOVER: u32 = 7;
    pub const GC_ALLGESTURES: u32 = 1;
    pub const GC_ZOOM: u32 = 1;
    pub const GC_PAN: u32 = 1;
    pub const GC_PAN_WITH_SINGLE_FINGER_VERTICALLY: u32 = 2;
    pub const GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY: u32 = 4;
    pub const GC_PAN_WITH_GUTTER: u32 = 8;
    pub const GC_PAN_WITH_INERTIA: u32 = 16;
    pub const GC_ROTATE: u32 = 1;
    pub const GC_TWOFINGERTAP: u32 = 1;
    pub const GC_PRESSANDTAP: u32 = 1;
    pub const GC_ROLLOVER: u32 = 1;
    pub const GESTURECONFIGMAXCOUNT: u32 = 256;
    pub const GCF_INCLUDE_ANCESTORS: u32 = 1;
    pub const NID_INTEGRATED_TOUCH: u32 = 1;
    pub const NID_EXTERNAL_TOUCH: u32 = 2;
    pub const NID_INTEGRATED_PEN: u32 = 4;
    pub const NID_EXTERNAL_PEN: u32 = 8;
    pub const NID_MULTI_INPUT: u32 = 64;
    pub const NID_READY: u32 = 128;
    pub const MAX_STR_BLOCKREASON: u32 = 256;
    pub const MAX_LEADBYTES: u32 = 12;
    pub const MAX_DEFAULTCHAR: u32 = 2;
    pub const HIGH_SURROGATE_START: u32 = 55296;
    pub const HIGH_SURROGATE_END: u32 = 56319;
    pub const LOW_SURROGATE_START: u32 = 56320;
    pub const LOW_SURROGATE_END: u32 = 57343;
    pub const MB_PRECOMPOSED: u32 = 1;
    pub const MB_COMPOSITE: u32 = 2;
    pub const MB_USEGLYPHCHARS: u32 = 4;
    pub const MB_ERR_INVALID_CHARS: u32 = 8;
    pub const WC_COMPOSITECHECK: u32 = 512;
    pub const WC_DISCARDNS: u32 = 16;
    pub const WC_SEPCHARS: u32 = 32;
    pub const WC_DEFAULTCHAR: u32 = 64;
    pub const WC_ERR_INVALID_CHARS: u32 = 128;
    pub const WC_NO_BEST_FIT_CHARS: u32 = 1024;
    pub const CT_CTYPE1: u32 = 1;
    pub const CT_CTYPE2: u32 = 2;
    pub const CT_CTYPE3: u32 = 4;
    pub const C1_UPPER: u32 = 1;
    pub const C1_LOWER: u32 = 2;
    pub const C1_DIGIT: u32 = 4;
    pub const C1_SPACE: u32 = 8;
    pub const C1_PUNCT: u32 = 16;
    pub const C1_CNTRL: u32 = 32;
    pub const C1_BLANK: u32 = 64;
    pub const C1_XDIGIT: u32 = 128;
    pub const C1_ALPHA: u32 = 256;
    pub const C1_DEFINED: u32 = 512;
    pub const C2_LEFTTORIGHT: u32 = 1;
    pub const C2_RIGHTTOLEFT: u32 = 2;
    pub const C2_EUROPENUMBER: u32 = 3;
    pub const C2_EUROPESEPARATOR: u32 = 4;
    pub const C2_EUROPETERMINATOR: u32 = 5;
    pub const C2_ARABICNUMBER: u32 = 6;
    pub const C2_COMMONSEPARATOR: u32 = 7;
    pub const C2_BLOCKSEPARATOR: u32 = 8;
    pub const C2_SEGMENTSEPARATOR: u32 = 9;
    pub const C2_WHITESPACE: u32 = 10;
    pub const C2_OTHERNEUTRAL: u32 = 11;
    pub const C2_NOTAPPLICABLE: u32 = 0;
    pub const C3_NONSPACING: u32 = 1;
    pub const C3_DIACRITIC: u32 = 2;
    pub const C3_VOWELMARK: u32 = 4;
    pub const C3_SYMBOL: u32 = 8;
    pub const C3_KATAKANA: u32 = 16;
    pub const C3_HIRAGANA: u32 = 32;
    pub const C3_HALFWIDTH: u32 = 64;
    pub const C3_FULLWIDTH: u32 = 128;
    pub const C3_IDEOGRAPH: u32 = 256;
    pub const C3_KASHIDA: u32 = 512;
    pub const C3_LEXICAL: u32 = 1024;
    pub const C3_HIGHSURROGATE: u32 = 2048;
    pub const C3_LOWSURROGATE: u32 = 4096;
    pub const C3_ALPHA: u32 = 32768;
    pub const C3_NOTAPPLICABLE: u32 = 0;
    pub const NORM_IGNORECASE: u32 = 1;
    pub const NORM_IGNORENONSPACE: u32 = 2;
    pub const NORM_IGNORESYMBOLS: u32 = 4;
    pub const LINGUISTIC_IGNORECASE: u32 = 16;
    pub const LINGUISTIC_IGNOREDIACRITIC: u32 = 32;
    pub const NORM_IGNOREKANATYPE: u32 = 65536;
    pub const NORM_IGNOREWIDTH: u32 = 131072;
    pub const NORM_LINGUISTIC_CASING: u32 = 134217728;
    pub const MAP_FOLDCZONE: u32 = 16;
    pub const MAP_PRECOMPOSED: u32 = 32;
    pub const MAP_COMPOSITE: u32 = 64;
    pub const MAP_FOLDDIGITS: u32 = 128;
    pub const MAP_EXPAND_LIGATURES: u32 = 8192;
    pub const LCMAP_LOWERCASE: u32 = 256;
    pub const LCMAP_UPPERCASE: u32 = 512;
    pub const LCMAP_TITLECASE: u32 = 768;
    pub const LCMAP_SORTKEY: u32 = 1024;
    pub const LCMAP_BYTEREV: u32 = 2048;
    pub const LCMAP_HIRAGANA: u32 = 1048576;
    pub const LCMAP_KATAKANA: u32 = 2097152;
    pub const LCMAP_HALFWIDTH: u32 = 4194304;
    pub const LCMAP_FULLWIDTH: u32 = 8388608;
    pub const LCMAP_LINGUISTIC_CASING: u32 = 16777216;
    pub const LCMAP_SIMPLIFIED_CHINESE: u32 = 33554432;
    pub const LCMAP_TRADITIONAL_CHINESE: u32 = 67108864;
    pub const LCMAP_SORTHANDLE: u32 = 536870912;
    pub const LCMAP_HASH: u32 = 262144;
    pub const FIND_STARTSWITH: u32 = 1048576;
    pub const FIND_ENDSWITH: u32 = 2097152;
    pub const FIND_FROMSTART: u32 = 4194304;
    pub const FIND_FROMEND: u32 = 8388608;
    pub const LGRPID_INSTALLED: u32 = 1;
    pub const LGRPID_SUPPORTED: u32 = 2;
    pub const LCID_INSTALLED: u32 = 1;
    pub const LCID_SUPPORTED: u32 = 2;
    pub const LCID_ALTERNATE_SORTS: u32 = 4;
    pub const LOCALE_ALL: u32 = 0;
    pub const LOCALE_WINDOWS: u32 = 1;
    pub const LOCALE_SUPPLEMENTAL: u32 = 2;
    pub const LOCALE_ALTERNATE_SORTS: u32 = 4;
    pub const LOCALE_REPLACEMENT: u32 = 8;
    pub const LOCALE_NEUTRALDATA: u32 = 16;
    pub const LOCALE_SPECIFICDATA: u32 = 32;
    pub const CP_INSTALLED: u32 = 1;
    pub const CP_SUPPORTED: u32 = 2;
    pub const SORT_STRINGSORT: u32 = 4096;
    pub const SORT_DIGITSASNUMBERS: u32 = 8;
    pub const CSTR_LESS_THAN: u32 = 1;
    pub const CSTR_EQUAL: u32 = 2;
    pub const CSTR_GREATER_THAN: u32 = 3;
    pub const CP_ACP: u32 = 0;
    pub const CP_OEMCP: u32 = 1;
    pub const CP_MACCP: u32 = 2;
    pub const CP_THREAD_ACP: u32 = 3;
    pub const CP_SYMBOL: u32 = 42;
    pub const CP_UTF7: u32 = 65000;
    pub const CP_UTF8: u32 = 65001;
    pub const CTRY_DEFAULT: u32 = 0;
    pub const CTRY_ALBANIA: u32 = 355;
    pub const CTRY_ALGERIA: u32 = 213;
    pub const CTRY_ARGENTINA: u32 = 54;
    pub const CTRY_ARMENIA: u32 = 374;
    pub const CTRY_AUSTRALIA: u32 = 61;
    pub const CTRY_AUSTRIA: u32 = 43;
    pub const CTRY_AZERBAIJAN: u32 = 994;
    pub const CTRY_BAHRAIN: u32 = 973;
    pub const CTRY_BELARUS: u32 = 375;
    pub const CTRY_BELGIUM: u32 = 32;
    pub const CTRY_BELIZE: u32 = 501;
    pub const CTRY_BOLIVIA: u32 = 591;
    pub const CTRY_BRAZIL: u32 = 55;
    pub const CTRY_BRUNEI_DARUSSALAM: u32 = 673;
    pub const CTRY_BULGARIA: u32 = 359;
    pub const CTRY_CANADA: u32 = 2;
    pub const CTRY_CARIBBEAN: u32 = 1;
    pub const CTRY_CHILE: u32 = 56;
    pub const CTRY_COLOMBIA: u32 = 57;
    pub const CTRY_COSTA_RICA: u32 = 506;
    pub const CTRY_CROATIA: u32 = 385;
    pub const CTRY_CZECH: u32 = 420;
    pub const CTRY_DENMARK: u32 = 45;
    pub const CTRY_DOMINICAN_REPUBLIC: u32 = 1;
    pub const CTRY_ECUADOR: u32 = 593;
    pub const CTRY_EGYPT: u32 = 20;
    pub const CTRY_EL_SALVADOR: u32 = 503;
    pub const CTRY_ESTONIA: u32 = 372;
    pub const CTRY_FAEROE_ISLANDS: u32 = 298;
    pub const CTRY_FINLAND: u32 = 358;
    pub const CTRY_FRANCE: u32 = 33;
    pub const CTRY_GEORGIA: u32 = 995;
    pub const CTRY_GERMANY: u32 = 49;
    pub const CTRY_GREECE: u32 = 30;
    pub const CTRY_GUATEMALA: u32 = 502;
    pub const CTRY_HONDURAS: u32 = 504;
    pub const CTRY_HONG_KONG: u32 = 852;
    pub const CTRY_HUNGARY: u32 = 36;
    pub const CTRY_ICELAND: u32 = 354;
    pub const CTRY_INDIA: u32 = 91;
    pub const CTRY_INDONESIA: u32 = 62;
    pub const CTRY_IRAN: u32 = 981;
    pub const CTRY_IRAQ: u32 = 964;
    pub const CTRY_IRELAND: u32 = 353;
    pub const CTRY_ISRAEL: u32 = 972;
    pub const CTRY_ITALY: u32 = 39;
    pub const CTRY_JAMAICA: u32 = 1;
    pub const CTRY_JAPAN: u32 = 81;
    pub const CTRY_JORDAN: u32 = 962;
    pub const CTRY_KAZAKSTAN: u32 = 7;
    pub const CTRY_KENYA: u32 = 254;
    pub const CTRY_KUWAIT: u32 = 965;
    pub const CTRY_KYRGYZSTAN: u32 = 996;
    pub const CTRY_LATVIA: u32 = 371;
    pub const CTRY_LEBANON: u32 = 961;
    pub const CTRY_LIBYA: u32 = 218;
    pub const CTRY_LIECHTENSTEIN: u32 = 41;
    pub const CTRY_LITHUANIA: u32 = 370;
    pub const CTRY_LUXEMBOURG: u32 = 352;
    pub const CTRY_MACAU: u32 = 853;
    pub const CTRY_MACEDONIA: u32 = 389;
    pub const CTRY_MALAYSIA: u32 = 60;
    pub const CTRY_MALDIVES: u32 = 960;
    pub const CTRY_MEXICO: u32 = 52;
    pub const CTRY_MONACO: u32 = 33;
    pub const CTRY_MONGOLIA: u32 = 976;
    pub const CTRY_MOROCCO: u32 = 212;
    pub const CTRY_NETHERLANDS: u32 = 31;
    pub const CTRY_NEW_ZEALAND: u32 = 64;
    pub const CTRY_NICARAGUA: u32 = 505;
    pub const CTRY_NORWAY: u32 = 47;
    pub const CTRY_OMAN: u32 = 968;
    pub const CTRY_PAKISTAN: u32 = 92;
    pub const CTRY_PANAMA: u32 = 507;
    pub const CTRY_PARAGUAY: u32 = 595;
    pub const CTRY_PERU: u32 = 51;
    pub const CTRY_PHILIPPINES: u32 = 63;
    pub const CTRY_POLAND: u32 = 48;
    pub const CTRY_PORTUGAL: u32 = 351;
    pub const CTRY_PRCHINA: u32 = 86;
    pub const CTRY_PUERTO_RICO: u32 = 1;
    pub const CTRY_QATAR: u32 = 974;
    pub const CTRY_ROMANIA: u32 = 40;
    pub const CTRY_RUSSIA: u32 = 7;
    pub const CTRY_SAUDI_ARABIA: u32 = 966;
    pub const CTRY_SERBIA: u32 = 381;
    pub const CTRY_SINGAPORE: u32 = 65;
    pub const CTRY_SLOVAK: u32 = 421;
    pub const CTRY_SLOVENIA: u32 = 386;
    pub const CTRY_SOUTH_AFRICA: u32 = 27;
    pub const CTRY_SOUTH_KOREA: u32 = 82;
    pub const CTRY_SPAIN: u32 = 34;
    pub const CTRY_SWEDEN: u32 = 46;
    pub const CTRY_SWITZERLAND: u32 = 41;
    pub const CTRY_SYRIA: u32 = 963;
    pub const CTRY_TAIWAN: u32 = 886;
    pub const CTRY_TATARSTAN: u32 = 7;
    pub const CTRY_THAILAND: u32 = 66;
    pub const CTRY_TRINIDAD_Y_TOBAGO: u32 = 1;
    pub const CTRY_TUNISIA: u32 = 216;
    pub const CTRY_TURKEY: u32 = 90;
    pub const CTRY_UAE: u32 = 971;
    pub const CTRY_UKRAINE: u32 = 380;
    pub const CTRY_UNITED_KINGDOM: u32 = 44;
    pub const CTRY_UNITED_STATES: u32 = 1;
    pub const CTRY_URUGUAY: u32 = 598;
    pub const CTRY_UZBEKISTAN: u32 = 7;
    pub const CTRY_VENEZUELA: u32 = 58;
    pub const CTRY_VIET_NAM: u32 = 84;
    pub const CTRY_YEMEN: u32 = 967;
    pub const CTRY_ZIMBABWE: u32 = 263;
    pub const LOCALE_NOUSEROVERRIDE: u32 = 2147483648;
    pub const LOCALE_USE_CP_ACP: u32 = 1073741824;
    pub const LOCALE_RETURN_NUMBER: u32 = 536870912;
    pub const LOCALE_RETURN_GENITIVE_NAMES: u32 = 268435456;
    pub const LOCALE_ALLOW_NEUTRAL_NAMES: u32 = 134217728;
    pub const LOCALE_SLOCALIZEDDISPLAYNAME: u32 = 2;
    pub const LOCALE_SENGLISHDISPLAYNAME: u32 = 114;
    pub const LOCALE_SNATIVEDISPLAYNAME: u32 = 115;
    pub const LOCALE_SLOCALIZEDLANGUAGENAME: u32 = 111;
    pub const LOCALE_SENGLISHLANGUAGENAME: u32 = 4097;
    pub const LOCALE_SNATIVELANGUAGENAME: u32 = 4;
    pub const LOCALE_SLOCALIZEDCOUNTRYNAME: u32 = 6;
    pub const LOCALE_SENGLISHCOUNTRYNAME: u32 = 4098;
    pub const LOCALE_SNATIVECOUNTRYNAME: u32 = 8;
    pub const LOCALE_IDIALINGCODE: u32 = 5;
    pub const LOCALE_SLIST: u32 = 12;
    pub const LOCALE_IMEASURE: u32 = 13;
    pub const LOCALE_SDECIMAL: u32 = 14;
    pub const LOCALE_STHOUSAND: u32 = 15;
    pub const LOCALE_SGROUPING: u32 = 16;
    pub const LOCALE_IDIGITS: u32 = 17;
    pub const LOCALE_ILZERO: u32 = 18;
    pub const LOCALE_INEGNUMBER: u32 = 4112;
    pub const LOCALE_SNATIVEDIGITS: u32 = 19;
    pub const LOCALE_SCURRENCY: u32 = 20;
    pub const LOCALE_SINTLSYMBOL: u32 = 21;
    pub const LOCALE_SMONDECIMALSEP: u32 = 22;
    pub const LOCALE_SMONTHOUSANDSEP: u32 = 23;
    pub const LOCALE_SMONGROUPING: u32 = 24;
    pub const LOCALE_ICURRDIGITS: u32 = 25;
    pub const LOCALE_ICURRENCY: u32 = 27;
    pub const LOCALE_INEGCURR: u32 = 28;
    pub const LOCALE_SSHORTDATE: u32 = 31;
    pub const LOCALE_SLONGDATE: u32 = 32;
    pub const LOCALE_STIMEFORMAT: u32 = 4099;
    pub const LOCALE_SAM: u32 = 40;
    pub const LOCALE_SPM: u32 = 41;
    pub const LOCALE_ICALENDARTYPE: u32 = 4105;
    pub const LOCALE_IOPTIONALCALENDAR: u32 = 4107;
    pub const LOCALE_IFIRSTDAYOFWEEK: u32 = 4108;
    pub const LOCALE_IFIRSTWEEKOFYEAR: u32 = 4109;
    pub const LOCALE_SDAYNAME1: u32 = 42;
    pub const LOCALE_SDAYNAME2: u32 = 43;
    pub const LOCALE_SDAYNAME3: u32 = 44;
    pub const LOCALE_SDAYNAME4: u32 = 45;
    pub const LOCALE_SDAYNAME5: u32 = 46;
    pub const LOCALE_SDAYNAME6: u32 = 47;
    pub const LOCALE_SDAYNAME7: u32 = 48;
    pub const LOCALE_SABBREVDAYNAME1: u32 = 49;
    pub const LOCALE_SABBREVDAYNAME2: u32 = 50;
    pub const LOCALE_SABBREVDAYNAME3: u32 = 51;
    pub const LOCALE_SABBREVDAYNAME4: u32 = 52;
    pub const LOCALE_SABBREVDAYNAME5: u32 = 53;
    pub const LOCALE_SABBREVDAYNAME6: u32 = 54;
    pub const LOCALE_SABBREVDAYNAME7: u32 = 55;
    pub const LOCALE_SMONTHNAME1: u32 = 56;
    pub const LOCALE_SMONTHNAME2: u32 = 57;
    pub const LOCALE_SMONTHNAME3: u32 = 58;
    pub const LOCALE_SMONTHNAME4: u32 = 59;
    pub const LOCALE_SMONTHNAME5: u32 = 60;
    pub const LOCALE_SMONTHNAME6: u32 = 61;
    pub const LOCALE_SMONTHNAME7: u32 = 62;
    pub const LOCALE_SMONTHNAME8: u32 = 63;
    pub const LOCALE_SMONTHNAME9: u32 = 64;
    pub const LOCALE_SMONTHNAME10: u32 = 65;
    pub const LOCALE_SMONTHNAME11: u32 = 66;
    pub const LOCALE_SMONTHNAME12: u32 = 67;
    pub const LOCALE_SMONTHNAME13: u32 = 4110;
    pub const LOCALE_SABBREVMONTHNAME1: u32 = 68;
    pub const LOCALE_SABBREVMONTHNAME2: u32 = 69;
    pub const LOCALE_SABBREVMONTHNAME3: u32 = 70;
    pub const LOCALE_SABBREVMONTHNAME4: u32 = 71;
    pub const LOCALE_SABBREVMONTHNAME5: u32 = 72;
    pub const LOCALE_SABBREVMONTHNAME6: u32 = 73;
    pub const LOCALE_SABBREVMONTHNAME7: u32 = 74;
    pub const LOCALE_SABBREVMONTHNAME8: u32 = 75;
    pub const LOCALE_SABBREVMONTHNAME9: u32 = 76;
    pub const LOCALE_SABBREVMONTHNAME10: u32 = 77;
    pub const LOCALE_SABBREVMONTHNAME11: u32 = 78;
    pub const LOCALE_SABBREVMONTHNAME12: u32 = 79;
    pub const LOCALE_SABBREVMONTHNAME13: u32 = 4111;
    pub const LOCALE_SPOSITIVESIGN: u32 = 80;
    pub const LOCALE_SNEGATIVESIGN: u32 = 81;
    pub const LOCALE_IPOSSIGNPOSN: u32 = 82;
    pub const LOCALE_INEGSIGNPOSN: u32 = 83;
    pub const LOCALE_IPOSSYMPRECEDES: u32 = 84;
    pub const LOCALE_IPOSSEPBYSPACE: u32 = 85;
    pub const LOCALE_INEGSYMPRECEDES: u32 = 86;
    pub const LOCALE_INEGSEPBYSPACE: u32 = 87;
    pub const LOCALE_FONTSIGNATURE: u32 = 88;
    pub const LOCALE_SISO639LANGNAME: u32 = 89;
    pub const LOCALE_SISO3166CTRYNAME: u32 = 90;
    pub const LOCALE_IPAPERSIZE: u32 = 4106;
    pub const LOCALE_SENGCURRNAME: u32 = 4103;
    pub const LOCALE_SNATIVECURRNAME: u32 = 4104;
    pub const LOCALE_SYEARMONTH: u32 = 4102;
    pub const LOCALE_SSORTNAME: u32 = 4115;
    pub const LOCALE_IDIGITSUBSTITUTION: u32 = 4116;
    pub const LOCALE_SNAME: u32 = 92;
    pub const LOCALE_SDURATION: u32 = 93;
    pub const LOCALE_SSHORTESTDAYNAME1: u32 = 96;
    pub const LOCALE_SSHORTESTDAYNAME2: u32 = 97;
    pub const LOCALE_SSHORTESTDAYNAME3: u32 = 98;
    pub const LOCALE_SSHORTESTDAYNAME4: u32 = 99;
    pub const LOCALE_SSHORTESTDAYNAME5: u32 = 100;
    pub const LOCALE_SSHORTESTDAYNAME6: u32 = 101;
    pub const LOCALE_SSHORTESTDAYNAME7: u32 = 102;
    pub const LOCALE_SISO639LANGNAME2: u32 = 103;
    pub const LOCALE_SISO3166CTRYNAME2: u32 = 104;
    pub const LOCALE_SNAN: u32 = 105;
    pub const LOCALE_SPOSINFINITY: u32 = 106;
    pub const LOCALE_SNEGINFINITY: u32 = 107;
    pub const LOCALE_SSCRIPTS: u32 = 108;
    pub const LOCALE_SPARENT: u32 = 109;
    pub const LOCALE_SCONSOLEFALLBACKNAME: u32 = 110;
    pub const LOCALE_IREADINGLAYOUT: u32 = 112;
    pub const LOCALE_INEUTRAL: u32 = 113;
    pub const LOCALE_INEGATIVEPERCENT: u32 = 116;
    pub const LOCALE_IPOSITIVEPERCENT: u32 = 117;
    pub const LOCALE_SPERCENT: u32 = 118;
    pub const LOCALE_SPERMILLE: u32 = 119;
    pub const LOCALE_SMONTHDAY: u32 = 120;
    pub const LOCALE_SSHORTTIME: u32 = 121;
    pub const LOCALE_SOPENTYPELANGUAGETAG: u32 = 122;
    pub const LOCALE_SSORTLOCALE: u32 = 123;
    pub const LOCALE_SRELATIVELONGDATE: u32 = 124;
    pub const LOCALE_SSHORTESTAM: u32 = 126;
    pub const LOCALE_SSHORTESTPM: u32 = 127;
    pub const LOCALE_IDEFAULTCODEPAGE: u32 = 11;
    pub const LOCALE_IDEFAULTANSICODEPAGE: u32 = 4100;
    pub const LOCALE_IDEFAULTMACCODEPAGE: u32 = 4113;
    pub const LOCALE_IDEFAULTEBCDICCODEPAGE: u32 = 4114;
    pub const LOCALE_ILANGUAGE: u32 = 1;
    pub const LOCALE_SABBREVLANGNAME: u32 = 3;
    pub const LOCALE_SABBREVCTRYNAME: u32 = 7;
    pub const LOCALE_IGEOID: u32 = 91;
    pub const LOCALE_IDEFAULTLANGUAGE: u32 = 9;
    pub const LOCALE_IDEFAULTCOUNTRY: u32 = 10;
    pub const LOCALE_IINTLCURRDIGITS: u32 = 26;
    pub const LOCALE_SDATE: u32 = 29;
    pub const LOCALE_STIME: u32 = 30;
    pub const LOCALE_IDATE: u32 = 33;
    pub const LOCALE_ILDATE: u32 = 34;
    pub const LOCALE_ITIME: u32 = 35;
    pub const LOCALE_ITIMEMARKPOSN: u32 = 4101;
    pub const LOCALE_ICENTURY: u32 = 36;
    pub const LOCALE_ITLZERO: u32 = 37;
    pub const LOCALE_IDAYLZERO: u32 = 38;
    pub const LOCALE_IMONLZERO: u32 = 39;
    pub const LOCALE_SKEYBOARDSTOINSTALL: u32 = 94;
    pub const LOCALE_SLANGUAGE: u32 = 2;
    pub const LOCALE_SLANGDISPLAYNAME: u32 = 111;
    pub const LOCALE_SENGLANGUAGE: u32 = 4097;
    pub const LOCALE_SNATIVELANGNAME: u32 = 4;
    pub const LOCALE_SCOUNTRY: u32 = 6;
    pub const LOCALE_SENGCOUNTRY: u32 = 4098;
    pub const LOCALE_SNATIVECTRYNAME: u32 = 8;
    pub const LOCALE_ICOUNTRY: u32 = 5;
    pub const LOCALE_S1159: u32 = 40;
    pub const LOCALE_S2359: u32 = 41;
    pub const TIME_NOMINUTESORSECONDS: u32 = 1;
    pub const TIME_NOSECONDS: u32 = 2;
    pub const TIME_NOTIMEMARKER: u32 = 4;
    pub const TIME_FORCE24HOURFORMAT: u32 = 8;
    pub const DATE_SHORTDATE: u32 = 1;
    pub const DATE_LONGDATE: u32 = 2;
    pub const DATE_USE_ALT_CALENDAR: u32 = 4;
    pub const DATE_YEARMONTH: u32 = 8;
    pub const DATE_LTRREADING: u32 = 16;
    pub const DATE_RTLREADING: u32 = 32;
    pub const DATE_AUTOLAYOUT: u32 = 64;
    pub const DATE_MONTHDAY: u32 = 128;
    pub const CAL_NOUSEROVERRIDE: u32 = 2147483648;
    pub const CAL_USE_CP_ACP: u32 = 1073741824;
    pub const CAL_RETURN_NUMBER: u32 = 536870912;
    pub const CAL_RETURN_GENITIVE_NAMES: u32 = 268435456;
    pub const CAL_ICALINTVALUE: u32 = 1;
    pub const CAL_SCALNAME: u32 = 2;
    pub const CAL_IYEAROFFSETRANGE: u32 = 3;
    pub const CAL_SERASTRING: u32 = 4;
    pub const CAL_SSHORTDATE: u32 = 5;
    pub const CAL_SLONGDATE: u32 = 6;
    pub const CAL_SDAYNAME1: u32 = 7;
    pub const CAL_SDAYNAME2: u32 = 8;
    pub const CAL_SDAYNAME3: u32 = 9;
    pub const CAL_SDAYNAME4: u32 = 10;
    pub const CAL_SDAYNAME5: u32 = 11;
    pub const CAL_SDAYNAME6: u32 = 12;
    pub const CAL_SDAYNAME7: u32 = 13;
    pub const CAL_SABBREVDAYNAME1: u32 = 14;
    pub const CAL_SABBREVDAYNAME2: u32 = 15;
    pub const CAL_SABBREVDAYNAME3: u32 = 16;
    pub const CAL_SABBREVDAYNAME4: u32 = 17;
    pub const CAL_SABBREVDAYNAME5: u32 = 18;
    pub const CAL_SABBREVDAYNAME6: u32 = 19;
    pub const CAL_SABBREVDAYNAME7: u32 = 20;
    pub const CAL_SMONTHNAME1: u32 = 21;
    pub const CAL_SMONTHNAME2: u32 = 22;
    pub const CAL_SMONTHNAME3: u32 = 23;
    pub const CAL_SMONTHNAME4: u32 = 24;
    pub const CAL_SMONTHNAME5: u32 = 25;
    pub const CAL_SMONTHNAME6: u32 = 26;
    pub const CAL_SMONTHNAME7: u32 = 27;
    pub const CAL_SMONTHNAME8: u32 = 28;
    pub const CAL_SMONTHNAME9: u32 = 29;
    pub const CAL_SMONTHNAME10: u32 = 30;
    pub const CAL_SMONTHNAME11: u32 = 31;
    pub const CAL_SMONTHNAME12: u32 = 32;
    pub const CAL_SMONTHNAME13: u32 = 33;
    pub const CAL_SABBREVMONTHNAME1: u32 = 34;
    pub const CAL_SABBREVMONTHNAME2: u32 = 35;
    pub const CAL_SABBREVMONTHNAME3: u32 = 36;
    pub const CAL_SABBREVMONTHNAME4: u32 = 37;
    pub const CAL_SABBREVMONTHNAME5: u32 = 38;
    pub const CAL_SABBREVMONTHNAME6: u32 = 39;
    pub const CAL_SABBREVMONTHNAME7: u32 = 40;
    pub const CAL_SABBREVMONTHNAME8: u32 = 41;
    pub const CAL_SABBREVMONTHNAME9: u32 = 42;
    pub const CAL_SABBREVMONTHNAME10: u32 = 43;
    pub const CAL_SABBREVMONTHNAME11: u32 = 44;
    pub const CAL_SABBREVMONTHNAME12: u32 = 45;
    pub const CAL_SABBREVMONTHNAME13: u32 = 46;
    pub const CAL_SYEARMONTH: u32 = 47;
    pub const CAL_ITWODIGITYEARMAX: u32 = 48;
    pub const CAL_SSHORTESTDAYNAME1: u32 = 49;
    pub const CAL_SSHORTESTDAYNAME2: u32 = 50;
    pub const CAL_SSHORTESTDAYNAME3: u32 = 51;
    pub const CAL_SSHORTESTDAYNAME4: u32 = 52;
    pub const CAL_SSHORTESTDAYNAME5: u32 = 53;
    pub const CAL_SSHORTESTDAYNAME6: u32 = 54;
    pub const CAL_SSHORTESTDAYNAME7: u32 = 55;
    pub const CAL_SMONTHDAY: u32 = 56;
    pub const CAL_SABBREVERASTRING: u32 = 57;
    pub const CAL_SRELATIVELONGDATE: u32 = 58;
    pub const CAL_SENGLISHERANAME: u32 = 59;
    pub const CAL_SENGLISHABBREVERANAME: u32 = 60;
    pub const CAL_SJAPANESEERAFIRSTYEAR: u32 = 61;
    pub const ENUM_ALL_CALENDARS: u32 = 4294967295;
    pub const CAL_GREGORIAN: u32 = 1;
    pub const CAL_GREGORIAN_US: u32 = 2;
    pub const CAL_JAPAN: u32 = 3;
    pub const CAL_TAIWAN: u32 = 4;
    pub const CAL_KOREA: u32 = 5;
    pub const CAL_HIJRI: u32 = 6;
    pub const CAL_THAI: u32 = 7;
    pub const CAL_HEBREW: u32 = 8;
    pub const CAL_GREGORIAN_ME_FRENCH: u32 = 9;
    pub const CAL_GREGORIAN_ARABIC: u32 = 10;
    pub const CAL_GREGORIAN_XLIT_ENGLISH: u32 = 11;
    pub const CAL_GREGORIAN_XLIT_FRENCH: u32 = 12;
    pub const CAL_PERSIAN: u32 = 22;
    pub const CAL_UMALQURA: u32 = 23;
    pub const LGRPID_WESTERN_EUROPE: u32 = 1;
    pub const LGRPID_CENTRAL_EUROPE: u32 = 2;
    pub const LGRPID_BALTIC: u32 = 3;
    pub const LGRPID_GREEK: u32 = 4;
    pub const LGRPID_CYRILLIC: u32 = 5;
    pub const LGRPID_TURKIC: u32 = 6;
    pub const LGRPID_TURKISH: u32 = 6;
    pub const LGRPID_JAPANESE: u32 = 7;
    pub const LGRPID_KOREAN: u32 = 8;
    pub const LGRPID_TRADITIONAL_CHINESE: u32 = 9;
    pub const LGRPID_SIMPLIFIED_CHINESE: u32 = 10;
    pub const LGRPID_THAI: u32 = 11;
    pub const LGRPID_HEBREW: u32 = 12;
    pub const LGRPID_ARABIC: u32 = 13;
    pub const LGRPID_VIETNAMESE: u32 = 14;
    pub const LGRPID_INDIC: u32 = 15;
    pub const LGRPID_GEORGIAN: u32 = 16;
    pub const LGRPID_ARMENIAN: u32 = 17;
    pub const MUI_LANGUAGE_ID: u32 = 4;
    pub const MUI_LANGUAGE_NAME: u32 = 8;
    pub const MUI_MERGE_SYSTEM_FALLBACK: u32 = 16;
    pub const MUI_MERGE_USER_FALLBACK: u32 = 32;
    pub const MUI_UI_FALLBACK: u32 = 48;
    pub const MUI_THREAD_LANGUAGES: u32 = 64;
    pub const MUI_CONSOLE_FILTER: u32 = 256;
    pub const MUI_COMPLEX_SCRIPT_FILTER: u32 = 512;
    pub const MUI_RESET_FILTERS: u32 = 1;
    pub const MUI_USER_PREFERRED_UI_LANGUAGES: u32 = 16;
    pub const MUI_USE_INSTALLED_LANGUAGES: u32 = 32;
    pub const MUI_USE_SEARCH_ALL_LANGUAGES: u32 = 64;
    pub const MUI_LANG_NEUTRAL_PE_FILE: u32 = 256;
    pub const MUI_NON_LANG_NEUTRAL_FILE: u32 = 512;
    pub const MUI_MACHINE_LANGUAGE_SETTINGS: u32 = 1024;
    pub const MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL: u32 = 1;
    pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN: u32 = 2;
    pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI: u32 = 4;
    pub const MUI_QUERY_TYPE: u32 = 1;
    pub const MUI_QUERY_CHECKSUM: u32 = 2;
    pub const MUI_QUERY_LANGUAGE_NAME: u32 = 4;
    pub const MUI_QUERY_RESOURCE_TYPES: u32 = 8;
    pub const MUI_FILEINFO_VERSION: u32 = 1;
    pub const MUI_FULL_LANGUAGE: u32 = 1;
    pub const MUI_PARTIAL_LANGUAGE: u32 = 2;
    pub const MUI_LIP_LANGUAGE: u32 = 4;
    pub const MUI_LANGUAGE_INSTALLED: u32 = 32;
    pub const MUI_LANGUAGE_LICENSED: u32 = 64;
    pub const GEOID_NOT_AVAILABLE: i32 = -1;
    pub const GEO_NAME_USER_DEFAULT: u32 = 0;
    pub const IDN_ALLOW_UNASSIGNED: u32 = 1;
    pub const IDN_USE_STD3_ASCII_RULES: u32 = 2;
    pub const IDN_EMAIL_ADDRESS: u32 = 4;
    pub const IDN_RAW_PUNYCODE: u32 = 8;
    pub const VS_ALLOW_LATIN: u32 = 1;
    pub const GSS_ALLOW_INHERITED_COMMON: u32 = 1;
    pub const MUI_FORMAT_REG_COMPAT: u32 = 1;
    pub const MUI_FORMAT_INF_COMPAT: u32 = 2;
    pub const MUI_VERIFY_FILE_EXISTS: u32 = 4;
    pub const MUI_SKIP_STRING_CACHE: u32 = 8;
    pub const MUI_IMMUTABLE_LOOKUP: u32 = 16;
    pub const LOCALE_NAME_USER_DEFAULT: u32 = 0;
    pub const LOCALE_NAME_INVARIANT: &[u8; 1usize] = b"\0";
    pub const LOCALE_NAME_SYSTEM_DEFAULT: &[u8; 22usize] = b"!x-sys-default-locale\0";
    pub const RIGHT_ALT_PRESSED: u32 = 1;
    pub const LEFT_ALT_PRESSED: u32 = 2;
    pub const RIGHT_CTRL_PRESSED: u32 = 4;
    pub const LEFT_CTRL_PRESSED: u32 = 8;
    pub const SHIFT_PRESSED: u32 = 16;
    pub const NUMLOCK_ON: u32 = 32;
    pub const SCROLLLOCK_ON: u32 = 64;
    pub const CAPSLOCK_ON: u32 = 128;
    pub const ENHANCED_KEY: u32 = 256;
    pub const NLS_DBCSCHAR: u32 = 65536;
    pub const NLS_ALPHANUMERIC: u32 = 0;
    pub const NLS_KATAKANA: u32 = 131072;
    pub const NLS_HIRAGANA: u32 = 262144;
    pub const NLS_ROMAN: u32 = 4194304;
    pub const NLS_IME_CONVERSION: u32 = 8388608;
    pub const ALTNUMPAD_BIT: u32 = 67108864;
    pub const NLS_IME_DISABLE: u32 = 536870912;
    pub const FROM_LEFT_1ST_BUTTON_PRESSED: u32 = 1;
    pub const RIGHTMOST_BUTTON_PRESSED: u32 = 2;
    pub const FROM_LEFT_2ND_BUTTON_PRESSED: u32 = 4;
    pub const FROM_LEFT_3RD_BUTTON_PRESSED: u32 = 8;
    pub const FROM_LEFT_4TH_BUTTON_PRESSED: u32 = 16;
    pub const MOUSE_MOVED: u32 = 1;
    pub const DOUBLE_CLICK: u32 = 2;
    pub const MOUSE_WHEELED: u32 = 4;
    pub const MOUSE_HWHEELED: u32 = 8;
    pub const KEY_EVENT: u32 = 1;
    pub const MOUSE_EVENT: u32 = 2;
    pub const WINDOW_BUFFER_SIZE_EVENT: u32 = 4;
    pub const MENU_EVENT: u32 = 8;
    pub const FOCUS_EVENT: u32 = 16;
    pub const ENABLE_PROCESSED_INPUT: u32 = 1;
    pub const ENABLE_LINE_INPUT: u32 = 2;
    pub const ENABLE_ECHO_INPUT: u32 = 4;
    pub const ENABLE_WINDOW_INPUT: u32 = 8;
    pub const ENABLE_MOUSE_INPUT: u32 = 16;
    pub const ENABLE_INSERT_MODE: u32 = 32;
    pub const ENABLE_QUICK_EDIT_MODE: u32 = 64;
    pub const ENABLE_EXTENDED_FLAGS: u32 = 128;
    pub const ENABLE_AUTO_POSITION: u32 = 256;
    pub const ENABLE_VIRTUAL_TERMINAL_INPUT: u32 = 512;
    pub const ENABLE_PROCESSED_OUTPUT: u32 = 1;
    pub const ENABLE_WRAP_AT_EOL_OUTPUT: u32 = 2;
    pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: u32 = 4;
    pub const DISABLE_NEWLINE_AUTO_RETURN: u32 = 8;
    pub const ENABLE_LVB_GRID_WORLDWIDE: u32 = 16;
    pub const CTRL_C_EVENT: u32 = 0;
    pub const CTRL_BREAK_EVENT: u32 = 1;
    pub const CTRL_CLOSE_EVENT: u32 = 2;
    pub const CTRL_LOGOFF_EVENT: u32 = 5;
    pub const CTRL_SHUTDOWN_EVENT: u32 = 6;
    pub const PSEUDOCONSOLE_INHERIT_CURSOR: u32 = 1;
    pub const FOREGROUND_BLUE: u32 = 1;
    pub const FOREGROUND_GREEN: u32 = 2;
    pub const FOREGROUND_RED: u32 = 4;
    pub const FOREGROUND_INTENSITY: u32 = 8;
    pub const BACKGROUND_BLUE: u32 = 16;
    pub const BACKGROUND_GREEN: u32 = 32;
    pub const BACKGROUND_RED: u32 = 64;
    pub const BACKGROUND_INTENSITY: u32 = 128;
    pub const COMMON_LVB_LEADING_BYTE: u32 = 256;
    pub const COMMON_LVB_TRAILING_BYTE: u32 = 512;
    pub const COMMON_LVB_GRID_HORIZONTAL: u32 = 1024;
    pub const COMMON_LVB_GRID_LVERTICAL: u32 = 2048;
    pub const COMMON_LVB_GRID_RVERTICAL: u32 = 4096;
    pub const COMMON_LVB_REVERSE_VIDEO: u32 = 16384;
    pub const COMMON_LVB_UNDERSCORE: u32 = 32768;
    pub const COMMON_LVB_SBCSDBCS: u32 = 768;
    pub const CONSOLE_NO_SELECTION: u32 = 0;
    pub const CONSOLE_SELECTION_IN_PROGRESS: u32 = 1;
    pub const CONSOLE_SELECTION_NOT_EMPTY: u32 = 2;
    pub const CONSOLE_MOUSE_SELECTION: u32 = 4;
    pub const CONSOLE_MOUSE_DOWN: u32 = 8;
    pub const HISTORY_NO_DUP_FLAG: u32 = 1;
    pub const CONSOLE_FULLSCREEN: u32 = 1;
    pub const CONSOLE_FULLSCREEN_HARDWARE: u32 = 2;
    pub const CONSOLE_FULLSCREEN_MODE: u32 = 1;
    pub const CONSOLE_WINDOWED_MODE: u32 = 2;
    pub const CONSOLE_TEXTMODE_BUFFER: u32 = 1;
    pub const VS_VERSION_INFO: u32 = 1;
    pub const VS_USER_DEFINED: u32 = 100;
    pub const VS_FFI_SIGNATURE: u32 = 4277077181;
    pub const VS_FFI_STRUCVERSION: u32 = 65536;
    pub const VS_FFI_FILEFLAGSMASK: u32 = 63;
    pub const VS_FF_DEBUG: u32 = 1;
    pub const VS_FF_PRERELEASE: u32 = 2;
    pub const VS_FF_PATCHED: u32 = 4;
    pub const VS_FF_PRIVATEBUILD: u32 = 8;
    pub const VS_FF_INFOINFERRED: u32 = 16;
    pub const VS_FF_SPECIALBUILD: u32 = 32;
    pub const VOS_UNKNOWN: u32 = 0;
    pub const VOS_DOS: u32 = 65536;
    pub const VOS_OS216: u32 = 131072;
    pub const VOS_OS232: u32 = 196608;
    pub const VOS_NT: u32 = 262144;
    pub const VOS_WINCE: u32 = 327680;
    pub const VOS__BASE: u32 = 0;
    pub const VOS__WINDOWS16: u32 = 1;
    pub const VOS__PM16: u32 = 2;
    pub const VOS__PM32: u32 = 3;
    pub const VOS__WINDOWS32: u32 = 4;
    pub const VOS_DOS_WINDOWS16: u32 = 65537;
    pub const VOS_DOS_WINDOWS32: u32 = 65540;
    pub const VOS_OS216_PM16: u32 = 131074;
    pub const VOS_OS232_PM32: u32 = 196611;
    pub const VOS_NT_WINDOWS32: u32 = 262148;
    pub const VFT_UNKNOWN: u32 = 0;
    pub const VFT_APP: u32 = 1;
    pub const VFT_DLL: u32 = 2;
    pub const VFT_DRV: u32 = 3;
    pub const VFT_FONT: u32 = 4;
    pub const VFT_VXD: u32 = 5;
    pub const VFT_STATIC_LIB: u32 = 7;
    pub const VFT2_UNKNOWN: u32 = 0;
    pub const VFT2_DRV_PRINTER: u32 = 1;
    pub const VFT2_DRV_KEYBOARD: u32 = 2;
    pub const VFT2_DRV_LANGUAGE: u32 = 3;
    pub const VFT2_DRV_DISPLAY: u32 = 4;
    pub const VFT2_DRV_MOUSE: u32 = 5;
    pub const VFT2_DRV_NETWORK: u32 = 6;
    pub const VFT2_DRV_SYSTEM: u32 = 7;
    pub const VFT2_DRV_INSTALLABLE: u32 = 8;
    pub const VFT2_DRV_SOUND: u32 = 9;
    pub const VFT2_DRV_COMM: u32 = 10;
    pub const VFT2_DRV_INPUTMETHOD: u32 = 11;
    pub const VFT2_DRV_VERSIONED_PRINTER: u32 = 12;
    pub const VFT2_FONT_RASTER: u32 = 1;
    pub const VFT2_FONT_VECTOR: u32 = 2;
    pub const VFT2_FONT_TRUETYPE: u32 = 3;
    pub const VFFF_ISSHAREDFILE: u32 = 1;
    pub const VFF_CURNEDEST: u32 = 1;
    pub const VFF_FILEINUSE: u32 = 2;
    pub const VFF_BUFFTOOSMALL: u32 = 4;
    pub const VIFF_FORCEINSTALL: u32 = 1;
    pub const VIFF_DONTDELETEOLD: u32 = 2;
    pub const VIF_TEMPFILE: u32 = 1;
    pub const VIF_MISMATCH: u32 = 2;
    pub const VIF_SRCOLD: u32 = 4;
    pub const VIF_DIFFLANG: u32 = 8;
    pub const VIF_DIFFCODEPG: u32 = 16;
    pub const VIF_DIFFTYPE: u32 = 32;
    pub const VIF_WRITEPROT: u32 = 64;
    pub const VIF_FILEINUSE: u32 = 128;
    pub const VIF_OUTOFSPACE: u32 = 256;
    pub const VIF_ACCESSVIOLATION: u32 = 512;
    pub const VIF_SHARINGVIOLATION: u32 = 1024;
    pub const VIF_CANNOTCREATE: u32 = 2048;
    pub const VIF_CANNOTDELETE: u32 = 4096;
    pub const VIF_CANNOTRENAME: u32 = 8192;
    pub const VIF_CANNOTDELETECUR: u32 = 16384;
    pub const VIF_OUTOFMEMORY: u32 = 32768;
    pub const VIF_CANNOTREADSRC: u32 = 65536;
    pub const VIF_CANNOTREADDST: u32 = 131072;
    pub const VIF_BUFFTOOSMALL: u32 = 262144;
    pub const VIF_CANNOTLOADLZ32: u32 = 524288;
    pub const VIF_CANNOTLOADCABINET: u32 = 1048576;
    pub const FILE_VER_GET_LOCALISED: u32 = 1;
    pub const FILE_VER_GET_NEUTRAL: u32 = 2;
    pub const FILE_VER_GET_PREFETCHED: u32 = 4;
    pub const RRF_RT_REG_NONE: u32 = 1;
    pub const RRF_RT_REG_SZ: u32 = 2;
    pub const RRF_RT_REG_EXPAND_SZ: u32 = 4;
    pub const RRF_RT_REG_BINARY: u32 = 8;
    pub const RRF_RT_REG_DWORD: u32 = 16;
    pub const RRF_RT_REG_MULTI_SZ: u32 = 32;
    pub const RRF_RT_REG_QWORD: u32 = 64;
    pub const RRF_RT_DWORD: u32 = 24;
    pub const RRF_RT_QWORD: u32 = 72;
    pub const RRF_RT_ANY: u32 = 65535;
    pub const RRF_SUBKEY_WOW6464KEY: u32 = 65536;
    pub const RRF_SUBKEY_WOW6432KEY: u32 = 131072;
    pub const RRF_WOW64_MASK: u32 = 196608;
    pub const RRF_NOEXPAND: u32 = 268435456;
    pub const RRF_ZEROONFAILURE: u32 = 536870912;
    pub const REG_PROCESS_APPKEY: u32 = 1;
    pub const PROVIDER_KEEPS_VALUE_LENGTH: u32 = 1;
    pub const WIN31_CLASS: u32 = 0;
    pub const REG_MUI_STRING_TRUNCATE: u32 = 1;
    pub const REG_SECURE_CONNECTION: u32 = 1;
    pub const SHTDN_REASON_FLAG_COMMENT_REQUIRED: u32 = 16777216;
    pub const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED: u32 = 33554432;
    pub const SHTDN_REASON_FLAG_CLEAN_UI: u32 = 67108864;
    pub const SHTDN_REASON_FLAG_DIRTY_UI: u32 = 134217728;
    pub const SHTDN_REASON_FLAG_MOBILE_UI_RESERVED: u32 = 268435456;
    pub const SHTDN_REASON_FLAG_USER_DEFINED: u32 = 1073741824;
    pub const SHTDN_REASON_FLAG_PLANNED: u32 = 2147483648;
    pub const SHTDN_REASON_MAJOR_OTHER: u32 = 0;
    pub const SHTDN_REASON_MAJOR_NONE: u32 = 0;
    pub const SHTDN_REASON_MAJOR_HARDWARE: u32 = 65536;
    pub const SHTDN_REASON_MAJOR_OPERATINGSYSTEM: u32 = 131072;
    pub const SHTDN_REASON_MAJOR_SOFTWARE: u32 = 196608;
    pub const SHTDN_REASON_MAJOR_APPLICATION: u32 = 262144;
    pub const SHTDN_REASON_MAJOR_SYSTEM: u32 = 327680;
    pub const SHTDN_REASON_MAJOR_POWER: u32 = 393216;
    pub const SHTDN_REASON_MAJOR_LEGACY_API: u32 = 458752;
    pub const SHTDN_REASON_MINOR_OTHER: u32 = 0;
    pub const SHTDN_REASON_MINOR_NONE: u32 = 255;
    pub const SHTDN_REASON_MINOR_MAINTENANCE: u32 = 1;
    pub const SHTDN_REASON_MINOR_INSTALLATION: u32 = 2;
    pub const SHTDN_REASON_MINOR_UPGRADE: u32 = 3;
    pub const SHTDN_REASON_MINOR_RECONFIG: u32 = 4;
    pub const SHTDN_REASON_MINOR_HUNG: u32 = 5;
    pub const SHTDN_REASON_MINOR_UNSTABLE: u32 = 6;
    pub const SHTDN_REASON_MINOR_DISK: u32 = 7;
    pub const SHTDN_REASON_MINOR_PROCESSOR: u32 = 8;
    pub const SHTDN_REASON_MINOR_NETWORKCARD: u32 = 9;
    pub const SHTDN_REASON_MINOR_POWER_SUPPLY: u32 = 10;
    pub const SHTDN_REASON_MINOR_CORDUNPLUGGED: u32 = 11;
    pub const SHTDN_REASON_MINOR_ENVIRONMENT: u32 = 12;
    pub const SHTDN_REASON_MINOR_HARDWARE_DRIVER: u32 = 13;
    pub const SHTDN_REASON_MINOR_OTHERDRIVER: u32 = 14;
    pub const SHTDN_REASON_MINOR_BLUESCREEN: u32 = 15;
    pub const SHTDN_REASON_MINOR_SERVICEPACK: u32 = 16;
    pub const SHTDN_REASON_MINOR_HOTFIX: u32 = 17;
    pub const SHTDN_REASON_MINOR_SECURITYFIX: u32 = 18;
    pub const SHTDN_REASON_MINOR_SECURITY: u32 = 19;
    pub const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY: u32 = 20;
    pub const SHTDN_REASON_MINOR_WMI: u32 = 21;
    pub const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL: u32 = 22;
    pub const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL: u32 = 23;
    pub const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL: u32 = 24;
    pub const SHTDN_REASON_MINOR_MMC: u32 = 25;
    pub const SHTDN_REASON_MINOR_SYSTEMRESTORE: u32 = 26;
    pub const SHTDN_REASON_MINOR_TERMSRV: u32 = 32;
    pub const SHTDN_REASON_MINOR_DC_PROMOTION: u32 = 33;
    pub const SHTDN_REASON_MINOR_DC_DEMOTION: u32 = 34;
    pub const SHTDN_REASON_UNKNOWN: u32 = 255;
    pub const SHTDN_REASON_LEGACY_API: u32 = 2147942400;
    pub const SHTDN_REASON_VALID_BIT_MASK: u32 = 3238002687;
    pub const PCLEANUI: u32 = 2214592512;
    pub const UCLEANUI: u32 = 67108864;
    pub const PDIRTYUI: u32 = 2281701376;
    pub const UDIRTYUI: u32 = 134217728;
    pub const MAX_REASON_NAME_LEN: u32 = 64;
    pub const MAX_REASON_DESC_LEN: u32 = 256;
    pub const MAX_REASON_BUGID_LEN: u32 = 32;
    pub const MAX_REASON_COMMENT_LEN: u32 = 512;
    pub const SHUTDOWN_TYPE_LEN: u32 = 32;
    pub const POLICY_SHOWREASONUI_NEVER: u32 = 0;
    pub const POLICY_SHOWREASONUI_ALWAYS: u32 = 1;
    pub const POLICY_SHOWREASONUI_WORKSTATIONONLY: u32 = 2;
    pub const POLICY_SHOWREASONUI_SERVERONLY: u32 = 3;
    pub const SNAPSHOT_POLICY_NEVER: u32 = 0;
    pub const SNAPSHOT_POLICY_ALWAYS: u32 = 1;
    pub const SNAPSHOT_POLICY_UNPLANNED: u32 = 2;
    pub const MAX_NUM_REASONS: u32 = 256;
    pub const REASON_SWINSTALL: u32 = 196610;
    pub const REASON_HWINSTALL: u32 = 65538;
    pub const REASON_SERVICEHANG: u32 = 196613;
    pub const REASON_UNSTABLE: u32 = 327686;
    pub const REASON_SWHWRECONF: u32 = 196612;
    pub const REASON_OTHER: u32 = 0;
    pub const REASON_UNKNOWN: u32 = 255;
    pub const REASON_LEGACY_API: u32 = 2147942400;
    pub const REASON_PLANNED_FLAG: u32 = 2147483648;
    pub const MAX_SHUTDOWN_TIMEOUT: u32 = 315360000;
    pub const SHUTDOWN_FORCE_OTHERS: u32 = 1;
    pub const SHUTDOWN_FORCE_SELF: u32 = 2;
    pub const SHUTDOWN_RESTART: u32 = 4;
    pub const SHUTDOWN_POWEROFF: u32 = 8;
    pub const SHUTDOWN_NOREBOOT: u32 = 16;
    pub const SHUTDOWN_GRACE_OVERRIDE: u32 = 32;
    pub const SHUTDOWN_INSTALL_UPDATES: u32 = 64;
    pub const SHUTDOWN_RESTARTAPPS: u32 = 128;
    pub const SHUTDOWN_SKIP_SVC_PRESHUTDOWN: u32 = 256;
    pub const SHUTDOWN_HYBRID: u32 = 512;
    pub const SHUTDOWN_RESTART_BOOTOPTIONS: u32 = 1024;
    pub const SHUTDOWN_SOFT_REBOOT: u32 = 2048;
    pub const SHUTDOWN_MOBILE_UI: u32 = 4096;
    pub const SHUTDOWN_ARSO: u32 = 8192;
    pub const WNNC_NET_MSNET: u32 = 65536;
    pub const WNNC_NET_SMB: u32 = 131072;
    pub const WNNC_NET_NETWARE: u32 = 196608;
    pub const WNNC_NET_VINES: u32 = 262144;
    pub const WNNC_NET_10NET: u32 = 327680;
    pub const WNNC_NET_LOCUS: u32 = 393216;
    pub const WNNC_NET_SUN_PC_NFS: u32 = 458752;
    pub const WNNC_NET_LANSTEP: u32 = 524288;
    pub const WNNC_NET_9TILES: u32 = 589824;
    pub const WNNC_NET_LANTASTIC: u32 = 655360;
    pub const WNNC_NET_AS400: u32 = 720896;
    pub const WNNC_NET_FTP_NFS: u32 = 786432;
    pub const WNNC_NET_PATHWORKS: u32 = 851968;
    pub const WNNC_NET_LIFENET: u32 = 917504;
    pub const WNNC_NET_POWERLAN: u32 = 983040;
    pub const WNNC_NET_BWNFS: u32 = 1048576;
    pub const WNNC_NET_COGENT: u32 = 1114112;
    pub const WNNC_NET_FARALLON: u32 = 1179648;
    pub const WNNC_NET_APPLETALK: u32 = 1245184;
    pub const WNNC_NET_INTERGRAPH: u32 = 1310720;
    pub const WNNC_NET_SYMFONET: u32 = 1376256;
    pub const WNNC_NET_CLEARCASE: u32 = 1441792;
    pub const WNNC_NET_FRONTIER: u32 = 1507328;
    pub const WNNC_NET_BMC: u32 = 1572864;
    pub const WNNC_NET_DCE: u32 = 1638400;
    pub const WNNC_NET_AVID: u32 = 1703936;
    pub const WNNC_NET_DOCUSPACE: u32 = 1769472;
    pub const WNNC_NET_MANGOSOFT: u32 = 1835008;
    pub const WNNC_NET_SERNET: u32 = 1900544;
    pub const WNNC_NET_RIVERFRONT1: u32 = 1966080;
    pub const WNNC_NET_RIVERFRONT2: u32 = 2031616;
    pub const WNNC_NET_DECORB: u32 = 2097152;
    pub const WNNC_NET_PROTSTOR: u32 = 2162688;
    pub const WNNC_NET_FJ_REDIR: u32 = 2228224;
    pub const WNNC_NET_DISTINCT: u32 = 2293760;
    pub const WNNC_NET_TWINS: u32 = 2359296;
    pub const WNNC_NET_RDR2SAMPLE: u32 = 2424832;
    pub const WNNC_NET_CSC: u32 = 2490368;
    pub const WNNC_NET_3IN1: u32 = 2555904;
    pub const WNNC_NET_EXTENDNET: u32 = 2686976;
    pub const WNNC_NET_STAC: u32 = 2752512;
    pub const WNNC_NET_FOXBAT: u32 = 2818048;
    pub const WNNC_NET_YAHOO: u32 = 2883584;
    pub const WNNC_NET_EXIFS: u32 = 2949120;
    pub const WNNC_NET_DAV: u32 = 3014656;
    pub const WNNC_NET_KNOWARE: u32 = 3080192;
    pub const WNNC_NET_OBJECT_DIRE: u32 = 3145728;
    pub const WNNC_NET_MASFAX: u32 = 3211264;
    pub const WNNC_NET_HOB_NFS: u32 = 3276800;
    pub const WNNC_NET_SHIVA: u32 = 3342336;
    pub const WNNC_NET_IBMAL: u32 = 3407872;
    pub const WNNC_NET_LOCK: u32 = 3473408;
    pub const WNNC_NET_TERMSRV: u32 = 3538944;
    pub const WNNC_NET_SRT: u32 = 3604480;
    pub const WNNC_NET_QUINCY: u32 = 3670016;
    pub const WNNC_NET_OPENAFS: u32 = 3735552;
    pub const WNNC_NET_AVID1: u32 = 3801088;
    pub const WNNC_NET_DFS: u32 = 3866624;
    pub const WNNC_NET_KWNP: u32 = 3932160;
    pub const WNNC_NET_ZENWORKS: u32 = 3997696;
    pub const WNNC_NET_DRIVEONWEB: u32 = 4063232;
    pub const WNNC_NET_VMWARE: u32 = 4128768;
    pub const WNNC_NET_RSFX: u32 = 4194304;
    pub const WNNC_NET_MFILES: u32 = 4259840;
    pub const WNNC_NET_MS_NFS: u32 = 4325376;
    pub const WNNC_NET_GOOGLE: u32 = 4390912;
    pub const WNNC_NET_NDFS: u32 = 4456448;
    pub const WNNC_NET_DOCUSHARE: u32 = 4521984;
    pub const WNNC_NET_AURISTOR_FS: u32 = 4587520;
    pub const WNNC_NET_SECUREAGENT: u32 = 4653056;
    pub const WNNC_NET_9P: u32 = 4718592;
    pub const WNNC_CRED_MANAGER: u32 = 4294901760;
    pub const WNNC_NET_LANMAN: u32 = 131072;
    pub const RESOURCE_CONNECTED: u32 = 1;
    pub const RESOURCE_GLOBALNET: u32 = 2;
    pub const RESOURCE_REMEMBERED: u32 = 3;
    pub const RESOURCE_RECENT: u32 = 4;
    pub const RESOURCE_CONTEXT: u32 = 5;
    pub const RESOURCETYPE_ANY: u32 = 0;
    pub const RESOURCETYPE_DISK: u32 = 1;
    pub const RESOURCETYPE_PRINT: u32 = 2;
    pub const RESOURCETYPE_RESERVED: u32 = 8;
    pub const RESOURCETYPE_UNKNOWN: u32 = 4294967295;
    pub const RESOURCEUSAGE_CONNECTABLE: u32 = 1;
    pub const RESOURCEUSAGE_CONTAINER: u32 = 2;
    pub const RESOURCEUSAGE_NOLOCALDEVICE: u32 = 4;
    pub const RESOURCEUSAGE_SIBLING: u32 = 8;
    pub const RESOURCEUSAGE_ATTACHED: u32 = 16;
    pub const RESOURCEUSAGE_ALL: u32 = 19;
    pub const RESOURCEUSAGE_RESERVED: u32 = 2147483648;
    pub const RESOURCEDISPLAYTYPE_GENERIC: u32 = 0;
    pub const RESOURCEDISPLAYTYPE_DOMAIN: u32 = 1;
    pub const RESOURCEDISPLAYTYPE_SERVER: u32 = 2;
    pub const RESOURCEDISPLAYTYPE_SHARE: u32 = 3;
    pub const RESOURCEDISPLAYTYPE_FILE: u32 = 4;
    pub const RESOURCEDISPLAYTYPE_GROUP: u32 = 5;
    pub const RESOURCEDISPLAYTYPE_NETWORK: u32 = 6;
    pub const RESOURCEDISPLAYTYPE_ROOT: u32 = 7;
    pub const RESOURCEDISPLAYTYPE_SHAREADMIN: u32 = 8;
    pub const RESOURCEDISPLAYTYPE_DIRECTORY: u32 = 9;
    pub const RESOURCEDISPLAYTYPE_TREE: u32 = 10;
    pub const RESOURCEDISPLAYTYPE_NDSCONTAINER: u32 = 11;
    pub const NETPROPERTY_PERSISTENT: u32 = 1;
    pub const CONNECT_UPDATE_PROFILE: u32 = 1;
    pub const CONNECT_UPDATE_RECENT: u32 = 2;
    pub const CONNECT_TEMPORARY: u32 = 4;
    pub const CONNECT_INTERACTIVE: u32 = 8;
    pub const CONNECT_PROMPT: u32 = 16;
    pub const CONNECT_NEED_DRIVE: u32 = 32;
    pub const CONNECT_REFCOUNT: u32 = 64;
    pub const CONNECT_REDIRECT: u32 = 128;
    pub const CONNECT_LOCALDRIVE: u32 = 256;
    pub const CONNECT_CURRENT_MEDIA: u32 = 512;
    pub const CONNECT_DEFERRED: u32 = 1024;
    pub const CONNECT_RESERVED: u32 = 4278190080;
    pub const CONNECT_COMMANDLINE: u32 = 2048;
    pub const CONNECT_CMD_SAVECRED: u32 = 4096;
    pub const CONNECT_CRED_RESET: u32 = 8192;
    pub const CONNECT_REQUIRE_INTEGRITY: u32 = 16384;
    pub const CONNECT_REQUIRE_PRIVACY: u32 = 32768;
    pub const CONNECT_WRITE_THROUGH_SEMANTICS: u32 = 65536;
    pub const CONNECT_COMPRESS_NETWORK_TRAFFIC: u32 = 131072;
    pub const CONNDLG_RO_PATH: u32 = 1;
    pub const CONNDLG_CONN_POINT: u32 = 2;
    pub const CONNDLG_USE_MRU: u32 = 4;
    pub const CONNDLG_HIDE_BOX: u32 = 8;
    pub const CONNDLG_PERSIST: u32 = 16;
    pub const CONNDLG_NOT_PERSIST: u32 = 32;
    pub const DISC_UPDATE_PROFILE: u32 = 1;
    pub const DISC_NO_FORCE: u32 = 64;
    pub const UNIVERSAL_NAME_INFO_LEVEL: u32 = 1;
    pub const REMOTE_NAME_INFO_LEVEL: u32 = 2;
    pub const WNFMT_MULTILINE: u32 = 1;
    pub const WNFMT_ABBREVIATED: u32 = 2;
    pub const WNFMT_INENUM: u32 = 16;
    pub const WNFMT_CONNECTION: u32 = 32;
    pub const NETINFO_DLL16: u32 = 1;
    pub const NETINFO_DISKRED: u32 = 4;
    pub const NETINFO_PRINTERRED: u32 = 8;
    pub const WN_SUCCESS: u32 = 0;
    pub const WN_NO_ERROR: u32 = 0;
    pub const WN_NOT_SUPPORTED: u32 = 50;
    pub const WN_CANCEL: u32 = 1223;
    pub const WN_RETRY: u32 = 1237;
    pub const WN_NET_ERROR: u32 = 59;
    pub const WN_MORE_DATA: u32 = 234;
    pub const WN_BAD_POINTER: u32 = 487;
    pub const WN_BAD_VALUE: u32 = 87;
    pub const WN_BAD_USER: u32 = 2202;
    pub const WN_BAD_PASSWORD: u32 = 86;
    pub const WN_ACCESS_DENIED: u32 = 5;
    pub const WN_FUNCTION_BUSY: u32 = 170;
    pub const WN_WINDOWS_ERROR: u32 = 59;
    pub const WN_OUT_OF_MEMORY: u32 = 8;
    pub const WN_NO_NETWORK: u32 = 1222;
    pub const WN_EXTENDED_ERROR: u32 = 1208;
    pub const WN_BAD_LEVEL: u32 = 124;
    pub const WN_BAD_HANDLE: u32 = 6;
    pub const WN_NOT_INITIALIZING: u32 = 1247;
    pub const WN_NO_MORE_DEVICES: u32 = 1248;
    pub const WN_NOT_CONNECTED: u32 = 2250;
    pub const WN_OPEN_FILES: u32 = 2401;
    pub const WN_DEVICE_IN_USE: u32 = 2404;
    pub const WN_BAD_NETNAME: u32 = 67;
    pub const WN_BAD_LOCALNAME: u32 = 1200;
    pub const WN_ALREADY_CONNECTED: u32 = 85;
    pub const WN_DEVICE_ERROR: u32 = 31;
    pub const WN_CONNECTION_CLOSED: u32 = 1201;
    pub const WN_NO_NET_OR_BAD_PATH: u32 = 1203;
    pub const WN_BAD_PROVIDER: u32 = 1204;
    pub const WN_CANNOT_OPEN_PROFILE: u32 = 1205;
    pub const WN_BAD_PROFILE: u32 = 1206;
    pub const WN_BAD_DEV_TYPE: u32 = 66;
    pub const WN_DEVICE_ALREADY_REMEMBERED: u32 = 1202;
    pub const WN_CONNECTED_OTHER_PASSWORD: u32 = 2108;
    pub const WN_CONNECTED_OTHER_PASSWORD_DEFAULT: u32 = 2109;
    pub const WN_NO_MORE_ENTRIES: u32 = 259;
    pub const WN_NOT_CONTAINER: u32 = 1207;
    pub const WN_NOT_AUTHENTICATED: u32 = 1244;
    pub const WN_NOT_LOGGED_ON: u32 = 1245;
    pub const WN_NOT_VALIDATED: u32 = 1311;
    pub const WNCON_FORNETCARD: u32 = 1;
    pub const WNCON_NOTROUTED: u32 = 2;
    pub const WNCON_SLOWLINK: u32 = 4;
    pub const WNCON_DYNAMIC: u32 = 8;
    pub const CDERR_DIALOGFAILURE: u32 = 65535;
    pub const CDERR_GENERALCODES: u32 = 0;
    pub const CDERR_STRUCTSIZE: u32 = 1;
    pub const CDERR_INITIALIZATION: u32 = 2;
    pub const CDERR_NOTEMPLATE: u32 = 3;
    pub const CDERR_NOHINSTANCE: u32 = 4;
    pub const CDERR_LOADSTRFAILURE: u32 = 5;
    pub const CDERR_FINDRESFAILURE: u32 = 6;
    pub const CDERR_LOADRESFAILURE: u32 = 7;
    pub const CDERR_LOCKRESFAILURE: u32 = 8;
    pub const CDERR_MEMALLOCFAILURE: u32 = 9;
    pub const CDERR_MEMLOCKFAILURE: u32 = 10;
    pub const CDERR_NOHOOK: u32 = 11;
    pub const CDERR_REGISTERMSGFAIL: u32 = 12;
    pub const PDERR_PRINTERCODES: u32 = 4096;
    pub const PDERR_SETUPFAILURE: u32 = 4097;
    pub const PDERR_PARSEFAILURE: u32 = 4098;
    pub const PDERR_RETDEFFAILURE: u32 = 4099;
    pub const PDERR_LOADDRVFAILURE: u32 = 4100;
    pub const PDERR_GETDEVMODEFAIL: u32 = 4101;
    pub const PDERR_INITFAILURE: u32 = 4102;
    pub const PDERR_NODEVICES: u32 = 4103;
    pub const PDERR_NODEFAULTPRN: u32 = 4104;
    pub const PDERR_DNDMMISMATCH: u32 = 4105;
    pub const PDERR_CREATEICFAILURE: u32 = 4106;
    pub const PDERR_PRINTERNOTFOUND: u32 = 4107;
    pub const PDERR_DEFAULTDIFFERENT: u32 = 4108;
    pub const CFERR_CHOOSEFONTCODES: u32 = 8192;
    pub const CFERR_NOFONTS: u32 = 8193;
    pub const CFERR_MAXLESSTHANMIN: u32 = 8194;
    pub const FNERR_FILENAMECODES: u32 = 12288;
    pub const FNERR_SUBCLASSFAILURE: u32 = 12289;
    pub const FNERR_INVALIDFILENAME: u32 = 12290;
    pub const FNERR_BUFFERTOOSMALL: u32 = 12291;
    pub const FRERR_FINDREPLACECODES: u32 = 16384;
    pub const FRERR_BUFFERLENGTHZERO: u32 = 16385;
    pub const CCERR_CHOOSECOLORCODES: u32 = 20480;
    pub const WM_DDE_FIRST: u32 = 992;
    pub const WM_DDE_INITIATE: u32 = 992;
    pub const WM_DDE_TERMINATE: u32 = 993;
    pub const WM_DDE_ADVISE: u32 = 994;
    pub const WM_DDE_UNADVISE: u32 = 995;
    pub const WM_DDE_ACK: u32 = 996;
    pub const WM_DDE_DATA: u32 = 997;
    pub const WM_DDE_REQUEST: u32 = 998;
    pub const WM_DDE_POKE: u32 = 999;
    pub const WM_DDE_EXECUTE: u32 = 1000;
    pub const WM_DDE_LAST: u32 = 1000;
    pub const XST_NULL: u32 = 0;
    pub const XST_INCOMPLETE: u32 = 1;
    pub const XST_CONNECTED: u32 = 2;
    pub const XST_INIT1: u32 = 3;
    pub const XST_INIT2: u32 = 4;
    pub const XST_REQSENT: u32 = 5;
    pub const XST_DATARCVD: u32 = 6;
    pub const XST_POKESENT: u32 = 7;
    pub const XST_POKEACKRCVD: u32 = 8;
    pub const XST_EXECSENT: u32 = 9;
    pub const XST_EXECACKRCVD: u32 = 10;
    pub const XST_ADVSENT: u32 = 11;
    pub const XST_UNADVSENT: u32 = 12;
    pub const XST_ADVACKRCVD: u32 = 13;
    pub const XST_UNADVACKRCVD: u32 = 14;
    pub const XST_ADVDATASENT: u32 = 15;
    pub const XST_ADVDATAACKRCVD: u32 = 16;
    pub const CADV_LATEACK: u32 = 65535;
    pub const ST_CONNECTED: u32 = 1;
    pub const ST_ADVISE: u32 = 2;
    pub const ST_ISLOCAL: u32 = 4;
    pub const ST_BLOCKED: u32 = 8;
    pub const ST_CLIENT: u32 = 16;
    pub const ST_TERMINATED: u32 = 32;
    pub const ST_INLIST: u32 = 64;
    pub const ST_BLOCKNEXT: u32 = 128;
    pub const ST_ISSELF: u32 = 256;
    pub const DDE_FACK: u32 = 32768;
    pub const DDE_FBUSY: u32 = 16384;
    pub const DDE_FDEFERUPD: u32 = 16384;
    pub const DDE_FACKREQ: u32 = 32768;
    pub const DDE_FRELEASE: u32 = 8192;
    pub const DDE_FREQUESTED: u32 = 4096;
    pub const DDE_FAPPSTATUS: u32 = 255;
    pub const DDE_FNOTPROCESSED: u32 = 0;
    pub const DDE_FACKRESERVED: i32 = -49408;
    pub const DDE_FADVRESERVED: i32 = -49153;
    pub const DDE_FDATRESERVED: i32 = -45057;
    pub const DDE_FPOKRESERVED: i32 = -8193;
    pub const MSGF_DDEMGR: u32 = 32769;
    pub const CP_WINANSI: u32 = 1004;
    pub const CP_WINUNICODE: u32 = 1200;
    pub const CP_WINNEUTRAL: u32 = 1004;
    pub const XTYPF_NOBLOCK: u32 = 2;
    pub const XTYPF_NODATA: u32 = 4;
    pub const XTYPF_ACKREQ: u32 = 8;
    pub const XCLASS_MASK: u32 = 64512;
    pub const XCLASS_BOOL: u32 = 4096;
    pub const XCLASS_DATA: u32 = 8192;
    pub const XCLASS_FLAGS: u32 = 16384;
    pub const XCLASS_NOTIFICATION: u32 = 32768;
    pub const XTYP_ERROR: u32 = 32770;
    pub const XTYP_ADVDATA: u32 = 16400;
    pub const XTYP_ADVREQ: u32 = 8226;
    pub const XTYP_ADVSTART: u32 = 4144;
    pub const XTYP_ADVSTOP: u32 = 32832;
    pub const XTYP_EXECUTE: u32 = 16464;
    pub const XTYP_CONNECT: u32 = 4194;
    pub const XTYP_CONNECT_CONFIRM: u32 = 32882;
    pub const XTYP_XACT_COMPLETE: u32 = 32896;
    pub const XTYP_POKE: u32 = 16528;
    pub const XTYP_REGISTER: u32 = 32930;
    pub const XTYP_REQUEST: u32 = 8368;
    pub const XTYP_DISCONNECT: u32 = 32962;
    pub const XTYP_UNREGISTER: u32 = 32978;
    pub const XTYP_WILDCONNECT: u32 = 8418;
    pub const XTYP_MASK: u32 = 240;
    pub const XTYP_SHIFT: u32 = 4;
    pub const TIMEOUT_ASYNC: u32 = 4294967295;
    pub const QID_SYNC: u32 = 4294967295;
    pub const SZDDESYS_TOPIC: &[u8; 7usize] = b"System\0";
    pub const SZDDESYS_ITEM_TOPICS: &[u8; 7usize] = b"Topics\0";
    pub const SZDDESYS_ITEM_SYSITEMS: &[u8; 9usize] = b"SysItems\0";
    pub const SZDDESYS_ITEM_RTNMSG: &[u8; 14usize] = b"ReturnMessage\0";
    pub const SZDDESYS_ITEM_STATUS: &[u8; 7usize] = b"Status\0";
    pub const SZDDESYS_ITEM_FORMATS: &[u8; 8usize] = b"Formats\0";
    pub const SZDDESYS_ITEM_HELP: &[u8; 5usize] = b"Help\0";
    pub const SZDDE_ITEM_ITEMLIST: &[u8; 14usize] = b"TopicItemList\0";
    pub const CBF_FAIL_SELFCONNECTIONS: u32 = 4096;
    pub const CBF_FAIL_CONNECTIONS: u32 = 8192;
    pub const CBF_FAIL_ADVISES: u32 = 16384;
    pub const CBF_FAIL_EXECUTES: u32 = 32768;
    pub const CBF_FAIL_POKES: u32 = 65536;
    pub const CBF_FAIL_REQUESTS: u32 = 131072;
    pub const CBF_FAIL_ALLSVRXACTIONS: u32 = 258048;
    pub const CBF_SKIP_CONNECT_CONFIRMS: u32 = 262144;
    pub const CBF_SKIP_REGISTRATIONS: u32 = 524288;
    pub const CBF_SKIP_UNREGISTRATIONS: u32 = 1048576;
    pub const CBF_SKIP_DISCONNECTS: u32 = 2097152;
    pub const CBF_SKIP_ALLNOTIFICATIONS: u32 = 3932160;
    pub const APPCMD_CLIENTONLY: u32 = 16;
    pub const APPCMD_FILTERINITS: u32 = 32;
    pub const APPCMD_MASK: u32 = 4080;
    pub const APPCLASS_STANDARD: u32 = 0;
    pub const APPCLASS_MASK: u32 = 15;
    pub const EC_ENABLEALL: u32 = 0;
    pub const EC_ENABLEONE: u32 = 128;
    pub const EC_DISABLE: u32 = 8;
    pub const EC_QUERYWAITING: u32 = 2;
    pub const DNS_REGISTER: u32 = 1;
    pub const DNS_UNREGISTER: u32 = 2;
    pub const DNS_FILTERON: u32 = 4;
    pub const DNS_FILTEROFF: u32 = 8;
    pub const HDATA_APPOWNED: u32 = 1;
    pub const DMLERR_NO_ERROR: u32 = 0;
    pub const DMLERR_FIRST: u32 = 16384;
    pub const DMLERR_ADVACKTIMEOUT: u32 = 16384;
    pub const DMLERR_BUSY: u32 = 16385;
    pub const DMLERR_DATAACKTIMEOUT: u32 = 16386;
    pub const DMLERR_DLL_NOT_INITIALIZED: u32 = 16387;
    pub const DMLERR_DLL_USAGE: u32 = 16388;
    pub const DMLERR_EXECACKTIMEOUT: u32 = 16389;
    pub const DMLERR_INVALIDPARAMETER: u32 = 16390;
    pub const DMLERR_LOW_MEMORY: u32 = 16391;
    pub const DMLERR_MEMORY_ERROR: u32 = 16392;
    pub const DMLERR_NOTPROCESSED: u32 = 16393;
    pub const DMLERR_NO_CONV_ESTABLISHED: u32 = 16394;
    pub const DMLERR_POKEACKTIMEOUT: u32 = 16395;
    pub const DMLERR_POSTMSG_FAILED: u32 = 16396;
    pub const DMLERR_REENTRANCY: u32 = 16397;
    pub const DMLERR_SERVER_DIED: u32 = 16398;
    pub const DMLERR_SYS_ERROR: u32 = 16399;
    pub const DMLERR_UNADVACKTIMEOUT: u32 = 16400;
    pub const DMLERR_UNFOUND_QUEUE_ID: u32 = 16401;
    pub const DMLERR_LAST: u32 = 16401;
    pub const MH_CREATE: u32 = 1;
    pub const MH_KEEP: u32 = 2;
    pub const MH_DELETE: u32 = 3;
    pub const MH_CLEANUP: u32 = 4;
    pub const MAX_MONITORS: u32 = 4;
    pub const APPCLASS_MONITOR: u32 = 1;
    pub const XTYP_MONITOR: u32 = 33010;
    pub const MF_HSZ_INFO: u32 = 16777216;
    pub const MF_SENDMSGS: u32 = 33554432;
    pub const MF_POSTMSGS: u32 = 67108864;
    pub const MF_CALLBACKS: u32 = 134217728;
    pub const MF_ERRORS: u32 = 268435456;
    pub const MF_LINKS: u32 = 536870912;
    pub const MF_CONV: u32 = 1073741824;
    pub const MF_MASK: u32 = 4278190080;
    pub const ctlFirst: u32 = 1024;
    pub const ctlLast: u32 = 1279;
    pub const psh1: u32 = 1024;
    pub const psh2: u32 = 1025;
    pub const psh3: u32 = 1026;
    pub const psh4: u32 = 1027;
    pub const psh5: u32 = 1028;
    pub const psh6: u32 = 1029;
    pub const psh7: u32 = 1030;
    pub const psh8: u32 = 1031;
    pub const psh9: u32 = 1032;
    pub const psh10: u32 = 1033;
    pub const psh11: u32 = 1034;
    pub const psh12: u32 = 1035;
    pub const psh13: u32 = 1036;
    pub const psh14: u32 = 1037;
    pub const psh15: u32 = 1038;
    pub const pshHelp: u32 = 1038;
    pub const psh16: u32 = 1039;
    pub const chx1: u32 = 1040;
    pub const chx2: u32 = 1041;
    pub const chx3: u32 = 1042;
    pub const chx4: u32 = 1043;
    pub const chx5: u32 = 1044;
    pub const chx6: u32 = 1045;
    pub const chx7: u32 = 1046;
    pub const chx8: u32 = 1047;
    pub const chx9: u32 = 1048;
    pub const chx10: u32 = 1049;
    pub const chx11: u32 = 1050;
    pub const chx12: u32 = 1051;
    pub const chx13: u32 = 1052;
    pub const chx14: u32 = 1053;
    pub const chx15: u32 = 1054;
    pub const chx16: u32 = 1055;
    pub const rad1: u32 = 1056;
    pub const rad2: u32 = 1057;
    pub const rad3: u32 = 1058;
    pub const rad4: u32 = 1059;
    pub const rad5: u32 = 1060;
    pub const rad6: u32 = 1061;
    pub const rad7: u32 = 1062;
    pub const rad8: u32 = 1063;
    pub const rad9: u32 = 1064;
    pub const rad10: u32 = 1065;
    pub const rad11: u32 = 1066;
    pub const rad12: u32 = 1067;
    pub const rad13: u32 = 1068;
    pub const rad14: u32 = 1069;
    pub const rad15: u32 = 1070;
    pub const rad16: u32 = 1071;
    pub const grp1: u32 = 1072;
    pub const grp2: u32 = 1073;
    pub const grp3: u32 = 1074;
    pub const grp4: u32 = 1075;
    pub const frm1: u32 = 1076;
    pub const frm2: u32 = 1077;
    pub const frm3: u32 = 1078;
    pub const frm4: u32 = 1079;
    pub const rct1: u32 = 1080;
    pub const rct2: u32 = 1081;
    pub const rct3: u32 = 1082;
    pub const rct4: u32 = 1083;
    pub const ico1: u32 = 1084;
    pub const ico2: u32 = 1085;
    pub const ico3: u32 = 1086;
    pub const ico4: u32 = 1087;
    pub const stc1: u32 = 1088;
    pub const stc2: u32 = 1089;
    pub const stc3: u32 = 1090;
    pub const stc4: u32 = 1091;
    pub const stc5: u32 = 1092;
    pub const stc6: u32 = 1093;
    pub const stc7: u32 = 1094;
    pub const stc8: u32 = 1095;
    pub const stc9: u32 = 1096;
    pub const stc10: u32 = 1097;
    pub const stc11: u32 = 1098;
    pub const stc12: u32 = 1099;
    pub const stc13: u32 = 1100;
    pub const stc14: u32 = 1101;
    pub const stc15: u32 = 1102;
    pub const stc16: u32 = 1103;
    pub const stc17: u32 = 1104;
    pub const stc18: u32 = 1105;
    pub const stc19: u32 = 1106;
    pub const stc20: u32 = 1107;
    pub const stc21: u32 = 1108;
    pub const stc22: u32 = 1109;
    pub const stc23: u32 = 1110;
    pub const stc24: u32 = 1111;
    pub const stc25: u32 = 1112;
    pub const stc26: u32 = 1113;
    pub const stc27: u32 = 1114;
    pub const stc28: u32 = 1115;
    pub const stc29: u32 = 1116;
    pub const stc30: u32 = 1117;
    pub const stc31: u32 = 1118;
    pub const stc32: u32 = 1119;
    pub const lst1: u32 = 1120;
    pub const lst2: u32 = 1121;
    pub const lst3: u32 = 1122;
    pub const lst4: u32 = 1123;
    pub const lst5: u32 = 1124;
    pub const lst6: u32 = 1125;
    pub const lst7: u32 = 1126;
    pub const lst8: u32 = 1127;
    pub const lst9: u32 = 1128;
    pub const lst10: u32 = 1129;
    pub const lst11: u32 = 1130;
    pub const lst12: u32 = 1131;
    pub const lst13: u32 = 1132;
    pub const lst14: u32 = 1133;
    pub const lst15: u32 = 1134;
    pub const lst16: u32 = 1135;
    pub const cmb1: u32 = 1136;
    pub const cmb2: u32 = 1137;
    pub const cmb3: u32 = 1138;
    pub const cmb4: u32 = 1139;
    pub const cmb5: u32 = 1140;
    pub const cmb6: u32 = 1141;
    pub const cmb7: u32 = 1142;
    pub const cmb8: u32 = 1143;
    pub const cmb9: u32 = 1144;
    pub const cmb10: u32 = 1145;
    pub const cmb11: u32 = 1146;
    pub const cmb12: u32 = 1147;
    pub const cmb13: u32 = 1148;
    pub const cmb14: u32 = 1149;
    pub const cmb15: u32 = 1150;
    pub const cmb16: u32 = 1151;
    pub const edt1: u32 = 1152;
    pub const edt2: u32 = 1153;
    pub const edt3: u32 = 1154;
    pub const edt4: u32 = 1155;
    pub const edt5: u32 = 1156;
    pub const edt6: u32 = 1157;
    pub const edt7: u32 = 1158;
    pub const edt8: u32 = 1159;
    pub const edt9: u32 = 1160;
    pub const edt10: u32 = 1161;
    pub const edt11: u32 = 1162;
    pub const edt12: u32 = 1163;
    pub const edt13: u32 = 1164;
    pub const edt14: u32 = 1165;
    pub const edt15: u32 = 1166;
    pub const edt16: u32 = 1167;
    pub const scr1: u32 = 1168;
    pub const scr2: u32 = 1169;
    pub const scr3: u32 = 1170;
    pub const scr4: u32 = 1171;
    pub const scr5: u32 = 1172;
    pub const scr6: u32 = 1173;
    pub const scr7: u32 = 1174;
    pub const scr8: u32 = 1175;
    pub const ctl1: u32 = 1184;
    pub const FILEOPENORD: u32 = 1536;
    pub const MULTIFILEOPENORD: u32 = 1537;
    pub const PRINTDLGORD: u32 = 1538;
    pub const PRNSETUPDLGORD: u32 = 1539;
    pub const FINDDLGORD: u32 = 1540;
    pub const REPLACEDLGORD: u32 = 1541;
    pub const FONTDLGORD: u32 = 1542;
    pub const FORMATDLGORD31: u32 = 1543;
    pub const FORMATDLGORD30: u32 = 1544;
    pub const RUNDLGORD: u32 = 1545;
    pub const PAGESETUPDLGORD: u32 = 1546;
    pub const NEWFILEOPENORD: u32 = 1547;
    pub const PRINTDLGEXORD: u32 = 1549;
    pub const PAGESETUPDLGORDMOTIF: u32 = 1550;
    pub const COLORMGMTDLGORD: u32 = 1551;
    pub const NEWFILEOPENV2ORD: u32 = 1552;
    pub const NEWFILEOPENV3ORD: u32 = 1553;
    pub const NEWFORMATDLGWITHLINK: u32 = 1591;
    pub const IDC_MANAGE_LINK: u32 = 1592;
    pub const LZERROR_BADINHANDLE: i32 = -1;
    pub const LZERROR_BADOUTHANDLE: i32 = -2;
    pub const LZERROR_READ: i32 = -3;
    pub const LZERROR_WRITE: i32 = -4;
    pub const LZERROR_GLOBALLOC: i32 = -5;
    pub const LZERROR_GLOBLOCK: i32 = -6;
    pub const LZERROR_BADVALUE: i32 = -7;
    pub const LZERROR_UNKNOWNALG: i32 = -8;
    pub const MAXPNAMELEN: u32 = 32;
    pub const MAXERRORLENGTH: u32 = 256;
    pub const MAX_JOYSTICKOEMVXDNAME: u32 = 260;
    pub const TIME_MS: u32 = 1;
    pub const TIME_SAMPLES: u32 = 2;
    pub const TIME_BYTES: u32 = 4;
    pub const TIME_SMPTE: u32 = 8;
    pub const TIME_MIDI: u32 = 16;
    pub const TIME_TICKS: u32 = 32;
    pub const MM_JOY1MOVE: u32 = 928;
    pub const MM_JOY2MOVE: u32 = 929;
    pub const MM_JOY1ZMOVE: u32 = 930;
    pub const MM_JOY2ZMOVE: u32 = 931;
    pub const MM_JOY1BUTTONDOWN: u32 = 949;
    pub const MM_JOY2BUTTONDOWN: u32 = 950;
    pub const MM_JOY1BUTTONUP: u32 = 951;
    pub const MM_JOY2BUTTONUP: u32 = 952;
    pub const MM_MCINOTIFY: u32 = 953;
    pub const MM_WOM_OPEN: u32 = 955;
    pub const MM_WOM_CLOSE: u32 = 956;
    pub const MM_WOM_DONE: u32 = 957;
    pub const MM_WIM_OPEN: u32 = 958;
    pub const MM_WIM_CLOSE: u32 = 959;
    pub const MM_WIM_DATA: u32 = 960;
    pub const MM_MIM_OPEN: u32 = 961;
    pub const MM_MIM_CLOSE: u32 = 962;
    pub const MM_MIM_DATA: u32 = 963;
    pub const MM_MIM_LONGDATA: u32 = 964;
    pub const MM_MIM_ERROR: u32 = 965;
    pub const MM_MIM_LONGERROR: u32 = 966;
    pub const MM_MOM_OPEN: u32 = 967;
    pub const MM_MOM_CLOSE: u32 = 968;
    pub const MM_MOM_DONE: u32 = 969;
    pub const MM_DRVM_OPEN: u32 = 976;
    pub const MM_DRVM_CLOSE: u32 = 977;
    pub const MM_DRVM_DATA: u32 = 978;
    pub const MM_DRVM_ERROR: u32 = 979;
    pub const MM_STREAM_OPEN: u32 = 980;
    pub const MM_STREAM_CLOSE: u32 = 981;
    pub const MM_STREAM_DONE: u32 = 982;
    pub const MM_STREAM_ERROR: u32 = 983;
    pub const MM_MOM_POSITIONCB: u32 = 970;
    pub const MM_MCISIGNAL: u32 = 971;
    pub const MM_MIM_MOREDATA: u32 = 972;
    pub const MM_MIXM_LINE_CHANGE: u32 = 976;
    pub const MM_MIXM_CONTROL_CHANGE: u32 = 977;
    pub const MMSYSERR_BASE: u32 = 0;
    pub const WAVERR_BASE: u32 = 32;
    pub const MIDIERR_BASE: u32 = 64;
    pub const TIMERR_BASE: u32 = 96;
    pub const JOYERR_BASE: u32 = 160;
    pub const MCIERR_BASE: u32 = 256;
    pub const MIXERR_BASE: u32 = 1024;
    pub const MCI_STRING_OFFSET: u32 = 512;
    pub const MCI_VD_OFFSET: u32 = 1024;
    pub const MCI_CD_OFFSET: u32 = 1088;
    pub const MCI_WAVE_OFFSET: u32 = 1152;
    pub const MCI_SEQ_OFFSET: u32 = 1216;
    pub const MMSYSERR_NOERROR: u32 = 0;
    pub const MMSYSERR_ERROR: u32 = 1;
    pub const MMSYSERR_BADDEVICEID: u32 = 2;
    pub const MMSYSERR_NOTENABLED: u32 = 3;
    pub const MMSYSERR_ALLOCATED: u32 = 4;
    pub const MMSYSERR_INVALHANDLE: u32 = 5;
    pub const MMSYSERR_NODRIVER: u32 = 6;
    pub const MMSYSERR_NOMEM: u32 = 7;
    pub const MMSYSERR_NOTSUPPORTED: u32 = 8;
    pub const MMSYSERR_BADERRNUM: u32 = 9;
    pub const MMSYSERR_INVALFLAG: u32 = 10;
    pub const MMSYSERR_INVALPARAM: u32 = 11;
    pub const MMSYSERR_HANDLEBUSY: u32 = 12;
    pub const MMSYSERR_INVALIDALIAS: u32 = 13;
    pub const MMSYSERR_BADDB: u32 = 14;
    pub const MMSYSERR_KEYNOTFOUND: u32 = 15;
    pub const MMSYSERR_READERROR: u32 = 16;
    pub const MMSYSERR_WRITEERROR: u32 = 17;
    pub const MMSYSERR_DELETEERROR: u32 = 18;
    pub const MMSYSERR_VALNOTFOUND: u32 = 19;
    pub const MMSYSERR_NODRIVERCB: u32 = 20;
    pub const MMSYSERR_MOREDATA: u32 = 21;
    pub const MMSYSERR_LASTERROR: u32 = 21;
    pub const CALLBACK_TYPEMASK: u32 = 458752;
    pub const CALLBACK_NULL: u32 = 0;
    pub const CALLBACK_WINDOW: u32 = 65536;
    pub const CALLBACK_TASK: u32 = 131072;
    pub const CALLBACK_FUNCTION: u32 = 196608;
    pub const CALLBACK_THREAD: u32 = 131072;
    pub const CALLBACK_EVENT: u32 = 327680;
    pub const MCIERR_INVALID_DEVICE_ID: u32 = 257;
    pub const MCIERR_UNRECOGNIZED_KEYWORD: u32 = 259;
    pub const MCIERR_UNRECOGNIZED_COMMAND: u32 = 261;
    pub const MCIERR_HARDWARE: u32 = 262;
    pub const MCIERR_INVALID_DEVICE_NAME: u32 = 263;
    pub const MCIERR_OUT_OF_MEMORY: u32 = 264;
    pub const MCIERR_DEVICE_OPEN: u32 = 265;
    pub const MCIERR_CANNOT_LOAD_DRIVER: u32 = 266;
    pub const MCIERR_MISSING_COMMAND_STRING: u32 = 267;
    pub const MCIERR_PARAM_OVERFLOW: u32 = 268;
    pub const MCIERR_MISSING_STRING_ARGUMENT: u32 = 269;
    pub const MCIERR_BAD_INTEGER: u32 = 270;
    pub const MCIERR_PARSER_INTERNAL: u32 = 271;
    pub const MCIERR_DRIVER_INTERNAL: u32 = 272;
    pub const MCIERR_MISSING_PARAMETER: u32 = 273;
    pub const MCIERR_UNSUPPORTED_FUNCTION: u32 = 274;
    pub const MCIERR_FILE_NOT_FOUND: u32 = 275;
    pub const MCIERR_DEVICE_NOT_READY: u32 = 276;
    pub const MCIERR_INTERNAL: u32 = 277;
    pub const MCIERR_DRIVER: u32 = 278;
    pub const MCIERR_CANNOT_USE_ALL: u32 = 279;
    pub const MCIERR_MULTIPLE: u32 = 280;
    pub const MCIERR_EXTENSION_NOT_FOUND: u32 = 281;
    pub const MCIERR_OUTOFRANGE: u32 = 282;
    pub const MCIERR_FLAGS_NOT_COMPATIBLE: u32 = 284;
    pub const MCIERR_FILE_NOT_SAVED: u32 = 286;
    pub const MCIERR_DEVICE_TYPE_REQUIRED: u32 = 287;
    pub const MCIERR_DEVICE_LOCKED: u32 = 288;
    pub const MCIERR_DUPLICATE_ALIAS: u32 = 289;
    pub const MCIERR_BAD_CONSTANT: u32 = 290;
    pub const MCIERR_MUST_USE_SHAREABLE: u32 = 291;
    pub const MCIERR_MISSING_DEVICE_NAME: u32 = 292;
    pub const MCIERR_BAD_TIME_FORMAT: u32 = 293;
    pub const MCIERR_NO_CLOSING_QUOTE: u32 = 294;
    pub const MCIERR_DUPLICATE_FLAGS: u32 = 295;
    pub const MCIERR_INVALID_FILE: u32 = 296;
    pub const MCIERR_NULL_PARAMETER_BLOCK: u32 = 297;
    pub const MCIERR_UNNAMED_RESOURCE: u32 = 298;
    pub const MCIERR_NEW_REQUIRES_ALIAS: u32 = 299;
    pub const MCIERR_NOTIFY_ON_AUTO_OPEN: u32 = 300;
    pub const MCIERR_NO_ELEMENT_ALLOWED: u32 = 301;
    pub const MCIERR_NONAPPLICABLE_FUNCTION: u32 = 302;
    pub const MCIERR_ILLEGAL_FOR_AUTO_OPEN: u32 = 303;
    pub const MCIERR_FILENAME_REQUIRED: u32 = 304;
    pub const MCIERR_EXTRA_CHARACTERS: u32 = 305;
    pub const MCIERR_DEVICE_NOT_INSTALLED: u32 = 306;
    pub const MCIERR_GET_CD: u32 = 307;
    pub const MCIERR_SET_CD: u32 = 308;
    pub const MCIERR_SET_DRIVE: u32 = 309;
    pub const MCIERR_DEVICE_LENGTH: u32 = 310;
    pub const MCIERR_DEVICE_ORD_LENGTH: u32 = 311;
    pub const MCIERR_NO_INTEGER: u32 = 312;
    pub const MCIERR_WAVE_OUTPUTSINUSE: u32 = 320;
    pub const MCIERR_WAVE_SETOUTPUTINUSE: u32 = 321;
    pub const MCIERR_WAVE_INPUTSINUSE: u32 = 322;
    pub const MCIERR_WAVE_SETINPUTINUSE: u32 = 323;
    pub const MCIERR_WAVE_OUTPUTUNSPECIFIED: u32 = 324;
    pub const MCIERR_WAVE_INPUTUNSPECIFIED: u32 = 325;
    pub const MCIERR_WAVE_OUTPUTSUNSUITABLE: u32 = 326;
    pub const MCIERR_WAVE_SETOUTPUTUNSUITABLE: u32 = 327;
    pub const MCIERR_WAVE_INPUTSUNSUITABLE: u32 = 328;
    pub const MCIERR_WAVE_SETINPUTUNSUITABLE: u32 = 329;
    pub const MCIERR_SEQ_DIV_INCOMPATIBLE: u32 = 336;
    pub const MCIERR_SEQ_PORT_INUSE: u32 = 337;
    pub const MCIERR_SEQ_PORT_NONEXISTENT: u32 = 338;
    pub const MCIERR_SEQ_PORT_MAPNODEVICE: u32 = 339;
    pub const MCIERR_SEQ_PORT_MISCERROR: u32 = 340;
    pub const MCIERR_SEQ_TIMER: u32 = 341;
    pub const MCIERR_SEQ_PORTUNSPECIFIED: u32 = 342;
    pub const MCIERR_SEQ_NOMIDIPRESENT: u32 = 343;
    pub const MCIERR_NO_WINDOW: u32 = 346;
    pub const MCIERR_CREATEWINDOW: u32 = 347;
    pub const MCIERR_FILE_READ: u32 = 348;
    pub const MCIERR_FILE_WRITE: u32 = 349;
    pub const MCIERR_NO_IDENTITY: u32 = 350;
    pub const MCIERR_CUSTOM_DRIVER_BASE: u32 = 512;
    pub const MCI_OPEN: u32 = 2051;
    pub const MCI_CLOSE: u32 = 2052;
    pub const MCI_ESCAPE: u32 = 2053;
    pub const MCI_PLAY: u32 = 2054;
    pub const MCI_SEEK: u32 = 2055;
    pub const MCI_STOP: u32 = 2056;
    pub const MCI_PAUSE: u32 = 2057;
    pub const MCI_INFO: u32 = 2058;
    pub const MCI_GETDEVCAPS: u32 = 2059;
    pub const MCI_SPIN: u32 = 2060;
    pub const MCI_SET: u32 = 2061;
    pub const MCI_STEP: u32 = 2062;
    pub const MCI_RECORD: u32 = 2063;
    pub const MCI_SYSINFO: u32 = 2064;
    pub const MCI_BREAK: u32 = 2065;
    pub const MCI_SAVE: u32 = 2067;
    pub const MCI_STATUS: u32 = 2068;
    pub const MCI_CUE: u32 = 2096;
    pub const MCI_REALIZE: u32 = 2112;
    pub const MCI_WINDOW: u32 = 2113;
    pub const MCI_PUT: u32 = 2114;
    pub const MCI_WHERE: u32 = 2115;
    pub const MCI_FREEZE: u32 = 2116;
    pub const MCI_UNFREEZE: u32 = 2117;
    pub const MCI_LOAD: u32 = 2128;
    pub const MCI_CUT: u32 = 2129;
    pub const MCI_COPY: u32 = 2130;
    pub const MCI_PASTE: u32 = 2131;
    pub const MCI_UPDATE: u32 = 2132;
    pub const MCI_RESUME: u32 = 2133;
    pub const MCI_DELETE: u32 = 2134;
    pub const MCI_LAST: u32 = 4095;
    pub const MCI_DEVTYPE_VCR: u32 = 513;
    pub const MCI_DEVTYPE_VIDEODISC: u32 = 514;
    pub const MCI_DEVTYPE_OVERLAY: u32 = 515;
    pub const MCI_DEVTYPE_CD_AUDIO: u32 = 516;
    pub const MCI_DEVTYPE_DAT: u32 = 517;
    pub const MCI_DEVTYPE_SCANNER: u32 = 518;
    pub const MCI_DEVTYPE_ANIMATION: u32 = 519;
    pub const MCI_DEVTYPE_DIGITAL_VIDEO: u32 = 520;
    pub const MCI_DEVTYPE_OTHER: u32 = 521;
    pub const MCI_DEVTYPE_WAVEFORM_AUDIO: u32 = 522;
    pub const MCI_DEVTYPE_SEQUENCER: u32 = 523;
    pub const MCI_DEVTYPE_FIRST: u32 = 513;
    pub const MCI_DEVTYPE_LAST: u32 = 523;
    pub const MCI_DEVTYPE_FIRST_USER: u32 = 4096;
    pub const MCI_MODE_NOT_READY: u32 = 524;
    pub const MCI_MODE_STOP: u32 = 525;
    pub const MCI_MODE_PLAY: u32 = 526;
    pub const MCI_MODE_RECORD: u32 = 527;
    pub const MCI_MODE_SEEK: u32 = 528;
    pub const MCI_MODE_PAUSE: u32 = 529;
    pub const MCI_MODE_OPEN: u32 = 530;
    pub const MCI_FORMAT_MILLISECONDS: u32 = 0;
    pub const MCI_FORMAT_HMS: u32 = 1;
    pub const MCI_FORMAT_MSF: u32 = 2;
    pub const MCI_FORMAT_FRAMES: u32 = 3;
    pub const MCI_FORMAT_SMPTE_24: u32 = 4;
    pub const MCI_FORMAT_SMPTE_25: u32 = 5;
    pub const MCI_FORMAT_SMPTE_30: u32 = 6;
    pub const MCI_FORMAT_SMPTE_30DROP: u32 = 7;
    pub const MCI_FORMAT_BYTES: u32 = 8;
    pub const MCI_FORMAT_SAMPLES: u32 = 9;
    pub const MCI_FORMAT_TMSF: u32 = 10;
    pub const MCI_NOTIFY_SUCCESSFUL: u32 = 1;
    pub const MCI_NOTIFY_SUPERSEDED: u32 = 2;
    pub const MCI_NOTIFY_ABORTED: u32 = 4;
    pub const MCI_NOTIFY_FAILURE: u32 = 8;
    pub const MCI_NOTIFY: u32 = 1;
    pub const MCI_WAIT: u32 = 2;
    pub const MCI_FROM: u32 = 4;
    pub const MCI_TO: u32 = 8;
    pub const MCI_TRACK: u32 = 16;
    pub const MCI_OPEN_SHAREABLE: u32 = 256;
    pub const MCI_OPEN_ELEMENT: u32 = 512;
    pub const MCI_OPEN_ALIAS: u32 = 1024;
    pub const MCI_OPEN_ELEMENT_ID: u32 = 2048;
    pub const MCI_OPEN_TYPE_ID: u32 = 4096;
    pub const MCI_OPEN_TYPE: u32 = 8192;
    pub const MCI_SEEK_TO_START: u32 = 256;
    pub const MCI_SEEK_TO_END: u32 = 512;
    pub const MCI_STATUS_ITEM: u32 = 256;
    pub const MCI_STATUS_START: u32 = 512;
    pub const MCI_STATUS_LENGTH: u32 = 1;
    pub const MCI_STATUS_POSITION: u32 = 2;
    pub const MCI_STATUS_NUMBER_OF_TRACKS: u32 = 3;
    pub const MCI_STATUS_MODE: u32 = 4;
    pub const MCI_STATUS_MEDIA_PRESENT: u32 = 5;
    pub const MCI_STATUS_TIME_FORMAT: u32 = 6;
    pub const MCI_STATUS_READY: u32 = 7;
    pub const MCI_STATUS_CURRENT_TRACK: u32 = 8;
    pub const MCI_INFO_PRODUCT: u32 = 256;
    pub const MCI_INFO_FILE: u32 = 512;
    pub const MCI_INFO_MEDIA_UPC: u32 = 1024;
    pub const MCI_INFO_MEDIA_IDENTITY: u32 = 2048;
    pub const MCI_INFO_NAME: u32 = 4096;
    pub const MCI_INFO_COPYRIGHT: u32 = 8192;
    pub const MCI_GETDEVCAPS_ITEM: u32 = 256;
    pub const MCI_GETDEVCAPS_CAN_RECORD: u32 = 1;
    pub const MCI_GETDEVCAPS_HAS_AUDIO: u32 = 2;
    pub const MCI_GETDEVCAPS_HAS_VIDEO: u32 = 3;
    pub const MCI_GETDEVCAPS_DEVICE_TYPE: u32 = 4;
    pub const MCI_GETDEVCAPS_USES_FILES: u32 = 5;
    pub const MCI_GETDEVCAPS_COMPOUND_DEVICE: u32 = 6;
    pub const MCI_GETDEVCAPS_CAN_EJECT: u32 = 7;
    pub const MCI_GETDEVCAPS_CAN_PLAY: u32 = 8;
    pub const MCI_GETDEVCAPS_CAN_SAVE: u32 = 9;
    pub const MCI_SYSINFO_QUANTITY: u32 = 256;
    pub const MCI_SYSINFO_OPEN: u32 = 512;
    pub const MCI_SYSINFO_NAME: u32 = 1024;
    pub const MCI_SYSINFO_INSTALLNAME: u32 = 2048;
    pub const MCI_SET_DOOR_OPEN: u32 = 256;
    pub const MCI_SET_DOOR_CLOSED: u32 = 512;
    pub const MCI_SET_TIME_FORMAT: u32 = 1024;
    pub const MCI_SET_AUDIO: u32 = 2048;
    pub const MCI_SET_VIDEO: u32 = 4096;
    pub const MCI_SET_ON: u32 = 8192;
    pub const MCI_SET_OFF: u32 = 16384;
    pub const MCI_SET_AUDIO_ALL: u32 = 0;
    pub const MCI_SET_AUDIO_LEFT: u32 = 1;
    pub const MCI_SET_AUDIO_RIGHT: u32 = 2;
    pub const MCI_BREAK_KEY: u32 = 256;
    pub const MCI_BREAK_HWND: u32 = 512;
    pub const MCI_BREAK_OFF: u32 = 1024;
    pub const MCI_RECORD_INSERT: u32 = 256;
    pub const MCI_RECORD_OVERWRITE: u32 = 512;
    pub const MCI_SAVE_FILE: u32 = 256;
    pub const MCI_LOAD_FILE: u32 = 256;
    pub const MCI_VD_MODE_PARK: u32 = 1025;
    pub const MCI_VD_MEDIA_CLV: u32 = 1026;
    pub const MCI_VD_MEDIA_CAV: u32 = 1027;
    pub const MCI_VD_MEDIA_OTHER: u32 = 1028;
    pub const MCI_VD_FORMAT_TRACK: u32 = 16385;
    pub const MCI_VD_PLAY_REVERSE: u32 = 65536;
    pub const MCI_VD_PLAY_FAST: u32 = 131072;
    pub const MCI_VD_PLAY_SPEED: u32 = 262144;
    pub const MCI_VD_PLAY_SCAN: u32 = 524288;
    pub const MCI_VD_PLAY_SLOW: u32 = 1048576;
    pub const MCI_VD_SEEK_REVERSE: u32 = 65536;
    pub const MCI_VD_STATUS_SPEED: u32 = 16386;
    pub const MCI_VD_STATUS_FORWARD: u32 = 16387;
    pub const MCI_VD_STATUS_MEDIA_TYPE: u32 = 16388;
    pub const MCI_VD_STATUS_SIDE: u32 = 16389;
    pub const MCI_VD_STATUS_DISC_SIZE: u32 = 16390;
    pub const MCI_VD_GETDEVCAPS_CLV: u32 = 65536;
    pub const MCI_VD_GETDEVCAPS_CAV: u32 = 131072;
    pub const MCI_VD_SPIN_UP: u32 = 65536;
    pub const MCI_VD_SPIN_DOWN: u32 = 131072;
    pub const MCI_VD_GETDEVCAPS_CAN_REVERSE: u32 = 16386;
    pub const MCI_VD_GETDEVCAPS_FAST_RATE: u32 = 16387;
    pub const MCI_VD_GETDEVCAPS_SLOW_RATE: u32 = 16388;
    pub const MCI_VD_GETDEVCAPS_NORMAL_RATE: u32 = 16389;
    pub const MCI_VD_STEP_FRAMES: u32 = 65536;
    pub const MCI_VD_STEP_REVERSE: u32 = 131072;
    pub const MCI_VD_ESCAPE_STRING: u32 = 256;
    pub const MCI_CDA_STATUS_TYPE_TRACK: u32 = 16385;
    pub const MCI_CDA_TRACK_AUDIO: u32 = 1088;
    pub const MCI_CDA_TRACK_OTHER: u32 = 1089;
    pub const MCI_WAVE_PCM: u32 = 1152;
    pub const MCI_WAVE_MAPPER: u32 = 1153;
    pub const MCI_WAVE_OPEN_BUFFER: u32 = 65536;
    pub const MCI_WAVE_SET_FORMATTAG: u32 = 65536;
    pub const MCI_WAVE_SET_CHANNELS: u32 = 131072;
    pub const MCI_WAVE_SET_SAMPLESPERSEC: u32 = 262144;
    pub const MCI_WAVE_SET_AVGBYTESPERSEC: u32 = 524288;
    pub const MCI_WAVE_SET_BLOCKALIGN: u32 = 1048576;
    pub const MCI_WAVE_SET_BITSPERSAMPLE: u32 = 2097152;
    pub const MCI_WAVE_INPUT: u32 = 4194304;
    pub const MCI_WAVE_OUTPUT: u32 = 8388608;
    pub const MCI_WAVE_STATUS_FORMATTAG: u32 = 16385;
    pub const MCI_WAVE_STATUS_CHANNELS: u32 = 16386;
    pub const MCI_WAVE_STATUS_SAMPLESPERSEC: u32 = 16387;
    pub const MCI_WAVE_STATUS_AVGBYTESPERSEC: u32 = 16388;
    pub const MCI_WAVE_STATUS_BLOCKALIGN: u32 = 16389;
    pub const MCI_WAVE_STATUS_BITSPERSAMPLE: u32 = 16390;
    pub const MCI_WAVE_STATUS_LEVEL: u32 = 16391;
    pub const MCI_WAVE_SET_ANYINPUT: u32 = 67108864;
    pub const MCI_WAVE_SET_ANYOUTPUT: u32 = 134217728;
    pub const MCI_WAVE_GETDEVCAPS_INPUTS: u32 = 16385;
    pub const MCI_WAVE_GETDEVCAPS_OUTPUTS: u32 = 16386;
    pub const MCI_SEQ_DIV_PPQN: u32 = 1216;
    pub const MCI_SEQ_DIV_SMPTE_24: u32 = 1217;
    pub const MCI_SEQ_DIV_SMPTE_25: u32 = 1218;
    pub const MCI_SEQ_DIV_SMPTE_30DROP: u32 = 1219;
    pub const MCI_SEQ_DIV_SMPTE_30: u32 = 1220;
    pub const MCI_SEQ_FORMAT_SONGPTR: u32 = 16385;
    pub const MCI_SEQ_FILE: u32 = 16386;
    pub const MCI_SEQ_MIDI: u32 = 16387;
    pub const MCI_SEQ_SMPTE: u32 = 16388;
    pub const MCI_SEQ_NONE: u32 = 65533;
    pub const MCI_SEQ_MAPPER: u32 = 65535;
    pub const MCI_SEQ_STATUS_TEMPO: u32 = 16386;
    pub const MCI_SEQ_STATUS_PORT: u32 = 16387;
    pub const MCI_SEQ_STATUS_SLAVE: u32 = 16391;
    pub const MCI_SEQ_STATUS_MASTER: u32 = 16392;
    pub const MCI_SEQ_STATUS_OFFSET: u32 = 16393;
    pub const MCI_SEQ_STATUS_DIVTYPE: u32 = 16394;
    pub const MCI_SEQ_STATUS_NAME: u32 = 16395;
    pub const MCI_SEQ_STATUS_COPYRIGHT: u32 = 16396;
    pub const MCI_SEQ_SET_TEMPO: u32 = 65536;
    pub const MCI_SEQ_SET_PORT: u32 = 131072;
    pub const MCI_SEQ_SET_SLAVE: u32 = 262144;
    pub const MCI_SEQ_SET_MASTER: u32 = 524288;
    pub const MCI_SEQ_SET_OFFSET: u32 = 16777216;
    pub const MCI_ANIM_OPEN_WS: u32 = 65536;
    pub const MCI_ANIM_OPEN_PARENT: u32 = 131072;
    pub const MCI_ANIM_OPEN_NOSTATIC: u32 = 262144;
    pub const MCI_ANIM_PLAY_SPEED: u32 = 65536;
    pub const MCI_ANIM_PLAY_REVERSE: u32 = 131072;
    pub const MCI_ANIM_PLAY_FAST: u32 = 262144;
    pub const MCI_ANIM_PLAY_SLOW: u32 = 524288;
    pub const MCI_ANIM_PLAY_SCAN: u32 = 1048576;
    pub const MCI_ANIM_STEP_REVERSE: u32 = 65536;
    pub const MCI_ANIM_STEP_FRAMES: u32 = 131072;
    pub const MCI_ANIM_STATUS_SPEED: u32 = 16385;
    pub const MCI_ANIM_STATUS_FORWARD: u32 = 16386;
    pub const MCI_ANIM_STATUS_HWND: u32 = 16387;
    pub const MCI_ANIM_STATUS_HPAL: u32 = 16388;
    pub const MCI_ANIM_STATUS_STRETCH: u32 = 16389;
    pub const MCI_ANIM_INFO_TEXT: u32 = 65536;
    pub const MCI_ANIM_GETDEVCAPS_CAN_REVERSE: u32 = 16385;
    pub const MCI_ANIM_GETDEVCAPS_FAST_RATE: u32 = 16386;
    pub const MCI_ANIM_GETDEVCAPS_SLOW_RATE: u32 = 16387;
    pub const MCI_ANIM_GETDEVCAPS_NORMAL_RATE: u32 = 16388;
    pub const MCI_ANIM_GETDEVCAPS_PALETTES: u32 = 16390;
    pub const MCI_ANIM_GETDEVCAPS_CAN_STRETCH: u32 = 16391;
    pub const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS: u32 = 16392;
    pub const MCI_ANIM_REALIZE_NORM: u32 = 65536;
    pub const MCI_ANIM_REALIZE_BKGD: u32 = 131072;
    pub const MCI_ANIM_WINDOW_HWND: u32 = 65536;
    pub const MCI_ANIM_WINDOW_STATE: u32 = 262144;
    pub const MCI_ANIM_WINDOW_TEXT: u32 = 524288;
    pub const MCI_ANIM_WINDOW_ENABLE_STRETCH: u32 = 1048576;
    pub const MCI_ANIM_WINDOW_DISABLE_STRETCH: u32 = 2097152;
    pub const MCI_ANIM_WINDOW_DEFAULT: u32 = 0;
    pub const MCI_ANIM_RECT: u32 = 65536;
    pub const MCI_ANIM_PUT_SOURCE: u32 = 131072;
    pub const MCI_ANIM_PUT_DESTINATION: u32 = 262144;
    pub const MCI_ANIM_WHERE_SOURCE: u32 = 131072;
    pub const MCI_ANIM_WHERE_DESTINATION: u32 = 262144;
    pub const MCI_ANIM_UPDATE_HDC: u32 = 131072;
    pub const MCI_OVLY_OPEN_WS: u32 = 65536;
    pub const MCI_OVLY_OPEN_PARENT: u32 = 131072;
    pub const MCI_OVLY_STATUS_HWND: u32 = 16385;
    pub const MCI_OVLY_STATUS_STRETCH: u32 = 16386;
    pub const MCI_OVLY_INFO_TEXT: u32 = 65536;
    pub const MCI_OVLY_GETDEVCAPS_CAN_STRETCH: u32 = 16385;
    pub const MCI_OVLY_GETDEVCAPS_CAN_FREEZE: u32 = 16386;
    pub const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS: u32 = 16387;
    pub const MCI_OVLY_WINDOW_HWND: u32 = 65536;
    pub const MCI_OVLY_WINDOW_STATE: u32 = 262144;
    pub const MCI_OVLY_WINDOW_TEXT: u32 = 524288;
    pub const MCI_OVLY_WINDOW_ENABLE_STRETCH: u32 = 1048576;
    pub const MCI_OVLY_WINDOW_DISABLE_STRETCH: u32 = 2097152;
    pub const MCI_OVLY_WINDOW_DEFAULT: u32 = 0;
    pub const MCI_OVLY_RECT: u32 = 65536;
    pub const MCI_OVLY_PUT_SOURCE: u32 = 131072;
    pub const MCI_OVLY_PUT_DESTINATION: u32 = 262144;
    pub const MCI_OVLY_PUT_FRAME: u32 = 524288;
    pub const MCI_OVLY_PUT_VIDEO: u32 = 1048576;
    pub const MCI_OVLY_WHERE_SOURCE: u32 = 131072;
    pub const MCI_OVLY_WHERE_DESTINATION: u32 = 262144;
    pub const MCI_OVLY_WHERE_FRAME: u32 = 524288;
    pub const MCI_OVLY_WHERE_VIDEO: u32 = 1048576;
    pub const DRV_LOAD: u32 = 1;
    pub const DRV_ENABLE: u32 = 2;
    pub const DRV_OPEN: u32 = 3;
    pub const DRV_CLOSE: u32 = 4;
    pub const DRV_DISABLE: u32 = 5;
    pub const DRV_FREE: u32 = 6;
    pub const DRV_CONFIGURE: u32 = 7;
    pub const DRV_QUERYCONFIGURE: u32 = 8;
    pub const DRV_INSTALL: u32 = 9;
    pub const DRV_REMOVE: u32 = 10;
    pub const DRV_EXITSESSION: u32 = 11;
    pub const DRV_POWER: u32 = 15;
    pub const DRV_RESERVED: u32 = 2048;
    pub const DRV_USER: u32 = 16384;
    pub const DRVCNF_CANCEL: u32 = 0;
    pub const DRVCNF_OK: u32 = 1;
    pub const DRVCNF_RESTART: u32 = 2;
    pub const DRV_CANCEL: u32 = 0;
    pub const DRV_OK: u32 = 1;
    pub const DRV_RESTART: u32 = 2;
    pub const DRV_MCI_FIRST: u32 = 2048;
    pub const DRV_MCI_LAST: u32 = 6143;
    pub const MMIOERR_BASE: u32 = 256;
    pub const MMIOERR_FILENOTFOUND: u32 = 257;
    pub const MMIOERR_OUTOFMEMORY: u32 = 258;
    pub const MMIOERR_CANNOTOPEN: u32 = 259;
    pub const MMIOERR_CANNOTCLOSE: u32 = 260;
    pub const MMIOERR_CANNOTREAD: u32 = 261;
    pub const MMIOERR_CANNOTWRITE: u32 = 262;
    pub const MMIOERR_CANNOTSEEK: u32 = 263;
    pub const MMIOERR_CANNOTEXPAND: u32 = 264;
    pub const MMIOERR_CHUNKNOTFOUND: u32 = 265;
    pub const MMIOERR_UNBUFFERED: u32 = 266;
    pub const MMIOERR_PATHNOTFOUND: u32 = 267;
    pub const MMIOERR_ACCESSDENIED: u32 = 268;
    pub const MMIOERR_SHARINGVIOLATION: u32 = 269;
    pub const MMIOERR_NETWORKERROR: u32 = 270;
    pub const MMIOERR_TOOMANYOPENFILES: u32 = 271;
    pub const MMIOERR_INVALIDFILE: u32 = 272;
    pub const CFSEPCHAR: u8 = 43u8;
    pub const MMIO_RWMODE: u32 = 3;
    pub const MMIO_SHAREMODE: u32 = 112;
    pub const MMIO_CREATE: u32 = 4096;
    pub const MMIO_PARSE: u32 = 256;
    pub const MMIO_DELETE: u32 = 512;
    pub const MMIO_EXIST: u32 = 16384;
    pub const MMIO_ALLOCBUF: u32 = 65536;
    pub const MMIO_GETTEMP: u32 = 131072;
    pub const MMIO_DIRTY: u32 = 268435456;
    pub const MMIO_READ: u32 = 0;
    pub const MMIO_WRITE: u32 = 1;
    pub const MMIO_READWRITE: u32 = 2;
    pub const MMIO_COMPAT: u32 = 0;
    pub const MMIO_EXCLUSIVE: u32 = 16;
    pub const MMIO_DENYWRITE: u32 = 32;
    pub const MMIO_DENYREAD: u32 = 48;
    pub const MMIO_DENYNONE: u32 = 64;
    pub const MMIO_FHOPEN: u32 = 16;
    pub const MMIO_EMPTYBUF: u32 = 16;
    pub const MMIO_TOUPPER: u32 = 16;
    pub const MMIO_INSTALLPROC: u32 = 65536;
    pub const MMIO_GLOBALPROC: u32 = 268435456;
    pub const MMIO_REMOVEPROC: u32 = 131072;
    pub const MMIO_UNICODEPROC: u32 = 16777216;
    pub const MMIO_FINDPROC: u32 = 262144;
    pub const MMIO_FINDCHUNK: u32 = 16;
    pub const MMIO_FINDRIFF: u32 = 32;
    pub const MMIO_FINDLIST: u32 = 64;
    pub const MMIO_CREATERIFF: u32 = 32;
    pub const MMIO_CREATELIST: u32 = 64;
    pub const MMIOM_READ: u32 = 0;
    pub const MMIOM_WRITE: u32 = 1;
    pub const MMIOM_SEEK: u32 = 2;
    pub const MMIOM_OPEN: u32 = 3;
    pub const MMIOM_CLOSE: u32 = 4;
    pub const MMIOM_WRITEFLUSH: u32 = 5;
    pub const MMIOM_RENAME: u32 = 6;
    pub const MMIOM_USER: u32 = 32768;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const MMIO_DEFAULTBUFFER: u32 = 8192;
    pub const TIME_ONESHOT: u32 = 0;
    pub const TIME_PERIODIC: u32 = 1;
    pub const TIME_CALLBACK_FUNCTION: u32 = 0;
    pub const TIME_CALLBACK_EVENT_SET: u32 = 16;
    pub const TIME_CALLBACK_EVENT_PULSE: u32 = 32;
    pub const TIME_KILL_SYNCHRONOUS: u32 = 256;
    pub const SND_SYNC: u32 = 0;
    pub const SND_ASYNC: u32 = 1;
    pub const SND_NODEFAULT: u32 = 2;
    pub const SND_MEMORY: u32 = 4;
    pub const SND_LOOP: u32 = 8;
    pub const SND_NOSTOP: u32 = 16;
    pub const SND_NOWAIT: u32 = 8192;
    pub const SND_ALIAS: u32 = 65536;
    pub const SND_ALIAS_ID: u32 = 1114112;
    pub const SND_FILENAME: u32 = 131072;
    pub const SND_RESOURCE: u32 = 262148;
    pub const SND_PURGE: u32 = 64;
    pub const SND_APPLICATION: u32 = 128;
    pub const SND_SENTRY: u32 = 524288;
    pub const SND_RING: u32 = 1048576;
    pub const SND_SYSTEM: u32 = 2097152;
    pub const SND_ALIAS_START: u32 = 0;
    pub const WAVERR_BADFORMAT: u32 = 32;
    pub const WAVERR_STILLPLAYING: u32 = 33;
    pub const WAVERR_UNPREPARED: u32 = 34;
    pub const WAVERR_SYNC: u32 = 35;
    pub const WAVERR_LASTERROR: u32 = 35;
    pub const WOM_OPEN: u32 = 955;
    pub const WOM_CLOSE: u32 = 956;
    pub const WOM_DONE: u32 = 957;
    pub const WIM_OPEN: u32 = 958;
    pub const WIM_CLOSE: u32 = 959;
    pub const WIM_DATA: u32 = 960;
    pub const WAVE_FORMAT_QUERY: u32 = 1;
    pub const WAVE_ALLOWSYNC: u32 = 2;
    pub const WAVE_MAPPED: u32 = 4;
    pub const WAVE_FORMAT_DIRECT: u32 = 8;
    pub const WAVE_FORMAT_DIRECT_QUERY: u32 = 9;
    pub const WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE: u32 = 16;
    pub const WHDR_DONE: u32 = 1;
    pub const WHDR_PREPARED: u32 = 2;
    pub const WHDR_BEGINLOOP: u32 = 4;
    pub const WHDR_ENDLOOP: u32 = 8;
    pub const WHDR_INQUEUE: u32 = 16;
    pub const WAVECAPS_PITCH: u32 = 1;
    pub const WAVECAPS_PLAYBACKRATE: u32 = 2;
    pub const WAVECAPS_VOLUME: u32 = 4;
    pub const WAVECAPS_LRVOLUME: u32 = 8;
    pub const WAVECAPS_SYNC: u32 = 16;
    pub const WAVECAPS_SAMPLEACCURATE: u32 = 32;
    pub const WAVE_INVALIDFORMAT: u32 = 0;
    pub const WAVE_FORMAT_1M08: u32 = 1;
    pub const WAVE_FORMAT_1S08: u32 = 2;
    pub const WAVE_FORMAT_1M16: u32 = 4;
    pub const WAVE_FORMAT_1S16: u32 = 8;
    pub const WAVE_FORMAT_2M08: u32 = 16;
    pub const WAVE_FORMAT_2S08: u32 = 32;
    pub const WAVE_FORMAT_2M16: u32 = 64;
    pub const WAVE_FORMAT_2S16: u32 = 128;
    pub const WAVE_FORMAT_4M08: u32 = 256;
    pub const WAVE_FORMAT_4S08: u32 = 512;
    pub const WAVE_FORMAT_4M16: u32 = 1024;
    pub const WAVE_FORMAT_4S16: u32 = 2048;
    pub const WAVE_FORMAT_44M08: u32 = 256;
    pub const WAVE_FORMAT_44S08: u32 = 512;
    pub const WAVE_FORMAT_44M16: u32 = 1024;
    pub const WAVE_FORMAT_44S16: u32 = 2048;
    pub const WAVE_FORMAT_48M08: u32 = 4096;
    pub const WAVE_FORMAT_48S08: u32 = 8192;
    pub const WAVE_FORMAT_48M16: u32 = 16384;
    pub const WAVE_FORMAT_48S16: u32 = 32768;
    pub const WAVE_FORMAT_96M08: u32 = 65536;
    pub const WAVE_FORMAT_96S08: u32 = 131072;
    pub const WAVE_FORMAT_96M16: u32 = 262144;
    pub const WAVE_FORMAT_96S16: u32 = 524288;
    pub const WAVE_FORMAT_PCM: u32 = 1;
    pub const MIDIERR_UNPREPARED: u32 = 64;
    pub const MIDIERR_STILLPLAYING: u32 = 65;
    pub const MIDIERR_NOMAP: u32 = 66;
    pub const MIDIERR_NOTREADY: u32 = 67;
    pub const MIDIERR_NODEVICE: u32 = 68;
    pub const MIDIERR_INVALIDSETUP: u32 = 69;
    pub const MIDIERR_BADOPENMODE: u32 = 70;
    pub const MIDIERR_DONT_CONTINUE: u32 = 71;
    pub const MIDIERR_LASTERROR: u32 = 71;
    pub const MIDIPATCHSIZE: u32 = 128;
    pub const MIM_OPEN: u32 = 961;
    pub const MIM_CLOSE: u32 = 962;
    pub const MIM_DATA: u32 = 963;
    pub const MIM_LONGDATA: u32 = 964;
    pub const MIM_ERROR: u32 = 965;
    pub const MIM_LONGERROR: u32 = 966;
    pub const MOM_OPEN: u32 = 967;
    pub const MOM_CLOSE: u32 = 968;
    pub const MOM_DONE: u32 = 969;
    pub const MIM_MOREDATA: u32 = 972;
    pub const MOM_POSITIONCB: u32 = 970;
    pub const MIDI_IO_STATUS: u32 = 32;
    pub const MIDI_CACHE_ALL: u32 = 1;
    pub const MIDI_CACHE_BESTFIT: u32 = 2;
    pub const MIDI_CACHE_QUERY: u32 = 3;
    pub const MIDI_UNCACHE: u32 = 4;
    pub const MOD_MIDIPORT: u32 = 1;
    pub const MOD_SYNTH: u32 = 2;
    pub const MOD_SQSYNTH: u32 = 3;
    pub const MOD_FMSYNTH: u32 = 4;
    pub const MOD_MAPPER: u32 = 5;
    pub const MOD_WAVETABLE: u32 = 6;
    pub const MOD_SWSYNTH: u32 = 7;
    pub const MIDICAPS_VOLUME: u32 = 1;
    pub const MIDICAPS_LRVOLUME: u32 = 2;
    pub const MIDICAPS_CACHE: u32 = 4;
    pub const MIDICAPS_STREAM: u32 = 8;
    pub const MHDR_DONE: u32 = 1;
    pub const MHDR_PREPARED: u32 = 2;
    pub const MHDR_INQUEUE: u32 = 4;
    pub const MHDR_ISSTRM: u32 = 8;
    pub const MEVT_F_SHORT: u32 = 0;
    pub const MEVT_F_LONG: u32 = 2147483648;
    pub const MEVT_F_CALLBACK: u32 = 1073741824;
    pub const MIDISTRM_ERROR: i32 = -2;
    pub const MIDIPROP_SET: u32 = 2147483648;
    pub const MIDIPROP_GET: u32 = 1073741824;
    pub const MIDIPROP_TIMEDIV: u32 = 1;
    pub const MIDIPROP_TEMPO: u32 = 2;
    pub const AUXCAPS_CDAUDIO: u32 = 1;
    pub const AUXCAPS_AUXIN: u32 = 2;
    pub const AUXCAPS_VOLUME: u32 = 1;
    pub const AUXCAPS_LRVOLUME: u32 = 2;
    pub const MIXER_SHORT_NAME_CHARS: u32 = 16;
    pub const MIXER_LONG_NAME_CHARS: u32 = 64;
    pub const MIXERR_INVALLINE: u32 = 1024;
    pub const MIXERR_INVALCONTROL: u32 = 1025;
    pub const MIXERR_INVALVALUE: u32 = 1026;
    pub const MIXERR_LASTERROR: u32 = 1026;
    pub const MIXER_OBJECTF_HANDLE: u32 = 2147483648;
    pub const MIXER_OBJECTF_MIXER: u32 = 0;
    pub const MIXER_OBJECTF_HMIXER: u32 = 2147483648;
    pub const MIXER_OBJECTF_WAVEOUT: u32 = 268435456;
    pub const MIXER_OBJECTF_HWAVEOUT: u32 = 2415919104;
    pub const MIXER_OBJECTF_WAVEIN: u32 = 536870912;
    pub const MIXER_OBJECTF_HWAVEIN: u32 = 2684354560;
    pub const MIXER_OBJECTF_MIDIOUT: u32 = 805306368;
    pub const MIXER_OBJECTF_HMIDIOUT: u32 = 2952790016;
    pub const MIXER_OBJECTF_MIDIIN: u32 = 1073741824;
    pub const MIXER_OBJECTF_HMIDIIN: u32 = 3221225472;
    pub const MIXER_OBJECTF_AUX: u32 = 1342177280;
    pub const MIXERLINE_LINEF_ACTIVE: u32 = 1;
    pub const MIXERLINE_LINEF_DISCONNECTED: u32 = 32768;
    pub const MIXERLINE_LINEF_SOURCE: u32 = 2147483648;
    pub const MIXERLINE_COMPONENTTYPE_DST_FIRST: u32 = 0;
    pub const MIXERLINE_COMPONENTTYPE_DST_UNDEFINED: u32 = 0;
    pub const MIXERLINE_COMPONENTTYPE_DST_DIGITAL: u32 = 1;
    pub const MIXERLINE_COMPONENTTYPE_DST_LINE: u32 = 2;
    pub const MIXERLINE_COMPONENTTYPE_DST_MONITOR: u32 = 3;
    pub const MIXERLINE_COMPONENTTYPE_DST_SPEAKERS: u32 = 4;
    pub const MIXERLINE_COMPONENTTYPE_DST_HEADPHONES: u32 = 5;
    pub const MIXERLINE_COMPONENTTYPE_DST_TELEPHONE: u32 = 6;
    pub const MIXERLINE_COMPONENTTYPE_DST_WAVEIN: u32 = 7;
    pub const MIXERLINE_COMPONENTTYPE_DST_VOICEIN: u32 = 8;
    pub const MIXERLINE_COMPONENTTYPE_DST_LAST: u32 = 8;
    pub const MIXERLINE_COMPONENTTYPE_SRC_FIRST: u32 = 4096;
    pub const MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED: u32 = 4096;
    pub const MIXERLINE_COMPONENTTYPE_SRC_DIGITAL: u32 = 4097;
    pub const MIXERLINE_COMPONENTTYPE_SRC_LINE: u32 = 4098;
    pub const MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE: u32 = 4099;
    pub const MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER: u32 = 4100;
    pub const MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC: u32 = 4101;
    pub const MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE: u32 = 4102;
    pub const MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER: u32 = 4103;
    pub const MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT: u32 = 4104;
    pub const MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY: u32 = 4105;
    pub const MIXERLINE_COMPONENTTYPE_SRC_ANALOG: u32 = 4106;
    pub const MIXERLINE_COMPONENTTYPE_SRC_LAST: u32 = 4106;
    pub const MIXERLINE_TARGETTYPE_UNDEFINED: u32 = 0;
    pub const MIXERLINE_TARGETTYPE_WAVEOUT: u32 = 1;
    pub const MIXERLINE_TARGETTYPE_WAVEIN: u32 = 2;
    pub const MIXERLINE_TARGETTYPE_MIDIOUT: u32 = 3;
    pub const MIXERLINE_TARGETTYPE_MIDIIN: u32 = 4;
    pub const MIXERLINE_TARGETTYPE_AUX: u32 = 5;
    pub const MIXER_GETLINEINFOF_DESTINATION: u32 = 0;
    pub const MIXER_GETLINEINFOF_SOURCE: u32 = 1;
    pub const MIXER_GETLINEINFOF_LINEID: u32 = 2;
    pub const MIXER_GETLINEINFOF_COMPONENTTYPE: u32 = 3;
    pub const MIXER_GETLINEINFOF_TARGETTYPE: u32 = 4;
    pub const MIXER_GETLINEINFOF_QUERYMASK: u32 = 15;
    pub const MIXERCONTROL_CONTROLF_UNIFORM: u32 = 1;
    pub const MIXERCONTROL_CONTROLF_MULTIPLE: u32 = 2;
    pub const MIXERCONTROL_CONTROLF_DISABLED: u32 = 2147483648;
    pub const MIXERCONTROL_CT_CLASS_MASK: u32 = 4026531840;
    pub const MIXERCONTROL_CT_CLASS_CUSTOM: u32 = 0;
    pub const MIXERCONTROL_CT_CLASS_METER: u32 = 268435456;
    pub const MIXERCONTROL_CT_CLASS_SWITCH: u32 = 536870912;
    pub const MIXERCONTROL_CT_CLASS_NUMBER: u32 = 805306368;
    pub const MIXERCONTROL_CT_CLASS_SLIDER: u32 = 1073741824;
    pub const MIXERCONTROL_CT_CLASS_FADER: u32 = 1342177280;
    pub const MIXERCONTROL_CT_CLASS_TIME: u32 = 1610612736;
    pub const MIXERCONTROL_CT_CLASS_LIST: u32 = 1879048192;
    pub const MIXERCONTROL_CT_SUBCLASS_MASK: u32 = 251658240;
    pub const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN: u32 = 0;
    pub const MIXERCONTROL_CT_SC_SWITCH_BUTTON: u32 = 16777216;
    pub const MIXERCONTROL_CT_SC_METER_POLLED: u32 = 0;
    pub const MIXERCONTROL_CT_SC_TIME_MICROSECS: u32 = 0;
    pub const MIXERCONTROL_CT_SC_TIME_MILLISECS: u32 = 16777216;
    pub const MIXERCONTROL_CT_SC_LIST_SINGLE: u32 = 0;
    pub const MIXERCONTROL_CT_SC_LIST_MULTIPLE: u32 = 16777216;
    pub const MIXERCONTROL_CT_UNITS_MASK: u32 = 16711680;
    pub const MIXERCONTROL_CT_UNITS_CUSTOM: u32 = 0;
    pub const MIXERCONTROL_CT_UNITS_BOOLEAN: u32 = 65536;
    pub const MIXERCONTROL_CT_UNITS_SIGNED: u32 = 131072;
    pub const MIXERCONTROL_CT_UNITS_UNSIGNED: u32 = 196608;
    pub const MIXERCONTROL_CT_UNITS_DECIBELS: u32 = 262144;
    pub const MIXERCONTROL_CT_UNITS_PERCENT: u32 = 327680;
    pub const MIXERCONTROL_CONTROLTYPE_CUSTOM: u32 = 0;
    pub const MIXERCONTROL_CONTROLTYPE_BOOLEANMETER: u32 = 268500992;
    pub const MIXERCONTROL_CONTROLTYPE_SIGNEDMETER: u32 = 268566528;
    pub const MIXERCONTROL_CONTROLTYPE_PEAKMETER: u32 = 268566529;
    pub const MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER: u32 = 268632064;
    pub const MIXERCONTROL_CONTROLTYPE_BOOLEAN: u32 = 536936448;
    pub const MIXERCONTROL_CONTROLTYPE_ONOFF: u32 = 536936449;
    pub const MIXERCONTROL_CONTROLTYPE_MUTE: u32 = 536936450;
    pub const MIXERCONTROL_CONTROLTYPE_MONO: u32 = 536936451;
    pub const MIXERCONTROL_CONTROLTYPE_LOUDNESS: u32 = 536936452;
    pub const MIXERCONTROL_CONTROLTYPE_STEREOENH: u32 = 536936453;
    pub const MIXERCONTROL_CONTROLTYPE_BASS_BOOST: u32 = 536945271;
    pub const MIXERCONTROL_CONTROLTYPE_BUTTON: u32 = 553713664;
    pub const MIXERCONTROL_CONTROLTYPE_DECIBELS: u32 = 805568512;
    pub const MIXERCONTROL_CONTROLTYPE_SIGNED: u32 = 805437440;
    pub const MIXERCONTROL_CONTROLTYPE_UNSIGNED: u32 = 805502976;
    pub const MIXERCONTROL_CONTROLTYPE_PERCENT: u32 = 805634048;
    pub const MIXERCONTROL_CONTROLTYPE_SLIDER: u32 = 1073872896;
    pub const MIXERCONTROL_CONTROLTYPE_PAN: u32 = 1073872897;
    pub const MIXERCONTROL_CONTROLTYPE_QSOUNDPAN: u32 = 1073872898;
    pub const MIXERCONTROL_CONTROLTYPE_FADER: u32 = 1342373888;
    pub const MIXERCONTROL_CONTROLTYPE_VOLUME: u32 = 1342373889;
    pub const MIXERCONTROL_CONTROLTYPE_BASS: u32 = 1342373890;
    pub const MIXERCONTROL_CONTROLTYPE_TREBLE: u32 = 1342373891;
    pub const MIXERCONTROL_CONTROLTYPE_EQUALIZER: u32 = 1342373892;
    pub const MIXERCONTROL_CONTROLTYPE_SINGLESELECT: u32 = 1879113728;
    pub const MIXERCONTROL_CONTROLTYPE_MUX: u32 = 1879113729;
    pub const MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT: u32 = 1895890944;
    pub const MIXERCONTROL_CONTROLTYPE_MIXER: u32 = 1895890945;
    pub const MIXERCONTROL_CONTROLTYPE_MICROTIME: u32 = 1610809344;
    pub const MIXERCONTROL_CONTROLTYPE_MILLITIME: u32 = 1627586560;
    pub const MIXER_GETLINECONTROLSF_ALL: u32 = 0;
    pub const MIXER_GETLINECONTROLSF_ONEBYID: u32 = 1;
    pub const MIXER_GETLINECONTROLSF_ONEBYTYPE: u32 = 2;
    pub const MIXER_GETLINECONTROLSF_QUERYMASK: u32 = 15;
    pub const MIXER_GETCONTROLDETAILSF_VALUE: u32 = 0;
    pub const MIXER_GETCONTROLDETAILSF_LISTTEXT: u32 = 1;
    pub const MIXER_GETCONTROLDETAILSF_QUERYMASK: u32 = 15;
    pub const MIXER_SETCONTROLDETAILSF_VALUE: u32 = 0;
    pub const MIXER_SETCONTROLDETAILSF_CUSTOM: u32 = 1;
    pub const MIXER_SETCONTROLDETAILSF_QUERYMASK: u32 = 15;
    pub const TIMERR_NOERROR: u32 = 0;
    pub const TIMERR_NOCANDO: u32 = 97;
    pub const TIMERR_STRUCT: u32 = 129;
    pub const JOYERR_NOERROR: u32 = 0;
    pub const JOYERR_PARMS: u32 = 165;
    pub const JOYERR_NOCANDO: u32 = 166;
    pub const JOYERR_UNPLUGGED: u32 = 167;
    pub const JOY_BUTTON1: u32 = 1;
    pub const JOY_BUTTON2: u32 = 2;
    pub const JOY_BUTTON3: u32 = 4;
    pub const JOY_BUTTON4: u32 = 8;
    pub const JOY_BUTTON1CHG: u32 = 256;
    pub const JOY_BUTTON2CHG: u32 = 512;
    pub const JOY_BUTTON3CHG: u32 = 1024;
    pub const JOY_BUTTON4CHG: u32 = 2048;
    pub const JOY_BUTTON5: u32 = 16;
    pub const JOY_BUTTON6: u32 = 32;
    pub const JOY_BUTTON7: u32 = 64;
    pub const JOY_BUTTON8: u32 = 128;
    pub const JOY_BUTTON9: u32 = 256;
    pub const JOY_BUTTON10: u32 = 512;
    pub const JOY_BUTTON11: u32 = 1024;
    pub const JOY_BUTTON12: u32 = 2048;
    pub const JOY_BUTTON13: u32 = 4096;
    pub const JOY_BUTTON14: u32 = 8192;
    pub const JOY_BUTTON15: u32 = 16384;
    pub const JOY_BUTTON16: u32 = 32768;
    pub const JOY_BUTTON17: u32 = 65536;
    pub const JOY_BUTTON18: u32 = 131072;
    pub const JOY_BUTTON19: u32 = 262144;
    pub const JOY_BUTTON20: u32 = 524288;
    pub const JOY_BUTTON21: u32 = 1048576;
    pub const JOY_BUTTON22: u32 = 2097152;
    pub const JOY_BUTTON23: u32 = 4194304;
    pub const JOY_BUTTON24: u32 = 8388608;
    pub const JOY_BUTTON25: u32 = 16777216;
    pub const JOY_BUTTON26: u32 = 33554432;
    pub const JOY_BUTTON27: u32 = 67108864;
    pub const JOY_BUTTON28: u32 = 134217728;
    pub const JOY_BUTTON29: u32 = 268435456;
    pub const JOY_BUTTON30: u32 = 536870912;
    pub const JOY_BUTTON31: u32 = 1073741824;
    pub const JOY_BUTTON32: u32 = 2147483648;
    pub const JOY_POVFORWARD: u32 = 0;
    pub const JOY_POVRIGHT: u32 = 9000;
    pub const JOY_POVBACKWARD: u32 = 18000;
    pub const JOY_POVLEFT: u32 = 27000;
    pub const JOY_RETURNX: u32 = 1;
    pub const JOY_RETURNY: u32 = 2;
    pub const JOY_RETURNZ: u32 = 4;
    pub const JOY_RETURNR: u32 = 8;
    pub const JOY_RETURNU: u32 = 16;
    pub const JOY_RETURNV: u32 = 32;
    pub const JOY_RETURNPOV: u32 = 64;
    pub const JOY_RETURNBUTTONS: u32 = 128;
    pub const JOY_RETURNRAWDATA: u32 = 256;
    pub const JOY_RETURNPOVCTS: u32 = 512;
    pub const JOY_RETURNCENTERED: u32 = 1024;
    pub const JOY_USEDEADZONE: u32 = 2048;
    pub const JOY_RETURNALL: u32 = 255;
    pub const JOY_CAL_READALWAYS: u32 = 65536;
    pub const JOY_CAL_READXYONLY: u32 = 131072;
    pub const JOY_CAL_READ3: u32 = 262144;
    pub const JOY_CAL_READ4: u32 = 524288;
    pub const JOY_CAL_READXONLY: u32 = 1048576;
    pub const JOY_CAL_READYONLY: u32 = 2097152;
    pub const JOY_CAL_READ5: u32 = 4194304;
    pub const JOY_CAL_READ6: u32 = 8388608;
    pub const JOY_CAL_READZONLY: u32 = 16777216;
    pub const JOY_CAL_READRONLY: u32 = 33554432;
    pub const JOY_CAL_READUONLY: u32 = 67108864;
    pub const JOY_CAL_READVONLY: u32 = 134217728;
    pub const JOYSTICKID1: u32 = 0;
    pub const JOYSTICKID2: u32 = 1;
    pub const JOYCAPS_HASZ: u32 = 1;
    pub const JOYCAPS_HASR: u32 = 2;
    pub const JOYCAPS_HASU: u32 = 4;
    pub const JOYCAPS_HASV: u32 = 8;
    pub const JOYCAPS_HASPOV: u32 = 16;
    pub const JOYCAPS_POV4DIR: u32 = 32;
    pub const JOYCAPS_POVCTS: u32 = 64;
    pub const NEWTRANSPARENT: u32 = 3;
    pub const QUERYROPSUPPORT: u32 = 40;
    pub const SELECTDIB: u32 = 41;
    pub const NCBNAMSZ: u32 = 16;
    pub const MAX_LANA: u32 = 254;
    pub const NAME_FLAGS_MASK: u32 = 135;
    pub const GROUP_NAME: u32 = 128;
    pub const UNIQUE_NAME: u32 = 0;
    pub const REGISTERING: u32 = 0;
    pub const REGISTERED: u32 = 4;
    pub const DEREGISTERED: u32 = 5;
    pub const DUPLICATE: u32 = 6;
    pub const DUPLICATE_DEREG: u32 = 7;
    pub const LISTEN_OUTSTANDING: u32 = 1;
    pub const CALL_PENDING: u32 = 2;
    pub const SESSION_ESTABLISHED: u32 = 3;
    pub const HANGUP_PENDING: u32 = 4;
    pub const HANGUP_COMPLETE: u32 = 5;
    pub const SESSION_ABORTED: u32 = 6;
    pub const ALL_TRANSPORTS: &[u8; 5usize] = b"M\0\0\0\0";
    pub const MS_NBF: &[u8; 5usize] = b"MNBF\0";
    pub const NCBCALL: u32 = 16;
    pub const NCBLISTEN: u32 = 17;
    pub const NCBHANGUP: u32 = 18;
    pub const NCBSEND: u32 = 20;
    pub const NCBRECV: u32 = 21;
    pub const NCBRECVANY: u32 = 22;
    pub const NCBCHAINSEND: u32 = 23;
    pub const NCBDGSEND: u32 = 32;
    pub const NCBDGRECV: u32 = 33;
    pub const NCBDGSENDBC: u32 = 34;
    pub const NCBDGRECVBC: u32 = 35;
    pub const NCBADDNAME: u32 = 48;
    pub const NCBDELNAME: u32 = 49;
    pub const NCBRESET: u32 = 50;
    pub const NCBASTAT: u32 = 51;
    pub const NCBSSTAT: u32 = 52;
    pub const NCBCANCEL: u32 = 53;
    pub const NCBADDGRNAME: u32 = 54;
    pub const NCBENUM: u32 = 55;
    pub const NCBUNLINK: u32 = 112;
    pub const NCBSENDNA: u32 = 113;
    pub const NCBCHAINSENDNA: u32 = 114;
    pub const NCBLANSTALERT: u32 = 115;
    pub const NCBACTION: u32 = 119;
    pub const NCBFINDNAME: u32 = 120;
    pub const NCBTRACE: u32 = 121;
    pub const ASYNCH: u32 = 128;
    pub const NRC_GOODRET: u32 = 0;
    pub const NRC_BUFLEN: u32 = 1;
    pub const NRC_ILLCMD: u32 = 3;
    pub const NRC_CMDTMO: u32 = 5;
    pub const NRC_INCOMP: u32 = 6;
    pub const NRC_BADDR: u32 = 7;
    pub const NRC_SNUMOUT: u32 = 8;
    pub const NRC_NORES: u32 = 9;
    pub const NRC_SCLOSED: u32 = 10;
    pub const NRC_CMDCAN: u32 = 11;
    pub const NRC_DUPNAME: u32 = 13;
    pub const NRC_NAMTFUL: u32 = 14;
    pub const NRC_ACTSES: u32 = 15;
    pub const NRC_LOCTFUL: u32 = 17;
    pub const NRC_REMTFUL: u32 = 18;
    pub const NRC_ILLNN: u32 = 19;
    pub const NRC_NOCALL: u32 = 20;
    pub const NRC_NOWILD: u32 = 21;
    pub const NRC_INUSE: u32 = 22;
    pub const NRC_NAMERR: u32 = 23;
    pub const NRC_SABORT: u32 = 24;
    pub const NRC_NAMCONF: u32 = 25;
    pub const NRC_IFBUSY: u32 = 33;
    pub const NRC_TOOMANY: u32 = 34;
    pub const NRC_BRIDGE: u32 = 35;
    pub const NRC_CANOCCR: u32 = 36;
    pub const NRC_CANCEL: u32 = 38;
    pub const NRC_DUPENV: u32 = 48;
    pub const NRC_ENVNOTDEF: u32 = 52;
    pub const NRC_OSRESNOTAV: u32 = 53;
    pub const NRC_MAXAPPS: u32 = 54;
    pub const NRC_NOSAPS: u32 = 55;
    pub const NRC_NORESOURCES: u32 = 56;
    pub const NRC_INVADDRESS: u32 = 57;
    pub const NRC_INVDDID: u32 = 59;
    pub const NRC_LOCKFAIL: u32 = 60;
    pub const NRC_OPENERR: u32 = 63;
    pub const NRC_SYSTEM: u32 = 64;
    pub const NRC_PENDING: u32 = 255;
    pub const RPC_C_BINDING_INFINITE_TIMEOUT: u32 = 10;
    pub const RPC_C_BINDING_MIN_TIMEOUT: u32 = 0;
    pub const RPC_C_BINDING_DEFAULT_TIMEOUT: u32 = 5;
    pub const RPC_C_BINDING_MAX_TIMEOUT: u32 = 9;
    pub const RPC_C_CANCEL_INFINITE_TIMEOUT: i32 = -1;
    pub const RPC_C_LISTEN_MAX_CALLS_DEFAULT: u32 = 1234;
    pub const RPC_C_PROTSEQ_MAX_REQS_DEFAULT: u32 = 10;
    pub const RPC_C_BIND_TO_ALL_NICS: u32 = 1;
    pub const RPC_C_USE_INTERNET_PORT: u32 = 1;
    pub const RPC_C_USE_INTRANET_PORT: u32 = 2;
    pub const RPC_C_DONT_FAIL: u32 = 4;
    pub const RPC_C_RPCHTTP_USE_LOAD_BALANCE: u32 = 8;
    pub const RPC_C_OPT_BINDING_NONCAUSAL: u32 = 9;
    pub const RPC_C_OPT_SECURITY_CALLBACK: u32 = 10;
    pub const RPC_C_OPT_UNIQUE_BINDING: u32 = 11;
    pub const RPC_C_OPT_TRANS_SEND_BUFFER_SIZE: u32 = 5;
    pub const RPC_C_OPT_CALL_TIMEOUT: u32 = 12;
    pub const RPC_C_OPT_DONT_LINGER: u32 = 13;
    pub const RPC_C_OPT_TRUST_PEER: u32 = 14;
    pub const RPC_C_OPT_ASYNC_BLOCK: u32 = 15;
    pub const RPC_C_OPT_OPTIMIZE_TIME: u32 = 16;
    pub const RPC_C_OPT_MAX_OPTIONS: u32 = 17;
    pub const RPC_C_FULL_CERT_CHAIN: u32 = 1;
    pub const RPC_C_STATS_CALLS_IN: u32 = 0;
    pub const RPC_C_STATS_CALLS_OUT: u32 = 1;
    pub const RPC_C_STATS_PKTS_IN: u32 = 2;
    pub const RPC_C_STATS_PKTS_OUT: u32 = 3;
    pub const RPC_C_AUTHN_LEVEL_DEFAULT: u32 = 0;
    pub const RPC_C_AUTHN_LEVEL_NONE: u32 = 1;
    pub const RPC_C_AUTHN_LEVEL_CONNECT: u32 = 2;
    pub const RPC_C_AUTHN_LEVEL_CALL: u32 = 3;
    pub const RPC_C_AUTHN_LEVEL_PKT: u32 = 4;
    pub const RPC_C_AUTHN_LEVEL_PKT_INTEGRITY: u32 = 5;
    pub const RPC_C_AUTHN_LEVEL_PKT_PRIVACY: u32 = 6;
    pub const RPC_C_IMP_LEVEL_DEFAULT: u32 = 0;
    pub const RPC_C_IMP_LEVEL_ANONYMOUS: u32 = 1;
    pub const RPC_C_IMP_LEVEL_IDENTIFY: u32 = 2;
    pub const RPC_C_IMP_LEVEL_IMPERSONATE: u32 = 3;
    pub const RPC_C_IMP_LEVEL_DELEGATE: u32 = 4;
    pub const RPC_C_QOS_IDENTITY_STATIC: u32 = 0;
    pub const RPC_C_QOS_IDENTITY_DYNAMIC: u32 = 1;
    pub const RPC_C_QOS_CAPABILITIES_DEFAULT: u32 = 0;
    pub const RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH: u32 = 1;
    pub const RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC: u32 = 2;
    pub const RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY: u32 = 4;
    pub const RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE: u32 = 8;
    pub const RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT: u32 = 16;
    pub const RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY: u32 = 32;
    pub const RPC_C_PROTECT_LEVEL_DEFAULT: u32 = 0;
    pub const RPC_C_PROTECT_LEVEL_NONE: u32 = 1;
    pub const RPC_C_PROTECT_LEVEL_CONNECT: u32 = 2;
    pub const RPC_C_PROTECT_LEVEL_CALL: u32 = 3;
    pub const RPC_C_PROTECT_LEVEL_PKT: u32 = 4;
    pub const RPC_C_PROTECT_LEVEL_PKT_INTEGRITY: u32 = 5;
    pub const RPC_C_PROTECT_LEVEL_PKT_PRIVACY: u32 = 6;
    pub const RPC_C_AUTHN_NONE: u32 = 0;
    pub const RPC_C_AUTHN_DCE_PRIVATE: u32 = 1;
    pub const RPC_C_AUTHN_DCE_PUBLIC: u32 = 2;
    pub const RPC_C_AUTHN_DEC_PUBLIC: u32 = 4;
    pub const RPC_C_AUTHN_GSS_NEGOTIATE: u32 = 9;
    pub const RPC_C_AUTHN_WINNT: u32 = 10;
    pub const RPC_C_AUTHN_GSS_SCHANNEL: u32 = 14;
    pub const RPC_C_AUTHN_GSS_KERBEROS: u32 = 16;
    pub const RPC_C_AUTHN_DPA: u32 = 17;
    pub const RPC_C_AUTHN_MSN: u32 = 18;
    pub const RPC_C_AUTHN_DIGEST: u32 = 21;
    pub const RPC_C_AUTHN_KERNEL: u32 = 20;
    pub const RPC_C_AUTHN_NEGO_EXTENDER: u32 = 30;
    pub const RPC_C_AUTHN_PKU2U: u32 = 31;
    pub const RPC_C_AUTHN_LIVE_SSP: u32 = 32;
    pub const RPC_C_AUTHN_LIVEXP_SSP: u32 = 35;
    pub const RPC_C_AUTHN_CLOUD_AP: u32 = 36;
    pub const RPC_C_AUTHN_MSONLINE: u32 = 82;
    pub const RPC_C_AUTHN_MQ: u32 = 100;
    pub const RPC_C_AUTHN_DEFAULT: u32 = 4294967295;
    pub const RPC_C_SECURITY_QOS_VERSION: u32 = 1;
    pub const RPC_C_SECURITY_QOS_VERSION_1: u32 = 1;
    pub const SEC_WINNT_AUTH_IDENTITY_ANSI: u32 = 1;
    pub const SEC_WINNT_AUTH_IDENTITY_UNICODE: u32 = 2;
    pub const RPC_C_SECURITY_QOS_VERSION_2: u32 = 2;
    pub const RPC_C_AUTHN_INFO_TYPE_HTTP: u32 = 1;
    pub const RPC_C_HTTP_AUTHN_TARGET_SERVER: u32 = 1;
    pub const RPC_C_HTTP_AUTHN_TARGET_PROXY: u32 = 2;
    pub const RPC_C_HTTP_AUTHN_SCHEME_BASIC: u32 = 1;
    pub const RPC_C_HTTP_AUTHN_SCHEME_NTLM: u32 = 2;
    pub const RPC_C_HTTP_AUTHN_SCHEME_PASSPORT: u32 = 4;
    pub const RPC_C_HTTP_AUTHN_SCHEME_DIGEST: u32 = 8;
    pub const RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE: u32 = 16;
    pub const RPC_C_HTTP_AUTHN_SCHEME_CERT: u32 = 65536;
    pub const RPC_C_HTTP_FLAG_USE_SSL: u32 = 1;
    pub const RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME: u32 = 2;
    pub const RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID: u32 = 8;
    pub const RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK: u32 = 16;
    pub const RPC_C_SECURITY_QOS_VERSION_3: u32 = 3;
    pub const RPC_C_SECURITY_QOS_VERSION_4: u32 = 4;
    pub const RPC_C_SECURITY_QOS_VERSION_5: u32 = 5;
    pub const RPC_PROTSEQ_TCP: u32 = 1;
    pub const RPC_PROTSEQ_NMP: u32 = 2;
    pub const RPC_PROTSEQ_LRPC: u32 = 3;
    pub const RPC_PROTSEQ_HTTP: u32 = 4;
    pub const RPC_BHT_OBJECT_UUID_VALID: u32 = 1;
    pub const RPC_BHO_NONCAUSAL: u32 = 1;
    pub const RPC_BHO_DONTLINGER: u32 = 2;
    pub const RPC_BHO_EXCLUSIVE_AND_GUARANTEED: u32 = 4;
    pub const RPC_C_AUTHZ_NONE: u32 = 0;
    pub const RPC_C_AUTHZ_NAME: u32 = 1;
    pub const RPC_C_AUTHZ_DCE: u32 = 2;
    pub const RPC_C_AUTHZ_DEFAULT: u32 = 4294967295;
    pub const DCE_C_ERROR_STRING_LEN: u32 = 256;
    pub const RPC_C_EP_ALL_ELTS: u32 = 0;
    pub const RPC_C_EP_MATCH_BY_IF: u32 = 1;
    pub const RPC_C_EP_MATCH_BY_OBJ: u32 = 2;
    pub const RPC_C_EP_MATCH_BY_BOTH: u32 = 3;
    pub const RPC_C_VERS_ALL: u32 = 1;
    pub const RPC_C_VERS_COMPATIBLE: u32 = 2;
    pub const RPC_C_VERS_EXACT: u32 = 3;
    pub const RPC_C_VERS_MAJOR_ONLY: u32 = 4;
    pub const RPC_C_VERS_UPTO: u32 = 5;
    pub const RPC_C_MGMT_INQ_IF_IDS: u32 = 0;
    pub const RPC_C_MGMT_INQ_PRINC_NAME: u32 = 1;
    pub const RPC_C_MGMT_INQ_STATS: u32 = 2;
    pub const RPC_C_MGMT_IS_SERVER_LISTEN: u32 = 3;
    pub const RPC_C_MGMT_STOP_SERVER_LISTEN: u32 = 4;
    pub const RPC_C_PARM_MAX_PACKET_LENGTH: u32 = 1;
    pub const RPC_C_PARM_BUFFER_LENGTH: u32 = 2;
    pub const RPC_IF_AUTOLISTEN: u32 = 1;
    pub const RPC_IF_OLE: u32 = 2;
    pub const RPC_IF_ALLOW_UNKNOWN_AUTHORITY: u32 = 4;
    pub const RPC_IF_ALLOW_SECURE_ONLY: u32 = 8;
    pub const RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH: u32 = 16;
    pub const RPC_IF_ALLOW_LOCAL_ONLY: u32 = 32;
    pub const RPC_IF_SEC_NO_CACHE: u32 = 64;
    pub const RPC_IF_SEC_CACHE_PER_PROC: u32 = 128;
    pub const RPC_IF_ASYNC_CALLBACK: u32 = 256;
    pub const RPC_FW_IF_FLAG_DCOM: u32 = 1;
    pub const RPC_CONTEXT_HANDLE_DEFAULT_FLAGS: u32 = 0;
    pub const RPC_CONTEXT_HANDLE_FLAGS: u32 = 805306368;
    pub const RPC_CONTEXT_HANDLE_SERIALIZE: u32 = 268435456;
    pub const RPC_CONTEXT_HANDLE_DONT_SERIALIZE: u32 = 536870912;
    pub const RPC_TYPE_STRICT_CONTEXT_HANDLE: u32 = 1073741824;
    pub const RPC_TYPE_DISCONNECT_EVENT_CONTEXT_HANDLE: u32 = 2147483648;
    pub const RPC_NCA_FLAGS_DEFAULT: u32 = 0;
    pub const RPC_NCA_FLAGS_IDEMPOTENT: u32 = 1;
    pub const RPC_NCA_FLAGS_BROADCAST: u32 = 2;
    pub const RPC_NCA_FLAGS_MAYBE: u32 = 4;
    pub const RPCFLG_HAS_GUARANTEE: u32 = 16;
    pub const RPCFLG_WINRT_REMOTE_ASYNC: u32 = 32;
    pub const RPC_BUFFER_COMPLETE: u32 = 4096;
    pub const RPC_BUFFER_PARTIAL: u32 = 8192;
    pub const RPC_BUFFER_EXTRA: u32 = 16384;
    pub const RPC_BUFFER_ASYNC: u32 = 32768;
    pub const RPC_BUFFER_NONOTIFY: u32 = 65536;
    pub const RPCFLG_MESSAGE: u32 = 16777216;
    pub const RPCFLG_AUTO_COMPLETE: u32 = 134217728;
    pub const RPCFLG_LOCAL_CALL: u32 = 268435456;
    pub const RPCFLG_INPUT_SYNCHRONOUS: u32 = 536870912;
    pub const RPCFLG_ASYNCHRONOUS: u32 = 1073741824;
    pub const RPCFLG_NON_NDR: u32 = 2147483648;
    pub const RPCFLG_HAS_MULTI_SYNTAXES: u32 = 33554432;
    pub const RPCFLG_HAS_CALLBACK: u32 = 67108864;
    pub const RPCFLG_ACCESSIBILITY_BIT1: u32 = 1048576;
    pub const RPCFLG_ACCESSIBILITY_BIT2: u32 = 2097152;
    pub const RPCFLG_ACCESS_LOCAL: u32 = 4194304;
    pub const NDR_CUSTOM_OR_DEFAULT_ALLOCATOR: u32 = 268435456;
    pub const NDR_DEFAULT_ALLOCATOR: u32 = 536870912;
    pub const RPCFLG_NDR64_CONTAINS_ARM_LAYOUT: u32 = 67108864;
    pub const RPCFLG_SENDER_WAITING_FOR_REPLY: u32 = 8388608;
    pub const RPC_FLAGS_VALID_BIT: u32 = 32768;
    pub const NT351_INTERFACE_SIZE: u32 = 64;
    pub const RPC_INTERFACE_HAS_PIPES: u32 = 1;
    pub const RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED: u32 = 1;
    pub const RPC_SYSTEM_HANDLE_FREE_RETRIEVED: u32 = 2;
    pub const RPC_SYSTEM_HANDLE_FREE_ALL: u32 = 3;
    pub const RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE: u32 = 4;
    pub const TRANSPORT_TYPE_CN: u32 = 1;
    pub const TRANSPORT_TYPE_DG: u32 = 2;
    pub const TRANSPORT_TYPE_LPC: u32 = 4;
    pub const TRANSPORT_TYPE_WMSG: u32 = 8;
    pub const RPC_P_ADDR_FORMAT_TCP_IPV4: u32 = 1;
    pub const RPC_P_ADDR_FORMAT_TCP_IPV6: u32 = 2;
    pub const RPC_C_OPT_SESSION_ID: u32 = 6;
    pub const RPC_C_OPT_COOKIE_AUTH: u32 = 7;
    pub const RPC_C_OPT_RESOURCE_TYPE_UUID: u32 = 8;
    pub const RPC_PROXY_CONNECTION_TYPE_IN_PROXY: u32 = 0;
    pub const RPC_PROXY_CONNECTION_TYPE_OUT_PROXY: u32 = 1;
    pub const RPC_C_OPT_PRIVATE_SUPPRESS_WAKE: u32 = 1;
    pub const RPC_C_OPT_PRIVATE_DO_NOT_DISTURB: u32 = 2;
    pub const RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND: u32 = 3;
    pub const RPC_C_NS_SYNTAX_DEFAULT: u32 = 0;
    pub const RPC_C_NS_SYNTAX_DCE: u32 = 3;
    pub const RPC_C_PROFILE_DEFAULT_ELT: u32 = 0;
    pub const RPC_C_PROFILE_ALL_ELT: u32 = 1;
    pub const RPC_C_PROFILE_ALL_ELTS: u32 = 1;
    pub const RPC_C_PROFILE_MATCH_BY_IF: u32 = 2;
    pub const RPC_C_PROFILE_MATCH_BY_MBR: u32 = 3;
    pub const RPC_C_PROFILE_MATCH_BY_BOTH: u32 = 4;
    pub const RPC_C_NS_DEFAULT_EXP_AGE: i32 = -1;
    pub const RPC_S_OK: u32 = 0;
    pub const RPC_S_INVALID_ARG: u32 = 87;
    pub const RPC_S_OUT_OF_MEMORY: u32 = 14;
    pub const RPC_S_OUT_OF_THREADS: u32 = 164;
    pub const RPC_S_INVALID_LEVEL: u32 = 87;
    pub const RPC_S_BUFFER_TOO_SMALL: u32 = 122;
    pub const RPC_S_INVALID_SECURITY_DESC: u32 = 1338;
    pub const RPC_S_ACCESS_DENIED: u32 = 5;
    pub const RPC_S_SERVER_OUT_OF_MEMORY: u32 = 1130;
    pub const RPC_S_ASYNC_CALL_PENDING: u32 = 997;
    pub const RPC_S_UNKNOWN_PRINCIPAL: u32 = 1332;
    pub const RPC_S_TIMEOUT: u32 = 1460;
    pub const RPC_S_NOT_ENOUGH_QUOTA: u32 = 1816;
    pub const RPC_X_NO_MEMORY: u32 = 14;
    pub const RPC_X_INVALID_BOUND: u32 = 1734;
    pub const RPC_X_INVALID_TAG: u32 = 1733;
    pub const RPC_X_ENUM_VALUE_TOO_LARGE: u32 = 1781;
    pub const RPC_X_SS_CONTEXT_MISMATCH: u32 = 6;
    pub const RPC_X_INVALID_BUFFER: u32 = 1784;
    pub const RPC_X_PIPE_APP_MEMORY: u32 = 14;
    pub const RPC_X_INVALID_PIPE_OPERATION: u32 = 1831;
    pub const RPC_C_NOTIFY_ON_SEND_COMPLETE: u32 = 1;
    pub const RPC_C_INFINITE_TIMEOUT: u32 = 4294967295;
    pub const MaxNumberOfEEInfoParams: u32 = 4;
    pub const RPC_EEINFO_VERSION: u32 = 1;
    pub const EEInfoPreviousRecordsMissing: u32 = 1;
    pub const EEInfoNextRecordsMissing: u32 = 2;
    pub const EEInfoUseFileTime: u32 = 4;
    pub const EEInfoGCCOM: u32 = 11;
    pub const EEInfoGCFRS: u32 = 12;
    pub const RPC_QUERY_SERVER_PRINCIPAL_NAME: u32 = 2;
    pub const RPC_QUERY_CLIENT_PRINCIPAL_NAME: u32 = 4;
    pub const RPC_QUERY_CALL_LOCAL_ADDRESS: u32 = 8;
    pub const RPC_QUERY_CLIENT_PID: u32 = 16;
    pub const RPC_QUERY_IS_CLIENT_LOCAL: u32 = 32;
    pub const RPC_QUERY_NO_AUTH_REQUIRED: u32 = 64;
    pub const RPC_CALL_ATTRIBUTES_VERSION: u32 = 3;
    pub const RPC_QUERY_CLIENT_ID: u32 = 128;
    pub const RPC_CALL_STATUS_CANCELLED: u32 = 1;
    pub const RPC_CALL_STATUS_DISCONNECTED: u32 = 2;
    pub const ABM_NEW: u32 = 0;
    pub const ABM_REMOVE: u32 = 1;
    pub const ABM_QUERYPOS: u32 = 2;
    pub const ABM_SETPOS: u32 = 3;
    pub const ABM_GETSTATE: u32 = 4;
    pub const ABM_GETTASKBARPOS: u32 = 5;
    pub const ABM_ACTIVATE: u32 = 6;
    pub const ABM_GETAUTOHIDEBAR: u32 = 7;
    pub const ABM_SETAUTOHIDEBAR: u32 = 8;
    pub const ABM_WINDOWPOSCHANGED: u32 = 9;
    pub const ABM_SETSTATE: u32 = 10;
    pub const ABM_GETAUTOHIDEBAREX: u32 = 11;
    pub const ABM_SETAUTOHIDEBAREX: u32 = 12;
    pub const ABN_STATECHANGE: u32 = 0;
    pub const ABN_POSCHANGED: u32 = 1;
    pub const ABN_FULLSCREENAPP: u32 = 2;
    pub const ABN_WINDOWARRANGE: u32 = 3;
    pub const ABS_AUTOHIDE: u32 = 1;
    pub const ABS_ALWAYSONTOP: u32 = 2;
    pub const ABE_LEFT: u32 = 0;
    pub const ABE_TOP: u32 = 1;
    pub const ABE_RIGHT: u32 = 2;
    pub const ABE_BOTTOM: u32 = 3;
    pub const FO_MOVE: u32 = 1;
    pub const FO_COPY: u32 = 2;
    pub const FO_DELETE: u32 = 3;
    pub const FO_RENAME: u32 = 4;
    pub const FOF_MULTIDESTFILES: u32 = 1;
    pub const FOF_CONFIRMMOUSE: u32 = 2;
    pub const FOF_SILENT: u32 = 4;
    pub const FOF_RENAMEONCOLLISION: u32 = 8;
    pub const FOF_NOCONFIRMATION: u32 = 16;
    pub const FOF_WANTMAPPINGHANDLE: u32 = 32;
    pub const FOF_ALLOWUNDO: u32 = 64;
    pub const FOF_FILESONLY: u32 = 128;
    pub const FOF_SIMPLEPROGRESS: u32 = 256;
    pub const FOF_NOCONFIRMMKDIR: u32 = 512;
    pub const FOF_NOERRORUI: u32 = 1024;
    pub const FOF_NOCOPYSECURITYATTRIBS: u32 = 2048;
    pub const FOF_NORECURSION: u32 = 4096;
    pub const FOF_NO_CONNECTED_ELEMENTS: u32 = 8192;
    pub const FOF_WANTNUKEWARNING: u32 = 16384;
    pub const FOF_NORECURSEREPARSE: u32 = 32768;
    pub const FOF_NO_UI: u32 = 1556;
    pub const PO_DELETE: u32 = 19;
    pub const PO_RENAME: u32 = 20;
    pub const PO_PORTCHANGE: u32 = 32;
    pub const PO_REN_PORT: u32 = 52;
    pub const SE_ERR_FNF: u32 = 2;
    pub const SE_ERR_PNF: u32 = 3;
    pub const SE_ERR_ACCESSDENIED: u32 = 5;
    pub const SE_ERR_OOM: u32 = 8;
    pub const SE_ERR_DLLNOTFOUND: u32 = 32;
    pub const SE_ERR_SHARE: u32 = 26;
    pub const SE_ERR_ASSOCINCOMPLETE: u32 = 27;
    pub const SE_ERR_DDETIMEOUT: u32 = 28;
    pub const SE_ERR_DDEFAIL: u32 = 29;
    pub const SE_ERR_DDEBUSY: u32 = 30;
    pub const SE_ERR_NOASSOC: u32 = 31;
    pub const SEE_MASK_DEFAULT: u32 = 0;
    pub const SEE_MASK_CLASSNAME: u32 = 1;
    pub const SEE_MASK_CLASSKEY: u32 = 3;
    pub const SEE_MASK_IDLIST: u32 = 4;
    pub const SEE_MASK_INVOKEIDLIST: u32 = 12;
    pub const SEE_MASK_HOTKEY: u32 = 32;
    pub const SEE_MASK_NOCLOSEPROCESS: u32 = 64;
    pub const SEE_MASK_CONNECTNETDRV: u32 = 128;
    pub const SEE_MASK_NOASYNC: u32 = 256;
    pub const SEE_MASK_FLAG_DDEWAIT: u32 = 256;
    pub const SEE_MASK_DOENVSUBST: u32 = 512;
    pub const SEE_MASK_FLAG_NO_UI: u32 = 1024;
    pub const SEE_MASK_UNICODE: u32 = 16384;
    pub const SEE_MASK_NO_CONSOLE: u32 = 32768;
    pub const SEE_MASK_ASYNCOK: u32 = 1048576;
    pub const SEE_MASK_HMONITOR: u32 = 2097152;
    pub const SEE_MASK_NOZONECHECKS: u32 = 8388608;
    pub const SEE_MASK_NOQUERYCLASSSTORE: u32 = 16777216;
    pub const SEE_MASK_WAITFORINPUTIDLE: u32 = 33554432;
    pub const SEE_MASK_FLAG_LOG_USAGE: u32 = 67108864;
    pub const SEE_MASK_FLAG_HINST_IS_SITE: u32 = 134217728;
    pub const SHERB_NOCONFIRMATION: u32 = 1;
    pub const SHERB_NOPROGRESSUI: u32 = 2;
    pub const SHERB_NOSOUND: u32 = 4;
    pub const NIN_SELECT: u32 = 1024;
    pub const NINF_KEY: u32 = 1;
    pub const NIN_KEYSELECT: u32 = 1025;
    pub const NIN_BALLOONSHOW: u32 = 1026;
    pub const NIN_BALLOONHIDE: u32 = 1027;
    pub const NIN_BALLOONTIMEOUT: u32 = 1028;
    pub const NIN_BALLOONUSERCLICK: u32 = 1029;
    pub const NIN_POPUPOPEN: u32 = 1030;
    pub const NIN_POPUPCLOSE: u32 = 1031;
    pub const NIM_ADD: u32 = 0;
    pub const NIM_MODIFY: u32 = 1;
    pub const NIM_DELETE: u32 = 2;
    pub const NIM_SETFOCUS: u32 = 3;
    pub const NIM_SETVERSION: u32 = 4;
    pub const NOTIFYICON_VERSION: u32 = 3;
    pub const NOTIFYICON_VERSION_4: u32 = 4;
    pub const NIF_MESSAGE: u32 = 1;
    pub const NIF_ICON: u32 = 2;
    pub const NIF_TIP: u32 = 4;
    pub const NIF_STATE: u32 = 8;
    pub const NIF_INFO: u32 = 16;
    pub const NIF_GUID: u32 = 32;
    pub const NIF_REALTIME: u32 = 64;
    pub const NIF_SHOWTIP: u32 = 128;
    pub const NIS_HIDDEN: u32 = 1;
    pub const NIS_SHAREDICON: u32 = 2;
    pub const NIIF_NONE: u32 = 0;
    pub const NIIF_INFO: u32 = 1;
    pub const NIIF_WARNING: u32 = 2;
    pub const NIIF_ERROR: u32 = 3;
    pub const NIIF_USER: u32 = 4;
    pub const NIIF_ICON_MASK: u32 = 15;
    pub const NIIF_NOSOUND: u32 = 16;
    pub const NIIF_LARGE_ICON: u32 = 32;
    pub const NIIF_RESPECT_QUIET_TIME: u32 = 128;
    pub const SHGFI_ICON: u32 = 256;
    pub const SHGFI_DISPLAYNAME: u32 = 512;
    pub const SHGFI_TYPENAME: u32 = 1024;
    pub const SHGFI_ATTRIBUTES: u32 = 2048;
    pub const SHGFI_ICONLOCATION: u32 = 4096;
    pub const SHGFI_EXETYPE: u32 = 8192;
    pub const SHGFI_SYSICONINDEX: u32 = 16384;
    pub const SHGFI_LINKOVERLAY: u32 = 32768;
    pub const SHGFI_SELECTED: u32 = 65536;
    pub const SHGFI_ATTR_SPECIFIED: u32 = 131072;
    pub const SHGFI_LARGEICON: u32 = 0;
    pub const SHGFI_SMALLICON: u32 = 1;
    pub const SHGFI_OPENICON: u32 = 2;
    pub const SHGFI_SHELLICONSIZE: u32 = 4;
    pub const SHGFI_PIDL: u32 = 8;
    pub const SHGFI_USEFILEATTRIBUTES: u32 = 16;
    pub const SHGFI_ADDOVERLAYS: u32 = 32;
    pub const SHGFI_OVERLAYINDEX: u32 = 64;
    pub const SHGSI_ICONLOCATION: u32 = 0;
    pub const SHGSI_ICON: u32 = 256;
    pub const SHGSI_SYSICONINDEX: u32 = 16384;
    pub const SHGSI_LINKOVERLAY: u32 = 32768;
    pub const SHGSI_SELECTED: u32 = 65536;
    pub const SHGSI_LARGEICON: u32 = 0;
    pub const SHGSI_SMALLICON: u32 = 1;
    pub const SHGSI_SHELLICONSIZE: u32 = 4;
    pub const SHGNLI_PIDL: u32 = 1;
    pub const SHGNLI_PREFIXNAME: u32 = 2;
    pub const SHGNLI_NOUNIQUE: u32 = 4;
    pub const SHGNLI_NOLNK: u32 = 8;
    pub const SHGNLI_NOLOCNAME: u32 = 16;
    pub const SHGNLI_USEURLEXT: u32 = 32;
    pub const PRINTACTION_OPEN: u32 = 0;
    pub const PRINTACTION_PROPERTIES: u32 = 1;
    pub const PRINTACTION_NETINSTALL: u32 = 2;
    pub const PRINTACTION_NETINSTALLLINK: u32 = 3;
    pub const PRINTACTION_TESTPAGE: u32 = 4;
    pub const PRINTACTION_OPENNETPRN: u32 = 5;
    pub const PRINTACTION_DOCUMENTDEFAULTS: u32 = 6;
    pub const PRINTACTION_SERVERPROPERTIES: u32 = 7;
    pub const PRINT_PROP_FORCE_NAME: u32 = 1;
    pub const OFFLINE_STATUS_LOCAL: u32 = 1;
    pub const OFFLINE_STATUS_REMOTE: u32 = 2;
    pub const OFFLINE_STATUS_INCOMPLETE: u32 = 4;
    pub const SHIL_LARGE: u32 = 0;
    pub const SHIL_SMALL: u32 = 1;
    pub const SHIL_EXTRALARGE: u32 = 2;
    pub const SHIL_SYSSMALL: u32 = 3;
    pub const SHIL_JUMBO: u32 = 4;
    pub const SHIL_LAST: u32 = 4;
    pub const WC_NETADDRESS: &[u8; 18usize] = b"msctls_netaddress\0";
    pub const NCM_GETADDRESS: u32 = 1025;
    pub const NCM_SETALLOWTYPE: u32 = 1026;
    pub const NCM_GETALLOWTYPE: u32 = 1027;
    pub const NCM_DISPLAYERRORTIP: u32 = 1028;
    pub const PERF_DATA_VERSION: u32 = 1;
    pub const PERF_DATA_REVISION: u32 = 1;
    pub const PERF_NO_INSTANCES: i32 = -1;
    pub const PERF_SIZE_DWORD: u32 = 0;
    pub const PERF_SIZE_LARGE: u32 = 256;
    pub const PERF_SIZE_ZERO: u32 = 512;
    pub const PERF_SIZE_VARIABLE_LEN: u32 = 768;
    pub const PERF_TYPE_NUMBER: u32 = 0;
    pub const PERF_TYPE_COUNTER: u32 = 1024;
    pub const PERF_TYPE_TEXT: u32 = 2048;
    pub const PERF_TYPE_ZERO: u32 = 3072;
    pub const PERF_NUMBER_HEX: u32 = 0;
    pub const PERF_NUMBER_DECIMAL: u32 = 65536;
    pub const PERF_NUMBER_DEC_1000: u32 = 131072;
    pub const PERF_COUNTER_VALUE: u32 = 0;
    pub const PERF_COUNTER_RATE: u32 = 65536;
    pub const PERF_COUNTER_FRACTION: u32 = 131072;
    pub const PERF_COUNTER_BASE: u32 = 196608;
    pub const PERF_COUNTER_ELAPSED: u32 = 262144;
    pub const PERF_COUNTER_QUEUELEN: u32 = 327680;
    pub const PERF_COUNTER_HISTOGRAM: u32 = 393216;
    pub const PERF_COUNTER_PRECISION: u32 = 458752;
    pub const PERF_TEXT_UNICODE: u32 = 0;
    pub const PERF_TEXT_ASCII: u32 = 65536;
    pub const PERF_TIMER_TICK: u32 = 0;
    pub const PERF_TIMER_100NS: u32 = 1048576;
    pub const PERF_OBJECT_TIMER: u32 = 2097152;
    pub const PERF_DELTA_COUNTER: u32 = 4194304;
    pub const PERF_DELTA_BASE: u32 = 8388608;
    pub const PERF_INVERSE_COUNTER: u32 = 16777216;
    pub const PERF_MULTI_COUNTER: u32 = 33554432;
    pub const PERF_DISPLAY_NO_SUFFIX: u32 = 0;
    pub const PERF_DISPLAY_PER_SEC: u32 = 268435456;
    pub const PERF_DISPLAY_PERCENT: u32 = 536870912;
    pub const PERF_DISPLAY_SECONDS: u32 = 805306368;
    pub const PERF_DISPLAY_NOSHOW: u32 = 1073741824;
    pub const PERF_COUNTER_COUNTER: u32 = 272696320;
    pub const PERF_COUNTER_TIMER: u32 = 541132032;
    pub const PERF_COUNTER_QUEUELEN_TYPE: u32 = 4523008;
    pub const PERF_COUNTER_LARGE_QUEUELEN_TYPE: u32 = 4523264;
    pub const PERF_COUNTER_100NS_QUEUELEN_TYPE: u32 = 5571840;
    pub const PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE: u32 = 6620416;
    pub const PERF_COUNTER_BULK_COUNT: u32 = 272696576;
    pub const PERF_COUNTER_TEXT: u32 = 2816;
    pub const PERF_COUNTER_RAWCOUNT: u32 = 65536;
    pub const PERF_COUNTER_LARGE_RAWCOUNT: u32 = 65792;
    pub const PERF_COUNTER_RAWCOUNT_HEX: u32 = 0;
    pub const PERF_COUNTER_LARGE_RAWCOUNT_HEX: u32 = 256;
    pub const PERF_SAMPLE_FRACTION: u32 = 549585920;
    pub const PERF_SAMPLE_COUNTER: u32 = 4260864;
    pub const PERF_COUNTER_NODATA: u32 = 1073742336;
    pub const PERF_COUNTER_TIMER_INV: u32 = 557909248;
    pub const PERF_SAMPLE_BASE: u32 = 1073939457;
    pub const PERF_AVERAGE_TIMER: u32 = 805438464;
    pub const PERF_AVERAGE_BASE: u32 = 1073939458;
    pub const PERF_AVERAGE_BULK: u32 = 1073874176;
    pub const PERF_OBJ_TIME_TIMER: u32 = 543229184;
    pub const PERF_100NSEC_TIMER: u32 = 542180608;
    pub const PERF_100NSEC_TIMER_INV: u32 = 558957824;
    pub const PERF_COUNTER_MULTI_TIMER: u32 = 574686464;
    pub const PERF_COUNTER_MULTI_TIMER_INV: u32 = 591463680;
    pub const PERF_COUNTER_MULTI_BASE: u32 = 1107494144;
    pub const PERF_100NSEC_MULTI_TIMER: u32 = 575735040;
    pub const PERF_100NSEC_MULTI_TIMER_INV: u32 = 592512256;
    pub const PERF_RAW_FRACTION: u32 = 537003008;
    pub const PERF_LARGE_RAW_FRACTION: u32 = 537003264;
    pub const PERF_RAW_BASE: u32 = 1073939459;
    pub const PERF_LARGE_RAW_BASE: u32 = 1073939712;
    pub const PERF_ELAPSED_TIME: u32 = 807666944;
    pub const PERF_COUNTER_HISTOGRAM_TYPE: u32 = 2147483648;
    pub const PERF_COUNTER_DELTA: u32 = 4195328;
    pub const PERF_COUNTER_LARGE_DELTA: u32 = 4195584;
    pub const PERF_PRECISION_SYSTEM_TIMER: u32 = 541525248;
    pub const PERF_PRECISION_100NS_TIMER: u32 = 542573824;
    pub const PERF_PRECISION_OBJECT_TIMER: u32 = 543622400;
    pub const PERF_PRECISION_TIMESTAMP: u32 = 1073939712;
    pub const PERF_DETAIL_NOVICE: u32 = 100;
    pub const PERF_DETAIL_ADVANCED: u32 = 200;
    pub const PERF_DETAIL_EXPERT: u32 = 300;
    pub const PERF_DETAIL_WIZARD: u32 = 400;
    pub const PERF_NO_UNIQUE_ID: i32 = -1;
    pub const MAX_PERF_OBJECTS_IN_QUERY_FUNCTION: u32 = 64;
    pub const WINPERF_LOG_NONE: u32 = 0;
    pub const WINPERF_LOG_USER: u32 = 1;
    pub const WINPERF_LOG_DEBUG: u32 = 2;
    pub const WINPERF_LOG_VERBOSE: u32 = 3;
    pub const FD_SETSIZE: u32 = 64;
    pub const IOCPARM_MASK: u32 = 127;
    pub const IOC_VOID: u32 = 536870912;
    pub const IOC_OUT: u32 = 1073741824;
    pub const IOC_IN: u32 = 2147483648;
    pub const IOC_INOUT: u32 = 3221225472;
    pub const IPPROTO_IP: u32 = 0;
    pub const IPPROTO_ICMP: u32 = 1;
    pub const IPPROTO_IGMP: u32 = 2;
    pub const IPPROTO_GGP: u32 = 3;
    pub const IPPROTO_TCP: u32 = 6;
    pub const IPPROTO_PUP: u32 = 12;
    pub const IPPROTO_UDP: u32 = 17;
    pub const IPPROTO_IDP: u32 = 22;
    pub const IPPROTO_ND: u32 = 77;
    pub const IPPROTO_RAW: u32 = 255;
    pub const IPPROTO_MAX: u32 = 256;
    pub const IPPORT_ECHO: u32 = 7;
    pub const IPPORT_DISCARD: u32 = 9;
    pub const IPPORT_SYSTAT: u32 = 11;
    pub const IPPORT_DAYTIME: u32 = 13;
    pub const IPPORT_NETSTAT: u32 = 15;
    pub const IPPORT_FTP: u32 = 21;
    pub const IPPORT_TELNET: u32 = 23;
    pub const IPPORT_SMTP: u32 = 25;
    pub const IPPORT_TIMESERVER: u32 = 37;
    pub const IPPORT_NAMESERVER: u32 = 42;
    pub const IPPORT_WHOIS: u32 = 43;
    pub const IPPORT_MTP: u32 = 57;
    pub const IPPORT_TFTP: u32 = 69;
    pub const IPPORT_RJE: u32 = 77;
    pub const IPPORT_FINGER: u32 = 79;
    pub const IPPORT_TTYLINK: u32 = 87;
    pub const IPPORT_SUPDUP: u32 = 95;
    pub const IPPORT_EXECSERVER: u32 = 512;
    pub const IPPORT_LOGINSERVER: u32 = 513;
    pub const IPPORT_CMDSERVER: u32 = 514;
    pub const IPPORT_EFSSERVER: u32 = 520;
    pub const IPPORT_BIFFUDP: u32 = 512;
    pub const IPPORT_WHOSERVER: u32 = 513;
    pub const IPPORT_ROUTESERVER: u32 = 520;
    pub const IPPORT_RESERVED: u32 = 1024;
    pub const IMPLINK_IP: u32 = 155;
    pub const IMPLINK_LOWEXPER: u32 = 156;
    pub const IMPLINK_HIGHEXPER: u32 = 158;
    pub const IN_CLASSA_NET: u32 = 4278190080;
    pub const IN_CLASSA_NSHIFT: u32 = 24;
    pub const IN_CLASSA_HOST: u32 = 16777215;
    pub const IN_CLASSA_MAX: u32 = 128;
    pub const IN_CLASSB_NET: u32 = 4294901760;
    pub const IN_CLASSB_NSHIFT: u32 = 16;
    pub const IN_CLASSB_HOST: u32 = 65535;
    pub const IN_CLASSB_MAX: u32 = 65536;
    pub const IN_CLASSC_NET: u32 = 4294967040;
    pub const IN_CLASSC_NSHIFT: u32 = 8;
    pub const IN_CLASSC_HOST: u32 = 255;
    pub const INADDR_LOOPBACK: u32 = 2130706433;
    pub const INADDR_NONE: u32 = 4294967295;
    pub const WSADESCRIPTION_LEN: u32 = 256;
    pub const WSASYS_STATUS_LEN: u32 = 128;
    pub const IP_OPTIONS: u32 = 1;
    pub const IP_MULTICAST_IF: u32 = 2;
    pub const IP_MULTICAST_TTL: u32 = 3;
    pub const IP_MULTICAST_LOOP: u32 = 4;
    pub const IP_ADD_MEMBERSHIP: u32 = 5;
    pub const IP_DROP_MEMBERSHIP: u32 = 6;
    pub const IP_TTL: u32 = 7;
    pub const IP_TOS: u32 = 8;
    pub const IP_DONTFRAGMENT: u32 = 9;
    pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
    pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
    pub const IP_MAX_MEMBERSHIPS: u32 = 20;
    pub const SOCKET_ERROR: i32 = -1;
    pub const SOCK_STREAM: u32 = 1;
    pub const SOCK_DGRAM: u32 = 2;
    pub const SOCK_RAW: u32 = 3;
    pub const SOCK_RDM: u32 = 4;
    pub const SOCK_SEQPACKET: u32 = 5;
    pub const SO_DEBUG: u32 = 1;
    pub const SO_ACCEPTCONN: u32 = 2;
    pub const SO_REUSEADDR: u32 = 4;
    pub const SO_KEEPALIVE: u32 = 8;
    pub const SO_DONTROUTE: u32 = 16;
    pub const SO_BROADCAST: u32 = 32;
    pub const SO_USELOOPBACK: u32 = 64;
    pub const SO_LINGER: u32 = 128;
    pub const SO_OOBINLINE: u32 = 256;
    pub const SO_SNDBUF: u32 = 4097;
    pub const SO_RCVBUF: u32 = 4098;
    pub const SO_SNDLOWAT: u32 = 4099;
    pub const SO_RCVLOWAT: u32 = 4100;
    pub const SO_SNDTIMEO: u32 = 4101;
    pub const SO_RCVTIMEO: u32 = 4102;
    pub const SO_ERROR: u32 = 4103;
    pub const SO_TYPE: u32 = 4104;
    pub const SO_CONNDATA: u32 = 28672;
    pub const SO_CONNOPT: u32 = 28673;
    pub const SO_DISCDATA: u32 = 28674;
    pub const SO_DISCOPT: u32 = 28675;
    pub const SO_CONNDATALEN: u32 = 28676;
    pub const SO_CONNOPTLEN: u32 = 28677;
    pub const SO_DISCDATALEN: u32 = 28678;
    pub const SO_DISCOPTLEN: u32 = 28679;
    pub const SO_OPENTYPE: u32 = 28680;
    pub const SO_SYNCHRONOUS_ALERT: u32 = 16;
    pub const SO_SYNCHRONOUS_NONALERT: u32 = 32;
    pub const SO_MAXDG: u32 = 28681;
    pub const SO_MAXPATHDG: u32 = 28682;
    pub const SO_UPDATE_ACCEPT_CONTEXT: u32 = 28683;
    pub const SO_CONNECT_TIME: u32 = 28684;
    pub const TCP_NODELAY: u32 = 1;
    pub const TCP_BSDURGENT: u32 = 28672;
    pub const AF_UNSPEC: u32 = 0;
    pub const AF_UNIX: u32 = 1;
    pub const AF_INET: u32 = 2;
    pub const AF_IMPLINK: u32 = 3;
    pub const AF_PUP: u32 = 4;
    pub const AF_CHAOS: u32 = 5;
    pub const AF_IPX: u32 = 6;
    pub const AF_NS: u32 = 6;
    pub const AF_ISO: u32 = 7;
    pub const AF_OSI: u32 = 7;
    pub const AF_ECMA: u32 = 8;
    pub const AF_DATAKIT: u32 = 9;
    pub const AF_CCITT: u32 = 10;
    pub const AF_SNA: u32 = 11;
    pub const AF_DECnet: u32 = 12;
    pub const AF_DLI: u32 = 13;
    pub const AF_LAT: u32 = 14;
    pub const AF_HYLINK: u32 = 15;
    pub const AF_APPLETALK: u32 = 16;
    pub const AF_NETBIOS: u32 = 17;
    pub const AF_VOICEVIEW: u32 = 18;
    pub const AF_FIREFOX: u32 = 19;
    pub const AF_UNKNOWN1: u32 = 20;
    pub const AF_BAN: u32 = 21;
    pub const AF_MAX: u32 = 22;
    pub const PF_UNSPEC: u32 = 0;
    pub const PF_UNIX: u32 = 1;
    pub const PF_INET: u32 = 2;
    pub const PF_IMPLINK: u32 = 3;
    pub const PF_PUP: u32 = 4;
    pub const PF_CHAOS: u32 = 5;
    pub const PF_NS: u32 = 6;
    pub const PF_IPX: u32 = 6;
    pub const PF_ISO: u32 = 7;
    pub const PF_OSI: u32 = 7;
    pub const PF_ECMA: u32 = 8;
    pub const PF_DATAKIT: u32 = 9;
    pub const PF_CCITT: u32 = 10;
    pub const PF_SNA: u32 = 11;
    pub const PF_DECnet: u32 = 12;
    pub const PF_DLI: u32 = 13;
    pub const PF_LAT: u32 = 14;
    pub const PF_HYLINK: u32 = 15;
    pub const PF_APPLETALK: u32 = 16;
    pub const PF_VOICEVIEW: u32 = 18;
    pub const PF_FIREFOX: u32 = 19;
    pub const PF_UNKNOWN1: u32 = 20;
    pub const PF_BAN: u32 = 21;
    pub const PF_MAX: u32 = 22;
    pub const SOL_SOCKET: u32 = 65535;
    pub const SOMAXCONN: u32 = 5;
    pub const MSG_OOB: u32 = 1;
    pub const MSG_PEEK: u32 = 2;
    pub const MSG_DONTROUTE: u32 = 4;
    pub const MSG_MAXIOVLEN: u32 = 16;
    pub const MSG_PARTIAL: u32 = 32768;
    pub const MAXGETHOSTSTRUCT: u32 = 1024;
    pub const FD_READ: u32 = 1;
    pub const FD_WRITE: u32 = 2;
    pub const FD_OOB: u32 = 4;
    pub const FD_ACCEPT: u32 = 8;
    pub const FD_CONNECT: u32 = 16;
    pub const FD_CLOSE: u32 = 32;
    pub const HOST_NOT_FOUND: u32 = 11001;
    pub const TRY_AGAIN: u32 = 11002;
    pub const NO_RECOVERY: u32 = 11003;
    pub const NO_DATA: u32 = 11004;
    pub const WSANO_ADDRESS: u32 = 11004;
    pub const NO_ADDRESS: u32 = 11004;
    pub const TF_DISCONNECT: u32 = 1;
    pub const TF_REUSE_SOCKET: u32 = 2;
    pub const TF_WRITE_BEHIND: u32 = 4;
    pub const ALG_CLASS_ANY: u32 = 0;
    pub const ALG_CLASS_SIGNATURE: u32 = 8192;
    pub const ALG_CLASS_MSG_ENCRYPT: u32 = 16384;
    pub const ALG_CLASS_DATA_ENCRYPT: u32 = 24576;
    pub const ALG_CLASS_HASH: u32 = 32768;
    pub const ALG_CLASS_KEY_EXCHANGE: u32 = 40960;
    pub const ALG_CLASS_ALL: u32 = 57344;
    pub const ALG_TYPE_ANY: u32 = 0;
    pub const ALG_TYPE_DSS: u32 = 512;
    pub const ALG_TYPE_RSA: u32 = 1024;
    pub const ALG_TYPE_BLOCK: u32 = 1536;
    pub const ALG_TYPE_STREAM: u32 = 2048;
    pub const ALG_TYPE_DH: u32 = 2560;
    pub const ALG_TYPE_SECURECHANNEL: u32 = 3072;
    pub const ALG_TYPE_ECDH: u32 = 3584;
    pub const ALG_TYPE_THIRDPARTY: u32 = 4096;
    pub const ALG_SID_ANY: u32 = 0;
    pub const ALG_SID_THIRDPARTY_ANY: u32 = 0;
    pub const ALG_SID_RSA_ANY: u32 = 0;
    pub const ALG_SID_RSA_PKCS: u32 = 1;
    pub const ALG_SID_RSA_MSATWORK: u32 = 2;
    pub const ALG_SID_RSA_ENTRUST: u32 = 3;
    pub const ALG_SID_RSA_PGP: u32 = 4;
    pub const ALG_SID_DSS_ANY: u32 = 0;
    pub const ALG_SID_DSS_PKCS: u32 = 1;
    pub const ALG_SID_DSS_DMS: u32 = 2;
    pub const ALG_SID_ECDSA: u32 = 3;
    pub const ALG_SID_DES: u32 = 1;
    pub const ALG_SID_3DES: u32 = 3;
    pub const ALG_SID_DESX: u32 = 4;
    pub const ALG_SID_IDEA: u32 = 5;
    pub const ALG_SID_CAST: u32 = 6;
    pub const ALG_SID_SAFERSK64: u32 = 7;
    pub const ALG_SID_SAFERSK128: u32 = 8;
    pub const ALG_SID_3DES_112: u32 = 9;
    pub const ALG_SID_CYLINK_MEK: u32 = 12;
    pub const ALG_SID_RC5: u32 = 13;
    pub const ALG_SID_AES_128: u32 = 14;
    pub const ALG_SID_AES_192: u32 = 15;
    pub const ALG_SID_AES_256: u32 = 16;
    pub const ALG_SID_AES: u32 = 17;
    pub const ALG_SID_SKIPJACK: u32 = 10;
    pub const ALG_SID_TEK: u32 = 11;
    pub const CRYPT_MODE_CBCI: u32 = 6;
    pub const CRYPT_MODE_CFBP: u32 = 7;
    pub const CRYPT_MODE_OFBP: u32 = 8;
    pub const CRYPT_MODE_CBCOFM: u32 = 9;
    pub const CRYPT_MODE_CBCOFMI: u32 = 10;
    pub const ALG_SID_RC2: u32 = 2;
    pub const ALG_SID_RC4: u32 = 1;
    pub const ALG_SID_SEAL: u32 = 2;
    pub const ALG_SID_DH_SANDF: u32 = 1;
    pub const ALG_SID_DH_EPHEM: u32 = 2;
    pub const ALG_SID_AGREED_KEY_ANY: u32 = 3;
    pub const ALG_SID_KEA: u32 = 4;
    pub const ALG_SID_ECDH: u32 = 5;
    pub const ALG_SID_ECDH_EPHEM: u32 = 6;
    pub const ALG_SID_MD2: u32 = 1;
    pub const ALG_SID_MD4: u32 = 2;
    pub const ALG_SID_MD5: u32 = 3;
    pub const ALG_SID_SHA: u32 = 4;
    pub const ALG_SID_SHA1: u32 = 4;
    pub const ALG_SID_MAC: u32 = 5;
    pub const ALG_SID_RIPEMD: u32 = 6;
    pub const ALG_SID_RIPEMD160: u32 = 7;
    pub const ALG_SID_SSL3SHAMD5: u32 = 8;
    pub const ALG_SID_HMAC: u32 = 9;
    pub const ALG_SID_TLS1PRF: u32 = 10;
    pub const ALG_SID_HASH_REPLACE_OWF: u32 = 11;
    pub const ALG_SID_SHA_256: u32 = 12;
    pub const ALG_SID_SHA_384: u32 = 13;
    pub const ALG_SID_SHA_512: u32 = 14;
    pub const ALG_SID_SSL3_MASTER: u32 = 1;
    pub const ALG_SID_SCHANNEL_MASTER_HASH: u32 = 2;
    pub const ALG_SID_SCHANNEL_MAC_KEY: u32 = 3;
    pub const ALG_SID_PCT1_MASTER: u32 = 4;
    pub const ALG_SID_SSL2_MASTER: u32 = 5;
    pub const ALG_SID_TLS1_MASTER: u32 = 6;
    pub const ALG_SID_SCHANNEL_ENC_KEY: u32 = 7;
    pub const ALG_SID_ECMQV: u32 = 1;
    pub const ALG_SID_EXAMPLE: u32 = 80;
    pub const CALG_MD2: u32 = 32769;
    pub const CALG_MD4: u32 = 32770;
    pub const CALG_MD5: u32 = 32771;
    pub const CALG_SHA: u32 = 32772;
    pub const CALG_SHA1: u32 = 32772;
    pub const CALG_MAC: u32 = 32773;
    pub const CALG_RSA_SIGN: u32 = 9216;
    pub const CALG_DSS_SIGN: u32 = 8704;
    pub const CALG_NO_SIGN: u32 = 8192;
    pub const CALG_RSA_KEYX: u32 = 41984;
    pub const CALG_DES: u32 = 26113;
    pub const CALG_3DES_112: u32 = 26121;
    pub const CALG_3DES: u32 = 26115;
    pub const CALG_DESX: u32 = 26116;
    pub const CALG_RC2: u32 = 26114;
    pub const CALG_RC4: u32 = 26625;
    pub const CALG_SEAL: u32 = 26626;
    pub const CALG_DH_SF: u32 = 43521;
    pub const CALG_DH_EPHEM: u32 = 43522;
    pub const CALG_AGREEDKEY_ANY: u32 = 43523;
    pub const CALG_KEA_KEYX: u32 = 43524;
    pub const CALG_HUGHES_MD5: u32 = 40963;
    pub const CALG_SKIPJACK: u32 = 26122;
    pub const CALG_TEK: u32 = 26123;
    pub const CALG_CYLINK_MEK: u32 = 26124;
    pub const CALG_SSL3_SHAMD5: u32 = 32776;
    pub const CALG_SSL3_MASTER: u32 = 19457;
    pub const CALG_SCHANNEL_MASTER_HASH: u32 = 19458;
    pub const CALG_SCHANNEL_MAC_KEY: u32 = 19459;
    pub const CALG_SCHANNEL_ENC_KEY: u32 = 19463;
    pub const CALG_PCT1_MASTER: u32 = 19460;
    pub const CALG_SSL2_MASTER: u32 = 19461;
    pub const CALG_TLS1_MASTER: u32 = 19462;
    pub const CALG_RC5: u32 = 26125;
    pub const CALG_HMAC: u32 = 32777;
    pub const CALG_TLS1PRF: u32 = 32778;
    pub const CALG_HASH_REPLACE_OWF: u32 = 32779;
    pub const CALG_AES_128: u32 = 26126;
    pub const CALG_AES_192: u32 = 26127;
    pub const CALG_AES_256: u32 = 26128;
    pub const CALG_AES: u32 = 26129;
    pub const CALG_SHA_256: u32 = 32780;
    pub const CALG_SHA_384: u32 = 32781;
    pub const CALG_SHA_512: u32 = 32782;
    pub const CALG_ECDH: u32 = 43525;
    pub const CALG_ECDH_EPHEM: u32 = 44550;
    pub const CALG_ECMQV: u32 = 40961;
    pub const CALG_ECDSA: u32 = 8707;
    pub const CALG_NULLCIPHER: u32 = 24576;
    pub const CALG_THIRDPARTY_KEY_EXCHANGE: u32 = 45056;
    pub const CALG_THIRDPARTY_SIGNATURE: u32 = 12288;
    pub const CALG_THIRDPARTY_CIPHER: u32 = 28672;
    pub const CALG_THIRDPARTY_HASH: u32 = 36864;
    pub const CRYPT_VERIFYCONTEXT: u32 = 4026531840;
    pub const CRYPT_NEWKEYSET: u32 = 8;
    pub const CRYPT_DELETEKEYSET: u32 = 16;
    pub const CRYPT_MACHINE_KEYSET: u32 = 32;
    pub const CRYPT_SILENT: u32 = 64;
    pub const CRYPT_DEFAULT_CONTAINER_OPTIONAL: u32 = 128;
    pub const CRYPT_EXPORTABLE: u32 = 1;
    pub const CRYPT_USER_PROTECTED: u32 = 2;
    pub const CRYPT_CREATE_SALT: u32 = 4;
    pub const CRYPT_UPDATE_KEY: u32 = 8;
    pub const CRYPT_NO_SALT: u32 = 16;
    pub const CRYPT_PREGEN: u32 = 64;
    pub const CRYPT_RECIPIENT: u32 = 16;
    pub const CRYPT_INITIATOR: u32 = 64;
    pub const CRYPT_ONLINE: u32 = 128;
    pub const CRYPT_SF: u32 = 256;
    pub const CRYPT_CREATE_IV: u32 = 512;
    pub const CRYPT_KEK: u32 = 1024;
    pub const CRYPT_DATA_KEY: u32 = 2048;
    pub const CRYPT_VOLATILE: u32 = 4096;
    pub const CRYPT_SGCKEY: u32 = 8192;
    pub const CRYPT_USER_PROTECTED_STRONG: u32 = 1048576;
    pub const CRYPT_ARCHIVABLE: u32 = 16384;
    pub const CRYPT_FORCE_KEY_PROTECTION_HIGH: u32 = 32768;
    pub const RSA1024BIT_KEY: u32 = 67108864;
    pub const CRYPT_SERVER: u32 = 1024;
    pub const KEY_LENGTH_MASK: u32 = 4294901760;
    pub const CRYPT_Y_ONLY: u32 = 1;
    pub const CRYPT_SSL2_FALLBACK: u32 = 2;
    pub const CRYPT_DESTROYKEY: u32 = 4;
    pub const CRYPT_OAEP: u32 = 64;
    pub const CRYPT_BLOB_VER3: u32 = 128;
    pub const CRYPT_IPSEC_HMAC_KEY: u32 = 256;
    pub const CRYPT_DECRYPT_RSA_NO_PADDING_CHECK: u32 = 32;
    pub const CRYPT_SECRETDIGEST: u32 = 1;
    pub const CRYPT_OWF_REPL_LM_HASH: u32 = 1;
    pub const CRYPT_LITTLE_ENDIAN: u32 = 1;
    pub const CRYPT_NOHASHOID: u32 = 1;
    pub const CRYPT_TYPE2_FORMAT: u32 = 2;
    pub const CRYPT_X931_FORMAT: u32 = 4;
    pub const CRYPT_MACHINE_DEFAULT: u32 = 1;
    pub const CRYPT_USER_DEFAULT: u32 = 2;
    pub const CRYPT_DELETE_DEFAULT: u32 = 4;
    pub const SIMPLEBLOB: u32 = 1;
    pub const PUBLICKEYBLOB: u32 = 6;
    pub const PRIVATEKEYBLOB: u32 = 7;
    pub const PLAINTEXTKEYBLOB: u32 = 8;
    pub const OPAQUEKEYBLOB: u32 = 9;
    pub const PUBLICKEYBLOBEX: u32 = 10;
    pub const SYMMETRICWRAPKEYBLOB: u32 = 11;
    pub const KEYSTATEBLOB: u32 = 12;
    pub const AT_KEYEXCHANGE: u32 = 1;
    pub const AT_SIGNATURE: u32 = 2;
    pub const CRYPT_USERDATA: u32 = 1;
    pub const KP_IV: u32 = 1;
    pub const KP_SALT: u32 = 2;
    pub const KP_PADDING: u32 = 3;
    pub const KP_MODE: u32 = 4;
    pub const KP_MODE_BITS: u32 = 5;
    pub const KP_PERMISSIONS: u32 = 6;
    pub const KP_ALGID: u32 = 7;
    pub const KP_BLOCKLEN: u32 = 8;
    pub const KP_KEYLEN: u32 = 9;
    pub const KP_SALT_EX: u32 = 10;
    pub const KP_P: u32 = 11;
    pub const KP_G: u32 = 12;
    pub const KP_Q: u32 = 13;
    pub const KP_X: u32 = 14;
    pub const KP_Y: u32 = 15;
    pub const KP_RA: u32 = 16;
    pub const KP_RB: u32 = 17;
    pub const KP_INFO: u32 = 18;
    pub const KP_EFFECTIVE_KEYLEN: u32 = 19;
    pub const KP_SCHANNEL_ALG: u32 = 20;
    pub const KP_CLIENT_RANDOM: u32 = 21;
    pub const KP_SERVER_RANDOM: u32 = 22;
    pub const KP_RP: u32 = 23;
    pub const KP_PRECOMP_MD5: u32 = 24;
    pub const KP_PRECOMP_SHA: u32 = 25;
    pub const KP_CERTIFICATE: u32 = 26;
    pub const KP_CLEAR_KEY: u32 = 27;
    pub const KP_PUB_EX_LEN: u32 = 28;
    pub const KP_PUB_EX_VAL: u32 = 29;
    pub const KP_KEYVAL: u32 = 30;
    pub const KP_ADMIN_PIN: u32 = 31;
    pub const KP_KEYEXCHANGE_PIN: u32 = 32;
    pub const KP_SIGNATURE_PIN: u32 = 33;
    pub const KP_PREHASH: u32 = 34;
    pub const KP_ROUNDS: u32 = 35;
    pub const KP_OAEP_PARAMS: u32 = 36;
    pub const KP_CMS_KEY_INFO: u32 = 37;
    pub const KP_CMS_DH_KEY_INFO: u32 = 38;
    pub const KP_PUB_PARAMS: u32 = 39;
    pub const KP_VERIFY_PARAMS: u32 = 40;
    pub const KP_HIGHEST_VERSION: u32 = 41;
    pub const KP_GET_USE_COUNT: u32 = 42;
    pub const KP_PIN_ID: u32 = 43;
    pub const KP_PIN_INFO: u32 = 44;
    pub const PKCS5_PADDING: u32 = 1;
    pub const RANDOM_PADDING: u32 = 2;
    pub const ZERO_PADDING: u32 = 3;
    pub const CRYPT_MODE_CBC: u32 = 1;
    pub const CRYPT_MODE_ECB: u32 = 2;
    pub const CRYPT_MODE_OFB: u32 = 3;
    pub const CRYPT_MODE_CFB: u32 = 4;
    pub const CRYPT_MODE_CTS: u32 = 5;
    pub const CRYPT_ENCRYPT: u32 = 1;
    pub const CRYPT_DECRYPT: u32 = 2;
    pub const CRYPT_EXPORT: u32 = 4;
    pub const CRYPT_READ: u32 = 8;
    pub const CRYPT_WRITE: u32 = 16;
    pub const CRYPT_MAC: u32 = 32;
    pub const CRYPT_EXPORT_KEY: u32 = 64;
    pub const CRYPT_IMPORT_KEY: u32 = 128;
    pub const CRYPT_ARCHIVE: u32 = 256;
    pub const HP_ALGID: u32 = 1;
    pub const HP_HASHVAL: u32 = 2;
    pub const HP_HASHSIZE: u32 = 4;
    pub const HP_HMAC_INFO: u32 = 5;
    pub const HP_TLS1PRF_LABEL: u32 = 6;
    pub const HP_TLS1PRF_SEED: u32 = 7;
    pub const CRYPT_FAILED: u32 = 0;
    pub const CRYPT_SUCCEED: u32 = 1;
    pub const PP_ENUMALGS: u32 = 1;
    pub const PP_ENUMCONTAINERS: u32 = 2;
    pub const PP_IMPTYPE: u32 = 3;
    pub const PP_NAME: u32 = 4;
    pub const PP_VERSION: u32 = 5;
    pub const PP_CONTAINER: u32 = 6;
    pub const PP_CHANGE_PASSWORD: u32 = 7;
    pub const PP_KEYSET_SEC_DESCR: u32 = 8;
    pub const PP_CERTCHAIN: u32 = 9;
    pub const PP_KEY_TYPE_SUBTYPE: u32 = 10;
    pub const PP_PROVTYPE: u32 = 16;
    pub const PP_KEYSTORAGE: u32 = 17;
    pub const PP_APPLI_CERT: u32 = 18;
    pub const PP_SYM_KEYSIZE: u32 = 19;
    pub const PP_SESSION_KEYSIZE: u32 = 20;
    pub const PP_UI_PROMPT: u32 = 21;
    pub const PP_ENUMALGS_EX: u32 = 22;
    pub const PP_ENUMMANDROOTS: u32 = 25;
    pub const PP_ENUMELECTROOTS: u32 = 26;
    pub const PP_KEYSET_TYPE: u32 = 27;
    pub const PP_ADMIN_PIN: u32 = 31;
    pub const PP_KEYEXCHANGE_PIN: u32 = 32;
    pub const PP_SIGNATURE_PIN: u32 = 33;
    pub const PP_SIG_KEYSIZE_INC: u32 = 34;
    pub const PP_KEYX_KEYSIZE_INC: u32 = 35;
    pub const PP_UNIQUE_CONTAINER: u32 = 36;
    pub const PP_SGC_INFO: u32 = 37;
    pub const PP_USE_HARDWARE_RNG: u32 = 38;
    pub const PP_KEYSPEC: u32 = 39;
    pub const PP_ENUMEX_SIGNING_PROT: u32 = 40;
    pub const PP_CRYPT_COUNT_KEY_USE: u32 = 41;
    pub const PP_USER_CERTSTORE: u32 = 42;
    pub const PP_SMARTCARD_READER: u32 = 43;
    pub const PP_SMARTCARD_GUID: u32 = 45;
    pub const PP_ROOT_CERTSTORE: u32 = 46;
    pub const PP_SMARTCARD_READER_ICON: u32 = 47;
    pub const CRYPT_FIRST: u32 = 1;
    pub const CRYPT_NEXT: u32 = 2;
    pub const CRYPT_SGC_ENUM: u32 = 4;
    pub const CRYPT_IMPL_HARDWARE: u32 = 1;
    pub const CRYPT_IMPL_SOFTWARE: u32 = 2;
    pub const CRYPT_IMPL_MIXED: u32 = 3;
    pub const CRYPT_IMPL_UNKNOWN: u32 = 4;
    pub const CRYPT_IMPL_REMOVABLE: u32 = 8;
    pub const CRYPT_SEC_DESCR: u32 = 1;
    pub const CRYPT_PSTORE: u32 = 2;
    pub const CRYPT_UI_PROMPT: u32 = 4;
    pub const CRYPT_FLAG_PCT1: u32 = 1;
    pub const CRYPT_FLAG_SSL2: u32 = 2;
    pub const CRYPT_FLAG_SSL3: u32 = 4;
    pub const CRYPT_FLAG_TLS1: u32 = 8;
    pub const CRYPT_FLAG_IPSEC: u32 = 16;
    pub const CRYPT_FLAG_SIGNING: u32 = 32;
    pub const CRYPT_SGC: u32 = 1;
    pub const CRYPT_FASTSGC: u32 = 2;
    pub const PP_CLIENT_HWND: u32 = 1;
    pub const PP_CONTEXT_INFO: u32 = 11;
    pub const PP_KEYEXCHANGE_KEYSIZE: u32 = 12;
    pub const PP_SIGNATURE_KEYSIZE: u32 = 13;
    pub const PP_KEYEXCHANGE_ALG: u32 = 14;
    pub const PP_SIGNATURE_ALG: u32 = 15;
    pub const PP_DELETEKEY: u32 = 24;
    pub const PP_PIN_PROMPT_STRING: u32 = 44;
    pub const PP_SECURE_KEYEXCHANGE_PIN: u32 = 47;
    pub const PP_SECURE_SIGNATURE_PIN: u32 = 48;
    pub const PP_DISMISS_PIN_UI_SEC: u32 = 49;
    pub const PROV_RSA_FULL: u32 = 1;
    pub const PROV_RSA_SIG: u32 = 2;
    pub const PROV_DSS: u32 = 3;
    pub const PROV_FORTEZZA: u32 = 4;
    pub const PROV_MS_EXCHANGE: u32 = 5;
    pub const PROV_SSL: u32 = 6;
    pub const PROV_RSA_SCHANNEL: u32 = 12;
    pub const PROV_DSS_DH: u32 = 13;
    pub const PROV_EC_ECDSA_SIG: u32 = 14;
    pub const PROV_EC_ECNRA_SIG: u32 = 15;
    pub const PROV_EC_ECDSA_FULL: u32 = 16;
    pub const PROV_EC_ECNRA_FULL: u32 = 17;
    pub const PROV_DH_SCHANNEL: u32 = 18;
    pub const PROV_SPYRUS_LYNKS: u32 = 20;
    pub const PROV_RNG: u32 = 21;
    pub const PROV_INTEL_SEC: u32 = 22;
    pub const PROV_REPLACE_OWF: u32 = 23;
    pub const PROV_RSA_AES: u32 = 24;
    pub const MS_DEF_PROV_A: &[u8; 43usize] = b"Microsoft Base Cryptographic Provider v1.0\0";
    pub const MS_DEF_PROV_W: &[u8; 43usize] = b"Microsoft Base Cryptographic Provider v1.0\0";
    pub const MS_DEF_PROV: &[u8; 43usize] = b"Microsoft Base Cryptographic Provider v1.0\0";
    pub const MS_ENHANCED_PROV_A: &[u8; 47usize] =
        b"Microsoft Enhanced Cryptographic Provider v1.0\0";
    pub const MS_ENHANCED_PROV_W: &[u8; 47usize] =
        b"Microsoft Enhanced Cryptographic Provider v1.0\0";
    pub const MS_ENHANCED_PROV: &[u8; 47usize] =
        b"Microsoft Enhanced Cryptographic Provider v1.0\0";
    pub const MS_STRONG_PROV_A: &[u8; 40usize] = b"Microsoft Strong Cryptographic Provider\0";
    pub const MS_STRONG_PROV_W: &[u8; 40usize] = b"Microsoft Strong Cryptographic Provider\0";
    pub const MS_STRONG_PROV: &[u8; 40usize] = b"Microsoft Strong Cryptographic Provider\0";
    pub const MS_DEF_RSA_SIG_PROV_A: &[u8; 47usize] =
        b"Microsoft RSA Signature Cryptographic Provider\0";
    pub const MS_DEF_RSA_SIG_PROV_W: &[u8; 47usize] =
        b"Microsoft RSA Signature Cryptographic Provider\0";
    pub const MS_DEF_RSA_SIG_PROV: &[u8; 47usize] =
        b"Microsoft RSA Signature Cryptographic Provider\0";
    pub const MS_DEF_RSA_SCHANNEL_PROV_A: &[u8; 46usize] =
        b"Microsoft RSA SChannel Cryptographic Provider\0";
    pub const MS_DEF_RSA_SCHANNEL_PROV_W: &[u8; 46usize] =
        b"Microsoft RSA SChannel Cryptographic Provider\0";
    pub const MS_DEF_RSA_SCHANNEL_PROV: &[u8; 46usize] =
        b"Microsoft RSA SChannel Cryptographic Provider\0";
    pub const MS_DEF_DSS_PROV_A: &[u8; 42usize] = b"Microsoft Base DSS Cryptographic Provider\0";
    pub const MS_DEF_DSS_PROV_W: &[u8; 42usize] = b"Microsoft Base DSS Cryptographic Provider\0";
    pub const MS_DEF_DSS_PROV: &[u8; 42usize] = b"Microsoft Base DSS Cryptographic Provider\0";
    pub const MS_DEF_DSS_DH_PROV_A: &[u8; 61usize] =
        b"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\0";
    pub const MS_DEF_DSS_DH_PROV_W: &[u8; 61usize] =
        b"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\0";
    pub const MS_DEF_DSS_DH_PROV: &[u8; 61usize] =
        b"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\0";
    pub const MS_ENH_DSS_DH_PROV_A: &[u8; 65usize] =
        b"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\0";
    pub const MS_ENH_DSS_DH_PROV_W: &[u8; 65usize] =
        b"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\0";
    pub const MS_ENH_DSS_DH_PROV: &[u8; 65usize] =
        b"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\0";
    pub const MS_DEF_DH_SCHANNEL_PROV_A: &[u8; 45usize] =
        b"Microsoft DH SChannel Cryptographic Provider\0";
    pub const MS_DEF_DH_SCHANNEL_PROV_W: &[u8; 45usize] =
        b"Microsoft DH SChannel Cryptographic Provider\0";
    pub const MS_DEF_DH_SCHANNEL_PROV: &[u8; 45usize] =
        b"Microsoft DH SChannel Cryptographic Provider\0";
    pub const MS_SCARD_PROV_A: &[u8; 42usize] = b"Microsoft Base Smart Card Crypto Provider\0";
    pub const MS_SCARD_PROV_W: &[u8; 42usize] = b"Microsoft Base Smart Card Crypto Provider\0";
    pub const MS_SCARD_PROV: &[u8; 42usize] = b"Microsoft Base Smart Card Crypto Provider\0";
    pub const MS_ENH_RSA_AES_PROV_A: &[u8; 54usize] =
        b"Microsoft Enhanced RSA and AES Cryptographic Provider\0";
    pub const MS_ENH_RSA_AES_PROV_W: &[u8; 54usize] =
        b"Microsoft Enhanced RSA and AES Cryptographic Provider\0";
    pub const MS_ENH_RSA_AES_PROV_XP_A: &[u8; 66usize] =
        b"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)\0";
    pub const MS_ENH_RSA_AES_PROV_XP_W: &[u8; 66usize] =
        b"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)\0";
    pub const MS_ENH_RSA_AES_PROV_XP: &[u8; 66usize] =
        b"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)\0";
    pub const MS_ENH_RSA_AES_PROV: &[u8; 54usize] =
        b"Microsoft Enhanced RSA and AES Cryptographic Provider\0";
    pub const MAXUIDLEN: u32 = 64;
    pub const EXPO_OFFLOAD_REG_VALUE: &[u8; 12usize] = b"ExpoOffload\0";
    pub const EXPO_OFFLOAD_FUNC_NAME: &[u8; 15usize] = b"OffloadModExpo\0";
    pub const szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS: &[u8; 41usize] =
        b"Software\\Policies\\Microsoft\\Cryptography\0";
    pub const szKEY_CACHE_ENABLED: &[u8; 17usize] = b"CachePrivateKeys\0";
    pub const szKEY_CACHE_SECONDS: &[u8; 26usize] = b"PrivateKeyLifetimeSeconds\0";
    pub const szPRIV_KEY_CACHE_MAX_ITEMS: &[u8; 21usize] = b"PrivKeyCacheMaxItems\0";
    pub const cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT: u32 = 20;
    pub const szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS: &[u8; 33usize] =
        b"PrivKeyCachePurgeIntervalSeconds\0";
    pub const cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT: u32 = 86400;
    pub const CUR_BLOB_VERSION: u32 = 2;
    pub const SCHANNEL_MAC_KEY: u32 = 0;
    pub const SCHANNEL_ENC_KEY: u32 = 1;
    pub const INTERNATIONAL_USAGE: u32 = 1;
    pub const BCRYPT_OBJECT_ALIGNMENT: u32 = 16;
    pub const BCRYPT_KDF_HASH: &[u8; 5usize] = b"HASH\0";
    pub const BCRYPT_KDF_HMAC: &[u8; 5usize] = b"HMAC\0";
    pub const BCRYPT_KDF_TLS_PRF: &[u8; 8usize] = b"TLS_PRF\0";
    pub const BCRYPT_KDF_SP80056A_CONCAT: &[u8; 17usize] = b"SP800_56A_CONCAT\0";
    pub const BCRYPT_KDF_RAW_SECRET: &[u8; 9usize] = b"TRUNCATE\0";
    pub const BCRYPT_KDF_HKDF: &[u8; 5usize] = b"HKDF\0";
    pub const KDF_HASH_ALGORITHM: u32 = 0;
    pub const KDF_SECRET_PREPEND: u32 = 1;
    pub const KDF_SECRET_APPEND: u32 = 2;
    pub const KDF_HMAC_KEY: u32 = 3;
    pub const KDF_TLS_PRF_LABEL: u32 = 4;
    pub const KDF_TLS_PRF_SEED: u32 = 5;
    pub const KDF_SECRET_HANDLE: u32 = 6;
    pub const KDF_TLS_PRF_PROTOCOL: u32 = 7;
    pub const KDF_ALGORITHMID: u32 = 8;
    pub const KDF_PARTYUINFO: u32 = 9;
    pub const KDF_PARTYVINFO: u32 = 10;
    pub const KDF_SUPPPUBINFO: u32 = 11;
    pub const KDF_SUPPPRIVINFO: u32 = 12;
    pub const KDF_LABEL: u32 = 13;
    pub const KDF_CONTEXT: u32 = 14;
    pub const KDF_SALT: u32 = 15;
    pub const KDF_ITERATION_COUNT: u32 = 16;
    pub const KDF_GENERIC_PARAMETER: u32 = 17;
    pub const KDF_KEYBITLENGTH: u32 = 18;
    pub const KDF_HKDF_SALT: u32 = 19;
    pub const KDF_HKDF_INFO: u32 = 20;
    pub const KDF_USE_SECRET_AS_HMAC_KEY_FLAG: u32 = 1;
    pub const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION: u32 = 1;
    pub const BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG: u32 = 1;
    pub const BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG: u32 = 2;
    pub const BCRYPT_OPAQUE_KEY_BLOB: &[u8; 14usize] = b"OpaqueKeyBlob\0";
    pub const BCRYPT_KEY_DATA_BLOB: &[u8; 12usize] = b"KeyDataBlob\0";
    pub const BCRYPT_AES_WRAP_KEY_BLOB: &[u8; 19usize] = b"Rfc3565KeyWrapBlob\0";
    pub const BCRYPT_OBJECT_LENGTH: &[u8; 13usize] = b"ObjectLength\0";
    pub const BCRYPT_ALGORITHM_NAME: &[u8; 14usize] = b"AlgorithmName\0";
    pub const BCRYPT_PROVIDER_HANDLE: &[u8; 15usize] = b"ProviderHandle\0";
    pub const BCRYPT_CHAINING_MODE: &[u8; 13usize] = b"ChainingMode\0";
    pub const BCRYPT_BLOCK_LENGTH: &[u8; 12usize] = b"BlockLength\0";
    pub const BCRYPT_KEY_LENGTH: &[u8; 10usize] = b"KeyLength\0";
    pub const BCRYPT_KEY_OBJECT_LENGTH: &[u8; 16usize] = b"KeyObjectLength\0";
    pub const BCRYPT_KEY_STRENGTH: &[u8; 12usize] = b"KeyStrength\0";
    pub const BCRYPT_KEY_LENGTHS: &[u8; 11usize] = b"KeyLengths\0";
    pub const BCRYPT_BLOCK_SIZE_LIST: &[u8; 14usize] = b"BlockSizeList\0";
    pub const BCRYPT_EFFECTIVE_KEY_LENGTH: &[u8; 19usize] = b"EffectiveKeyLength\0";
    pub const BCRYPT_HASH_LENGTH: &[u8; 17usize] = b"HashDigestLength\0";
    pub const BCRYPT_HASH_OID_LIST: &[u8; 12usize] = b"HashOIDList\0";
    pub const BCRYPT_PADDING_SCHEMES: &[u8; 15usize] = b"PaddingSchemes\0";
    pub const BCRYPT_SIGNATURE_LENGTH: &[u8; 16usize] = b"SignatureLength\0";
    pub const BCRYPT_HASH_BLOCK_LENGTH: &[u8; 16usize] = b"HashBlockLength\0";
    pub const BCRYPT_AUTH_TAG_LENGTH: &[u8; 14usize] = b"AuthTagLength\0";
    pub const BCRYPT_PRIMITIVE_TYPE: &[u8; 14usize] = b"PrimitiveType\0";
    pub const BCRYPT_IS_KEYED_HASH: &[u8; 12usize] = b"IsKeyedHash\0";
    pub const BCRYPT_IS_REUSABLE_HASH: &[u8; 15usize] = b"IsReusableHash\0";
    pub const BCRYPT_MESSAGE_BLOCK_LENGTH: &[u8; 19usize] = b"MessageBlockLength\0";
    pub const BCRYPT_PUBLIC_KEY_LENGTH: &[u8; 16usize] = b"PublicKeyLength\0";
    pub const BCRYPT_PCP_PLATFORM_TYPE_PROPERTY: &[u8; 18usize] = b"PCP_PLATFORM_TYPE\0";
    pub const BCRYPT_PCP_PROVIDER_VERSION_PROPERTY: &[u8; 21usize] = b"PCP_PROVIDER_VERSION\0";
    pub const BCRYPT_MULTI_OBJECT_LENGTH: &[u8; 18usize] = b"MultiObjectLength\0";
    pub const BCRYPT_IS_IFX_TPM_WEAK_KEY: &[u8; 16usize] = b"IsIfxTpmWeakKey\0";
    pub const BCRYPT_HKDF_HASH_ALGORITHM: &[u8; 18usize] = b"HkdfHashAlgorithm\0";
    pub const BCRYPT_HKDF_SALT_AND_FINALIZE: &[u8; 20usize] = b"HkdfSaltAndFinalize\0";
    pub const BCRYPT_HKDF_PRK_AND_FINALIZE: &[u8; 19usize] = b"HkdfPrkAndFinalize\0";
    pub const BCRYPT_INITIALIZATION_VECTOR: &[u8; 3usize] = b"IV\0";
    pub const BCRYPT_CHAIN_MODE_NA: &[u8; 16usize] = b"ChainingModeN/A\0";
    pub const BCRYPT_CHAIN_MODE_CBC: &[u8; 16usize] = b"ChainingModeCBC\0";
    pub const BCRYPT_CHAIN_MODE_ECB: &[u8; 16usize] = b"ChainingModeECB\0";
    pub const BCRYPT_CHAIN_MODE_CFB: &[u8; 16usize] = b"ChainingModeCFB\0";
    pub const BCRYPT_CHAIN_MODE_CCM: &[u8; 16usize] = b"ChainingModeCCM\0";
    pub const BCRYPT_CHAIN_MODE_GCM: &[u8; 16usize] = b"ChainingModeGCM\0";
    pub const BCRYPT_SUPPORTED_PAD_ROUTER: u32 = 1;
    pub const BCRYPT_SUPPORTED_PAD_PKCS1_ENC: u32 = 2;
    pub const BCRYPT_SUPPORTED_PAD_PKCS1_SIG: u32 = 4;
    pub const BCRYPT_SUPPORTED_PAD_OAEP: u32 = 8;
    pub const BCRYPT_SUPPORTED_PAD_PSS: u32 = 16;
    pub const BCRYPT_PROV_DISPATCH: u32 = 1;
    pub const BCRYPT_BLOCK_PADDING: u32 = 1;
    pub const BCRYPT_PAD_NONE: u32 = 1;
    pub const BCRYPT_PAD_PKCS1: u32 = 2;
    pub const BCRYPT_PAD_OAEP: u32 = 4;
    pub const BCRYPT_PAD_PSS: u32 = 8;
    pub const BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID: u32 = 16;
    pub const BCRYPTBUFFER_VERSION: u32 = 0;
    pub const BCRYPT_PUBLIC_KEY_BLOB: &[u8; 11usize] = b"PUBLICBLOB\0";
    pub const BCRYPT_PRIVATE_KEY_BLOB: &[u8; 12usize] = b"PRIVATEBLOB\0";
    pub const BCRYPT_RSAPUBLIC_BLOB: &[u8; 14usize] = b"RSAPUBLICBLOB\0";
    pub const BCRYPT_RSAPRIVATE_BLOB: &[u8; 15usize] = b"RSAPRIVATEBLOB\0";
    pub const LEGACY_RSAPUBLIC_BLOB: &[u8; 15usize] = b"CAPIPUBLICBLOB\0";
    pub const LEGACY_RSAPRIVATE_BLOB: &[u8; 16usize] = b"CAPIPRIVATEBLOB\0";
    pub const BCRYPT_RSAPUBLIC_MAGIC: u32 = 826364754;
    pub const BCRYPT_RSAPRIVATE_MAGIC: u32 = 843141970;
    pub const BCRYPT_RSAFULLPRIVATE_BLOB: &[u8; 19usize] = b"RSAFULLPRIVATEBLOB\0";
    pub const BCRYPT_RSAFULLPRIVATE_MAGIC: u32 = 859919186;
    pub const BCRYPT_GLOBAL_PARAMETERS: &[u8; 21usize] = b"SecretAgreementParam\0";
    pub const BCRYPT_PRIVATE_KEY: &[u8; 11usize] = b"PrivKeyVal\0";
    pub const BCRYPT_ECCPUBLIC_BLOB: &[u8; 14usize] = b"ECCPUBLICBLOB\0";
    pub const BCRYPT_ECCPRIVATE_BLOB: &[u8; 15usize] = b"ECCPRIVATEBLOB\0";
    pub const BCRYPT_ECCFULLPUBLIC_BLOB: &[u8; 18usize] = b"ECCFULLPUBLICBLOB\0";
    pub const BCRYPT_ECCFULLPRIVATE_BLOB: &[u8; 19usize] = b"ECCFULLPRIVATEBLOB\0";
    pub const SSL_ECCPUBLIC_BLOB: &[u8; 17usize] = b"SSLECCPUBLICBLOB\0";
    pub const BCRYPT_ECDH_PUBLIC_P256_MAGIC: u32 = 827016005;
    pub const BCRYPT_ECDH_PRIVATE_P256_MAGIC: u32 = 843793221;
    pub const BCRYPT_ECDH_PUBLIC_P384_MAGIC: u32 = 860570437;
    pub const BCRYPT_ECDH_PRIVATE_P384_MAGIC: u32 = 877347653;
    pub const BCRYPT_ECDH_PUBLIC_P521_MAGIC: u32 = 894124869;
    pub const BCRYPT_ECDH_PRIVATE_P521_MAGIC: u32 = 910902085;
    pub const BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC: u32 = 1347109701;
    pub const BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC: u32 = 1447772997;
    pub const BCRYPT_ECDSA_PUBLIC_P256_MAGIC: u32 = 827540293;
    pub const BCRYPT_ECDSA_PRIVATE_P256_MAGIC: u32 = 844317509;
    pub const BCRYPT_ECDSA_PUBLIC_P384_MAGIC: u32 = 861094725;
    pub const BCRYPT_ECDSA_PRIVATE_P384_MAGIC: u32 = 877871941;
    pub const BCRYPT_ECDSA_PUBLIC_P521_MAGIC: u32 = 894649157;
    pub const BCRYPT_ECDSA_PRIVATE_P521_MAGIC: u32 = 911426373;
    pub const BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC: u32 = 1346650949;
    pub const BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC: u32 = 1447314245;
    pub const BCRYPT_ECC_FULLKEY_BLOB_V1: u32 = 1;
    pub const BCRYPT_DH_PUBLIC_BLOB: &[u8; 13usize] = b"DHPUBLICBLOB\0";
    pub const BCRYPT_DH_PRIVATE_BLOB: &[u8; 14usize] = b"DHPRIVATEBLOB\0";
    pub const LEGACY_DH_PUBLIC_BLOB: &[u8; 17usize] = b"CAPIDHPUBLICBLOB\0";
    pub const LEGACY_DH_PRIVATE_BLOB: &[u8; 18usize] = b"CAPIDHPRIVATEBLOB\0";
    pub const BCRYPT_DH_PUBLIC_MAGIC: u32 = 1112557636;
    pub const BCRYPT_DH_PRIVATE_MAGIC: u32 = 1448101956;
    pub const BCRYPT_DH_PARAMETERS: &[u8; 13usize] = b"DHParameters\0";
    pub const BCRYPT_DH_PARAMETERS_MAGIC: u32 = 1297107012;
    pub const BCRYPT_DSA_PUBLIC_BLOB: &[u8; 14usize] = b"DSAPUBLICBLOB\0";
    pub const BCRYPT_DSA_PRIVATE_BLOB: &[u8; 15usize] = b"DSAPRIVATEBLOB\0";
    pub const LEGACY_DSA_PUBLIC_BLOB: &[u8; 18usize] = b"CAPIDSAPUBLICBLOB\0";
    pub const LEGACY_DSA_PRIVATE_BLOB: &[u8; 19usize] = b"CAPIDSAPRIVATEBLOB\0";
    pub const LEGACY_DSA_V2_PUBLIC_BLOB: &[u8; 20usize] = b"V2CAPIDSAPUBLICBLOB\0";
    pub const LEGACY_DSA_V2_PRIVATE_BLOB: &[u8; 21usize] = b"V2CAPIDSAPRIVATEBLOB\0";
    pub const BCRYPT_DSA_PUBLIC_MAGIC: u32 = 1112560452;
    pub const BCRYPT_DSA_PRIVATE_MAGIC: u32 = 1448104772;
    pub const BCRYPT_DSA_PUBLIC_MAGIC_V2: u32 = 843206724;
    pub const BCRYPT_DSA_PRIVATE_MAGIC_V2: u32 = 844517444;
    pub const BCRYPT_KEY_DATA_BLOB_MAGIC: u32 = 1296188491;
    pub const BCRYPT_KEY_DATA_BLOB_VERSION1: u32 = 1;
    pub const BCRYPT_DSA_PARAMETERS: &[u8; 14usize] = b"DSAParameters\0";
    pub const BCRYPT_DSA_PARAMETERS_MAGIC: u32 = 1297109828;
    pub const BCRYPT_DSA_PARAMETERS_MAGIC_V2: u32 = 843927620;
    pub const BCRYPT_ECC_PARAMETERS: &[u8; 14usize] = b"ECCParameters\0";
    pub const BCRYPT_ECC_CURVE_NAME: &[u8; 13usize] = b"ECCCurveName\0";
    pub const BCRYPT_ECC_CURVE_NAME_LIST: &[u8; 17usize] = b"ECCCurveNameList\0";
    pub const BCRYPT_ECC_PARAMETERS_MAGIC: u32 = 1346585413;
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP160R1: &[u8; 16usize] = b"brainpoolP160r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP160T1: &[u8; 16usize] = b"brainpoolP160t1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP192R1: &[u8; 16usize] = b"brainpoolP192r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP192T1: &[u8; 16usize] = b"brainpoolP192t1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP224R1: &[u8; 16usize] = b"brainpoolP224r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP224T1: &[u8; 16usize] = b"brainpoolP224t1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP256R1: &[u8; 16usize] = b"brainpoolP256r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP256T1: &[u8; 16usize] = b"brainpoolP256t1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP320R1: &[u8; 16usize] = b"brainpoolP320r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP320T1: &[u8; 16usize] = b"brainpoolP320t1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP384R1: &[u8; 16usize] = b"brainpoolP384r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP384T1: &[u8; 16usize] = b"brainpoolP384t1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP512R1: &[u8; 16usize] = b"brainpoolP512r1\0";
    pub const BCRYPT_ECC_CURVE_BRAINPOOLP512T1: &[u8; 16usize] = b"brainpoolP512t1\0";
    pub const BCRYPT_ECC_CURVE_25519: &[u8; 11usize] = b"curve25519\0";
    pub const BCRYPT_ECC_CURVE_EC192WAPI: &[u8; 10usize] = b"ec192wapi\0";
    pub const BCRYPT_ECC_CURVE_NISTP192: &[u8; 9usize] = b"nistP192\0";
    pub const BCRYPT_ECC_CURVE_NISTP224: &[u8; 9usize] = b"nistP224\0";
    pub const BCRYPT_ECC_CURVE_NISTP256: &[u8; 9usize] = b"nistP256\0";
    pub const BCRYPT_ECC_CURVE_NISTP384: &[u8; 9usize] = b"nistP384\0";
    pub const BCRYPT_ECC_CURVE_NISTP521: &[u8; 9usize] = b"nistP521\0";
    pub const BCRYPT_ECC_CURVE_NUMSP256T1: &[u8; 11usize] = b"numsP256t1\0";
    pub const BCRYPT_ECC_CURVE_NUMSP384T1: &[u8; 11usize] = b"numsP384t1\0";
    pub const BCRYPT_ECC_CURVE_NUMSP512T1: &[u8; 11usize] = b"numsP512t1\0";
    pub const BCRYPT_ECC_CURVE_SECP160K1: &[u8; 10usize] = b"secP160k1\0";
    pub const BCRYPT_ECC_CURVE_SECP160R1: &[u8; 10usize] = b"secP160r1\0";
    pub const BCRYPT_ECC_CURVE_SECP160R2: &[u8; 10usize] = b"secP160r2\0";
    pub const BCRYPT_ECC_CURVE_SECP192K1: &[u8; 10usize] = b"secP192k1\0";
    pub const BCRYPT_ECC_CURVE_SECP192R1: &[u8; 10usize] = b"secP192r1\0";
    pub const BCRYPT_ECC_CURVE_SECP224K1: &[u8; 10usize] = b"secP224k1\0";
    pub const BCRYPT_ECC_CURVE_SECP224R1: &[u8; 10usize] = b"secP224r1\0";
    pub const BCRYPT_ECC_CURVE_SECP256K1: &[u8; 10usize] = b"secP256k1\0";
    pub const BCRYPT_ECC_CURVE_SECP256R1: &[u8; 10usize] = b"secP256r1\0";
    pub const BCRYPT_ECC_CURVE_SECP384R1: &[u8; 10usize] = b"secP384r1\0";
    pub const BCRYPT_ECC_CURVE_SECP521R1: &[u8; 10usize] = b"secP521r1\0";
    pub const BCRYPT_ECC_CURVE_WTLS7: &[u8; 6usize] = b"wtls7\0";
    pub const BCRYPT_ECC_CURVE_WTLS9: &[u8; 6usize] = b"wtls9\0";
    pub const BCRYPT_ECC_CURVE_WTLS12: &[u8; 7usize] = b"wtls12\0";
    pub const BCRYPT_ECC_CURVE_X962P192V1: &[u8; 11usize] = b"x962P192v1\0";
    pub const BCRYPT_ECC_CURVE_X962P192V2: &[u8; 11usize] = b"x962P192v2\0";
    pub const BCRYPT_ECC_CURVE_X962P192V3: &[u8; 11usize] = b"x962P192v3\0";
    pub const BCRYPT_ECC_CURVE_X962P239V1: &[u8; 11usize] = b"x962P239v1\0";
    pub const BCRYPT_ECC_CURVE_X962P239V2: &[u8; 11usize] = b"x962P239v2\0";
    pub const BCRYPT_ECC_CURVE_X962P239V3: &[u8; 11usize] = b"x962P239v3\0";
    pub const BCRYPT_ECC_CURVE_X962P256V1: &[u8; 11usize] = b"x962P256v1\0";
    pub const MS_PRIMITIVE_PROVIDER: &[u8; 29usize] = b"Microsoft Primitive Provider\0";
    pub const MS_PLATFORM_CRYPTO_PROVIDER: &[u8; 35usize] = b"Microsoft Platform Crypto Provider\0";
    pub const BCRYPT_RSA_ALGORITHM: &[u8; 4usize] = b"RSA\0";
    pub const BCRYPT_RSA_SIGN_ALGORITHM: &[u8; 9usize] = b"RSA_SIGN\0";
    pub const BCRYPT_DH_ALGORITHM: &[u8; 3usize] = b"DH\0";
    pub const BCRYPT_DSA_ALGORITHM: &[u8; 4usize] = b"DSA\0";
    pub const BCRYPT_RC2_ALGORITHM: &[u8; 4usize] = b"RC2\0";
    pub const BCRYPT_RC4_ALGORITHM: &[u8; 4usize] = b"RC4\0";
    pub const BCRYPT_AES_ALGORITHM: &[u8; 4usize] = b"AES\0";
    pub const BCRYPT_DES_ALGORITHM: &[u8; 4usize] = b"DES\0";
    pub const BCRYPT_DESX_ALGORITHM: &[u8; 5usize] = b"DESX\0";
    pub const BCRYPT_3DES_ALGORITHM: &[u8; 5usize] = b"3DES\0";
    pub const BCRYPT_3DES_112_ALGORITHM: &[u8; 9usize] = b"3DES_112\0";
    pub const BCRYPT_MD2_ALGORITHM: &[u8; 4usize] = b"MD2\0";
    pub const BCRYPT_MD4_ALGORITHM: &[u8; 4usize] = b"MD4\0";
    pub const BCRYPT_MD5_ALGORITHM: &[u8; 4usize] = b"MD5\0";
    pub const BCRYPT_SHA1_ALGORITHM: &[u8; 5usize] = b"SHA1\0";
    pub const BCRYPT_SHA256_ALGORITHM: &[u8; 7usize] = b"SHA256\0";
    pub const BCRYPT_SHA384_ALGORITHM: &[u8; 7usize] = b"SHA384\0";
    pub const BCRYPT_SHA512_ALGORITHM: &[u8; 7usize] = b"SHA512\0";
    pub const BCRYPT_AES_GMAC_ALGORITHM: &[u8; 9usize] = b"AES-GMAC\0";
    pub const BCRYPT_AES_CMAC_ALGORITHM: &[u8; 9usize] = b"AES-CMAC\0";
    pub const BCRYPT_ECDSA_P256_ALGORITHM: &[u8; 11usize] = b"ECDSA_P256\0";
    pub const BCRYPT_ECDSA_P384_ALGORITHM: &[u8; 11usize] = b"ECDSA_P384\0";
    pub const BCRYPT_ECDSA_P521_ALGORITHM: &[u8; 11usize] = b"ECDSA_P521\0";
    pub const BCRYPT_ECDH_P256_ALGORITHM: &[u8; 10usize] = b"ECDH_P256\0";
    pub const BCRYPT_ECDH_P384_ALGORITHM: &[u8; 10usize] = b"ECDH_P384\0";
    pub const BCRYPT_ECDH_P521_ALGORITHM: &[u8; 10usize] = b"ECDH_P521\0";
    pub const BCRYPT_RNG_ALGORITHM: &[u8; 4usize] = b"RNG\0";
    pub const BCRYPT_RNG_FIPS186_DSA_ALGORITHM: &[u8; 14usize] = b"FIPS186DSARNG\0";
    pub const BCRYPT_RNG_DUAL_EC_ALGORITHM: &[u8; 10usize] = b"DUALECRNG\0";
    pub const BCRYPT_SP800108_CTR_HMAC_ALGORITHM: &[u8; 19usize] = b"SP800_108_CTR_HMAC\0";
    pub const BCRYPT_SP80056A_CONCAT_ALGORITHM: &[u8; 17usize] = b"SP800_56A_CONCAT\0";
    pub const BCRYPT_PBKDF2_ALGORITHM: &[u8; 7usize] = b"PBKDF2\0";
    pub const BCRYPT_CAPI_KDF_ALGORITHM: &[u8; 9usize] = b"CAPI_KDF\0";
    pub const BCRYPT_TLS1_1_KDF_ALGORITHM: &[u8; 11usize] = b"TLS1_1_KDF\0";
    pub const BCRYPT_TLS1_2_KDF_ALGORITHM: &[u8; 11usize] = b"TLS1_2_KDF\0";
    pub const BCRYPT_ECDSA_ALGORITHM: &[u8; 6usize] = b"ECDSA\0";
    pub const BCRYPT_ECDH_ALGORITHM: &[u8; 5usize] = b"ECDH\0";
    pub const BCRYPT_XTS_AES_ALGORITHM: &[u8; 8usize] = b"XTS-AES\0";
    pub const BCRYPT_HKDF_ALGORITHM: &[u8; 5usize] = b"HKDF\0";
    pub const BCRYPT_CIPHER_INTERFACE: u32 = 1;
    pub const BCRYPT_HASH_INTERFACE: u32 = 2;
    pub const BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE: u32 = 3;
    pub const BCRYPT_SECRET_AGREEMENT_INTERFACE: u32 = 4;
    pub const BCRYPT_SIGNATURE_INTERFACE: u32 = 5;
    pub const BCRYPT_RNG_INTERFACE: u32 = 6;
    pub const BCRYPT_KEY_DERIVATION_INTERFACE: u32 = 7;
    pub const BCRYPT_ALG_HANDLE_HMAC_FLAG: u32 = 8;
    pub const BCRYPT_HASH_REUSABLE_FLAG: u32 = 32;
    pub const BCRYPT_CAPI_AES_FLAG: u32 = 16;
    pub const BCRYPT_MULTI_FLAG: u32 = 64;
    pub const BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG: u32 = 4;
    pub const BCRYPT_BUFFERS_LOCKED_FLAG: u32 = 64;
    pub const BCRYPT_EXTENDED_KEYSIZE: u32 = 128;
    pub const BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS: u32 = 256;
    pub const BCRYPT_CIPHER_OPERATION: u32 = 1;
    pub const BCRYPT_HASH_OPERATION: u32 = 2;
    pub const BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION: u32 = 4;
    pub const BCRYPT_SECRET_AGREEMENT_OPERATION: u32 = 8;
    pub const BCRYPT_SIGNATURE_OPERATION: u32 = 16;
    pub const BCRYPT_RNG_OPERATION: u32 = 32;
    pub const BCRYPT_KEY_DERIVATION_OPERATION: u32 = 64;
    pub const BCRYPT_PUBLIC_KEY_FLAG: u32 = 1;
    pub const BCRYPT_PRIVATE_KEY_FLAG: u32 = 2;
    pub const BCRYPT_NO_KEY_VALIDATION: u32 = 8;
    pub const BCRYPT_RNG_USE_ENTROPY_IN_BUFFER: u32 = 1;
    pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: u32 = 2;
    pub const BCRYPT_HASH_INTERFACE_MAJORVERSION_2: u32 = 2;
    pub const CRYPT_MIN_DEPENDENCIES: u32 = 1;
    pub const CRYPT_PROCESS_ISOLATE: u32 = 65536;
    pub const CRYPT_UM: u32 = 1;
    pub const CRYPT_KM: u32 = 2;
    pub const CRYPT_MM: u32 = 3;
    pub const CRYPT_ANY: u32 = 4;
    pub const CRYPT_OVERWRITE: u32 = 1;
    pub const CRYPT_LOCAL: u32 = 1;
    pub const CRYPT_DOMAIN: u32 = 2;
    pub const CRYPT_EXCLUSIVE: u32 = 1;
    pub const CRYPT_OVERRIDE: u32 = 65536;
    pub const CRYPT_ALL_FUNCTIONS: u32 = 1;
    pub const CRYPT_ALL_PROVIDERS: u32 = 2;
    pub const CRYPT_PRIORITY_TOP: u32 = 0;
    pub const CRYPT_PRIORITY_BOTTOM: u32 = 4294967295;
    pub const CRYPT_DEFAULT_CONTEXT: &[u8; 8usize] = b"Default\0";
    pub const NCRYPT_MAX_KEY_NAME_LENGTH: u32 = 512;
    pub const NCRYPT_MAX_ALG_ID_LENGTH: u32 = 512;
    pub const MS_KEY_STORAGE_PROVIDER: &[u8; 40usize] =
        b"Microsoft Software Key Storage Provider\0";
    pub const MS_SMART_CARD_KEY_STORAGE_PROVIDER: &[u8; 42usize] =
        b"Microsoft Smart Card Key Storage Provider\0";
    pub const MS_PLATFORM_KEY_STORAGE_PROVIDER: &[u8; 35usize] =
        b"Microsoft Platform Crypto Provider\0";
    pub const MS_NGC_KEY_STORAGE_PROVIDER: &[u8; 40usize] =
        b"Microsoft Passport Key Storage Provider\0";
    pub const TPM_RSA_SRK_SEAL_KEY: &[u8; 68usize] =
        b"MICROSOFT_PCP_KSP_RSA_SEAL_KEY_3BD1C4BF-004E-4E2F-8A4D-0BF633DCB074\0";
    pub const NCRYPT_RSA_ALGORITHM: &[u8; 4usize] = b"RSA\0";
    pub const NCRYPT_RSA_SIGN_ALGORITHM: &[u8; 9usize] = b"RSA_SIGN\0";
    pub const NCRYPT_DH_ALGORITHM: &[u8; 3usize] = b"DH\0";
    pub const NCRYPT_DSA_ALGORITHM: &[u8; 4usize] = b"DSA\0";
    pub const NCRYPT_MD2_ALGORITHM: &[u8; 4usize] = b"MD2\0";
    pub const NCRYPT_MD4_ALGORITHM: &[u8; 4usize] = b"MD4\0";
    pub const NCRYPT_MD5_ALGORITHM: &[u8; 4usize] = b"MD5\0";
    pub const NCRYPT_SHA1_ALGORITHM: &[u8; 5usize] = b"SHA1\0";
    pub const NCRYPT_SHA256_ALGORITHM: &[u8; 7usize] = b"SHA256\0";
    pub const NCRYPT_SHA384_ALGORITHM: &[u8; 7usize] = b"SHA384\0";
    pub const NCRYPT_SHA512_ALGORITHM: &[u8; 7usize] = b"SHA512\0";
    pub const NCRYPT_ECDSA_P256_ALGORITHM: &[u8; 11usize] = b"ECDSA_P256\0";
    pub const NCRYPT_ECDSA_P384_ALGORITHM: &[u8; 11usize] = b"ECDSA_P384\0";
    pub const NCRYPT_ECDSA_P521_ALGORITHM: &[u8; 11usize] = b"ECDSA_P521\0";
    pub const NCRYPT_ECDH_P256_ALGORITHM: &[u8; 10usize] = b"ECDH_P256\0";
    pub const NCRYPT_ECDH_P384_ALGORITHM: &[u8; 10usize] = b"ECDH_P384\0";
    pub const NCRYPT_ECDH_P521_ALGORITHM: &[u8; 10usize] = b"ECDH_P521\0";
    pub const NCRYPT_AES_ALGORITHM: &[u8; 4usize] = b"AES\0";
    pub const NCRYPT_RC2_ALGORITHM: &[u8; 4usize] = b"RC2\0";
    pub const NCRYPT_3DES_ALGORITHM: &[u8; 5usize] = b"3DES\0";
    pub const NCRYPT_DES_ALGORITHM: &[u8; 4usize] = b"DES\0";
    pub const NCRYPT_DESX_ALGORITHM: &[u8; 5usize] = b"DESX\0";
    pub const NCRYPT_3DES_112_ALGORITHM: &[u8; 9usize] = b"3DES_112\0";
    pub const NCRYPT_SP800108_CTR_HMAC_ALGORITHM: &[u8; 19usize] = b"SP800_108_CTR_HMAC\0";
    pub const NCRYPT_SP80056A_CONCAT_ALGORITHM: &[u8; 17usize] = b"SP800_56A_CONCAT\0";
    pub const NCRYPT_PBKDF2_ALGORITHM: &[u8; 7usize] = b"PBKDF2\0";
    pub const NCRYPT_CAPI_KDF_ALGORITHM: &[u8; 9usize] = b"CAPI_KDF\0";
    pub const NCRYPT_ECDSA_ALGORITHM: &[u8; 6usize] = b"ECDSA\0";
    pub const NCRYPT_ECDH_ALGORITHM: &[u8; 5usize] = b"ECDH\0";
    pub const NCRYPT_KEY_STORAGE_ALGORITHM: &[u8; 12usize] = b"KEY_STORAGE\0";
    pub const NCRYPT_HMAC_SHA256_ALGORITHM: &[u8; 12usize] = b"HMAC-SHA256\0";
    pub const NCRYPT_CIPHER_INTERFACE: u32 = 1;
    pub const NCRYPT_HASH_INTERFACE: u32 = 2;
    pub const NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE: u32 = 3;
    pub const NCRYPT_SECRET_AGREEMENT_INTERFACE: u32 = 4;
    pub const NCRYPT_SIGNATURE_INTERFACE: u32 = 5;
    pub const NCRYPT_KEY_DERIVATION_INTERFACE: u32 = 7;
    pub const NCRYPT_KEY_STORAGE_INTERFACE: u32 = 65537;
    pub const NCRYPT_SCHANNEL_INTERFACE: u32 = 65538;
    pub const NCRYPT_SCHANNEL_SIGNATURE_INTERFACE: u32 = 65539;
    pub const NCRYPT_KEY_PROTECTION_INTERFACE: u32 = 65540;
    pub const NCRYPT_RSA_ALGORITHM_GROUP: &[u8; 4usize] = b"RSA\0";
    pub const NCRYPT_DH_ALGORITHM_GROUP: &[u8; 3usize] = b"DH\0";
    pub const NCRYPT_DSA_ALGORITHM_GROUP: &[u8; 4usize] = b"DSA\0";
    pub const NCRYPT_ECDSA_ALGORITHM_GROUP: &[u8; 6usize] = b"ECDSA\0";
    pub const NCRYPT_ECDH_ALGORITHM_GROUP: &[u8; 5usize] = b"ECDH\0";
    pub const NCRYPT_AES_ALGORITHM_GROUP: &[u8; 4usize] = b"AES\0";
    pub const NCRYPT_RC2_ALGORITHM_GROUP: &[u8; 4usize] = b"RC2\0";
    pub const NCRYPT_DES_ALGORITHM_GROUP: &[u8; 4usize] = b"DES\0";
    pub const NCRYPT_KEY_DERIVATION_GROUP: &[u8; 15usize] = b"KEY_DERIVATION\0";
    pub const NCRYPTBUFFER_VERSION: u32 = 0;
    pub const NCRYPTBUFFER_EMPTY: u32 = 0;
    pub const NCRYPTBUFFER_DATA: u32 = 1;
    pub const NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING: u32 = 3;
    pub const NCRYPTBUFFER_PROTECTION_FLAGS: u32 = 4;
    pub const NCRYPTBUFFER_SSL_CLIENT_RANDOM: u32 = 20;
    pub const NCRYPTBUFFER_SSL_SERVER_RANDOM: u32 = 21;
    pub const NCRYPTBUFFER_SSL_HIGHEST_VERSION: u32 = 22;
    pub const NCRYPTBUFFER_SSL_CLEAR_KEY: u32 = 23;
    pub const NCRYPTBUFFER_SSL_KEY_ARG_DATA: u32 = 24;
    pub const NCRYPTBUFFER_SSL_SESSION_HASH: u32 = 25;
    pub const NCRYPTBUFFER_PKCS_OID: u32 = 40;
    pub const NCRYPTBUFFER_PKCS_ALG_OID: u32 = 41;
    pub const NCRYPTBUFFER_PKCS_ALG_PARAM: u32 = 42;
    pub const NCRYPTBUFFER_PKCS_ALG_ID: u32 = 43;
    pub const NCRYPTBUFFER_PKCS_ATTRS: u32 = 44;
    pub const NCRYPTBUFFER_PKCS_KEY_NAME: u32 = 45;
    pub const NCRYPTBUFFER_PKCS_SECRET: u32 = 46;
    pub const NCRYPTBUFFER_CERT_BLOB: u32 = 47;
    pub const NCRYPTBUFFER_CLAIM_IDBINDING_NONCE: u32 = 48;
    pub const NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE: u32 = 49;
    pub const NCRYPTBUFFER_KEY_PROPERTY_FLAGS: u32 = 50;
    pub const NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB: u32 = 51;
    pub const NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE: u32 = 52;
    pub const NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED: u32 = 53;
    pub const NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS: u32 = 54;
    pub const NCRYPTBUFFER_ECC_CURVE_NAME: u32 = 60;
    pub const NCRYPTBUFFER_ECC_PARAMETERS: u32 = 61;
    pub const NCRYPTBUFFER_TPM_SEAL_PASSWORD: u32 = 70;
    pub const NCRYPTBUFFER_TPM_SEAL_POLICYINFO: u32 = 71;
    pub const NCRYPTBUFFER_TPM_SEAL_TICKET: u32 = 72;
    pub const NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION: u32 = 73;
    pub const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK: u32 = 80;
    pub const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE: u32 = 81;
    pub const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE: u32 = 82;
    pub const NCRYPT_CIPHER_NO_PADDING_FLAG: u32 = 0;
    pub const NCRYPT_CIPHER_BLOCK_PADDING_FLAG: u32 = 1;
    pub const NCRYPT_CIPHER_OTHER_PADDING_FLAG: u32 = 2;
    pub const NCRYPT_PLATFORM_ATTEST_MAGIC: u32 = 1146110288;
    pub const NCRYPT_KEY_ATTEST_MAGIC: u32 = 1146110283;
    pub const NCRYPT_CLAIM_AUTHORITY_ONLY: u32 = 1;
    pub const NCRYPT_CLAIM_SUBJECT_ONLY: u32 = 2;
    pub const NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY: u32 = 258;
    pub const NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT: u32 = 3;
    pub const NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT: u32 = 4;
    pub const NCRYPT_CLAIM_UNKNOWN: u32 = 4096;
    pub const NCRYPT_CLAIM_PLATFORM: u32 = 65536;
    pub const NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION: u32 = 1;
    pub const NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY: u32 = 2;
    pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0: u32 = 0;
    pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION: u32 = 0;
    pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0: u32 = 0;
    pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION: u32 = 0;
    pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0: u32 = 0;
    pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION: u32 = 0;
    pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0: u32 = 0;
    pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION: u32 = 0;
    pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0: u32 = 0;
    pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION: u32 = 0;
    pub const NCRYPT_NO_PADDING_FLAG: u32 = 1;
    pub const NCRYPT_PAD_PKCS1_FLAG: u32 = 2;
    pub const NCRYPT_PAD_OAEP_FLAG: u32 = 4;
    pub const NCRYPT_PAD_PSS_FLAG: u32 = 8;
    pub const NCRYPT_PAD_CIPHER_FLAG: u32 = 16;
    pub const NCRYPT_ATTESTATION_FLAG: u32 = 32;
    pub const NCRYPT_SEALING_FLAG: u32 = 256;
    pub const NCRYPT_REGISTER_NOTIFY_FLAG: u32 = 1;
    pub const NCRYPT_UNREGISTER_NOTIFY_FLAG: u32 = 2;
    pub const NCRYPT_NO_KEY_VALIDATION: u32 = 8;
    pub const NCRYPT_MACHINE_KEY_FLAG: u32 = 32;
    pub const NCRYPT_SILENT_FLAG: u32 = 64;
    pub const NCRYPT_OVERWRITE_KEY_FLAG: u32 = 128;
    pub const NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG: u32 = 512;
    pub const NCRYPT_DO_NOT_FINALIZE_FLAG: u32 = 1024;
    pub const NCRYPT_EXPORT_LEGACY_FLAG: u32 = 2048;
    pub const NCRYPT_IGNORE_DEVICE_STATE_FLAG: u32 = 4096;
    pub const NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG: u32 = 8192;
    pub const NCRYPT_NO_CACHED_PASSWORD: u32 = 16384;
    pub const NCRYPT_PROTECT_TO_LOCAL_SYSTEM: u32 = 32768;
    pub const NCRYPT_PERSIST_ONLY_FLAG: u32 = 1073741824;
    pub const NCRYPT_PERSIST_FLAG: u32 = 2147483648;
    pub const NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG: u32 = 65536;
    pub const NCRYPT_USE_VIRTUAL_ISOLATION_FLAG: u32 = 131072;
    pub const NCRYPT_USE_PER_BOOT_KEY_FLAG: u32 = 262144;
    pub const NCRYPT_CIPHER_OPERATION: u32 = 1;
    pub const NCRYPT_HASH_OPERATION: u32 = 2;
    pub const NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION: u32 = 4;
    pub const NCRYPT_SECRET_AGREEMENT_OPERATION: u32 = 8;
    pub const NCRYPT_SIGNATURE_OPERATION: u32 = 16;
    pub const NCRYPT_RNG_OPERATION: u32 = 32;
    pub const NCRYPT_KEY_DERIVATION_OPERATION: u32 = 64;
    pub const NCRYPT_AUTHORITY_KEY_FLAG: u32 = 256;
    pub const NCRYPT_NAME_PROPERTY: &[u8; 5usize] = b"Name\0";
    pub const NCRYPT_UNIQUE_NAME_PROPERTY: &[u8; 12usize] = b"Unique Name\0";
    pub const NCRYPT_ALGORITHM_PROPERTY: &[u8; 15usize] = b"Algorithm Name\0";
    pub const NCRYPT_LENGTH_PROPERTY: &[u8; 7usize] = b"Length\0";
    pub const NCRYPT_LENGTHS_PROPERTY: &[u8; 8usize] = b"Lengths\0";
    pub const NCRYPT_BLOCK_LENGTH_PROPERTY: &[u8; 13usize] = b"Block Length\0";
    pub const NCRYPT_PUBLIC_LENGTH_PROPERTY: &[u8; 16usize] = b"PublicKeyLength\0";
    pub const NCRYPT_SIGNATURE_LENGTH_PROPERTY: &[u8; 16usize] = b"SignatureLength\0";
    pub const NCRYPT_CHAINING_MODE_PROPERTY: &[u8; 14usize] = b"Chaining Mode\0";
    pub const NCRYPT_AUTH_TAG_LENGTH: &[u8; 14usize] = b"AuthTagLength\0";
    pub const NCRYPT_UI_POLICY_PROPERTY: &[u8; 10usize] = b"UI Policy\0";
    pub const NCRYPT_EXPORT_POLICY_PROPERTY: &[u8; 14usize] = b"Export Policy\0";
    pub const NCRYPT_WINDOW_HANDLE_PROPERTY: &[u8; 12usize] = b"HWND Handle\0";
    pub const NCRYPT_USE_CONTEXT_PROPERTY: &[u8; 12usize] = b"Use Context\0";
    pub const NCRYPT_IMPL_TYPE_PROPERTY: &[u8; 10usize] = b"Impl Type\0";
    pub const NCRYPT_KEY_USAGE_PROPERTY: &[u8; 10usize] = b"Key Usage\0";
    pub const NCRYPT_KEY_TYPE_PROPERTY: &[u8; 9usize] = b"Key Type\0";
    pub const NCRYPT_VERSION_PROPERTY: &[u8; 8usize] = b"Version\0";
    pub const NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY: &[u8; 23usize] = b"Security Descr Support\0";
    pub const NCRYPT_SECURITY_DESCR_PROPERTY: &[u8; 15usize] = b"Security Descr\0";
    pub const NCRYPT_USE_COUNT_ENABLED_PROPERTY: &[u8; 18usize] = b"Enabled Use Count\0";
    pub const NCRYPT_USE_COUNT_PROPERTY: &[u8; 10usize] = b"Use Count\0";
    pub const NCRYPT_LAST_MODIFIED_PROPERTY: &[u8; 9usize] = b"Modified\0";
    pub const NCRYPT_MAX_NAME_LENGTH_PROPERTY: &[u8; 16usize] = b"Max Name Length\0";
    pub const NCRYPT_ALGORITHM_GROUP_PROPERTY: &[u8; 16usize] = b"Algorithm Group\0";
    pub const NCRYPT_DH_PARAMETERS_PROPERTY: &[u8; 13usize] = b"DHParameters\0";
    pub const NCRYPT_ECC_PARAMETERS_PROPERTY: &[u8; 14usize] = b"ECCParameters\0";
    pub const NCRYPT_ECC_CURVE_NAME_PROPERTY: &[u8; 13usize] = b"ECCCurveName\0";
    pub const NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY: &[u8; 17usize] = b"ECCCurveNameList\0";
    pub const NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY: &[u8; 12usize] = b"Virtual Iso\0";
    pub const NCRYPT_USE_PER_BOOT_KEY_PROPERTY: &[u8; 13usize] = b"Per Boot Key\0";
    pub const NCRYPT_PROVIDER_HANDLE_PROPERTY: &[u8; 16usize] = b"Provider Handle\0";
    pub const NCRYPT_PIN_PROPERTY: &[u8; 13usize] = b"SmartCardPin\0";
    pub const NCRYPT_READER_PROPERTY: &[u8; 16usize] = b"SmartCardReader\0";
    pub const NCRYPT_SMARTCARD_GUID_PROPERTY: &[u8; 14usize] = b"SmartCardGuid\0";
    pub const NCRYPT_CERTIFICATE_PROPERTY: &[u8; 24usize] = b"SmartCardKeyCertificate\0";
    pub const NCRYPT_PIN_PROMPT_PROPERTY: &[u8; 19usize] = b"SmartCardPinPrompt\0";
    pub const NCRYPT_USER_CERTSTORE_PROPERTY: &[u8; 23usize] = b"SmartCardUserCertStore\0";
    pub const NCRYPT_ROOT_CERTSTORE_PROPERTY: &[u8; 23usize] = b"SmartcardRootCertStore\0";
    pub const NCRYPT_SECURE_PIN_PROPERTY: &[u8; 19usize] = b"SmartCardSecurePin\0";
    pub const NCRYPT_ASSOCIATED_ECDH_KEY: &[u8; 27usize] = b"SmartCardAssociatedECDHKey\0";
    pub const NCRYPT_SCARD_PIN_ID: &[u8; 15usize] = b"SmartCardPinId\0";
    pub const NCRYPT_SCARD_PIN_INFO: &[u8; 17usize] = b"SmartCardPinInfo\0";
    pub const NCRYPT_READER_ICON_PROPERTY: &[u8; 20usize] = b"SmartCardReaderIcon\0";
    pub const NCRYPT_KDF_SECRET_VALUE: &[u8; 13usize] = b"KDFKeySecret\0";
    pub const NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY: &[u8; 33usize] =
        b"SmartCardDismissUITimeoutSeconds\0";
    pub const NCRYPT_PCP_PLATFORM_TYPE_PROPERTY: &[u8; 18usize] = b"PCP_PLATFORM_TYPE\0";
    pub const NCRYPT_PCP_PROVIDER_VERSION_PROPERTY: &[u8; 21usize] = b"PCP_PROVIDER_VERSION\0";
    pub const NCRYPT_PCP_EKPUB_PROPERTY: &[u8; 10usize] = b"PCP_EKPUB\0";
    pub const NCRYPT_PCP_EKCERT_PROPERTY: &[u8; 11usize] = b"PCP_EKCERT\0";
    pub const NCRYPT_PCP_EKNVCERT_PROPERTY: &[u8; 13usize] = b"PCP_EKNVCERT\0";
    pub const NCRYPT_PCP_RSA_EKPUB_PROPERTY: &[u8; 14usize] = b"PCP_RSA_EKPUB\0";
    pub const NCRYPT_PCP_RSA_EKCERT_PROPERTY: &[u8; 15usize] = b"PCP_RSA_EKCERT\0";
    pub const NCRYPT_PCP_RSA_EKNVCERT_PROPERTY: &[u8; 17usize] = b"PCP_RSA_EKNVCERT\0";
    pub const NCRYPT_PCP_ECC_EKPUB_PROPERTY: &[u8; 14usize] = b"PCP_ECC_EKPUB\0";
    pub const NCRYPT_PCP_ECC_EKCERT_PROPERTY: &[u8; 15usize] = b"PCP_ECC_EKCERT\0";
    pub const NCRYPT_PCP_ECC_EKNVCERT_PROPERTY: &[u8; 17usize] = b"PCP_ECC_EKNVCERT\0";
    pub const NCRYPT_PCP_SRKPUB_PROPERTY: &[u8; 11usize] = b"PCP_SRKPUB\0";
    pub const NCRYPT_PCP_PCRTABLE_PROPERTY: &[u8; 13usize] = b"PCP_PCRTABLE\0";
    pub const NCRYPT_PCP_CHANGEPASSWORD_PROPERTY: &[u8; 19usize] = b"PCP_CHANGEPASSWORD\0";
    pub const NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY: &[u8; 22usize] = b"PCP_PASSWORD_REQUIRED\0";
    pub const NCRYPT_PCP_USAGEAUTH_PROPERTY: &[u8; 14usize] = b"PCP_USAGEAUTH\0";
    pub const NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY: &[u8; 22usize] = b"PCP_MIGRATIONPASSWORD\0";
    pub const NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY: &[u8; 19usize] = b"PCP_EXPORT_ALLOWED\0";
    pub const NCRYPT_PCP_STORAGEPARENT_PROPERTY: &[u8; 18usize] = b"PCP_STORAGEPARENT\0";
    pub const NCRYPT_PCP_PROVIDERHANDLE_PROPERTY: &[u8; 20usize] = b"PCP_PROVIDERMHANDLE\0";
    pub const NCRYPT_PCP_PLATFORMHANDLE_PROPERTY: &[u8; 19usize] = b"PCP_PLATFORMHANDLE\0";
    pub const NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY: &[u8; 29usize] =
        b"PCP_PLATFORM_BINDING_PCRMASK\0";
    pub const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY: &[u8; 35usize] =
        b"PCP_PLATFORM_BINDING_PCRDIGESTLIST\0";
    pub const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY: &[u8; 31usize] =
        b"PCP_PLATFORM_BINDING_PCRDIGEST\0";
    pub const NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY: &[u8; 21usize] = b"PCP_KEY_USAGE_POLICY\0";
    pub const NCRYPT_PCP_RSA_SCHEME_PROPERTY: &[u8; 15usize] = b"PCP_RSA_SCHEME\0";
    pub const NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY: &[u8; 24usize] =
        b"PCP_RSA_SCHEME_HASH_ALG\0";
    pub const NCRYPT_PCP_TPM12_IDBINDING_PROPERTY: &[u8; 20usize] = b"PCP_TPM12_IDBINDING\0";
    pub const NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY: &[u8; 28usize] =
        b"PCP_TPM12_IDBINDING_DYNAMIC\0";
    pub const NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY: &[u8; 23usize] = b"PCP_TPM12_IDACTIVATION\0";
    pub const NCRYPT_PCP_KEYATTESTATION_PROPERTY: &[u8; 25usize] = b"PCP_TPM12_KEYATTESTATION\0";
    pub const NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY: &[u8; 35usize] =
        b"PCP_ALTERNATE_KEY_STORAGE_LOCATION\0";
    pub const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY: &[u8; 34usize] =
        b"PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED\0";
    pub const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY: &[u8; 37usize] =
        b"PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY\0";
    pub const NCRYPT_PCP_HMAC_AUTH_POLICYREF: &[u8; 24usize] = b"PCP_HMAC_AUTH_POLICYREF\0";
    pub const NCRYPT_PCP_HMAC_AUTH_POLICYINFO: &[u8; 25usize] = b"PCP_HMAC_AUTH_POLICYINFO\0";
    pub const NCRYPT_PCP_HMAC_AUTH_NONCE: &[u8; 20usize] = b"PCP_HMAC_AUTH_NONCE\0";
    pub const NCRYPT_PCP_HMAC_AUTH_SIGNATURE: &[u8; 24usize] = b"PCP_HMAC_AUTH_SIGNATURE\0";
    pub const NCRYPT_PCP_HMAC_AUTH_TICKET: &[u8; 21usize] = b"PCP_HMAC_AUTH_TICKET\0";
    pub const NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY: &[u8; 21usize] = b"PCP_NO_DA_PROTECTION\0";
    pub const NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY: &[u8; 24usize] =
        b"PCP_TPM_MANUFACTURER_ID\0";
    pub const NCRYPT_PCP_TPM_FW_VERSION_PROPERTY: &[u8; 19usize] = b"PCP_TPM_FW_VERSION\0";
    pub const NCRYPT_PCP_TPM2BNAME_PROPERTY: &[u8; 14usize] = b"PCP_TPM2BNAME\0";
    pub const NCRYPT_PCP_TPM_VERSION_PROPERTY: &[u8; 16usize] = b"PCP_TPM_VERSION\0";
    pub const NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY: &[u8; 21usize] = b"PCP_RAW_POLICYDIGEST\0";
    pub const NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY: &[u8; 21usize] = b"PCP_KEY_CREATIONHASH\0";
    pub const NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY: &[u8; 23usize] = b"PCP_KEY_CREATIONTICKET\0";
    pub const NCRYPT_PCP_SESSIONID_PROPERTY: &[u8; 14usize] = b"PCP_SESSIONID\0";
    pub const NCRYPT_PCP_PSS_SALT_SIZE_PROPERTY: &[u8; 14usize] = b"PSS Salt Size\0";
    pub const NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN: u32 = 0;
    pub const NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM: u32 = 1;
    pub const NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE: u32 = 2;
    pub const NCRYPT_TPM_PAD_PSS_IGNORE_SALT: u32 = 32;
    pub const IFX_RSA_KEYGEN_VUL_NOT_AFFECTED: u32 = 0;
    pub const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1: u32 = 1;
    pub const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2: u32 = 2;
    pub const NCRYPT_TPM12_PROVIDER: u32 = 65536;
    pub const NCRYPT_PCP_SIGNATURE_KEY: u32 = 1;
    pub const NCRYPT_PCP_ENCRYPTION_KEY: u32 = 2;
    pub const NCRYPT_PCP_GENERIC_KEY: u32 = 3;
    pub const NCRYPT_PCP_STORAGE_KEY: u32 = 4;
    pub const NCRYPT_PCP_IDENTITY_KEY: u32 = 8;
    pub const NCRYPT_PCP_HMACVERIFICATION_KEY: u32 = 16;
    pub const NCRYPT_SCARD_NGC_KEY_NAME: &[u8; 20usize] = b"SmartCardNgcKeyName\0";
    pub const NCRYPT_PCP_PLATFORM_BINDING_PCRALGID_PROPERTY: &[u8; 30usize] =
        b"PCP_PLATFORM_BINDING_PCRALGID\0";
    pub const NCRYPT_INITIALIZATION_VECTOR: &[u8; 3usize] = b"IV\0";
    pub const NCRYPT_CHANGEPASSWORD_PROPERTY: &[u8; 19usize] = b"PCP_CHANGEPASSWORD\0";
    pub const NCRYPT_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY: &[u8; 35usize] =
        b"PCP_ALTERNATE_KEY_STORAGE_LOCATION\0";
    pub const NCRYPT_KEY_ACCESS_POLICY_PROPERTY: &[u8; 18usize] = b"Key Access Policy\0";
    pub const NCRYPT_MAX_PROPERTY_NAME: u32 = 64;
    pub const NCRYPT_MAX_PROPERTY_DATA: u32 = 1048576;
    pub const NCRYPT_ALLOW_EXPORT_FLAG: u32 = 1;
    pub const NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG: u32 = 2;
    pub const NCRYPT_ALLOW_ARCHIVING_FLAG: u32 = 4;
    pub const NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG: u32 = 8;
    pub const NCRYPT_IMPL_HARDWARE_FLAG: u32 = 1;
    pub const NCRYPT_IMPL_SOFTWARE_FLAG: u32 = 2;
    pub const NCRYPT_IMPL_REMOVABLE_FLAG: u32 = 8;
    pub const NCRYPT_IMPL_HARDWARE_RNG_FLAG: u32 = 16;
    pub const NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG: u32 = 32;
    pub const NCRYPT_ALLOW_DECRYPT_FLAG: u32 = 1;
    pub const NCRYPT_ALLOW_SIGNING_FLAG: u32 = 2;
    pub const NCRYPT_ALLOW_KEY_AGREEMENT_FLAG: u32 = 4;
    pub const NCRYPT_ALLOW_KEY_IMPORT_FLAG: u32 = 8;
    pub const NCRYPT_ALLOW_ALL_USAGES: u32 = 16777215;
    pub const NCRYPT_UI_PROTECT_KEY_FLAG: u32 = 1;
    pub const NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG: u32 = 2;
    pub const NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG: u32 = 4;
    pub const NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG: u32 = 8;
    pub const NCRYPT_PIN_CACHE_FREE_APPLICATION_TICKET_PROPERTY: &[u8; 30usize] =
        b"PinCacheFreeApplicationTicket\0";
    pub const NCRYPT_PIN_CACHE_FLAGS_PROPERTY: &[u8; 14usize] = b"PinCacheFlags\0";
    pub const NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG: u32 = 1;
    pub const NCRYPT_PIN_CACHE_APPLICATION_TICKET_PROPERTY: &[u8; 26usize] =
        b"PinCacheApplicationTicket\0";
    pub const NCRYPT_PIN_CACHE_APPLICATION_IMAGE_PROPERTY: &[u8; 25usize] =
        b"PinCacheApplicationImage\0";
    pub const NCRYPT_PIN_CACHE_APPLICATION_STATUS_PROPERTY: &[u8; 26usize] =
        b"PinCacheApplicationStatus\0";
    pub const NCRYPT_PIN_CACHE_PIN_PROPERTY: &[u8; 12usize] = b"PinCachePin\0";
    pub const NCRYPT_PIN_CACHE_IS_GESTURE_REQUIRED_PROPERTY: &[u8; 26usize] =
        b"PinCacheIsGestureRequired\0";
    pub const NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG: u32 = 1;
    pub const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH: u32 = 90;
    pub const NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH: u32 = 90;
    pub const NCRYPT_PIN_CACHE_CLEAR_PROPERTY: &[u8; 14usize] = b"PinCacheClear\0";
    pub const NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION: u32 = 1;
    pub const NCRYPT_KEY_ACCESS_POLICY_VERSION: u32 = 1;
    pub const NCRYPT_ALLOW_SILENT_KEY_ACCESS: u32 = 1;
    pub const NCRYPT_CIPHER_KEY_BLOB_MAGIC: u32 = 1380470851;
    pub const NCRYPT_KDF_KEY_BLOB_MAGIC: u32 = 826688587;
    pub const NCRYPT_PROTECTED_KEY_BLOB_MAGIC: u32 = 1263817296;
    pub const NCRYPT_CIPHER_KEY_BLOB: &[u8; 14usize] = b"CipherKeyBlob\0";
    pub const NCRYPT_KDF_KEY_BLOB: &[u8; 11usize] = b"KDFKeyBlob\0";
    pub const NCRYPT_PROTECTED_KEY_BLOB: &[u8; 17usize] = b"ProtectedKeyBlob\0";
    pub const NCRYPT_TPM_LOADABLE_KEY_BLOB: &[u8; 23usize] = b"PcpTpmProtectedKeyBlob\0";
    pub const NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC: u32 = 1297371211;
    pub const NCRYPT_PKCS7_ENVELOPE_BLOB: &[u8; 15usize] = b"PKCS7_ENVELOPE\0";
    pub const NCRYPT_PKCS8_PRIVATE_KEY_BLOB: &[u8; 17usize] = b"PKCS8_PRIVATEKEY\0";
    pub const NCRYPT_OPAQUETRANSPORT_BLOB: &[u8; 16usize] = b"OpaqueTransport\0";
    pub const NCRYPT_ISOLATED_KEY_ENVELOPE_BLOB: &[u8; 22usize] = b"ISOLATED_KEY_ENVELOPE\0";
    pub const szOID_RSA: &[u8; 15usize] = b"1.2.840.113549\0";
    pub const szOID_PKCS: &[u8; 17usize] = b"1.2.840.113549.1\0";
    pub const szOID_RSA_HASH: &[u8; 17usize] = b"1.2.840.113549.2\0";
    pub const szOID_RSA_ENCRYPT: &[u8; 17usize] = b"1.2.840.113549.3\0";
    pub const szOID_PKCS_1: &[u8; 19usize] = b"1.2.840.113549.1.1\0";
    pub const szOID_PKCS_2: &[u8; 19usize] = b"1.2.840.113549.1.2\0";
    pub const szOID_PKCS_3: &[u8; 19usize] = b"1.2.840.113549.1.3\0";
    pub const szOID_PKCS_4: &[u8; 19usize] = b"1.2.840.113549.1.4\0";
    pub const szOID_PKCS_5: &[u8; 19usize] = b"1.2.840.113549.1.5\0";
    pub const szOID_PKCS_6: &[u8; 19usize] = b"1.2.840.113549.1.6\0";
    pub const szOID_PKCS_7: &[u8; 19usize] = b"1.2.840.113549.1.7\0";
    pub const szOID_PKCS_8: &[u8; 19usize] = b"1.2.840.113549.1.8\0";
    pub const szOID_PKCS_9: &[u8; 19usize] = b"1.2.840.113549.1.9\0";
    pub const szOID_PKCS_10: &[u8; 20usize] = b"1.2.840.113549.1.10\0";
    pub const szOID_PKCS_12: &[u8; 20usize] = b"1.2.840.113549.1.12\0";
    pub const szOID_RSA_RSA: &[u8; 21usize] = b"1.2.840.113549.1.1.1\0";
    pub const szOID_RSA_MD2RSA: &[u8; 21usize] = b"1.2.840.113549.1.1.2\0";
    pub const szOID_RSA_MD4RSA: &[u8; 21usize] = b"1.2.840.113549.1.1.3\0";
    pub const szOID_RSA_MD5RSA: &[u8; 21usize] = b"1.2.840.113549.1.1.4\0";
    pub const szOID_RSA_SHA1RSA: &[u8; 21usize] = b"1.2.840.113549.1.1.5\0";
    pub const szOID_RSA_SETOAEP_RSA: &[u8; 21usize] = b"1.2.840.113549.1.1.6\0";
    pub const szOID_RSAES_OAEP: &[u8; 21usize] = b"1.2.840.113549.1.1.7\0";
    pub const szOID_RSA_MGF1: &[u8; 21usize] = b"1.2.840.113549.1.1.8\0";
    pub const szOID_RSA_PSPECIFIED: &[u8; 21usize] = b"1.2.840.113549.1.1.9\0";
    pub const szOID_RSA_SSA_PSS: &[u8; 22usize] = b"1.2.840.113549.1.1.10\0";
    pub const szOID_RSA_SHA256RSA: &[u8; 22usize] = b"1.2.840.113549.1.1.11\0";
    pub const szOID_RSA_SHA384RSA: &[u8; 22usize] = b"1.2.840.113549.1.1.12\0";
    pub const szOID_RSA_SHA512RSA: &[u8; 22usize] = b"1.2.840.113549.1.1.13\0";
    pub const szOID_RSA_DH: &[u8; 21usize] = b"1.2.840.113549.1.3.1\0";
    pub const szOID_RSA_data: &[u8; 21usize] = b"1.2.840.113549.1.7.1\0";
    pub const szOID_RSA_signedData: &[u8; 21usize] = b"1.2.840.113549.1.7.2\0";
    pub const szOID_RSA_envelopedData: &[u8; 21usize] = b"1.2.840.113549.1.7.3\0";
    pub const szOID_RSA_signEnvData: &[u8; 21usize] = b"1.2.840.113549.1.7.4\0";
    pub const szOID_RSA_digestedData: &[u8; 21usize] = b"1.2.840.113549.1.7.5\0";
    pub const szOID_RSA_hashedData: &[u8; 21usize] = b"1.2.840.113549.1.7.5\0";
    pub const szOID_RSA_encryptedData: &[u8; 21usize] = b"1.2.840.113549.1.7.6\0";
    pub const szOID_RSA_emailAddr: &[u8; 21usize] = b"1.2.840.113549.1.9.1\0";
    pub const szOID_RSA_unstructName: &[u8; 21usize] = b"1.2.840.113549.1.9.2\0";
    pub const szOID_RSA_contentType: &[u8; 21usize] = b"1.2.840.113549.1.9.3\0";
    pub const szOID_RSA_messageDigest: &[u8; 21usize] = b"1.2.840.113549.1.9.4\0";
    pub const szOID_RSA_signingTime: &[u8; 21usize] = b"1.2.840.113549.1.9.5\0";
    pub const szOID_RSA_counterSign: &[u8; 21usize] = b"1.2.840.113549.1.9.6\0";
    pub const szOID_RSA_challengePwd: &[u8; 21usize] = b"1.2.840.113549.1.9.7\0";
    pub const szOID_RSA_unstructAddr: &[u8; 21usize] = b"1.2.840.113549.1.9.8\0";
    pub const szOID_RSA_extCertAttrs: &[u8; 21usize] = b"1.2.840.113549.1.9.9\0";
    pub const szOID_RSA_certExtensions: &[u8; 22usize] = b"1.2.840.113549.1.9.14\0";
    pub const szOID_RSA_SMIMECapabilities: &[u8; 22usize] = b"1.2.840.113549.1.9.15\0";
    pub const szOID_RSA_preferSignedData: &[u8; 24usize] = b"1.2.840.113549.1.9.15.1\0";
    pub const szOID_TIMESTAMP_TOKEN: &[u8; 26usize] = b"1.2.840.113549.1.9.16.1.4\0";
    pub const szOID_RFC3161_counterSign: &[u8; 22usize] = b"1.3.6.1.4.1.311.3.3.1\0";
    pub const szOID_RSA_SMIMEalg: &[u8; 24usize] = b"1.2.840.113549.1.9.16.3\0";
    pub const szOID_RSA_SMIMEalgESDH: &[u8; 26usize] = b"1.2.840.113549.1.9.16.3.5\0";
    pub const szOID_RSA_SMIMEalgCMS3DESwrap: &[u8; 26usize] = b"1.2.840.113549.1.9.16.3.6\0";
    pub const szOID_RSA_SMIMEalgCMSRC2wrap: &[u8; 26usize] = b"1.2.840.113549.1.9.16.3.7\0";
    pub const szOID_RSA_MD2: &[u8; 19usize] = b"1.2.840.113549.2.2\0";
    pub const szOID_RSA_MD4: &[u8; 19usize] = b"1.2.840.113549.2.4\0";
    pub const szOID_RSA_MD5: &[u8; 19usize] = b"1.2.840.113549.2.5\0";
    pub const szOID_RSA_RC2CBC: &[u8; 19usize] = b"1.2.840.113549.3.2\0";
    pub const szOID_RSA_RC4: &[u8; 19usize] = b"1.2.840.113549.3.4\0";
    pub const szOID_RSA_DES_EDE3_CBC: &[u8; 19usize] = b"1.2.840.113549.3.7\0";
    pub const szOID_RSA_RC5_CBCPad: &[u8; 19usize] = b"1.2.840.113549.3.9\0";
    pub const szOID_ANSI_X942: &[u8; 14usize] = b"1.2.840.10046\0";
    pub const szOID_ANSI_X942_DH: &[u8; 18usize] = b"1.2.840.10046.2.1\0";
    pub const szOID_X957: &[u8; 14usize] = b"1.2.840.10040\0";
    pub const szOID_X957_DSA: &[u8; 18usize] = b"1.2.840.10040.4.1\0";
    pub const szOID_X957_SHA1DSA: &[u8; 18usize] = b"1.2.840.10040.4.3\0";
    pub const szOID_ECC_PUBLIC_KEY: &[u8; 18usize] = b"1.2.840.10045.2.1\0";
    pub const szOID_ECC_CURVE_P256: &[u8; 20usize] = b"1.2.840.10045.3.1.7\0";
    pub const szOID_ECC_CURVE_P384: &[u8; 13usize] = b"1.3.132.0.34\0";
    pub const szOID_ECC_CURVE_P521: &[u8; 13usize] = b"1.3.132.0.35\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP160R1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.1\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP160T1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.2\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP192R1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.3\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP192T1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.4\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP224R1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.5\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP224T1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.6\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP256R1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.7\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP256T1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.8\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP320R1: &[u8; 21usize] = b"1.3.36.3.3.2.8.1.1.9\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP320T1: &[u8; 22usize] = b"1.3.36.3.3.2.8.1.1.10\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP384R1: &[u8; 22usize] = b"1.3.36.3.3.2.8.1.1.11\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP384T1: &[u8; 22usize] = b"1.3.36.3.3.2.8.1.1.12\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP512R1: &[u8; 22usize] = b"1.3.36.3.3.2.8.1.1.13\0";
    pub const szOID_ECC_CURVE_BRAINPOOLP512T1: &[u8; 22usize] = b"1.3.36.3.3.2.8.1.1.14\0";
    pub const szOID_ECC_CURVE_EC192WAPI: &[u8; 22usize] = b"1.2.156.11235.1.1.2.1\0";
    pub const szOID_CN_ECDSA_SHA256: &[u8; 20usize] = b"1.2.156.11235.1.1.1\0";
    pub const szOID_ECC_CURVE_NISTP192: &[u8; 20usize] = b"1.2.840.10045.3.1.1\0";
    pub const szOID_ECC_CURVE_NISTP224: &[u8; 13usize] = b"1.3.132.0.33\0";
    pub const szOID_ECC_CURVE_NISTP256: &[u8; 20usize] = b"1.2.840.10045.3.1.7\0";
    pub const szOID_ECC_CURVE_NISTP384: &[u8; 13usize] = b"1.3.132.0.34\0";
    pub const szOID_ECC_CURVE_NISTP521: &[u8; 13usize] = b"1.3.132.0.35\0";
    pub const szOID_ECC_CURVE_SECP160K1: &[u8; 12usize] = b"1.3.132.0.9\0";
    pub const szOID_ECC_CURVE_SECP160R1: &[u8; 12usize] = b"1.3.132.0.8\0";
    pub const szOID_ECC_CURVE_SECP160R2: &[u8; 13usize] = b"1.3.132.0.30\0";
    pub const szOID_ECC_CURVE_SECP192K1: &[u8; 13usize] = b"1.3.132.0.31\0";
    pub const szOID_ECC_CURVE_SECP192R1: &[u8; 20usize] = b"1.2.840.10045.3.1.1\0";
    pub const szOID_ECC_CURVE_SECP224K1: &[u8; 13usize] = b"1.3.132.0.32\0";
    pub const szOID_ECC_CURVE_SECP224R1: &[u8; 13usize] = b"1.3.132.0.33\0";
    pub const szOID_ECC_CURVE_SECP256K1: &[u8; 13usize] = b"1.3.132.0.10\0";
    pub const szOID_ECC_CURVE_SECP256R1: &[u8; 20usize] = b"1.2.840.10045.3.1.7\0";
    pub const szOID_ECC_CURVE_SECP384R1: &[u8; 13usize] = b"1.3.132.0.34\0";
    pub const szOID_ECC_CURVE_SECP521R1: &[u8; 13usize] = b"1.3.132.0.35\0";
    pub const szOID_ECC_CURVE_WTLS7: &[u8; 13usize] = b"1.3.132.0.30\0";
    pub const szOID_ECC_CURVE_WTLS9: &[u8; 14usize] = b"2.23.43.1.4.9\0";
    pub const szOID_ECC_CURVE_WTLS12: &[u8; 13usize] = b"1.3.132.0.33\0";
    pub const szOID_ECC_CURVE_X962P192V1: &[u8; 20usize] = b"1.2.840.10045.3.1.1\0";
    pub const szOID_ECC_CURVE_X962P192V2: &[u8; 20usize] = b"1.2.840.10045.3.1.2\0";
    pub const szOID_ECC_CURVE_X962P192V3: &[u8; 20usize] = b"1.2.840.10045.3.1.3\0";
    pub const szOID_ECC_CURVE_X962P239V1: &[u8; 20usize] = b"1.2.840.10045.3.1.4\0";
    pub const szOID_ECC_CURVE_X962P239V2: &[u8; 20usize] = b"1.2.840.10045.3.1.5\0";
    pub const szOID_ECC_CURVE_X962P239V3: &[u8; 20usize] = b"1.2.840.10045.3.1.6\0";
    pub const szOID_ECC_CURVE_X962P256V1: &[u8; 20usize] = b"1.2.840.10045.3.1.7\0";
    pub const szOID_ECDSA_SHA1: &[u8; 18usize] = b"1.2.840.10045.4.1\0";
    pub const szOID_ECDSA_SPECIFIED: &[u8; 18usize] = b"1.2.840.10045.4.3\0";
    pub const szOID_ECDSA_SHA256: &[u8; 20usize] = b"1.2.840.10045.4.3.2\0";
    pub const szOID_ECDSA_SHA384: &[u8; 20usize] = b"1.2.840.10045.4.3.3\0";
    pub const szOID_ECDSA_SHA512: &[u8; 20usize] = b"1.2.840.10045.4.3.4\0";
    pub const szOID_NIST_AES128_CBC: &[u8; 23usize] = b"2.16.840.1.101.3.4.1.2\0";
    pub const szOID_NIST_AES192_CBC: &[u8; 24usize] = b"2.16.840.1.101.3.4.1.22\0";
    pub const szOID_NIST_AES256_CBC: &[u8; 24usize] = b"2.16.840.1.101.3.4.1.42\0";
    pub const szOID_NIST_AES128_WRAP: &[u8; 23usize] = b"2.16.840.1.101.3.4.1.5\0";
    pub const szOID_NIST_AES192_WRAP: &[u8; 24usize] = b"2.16.840.1.101.3.4.1.25\0";
    pub const szOID_NIST_AES256_WRAP: &[u8; 24usize] = b"2.16.840.1.101.3.4.1.45\0";
    pub const szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF: &[u8; 22usize] = b"1.3.133.16.840.63.0.2\0";
    pub const szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF: &[u8; 15usize] = b"1.3.132.1.11.1\0";
    pub const szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF: &[u8; 15usize] = b"1.3.132.1.11.2\0";
    pub const szOID_DS: &[u8; 4usize] = b"2.5\0";
    pub const szOID_DSALG: &[u8; 6usize] = b"2.5.8\0";
    pub const szOID_DSALG_CRPT: &[u8; 8usize] = b"2.5.8.1\0";
    pub const szOID_DSALG_HASH: &[u8; 8usize] = b"2.5.8.2\0";
    pub const szOID_DSALG_SIGN: &[u8; 8usize] = b"2.5.8.3\0";
    pub const szOID_DSALG_RSA: &[u8; 10usize] = b"2.5.8.1.1\0";
    pub const szOID_OIW: &[u8; 7usize] = b"1.3.14\0";
    pub const szOID_OIWSEC: &[u8; 11usize] = b"1.3.14.3.2\0";
    pub const szOID_OIWSEC_md4RSA: &[u8; 13usize] = b"1.3.14.3.2.2\0";
    pub const szOID_OIWSEC_md5RSA: &[u8; 13usize] = b"1.3.14.3.2.3\0";
    pub const szOID_OIWSEC_md4RSA2: &[u8; 13usize] = b"1.3.14.3.2.4\0";
    pub const szOID_OIWSEC_desECB: &[u8; 13usize] = b"1.3.14.3.2.6\0";
    pub const szOID_OIWSEC_desCBC: &[u8; 13usize] = b"1.3.14.3.2.7\0";
    pub const szOID_OIWSEC_desOFB: &[u8; 13usize] = b"1.3.14.3.2.8\0";
    pub const szOID_OIWSEC_desCFB: &[u8; 13usize] = b"1.3.14.3.2.9\0";
    pub const szOID_OIWSEC_desMAC: &[u8; 14usize] = b"1.3.14.3.2.10\0";
    pub const szOID_OIWSEC_rsaSign: &[u8; 14usize] = b"1.3.14.3.2.11\0";
    pub const szOID_OIWSEC_dsa: &[u8; 14usize] = b"1.3.14.3.2.12\0";
    pub const szOID_OIWSEC_shaDSA: &[u8; 14usize] = b"1.3.14.3.2.13\0";
    pub const szOID_OIWSEC_mdc2RSA: &[u8; 14usize] = b"1.3.14.3.2.14\0";
    pub const szOID_OIWSEC_shaRSA: &[u8; 14usize] = b"1.3.14.3.2.15\0";
    pub const szOID_OIWSEC_dhCommMod: &[u8; 14usize] = b"1.3.14.3.2.16\0";
    pub const szOID_OIWSEC_desEDE: &[u8; 14usize] = b"1.3.14.3.2.17\0";
    pub const szOID_OIWSEC_sha: &[u8; 14usize] = b"1.3.14.3.2.18\0";
    pub const szOID_OIWSEC_mdc2: &[u8; 14usize] = b"1.3.14.3.2.19\0";
    pub const szOID_OIWSEC_dsaComm: &[u8; 14usize] = b"1.3.14.3.2.20\0";
    pub const szOID_OIWSEC_dsaCommSHA: &[u8; 14usize] = b"1.3.14.3.2.21\0";
    pub const szOID_OIWSEC_rsaXchg: &[u8; 14usize] = b"1.3.14.3.2.22\0";
    pub const szOID_OIWSEC_keyHashSeal: &[u8; 14usize] = b"1.3.14.3.2.23\0";
    pub const szOID_OIWSEC_md2RSASign: &[u8; 14usize] = b"1.3.14.3.2.24\0";
    pub const szOID_OIWSEC_md5RSASign: &[u8; 14usize] = b"1.3.14.3.2.25\0";
    pub const szOID_OIWSEC_sha1: &[u8; 14usize] = b"1.3.14.3.2.26\0";
    pub const szOID_OIWSEC_dsaSHA1: &[u8; 14usize] = b"1.3.14.3.2.27\0";
    pub const szOID_OIWSEC_dsaCommSHA1: &[u8; 14usize] = b"1.3.14.3.2.28\0";
    pub const szOID_OIWSEC_sha1RSASign: &[u8; 14usize] = b"1.3.14.3.2.29\0";
    pub const szOID_OIWDIR: &[u8; 11usize] = b"1.3.14.7.2\0";
    pub const szOID_OIWDIR_CRPT: &[u8; 13usize] = b"1.3.14.7.2.1\0";
    pub const szOID_OIWDIR_HASH: &[u8; 13usize] = b"1.3.14.7.2.2\0";
    pub const szOID_OIWDIR_SIGN: &[u8; 13usize] = b"1.3.14.7.2.3\0";
    pub const szOID_OIWDIR_md2: &[u8; 15usize] = b"1.3.14.7.2.2.1\0";
    pub const szOID_OIWDIR_md2RSA: &[u8; 15usize] = b"1.3.14.7.2.3.1\0";
    pub const szOID_INFOSEC: &[u8; 19usize] = b"2.16.840.1.101.2.1\0";
    pub const szOID_INFOSEC_sdnsSignature: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.1\0";
    pub const szOID_INFOSEC_mosaicSignature: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.2\0";
    pub const szOID_INFOSEC_sdnsConfidentiality: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.3\0";
    pub const szOID_INFOSEC_mosaicConfidentiality: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.4\0";
    pub const szOID_INFOSEC_sdnsIntegrity: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.5\0";
    pub const szOID_INFOSEC_mosaicIntegrity: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.6\0";
    pub const szOID_INFOSEC_sdnsTokenProtection: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.7\0";
    pub const szOID_INFOSEC_mosaicTokenProtection: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.8\0";
    pub const szOID_INFOSEC_sdnsKeyManagement: &[u8; 23usize] = b"2.16.840.1.101.2.1.1.9\0";
    pub const szOID_INFOSEC_mosaicKeyManagement: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.10\0";
    pub const szOID_INFOSEC_sdnsKMandSig: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.11\0";
    pub const szOID_INFOSEC_mosaicKMandSig: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.12\0";
    pub const szOID_INFOSEC_SuiteASignature: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.13\0";
    pub const szOID_INFOSEC_SuiteAConfidentiality: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.14\0";
    pub const szOID_INFOSEC_SuiteAIntegrity: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.15\0";
    pub const szOID_INFOSEC_SuiteATokenProtection: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.16\0";
    pub const szOID_INFOSEC_SuiteAKeyManagement: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.17\0";
    pub const szOID_INFOSEC_SuiteAKMandSig: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.18\0";
    pub const szOID_INFOSEC_mosaicUpdatedSig: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.19\0";
    pub const szOID_INFOSEC_mosaicKMandUpdSig: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.20\0";
    pub const szOID_INFOSEC_mosaicUpdatedInteg: &[u8; 24usize] = b"2.16.840.1.101.2.1.1.21\0";
    pub const szOID_NIST_sha256: &[u8; 23usize] = b"2.16.840.1.101.3.4.2.1\0";
    pub const szOID_NIST_sha384: &[u8; 23usize] = b"2.16.840.1.101.3.4.2.2\0";
    pub const szOID_NIST_sha512: &[u8; 23usize] = b"2.16.840.1.101.3.4.2.3\0";
    pub const szOID_COMMON_NAME: &[u8; 8usize] = b"2.5.4.3\0";
    pub const szOID_SUR_NAME: &[u8; 8usize] = b"2.5.4.4\0";
    pub const szOID_DEVICE_SERIAL_NUMBER: &[u8; 8usize] = b"2.5.4.5\0";
    pub const szOID_COUNTRY_NAME: &[u8; 8usize] = b"2.5.4.6\0";
    pub const szOID_LOCALITY_NAME: &[u8; 8usize] = b"2.5.4.7\0";
    pub const szOID_STATE_OR_PROVINCE_NAME: &[u8; 8usize] = b"2.5.4.8\0";
    pub const szOID_STREET_ADDRESS: &[u8; 8usize] = b"2.5.4.9\0";
    pub const szOID_ORGANIZATION_NAME: &[u8; 9usize] = b"2.5.4.10\0";
    pub const szOID_ORGANIZATIONAL_UNIT_NAME: &[u8; 9usize] = b"2.5.4.11\0";
    pub const szOID_TITLE: &[u8; 9usize] = b"2.5.4.12\0";
    pub const szOID_DESCRIPTION: &[u8; 9usize] = b"2.5.4.13\0";
    pub const szOID_SEARCH_GUIDE: &[u8; 9usize] = b"2.5.4.14\0";
    pub const szOID_BUSINESS_CATEGORY: &[u8; 9usize] = b"2.5.4.15\0";
    pub const szOID_POSTAL_ADDRESS: &[u8; 9usize] = b"2.5.4.16\0";
    pub const szOID_POSTAL_CODE: &[u8; 9usize] = b"2.5.4.17\0";
    pub const szOID_POST_OFFICE_BOX: &[u8; 9usize] = b"2.5.4.18\0";
    pub const szOID_PHYSICAL_DELIVERY_OFFICE_NAME: &[u8; 9usize] = b"2.5.4.19\0";
    pub const szOID_TELEPHONE_NUMBER: &[u8; 9usize] = b"2.5.4.20\0";
    pub const szOID_TELEX_NUMBER: &[u8; 9usize] = b"2.5.4.21\0";
    pub const szOID_TELETEXT_TERMINAL_IDENTIFIER: &[u8; 9usize] = b"2.5.4.22\0";
    pub const szOID_FACSIMILE_TELEPHONE_NUMBER: &[u8; 9usize] = b"2.5.4.23\0";
    pub const szOID_X21_ADDRESS: &[u8; 9usize] = b"2.5.4.24\0";
    pub const szOID_INTERNATIONAL_ISDN_NUMBER: &[u8; 9usize] = b"2.5.4.25\0";
    pub const szOID_REGISTERED_ADDRESS: &[u8; 9usize] = b"2.5.4.26\0";
    pub const szOID_DESTINATION_INDICATOR: &[u8; 9usize] = b"2.5.4.27\0";
    pub const szOID_PREFERRED_DELIVERY_METHOD: &[u8; 9usize] = b"2.5.4.28\0";
    pub const szOID_PRESENTATION_ADDRESS: &[u8; 9usize] = b"2.5.4.29\0";
    pub const szOID_SUPPORTED_APPLICATION_CONTEXT: &[u8; 9usize] = b"2.5.4.30\0";
    pub const szOID_MEMBER: &[u8; 9usize] = b"2.5.4.31\0";
    pub const szOID_OWNER: &[u8; 9usize] = b"2.5.4.32\0";
    pub const szOID_ROLE_OCCUPANT: &[u8; 9usize] = b"2.5.4.33\0";
    pub const szOID_SEE_ALSO: &[u8; 9usize] = b"2.5.4.34\0";
    pub const szOID_USER_PASSWORD: &[u8; 9usize] = b"2.5.4.35\0";
    pub const szOID_USER_CERTIFICATE: &[u8; 9usize] = b"2.5.4.36\0";
    pub const szOID_CA_CERTIFICATE: &[u8; 9usize] = b"2.5.4.37\0";
    pub const szOID_AUTHORITY_REVOCATION_LIST: &[u8; 9usize] = b"2.5.4.38\0";
    pub const szOID_CERTIFICATE_REVOCATION_LIST: &[u8; 9usize] = b"2.5.4.39\0";
    pub const szOID_CROSS_CERTIFICATE_PAIR: &[u8; 9usize] = b"2.5.4.40\0";
    pub const szOID_GIVEN_NAME: &[u8; 9usize] = b"2.5.4.42\0";
    pub const szOID_INITIALS: &[u8; 9usize] = b"2.5.4.43\0";
    pub const szOID_DN_QUALIFIER: &[u8; 9usize] = b"2.5.4.46\0";
    pub const szOID_DOMAIN_COMPONENT: &[u8; 27usize] = b"0.9.2342.19200300.100.1.25\0";
    pub const szOID_PKCS_12_FRIENDLY_NAME_ATTR: &[u8; 22usize] = b"1.2.840.113549.1.9.20\0";
    pub const szOID_PKCS_12_LOCAL_KEY_ID: &[u8; 22usize] = b"1.2.840.113549.1.9.21\0";
    pub const szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR: &[u8; 21usize] = b"1.3.6.1.4.1.311.17.1\0";
    pub const szOID_LOCAL_MACHINE_KEYSET: &[u8; 21usize] = b"1.3.6.1.4.1.311.17.2\0";
    pub const szOID_PKCS_12_EXTENDED_ATTRIBUTES: &[u8; 21usize] = b"1.3.6.1.4.1.311.17.3\0";
    pub const szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID: &[u8; 21usize] =
        b"1.3.6.1.4.1.311.17.4\0";
    pub const szOID_KEYID_RDN: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.7.1\0";
    pub const szOID_EV_RDN_LOCALE: &[u8; 25usize] = b"1.3.6.1.4.1.311.60.2.1.1\0";
    pub const szOID_EV_RDN_STATE_OR_PROVINCE: &[u8; 25usize] = b"1.3.6.1.4.1.311.60.2.1.2\0";
    pub const szOID_EV_RDN_COUNTRY: &[u8; 25usize] = b"1.3.6.1.4.1.311.60.2.1.3\0";
    pub const CERT_RDN_ANY_TYPE: u32 = 0;
    pub const CERT_RDN_ENCODED_BLOB: u32 = 1;
    pub const CERT_RDN_OCTET_STRING: u32 = 2;
    pub const CERT_RDN_NUMERIC_STRING: u32 = 3;
    pub const CERT_RDN_PRINTABLE_STRING: u32 = 4;
    pub const CERT_RDN_TELETEX_STRING: u32 = 5;
    pub const CERT_RDN_T61_STRING: u32 = 5;
    pub const CERT_RDN_VIDEOTEX_STRING: u32 = 6;
    pub const CERT_RDN_IA5_STRING: u32 = 7;
    pub const CERT_RDN_GRAPHIC_STRING: u32 = 8;
    pub const CERT_RDN_VISIBLE_STRING: u32 = 9;
    pub const CERT_RDN_ISO646_STRING: u32 = 9;
    pub const CERT_RDN_GENERAL_STRING: u32 = 10;
    pub const CERT_RDN_UNIVERSAL_STRING: u32 = 11;
    pub const CERT_RDN_INT4_STRING: u32 = 11;
    pub const CERT_RDN_BMP_STRING: u32 = 12;
    pub const CERT_RDN_UNICODE_STRING: u32 = 12;
    pub const CERT_RDN_UTF8_STRING: u32 = 13;
    pub const CERT_RDN_TYPE_MASK: u32 = 255;
    pub const CERT_RDN_FLAGS_MASK: u32 = 4278190080;
    pub const CERT_RDN_ENABLE_T61_UNICODE_FLAG: u32 = 2147483648;
    pub const CERT_RDN_ENABLE_UTF8_UNICODE_FLAG: u32 = 536870912;
    pub const CERT_RDN_FORCE_UTF8_UNICODE_FLAG: u32 = 268435456;
    pub const CERT_RDN_DISABLE_CHECK_TYPE_FLAG: u32 = 1073741824;
    pub const CERT_RDN_DISABLE_IE4_UTF8_FLAG: u32 = 16777216;
    pub const CERT_RDN_ENABLE_PUNYCODE_FLAG: u32 = 33554432;
    pub const CERT_RSA_PUBLIC_KEY_OBJID: &[u8; 21usize] = b"1.2.840.113549.1.1.1\0";
    pub const CERT_DEFAULT_OID_PUBLIC_KEY_SIGN: &[u8; 21usize] = b"1.2.840.113549.1.1.1\0";
    pub const CERT_DEFAULT_OID_PUBLIC_KEY_XCHG: &[u8; 21usize] = b"1.2.840.113549.1.1.1\0";
    pub const CRYPT_ECC_PRIVATE_KEY_INFO_v1: u32 = 1;
    pub const CERT_V1: u32 = 0;
    pub const CERT_V2: u32 = 1;
    pub const CERT_V3: u32 = 2;
    pub const CERT_INFO_VERSION_FLAG: u32 = 1;
    pub const CERT_INFO_SERIAL_NUMBER_FLAG: u32 = 2;
    pub const CERT_INFO_SIGNATURE_ALGORITHM_FLAG: u32 = 3;
    pub const CERT_INFO_ISSUER_FLAG: u32 = 4;
    pub const CERT_INFO_NOT_BEFORE_FLAG: u32 = 5;
    pub const CERT_INFO_NOT_AFTER_FLAG: u32 = 6;
    pub const CERT_INFO_SUBJECT_FLAG: u32 = 7;
    pub const CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG: u32 = 8;
    pub const CERT_INFO_ISSUER_UNIQUE_ID_FLAG: u32 = 9;
    pub const CERT_INFO_SUBJECT_UNIQUE_ID_FLAG: u32 = 10;
    pub const CERT_INFO_EXTENSION_FLAG: u32 = 11;
    pub const CRL_V1: u32 = 0;
    pub const CRL_V2: u32 = 1;
    pub const CERT_BUNDLE_CERTIFICATE: u32 = 0;
    pub const CERT_BUNDLE_CRL: u32 = 1;
    pub const CERT_REQUEST_V1: u32 = 0;
    pub const CERT_KEYGEN_REQUEST_V1: u32 = 0;
    pub const CTL_V1: u32 = 0;
    pub const CERT_ENCODING_TYPE_MASK: u32 = 65535;
    pub const CMSG_ENCODING_TYPE_MASK: u32 = 4294901760;
    pub const CRYPT_ASN_ENCODING: u32 = 1;
    pub const CRYPT_NDR_ENCODING: u32 = 2;
    pub const X509_ASN_ENCODING: u32 = 1;
    pub const X509_NDR_ENCODING: u32 = 2;
    pub const PKCS_7_ASN_ENCODING: u32 = 65536;
    pub const PKCS_7_NDR_ENCODING: u32 = 131072;
    pub const CRYPT_FORMAT_STR_MULTI_LINE: u32 = 1;
    pub const CRYPT_FORMAT_STR_NO_HEX: u32 = 16;
    pub const CRYPT_FORMAT_SIMPLE: u32 = 1;
    pub const CRYPT_FORMAT_X509: u32 = 2;
    pub const CRYPT_FORMAT_OID: u32 = 4;
    pub const CRYPT_FORMAT_RDN_SEMICOLON: u32 = 256;
    pub const CRYPT_FORMAT_RDN_CRLF: u32 = 512;
    pub const CRYPT_FORMAT_RDN_UNQUOTE: u32 = 1024;
    pub const CRYPT_FORMAT_RDN_REVERSE: u32 = 2048;
    pub const CRYPT_FORMAT_COMMA: u32 = 4096;
    pub const CRYPT_FORMAT_SEMICOLON: u32 = 256;
    pub const CRYPT_FORMAT_CRLF: u32 = 512;
    pub const CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG: u32 = 8;
    pub const CRYPT_ENCODE_ALLOC_FLAG: u32 = 32768;
    pub const CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG: u32 = 2147483648;
    pub const CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG: u32 = 536870912;
    pub const CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG: u32 = 268435456;
    pub const CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG: u32 = 1073741824;
    pub const CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG: u32 = 65536;
    pub const CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG: u32 = 131072;
    pub const CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG: u32 = 262144;
    pub const CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG: u32 = 393216;
    pub const CRYPT_DECODE_NOCOPY_FLAG: u32 = 1;
    pub const CRYPT_DECODE_TO_BE_SIGNED_FLAG: u32 = 2;
    pub const CRYPT_DECODE_SHARE_OID_STRING_FLAG: u32 = 4;
    pub const CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG: u32 = 8;
    pub const CRYPT_DECODE_ALLOC_FLAG: u32 = 32768;
    pub const CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG: u32 = 16777216;
    pub const CRYPT_DECODE_ENABLE_PUNYCODE_FLAG: u32 = 33554432;
    pub const CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG: u32 = 67108864;
    pub const CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG: u32 = 100663296;
    pub const CRYPT_ENCODE_DECODE_NONE: u32 = 0;
    pub const szOID_AUTHORITY_KEY_IDENTIFIER: &[u8; 9usize] = b"2.5.29.1\0";
    pub const szOID_KEY_ATTRIBUTES: &[u8; 9usize] = b"2.5.29.2\0";
    pub const szOID_CERT_POLICIES_95: &[u8; 9usize] = b"2.5.29.3\0";
    pub const szOID_KEY_USAGE_RESTRICTION: &[u8; 9usize] = b"2.5.29.4\0";
    pub const szOID_SUBJECT_ALT_NAME: &[u8; 9usize] = b"2.5.29.7\0";
    pub const szOID_ISSUER_ALT_NAME: &[u8; 9usize] = b"2.5.29.8\0";
    pub const szOID_BASIC_CONSTRAINTS: &[u8; 10usize] = b"2.5.29.10\0";
    pub const szOID_KEY_USAGE: &[u8; 10usize] = b"2.5.29.15\0";
    pub const szOID_PRIVATEKEY_USAGE_PERIOD: &[u8; 10usize] = b"2.5.29.16\0";
    pub const szOID_BASIC_CONSTRAINTS2: &[u8; 10usize] = b"2.5.29.19\0";
    pub const szOID_CERT_POLICIES: &[u8; 10usize] = b"2.5.29.32\0";
    pub const szOID_ANY_CERT_POLICY: &[u8; 12usize] = b"2.5.29.32.0\0";
    pub const szOID_INHIBIT_ANY_POLICY: &[u8; 10usize] = b"2.5.29.54\0";
    pub const szOID_AUTHORITY_KEY_IDENTIFIER2: &[u8; 10usize] = b"2.5.29.35\0";
    pub const szOID_SUBJECT_KEY_IDENTIFIER: &[u8; 10usize] = b"2.5.29.14\0";
    pub const szOID_SUBJECT_ALT_NAME2: &[u8; 10usize] = b"2.5.29.17\0";
    pub const szOID_ISSUER_ALT_NAME2: &[u8; 10usize] = b"2.5.29.18\0";
    pub const szOID_CRL_REASON_CODE: &[u8; 10usize] = b"2.5.29.21\0";
    pub const szOID_REASON_CODE_HOLD: &[u8; 10usize] = b"2.5.29.23\0";
    pub const szOID_CRL_DIST_POINTS: &[u8; 10usize] = b"2.5.29.31\0";
    pub const szOID_ENHANCED_KEY_USAGE: &[u8; 10usize] = b"2.5.29.37\0";
    pub const szOID_ANY_ENHANCED_KEY_USAGE: &[u8; 12usize] = b"2.5.29.37.0\0";
    pub const szOID_CRL_NUMBER: &[u8; 10usize] = b"2.5.29.20\0";
    pub const szOID_DELTA_CRL_INDICATOR: &[u8; 10usize] = b"2.5.29.27\0";
    pub const szOID_ISSUING_DIST_POINT: &[u8; 10usize] = b"2.5.29.28\0";
    pub const szOID_FRESHEST_CRL: &[u8; 10usize] = b"2.5.29.46\0";
    pub const szOID_NAME_CONSTRAINTS: &[u8; 10usize] = b"2.5.29.30\0";
    pub const szOID_POLICY_MAPPINGS: &[u8; 10usize] = b"2.5.29.33\0";
    pub const szOID_LEGACY_POLICY_MAPPINGS: &[u8; 9usize] = b"2.5.29.5\0";
    pub const szOID_POLICY_CONSTRAINTS: &[u8; 10usize] = b"2.5.29.36\0";
    pub const szOID_RENEWAL_CERTIFICATE: &[u8; 21usize] = b"1.3.6.1.4.1.311.13.1\0";
    pub const szOID_ENROLLMENT_NAME_VALUE_PAIR: &[u8; 23usize] = b"1.3.6.1.4.1.311.13.2.1\0";
    pub const szOID_ENROLLMENT_CSP_PROVIDER: &[u8; 23usize] = b"1.3.6.1.4.1.311.13.2.2\0";
    pub const szOID_OS_VERSION: &[u8; 23usize] = b"1.3.6.1.4.1.311.13.2.3\0";
    pub const szOID_ENROLLMENT_AGENT: &[u8; 23usize] = b"1.3.6.1.4.1.311.20.2.1\0";
    pub const szOID_PKIX: &[u8; 14usize] = b"1.3.6.1.5.5.7\0";
    pub const szOID_PKIX_PE: &[u8; 16usize] = b"1.3.6.1.5.5.7.1\0";
    pub const szOID_AUTHORITY_INFO_ACCESS: &[u8; 18usize] = b"1.3.6.1.5.5.7.1.1\0";
    pub const szOID_SUBJECT_INFO_ACCESS: &[u8; 19usize] = b"1.3.6.1.5.5.7.1.11\0";
    pub const szOID_BIOMETRIC_EXT: &[u8; 18usize] = b"1.3.6.1.5.5.7.1.2\0";
    pub const szOID_QC_STATEMENTS_EXT: &[u8; 18usize] = b"1.3.6.1.5.5.7.1.3\0";
    pub const szOID_LOGOTYPE_EXT: &[u8; 19usize] = b"1.3.6.1.5.5.7.1.12\0";
    pub const szOID_TLS_FEATURES_EXT: &[u8; 19usize] = b"1.3.6.1.5.5.7.1.24\0";
    pub const szOID_CERT_EXTENSIONS: &[u8; 23usize] = b"1.3.6.1.4.1.311.2.1.14\0";
    pub const szOID_NEXT_UPDATE_LOCATION: &[u8; 21usize] = b"1.3.6.1.4.1.311.10.2\0";
    pub const szOID_REMOVE_CERTIFICATE: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.8.1\0";
    pub const szOID_CROSS_CERT_DIST_POINTS: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.9.1\0";
    pub const szOID_CTL: &[u8; 21usize] = b"1.3.6.1.4.1.311.10.1\0";
    pub const szOID_SORTED_CTL: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.1.1\0";
    pub const szOID_SERIALIZED: &[u8; 25usize] = b"1.3.6.1.4.1.311.10.3.3.1\0";
    pub const szOID_NT_PRINCIPAL_NAME: &[u8; 23usize] = b"1.3.6.1.4.1.311.20.2.3\0";
    pub const szOID_INTERNATIONALIZED_EMAIL_ADDRESS: &[u8; 23usize] = b"1.3.6.1.4.1.311.20.2.4\0";
    pub const szOID_PRODUCT_UPDATE: &[u8; 21usize] = b"1.3.6.1.4.1.311.31.1\0";
    pub const szOID_ANY_APPLICATION_POLICY: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.12.1\0";
    pub const szOID_AUTO_ENROLL_CTL_USAGE: &[u8; 21usize] = b"1.3.6.1.4.1.311.20.1\0";
    pub const szOID_ENROLL_CERTTYPE_EXTENSION: &[u8; 21usize] = b"1.3.6.1.4.1.311.20.2\0";
    pub const szOID_CERT_MANIFOLD: &[u8; 21usize] = b"1.3.6.1.4.1.311.20.3\0";
    pub const szOID_CERTSRV_CA_VERSION: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.1\0";
    pub const szOID_CERTSRV_PREVIOUS_CERT_HASH: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.2\0";
    pub const szOID_CRL_VIRTUAL_BASE: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.3\0";
    pub const szOID_CRL_NEXT_PUBLISH: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.4\0";
    pub const szOID_KP_CA_EXCHANGE: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.5\0";
    pub const szOID_KP_PRIVACY_CA: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.36\0";
    pub const szOID_KP_KEY_RECOVERY_AGENT: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.6\0";
    pub const szOID_CERTIFICATE_TEMPLATE: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.7\0";
    pub const szOID_ENTERPRISE_OID_ROOT: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.8\0";
    pub const szOID_RDN_DUMMY_SIGNER: &[u8; 21usize] = b"1.3.6.1.4.1.311.21.9\0";
    pub const szOID_APPLICATION_CERT_POLICIES: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.10\0";
    pub const szOID_APPLICATION_POLICY_MAPPINGS: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.11\0";
    pub const szOID_APPLICATION_POLICY_CONSTRAINTS: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.12\0";
    pub const szOID_ARCHIVED_KEY_ATTR: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.13\0";
    pub const szOID_CRL_SELF_CDP: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.14\0";
    pub const szOID_REQUIRE_CERT_CHAIN_POLICY: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.15\0";
    pub const szOID_ARCHIVED_KEY_CERT_HASH: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.16\0";
    pub const szOID_ISSUED_CERT_HASH: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.17\0";
    pub const szOID_DS_EMAIL_REPLICATION: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.19\0";
    pub const szOID_REQUEST_CLIENT_INFO: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.20\0";
    pub const szOID_ENCRYPTED_KEY_HASH: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.21\0";
    pub const szOID_CERTSRV_CROSSCA_VERSION: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.22\0";
    pub const szOID_NTDS_REPLICATION: &[u8; 21usize] = b"1.3.6.1.4.1.311.25.1\0";
    pub const szOID_SUBJECT_DIR_ATTRS: &[u8; 9usize] = b"2.5.29.9\0";
    pub const szOID_PKIX_KP: &[u8; 16usize] = b"1.3.6.1.5.5.7.3\0";
    pub const szOID_PKIX_KP_SERVER_AUTH: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.1\0";
    pub const szOID_PKIX_KP_CLIENT_AUTH: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.2\0";
    pub const szOID_PKIX_KP_CODE_SIGNING: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.3\0";
    pub const szOID_PKIX_KP_EMAIL_PROTECTION: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.4\0";
    pub const szOID_PKIX_KP_IPSEC_END_SYSTEM: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.5\0";
    pub const szOID_PKIX_KP_IPSEC_TUNNEL: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.6\0";
    pub const szOID_PKIX_KP_IPSEC_USER: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.7\0";
    pub const szOID_PKIX_KP_TIMESTAMP_SIGNING: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.8\0";
    pub const szOID_PKIX_KP_OCSP_SIGNING: &[u8; 18usize] = b"1.3.6.1.5.5.7.3.9\0";
    pub const szOID_PKIX_OCSP_NOCHECK: &[u8; 21usize] = b"1.3.6.1.5.5.7.48.1.5\0";
    pub const szOID_PKIX_OCSP_NONCE: &[u8; 21usize] = b"1.3.6.1.5.5.7.48.1.2\0";
    pub const szOID_IPSEC_KP_IKE_INTERMEDIATE: &[u8; 18usize] = b"1.3.6.1.5.5.8.2.2\0";
    pub const szOID_PKINIT_KP_KDC: &[u8; 16usize] = b"1.3.6.1.5.2.3.5\0";
    pub const szOID_KP_CTL_USAGE_SIGNING: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.1\0";
    pub const szOID_KP_TIME_STAMP_SIGNING: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.2\0";
    pub const szOID_SERVER_GATED_CRYPTO: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.3\0";
    pub const szOID_SGC_NETSCAPE: &[u8; 22usize] = b"2.16.840.1.113730.4.1\0";
    pub const szOID_KP_EFS: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.4\0";
    pub const szOID_EFS_RECOVERY: &[u8; 25usize] = b"1.3.6.1.4.1.311.10.3.4.1\0";
    pub const szOID_WHQL_CRYPTO: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.5\0";
    pub const szOID_ATTEST_WHQL_CRYPTO: &[u8; 25usize] = b"1.3.6.1.4.1.311.10.3.5.1\0";
    pub const szOID_NT5_CRYPTO: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.6\0";
    pub const szOID_OEM_WHQL_CRYPTO: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.7\0";
    pub const szOID_EMBEDDED_NT_CRYPTO: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.8\0";
    pub const szOID_ROOT_LIST_SIGNER: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.3.9\0";
    pub const szOID_KP_QUALIFIED_SUBORDINATION: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.10\0";
    pub const szOID_KP_KEY_RECOVERY: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.11\0";
    pub const szOID_KP_DOCUMENT_SIGNING: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.12\0";
    pub const szOID_KP_LIFETIME_SIGNING: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.13\0";
    pub const szOID_KP_MOBILE_DEVICE_SOFTWARE: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.14\0";
    pub const szOID_KP_SMART_DISPLAY: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.15\0";
    pub const szOID_KP_CSP_SIGNATURE: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.16\0";
    pub const szOID_KP_FLIGHT_SIGNING: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.27\0";
    pub const szOID_PLATFORM_MANIFEST_BINARY_ID: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.28\0";
    pub const szOID_DRM: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.5.1\0";
    pub const szOID_DRM_INDIVIDUALIZATION: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.5.2\0";
    pub const szOID_LICENSES: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.6.1\0";
    pub const szOID_LICENSE_SERVER: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.6.2\0";
    pub const szOID_KP_SMARTCARD_LOGON: &[u8; 23usize] = b"1.3.6.1.4.1.311.20.2.2\0";
    pub const szOID_KP_KERNEL_MODE_CODE_SIGNING: &[u8; 23usize] = b"1.3.6.1.4.1.311.61.1.1\0";
    pub const szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING: &[u8; 23usize] =
        b"1.3.6.1.4.1.311.61.4.1\0";
    pub const szOID_REVOKED_LIST_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.19\0";
    pub const szOID_WINDOWS_KITS_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.20\0";
    pub const szOID_WINDOWS_RT_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.21\0";
    pub const szOID_PROTECTED_PROCESS_LIGHT_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.22\0";
    pub const szOID_WINDOWS_TCB_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.23\0";
    pub const szOID_PROTECTED_PROCESS_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.24\0";
    pub const szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER: &[u8; 24usize] =
        b"1.3.6.1.4.1.311.10.3.25\0";
    pub const szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER: &[u8; 24usize] =
        b"1.3.6.1.4.1.311.10.3.26\0";
    pub const szOID_DISALLOWED_LIST: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.30\0";
    pub const szOID_PIN_RULES_SIGNER: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.31\0";
    pub const szOID_PIN_RULES_CTL: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.32\0";
    pub const szOID_PIN_RULES_EXT: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.33\0";
    pub const szOID_PIN_RULES_DOMAIN_NAME: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.34\0";
    pub const szOID_PIN_RULES_LOG_END_DATE_EXT: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.35\0";
    pub const szOID_IUM_SIGNING: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.37\0";
    pub const szOID_EV_WHQL_CRYPTO: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.39\0";
    pub const szOID_BIOMETRIC_SIGNING: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.41\0";
    pub const szOID_ENCLAVE_SIGNING: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.42\0";
    pub const szOID_SYNC_ROOT_CTL_EXT: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.50\0";
    pub const szOID_HPKP_DOMAIN_NAME_CTL: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.60\0";
    pub const szOID_HPKP_HEADER_VALUE_CTL: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.3.61\0";
    pub const szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING: &[u8; 23usize] =
        b"1.3.6.1.4.1.311.61.5.1\0";
    pub const szOID_WINDOWS_STORE_SIGNER: &[u8; 23usize] = b"1.3.6.1.4.1.311.76.3.1\0";
    pub const szOID_DYNAMIC_CODE_GEN_SIGNER: &[u8; 23usize] = b"1.3.6.1.4.1.311.76.5.1\0";
    pub const szOID_MICROSOFT_PUBLISHER_SIGNER: &[u8; 23usize] = b"1.3.6.1.4.1.311.76.8.1\0";
    pub const szOID_YESNO_TRUST_ATTR: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.4.1\0";
    pub const szOID_SITE_PIN_RULES_INDEX_ATTR: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.4.2\0";
    pub const szOID_SITE_PIN_RULES_FLAGS_ATTR: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.4.3\0";
    pub const SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG: u32 = 1;
    pub const szOID_PKIX_POLICY_QUALIFIER_CPS: &[u8; 18usize] = b"1.3.6.1.5.5.7.2.1\0";
    pub const szOID_PKIX_POLICY_QUALIFIER_USERNOTICE: &[u8; 18usize] = b"1.3.6.1.5.5.7.2.2\0";
    pub const szOID_ROOT_PROGRAM_FLAGS: &[u8; 23usize] = b"1.3.6.1.4.1.311.60.1.1\0";
    pub const CERT_ROOT_PROGRAM_FLAG_ORG: u32 = 128;
    pub const CERT_ROOT_PROGRAM_FLAG_LSC: u32 = 64;
    pub const CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO: u32 = 32;
    pub const CERT_ROOT_PROGRAM_FLAG_OU: u32 = 16;
    pub const CERT_ROOT_PROGRAM_FLAG_ADDRESS: u32 = 8;
    pub const szOID_CERT_POLICIES_95_QUALIFIER1: &[u8; 26usize] = b"2.16.840.1.113733.1.7.1.1\0";
    pub const szOID_RDN_TPM_MANUFACTURER: &[u8; 13usize] = b"2.23.133.2.1\0";
    pub const szOID_RDN_TPM_MODEL: &[u8; 13usize] = b"2.23.133.2.2\0";
    pub const szOID_RDN_TPM_VERSION: &[u8; 13usize] = b"2.23.133.2.3\0";
    pub const szOID_RDN_TCG_PLATFORM_MANUFACTURER: &[u8; 13usize] = b"2.23.133.2.4\0";
    pub const szOID_RDN_TCG_PLATFORM_MODEL: &[u8; 13usize] = b"2.23.133.2.5\0";
    pub const szOID_RDN_TCG_PLATFORM_VERSION: &[u8; 13usize] = b"2.23.133.2.6\0";
    pub const szOID_CT_CERT_SCTLIST: &[u8; 24usize] = b"1.3.6.1.4.1.11129.2.4.2\0";
    pub const szOID_ENROLL_EK_INFO: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.23\0";
    pub const szOID_ENROLL_AIK_INFO: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.39\0";
    pub const szOID_ENROLL_ATTESTATION_STATEMENT: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.24\0";
    pub const szOID_ENROLL_KSP_NAME: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.25\0";
    pub const szOID_ENROLL_EKPUB_CHALLENGE: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.26\0";
    pub const szOID_ENROLL_CAXCHGCERT_HASH: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.27\0";
    pub const szOID_ENROLL_ATTESTATION_CHALLENGE: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.28\0";
    pub const szOID_ENROLL_ENCRYPTION_ALGORITHM: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.29\0";
    pub const szOID_KP_TPM_EK_CERTIFICATE: &[u8; 13usize] = b"2.23.133.8.1\0";
    pub const szOID_KP_TPM_PLATFORM_CERTIFICATE: &[u8; 13usize] = b"2.23.133.8.2\0";
    pub const szOID_KP_TPM_AIK_CERTIFICATE: &[u8; 13usize] = b"2.23.133.8.3\0";
    pub const szOID_ENROLL_EKVERIFYKEY: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.30\0";
    pub const szOID_ENROLL_EKVERIFYCERT: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.31\0";
    pub const szOID_ENROLL_EKVERIFYCREDS: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.32\0";
    pub const szOID_ENROLL_SCEP_ERROR: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.33\0";
    pub const szOID_ENROLL_SCEP_SERVER_STATE: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.34\0";
    pub const szOID_ENROLL_SCEP_CHALLENGE_ANSWER: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.35\0";
    pub const szOID_ENROLL_SCEP_CLIENT_REQUEST: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.37\0";
    pub const szOID_ENROLL_SCEP_SERVER_MESSAGE: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.38\0";
    pub const szOID_ENROLL_SCEP_SERVER_SECRET: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.40\0";
    pub const szOID_ENROLL_KEY_AFFINITY: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.41\0";
    pub const szOID_ENROLL_SCEP_SIGNER_HASH: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.42\0";
    pub const szOID_ENROLL_EK_CA_KEYID: &[u8; 22usize] = b"1.3.6.1.4.1.311.21.43\0";
    pub const szOID_ATTR_SUPPORTED_ALGORITHMS: &[u8; 9usize] = b"2.5.4.52\0";
    pub const szOID_ATTR_TPM_SPECIFICATION: &[u8; 14usize] = b"2.23.133.2.16\0";
    pub const szOID_ATTR_PLATFORM_SPECIFICATION: &[u8; 14usize] = b"2.23.133.2.17\0";
    pub const szOID_ATTR_TPM_SECURITY_ASSERTIONS: &[u8; 14usize] = b"2.23.133.2.18\0";
    pub const CERT_UNICODE_RDN_ERR_INDEX_MASK: u32 = 1023;
    pub const CERT_UNICODE_RDN_ERR_INDEX_SHIFT: u32 = 22;
    pub const CERT_UNICODE_ATTR_ERR_INDEX_MASK: u32 = 63;
    pub const CERT_UNICODE_ATTR_ERR_INDEX_SHIFT: u32 = 16;
    pub const CERT_UNICODE_VALUE_ERR_INDEX_MASK: u32 = 65535;
    pub const CERT_UNICODE_VALUE_ERR_INDEX_SHIFT: u32 = 0;
    pub const CERT_DIGITAL_SIGNATURE_KEY_USAGE: u32 = 128;
    pub const CERT_NON_REPUDIATION_KEY_USAGE: u32 = 64;
    pub const CERT_KEY_ENCIPHERMENT_KEY_USAGE: u32 = 32;
    pub const CERT_DATA_ENCIPHERMENT_KEY_USAGE: u32 = 16;
    pub const CERT_KEY_AGREEMENT_KEY_USAGE: u32 = 8;
    pub const CERT_KEY_CERT_SIGN_KEY_USAGE: u32 = 4;
    pub const CERT_OFFLINE_CRL_SIGN_KEY_USAGE: u32 = 2;
    pub const CERT_CRL_SIGN_KEY_USAGE: u32 = 2;
    pub const CERT_ENCIPHER_ONLY_KEY_USAGE: u32 = 1;
    pub const CERT_DECIPHER_ONLY_KEY_USAGE: u32 = 128;
    pub const CERT_ALT_NAME_OTHER_NAME: u32 = 1;
    pub const CERT_ALT_NAME_RFC822_NAME: u32 = 2;
    pub const CERT_ALT_NAME_DNS_NAME: u32 = 3;
    pub const CERT_ALT_NAME_X400_ADDRESS: u32 = 4;
    pub const CERT_ALT_NAME_DIRECTORY_NAME: u32 = 5;
    pub const CERT_ALT_NAME_EDI_PARTY_NAME: u32 = 6;
    pub const CERT_ALT_NAME_URL: u32 = 7;
    pub const CERT_ALT_NAME_IP_ADDRESS: u32 = 8;
    pub const CERT_ALT_NAME_REGISTERED_ID: u32 = 9;
    pub const CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK: u32 = 255;
    pub const CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT: u32 = 16;
    pub const CERT_ALT_NAME_VALUE_ERR_INDEX_MASK: u32 = 65535;
    pub const CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT: u32 = 0;
    pub const CERT_CA_SUBJECT_FLAG: u32 = 128;
    pub const CERT_END_ENTITY_SUBJECT_FLAG: u32 = 64;
    pub const szOID_PKIX_ACC_DESCR: &[u8; 17usize] = b"1.3.6.1.5.5.7.48\0";
    pub const szOID_PKIX_OCSP: &[u8; 19usize] = b"1.3.6.1.5.5.7.48.1\0";
    pub const szOID_PKIX_CA_ISSUERS: &[u8; 19usize] = b"1.3.6.1.5.5.7.48.2\0";
    pub const szOID_PKIX_TIME_STAMPING: &[u8; 19usize] = b"1.3.6.1.5.5.7.48.3\0";
    pub const szOID_PKIX_CA_REPOSITORY: &[u8; 19usize] = b"1.3.6.1.5.5.7.48.5\0";
    pub const CRL_REASON_UNSPECIFIED: u32 = 0;
    pub const CRL_REASON_KEY_COMPROMISE: u32 = 1;
    pub const CRL_REASON_CA_COMPROMISE: u32 = 2;
    pub const CRL_REASON_AFFILIATION_CHANGED: u32 = 3;
    pub const CRL_REASON_SUPERSEDED: u32 = 4;
    pub const CRL_REASON_CESSATION_OF_OPERATION: u32 = 5;
    pub const CRL_REASON_CERTIFICATE_HOLD: u32 = 6;
    pub const CRL_REASON_REMOVE_FROM_CRL: u32 = 8;
    pub const CRL_REASON_PRIVILEGE_WITHDRAWN: u32 = 9;
    pub const CRL_REASON_AA_COMPROMISE: u32 = 10;
    pub const CRL_DIST_POINT_NO_NAME: u32 = 0;
    pub const CRL_DIST_POINT_FULL_NAME: u32 = 1;
    pub const CRL_DIST_POINT_ISSUER_RDN_NAME: u32 = 2;
    pub const CRL_REASON_UNUSED_FLAG: u32 = 128;
    pub const CRL_REASON_KEY_COMPROMISE_FLAG: u32 = 64;
    pub const CRL_REASON_CA_COMPROMISE_FLAG: u32 = 32;
    pub const CRL_REASON_AFFILIATION_CHANGED_FLAG: u32 = 16;
    pub const CRL_REASON_SUPERSEDED_FLAG: u32 = 8;
    pub const CRL_REASON_CESSATION_OF_OPERATION_FLAG: u32 = 4;
    pub const CRL_REASON_CERTIFICATE_HOLD_FLAG: u32 = 2;
    pub const CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG: u32 = 1;
    pub const CRL_REASON_AA_COMPROMISE_FLAG: u32 = 128;
    pub const CRL_DIST_POINT_ERR_INDEX_MASK: u32 = 127;
    pub const CRL_DIST_POINT_ERR_INDEX_SHIFT: u32 = 24;
    pub const CRL_DIST_POINT_ERR_CRL_ISSUER_BIT: u32 = 2147483648;
    pub const CROSS_CERT_DIST_POINT_ERR_INDEX_MASK: u32 = 255;
    pub const CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT: u32 = 24;
    pub const CERT_EXCLUDED_SUBTREE_BIT: u32 = 2147483648;
    pub const SORTED_CTL_EXT_FLAGS_OFFSET: u32 = 0;
    pub const SORTED_CTL_EXT_COUNT_OFFSET: u32 = 4;
    pub const SORTED_CTL_EXT_MAX_COLLISION_OFFSET: u32 = 8;
    pub const SORTED_CTL_EXT_HASH_BUCKET_OFFSET: u32 = 12;
    pub const SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG: u32 = 1;
    pub const CERT_DSS_R_LEN: u32 = 20;
    pub const CERT_DSS_S_LEN: u32 = 20;
    pub const CERT_DSS_SIGNATURE_LEN: u32 = 40;
    pub const CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN: u32 = 48;
    pub const CRYPT_X942_COUNTER_BYTE_LENGTH: u32 = 4;
    pub const CRYPT_X942_KEY_LENGTH_BYTE_LENGTH: u32 = 4;
    pub const CRYPT_X942_PUB_INFO_BYTE_LENGTH: u32 = 64;
    pub const CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH: u32 = 4;
    pub const CRYPT_RC2_40BIT_VERSION: u32 = 160;
    pub const CRYPT_RC2_56BIT_VERSION: u32 = 52;
    pub const CRYPT_RC2_64BIT_VERSION: u32 = 120;
    pub const CRYPT_RC2_128BIT_VERSION: u32 = 58;
    pub const szOID_QC_EU_COMPLIANCE: &[u8; 15usize] = b"0.4.0.1862.1.1\0";
    pub const szOID_QC_SSCD: &[u8; 15usize] = b"0.4.0.1862.1.4\0";
    pub const PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC: u32 = 1;
    pub const szOID_VERISIGN_PRIVATE_6_9: &[u8; 24usize] = b"2.16.840.1.113733.1.6.9\0";
    pub const szOID_VERISIGN_ONSITE_JURISDICTION_HASH: &[u8; 25usize] =
        b"2.16.840.1.113733.1.6.11\0";
    pub const szOID_VERISIGN_BITSTRING_6_13: &[u8; 25usize] = b"2.16.840.1.113733.1.6.13\0";
    pub const szOID_VERISIGN_ISS_STRONG_CRYPTO: &[u8; 24usize] = b"2.16.840.1.113733.1.8.1\0";
    pub const szOIDVerisign_MessageType: &[u8; 24usize] = b"2.16.840.1.113733.1.9.2\0";
    pub const szOIDVerisign_PkiStatus: &[u8; 24usize] = b"2.16.840.1.113733.1.9.3\0";
    pub const szOIDVerisign_FailInfo: &[u8; 24usize] = b"2.16.840.1.113733.1.9.4\0";
    pub const szOIDVerisign_SenderNonce: &[u8; 24usize] = b"2.16.840.1.113733.1.9.5\0";
    pub const szOIDVerisign_RecipientNonce: &[u8; 24usize] = b"2.16.840.1.113733.1.9.6\0";
    pub const szOIDVerisign_TransactionID: &[u8; 24usize] = b"2.16.840.1.113733.1.9.7\0";
    pub const szOID_NETSCAPE: &[u8; 18usize] = b"2.16.840.1.113730\0";
    pub const szOID_NETSCAPE_CERT_EXTENSION: &[u8; 20usize] = b"2.16.840.1.113730.1\0";
    pub const szOID_NETSCAPE_CERT_TYPE: &[u8; 22usize] = b"2.16.840.1.113730.1.1\0";
    pub const szOID_NETSCAPE_BASE_URL: &[u8; 22usize] = b"2.16.840.1.113730.1.2\0";
    pub const szOID_NETSCAPE_REVOCATION_URL: &[u8; 22usize] = b"2.16.840.1.113730.1.3\0";
    pub const szOID_NETSCAPE_CA_REVOCATION_URL: &[u8; 22usize] = b"2.16.840.1.113730.1.4\0";
    pub const szOID_NETSCAPE_CERT_RENEWAL_URL: &[u8; 22usize] = b"2.16.840.1.113730.1.7\0";
    pub const szOID_NETSCAPE_CA_POLICY_URL: &[u8; 22usize] = b"2.16.840.1.113730.1.8\0";
    pub const szOID_NETSCAPE_SSL_SERVER_NAME: &[u8; 23usize] = b"2.16.840.1.113730.1.12\0";
    pub const szOID_NETSCAPE_COMMENT: &[u8; 23usize] = b"2.16.840.1.113730.1.13\0";
    pub const szOID_NETSCAPE_DATA_TYPE: &[u8; 20usize] = b"2.16.840.1.113730.2\0";
    pub const szOID_NETSCAPE_CERT_SEQUENCE: &[u8; 22usize] = b"2.16.840.1.113730.2.5\0";
    pub const NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE: u32 = 128;
    pub const NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE: u32 = 64;
    pub const NETSCAPE_SMIME_CERT_TYPE: u32 = 32;
    pub const NETSCAPE_SIGN_CERT_TYPE: u32 = 16;
    pub const NETSCAPE_SSL_CA_CERT_TYPE: u32 = 4;
    pub const NETSCAPE_SMIME_CA_CERT_TYPE: u32 = 2;
    pub const NETSCAPE_SIGN_CA_CERT_TYPE: u32 = 1;
    pub const szOID_CT_PKI_DATA: &[u8; 19usize] = b"1.3.6.1.5.5.7.12.2\0";
    pub const szOID_CT_PKI_RESPONSE: &[u8; 19usize] = b"1.3.6.1.5.5.7.12.3\0";
    pub const szOID_PKIX_NO_SIGNATURE: &[u8; 18usize] = b"1.3.6.1.5.5.7.6.2\0";
    pub const szOID_CMC: &[u8; 16usize] = b"1.3.6.1.5.5.7.7\0";
    pub const szOID_CMC_STATUS_INFO: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.1\0";
    pub const szOID_CMC_IDENTIFICATION: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.2\0";
    pub const szOID_CMC_IDENTITY_PROOF: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.3\0";
    pub const szOID_CMC_DATA_RETURN: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.4\0";
    pub const szOID_CMC_TRANSACTION_ID: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.5\0";
    pub const szOID_CMC_SENDER_NONCE: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.6\0";
    pub const szOID_CMC_RECIPIENT_NONCE: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.7\0";
    pub const szOID_CMC_ADD_EXTENSIONS: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.8\0";
    pub const szOID_CMC_ENCRYPTED_POP: &[u8; 18usize] = b"1.3.6.1.5.5.7.7.9\0";
    pub const szOID_CMC_DECRYPTED_POP: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.10\0";
    pub const szOID_CMC_LRA_POP_WITNESS: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.11\0";
    pub const szOID_CMC_GET_CERT: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.15\0";
    pub const szOID_CMC_GET_CRL: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.16\0";
    pub const szOID_CMC_REVOKE_REQUEST: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.17\0";
    pub const szOID_CMC_REG_INFO: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.18\0";
    pub const szOID_CMC_RESPONSE_INFO: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.19\0";
    pub const szOID_CMC_QUERY_PENDING: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.21\0";
    pub const szOID_CMC_ID_POP_LINK_RANDOM: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.22\0";
    pub const szOID_CMC_ID_POP_LINK_WITNESS: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.23\0";
    pub const szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE: &[u8; 19usize] = b"1.3.6.1.5.5.7.7.24\0";
    pub const szOID_CMC_ADD_ATTRIBUTES: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.10.1\0";
    pub const CMC_TAGGED_CERT_REQUEST_CHOICE: u32 = 1;
    pub const CMC_OTHER_INFO_NO_CHOICE: u32 = 0;
    pub const CMC_OTHER_INFO_FAIL_CHOICE: u32 = 1;
    pub const CMC_OTHER_INFO_PEND_CHOICE: u32 = 2;
    pub const CMC_STATUS_SUCCESS: u32 = 0;
    pub const CMC_STATUS_FAILED: u32 = 2;
    pub const CMC_STATUS_PENDING: u32 = 3;
    pub const CMC_STATUS_NO_SUPPORT: u32 = 4;
    pub const CMC_STATUS_CONFIRM_REQUIRED: u32 = 5;
    pub const CMC_FAIL_BAD_ALG: u32 = 0;
    pub const CMC_FAIL_BAD_MESSAGE_CHECK: u32 = 1;
    pub const CMC_FAIL_BAD_REQUEST: u32 = 2;
    pub const CMC_FAIL_BAD_TIME: u32 = 3;
    pub const CMC_FAIL_BAD_CERT_ID: u32 = 4;
    pub const CMC_FAIL_UNSUPORTED_EXT: u32 = 5;
    pub const CMC_FAIL_MUST_ARCHIVE_KEYS: u32 = 6;
    pub const CMC_FAIL_BAD_IDENTITY: u32 = 7;
    pub const CMC_FAIL_POP_REQUIRED: u32 = 8;
    pub const CMC_FAIL_POP_FAILED: u32 = 9;
    pub const CMC_FAIL_NO_KEY_REUSE: u32 = 10;
    pub const CMC_FAIL_INTERNAL_CA_ERROR: u32 = 11;
    pub const CMC_FAIL_TRY_LATER: u32 = 12;
    pub const CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE: u32 = 1;
    pub const CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE: u32 = 2;
    pub const CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE: u32 = 0;
    pub const CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE: u32 = 1;
    pub const CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE: u32 = 2;
    pub const CERT_LOGOTYPE_DIRECT_INFO_CHOICE: u32 = 1;
    pub const CERT_LOGOTYPE_INDIRECT_INFO_CHOICE: u32 = 2;
    pub const szOID_LOYALTY_OTHER_LOGOTYPE: &[u8; 19usize] = b"1.3.6.1.5.5.7.20.1\0";
    pub const szOID_BACKGROUND_OTHER_LOGOTYPE: &[u8; 19usize] = b"1.3.6.1.5.5.7.20.2\0";
    pub const CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE: u32 = 1;
    pub const CERT_BIOMETRIC_OID_DATA_CHOICE: u32 = 2;
    pub const CERT_BIOMETRIC_PICTURE_TYPE: u32 = 0;
    pub const CERT_BIOMETRIC_SIGNATURE_TYPE: u32 = 1;
    pub const OCSP_REQUEST_V1: u32 = 0;
    pub const OCSP_SUCCESSFUL_RESPONSE: u32 = 0;
    pub const OCSP_MALFORMED_REQUEST_RESPONSE: u32 = 1;
    pub const OCSP_INTERNAL_ERROR_RESPONSE: u32 = 2;
    pub const OCSP_TRY_LATER_RESPONSE: u32 = 3;
    pub const OCSP_SIG_REQUIRED_RESPONSE: u32 = 5;
    pub const OCSP_UNAUTHORIZED_RESPONSE: u32 = 6;
    pub const szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE: &[u8; 21usize] = b"1.3.6.1.5.5.7.48.1.1\0";
    pub const OCSP_BASIC_GOOD_CERT_STATUS: u32 = 0;
    pub const OCSP_BASIC_REVOKED_CERT_STATUS: u32 = 1;
    pub const OCSP_BASIC_UNKNOWN_CERT_STATUS: u32 = 2;
    pub const OCSP_BASIC_RESPONSE_V1: u32 = 0;
    pub const OCSP_BASIC_BY_NAME_RESPONDER_ID: u32 = 1;
    pub const OCSP_BASIC_BY_KEY_RESPONDER_ID: u32 = 2;
    pub const CRYPT_OID_ENCODE_OBJECT_FUNC: &[u8; 21usize] = b"CryptDllEncodeObject\0";
    pub const CRYPT_OID_DECODE_OBJECT_FUNC: &[u8; 21usize] = b"CryptDllDecodeObject\0";
    pub const CRYPT_OID_ENCODE_OBJECT_EX_FUNC: &[u8; 23usize] = b"CryptDllEncodeObjectEx\0";
    pub const CRYPT_OID_DECODE_OBJECT_EX_FUNC: &[u8; 23usize] = b"CryptDllDecodeObjectEx\0";
    pub const CRYPT_OID_CREATE_COM_OBJECT_FUNC: &[u8; 24usize] = b"CryptDllCreateCOMObject\0";
    pub const CRYPT_OID_VERIFY_REVOCATION_FUNC: &[u8; 24usize] = b"CertDllVerifyRevocation\0";
    pub const CRYPT_OID_VERIFY_CTL_USAGE_FUNC: &[u8; 22usize] = b"CertDllVerifyCTLUsage\0";
    pub const CRYPT_OID_FORMAT_OBJECT_FUNC: &[u8; 21usize] = b"CryptDllFormatObject\0";
    pub const CRYPT_OID_FIND_OID_INFO_FUNC: &[u8; 20usize] = b"CryptDllFindOIDInfo\0";
    pub const CRYPT_OID_FIND_LOCALIZED_NAME_FUNC: &[u8; 26usize] = b"CryptDllFindLocalizedName\0";
    pub const CRYPT_OID_REGPATH: &[u8; 36usize] = b"Software\\Microsoft\\Cryptography\\OID\0";
    pub const CRYPT_OID_REG_ENCODING_TYPE_PREFIX: &[u8; 14usize] = b"EncodingType \0";
    pub const CRYPT_OID_REG_DLL_VALUE_NAME: &[u8; 4usize] = b"Dll\0";
    pub const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME: &[u8; 9usize] = b"FuncName\0";
    pub const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A: &[u8; 9usize] = b"FuncName\0";
    pub const CRYPT_OID_REG_FLAGS_VALUE_NAME: &[u8; 11usize] = b"CryptFlags\0";
    pub const CRYPT_DEFAULT_OID: &[u8; 8usize] = b"DEFAULT\0";
    pub const CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG: u32 = 1;
    pub const CRYPT_GET_INSTALLED_OID_FUNC_FLAG: u32 = 1;
    pub const CRYPT_REGISTER_FIRST_INDEX: u32 = 0;
    pub const CRYPT_REGISTER_LAST_INDEX: u32 = 4294967295;
    pub const CRYPT_MATCH_ANY_ENCODING_TYPE: u32 = 4294967295;
    pub const CALG_OID_INFO_CNG_ONLY: u32 = 4294967295;
    pub const CALG_OID_INFO_PARAMETERS: u32 = 4294967294;
    pub const CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM: &[u8; 27usize] =
        b"CryptOIDInfoHashParameters\0";
    pub const CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM: &[u8; 26usize] =
        b"CryptOIDInfoECCParameters\0";
    pub const CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM: &[u8; 27usize] =
        b"CryptOIDInfoMgf1Parameters\0";
    pub const CRYPT_OID_INFO_NO_SIGN_ALGORITHM: &[u8; 19usize] = b"CryptOIDInfoNoSign\0";
    pub const CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM: &[u8; 27usize] =
        b"CryptOIDInfoOAEPParameters\0";
    pub const CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM: &[u8; 30usize] =
        b"CryptOIDInfoECCWrapParameters\0";
    pub const CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM: &[u8; 25usize] =
        b"CryptOIDInfoNoParameters\0";
    pub const CRYPT_HASH_ALG_OID_GROUP_ID: u32 = 1;
    pub const CRYPT_ENCRYPT_ALG_OID_GROUP_ID: u32 = 2;
    pub const CRYPT_PUBKEY_ALG_OID_GROUP_ID: u32 = 3;
    pub const CRYPT_SIGN_ALG_OID_GROUP_ID: u32 = 4;
    pub const CRYPT_RDN_ATTR_OID_GROUP_ID: u32 = 5;
    pub const CRYPT_EXT_OR_ATTR_OID_GROUP_ID: u32 = 6;
    pub const CRYPT_ENHKEY_USAGE_OID_GROUP_ID: u32 = 7;
    pub const CRYPT_POLICY_OID_GROUP_ID: u32 = 8;
    pub const CRYPT_TEMPLATE_OID_GROUP_ID: u32 = 9;
    pub const CRYPT_KDF_OID_GROUP_ID: u32 = 10;
    pub const CRYPT_LAST_OID_GROUP_ID: u32 = 10;
    pub const CRYPT_FIRST_ALG_OID_GROUP_ID: u32 = 1;
    pub const CRYPT_LAST_ALG_OID_GROUP_ID: u32 = 4;
    pub const CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG: u32 = 1;
    pub const CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG: u32 = 2;
    pub const CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG: u32 = 4;
    pub const CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG: u32 = 2147483648;
    pub const CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG: u32 = 1073741824;
    pub const CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG: u32 = 536870912;
    pub const CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG: u32 = 268435456;
    pub const CRYPT_OID_INFO_OID_KEY: u32 = 1;
    pub const CRYPT_OID_INFO_NAME_KEY: u32 = 2;
    pub const CRYPT_OID_INFO_ALGID_KEY: u32 = 3;
    pub const CRYPT_OID_INFO_SIGN_KEY: u32 = 4;
    pub const CRYPT_OID_INFO_CNG_ALGID_KEY: u32 = 5;
    pub const CRYPT_OID_INFO_CNG_SIGN_KEY: u32 = 6;
    pub const CRYPT_OID_INFO_OID_KEY_FLAGS_MASK: u32 = 4294901760;
    pub const CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG: u32 = 2147483648;
    pub const CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG: u32 = 1073741824;
    pub const CRYPT_OID_DISABLE_SEARCH_DS_FLAG: u32 = 2147483648;
    pub const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK: u32 = 268369920;
    pub const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT: u32 = 16;
    pub const CRYPT_INSTALL_OID_INFO_BEFORE_FLAG: u32 = 1;
    pub const CRYPT_LOCALIZED_NAME_ENCODING_TYPE: u32 = 0;
    pub const CRYPT_LOCALIZED_NAME_OID: &[u8; 15usize] = b"LocalizedNames\0";
    pub const CERT_STRONG_SIGN_ECDSA_ALGORITHM: &[u8; 6usize] = b"ECDSA\0";
    pub const CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE: u32 = 1;
    pub const CERT_STRONG_SIGN_OID_INFO_CHOICE: u32 = 2;
    pub const CERT_STRONG_SIGN_ENABLE_CRL_CHECK: u32 = 1;
    pub const CERT_STRONG_SIGN_ENABLE_OCSP_CHECK: u32 = 2;
    pub const szOID_CERT_STRONG_SIGN_OS_PREFIX: &[u8; 22usize] = b"1.3.6.1.4.1.311.72.1.\0";
    pub const szOID_CERT_STRONG_SIGN_OS_1: &[u8; 23usize] = b"1.3.6.1.4.1.311.72.1.1\0";
    pub const szOID_CERT_STRONG_SIGN_OS_CURRENT: &[u8; 23usize] = b"1.3.6.1.4.1.311.72.1.1\0";
    pub const szOID_CERT_STRONG_KEY_OS_PREFIX: &[u8; 22usize] = b"1.3.6.1.4.1.311.72.2.\0";
    pub const szOID_CERT_STRONG_KEY_OS_1: &[u8; 23usize] = b"1.3.6.1.4.1.311.72.2.1\0";
    pub const szOID_CERT_STRONG_KEY_OS_CURRENT: &[u8; 23usize] = b"1.3.6.1.4.1.311.72.2.1\0";
    pub const szOID_PKCS_7_DATA: &[u8; 21usize] = b"1.2.840.113549.1.7.1\0";
    pub const szOID_PKCS_7_SIGNED: &[u8; 21usize] = b"1.2.840.113549.1.7.2\0";
    pub const szOID_PKCS_7_ENVELOPED: &[u8; 21usize] = b"1.2.840.113549.1.7.3\0";
    pub const szOID_PKCS_7_SIGNEDANDENVELOPED: &[u8; 21usize] = b"1.2.840.113549.1.7.4\0";
    pub const szOID_PKCS_7_DIGESTED: &[u8; 21usize] = b"1.2.840.113549.1.7.5\0";
    pub const szOID_PKCS_7_ENCRYPTED: &[u8; 21usize] = b"1.2.840.113549.1.7.6\0";
    pub const szOID_PKCS_9_CONTENT_TYPE: &[u8; 21usize] = b"1.2.840.113549.1.9.3\0";
    pub const szOID_PKCS_9_MESSAGE_DIGEST: &[u8; 21usize] = b"1.2.840.113549.1.9.4\0";
    pub const CMSG_DATA: u32 = 1;
    pub const CMSG_SIGNED: u32 = 2;
    pub const CMSG_ENVELOPED: u32 = 3;
    pub const CMSG_SIGNED_AND_ENVELOPED: u32 = 4;
    pub const CMSG_HASHED: u32 = 5;
    pub const CMSG_ENCRYPTED: u32 = 6;
    pub const CMSG_ALL_FLAGS: i32 = -1;
    pub const CMSG_DATA_FLAG: u32 = 2;
    pub const CMSG_SIGNED_FLAG: u32 = 4;
    pub const CMSG_ENVELOPED_FLAG: u32 = 8;
    pub const CMSG_SIGNED_AND_ENVELOPED_FLAG: u32 = 16;
    pub const CMSG_HASHED_FLAG: u32 = 32;
    pub const CMSG_ENCRYPTED_FLAG: u32 = 64;
    pub const CERT_ID_ISSUER_SERIAL_NUMBER: u32 = 1;
    pub const CERT_ID_KEY_IDENTIFIER: u32 = 2;
    pub const CERT_ID_SHA1_HASH: u32 = 3;
    pub const CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE: u32 = 1;
    pub const CMSG_KEY_AGREE_STATIC_KEY_CHOICE: u32 = 2;
    pub const CMSG_MAIL_LIST_HANDLE_KEY_CHOICE: u32 = 1;
    pub const CMSG_KEY_TRANS_RECIPIENT: u32 = 1;
    pub const CMSG_KEY_AGREE_RECIPIENT: u32 = 2;
    pub const CMSG_MAIL_LIST_RECIPIENT: u32 = 3;
    pub const CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG: u32 = 2147483648;
    pub const CMSG_RC4_NO_SALT_FLAG: u32 = 1073741824;
    pub const CMSG_INDEFINITE_LENGTH: u32 = 4294967295;
    pub const CMSG_BARE_CONTENT_FLAG: u32 = 1;
    pub const CMSG_LENGTH_ONLY_FLAG: u32 = 2;
    pub const CMSG_DETACHED_FLAG: u32 = 4;
    pub const CMSG_AUTHENTICATED_ATTRIBUTES_FLAG: u32 = 8;
    pub const CMSG_CONTENTS_OCTETS_FLAG: u32 = 16;
    pub const CMSG_MAX_LENGTH_FLAG: u32 = 32;
    pub const CMSG_CMS_ENCAPSULATED_CONTENT_FLAG: u32 = 64;
    pub const CMSG_SIGNED_DATA_NO_SIGN_FLAG: u32 = 128;
    pub const CMSG_CRYPT_RELEASE_CONTEXT_FLAG: u32 = 32768;
    pub const CMSG_TYPE_PARAM: u32 = 1;
    pub const CMSG_CONTENT_PARAM: u32 = 2;
    pub const CMSG_BARE_CONTENT_PARAM: u32 = 3;
    pub const CMSG_INNER_CONTENT_TYPE_PARAM: u32 = 4;
    pub const CMSG_SIGNER_COUNT_PARAM: u32 = 5;
    pub const CMSG_SIGNER_INFO_PARAM: u32 = 6;
    pub const CMSG_SIGNER_CERT_INFO_PARAM: u32 = 7;
    pub const CMSG_SIGNER_HASH_ALGORITHM_PARAM: u32 = 8;
    pub const CMSG_SIGNER_AUTH_ATTR_PARAM: u32 = 9;
    pub const CMSG_SIGNER_UNAUTH_ATTR_PARAM: u32 = 10;
    pub const CMSG_CERT_COUNT_PARAM: u32 = 11;
    pub const CMSG_CERT_PARAM: u32 = 12;
    pub const CMSG_CRL_COUNT_PARAM: u32 = 13;
    pub const CMSG_CRL_PARAM: u32 = 14;
    pub const CMSG_ENVELOPE_ALGORITHM_PARAM: u32 = 15;
    pub const CMSG_RECIPIENT_COUNT_PARAM: u32 = 17;
    pub const CMSG_RECIPIENT_INDEX_PARAM: u32 = 18;
    pub const CMSG_RECIPIENT_INFO_PARAM: u32 = 19;
    pub const CMSG_HASH_ALGORITHM_PARAM: u32 = 20;
    pub const CMSG_HASH_DATA_PARAM: u32 = 21;
    pub const CMSG_COMPUTED_HASH_PARAM: u32 = 22;
    pub const CMSG_ENCRYPT_PARAM: u32 = 26;
    pub const CMSG_ENCRYPTED_DIGEST: u32 = 27;
    pub const CMSG_ENCODED_SIGNER: u32 = 28;
    pub const CMSG_ENCODED_MESSAGE: u32 = 29;
    pub const CMSG_VERSION_PARAM: u32 = 30;
    pub const CMSG_ATTR_CERT_COUNT_PARAM: u32 = 31;
    pub const CMSG_ATTR_CERT_PARAM: u32 = 32;
    pub const CMSG_CMS_RECIPIENT_COUNT_PARAM: u32 = 33;
    pub const CMSG_CMS_RECIPIENT_INDEX_PARAM: u32 = 34;
    pub const CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM: u32 = 35;
    pub const CMSG_CMS_RECIPIENT_INFO_PARAM: u32 = 36;
    pub const CMSG_UNPROTECTED_ATTR_PARAM: u32 = 37;
    pub const CMSG_SIGNER_CERT_ID_PARAM: u32 = 38;
    pub const CMSG_CMS_SIGNER_INFO_PARAM: u32 = 39;
    pub const CMSG_SIGNED_DATA_V1: u32 = 1;
    pub const CMSG_SIGNED_DATA_V3: u32 = 3;
    pub const CMSG_SIGNED_DATA_PKCS_1_5_VERSION: u32 = 1;
    pub const CMSG_SIGNED_DATA_CMS_VERSION: u32 = 3;
    pub const CMSG_SIGNER_INFO_V1: u32 = 1;
    pub const CMSG_SIGNER_INFO_V3: u32 = 3;
    pub const CMSG_SIGNER_INFO_PKCS_1_5_VERSION: u32 = 1;
    pub const CMSG_SIGNER_INFO_CMS_VERSION: u32 = 3;
    pub const CMSG_HASHED_DATA_V0: u32 = 0;
    pub const CMSG_HASHED_DATA_V2: u32 = 2;
    pub const CMSG_HASHED_DATA_PKCS_1_5_VERSION: u32 = 0;
    pub const CMSG_HASHED_DATA_CMS_VERSION: u32 = 2;
    pub const CMSG_ENVELOPED_DATA_V0: u32 = 0;
    pub const CMSG_ENVELOPED_DATA_V2: u32 = 2;
    pub const CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION: u32 = 0;
    pub const CMSG_ENVELOPED_DATA_CMS_VERSION: u32 = 2;
    pub const CMSG_KEY_AGREE_ORIGINATOR_CERT: u32 = 1;
    pub const CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY: u32 = 2;
    pub const CMSG_ENVELOPED_RECIPIENT_V0: u32 = 0;
    pub const CMSG_ENVELOPED_RECIPIENT_V2: u32 = 2;
    pub const CMSG_ENVELOPED_RECIPIENT_V3: u32 = 3;
    pub const CMSG_ENVELOPED_RECIPIENT_V4: u32 = 4;
    pub const CMSG_KEY_TRANS_PKCS_1_5_VERSION: u32 = 0;
    pub const CMSG_KEY_TRANS_CMS_VERSION: u32 = 2;
    pub const CMSG_KEY_AGREE_VERSION: u32 = 3;
    pub const CMSG_MAIL_LIST_VERSION: u32 = 4;
    pub const CMSG_CTRL_VERIFY_SIGNATURE: u32 = 1;
    pub const CMSG_CTRL_DECRYPT: u32 = 2;
    pub const CMSG_CTRL_VERIFY_HASH: u32 = 5;
    pub const CMSG_CTRL_ADD_SIGNER: u32 = 6;
    pub const CMSG_CTRL_DEL_SIGNER: u32 = 7;
    pub const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR: u32 = 8;
    pub const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR: u32 = 9;
    pub const CMSG_CTRL_ADD_CERT: u32 = 10;
    pub const CMSG_CTRL_DEL_CERT: u32 = 11;
    pub const CMSG_CTRL_ADD_CRL: u32 = 12;
    pub const CMSG_CTRL_DEL_CRL: u32 = 13;
    pub const CMSG_CTRL_ADD_ATTR_CERT: u32 = 14;
    pub const CMSG_CTRL_DEL_ATTR_CERT: u32 = 15;
    pub const CMSG_CTRL_KEY_TRANS_DECRYPT: u32 = 16;
    pub const CMSG_CTRL_KEY_AGREE_DECRYPT: u32 = 17;
    pub const CMSG_CTRL_MAIL_LIST_DECRYPT: u32 = 18;
    pub const CMSG_CTRL_VERIFY_SIGNATURE_EX: u32 = 19;
    pub const CMSG_CTRL_ADD_CMS_SIGNER_INFO: u32 = 20;
    pub const CMSG_CTRL_ENABLE_STRONG_SIGNATURE: u32 = 21;
    pub const CMSG_VERIFY_SIGNER_PUBKEY: u32 = 1;
    pub const CMSG_VERIFY_SIGNER_CERT: u32 = 2;
    pub const CMSG_VERIFY_SIGNER_CHAIN: u32 = 3;
    pub const CMSG_VERIFY_SIGNER_NULL: u32 = 4;
    pub const CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG: u32 = 1;
    pub const CMSG_OID_GEN_ENCRYPT_KEY_FUNC: &[u8; 25usize] = b"CryptMsgDllGenEncryptKey\0";
    pub const CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC: &[u8; 28usize] = b"CryptMsgDllExportEncryptKey\0";
    pub const CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC: &[u8; 28usize] = b"CryptMsgDllImportEncryptKey\0";
    pub const CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG: u32 = 1;
    pub const CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
    pub const CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG: u32 = 2;
    pub const CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG: u32 = 32768;
    pub const CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC: &[u8; 32usize] =
        b"CryptMsgDllGenContentEncryptKey\0";
    pub const CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC: &[u8; 32usize] =
        b"CryptMsgDllGenContentEncryptKey\0";
    pub const CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC: &[u8; 35usize] =
        b"CryptMsgDllCNGGenContentEncryptKey\0";
    pub const CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
    pub const CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG: u32 = 2;
    pub const CMSG_OID_EXPORT_KEY_TRANS_FUNC: &[u8; 26usize] = b"CryptMsgDllExportKeyTrans\0";
    pub const CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC: &[u8; 26usize] = b"CryptMsgDllExportKeyTrans\0";
    pub const CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC: &[u8; 29usize] =
        b"CryptMsgDllCNGExportKeyTrans\0";
    pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
    pub const CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG: u32 = 2;
    pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG: u32 = 4;
    pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG: u32 = 8;
    pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG: u32 = 16;
    pub const CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG: u32 = 32;
    pub const CMSG_OID_EXPORT_KEY_AGREE_FUNC: &[u8; 26usize] = b"CryptMsgDllExportKeyAgree\0";
    pub const CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC: &[u8; 26usize] = b"CryptMsgDllExportKeyAgree\0";
    pub const CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC: &[u8; 29usize] =
        b"CryptMsgDllCNGExportKeyAgree\0";
    pub const CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
    pub const CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG: u32 = 2;
    pub const CMSG_OID_EXPORT_MAIL_LIST_FUNC: &[u8; 26usize] = b"CryptMsgDllExportMailList\0";
    pub const CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC: &[u8; 26usize] = b"CryptMsgDllExportMailList\0";
    pub const CMSG_OID_IMPORT_KEY_TRANS_FUNC: &[u8; 26usize] = b"CryptMsgDllImportKeyTrans\0";
    pub const CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC: &[u8; 26usize] = b"CryptMsgDllImportKeyTrans\0";
    pub const CMSG_OID_IMPORT_KEY_AGREE_FUNC: &[u8; 26usize] = b"CryptMsgDllImportKeyAgree\0";
    pub const CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC: &[u8; 26usize] = b"CryptMsgDllImportKeyAgree\0";
    pub const CMSG_OID_IMPORT_MAIL_LIST_FUNC: &[u8; 26usize] = b"CryptMsgDllImportMailList\0";
    pub const CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC: &[u8; 26usize] = b"CryptMsgDllImportMailList\0";
    pub const CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC: &[u8; 29usize] =
        b"CryptMsgDllCNGImportKeyTrans\0";
    pub const CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC: &[u8; 29usize] =
        b"CryptMsgDllCNGImportKeyAgree\0";
    pub const CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC: &[u8; 38usize] =
        b"CryptMsgDllCNGImportContentEncryptKey\0";
    pub const CERT_KEY_PROV_HANDLE_PROP_ID: u32 = 1;
    pub const CERT_KEY_PROV_INFO_PROP_ID: u32 = 2;
    pub const CERT_SHA1_HASH_PROP_ID: u32 = 3;
    pub const CERT_MD5_HASH_PROP_ID: u32 = 4;
    pub const CERT_HASH_PROP_ID: u32 = 3;
    pub const CERT_KEY_CONTEXT_PROP_ID: u32 = 5;
    pub const CERT_KEY_SPEC_PROP_ID: u32 = 6;
    pub const CERT_IE30_RESERVED_PROP_ID: u32 = 7;
    pub const CERT_PUBKEY_HASH_RESERVED_PROP_ID: u32 = 8;
    pub const CERT_ENHKEY_USAGE_PROP_ID: u32 = 9;
    pub const CERT_CTL_USAGE_PROP_ID: u32 = 9;
    pub const CERT_NEXT_UPDATE_LOCATION_PROP_ID: u32 = 10;
    pub const CERT_FRIENDLY_NAME_PROP_ID: u32 = 11;
    pub const CERT_PVK_FILE_PROP_ID: u32 = 12;
    pub const CERT_DESCRIPTION_PROP_ID: u32 = 13;
    pub const CERT_ACCESS_STATE_PROP_ID: u32 = 14;
    pub const CERT_SIGNATURE_HASH_PROP_ID: u32 = 15;
    pub const CERT_SMART_CARD_DATA_PROP_ID: u32 = 16;
    pub const CERT_EFS_PROP_ID: u32 = 17;
    pub const CERT_FORTEZZA_DATA_PROP_ID: u32 = 18;
    pub const CERT_ARCHIVED_PROP_ID: u32 = 19;
    pub const CERT_KEY_IDENTIFIER_PROP_ID: u32 = 20;
    pub const CERT_AUTO_ENROLL_PROP_ID: u32 = 21;
    pub const CERT_PUBKEY_ALG_PARA_PROP_ID: u32 = 22;
    pub const CERT_CROSS_CERT_DIST_POINTS_PROP_ID: u32 = 23;
    pub const CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID: u32 = 24;
    pub const CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID: u32 = 25;
    pub const CERT_ENROLLMENT_PROP_ID: u32 = 26;
    pub const CERT_DATE_STAMP_PROP_ID: u32 = 27;
    pub const CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: u32 = 28;
    pub const CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: u32 = 29;
    pub const CERT_EXTENDED_ERROR_INFO_PROP_ID: u32 = 30;
    pub const CERT_RENEWAL_PROP_ID: u32 = 64;
    pub const CERT_ARCHIVED_KEY_HASH_PROP_ID: u32 = 65;
    pub const CERT_AUTO_ENROLL_RETRY_PROP_ID: u32 = 66;
    pub const CERT_AIA_URL_RETRIEVED_PROP_ID: u32 = 67;
    pub const CERT_AUTHORITY_INFO_ACCESS_PROP_ID: u32 = 68;
    pub const CERT_BACKED_UP_PROP_ID: u32 = 69;
    pub const CERT_OCSP_RESPONSE_PROP_ID: u32 = 70;
    pub const CERT_REQUEST_ORIGINATOR_PROP_ID: u32 = 71;
    pub const CERT_SOURCE_LOCATION_PROP_ID: u32 = 72;
    pub const CERT_SOURCE_URL_PROP_ID: u32 = 73;
    pub const CERT_NEW_KEY_PROP_ID: u32 = 74;
    pub const CERT_OCSP_CACHE_PREFIX_PROP_ID: u32 = 75;
    pub const CERT_SMART_CARD_ROOT_INFO_PROP_ID: u32 = 76;
    pub const CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID: u32 = 77;
    pub const CERT_NCRYPT_KEY_HANDLE_PROP_ID: u32 = 78;
    pub const CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID: u32 = 79;
    pub const CERT_SUBJECT_INFO_ACCESS_PROP_ID: u32 = 80;
    pub const CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: u32 = 81;
    pub const CERT_CA_DISABLE_CRL_PROP_ID: u32 = 82;
    pub const CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID: u32 = 83;
    pub const CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID: u32 = 84;
    pub const CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: u32 = 85;
    pub const CERT_SUBJECT_DISABLE_CRL_PROP_ID: u32 = 86;
    pub const CERT_CEP_PROP_ID: u32 = 87;
    pub const CERT_SIGN_HASH_CNG_ALG_PROP_ID: u32 = 89;
    pub const CERT_SCARD_PIN_ID_PROP_ID: u32 = 90;
    pub const CERT_SCARD_PIN_INFO_PROP_ID: u32 = 91;
    pub const CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID: u32 = 92;
    pub const CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: u32 = 93;
    pub const CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID: u32 = 94;
    pub const CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID: u32 = 95;
    pub const CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: u32 = 96;
    pub const CERT_NO_EXPIRE_NOTIFICATION_PROP_ID: u32 = 97;
    pub const CERT_AUTH_ROOT_SHA256_HASH_PROP_ID: u32 = 98;
    pub const CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID: u32 = 99;
    pub const CERT_HCRYPTPROV_TRANSFER_PROP_ID: u32 = 100;
    pub const CERT_SMART_CARD_READER_PROP_ID: u32 = 101;
    pub const CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID: u32 = 102;
    pub const CERT_KEY_REPAIR_ATTEMPTED_PROP_ID: u32 = 103;
    pub const CERT_DISALLOWED_FILETIME_PROP_ID: u32 = 104;
    pub const CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID: u32 = 105;
    pub const CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID: u32 = 106;
    pub const CERT_SHA256_HASH_PROP_ID: u32 = 107;
    pub const CERT_SCEP_SERVER_CERTS_PROP_ID: u32 = 108;
    pub const CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID: u32 = 109;
    pub const CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID: u32 = 110;
    pub const CERT_SCEP_CA_CERT_PROP_ID: u32 = 111;
    pub const CERT_SCEP_SIGNER_CERT_PROP_ID: u32 = 112;
    pub const CERT_SCEP_NONCE_PROP_ID: u32 = 113;
    pub const CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID: u32 = 114;
    pub const CERT_SCEP_FLAGS_PROP_ID: u32 = 115;
    pub const CERT_SCEP_GUID_PROP_ID: u32 = 116;
    pub const CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID: u32 = 117;
    pub const CERT_ISOLATED_KEY_PROP_ID: u32 = 118;
    pub const CERT_SERIAL_CHAIN_PROP_ID: u32 = 119;
    pub const CERT_KEY_CLASSIFICATION_PROP_ID: u32 = 120;
    pub const CERT_OCSP_MUST_STAPLE_PROP_ID: u32 = 121;
    pub const CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID: u32 = 122;
    pub const CERT_NONCOMPLIANT_ROOT_URL_PROP_ID: u32 = 123;
    pub const CERT_PIN_SHA256_HASH_PROP_ID: u32 = 124;
    pub const CERT_CLR_DELETE_KEY_PROP_ID: u32 = 125;
    pub const CERT_NOT_BEFORE_FILETIME_PROP_ID: u32 = 126;
    pub const CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID: u32 = 127;
    pub const CERT_FIRST_RESERVED_PROP_ID: u32 = 128;
    pub const CERT_LAST_RESERVED_PROP_ID: u32 = 32767;
    pub const CERT_FIRST_USER_PROP_ID: u32 = 32768;
    pub const CERT_LAST_USER_PROP_ID: u32 = 65535;
    pub const szOID_CERT_PROP_ID_PREFIX: &[u8; 23usize] = b"1.3.6.1.4.1.311.10.11.\0";
    pub const szOID_CERT_KEY_IDENTIFIER_PROP_ID: &[u8; 25usize] = b"1.3.6.1.4.1.311.10.11.20\0";
    pub const szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: &[u8; 25usize] =
        b"1.3.6.1.4.1.311.10.11.28\0";
    pub const szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: &[u8; 25usize] =
        b"1.3.6.1.4.1.311.10.11.29\0";
    pub const szOID_CERT_MD5_HASH_PROP_ID: &[u8; 24usize] = b"1.3.6.1.4.1.311.10.11.4\0";
    pub const szOID_CERT_SIGNATURE_HASH_PROP_ID: &[u8; 25usize] = b"1.3.6.1.4.1.311.10.11.15\0";
    pub const szOID_DISALLOWED_HASH: &[u8; 25usize] = b"1.3.6.1.4.1.311.10.11.15\0";
    pub const szOID_CERT_DISALLOWED_FILETIME_PROP_ID: &[u8; 26usize] =
        b"1.3.6.1.4.1.311.10.11.104\0";
    pub const CERT_ACCESS_STATE_WRITE_PERSIST_FLAG: u32 = 1;
    pub const CERT_ACCESS_STATE_SYSTEM_STORE_FLAG: u32 = 2;
    pub const CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG: u32 = 4;
    pub const CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG: u32 = 8;
    pub const CERT_ACCESS_STATE_SHARED_USER_FLAG: u32 = 16;
    pub const szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION: &[u8; 23usize] =
        b"1.3.6.1.4.1.311.60.3.1\0";
    pub const szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION: &[u8; 23usize] =
        b"1.3.6.1.4.1.311.60.3.2\0";
    pub const szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL: &[u8; 23usize] =
        b"1.3.6.1.4.1.311.60.3.3\0";
    pub const CERT_SET_KEY_PROV_HANDLE_PROP_ID: u32 = 1;
    pub const CERT_SET_KEY_CONTEXT_PROP_ID: u32 = 1;
    pub const CERT_NCRYPT_KEY_SPEC: u32 = 4294967295;
    pub const sz_CERT_STORE_PROV_MEMORY: &[u8; 7usize] = b"Memory\0";
    pub const sz_CERT_STORE_PROV_FILENAME_W: &[u8; 5usize] = b"File\0";
    pub const sz_CERT_STORE_PROV_FILENAME: &[u8; 5usize] = b"File\0";
    pub const sz_CERT_STORE_PROV_SYSTEM_W: &[u8; 7usize] = b"System\0";
    pub const sz_CERT_STORE_PROV_SYSTEM: &[u8; 7usize] = b"System\0";
    pub const sz_CERT_STORE_PROV_PKCS7: &[u8; 6usize] = b"PKCS7\0";
    pub const sz_CERT_STORE_PROV_PKCS12: &[u8; 7usize] = b"PKCS12\0";
    pub const sz_CERT_STORE_PROV_SERIALIZED: &[u8; 11usize] = b"Serialized\0";
    pub const sz_CERT_STORE_PROV_COLLECTION: &[u8; 11usize] = b"Collection\0";
    pub const sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W: &[u8; 15usize] = b"SystemRegistry\0";
    pub const sz_CERT_STORE_PROV_SYSTEM_REGISTRY: &[u8; 15usize] = b"SystemRegistry\0";
    pub const sz_CERT_STORE_PROV_PHYSICAL_W: &[u8; 9usize] = b"Physical\0";
    pub const sz_CERT_STORE_PROV_PHYSICAL: &[u8; 9usize] = b"Physical\0";
    pub const sz_CERT_STORE_PROV_SMART_CARD_W: &[u8; 10usize] = b"SmartCard\0";
    pub const sz_CERT_STORE_PROV_SMART_CARD: &[u8; 10usize] = b"SmartCard\0";
    pub const sz_CERT_STORE_PROV_LDAP_W: &[u8; 5usize] = b"Ldap\0";
    pub const sz_CERT_STORE_PROV_LDAP: &[u8; 5usize] = b"Ldap\0";
    pub const CERT_STORE_SIGNATURE_FLAG: u32 = 1;
    pub const CERT_STORE_TIME_VALIDITY_FLAG: u32 = 2;
    pub const CERT_STORE_REVOCATION_FLAG: u32 = 4;
    pub const CERT_STORE_NO_CRL_FLAG: u32 = 65536;
    pub const CERT_STORE_NO_ISSUER_FLAG: u32 = 131072;
    pub const CERT_STORE_BASE_CRL_FLAG: u32 = 256;
    pub const CERT_STORE_DELTA_CRL_FLAG: u32 = 512;
    pub const CERT_STORE_NO_CRYPT_RELEASE_FLAG: u32 = 1;
    pub const CERT_STORE_SET_LOCALIZED_NAME_FLAG: u32 = 2;
    pub const CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG: u32 = 4;
    pub const CERT_STORE_DELETE_FLAG: u32 = 16;
    pub const CERT_STORE_UNSAFE_PHYSICAL_FLAG: u32 = 32;
    pub const CERT_STORE_SHARE_STORE_FLAG: u32 = 64;
    pub const CERT_STORE_SHARE_CONTEXT_FLAG: u32 = 128;
    pub const CERT_STORE_MANIFOLD_FLAG: u32 = 256;
    pub const CERT_STORE_ENUM_ARCHIVED_FLAG: u32 = 512;
    pub const CERT_STORE_UPDATE_KEYID_FLAG: u32 = 1024;
    pub const CERT_STORE_BACKUP_RESTORE_FLAG: u32 = 2048;
    pub const CERT_STORE_READONLY_FLAG: u32 = 32768;
    pub const CERT_STORE_OPEN_EXISTING_FLAG: u32 = 16384;
    pub const CERT_STORE_CREATE_NEW_FLAG: u32 = 8192;
    pub const CERT_STORE_MAXIMUM_ALLOWED_FLAG: u32 = 4096;
    pub const CERT_SYSTEM_STORE_MASK: u32 = 4294901760;
    pub const CERT_SYSTEM_STORE_RELOCATE_FLAG: u32 = 2147483648;
    pub const CERT_SYSTEM_STORE_UNPROTECTED_FLAG: u32 = 1073741824;
    pub const CERT_SYSTEM_STORE_DEFER_READ_FLAG: u32 = 536870912;
    pub const CERT_SYSTEM_STORE_LOCATION_MASK: u32 = 16711680;
    pub const CERT_SYSTEM_STORE_LOCATION_SHIFT: u32 = 16;
    pub const CERT_SYSTEM_STORE_CURRENT_USER_ID: u32 = 1;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_ID: u32 = 2;
    pub const CERT_SYSTEM_STORE_CURRENT_SERVICE_ID: u32 = 4;
    pub const CERT_SYSTEM_STORE_SERVICES_ID: u32 = 5;
    pub const CERT_SYSTEM_STORE_USERS_ID: u32 = 6;
    pub const CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID: u32 = 7;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID: u32 = 8;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID: u32 = 9;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID: u32 = 10;
    pub const CERT_SYSTEM_STORE_CURRENT_USER: u32 = 65536;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE: u32 = 131072;
    pub const CERT_SYSTEM_STORE_CURRENT_SERVICE: u32 = 262144;
    pub const CERT_SYSTEM_STORE_SERVICES: u32 = 327680;
    pub const CERT_SYSTEM_STORE_USERS: u32 = 393216;
    pub const CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY: u32 = 458752;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY: u32 = 524288;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE: u32 = 589824;
    pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS: u32 = 655360;
    pub const CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH: &[u8; 47usize] =
        b"Software\\Policies\\Microsoft\\SystemCertificates\0";
    pub const CERT_EFSBLOB_REGPATH: &[u8; 51usize] =
        b"Software\\Policies\\Microsoft\\SystemCertificates\\EFS\0";
    pub const CERT_EFSBLOB_VALUE_NAME: &[u8; 8usize] = b"EFSBlob\0";
    pub const CERT_PROT_ROOT_FLAGS_REGPATH: &[u8; 67usize] =
        b"Software\\Policies\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots\0";
    pub const CERT_PROT_ROOT_FLAGS_VALUE_NAME: &[u8; 6usize] = b"Flags\0";
    pub const CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG: u32 = 1;
    pub const CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG: u32 = 2;
    pub const CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG: u32 = 4;
    pub const CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG: u32 = 8;
    pub const CERT_PROT_ROOT_ONLY_LM_GPT_FLAG: u32 = 8;
    pub const CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG: u32 = 16;
    pub const CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG: u32 = 32;
    pub const CERT_PROT_ROOT_DISABLE_PEER_TRUST: u32 = 65536;
    pub const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME: &[u8; 11usize] = b"PeerUsages\0";
    pub const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A: &[u8; 11usize] = b"PeerUsages\0";
    pub const CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A: &[u8; 60usize] =
        b"1.3.6.1.5.5.7.3.2\01.3.6.1.5.5.7.3.4\01.3.6.1.4.1.311.10.3.4\0\0";
    pub const CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH: &[u8; 70usize] =
        b"Software\\Policies\\Microsoft\\SystemCertificates\\TrustedPublisher\\Safer\0";
    pub const CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH: &[u8; 38usize] =
        b"Software\\Microsoft\\SystemCertificates\0";
    pub const CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH: &[u8; 61usize] =
        b"Software\\Microsoft\\SystemCertificates\\TrustedPublisher\\Safer\0";
    pub const CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME: &[u8; 18usize] = b"AuthenticodeFlags\0";
    pub const CERT_TRUST_PUB_ALLOW_TRUST_MASK: u32 = 3;
    pub const CERT_TRUST_PUB_ALLOW_END_USER_TRUST: u32 = 0;
    pub const CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST: u32 = 1;
    pub const CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST: u32 = 2;
    pub const CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG: u32 = 256;
    pub const CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG: u32 = 512;
    pub const CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH: &[u8; 73usize] =
        b"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\OC Manager\\Subcomponents\0";
    pub const CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME: &[u8; 15usize] =
        b"RootAutoUpdate\0";
    pub const CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH: &[u8; 56usize] =
        b"Software\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\0";
    pub const CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME: &[u8; 22usize] = b"DisableRootAutoUpdate\0";
    pub const CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME: &[u8; 31usize] =
        b"EnableDisallowedCertAutoUpdate\0";
    pub const CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME: &[u8; 26usize] =
        b"DisablePinRulesAutoUpdate\0";
    pub const CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH: &[u8; 58usize] =
        b"Software\\Microsoft\\SystemCertificates\\AuthRoot\\AutoUpdate\0";
    pub const CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME: &[u8; 11usize] = b"RootDirUrl\0";
    pub const CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME: &[u8; 15usize] = b"SyncFromDirUrl\0";
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH: &[u8; 58usize] =
        b"Software\\Microsoft\\SystemCertificates\\AuthRoot\\AutoUpdate\0";
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME: &[u8; 11usize] = b"RootDirUrl\0";
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME: &[u8; 14usize] =
        b"SyncDeltaTime\0";
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME: &[u8; 6usize] = b"Flags\0";
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG: u32 = 1;
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG: u32 = 2;
    pub const CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG: u32 = 4;
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME: &[u8; 13usize] =
        b"LastSyncTime\0";
    pub const CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME: &[u8; 11usize] = b"EncodedCtl\0";
    pub const CERT_AUTH_ROOT_CTL_FILENAME: &[u8; 13usize] = b"authroot.stl\0";
    pub const CERT_AUTH_ROOT_CTL_FILENAME_A: &[u8; 13usize] = b"authroot.stl\0";
    pub const CERT_AUTH_ROOT_CAB_FILENAME: &[u8; 16usize] = b"authrootstl.cab\0";
    pub const CERT_AUTH_ROOT_SEQ_FILENAME: &[u8; 16usize] = b"authrootseq.txt\0";
    pub const CERT_AUTH_ROOT_CERT_EXT: &[u8; 5usize] = b".crt\0";
    pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME: &[u8; 28usize] =
        b"DisallowedCertSyncDeltaTime\0";
    pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME: &[u8; 27usize] =
        b"DisallowedCertLastSyncTime\0";
    pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME: &[u8; 25usize] =
        b"DisallowedCertEncodedCtl\0";
    pub const CERT_DISALLOWED_CERT_CTL_FILENAME: &[u8; 19usize] = b"disallowedcert.stl\0";
    pub const CERT_DISALLOWED_CERT_CTL_FILENAME_A: &[u8; 19usize] = b"disallowedcert.stl\0";
    pub const CERT_DISALLOWED_CERT_CAB_FILENAME: &[u8; 22usize] = b"disallowedcertstl.cab\0";
    pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER: &[u8; 28usize] =
        b"DisallowedCert_AutoUpdate_1\0";
    pub const CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME: &[u8; 22usize] =
        b"PinRulesSyncDeltaTime\0";
    pub const CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME: &[u8; 21usize] =
        b"PinRulesLastSyncTime\0";
    pub const CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME: &[u8; 19usize] =
        b"PinRulesEncodedCtl\0";
    pub const CERT_PIN_RULES_CTL_FILENAME: &[u8; 13usize] = b"pinrules.stl\0";
    pub const CERT_PIN_RULES_CTL_FILENAME_A: &[u8; 13usize] = b"pinrules.stl\0";
    pub const CERT_PIN_RULES_CAB_FILENAME: &[u8; 16usize] = b"pinrulesstl.cab\0";
    pub const CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER: &[u8; 22usize] =
        b"PinRules_AutoUpdate_1\0";
    pub const CERT_REGISTRY_STORE_REMOTE_FLAG: u32 = 65536;
    pub const CERT_REGISTRY_STORE_SERIALIZED_FLAG: u32 = 131072;
    pub const CERT_REGISTRY_STORE_CLIENT_GPT_FLAG: u32 = 2147483648;
    pub const CERT_REGISTRY_STORE_LM_GPT_FLAG: u32 = 16777216;
    pub const CERT_REGISTRY_STORE_ROAMING_FLAG: u32 = 262144;
    pub const CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG: u32 = 524288;
    pub const CERT_REGISTRY_STORE_EXTERNAL_FLAG: u32 = 1048576;
    pub const CERT_IE_DIRTY_FLAGS_REGPATH: &[u8; 45usize] =
        b"Software\\Microsoft\\Cryptography\\IEDirtyFlags\0";
    pub const CERT_FILE_STORE_COMMIT_ENABLE_FLAG: u32 = 65536;
    pub const CERT_LDAP_STORE_SIGN_FLAG: u32 = 65536;
    pub const CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG: u32 = 131072;
    pub const CERT_LDAP_STORE_OPENED_FLAG: u32 = 262144;
    pub const CERT_LDAP_STORE_UNBIND_FLAG: u32 = 524288;
    pub const CRYPT_OID_OPEN_STORE_PROV_FUNC: &[u8; 21usize] = b"CertDllOpenStoreProv\0";
    pub const CERT_STORE_PROV_EXTERNAL_FLAG: u32 = 1;
    pub const CERT_STORE_PROV_DELETED_FLAG: u32 = 2;
    pub const CERT_STORE_PROV_NO_PERSIST_FLAG: u32 = 4;
    pub const CERT_STORE_PROV_SYSTEM_STORE_FLAG: u32 = 8;
    pub const CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG: u32 = 16;
    pub const CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG: u32 = 32;
    pub const CERT_STORE_PROV_SHARED_USER_FLAG: u32 = 64;
    pub const CERT_STORE_PROV_CLOSE_FUNC: u32 = 0;
    pub const CERT_STORE_PROV_READ_CERT_FUNC: u32 = 1;
    pub const CERT_STORE_PROV_WRITE_CERT_FUNC: u32 = 2;
    pub const CERT_STORE_PROV_DELETE_CERT_FUNC: u32 = 3;
    pub const CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC: u32 = 4;
    pub const CERT_STORE_PROV_READ_CRL_FUNC: u32 = 5;
    pub const CERT_STORE_PROV_WRITE_CRL_FUNC: u32 = 6;
    pub const CERT_STORE_PROV_DELETE_CRL_FUNC: u32 = 7;
    pub const CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC: u32 = 8;
    pub const CERT_STORE_PROV_READ_CTL_FUNC: u32 = 9;
    pub const CERT_STORE_PROV_WRITE_CTL_FUNC: u32 = 10;
    pub const CERT_STORE_PROV_DELETE_CTL_FUNC: u32 = 11;
    pub const CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC: u32 = 12;
    pub const CERT_STORE_PROV_CONTROL_FUNC: u32 = 13;
    pub const CERT_STORE_PROV_FIND_CERT_FUNC: u32 = 14;
    pub const CERT_STORE_PROV_FREE_FIND_CERT_FUNC: u32 = 15;
    pub const CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC: u32 = 16;
    pub const CERT_STORE_PROV_FIND_CRL_FUNC: u32 = 17;
    pub const CERT_STORE_PROV_FREE_FIND_CRL_FUNC: u32 = 18;
    pub const CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC: u32 = 19;
    pub const CERT_STORE_PROV_FIND_CTL_FUNC: u32 = 20;
    pub const CERT_STORE_PROV_FREE_FIND_CTL_FUNC: u32 = 21;
    pub const CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC: u32 = 22;
    pub const CERT_STORE_PROV_WRITE_ADD_FLAG: u32 = 1;
    pub const CERT_STORE_SAVE_AS_STORE: u32 = 1;
    pub const CERT_STORE_SAVE_AS_PKCS7: u32 = 2;
    pub const CERT_STORE_SAVE_AS_PKCS12: u32 = 3;
    pub const CERT_STORE_SAVE_TO_FILE: u32 = 1;
    pub const CERT_STORE_SAVE_TO_MEMORY: u32 = 2;
    pub const CERT_STORE_SAVE_TO_FILENAME_A: u32 = 3;
    pub const CERT_STORE_SAVE_TO_FILENAME_W: u32 = 4;
    pub const CERT_STORE_SAVE_TO_FILENAME: u32 = 4;
    pub const CERT_CLOSE_STORE_FORCE_FLAG: u32 = 1;
    pub const CERT_CLOSE_STORE_CHECK_FLAG: u32 = 2;
    pub const CERT_COMPARE_MASK: u32 = 65535;
    pub const CERT_COMPARE_SHIFT: u32 = 16;
    pub const CERT_COMPARE_ANY: u32 = 0;
    pub const CERT_COMPARE_SHA1_HASH: u32 = 1;
    pub const CERT_COMPARE_NAME: u32 = 2;
    pub const CERT_COMPARE_ATTR: u32 = 3;
    pub const CERT_COMPARE_MD5_HASH: u32 = 4;
    pub const CERT_COMPARE_PROPERTY: u32 = 5;
    pub const CERT_COMPARE_PUBLIC_KEY: u32 = 6;
    pub const CERT_COMPARE_HASH: u32 = 1;
    pub const CERT_COMPARE_NAME_STR_A: u32 = 7;
    pub const CERT_COMPARE_NAME_STR_W: u32 = 8;
    pub const CERT_COMPARE_KEY_SPEC: u32 = 9;
    pub const CERT_COMPARE_ENHKEY_USAGE: u32 = 10;
    pub const CERT_COMPARE_CTL_USAGE: u32 = 10;
    pub const CERT_COMPARE_SUBJECT_CERT: u32 = 11;
    pub const CERT_COMPARE_ISSUER_OF: u32 = 12;
    pub const CERT_COMPARE_EXISTING: u32 = 13;
    pub const CERT_COMPARE_SIGNATURE_HASH: u32 = 14;
    pub const CERT_COMPARE_KEY_IDENTIFIER: u32 = 15;
    pub const CERT_COMPARE_CERT_ID: u32 = 16;
    pub const CERT_COMPARE_CROSS_CERT_DIST_POINTS: u32 = 17;
    pub const CERT_COMPARE_PUBKEY_MD5_HASH: u32 = 18;
    pub const CERT_COMPARE_SUBJECT_INFO_ACCESS: u32 = 19;
    pub const CERT_COMPARE_HASH_STR: u32 = 20;
    pub const CERT_COMPARE_HAS_PRIVATE_KEY: u32 = 21;
    pub const CERT_FIND_ANY: u32 = 0;
    pub const CERT_FIND_SHA1_HASH: u32 = 65536;
    pub const CERT_FIND_MD5_HASH: u32 = 262144;
    pub const CERT_FIND_SIGNATURE_HASH: u32 = 917504;
    pub const CERT_FIND_KEY_IDENTIFIER: u32 = 983040;
    pub const CERT_FIND_HASH: u32 = 65536;
    pub const CERT_FIND_PROPERTY: u32 = 327680;
    pub const CERT_FIND_PUBLIC_KEY: u32 = 393216;
    pub const CERT_FIND_SUBJECT_NAME: u32 = 131079;
    pub const CERT_FIND_SUBJECT_ATTR: u32 = 196615;
    pub const CERT_FIND_ISSUER_NAME: u32 = 131076;
    pub const CERT_FIND_ISSUER_ATTR: u32 = 196612;
    pub const CERT_FIND_SUBJECT_STR_A: u32 = 458759;
    pub const CERT_FIND_SUBJECT_STR_W: u32 = 524295;
    pub const CERT_FIND_SUBJECT_STR: u32 = 524295;
    pub const CERT_FIND_ISSUER_STR_A: u32 = 458756;
    pub const CERT_FIND_ISSUER_STR_W: u32 = 524292;
    pub const CERT_FIND_ISSUER_STR: u32 = 524292;
    pub const CERT_FIND_KEY_SPEC: u32 = 589824;
    pub const CERT_FIND_ENHKEY_USAGE: u32 = 655360;
    pub const CERT_FIND_CTL_USAGE: u32 = 655360;
    pub const CERT_FIND_SUBJECT_CERT: u32 = 720896;
    pub const CERT_FIND_ISSUER_OF: u32 = 786432;
    pub const CERT_FIND_EXISTING: u32 = 851968;
    pub const CERT_FIND_CERT_ID: u32 = 1048576;
    pub const CERT_FIND_CROSS_CERT_DIST_POINTS: u32 = 1114112;
    pub const CERT_FIND_PUBKEY_MD5_HASH: u32 = 1179648;
    pub const CERT_FIND_SUBJECT_INFO_ACCESS: u32 = 1245184;
    pub const CERT_FIND_HASH_STR: u32 = 1310720;
    pub const CERT_FIND_HAS_PRIVATE_KEY: u32 = 1376256;
    pub const CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG: u32 = 1;
    pub const CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG: u32 = 2;
    pub const CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG: u32 = 4;
    pub const CERT_FIND_NO_ENHKEY_USAGE_FLAG: u32 = 8;
    pub const CERT_FIND_OR_ENHKEY_USAGE_FLAG: u32 = 16;
    pub const CERT_FIND_VALID_ENHKEY_USAGE_FLAG: u32 = 32;
    pub const CERT_FIND_OPTIONAL_CTL_USAGE_FLAG: u32 = 1;
    pub const CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG: u32 = 2;
    pub const CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG: u32 = 4;
    pub const CERT_FIND_NO_CTL_USAGE_FLAG: u32 = 8;
    pub const CERT_FIND_OR_CTL_USAGE_FLAG: u32 = 16;
    pub const CERT_FIND_VALID_CTL_USAGE_FLAG: u32 = 32;
    pub const CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG: u32 = 2147483648;
    pub const CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG: u32 = 1073741824;
    pub const CTL_ENTRY_FROM_PROP_CHAIN_FLAG: u32 = 1;
    pub const CRL_FIND_ANY: u32 = 0;
    pub const CRL_FIND_ISSUED_BY: u32 = 1;
    pub const CRL_FIND_EXISTING: u32 = 2;
    pub const CRL_FIND_ISSUED_FOR: u32 = 3;
    pub const CRL_FIND_ISSUED_BY_AKI_FLAG: u32 = 1;
    pub const CRL_FIND_ISSUED_BY_SIGNATURE_FLAG: u32 = 2;
    pub const CRL_FIND_ISSUED_BY_DELTA_FLAG: u32 = 4;
    pub const CRL_FIND_ISSUED_BY_BASE_FLAG: u32 = 8;
    pub const CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG: u32 = 16;
    pub const CERT_STORE_ADD_NEW: u32 = 1;
    pub const CERT_STORE_ADD_USE_EXISTING: u32 = 2;
    pub const CERT_STORE_ADD_REPLACE_EXISTING: u32 = 3;
    pub const CERT_STORE_ADD_ALWAYS: u32 = 4;
    pub const CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES: u32 = 5;
    pub const CERT_STORE_ADD_NEWER: u32 = 6;
    pub const CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES: u32 = 7;
    pub const CERT_STORE_CERTIFICATE_CONTEXT: u32 = 1;
    pub const CERT_STORE_CRL_CONTEXT: u32 = 2;
    pub const CERT_STORE_CTL_CONTEXT: u32 = 3;
    pub const CERT_STORE_ALL_CONTEXT_FLAG: i32 = -1;
    pub const CERT_STORE_CERTIFICATE_CONTEXT_FLAG: u32 = 2;
    pub const CERT_STORE_CRL_CONTEXT_FLAG: u32 = 4;
    pub const CERT_STORE_CTL_CONTEXT_FLAG: u32 = 8;
    pub const CTL_ANY_SUBJECT_TYPE: u32 = 1;
    pub const CTL_CERT_SUBJECT_TYPE: u32 = 2;
    pub const CTL_FIND_ANY: u32 = 0;
    pub const CTL_FIND_SHA1_HASH: u32 = 1;
    pub const CTL_FIND_MD5_HASH: u32 = 2;
    pub const CTL_FIND_USAGE: u32 = 3;
    pub const CTL_FIND_SUBJECT: u32 = 4;
    pub const CTL_FIND_EXISTING: u32 = 5;
    pub const CTL_FIND_NO_LIST_ID_CBDATA: u32 = 4294967295;
    pub const CTL_FIND_SAME_USAGE_FLAG: u32 = 1;
    pub const CERT_STORE_CTRL_RESYNC: u32 = 1;
    pub const CERT_STORE_CTRL_NOTIFY_CHANGE: u32 = 2;
    pub const CERT_STORE_CTRL_COMMIT: u32 = 3;
    pub const CERT_STORE_CTRL_AUTO_RESYNC: u32 = 4;
    pub const CERT_STORE_CTRL_CANCEL_NOTIFY: u32 = 5;
    pub const CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG: u32 = 1;
    pub const CERT_STORE_CTRL_COMMIT_FORCE_FLAG: u32 = 1;
    pub const CERT_STORE_CTRL_COMMIT_CLEAR_FLAG: u32 = 2;
    pub const CERT_STORE_LOCALIZED_NAME_PROP_ID: u32 = 4096;
    pub const CERT_CREATE_CONTEXT_NOCOPY_FLAG: u32 = 1;
    pub const CERT_CREATE_CONTEXT_SORTED_FLAG: u32 = 2;
    pub const CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG: u32 = 4;
    pub const CERT_CREATE_CONTEXT_NO_ENTRY_FLAG: u32 = 8;
    pub const CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG: u32 = 1;
    pub const CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG: u32 = 2;
    pub const CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG: u32 = 4;
    pub const CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG: u32 = 8;
    pub const CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG: u32 = 1;
    pub const CERT_PHYSICAL_STORE_DEFAULT_NAME: &[u8; 9usize] = b".Default\0";
    pub const CERT_PHYSICAL_STORE_GROUP_POLICY_NAME: &[u8; 13usize] = b".GroupPolicy\0";
    pub const CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME: &[u8; 14usize] = b".LocalMachine\0";
    pub const CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME: &[u8; 17usize] = b".UserCertificate\0";
    pub const CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME: &[u8; 25usize] =
        b".LocalMachineGroupPolicy\0";
    pub const CERT_PHYSICAL_STORE_ENTERPRISE_NAME: &[u8; 12usize] = b".Enterprise\0";
    pub const CERT_PHYSICAL_STORE_AUTH_ROOT_NAME: &[u8; 10usize] = b".AuthRoot\0";
    pub const CERT_PHYSICAL_STORE_SMART_CARD_NAME: &[u8; 11usize] = b".SmartCard\0";
    pub const CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC: &[u8; 27usize] =
        b"CertDllOpenSystemStoreProv\0";
    pub const CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC: &[u8; 27usize] =
        b"CertDllRegisterSystemStore\0";
    pub const CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC: &[u8; 29usize] =
        b"CertDllUnregisterSystemStore\0";
    pub const CRYPT_OID_ENUM_SYSTEM_STORE_FUNC: &[u8; 23usize] = b"CertDllEnumSystemStore\0";
    pub const CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC: &[u8; 29usize] =
        b"CertDllRegisterPhysicalStore\0";
    pub const CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC: &[u8; 31usize] =
        b"CertDllUnregisterPhysicalStore\0";
    pub const CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC: &[u8; 25usize] = b"CertDllEnumPhysicalStore\0";
    pub const CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME: &[u8; 20usize] = b"SystemStoreLocation\0";
    pub const CMSG_TRUSTED_SIGNER_FLAG: u32 = 1;
    pub const CMSG_SIGNER_ONLY_FLAG: u32 = 2;
    pub const CMSG_USE_SIGNER_INDEX_FLAG: u32 = 4;
    pub const CMSG_CMS_ENCAPSULATED_CTL_FLAG: u32 = 32768;
    pub const CMSG_ENCODE_SORTED_CTL_FLAG: u32 = 1;
    pub const CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG: u32 = 2;
    pub const CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG: u32 = 1;
    pub const CERT_VERIFY_TRUSTED_SIGNERS_FLAG: u32 = 2;
    pub const CERT_VERIFY_NO_TIME_CHECK_FLAG: u32 = 4;
    pub const CERT_VERIFY_ALLOW_MORE_USAGE_FLAG: u32 = 8;
    pub const CERT_VERIFY_UPDATED_CTL_FLAG: u32 = 1;
    pub const CERT_CONTEXT_REVOCATION_TYPE: u32 = 1;
    pub const CERT_VERIFY_REV_CHAIN_FLAG: u32 = 1;
    pub const CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION: u32 = 2;
    pub const CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG: u32 = 4;
    pub const CERT_VERIFY_REV_SERVER_OCSP_FLAG: u32 = 8;
    pub const CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG: u32 = 16;
    pub const CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG: u32 = 32;
    pub const CERT_UNICODE_IS_RDN_ATTRS_FLAG: u32 = 1;
    pub const CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG: u32 = 2;
    pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB: u32 = 1;
    pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT: u32 = 2;
    pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL: u32 = 3;
    pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE: u32 = 4;
    pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY: u32 = 1;
    pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT: u32 = 2;
    pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN: u32 = 3;
    pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL: u32 = 4;
    pub const CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG: u32 = 1;
    pub const CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG: u32 = 2;
    pub const CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG: u32 = 4;
    pub const CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG: u32 = 8;
    pub const CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC: &[u8; 42usize] =
        b"CryptDllExtractEncodedSignatureParameters\0";
    pub const CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC: &[u8; 26usize] = b"CryptDllSignAndEncodeHash\0";
    pub const CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC: &[u8; 31usize] =
        b"CryptDllVerifyEncodedSignature\0";
    pub const CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG: u32 = 1;
    pub const CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG: u32 = 2;
    pub const CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID: u32 = 1;
    pub const CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID: u32 = 2;
    pub const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC: &[u8; 30usize] =
        b"CryptDllExportPublicKeyInfoEx\0";
    pub const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC: &[u8; 31usize] =
        b"CryptDllExportPublicKeyInfoEx2\0";
    pub const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC: &[u8; 47usize] =
        b"CryptDllExportPublicKeyInfoFromBCryptKeyHandle\0";
    pub const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC: &[u8; 30usize] =
        b"CryptDllImportPublicKeyInfoEx\0";
    pub const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC: &[u8; 31usize] =
        b"CryptDllImportPublicKeyInfoEx2\0";
    pub const CRYPT_ACQUIRE_CACHE_FLAG: u32 = 1;
    pub const CRYPT_ACQUIRE_USE_PROV_INFO_FLAG: u32 = 2;
    pub const CRYPT_ACQUIRE_COMPARE_KEY_FLAG: u32 = 4;
    pub const CRYPT_ACQUIRE_NO_HEALING: u32 = 8;
    pub const CRYPT_ACQUIRE_SILENT_FLAG: u32 = 64;
    pub const CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG: u32 = 128;
    pub const CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK: u32 = 458752;
    pub const CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG: u32 = 65536;
    pub const CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG: u32 = 131072;
    pub const CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG: u32 = 262144;
    pub const CRYPT_FIND_USER_KEYSET_FLAG: u32 = 1;
    pub const CRYPT_FIND_MACHINE_KEYSET_FLAG: u32 = 2;
    pub const CRYPT_FIND_SILENT_KEYSET_FLAG: u32 = 64;
    pub const CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC: &[u8; 31usize] =
        b"CryptDllImportPrivateKeyInfoEx\0";
    pub const CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC: &[u8; 31usize] =
        b"CryptDllExportPrivateKeyInfoEx\0";
    pub const CRYPT_DELETE_KEYSET: u32 = 16;
    pub const CERT_SIMPLE_NAME_STR: u32 = 1;
    pub const CERT_OID_NAME_STR: u32 = 2;
    pub const CERT_X500_NAME_STR: u32 = 3;
    pub const CERT_XML_NAME_STR: u32 = 4;
    pub const CERT_NAME_STR_SEMICOLON_FLAG: u32 = 1073741824;
    pub const CERT_NAME_STR_NO_PLUS_FLAG: u32 = 536870912;
    pub const CERT_NAME_STR_NO_QUOTING_FLAG: u32 = 268435456;
    pub const CERT_NAME_STR_CRLF_FLAG: u32 = 134217728;
    pub const CERT_NAME_STR_COMMA_FLAG: u32 = 67108864;
    pub const CERT_NAME_STR_REVERSE_FLAG: u32 = 33554432;
    pub const CERT_NAME_STR_FORWARD_FLAG: u32 = 16777216;
    pub const CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG: u32 = 65536;
    pub const CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG: u32 = 131072;
    pub const CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG: u32 = 262144;
    pub const CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG: u32 = 524288;
    pub const CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG: u32 = 1048576;
    pub const CERT_NAME_STR_ENABLE_PUNYCODE_FLAG: u32 = 2097152;
    pub const CERT_NAME_EMAIL_TYPE: u32 = 1;
    pub const CERT_NAME_RDN_TYPE: u32 = 2;
    pub const CERT_NAME_ATTR_TYPE: u32 = 3;
    pub const CERT_NAME_SIMPLE_DISPLAY_TYPE: u32 = 4;
    pub const CERT_NAME_FRIENDLY_DISPLAY_TYPE: u32 = 5;
    pub const CERT_NAME_DNS_TYPE: u32 = 6;
    pub const CERT_NAME_URL_TYPE: u32 = 7;
    pub const CERT_NAME_UPN_TYPE: u32 = 8;
    pub const CERT_NAME_ISSUER_FLAG: u32 = 1;
    pub const CERT_NAME_DISABLE_IE4_UTF8_FLAG: u32 = 65536;
    pub const CERT_NAME_SEARCH_ALL_NAMES_FLAG: u32 = 2;
    pub const CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG: u32 = 1;
    pub const CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG: u32 = 2;
    pub const CRYPT_MESSAGE_KEYID_SIGNER_FLAG: u32 = 4;
    pub const CRYPT_MESSAGE_SILENT_KEYSET_FLAG: u32 = 64;
    pub const CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG: u32 = 4;
    pub const CERT_QUERY_OBJECT_FILE: u32 = 1;
    pub const CERT_QUERY_OBJECT_BLOB: u32 = 2;
    pub const CERT_QUERY_CONTENT_CERT: u32 = 1;
    pub const CERT_QUERY_CONTENT_CTL: u32 = 2;
    pub const CERT_QUERY_CONTENT_CRL: u32 = 3;
    pub const CERT_QUERY_CONTENT_SERIALIZED_STORE: u32 = 4;
    pub const CERT_QUERY_CONTENT_SERIALIZED_CERT: u32 = 5;
    pub const CERT_QUERY_CONTENT_SERIALIZED_CTL: u32 = 6;
    pub const CERT_QUERY_CONTENT_SERIALIZED_CRL: u32 = 7;
    pub const CERT_QUERY_CONTENT_PKCS7_SIGNED: u32 = 8;
    pub const CERT_QUERY_CONTENT_PKCS7_UNSIGNED: u32 = 9;
    pub const CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED: u32 = 10;
    pub const CERT_QUERY_CONTENT_PKCS10: u32 = 11;
    pub const CERT_QUERY_CONTENT_PFX: u32 = 12;
    pub const CERT_QUERY_CONTENT_CERT_PAIR: u32 = 13;
    pub const CERT_QUERY_CONTENT_PFX_AND_LOAD: u32 = 14;
    pub const CERT_QUERY_CONTENT_FLAG_CERT: u32 = 2;
    pub const CERT_QUERY_CONTENT_FLAG_CTL: u32 = 4;
    pub const CERT_QUERY_CONTENT_FLAG_CRL: u32 = 8;
    pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE: u32 = 16;
    pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT: u32 = 32;
    pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL: u32 = 64;
    pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL: u32 = 128;
    pub const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED: u32 = 256;
    pub const CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED: u32 = 512;
    pub const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED: u32 = 1024;
    pub const CERT_QUERY_CONTENT_FLAG_PKCS10: u32 = 2048;
    pub const CERT_QUERY_CONTENT_FLAG_PFX: u32 = 4096;
    pub const CERT_QUERY_CONTENT_FLAG_CERT_PAIR: u32 = 8192;
    pub const CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD: u32 = 16384;
    pub const CERT_QUERY_CONTENT_FLAG_ALL: u32 = 16382;
    pub const CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT: u32 = 818;
    pub const CERT_QUERY_FORMAT_BINARY: u32 = 1;
    pub const CERT_QUERY_FORMAT_BASE64_ENCODED: u32 = 2;
    pub const CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED: u32 = 3;
    pub const CERT_QUERY_FORMAT_FLAG_BINARY: u32 = 2;
    pub const CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED: u32 = 4;
    pub const CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED: u32 = 8;
    pub const CERT_QUERY_FORMAT_FLAG_ALL: u32 = 14;
    pub const SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC: &[u8; 31usize] =
        b"SchemeDllRetrieveEncodedObject\0";
    pub const SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC: &[u8; 32usize] =
        b"SchemeDllRetrieveEncodedObjectW\0";
    pub const CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC: &[u8; 30usize] =
        b"ContextDllCreateObjectContext\0";
    pub const CRYPT_RETRIEVE_MULTIPLE_OBJECTS: u32 = 1;
    pub const CRYPT_CACHE_ONLY_RETRIEVAL: u32 = 2;
    pub const CRYPT_WIRE_ONLY_RETRIEVAL: u32 = 4;
    pub const CRYPT_DONT_CACHE_RESULT: u32 = 8;
    pub const CRYPT_ASYNC_RETRIEVAL: u32 = 16;
    pub const CRYPT_STICKY_CACHE_RETRIEVAL: u32 = 4096;
    pub const CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL: u32 = 8192;
    pub const CRYPT_OFFLINE_CHECK_RETRIEVAL: u32 = 16384;
    pub const CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE: u32 = 32768;
    pub const CRYPT_LDAP_SIGN_RETRIEVAL: u32 = 65536;
    pub const CRYPT_NO_AUTH_RETRIEVAL: u32 = 131072;
    pub const CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL: u32 = 262144;
    pub const CRYPT_AIA_RETRIEVAL: u32 = 524288;
    pub const CRYPT_HTTP_POST_RETRIEVAL: u32 = 1048576;
    pub const CRYPT_PROXY_CACHE_RETRIEVAL: u32 = 2097152;
    pub const CRYPT_NOT_MODIFIED_RETRIEVAL: u32 = 4194304;
    pub const CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL: u32 = 8388608;
    pub const CRYPT_RANDOM_QUERY_STRING_RETRIEVAL: u32 = 67108864;
    pub const CRYPT_ENABLE_FILE_RETRIEVAL: u32 = 134217728;
    pub const CRYPT_CREATE_NEW_FLUSH_ENTRY: u32 = 268435456;
    pub const CRYPT_VERIFY_CONTEXT_SIGNATURE: u32 = 32;
    pub const CRYPT_VERIFY_DATA_HASH: u32 = 64;
    pub const CRYPT_KEEP_TIME_VALID: u32 = 128;
    pub const CRYPT_DONT_VERIFY_SIGNATURE: u32 = 256;
    pub const CRYPT_DONT_CHECK_TIME_VALIDITY: u32 = 512;
    pub const CRYPT_CHECK_FRESHNESS_TIME_VALIDITY: u32 = 1024;
    pub const CRYPT_ACCUMULATIVE_TIMEOUT: u32 = 2048;
    pub const CRYPT_OCSP_ONLY_RETRIEVAL: u32 = 16777216;
    pub const CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL: u32 = 33554432;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_NONE: u32 = 0;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_BLOB: u32 = 1;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_CRL: u32 = 2;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_OCSP: u32 = 3;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB: u32 = 5;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB: u32 = 6;
    pub const CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB: u32 = 7;
    pub const CRYPTNET_URL_CACHE_DEFAULT_FLUSH: u32 = 0;
    pub const CRYPTNET_URL_CACHE_DISABLE_FLUSH: u32 = 4294967295;
    pub const CRYPTNET_URL_CACHE_RESPONSE_NONE: u32 = 0;
    pub const CRYPTNET_URL_CACHE_RESPONSE_HTTP: u32 = 1;
    pub const CRYPTNET_URL_CACHE_RESPONSE_VALIDATED: u32 = 32768;
    pub const CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH: u32 = 4096;
    pub const CRYPT_GET_URL_FROM_PROPERTY: u32 = 1;
    pub const CRYPT_GET_URL_FROM_EXTENSION: u32 = 2;
    pub const CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE: u32 = 4;
    pub const CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE: u32 = 8;
    pub const URL_OID_GET_OBJECT_URL_FUNC: &[u8; 19usize] = b"UrlDllGetObjectUrl\0";
    pub const TIME_VALID_OID_GET_OBJECT_FUNC: &[u8; 22usize] = b"TimeValidDllGetObject\0";
    pub const TIME_VALID_OID_FLUSH_OBJECT_FUNC: &[u8; 24usize] = b"TimeValidDllFlushObject\0";
    pub const CERT_CREATE_SELFSIGN_NO_SIGN: u32 = 1;
    pub const CERT_CREATE_SELFSIGN_NO_KEY_INFO: u32 = 2;
    pub const CRYPT_KEYID_MACHINE_FLAG: u32 = 32;
    pub const CRYPT_KEYID_ALLOC_FLAG: u32 = 32768;
    pub const CRYPT_KEYID_DELETE_FLAG: u32 = 16;
    pub const CRYPT_KEYID_SET_NEW_FLAG: u32 = 8192;
    pub const CERT_CHAIN_CONFIG_REGPATH : & [u8 ; 94usize] = b"Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config\0" ;
    pub const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME: &[u8; 25usize] =
        b"MaxUrlRetrievalByteCount\0";
    pub const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: u32 = 104857600;
    pub const CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME: &[u8; 25usize] =
        b"ChainCacheResyncFiletime\0";
    pub const CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME: &[u8; 33usize] =
        b"DisableMandatoryBasicConstraints\0";
    pub const CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME: &[u8; 25usize] =
        b"DisableCANameConstraints\0";
    pub const CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME: &[u8; 37usize] =
        b"DisableUnsupportedCriticalExtensions\0";
    pub const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME: &[u8; 21usize] =
        b"MaxAIAUrlCountInCert\0";
    pub const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT: u32 = 5;
    pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME: &[u8; 32usize] =
        b"MaxAIAUrlRetrievalCountPerChain\0";
    pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT: u32 = 3;
    pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME: &[u8; 28usize] =
        b"MaxAIAUrlRetrievalByteCount\0";
    pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: u32 = 100000;
    pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME: &[u8; 28usize] =
        b"MaxAIAUrlRetrievalCertCount\0";
    pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT: u32 = 10;
    pub const CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME: &[u8; 20usize] =
        b"OcspValiditySeconds\0";
    pub const CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT: u32 = 43200;
    pub const CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME: &[u8; 19usize] = b"DisableSerialChain\0";
    pub const CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME: &[u8; 23usize] =
        b"SerialChainLogFileName\0";
    pub const CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME: &[u8; 23usize] =
        b"DisableSyncWithSslTime\0";
    pub const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME: &[u8; 28usize] =
        b"MaxSslTimeUpdatedEventCount\0";
    pub const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT: u32 = 5;
    pub const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE: u32 = 4294967295;
    pub const CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME: &[u8; 24usize] =
        b"SslHandshakeLogFileName\0";
    pub const CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME: &[u8; 25usize] =
        b"EnableWeakSignatureFlags\0";
    pub const CERT_CHAIN_ENABLE_MD2_MD4_FLAG: u32 = 1;
    pub const CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG: u32 = 2;
    pub const CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG: u32 = 4;
    pub const CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG: u32 = 8;
    pub const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME: &[u8; 22usize] =
        b"MinRsaPubKeyBitLength\0";
    pub const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT: u32 = 1023;
    pub const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE: u32 = 4294967295;
    pub const CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME: &[u8; 18usize] = b"WeakRsaPubKeyTime\0";
    pub const CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME: &[u8; 20usize] =
        b"WeakSignatureLogDir\0";
    pub const CERT_CHAIN_DEFAULT_CONFIG_SUBDIR: &[u8; 8usize] = b"Default\0";
    pub const CERT_CHAIN_WEAK_PREFIX_NAME: &[u8; 5usize] = b"Weak\0";
    pub const CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME: &[u8; 11usize] = b"ThirdParty\0";
    pub const CERT_CHAIN_WEAK_ALL_CONFIG_NAME: &[u8; 4usize] = b"All\0";
    pub const CERT_CHAIN_WEAK_FLAGS_NAME: &[u8; 6usize] = b"Flags\0";
    pub const CERT_CHAIN_WEAK_HYGIENE_NAME: &[u8; 8usize] = b"Hygiene\0";
    pub const CERT_CHAIN_WEAK_AFTER_TIME_NAME: &[u8; 10usize] = b"AfterTime\0";
    pub const CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME: &[u8; 18usize] = b"FileHashAfterTime\0";
    pub const CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME: &[u8; 23usize] =
        b"TimestampHashAfterTime\0";
    pub const CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME: &[u8; 13usize] = b"MinBitLength\0";
    pub const CERT_CHAIN_WEAK_SHA256_ALLOW_NAME: &[u8; 12usize] = b"Sha256Allow\0";
    pub const CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE: u32 = 4294967295;
    pub const CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG: u32 = 2147483648;
    pub const CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG: u32 = 65536;
    pub const CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG: u32 = 131072;
    pub const CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG: u32 = 262144;
    pub const CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG: u32 = 1048576;
    pub const CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG: u32 = 2097152;
    pub const CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG: u32 = 4194304;
    pub const CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG: u32 = 8388608;
    pub const CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG: u32 = 16777216;
    pub const CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG: u32 = 33554432;
    pub const CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG: u32 = 67108864;
    pub const CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG: u32 = 134217728;
    pub const CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG: u32 = 268435456;
    pub const CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG: u32 = 536870912;
    pub const CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG: u32 = 1073741824;
    pub const CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG: u32 = 4096;
    pub const CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG: u32 = 8192;
    pub const CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG: u32 = 16384;
    pub const CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG: u32 = 32768;
    pub const CERT_CHAIN_DISABLE_WEAK_FLAGS: u32 = 215285760;
    pub const CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS: u32 = 12288;
    pub const CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS: u32 = 49152;
    pub const CERT_CHAIN_ENABLE_HYGIENE_FLAGS: u32 = 857866240;
    pub const CERT_CHAIN_MOTW_WEAK_FLAGS: u32 = 1786773504;
    pub const CERT_CHAIN_OPT_IN_WEAK_FLAGS: u32 = 262144;
    pub const CERT_CHAIN_AUTO_CURRENT_USER: u32 = 1;
    pub const CERT_CHAIN_AUTO_LOCAL_MACHINE: u32 = 2;
    pub const CERT_CHAIN_AUTO_IMPERSONATED: u32 = 3;
    pub const CERT_CHAIN_AUTO_PROCESS_INFO: u32 = 4;
    pub const CERT_CHAIN_AUTO_PINRULE_INFO: u32 = 5;
    pub const CERT_CHAIN_AUTO_NETWORK_INFO: u32 = 6;
    pub const CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE: u32 = 7;
    pub const CERT_CHAIN_AUTO_HPKP_RULE_INFO: u32 = 8;
    pub const CERT_CHAIN_AUTO_FLAGS_VALUE_NAME: &[u8; 10usize] = b"AutoFlags\0";
    pub const CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG: u32 = 1;
    pub const CERT_CHAIN_AUTO_LOG_CREATE_FLAG: u32 = 2;
    pub const CERT_CHAIN_AUTO_LOG_FREE_FLAG: u32 = 4;
    pub const CERT_CHAIN_AUTO_LOG_FLUSH_FLAG: u32 = 8;
    pub const CERT_CHAIN_AUTO_LOG_FLAGS: u32 = 14;
    pub const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME: &[u8; 27usize] =
        b"AutoFlushFirstDeltaSeconds\0";
    pub const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT: u32 = 300;
    pub const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME: &[u8; 26usize] =
        b"AutoFlushNextDeltaSeconds\0";
    pub const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT: u32 = 1800;
    pub const CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME: &[u8; 16usize] = b"AutoLogFileName\0";
    pub const CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME: &[u8; 32usize] =
        b"DisableAutoFlushProcessNameList\0";
    pub const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME: &[u8; 30usize] =
        b"SrvOcspRespMinValiditySeconds\0";
    pub const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT: u32 = 600;
    pub const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME: &[u8; 43usize] =
        b"SrvOcspRespUrlRetrievalTimeoutMilliseconds\0";
    pub const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: u32 = 15000;
    pub const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &[u8; 38usize] =
        b"SrvOcspRespMaxBeforeNextUpdateSeconds\0";
    pub const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 14400;
    pub const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &[u8; 38usize] =
        b"SrvOcspRespMinBeforeNextUpdateSeconds\0";
    pub const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 120;
    pub const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME: &[u8; 37usize] =
        b"SrvOcspRespMinAfterNextUpdateSeconds\0";
    pub const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 60;
    pub const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME: &[u8; 34usize] =
        b"SrvOcspRespMinSyncCertFileSeconds\0";
    pub const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT: u32 = 5;
    pub const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME: &[u8; 34usize] =
        b"SrvOcspRespMaxSyncCertFileSeconds\0";
    pub const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT: u32 = 3600;
    pub const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME: &[u8; 33usize] =
        b"CryptnetMaxCachedOcspPerCrlCount\0";
    pub const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT: u32 = 500;
    pub const CRYPTNET_OCSP_AFTER_CRL_DISABLE: u32 = 4294967295;
    pub const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME: &[u8; 34usize] =
        b"CryptnetDefaultFlushExemptSeconds\0";
    pub const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT: u32 = 2419200;
    pub const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME: &[u8; 33usize] =
        b"CryptnetPreFetchMinMaxAgeSeconds\0";
    pub const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT: u32 = 3600;
    pub const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME: &[u8; 33usize] =
        b"CryptnetPreFetchMaxMaxAgeSeconds\0";
    pub const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT: u32 = 1209600;
    pub const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME: &[u8; 45usize] =
        b"CryptnetPreFetchMinOcspValidityPeriodSeconds\0";
    pub const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT: u32 = 1209600;
    pub const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME: &[u8; 44usize] =
        b"CryptnetPreFetchAfterPublishPreFetchDivisor\0";
    pub const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT: u32 = 10;
    pub const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME: &[u8; 48usize] =
        b"CryptnetPreFetchBeforeNextUpdatePreFetchDivisor\0";
    pub const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: u32 = 20;
    pub const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
        &[u8; 51usize] = b"CryptnetPreFetchMinBeforeNextUpdatePreFetchSeconds\0";
    pub const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 =
        3600;
    pub const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME:
        &[u8; 61usize] = b"CryptnetPreFetchValidityPeriodAfterNextUpdatePreFetchDivisor\0";
    pub const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: u32 =
        10;
    pub const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
        &[u8; 56usize] = b"CryptnetPreFetchMaxAfterNextUpdatePreFetchPeriodSeconds\0";
    pub const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 =
        14400;
    pub const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
        &[u8; 56usize] = b"CryptnetPreFetchMinAfterNextUpdatePreFetchPeriodSeconds\0";
    pub const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 = 1800;
    pub const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
        &[u8; 54usize] = b"CryptnetPreFetchAfterCurrentTimePreFetchPeriodSeconds\0";
    pub const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 = 1800;
    pub const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME: &[u8; 37usize] =
        b"CryptnetPreFetchTriggerPeriodSeconds\0";
    pub const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT: u32 = 600;
    pub const CRYPTNET_PRE_FETCH_TRIGGER_DISABLE: u32 = 4294967295;
    pub const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME: &[u8; 45usize] =
        b"CryptnetPreFetchScanAfterTriggerDelaySeconds\0";
    pub const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT: u32 = 60;
    pub const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME: &[u8; 40usize] =
        b"CryptnetPreFetchRetrievalTimeoutSeconds\0";
    pub const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT: u32 = 300;
    pub const CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH : & [u8 ; 106usize] = b"Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config\\CrlPreFetch\0" ;
    pub const CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME: &[u8; 16usize] =
        b"ProcessNameList\0";
    pub const CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME: &[u8; 16usize] = b"PreFetchUrlList\0";
    pub const CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME: &[u8; 25usize] =
        b"DisableInformationEvents\0";
    pub const CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME: &[u8; 12usize] = b"LogFileName\0";
    pub const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME: &[u8; 15usize] =
        b"TimeoutSeconds\0";
    pub const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT: u32 = 300;
    pub const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME: &[u8; 14usize] =
        b"MaxAgeSeconds\0";
    pub const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT: u32 = 7200;
    pub const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN: u32 = 300;
    pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &[u8; 31usize] =
        b"PublishBeforeNextUpdateSeconds\0";
    pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 3600;
    pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME: &[u8; 29usize] =
        b"PublishRandomIntervalSeconds\0";
    pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT: u32 = 300;
    pub const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &[u8; 27usize] =
        b"MinBeforeNextUpdateSeconds\0";
    pub const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 300;
    pub const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME: &[u8; 26usize] =
        b"MinAfterNextUpdateSeconds\0";
    pub const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 300;
    pub const CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH: &[u8; 66usize] =
        b"Software\\Policies\\Microsoft\\SystemCertificates\\ChainEngine\\Config\0";
    pub const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME: &[u8; 37usize] =
        b"ChainUrlRetrievalTimeoutMilliseconds\0";
    pub const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: u32 = 15000;
    pub const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME:
        &[u8; 52usize] = b"ChainRevAccumulativeUrlRetrievalTimeoutMilliseconds\0";
    pub const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: u32 = 20000;
    pub const CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME: &[u8; 22usize] = b"EnableInetUnknownAuth\0";
    pub const CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME: &[u8; 16usize] = b"EnableInetLocal\0";
    pub const CERT_RETR_BEHAVIOR_FILE_VALUE_NAME: &[u8; 19usize] = b"AllowFileUrlScheme\0";
    pub const CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME: &[u8; 26usize] = b"DisableLDAPSignAndEncrypt\0";
    pub const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME: &[u8; 35usize] =
        b"CryptnetCachedOcspSwitchToCrlCount\0";
    pub const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT: u32 = 50;
    pub const CRYPTNET_CRL_BEFORE_OCSP_ENABLE: u32 = 4294967295;
    pub const CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME: &[u8; 23usize] =
        b"DisableAIAUrlRetrieval\0";
    pub const CERT_CHAIN_OPTIONS_VALUE_NAME: &[u8; 8usize] = b"Options\0";
    pub const CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL: u32 = 2;
    pub const CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL: u32 = 4;
    pub const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME: &[u8; 31usize] =
        b"CrossCertDownloadIntervalHours\0";
    pub const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT: u32 = 168;
    pub const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME: &[u8; 27usize] =
        b"CRLValidityExtensionPeriod\0";
    pub const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT: u32 = 12;
    pub const CERT_CHAIN_CACHE_END_CERT: u32 = 1;
    pub const CERT_CHAIN_THREAD_STORE_SYNC: u32 = 2;
    pub const CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL: u32 = 4;
    pub const CERT_CHAIN_USE_LOCAL_MACHINE_STORE: u32 = 8;
    pub const CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE: u32 = 16;
    pub const CERT_CHAIN_ENABLE_SHARE_STORE: u32 = 32;
    pub const CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG: u32 = 1;
    pub const CERT_TRUST_NO_ERROR: u32 = 0;
    pub const CERT_TRUST_IS_NOT_TIME_VALID: u32 = 1;
    pub const CERT_TRUST_IS_NOT_TIME_NESTED: u32 = 2;
    pub const CERT_TRUST_IS_REVOKED: u32 = 4;
    pub const CERT_TRUST_IS_NOT_SIGNATURE_VALID: u32 = 8;
    pub const CERT_TRUST_IS_NOT_VALID_FOR_USAGE: u32 = 16;
    pub const CERT_TRUST_IS_UNTRUSTED_ROOT: u32 = 32;
    pub const CERT_TRUST_REVOCATION_STATUS_UNKNOWN: u32 = 64;
    pub const CERT_TRUST_IS_CYCLIC: u32 = 128;
    pub const CERT_TRUST_INVALID_EXTENSION: u32 = 256;
    pub const CERT_TRUST_INVALID_POLICY_CONSTRAINTS: u32 = 512;
    pub const CERT_TRUST_INVALID_BASIC_CONSTRAINTS: u32 = 1024;
    pub const CERT_TRUST_INVALID_NAME_CONSTRAINTS: u32 = 2048;
    pub const CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT: u32 = 4096;
    pub const CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT: u32 = 8192;
    pub const CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT: u32 = 16384;
    pub const CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT: u32 = 32768;
    pub const CERT_TRUST_IS_OFFLINE_REVOCATION: u32 = 16777216;
    pub const CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY: u32 = 33554432;
    pub const CERT_TRUST_IS_EXPLICIT_DISTRUST: u32 = 67108864;
    pub const CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT: u32 = 134217728;
    pub const CERT_TRUST_HAS_WEAK_SIGNATURE: u32 = 1048576;
    pub const CERT_TRUST_HAS_WEAK_HYGIENE: u32 = 2097152;
    pub const CERT_TRUST_IS_PARTIAL_CHAIN: u32 = 65536;
    pub const CERT_TRUST_CTL_IS_NOT_TIME_VALID: u32 = 131072;
    pub const CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID: u32 = 262144;
    pub const CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE: u32 = 524288;
    pub const CERT_TRUST_HAS_EXACT_MATCH_ISSUER: u32 = 1;
    pub const CERT_TRUST_HAS_KEY_MATCH_ISSUER: u32 = 2;
    pub const CERT_TRUST_HAS_NAME_MATCH_ISSUER: u32 = 4;
    pub const CERT_TRUST_IS_SELF_SIGNED: u32 = 8;
    pub const CERT_TRUST_AUTO_UPDATE_CA_REVOCATION: u32 = 16;
    pub const CERT_TRUST_AUTO_UPDATE_END_REVOCATION: u32 = 32;
    pub const CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL: u32 = 64;
    pub const CERT_TRUST_IS_KEY_ROLLOVER: u32 = 128;
    pub const CERT_TRUST_SSL_HANDSHAKE_OCSP: u32 = 262144;
    pub const CERT_TRUST_SSL_TIME_VALID_OCSP: u32 = 524288;
    pub const CERT_TRUST_SSL_RECONNECT_OCSP: u32 = 1048576;
    pub const CERT_TRUST_HAS_PREFERRED_ISSUER: u32 = 256;
    pub const CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY: u32 = 512;
    pub const CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS: u32 = 1024;
    pub const CERT_TRUST_IS_PEER_TRUSTED: u32 = 2048;
    pub const CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED: u32 = 4096;
    pub const CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE: u32 = 8192;
    pub const CERT_TRUST_IS_CA_TRUSTED: u32 = 16384;
    pub const CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE: u32 = 32768;
    pub const CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE: u32 = 131072;
    pub const CERT_TRUST_IS_COMPLEX_CHAIN: u32 = 65536;
    pub const CERT_TRUST_SSL_TIME_VALID: u32 = 16777216;
    pub const CERT_TRUST_NO_TIME_CHECK: u32 = 33554432;
    pub const USAGE_MATCH_TYPE_AND: u32 = 0;
    pub const USAGE_MATCH_TYPE_OR: u32 = 1;
    pub const CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG: u32 = 1;
    pub const CERT_CHAIN_REVOCATION_CHECK_END_CERT: u32 = 268435456;
    pub const CERT_CHAIN_REVOCATION_CHECK_CHAIN: u32 = 536870912;
    pub const CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT: u32 = 1073741824;
    pub const CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY: u32 = 2147483648;
    pub const CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT: u32 = 134217728;
    pub const CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT: u32 = 67108864;
    pub const CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING: u32 = 64;
    pub const CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS: u32 = 128;
    pub const CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE: u32 = 256;
    pub const CERT_CHAIN_TIMESTAMP_TIME: u32 = 512;
    pub const CERT_CHAIN_ENABLE_PEER_TRUST: u32 = 1024;
    pub const CERT_CHAIN_DISABLE_MY_PEER_TRUST: u32 = 2048;
    pub const CERT_CHAIN_DISABLE_MD2_MD4: u32 = 4096;
    pub const CERT_CHAIN_DISABLE_AIA: u32 = 8192;
    pub const CERT_CHAIN_HAS_MOTW: u32 = 16384;
    pub const CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT: u32 = 32768;
    pub const CERT_CHAIN_OPT_IN_WEAK_SIGNATURE: u32 = 65536;
    pub const CERT_CHAIN_FIND_BY_ISSUER: u32 = 1;
    pub const CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG: u32 = 1;
    pub const CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG: u32 = 2;
    pub const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG: u32 = 4;
    pub const CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG: u32 = 8;
    pub const CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG: u32 = 16384;
    pub const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG: u32 = 32768;
    pub const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG: u32 = 1;
    pub const CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG: u32 = 2;
    pub const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG: u32 = 4;
    pub const CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG: u32 = 8;
    pub const CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS: u32 = 7;
    pub const CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG: u32 = 16;
    pub const CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG: u32 = 32;
    pub const CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG: u32 = 64;
    pub const CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG: u32 = 128;
    pub const CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG: u32 = 256;
    pub const CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG: u32 = 512;
    pub const CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG: u32 = 1024;
    pub const CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG: u32 = 2048;
    pub const CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS: u32 = 3840;
    pub const CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG: u32 = 32768;
    pub const CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG: u32 = 16384;
    pub const CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG: u32 = 8192;
    pub const CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG: u32 = 4096;
    pub const CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG: u32 = 134217728;
    pub const CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC: &[u8; 36usize] =
        b"CertDllVerifyCertificateChainPolicy\0";
    pub const AUTHTYPE_CLIENT: u32 = 1;
    pub const AUTHTYPE_SERVER: u32 = 2;
    pub const BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG: u32 = 2147483648;
    pub const BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG: u32 = 1073741824;
    pub const MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG: u32 = 65536;
    pub const MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG: u32 = 131072;
    pub const MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG: u32 = 262144;
    pub const SSL_F12_ERROR_TEXT_LENGTH: u32 = 256;
    pub const CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL: u32 = 0;
    pub const CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL: u32 = 1;
    pub const CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL: u32 = 2;
    pub const CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY: u32 = 0;
    pub const CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY: u32 = 1;
    pub const CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY: u32 = 2;
    pub const SSL_HPKP_PKP_HEADER_INDEX: u32 = 0;
    pub const SSL_HPKP_PKP_RO_HEADER_INDEX: u32 = 1;
    pub const SSL_HPKP_HEADER_COUNT: u32 = 2;
    pub const SSL_KEY_PIN_ERROR_TEXT_LENGTH: u32 = 512;
    pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR: i32 = -2;
    pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR: i32 = -1;
    pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS: u32 = 0;
    pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING: u32 = 1;
    pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING: u32 = 2;
    pub const CRYPT_STRING_BASE64HEADER: u32 = 0;
    pub const CRYPT_STRING_BASE64: u32 = 1;
    pub const CRYPT_STRING_BINARY: u32 = 2;
    pub const CRYPT_STRING_BASE64REQUESTHEADER: u32 = 3;
    pub const CRYPT_STRING_HEX: u32 = 4;
    pub const CRYPT_STRING_HEXASCII: u32 = 5;
    pub const CRYPT_STRING_BASE64_ANY: u32 = 6;
    pub const CRYPT_STRING_ANY: u32 = 7;
    pub const CRYPT_STRING_HEX_ANY: u32 = 8;
    pub const CRYPT_STRING_BASE64X509CRLHEADER: u32 = 9;
    pub const CRYPT_STRING_HEXADDR: u32 = 10;
    pub const CRYPT_STRING_HEXASCIIADDR: u32 = 11;
    pub const CRYPT_STRING_HEXRAW: u32 = 12;
    pub const CRYPT_STRING_BASE64URI: u32 = 13;
    pub const CRYPT_STRING_ENCODEMASK: u32 = 255;
    pub const CRYPT_STRING_RESERVED100: u32 = 256;
    pub const CRYPT_STRING_RESERVED200: u32 = 512;
    pub const CRYPT_STRING_PERCENTESCAPE: u32 = 134217728;
    pub const CRYPT_STRING_HASHDATA: u32 = 268435456;
    pub const CRYPT_STRING_STRICT: u32 = 536870912;
    pub const CRYPT_STRING_NOCRLF: u32 = 1073741824;
    pub const CRYPT_STRING_NOCR: u32 = 2147483648;
    pub const szOID_PKCS_12_PbeIds: &[u8; 22usize] = b"1.2.840.113549.1.12.1\0";
    pub const szOID_PKCS_12_pbeWithSHA1And128BitRC4: &[u8; 24usize] = b"1.2.840.113549.1.12.1.1\0";
    pub const szOID_PKCS_12_pbeWithSHA1And40BitRC4: &[u8; 24usize] = b"1.2.840.113549.1.12.1.2\0";
    pub const szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES: &[u8; 24usize] =
        b"1.2.840.113549.1.12.1.3\0";
    pub const szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES: &[u8; 24usize] =
        b"1.2.840.113549.1.12.1.4\0";
    pub const szOID_PKCS_12_pbeWithSHA1And128BitRC2: &[u8; 24usize] = b"1.2.840.113549.1.12.1.5\0";
    pub const szOID_PKCS_12_pbeWithSHA1And40BitRC2: &[u8; 24usize] = b"1.2.840.113549.1.12.1.6\0";
    pub const szOID_PKCS_5_PBKDF2: &[u8; 22usize] = b"1.2.840.113549.1.5.12\0";
    pub const szOID_PKCS_5_PBES2: &[u8; 22usize] = b"1.2.840.113549.1.5.13\0";
    pub const PKCS12_IMPORT_SILENT: u32 = 64;
    pub const CRYPT_USER_KEYSET: u32 = 4096;
    pub const PKCS12_PREFER_CNG_KSP: u32 = 256;
    pub const PKCS12_ALWAYS_CNG_KSP: u32 = 512;
    pub const PKCS12_ONLY_CERTIFICATES: u32 = 1024;
    pub const PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES: u32 = 2048;
    pub const PKCS12_ALLOW_OVERWRITE_KEY: u32 = 16384;
    pub const PKCS12_NO_PERSIST_KEY: u32 = 32768;
    pub const PKCS12_VIRTUAL_ISOLATION_KEY: u32 = 65536;
    pub const PKCS12_IMPORT_RESERVED_MASK: u32 = 4294901760;
    pub const PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE: u32 = 0;
    pub const PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME: &[u8; 12usize] = b"PfxProvider\0";
    pub const PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME: &[u8; 13usize] = b"PfxContainer\0";
    pub const REPORT_NO_PRIVATE_KEY: u32 = 1;
    pub const REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY: u32 = 2;
    pub const EXPORT_PRIVATE_KEYS: u32 = 4;
    pub const PKCS12_INCLUDE_EXTENDED_PROPERTIES: u32 = 16;
    pub const PKCS12_PROTECT_TO_DOMAIN_SIDS: u32 = 32;
    pub const PKCS12_EXPORT_SILENT: u32 = 64;
    pub const PKCS12_EXPORT_PBES2_PARAMS: u32 = 128;
    pub const PKCS12_DISABLE_ENCRYPT_CERTIFICATES: u32 = 256;
    pub const PKCS12_ENCRYPT_CERTIFICATES: u32 = 512;
    pub const PKCS12_EXPORT_ECC_CURVE_PARAMETERS: u32 = 4096;
    pub const PKCS12_EXPORT_ECC_CURVE_OID: u32 = 8192;
    pub const PKCS12_EXPORT_RESERVED_MASK: u32 = 4294901760;
    pub const PKCS12_PBKDF2_ID_HMAC_SHA1: &[u8; 19usize] = b"1.2.840.113549.2.7\0";
    pub const PKCS12_PBKDF2_ID_HMAC_SHA256: &[u8; 19usize] = b"1.2.840.113549.2.9\0";
    pub const PKCS12_PBKDF2_ID_HMAC_SHA384: &[u8; 20usize] = b"1.2.840.113549.2.10\0";
    pub const PKCS12_PBKDF2_ID_HMAC_SHA512: &[u8; 20usize] = b"1.2.840.113549.2.11\0";
    pub const PKCS12_PBES2_ALG_AES256_SHA256: &[u8; 14usize] = b"AES256-SHA256\0";
    pub const PKCS12_CONFIG_REGPATH: &[u8; 46usize] =
        b"Software\\Microsoft\\Windows\\CurrentVersion\\PFX\0";
    pub const PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME: &[u8; 20usize] = b"EncryptCertificates\0";
    pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG: u32 = 1;
    pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG: u32 = 2;
    pub const CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG: u32 = 1;
    pub const CERT_SELECT_MAX_PARA: u32 = 500;
    pub const CERT_SELECT_BY_ENHKEY_USAGE: u32 = 1;
    pub const CERT_SELECT_BY_KEY_USAGE: u32 = 2;
    pub const CERT_SELECT_BY_POLICY_OID: u32 = 3;
    pub const CERT_SELECT_BY_PROV_NAME: u32 = 4;
    pub const CERT_SELECT_BY_EXTENSION: u32 = 5;
    pub const CERT_SELECT_BY_SUBJECT_HOST_NAME: u32 = 6;
    pub const CERT_SELECT_BY_ISSUER_ATTR: u32 = 7;
    pub const CERT_SELECT_BY_SUBJECT_ATTR: u32 = 8;
    pub const CERT_SELECT_BY_ISSUER_NAME: u32 = 9;
    pub const CERT_SELECT_BY_PUBLIC_KEY: u32 = 10;
    pub const CERT_SELECT_BY_TLS_SIGNATURES: u32 = 11;
    pub const CERT_SELECT_BY_ISSUER_DISPLAYNAME: u32 = 12;
    pub const CERT_SELECT_BY_FRIENDLYNAME: u32 = 13;
    pub const CERT_SELECT_BY_THUMBPRINT: u32 = 14;
    pub const CERT_SELECT_LAST: u32 = 11;
    pub const CERT_SELECT_MAX: u32 = 33;
    pub const CERT_SELECT_ALLOW_EXPIRED: u32 = 1;
    pub const CERT_SELECT_TRUSTED_ROOT: u32 = 2;
    pub const CERT_SELECT_DISALLOW_SELFSIGNED: u32 = 4;
    pub const CERT_SELECT_HAS_PRIVATE_KEY: u32 = 8;
    pub const CERT_SELECT_HAS_KEY_FOR_SIGNATURE: u32 = 16;
    pub const CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE: u32 = 32;
    pub const CERT_SELECT_HARDWARE_ONLY: u32 = 64;
    pub const CERT_SELECT_ALLOW_DUPLICATES: u32 = 128;
    pub const CERT_SELECT_IGNORE_AUTOSELECT: u32 = 256;
    pub const TIMESTAMP_VERSION: u32 = 1;
    pub const TIMESTAMP_STATUS_GRANTED: u32 = 0;
    pub const TIMESTAMP_STATUS_GRANTED_WITH_MODS: u32 = 1;
    pub const TIMESTAMP_STATUS_REJECTED: u32 = 2;
    pub const TIMESTAMP_STATUS_WAITING: u32 = 3;
    pub const TIMESTAMP_STATUS_REVOCATION_WARNING: u32 = 4;
    pub const TIMESTAMP_STATUS_REVOKED: u32 = 5;
    pub const TIMESTAMP_FAILURE_BAD_ALG: u32 = 0;
    pub const TIMESTAMP_FAILURE_BAD_REQUEST: u32 = 2;
    pub const TIMESTAMP_FAILURE_BAD_FORMAT: u32 = 5;
    pub const TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE: u32 = 14;
    pub const TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED: u32 = 15;
    pub const TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED: u32 = 16;
    pub const TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE: u32 = 17;
    pub const TIMESTAMP_FAILURE_SYSTEM_FAILURE: u32 = 25;
    pub const TIMESTAMP_DONT_HASH_DATA: u32 = 1;
    pub const TIMESTAMP_VERIFY_CONTEXT_SIGNATURE: u32 = 32;
    pub const TIMESTAMP_NO_AUTH_RETRIEVAL: u32 = 131072;
    pub const CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE: u32 = 1;
    pub const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE: u32 = 32;
    pub const CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE: u32 = 33;
    pub const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE: u32 = 65535;
    pub const SSL_OBJECT_LOCATOR_PFX_FUNC: &[u8; 30usize] = b"SslObjectLocatorInitializePfx\0";
    pub const SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC: &[u8; 37usize] =
        b"SslObjectLocatorInitializeIssuerList\0";
    pub const SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC: &[u8; 47usize] =
        b"SslObjectLocatorInitializeCertValidationConfig\0";
    pub const CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN: u32 = 1;
    pub const CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP: u32 = 2;
    pub const CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT: u32 = 3;
    pub const CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD: u32 = 4;
    pub const CERT_FILE_HASH_USE_TYPE: u32 = 1;
    pub const CERT_TIMESTAMP_HASH_USE_TYPE: u32 = 2;
    pub const szFORCE_KEY_PROTECTION: &[u8; 19usize] = b"ForceKeyProtection\0";
    pub const dwFORCE_KEY_PROTECTION_DISABLED: u32 = 0;
    pub const dwFORCE_KEY_PROTECTION_USER_SELECT: u32 = 1;
    pub const dwFORCE_KEY_PROTECTION_HIGH: u32 = 2;
    pub const CRYPTPROTECT_PROMPT_ON_UNPROTECT: u32 = 1;
    pub const CRYPTPROTECT_PROMPT_ON_PROTECT: u32 = 2;
    pub const CRYPTPROTECT_PROMPT_RESERVED: u32 = 4;
    pub const CRYPTPROTECT_PROMPT_STRONG: u32 = 8;
    pub const CRYPTPROTECT_PROMPT_REQUIRE_STRONG: u32 = 16;
    pub const CRYPTPROTECT_UI_FORBIDDEN: u32 = 1;
    pub const CRYPTPROTECT_LOCAL_MACHINE: u32 = 4;
    pub const CRYPTPROTECT_CRED_SYNC: u32 = 8;
    pub const CRYPTPROTECT_AUDIT: u32 = 16;
    pub const CRYPTPROTECT_NO_RECOVERY: u32 = 32;
    pub const CRYPTPROTECT_VERIFY_PROTECTION: u32 = 64;
    pub const CRYPTPROTECT_CRED_REGENERATE: u32 = 128;
    pub const CRYPTPROTECT_FIRST_RESERVED_FLAGVAL: u32 = 268435455;
    pub const CRYPTPROTECT_LAST_RESERVED_FLAGVAL: u32 = 4294967295;
    pub const CRYPTPROTECTMEMORY_BLOCK_SIZE: u32 = 16;
    pub const CRYPTPROTECTMEMORY_SAME_PROCESS: u32 = 0;
    pub const CRYPTPROTECTMEMORY_CROSS_PROCESS: u32 = 1;
    pub const CRYPTPROTECTMEMORY_SAME_LOGON: u32 = 2;
    pub const WINEFS_SETUSERKEY_SET_CAPABILITIES: u32 = 1;
    pub const EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR: u32 = 5;
    pub const EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR: u32 = 6;
    pub const EFS_SUBVER_UNKNOWN: u32 = 0;
    pub const EFS_EFS_SUBVER_EFS_CERT: u32 = 1;
    pub const EFS_PFILE_SUBVER_RMS: u32 = 2;
    pub const EFS_PFILE_SUBVER_APPX: u32 = 3;
    pub const MAX_SID_SIZE: u32 = 256;
    pub const EFS_METADATA_ADD_USER: u32 = 1;
    pub const EFS_METADATA_REMOVE_USER: u32 = 2;
    pub const EFS_METADATA_REPLACE_USER: u32 = 4;
    pub const EFS_METADATA_GENERAL_OP: u32 = 8;
    pub const __REQUIRED_RPCNDR_H_VERSION__: u32 = 500;
    pub const __REQUIRED_RPCSAL_H_VERSION__: u32 = 100;
    pub const __RPCNDR_H_VERSION__: u32 = 500;
    pub const __RPCSAL_H_VERSION__: u32 = 100;
    pub const TARGET_IS_NT100_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT63_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT62_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT61_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT60_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT51_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT50_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT40_OR_LATER: u32 = 1;
    pub const TARGET_IS_NT351_OR_WIN95_OR_LATER: u32 = 1;
    pub const cbNDRContext: u32 = 20;
    pub const USER_CALL_IS_ASYNC: u32 = 256;
    pub const USER_CALL_NEW_CORRELATION_DESC: u32 = 512;
    pub const USER_MARSHAL_FC_BYTE: u32 = 1;
    pub const USER_MARSHAL_FC_CHAR: u32 = 2;
    pub const USER_MARSHAL_FC_SMALL: u32 = 3;
    pub const USER_MARSHAL_FC_USMALL: u32 = 4;
    pub const USER_MARSHAL_FC_WCHAR: u32 = 5;
    pub const USER_MARSHAL_FC_SHORT: u32 = 6;
    pub const USER_MARSHAL_FC_USHORT: u32 = 7;
    pub const USER_MARSHAL_FC_LONG: u32 = 8;
    pub const USER_MARSHAL_FC_ULONG: u32 = 9;
    pub const USER_MARSHAL_FC_FLOAT: u32 = 10;
    pub const USER_MARSHAL_FC_HYPER: u32 = 11;
    pub const USER_MARSHAL_FC_DOUBLE: u32 = 12;
    pub const ROTREGFLAGS_ALLOWANYCLIENT: u32 = 1;
    pub const APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP: u32 = 1;
    pub const APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND: u32 = 2;
    pub const APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY: u32 = 4;
    pub const APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN: u32 = 8;
    pub const APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION: u32 = 16;
    pub const APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY: u32 = 32;
    pub const APPIDREGFLAGS_RESERVED1: u32 = 64;
    pub const APPIDREGFLAGS_RESERVED2: u32 = 128;
    pub const APPIDREGFLAGS_RESERVED3: u32 = 256;
    pub const APPIDREGFLAGS_RESERVED4: u32 = 512;
    pub const APPIDREGFLAGS_RESERVED5: u32 = 1024;
    pub const APPIDREGFLAGS_AAA_NO_IMPLICIT_ACTIVATE_AS_IU: u32 = 2048;
    pub const APPIDREGFLAGS_RESERVED7: u32 = 4096;
    pub const APPIDREGFLAGS_RESERVED8: u32 = 8192;
    pub const APPIDREGFLAGS_RESERVED9: u32 = 16384;
    pub const DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES: u32 = 1;
    pub const DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL: u32 = 2;
    pub const DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES: u32 = 4;
    pub const DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL: u32 = 8;
    pub const DCOMSCM_PING_USE_MID_AUTHNSERVICE: u32 = 16;
    pub const DCOMSCM_PING_DISALLOW_UNSECURE_CALL: u32 = 32;
    pub const ROTFLAGS_REGISTRATIONKEEPSALIVE: u32 = 1;
    pub const ROTFLAGS_ALLOWANYCLIENT: u32 = 2;
    pub const ROT_COMPARE_MAX: u32 = 2048;
    pub const WDT_INPROC_CALL: u32 = 1215587415;
    pub const WDT_REMOTE_CALL: u32 = 1383359575;
    pub const WDT_INPROC64_CALL: u32 = 1349805143;
    pub const FILE_DEVICE_BEEP: u32 = 1;
    pub const FILE_DEVICE_CD_ROM: u32 = 2;
    pub const FILE_DEVICE_CD_ROM_FILE_SYSTEM: u32 = 3;
    pub const FILE_DEVICE_CONTROLLER: u32 = 4;
    pub const FILE_DEVICE_DATALINK: u32 = 5;
    pub const FILE_DEVICE_DFS: u32 = 6;
    pub const FILE_DEVICE_DISK: u32 = 7;
    pub const FILE_DEVICE_DISK_FILE_SYSTEM: u32 = 8;
    pub const FILE_DEVICE_FILE_SYSTEM: u32 = 9;
    pub const FILE_DEVICE_INPORT_PORT: u32 = 10;
    pub const FILE_DEVICE_KEYBOARD: u32 = 11;
    pub const FILE_DEVICE_MAILSLOT: u32 = 12;
    pub const FILE_DEVICE_MIDI_IN: u32 = 13;
    pub const FILE_DEVICE_MIDI_OUT: u32 = 14;
    pub const FILE_DEVICE_MOUSE: u32 = 15;
    pub const FILE_DEVICE_MULTI_UNC_PROVIDER: u32 = 16;
    pub const FILE_DEVICE_NAMED_PIPE: u32 = 17;
    pub const FILE_DEVICE_NETWORK: u32 = 18;
    pub const FILE_DEVICE_NETWORK_BROWSER: u32 = 19;
    pub const FILE_DEVICE_NETWORK_FILE_SYSTEM: u32 = 20;
    pub const FILE_DEVICE_NULL: u32 = 21;
    pub const FILE_DEVICE_PARALLEL_PORT: u32 = 22;
    pub const FILE_DEVICE_PHYSICAL_NETCARD: u32 = 23;
    pub const FILE_DEVICE_PRINTER: u32 = 24;
    pub const FILE_DEVICE_SCANNER: u32 = 25;
    pub const FILE_DEVICE_SERIAL_MOUSE_PORT: u32 = 26;
    pub const FILE_DEVICE_SERIAL_PORT: u32 = 27;
    pub const FILE_DEVICE_SCREEN: u32 = 28;
    pub const FILE_DEVICE_SOUND: u32 = 29;
    pub const FILE_DEVICE_STREAMS: u32 = 30;
    pub const FILE_DEVICE_TAPE: u32 = 31;
    pub const FILE_DEVICE_TAPE_FILE_SYSTEM: u32 = 32;
    pub const FILE_DEVICE_TRANSPORT: u32 = 33;
    pub const FILE_DEVICE_UNKNOWN: u32 = 34;
    pub const FILE_DEVICE_VIDEO: u32 = 35;
    pub const FILE_DEVICE_VIRTUAL_DISK: u32 = 36;
    pub const FILE_DEVICE_WAVE_IN: u32 = 37;
    pub const FILE_DEVICE_WAVE_OUT: u32 = 38;
    pub const FILE_DEVICE_8042_PORT: u32 = 39;
    pub const FILE_DEVICE_NETWORK_REDIRECTOR: u32 = 40;
    pub const FILE_DEVICE_BATTERY: u32 = 41;
    pub const FILE_DEVICE_BUS_EXTENDER: u32 = 42;
    pub const FILE_DEVICE_MODEM: u32 = 43;
    pub const FILE_DEVICE_VDM: u32 = 44;
    pub const FILE_DEVICE_MASS_STORAGE: u32 = 45;
    pub const FILE_DEVICE_SMB: u32 = 46;
    pub const FILE_DEVICE_KS: u32 = 47;
    pub const FILE_DEVICE_CHANGER: u32 = 48;
    pub const FILE_DEVICE_SMARTCARD: u32 = 49;
    pub const FILE_DEVICE_ACPI: u32 = 50;
    pub const FILE_DEVICE_DVD: u32 = 51;
    pub const FILE_DEVICE_FULLSCREEN_VIDEO: u32 = 52;
    pub const FILE_DEVICE_DFS_FILE_SYSTEM: u32 = 53;
    pub const FILE_DEVICE_DFS_VOLUME: u32 = 54;
    pub const FILE_DEVICE_SERENUM: u32 = 55;
    pub const FILE_DEVICE_TERMSRV: u32 = 56;
    pub const FILE_DEVICE_KSEC: u32 = 57;
    pub const FILE_DEVICE_FIPS: u32 = 58;
    pub const FILE_DEVICE_INFINIBAND: u32 = 59;
    pub const FILE_DEVICE_VMBUS: u32 = 62;
    pub const FILE_DEVICE_CRYPT_PROVIDER: u32 = 63;
    pub const FILE_DEVICE_WPD: u32 = 64;
    pub const FILE_DEVICE_BLUETOOTH: u32 = 65;
    pub const FILE_DEVICE_MT_COMPOSITE: u32 = 66;
    pub const FILE_DEVICE_MT_TRANSPORT: u32 = 67;
    pub const FILE_DEVICE_BIOMETRIC: u32 = 68;
    pub const FILE_DEVICE_PMI: u32 = 69;
    pub const FILE_DEVICE_EHSTOR: u32 = 70;
    pub const FILE_DEVICE_DEVAPI: u32 = 71;
    pub const FILE_DEVICE_GPIO: u32 = 72;
    pub const FILE_DEVICE_USBEX: u32 = 73;
    pub const FILE_DEVICE_CONSOLE: u32 = 80;
    pub const FILE_DEVICE_NFP: u32 = 81;
    pub const FILE_DEVICE_SYSENV: u32 = 82;
    pub const FILE_DEVICE_VIRTUAL_BLOCK: u32 = 83;
    pub const FILE_DEVICE_POINT_OF_SERVICE: u32 = 84;
    pub const FILE_DEVICE_STORAGE_REPLICATION: u32 = 85;
    pub const FILE_DEVICE_TRUST_ENV: u32 = 86;
    pub const FILE_DEVICE_UCM: u32 = 87;
    pub const FILE_DEVICE_UCMTCPCI: u32 = 88;
    pub const FILE_DEVICE_PERSISTENT_MEMORY: u32 = 89;
    pub const FILE_DEVICE_NVDIMM: u32 = 90;
    pub const FILE_DEVICE_HOLOGRAPHIC: u32 = 91;
    pub const FILE_DEVICE_SDFXHCI: u32 = 92;
    pub const FILE_DEVICE_UCMUCSI: u32 = 93;
    pub const METHOD_BUFFERED: u32 = 0;
    pub const METHOD_IN_DIRECT: u32 = 1;
    pub const METHOD_OUT_DIRECT: u32 = 2;
    pub const METHOD_NEITHER: u32 = 3;
    pub const METHOD_DIRECT_TO_HARDWARE: u32 = 1;
    pub const METHOD_DIRECT_FROM_HARDWARE: u32 = 2;
    pub const FILE_ANY_ACCESS: u32 = 0;
    pub const FILE_SPECIAL_ACCESS: u32 = 0;
    pub const FILE_READ_ACCESS: u32 = 1;
    pub const FILE_WRITE_ACCESS: u32 = 2;
    pub const IOCTL_STORAGE_BASE: u32 = 45;
    pub const STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT: u32 = 1;
    pub const STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID: u32 = 2;
    pub const STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID: u32 = 4;
    pub const RECOVERED_WRITES_VALID: u32 = 1;
    pub const UNRECOVERED_WRITES_VALID: u32 = 2;
    pub const RECOVERED_READS_VALID: u32 = 4;
    pub const UNRECOVERED_READS_VALID: u32 = 8;
    pub const WRITE_COMPRESSION_INFO_VALID: u32 = 16;
    pub const READ_COMPRESSION_INFO_VALID: u32 = 32;
    pub const TAPE_RETURN_STATISTICS: u32 = 0;
    pub const TAPE_RETURN_ENV_INFO: u32 = 1;
    pub const TAPE_RESET_STATISTICS: u32 = 2;
    pub const MEDIA_ERASEABLE: u32 = 1;
    pub const MEDIA_WRITE_ONCE: u32 = 2;
    pub const MEDIA_READ_ONLY: u32 = 4;
    pub const MEDIA_READ_WRITE: u32 = 8;
    pub const MEDIA_WRITE_PROTECTED: u32 = 256;
    pub const MEDIA_CURRENTLY_MOUNTED: u32 = 2147483648;
    pub const STORAGE_FAILURE_PREDICTION_CONFIG_V1: u32 = 1;
    pub const SRB_TYPE_SCSI_REQUEST_BLOCK: u32 = 0;
    pub const SRB_TYPE_STORAGE_REQUEST_BLOCK: u32 = 1;
    pub const STORAGE_ADDRESS_TYPE_BTL8: u32 = 0;
    pub const STORAGE_RPMB_DESCRIPTOR_VERSION_1: u32 = 1;
    pub const STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE: u32 = 512;
    pub const STORAGE_CRYPTO_CAPABILITY_VERSION_1: u32 = 1;
    pub const STORAGE_CRYPTO_DESCRIPTOR_VERSION_1: u32 = 1;
    pub const STORAGE_TIER_NAME_LENGTH: u32 = 256;
    pub const STORAGE_TIER_DESCRIPTION_LENGTH: u32 = 512;
    pub const STORAGE_TIER_FLAG_NO_SEEK_PENALTY: u32 = 131072;
    pub const STORAGE_TIER_FLAG_WRITE_BACK_CACHE: u32 = 2097152;
    pub const STORAGE_TIER_FLAG_READ_CACHE: u32 = 4194304;
    pub const STORAGE_TIER_FLAG_PARITY: u32 = 8388608;
    pub const STORAGE_TIER_FLAG_SMR: u32 = 16777216;
    pub const STORAGE_TEMPERATURE_VALUE_NOT_REPORTED: u32 = 32768;
    pub const STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST: u32 = 1;
    pub const STORAGE_COMPONENT_ROLE_CACHE: u32 = 1;
    pub const STORAGE_COMPONENT_ROLE_TIERING: u32 = 2;
    pub const STORAGE_COMPONENT_ROLE_DATA: u32 = 4;
    pub const STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO: u32 = 1;
    pub const STORAGE_ATTRIBUTE_BLOCK_IO: u32 = 2;
    pub const STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE: u32 = 4;
    pub const STORAGE_ATTRIBUTE_VOLATILE: u32 = 8;
    pub const STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION: u32 = 16;
    pub const STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT: u32 = 32;
    pub const STORAGE_DEVICE_MAX_OPERATIONAL_STATUS: u32 = 16;
    pub const STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH: u32 = 128;
    pub const STORAGE_DEVICE_NUMA_NODE_UNKNOWN: u32 = 4294967295;
    pub const DeviceDsmActionFlag_NonDestructive: u32 = 2147483648;
    pub const DeviceDsmAction_None: u32 = 0;
    pub const DeviceDsmAction_Trim: u32 = 1;
    pub const DeviceDsmAction_Notification: u32 = 2147483650;
    pub const DeviceDsmAction_OffloadRead: u32 = 2147483651;
    pub const DeviceDsmAction_OffloadWrite: u32 = 4;
    pub const DeviceDsmAction_Allocation: u32 = 2147483653;
    pub const DeviceDsmAction_Repair: u32 = 2147483654;
    pub const DeviceDsmAction_Scrub: u32 = 2147483655;
    pub const DeviceDsmAction_DrtQuery: u32 = 2147483656;
    pub const DeviceDsmAction_DrtClear: u32 = 2147483657;
    pub const DeviceDsmAction_DrtDisable: u32 = 2147483658;
    pub const DeviceDsmAction_TieringQuery: u32 = 2147483659;
    pub const DeviceDsmAction_Map: u32 = 2147483660;
    pub const DeviceDsmAction_RegenerateParity: u32 = 2147483661;
    pub const DeviceDsmAction_NvCache_Change_Priority: u32 = 2147483662;
    pub const DeviceDsmAction_NvCache_Evict: u32 = 2147483663;
    pub const DeviceDsmAction_TopologyIdQuery: u32 = 2147483664;
    pub const DeviceDsmAction_GetPhysicalAddresses: u32 = 2147483665;
    pub const DeviceDsmAction_ScopeRegen: u32 = 2147483666;
    pub const DeviceDsmAction_ReportZones: u32 = 2147483667;
    pub const DeviceDsmAction_OpenZone: u32 = 2147483668;
    pub const DeviceDsmAction_FinishZone: u32 = 2147483669;
    pub const DeviceDsmAction_CloseZone: u32 = 2147483670;
    pub const DeviceDsmAction_ResetWritePointer: u32 = 23;
    pub const DeviceDsmAction_GetRangeErrorInfo: u32 = 2147483672;
    pub const DeviceDsmAction_WriteZeroes: u32 = 25;
    pub const DeviceDsmAction_LostQuery: u32 = 2147483674;
    pub const DeviceDsmAction_GetFreeSpace: u32 = 2147483675;
    pub const DeviceDsmAction_ConversionQuery: u32 = 2147483676;
    pub const DeviceDsmAction_VdtSet: u32 = 29;
    pub const DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE: u32 = 1;
    pub const DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED: u32 = 2147483648;
    pub const DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT: u32 = 1073741824;
    pub const DEVICE_DSM_NOTIFY_FLAG_BEGIN: u32 = 1;
    pub const DEVICE_DSM_NOTIFY_FLAG_END: u32 = 2;
    pub const STORAGE_OFFLOAD_MAX_TOKEN_LENGTH: u32 = 512;
    pub const STORAGE_OFFLOAD_TOKEN_ID_LENGTH: u32 = 504;
    pub const STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA: u32 = 4294901761;
    pub const STORAGE_OFFLOAD_READ_RANGE_TRUNCATED: u32 = 1;
    pub const STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED: u32 = 1;
    pub const STORAGE_OFFLOAD_TOKEN_INVALID: u32 = 2;
    pub const DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY: u32 = 1073741824;
    pub const DEVICE_DSM_PARAMETERS_V1: u32 = 1;
    pub const DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1: u32 = 1;
    pub const DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT: u32 = 1073741824;
    pub const DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT: u32 = 536870912;
    pub const DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC: u32 = 268435456;
    pub const DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT: u32 = 536870912;
    pub const DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES: u32 = 268435456;
    pub const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1: u32 = 1;
    pub const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1: u32 = 1;
    pub const DEVICE_STORAGE_NO_ERRORS: u32 = 1;
    pub const DEVICE_DSM_RANGE_ERROR_OUTPUT_V1: u32 = 1;
    pub const DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1: u32 = 1;
    pub const IOCTL_STORAGE_BC_VERSION: u32 = 1;
    pub const STORAGE_PRIORITY_HINT_SUPPORTED: u32 = 1;
    pub const ERROR_HISTORY_DIRECTORY_ENTRY_DEFAULT_COUNT: u32 = 8;
    pub const DEVICEDUMP_STRUCTURE_VERSION_V1: u32 = 1;
    pub const DEVICEDUMP_MAX_IDSTRING: u32 = 32;
    pub const MAX_FW_BUCKET_ID_LENGTH: u32 = 132;
    pub const STORAGE_CRASH_TELEMETRY_REGKEY : & [u8 ; 81usize] = b"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\CrashControl\\StorageTelemetry\0" ;
    pub const STORAGE_DEVICE_TELEMETRY_REGKEY: &[u8; 76usize] =
        b"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\Storage\\StorageTelemetry\0";
    pub const DDUMP_FLAG_DATA_READ_FROM_DEVICE: u32 = 1;
    pub const FW_ISSUEID_NO_ISSUE: u32 = 0;
    pub const FW_ISSUEID_UNKNOWN: u32 = 4294967295;
    pub const TC_PUBLIC_DEVICEDUMP_CONTENT_SMART: u32 = 1;
    pub const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG: u32 = 2;
    pub const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX: u32 = 16;
    pub const TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH: u32 = 16;
    pub const TC_PUBLIC_DATA_TYPE_ATAGP: &[u8; 14usize] = b"ATAGPLogPages\0";
    pub const TC_PUBLIC_DATA_TYPE_ATASMART: &[u8; 14usize] = b"ATASMARTPages\0";
    pub const CDB_SIZE: u32 = 16;
    pub const TELEMETRY_COMMAND_SIZE: u32 = 16;
    pub const DEVICEDUMP_CAP_PRIVATE_SECTION: u32 = 1;
    pub const DEVICEDUMP_CAP_RESTRICTED_SECTION: u32 = 2;
    pub const STORAGE_IDLE_POWERUP_REASON_VERSION_V1: u32 = 1;
    pub const STORAGE_DEVICE_POWER_CAP_VERSION_V1: u32 = 1;
    pub const STORAGE_EVENT_NOTIFICATION_VERSION_V1: u32 = 1;
    pub const STORAGE_EVENT_MEDIA_STATUS: u32 = 1;
    pub const STORAGE_EVENT_DEVICE_STATUS: u32 = 2;
    pub const STORAGE_EVENT_DEVICE_OPERATION: u32 = 4;
    pub const STORAGE_EVENT_ALL: u32 = 7;
    pub const READ_COPY_NUMBER_KEY: u32 = 1380142592;
    pub const READ_COPY_NUMBER_BYPASS_CACHE_FLAG: u32 = 256;
    pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER: u32 = 1;
    pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT: u32 = 2;
    pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT: u32 = 4;
    pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE: u32 = 2147483648;
    pub const STORAGE_HW_FIRMWARE_INVALID_SLOT: u32 = 255;
    pub const STORAGE_HW_FIRMWARE_REVISION_LENGTH: u32 = 16;
    pub const STORAGE_PROTOCOL_STRUCTURE_VERSION: u32 = 1;
    pub const STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST: u32 = 2147483648;
    pub const STORAGE_PROTOCOL_STATUS_PENDING: u32 = 0;
    pub const STORAGE_PROTOCOL_STATUS_SUCCESS: u32 = 1;
    pub const STORAGE_PROTOCOL_STATUS_ERROR: u32 = 2;
    pub const STORAGE_PROTOCOL_STATUS_INVALID_REQUEST: u32 = 3;
    pub const STORAGE_PROTOCOL_STATUS_NO_DEVICE: u32 = 4;
    pub const STORAGE_PROTOCOL_STATUS_BUSY: u32 = 5;
    pub const STORAGE_PROTOCOL_STATUS_DATA_OVERRUN: u32 = 6;
    pub const STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES: u32 = 7;
    pub const STORAGE_PROTOCOL_STATUS_THROTTLED_REQUEST: u32 = 8;
    pub const STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED: u32 = 255;
    pub const STORAGE_PROTOCOL_COMMAND_LENGTH_NVME: u32 = 64;
    pub const STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND: u32 = 1;
    pub const STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND: u32 = 2;
    pub const STORATTRIBUTE_NONE: u32 = 0;
    pub const STORATTRIBUTE_MANAGEMENT_STATE: u32 = 1;
    pub const IOCTL_SCMBUS_BASE: u32 = 89;
    pub const IOCTL_SCMBUS_DEVICE_FUNCTION_BASE: u32 = 0;
    pub const IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE: u32 = 768;
    pub const IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE: u32 = 1536;
    pub const SCM_MAX_SYMLINK_LEN_IN_CHARS: u32 = 256;
    pub const MAX_INTERFACE_CODES: u32 = 8;
    pub const SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES: u32 = 32;
    pub const SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS: u32 = 128;
    pub const SCM_PD_MAX_OPERATIONAL_STATUS: u32 = 16;
    pub const SCM_PD_FIRMWARE_LAST_DOWNLOAD: u32 = 1;
    pub const IOCTL_DISK_BASE: u32 = 7;
    pub const PARTITION_ENTRY_UNUSED: u32 = 0;
    pub const PARTITION_FAT_12: u32 = 1;
    pub const PARTITION_XENIX_1: u32 = 2;
    pub const PARTITION_XENIX_2: u32 = 3;
    pub const PARTITION_FAT_16: u32 = 4;
    pub const PARTITION_EXTENDED: u32 = 5;
    pub const PARTITION_HUGE: u32 = 6;
    pub const PARTITION_IFS: u32 = 7;
    pub const PARTITION_OS2BOOTMGR: u32 = 10;
    pub const PARTITION_FAT32: u32 = 11;
    pub const PARTITION_FAT32_XINT13: u32 = 12;
    pub const PARTITION_XINT13: u32 = 14;
    pub const PARTITION_XINT13_EXTENDED: u32 = 15;
    pub const PARTITION_MSFT_RECOVERY: u32 = 39;
    pub const PARTITION_MAIN_OS: u32 = 40;
    pub const PARTIITON_OS_DATA: u32 = 41;
    pub const PARTITION_PRE_INSTALLED: u32 = 42;
    pub const PARTITION_BSP: u32 = 43;
    pub const PARTITION_DPP: u32 = 44;
    pub const PARTITION_WINDOWS_SYSTEM: u32 = 45;
    pub const PARTITION_PREP: u32 = 65;
    pub const PARTITION_LDM: u32 = 66;
    pub const PARTITION_DM: u32 = 84;
    pub const PARTITION_EZDRIVE: u32 = 85;
    pub const PARTITION_UNIX: u32 = 99;
    pub const PARTITION_SPACES_DATA: u32 = 215;
    pub const PARTITION_SPACES: u32 = 231;
    pub const PARTITION_GPT: u32 = 238;
    pub const PARTITION_SYSTEM: u32 = 239;
    pub const VALID_NTFT: u32 = 192;
    pub const PARTITION_NTFT: u32 = 128;
    pub const GPT_ATTRIBUTE_PLATFORM_REQUIRED: u32 = 1;
    pub const GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL: u32 = 2;
    pub const GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE: u32 = 4;
    pub const GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER: i64 = -9223372036854775808;
    pub const GPT_BASIC_DATA_ATTRIBUTE_HIDDEN: u64 = 4611686018427387904;
    pub const GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY: u64 = 2305843009213693952;
    pub const GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY: u64 = 1152921504606846976;
    pub const GPT_BASIC_DATA_ATTRIBUTE_OFFLINE: u64 = 576460752303423488;
    pub const GPT_BASIC_DATA_ATTRIBUTE_DAX: u64 = 288230376151711744;
    pub const GPT_BASIC_DATA_ATTRIBUTE_SERVICE: u64 = 144115188075855872;
    pub const GPT_SPACES_ATTRIBUTE_NO_METADATA: i64 = -9223372036854775808;
    pub const HIST_NO_OF_BUCKETS: u32 = 24;
    pub const DISK_LOGGING_START: u32 = 0;
    pub const DISK_LOGGING_STOP: u32 = 1;
    pub const DISK_LOGGING_DUMP: u32 = 2;
    pub const DISK_BINNING: u32 = 3;
    pub const CAP_ATA_ID_CMD: u32 = 1;
    pub const CAP_ATAPI_ID_CMD: u32 = 2;
    pub const CAP_SMART_CMD: u32 = 4;
    pub const ATAPI_ID_CMD: u32 = 161;
    pub const ID_CMD: u32 = 236;
    pub const SMART_CMD: u32 = 176;
    pub const SMART_CYL_LOW: u32 = 79;
    pub const SMART_CYL_HI: u32 = 194;
    pub const SMART_NO_ERROR: u32 = 0;
    pub const SMART_IDE_ERROR: u32 = 1;
    pub const SMART_INVALID_FLAG: u32 = 2;
    pub const SMART_INVALID_COMMAND: u32 = 3;
    pub const SMART_INVALID_BUFFER: u32 = 4;
    pub const SMART_INVALID_DRIVE: u32 = 5;
    pub const SMART_INVALID_IOCTL: u32 = 6;
    pub const SMART_ERROR_NO_MEM: u32 = 7;
    pub const SMART_INVALID_REGISTER: u32 = 8;
    pub const SMART_NOT_SUPPORTED: u32 = 9;
    pub const SMART_NO_IDE_DEVICE: u32 = 10;
    pub const SMART_OFFLINE_ROUTINE_OFFLINE: u32 = 0;
    pub const SMART_SHORT_SELFTEST_OFFLINE: u32 = 1;
    pub const SMART_EXTENDED_SELFTEST_OFFLINE: u32 = 2;
    pub const SMART_ABORT_OFFLINE_SELFTEST: u32 = 127;
    pub const SMART_SHORT_SELFTEST_CAPTIVE: u32 = 129;
    pub const SMART_EXTENDED_SELFTEST_CAPTIVE: u32 = 130;
    pub const READ_ATTRIBUTE_BUFFER_SIZE: u32 = 512;
    pub const IDENTIFY_BUFFER_SIZE: u32 = 512;
    pub const READ_THRESHOLD_BUFFER_SIZE: u32 = 512;
    pub const SMART_LOG_SECTOR_SIZE: u32 = 512;
    pub const READ_ATTRIBUTES: u32 = 208;
    pub const READ_THRESHOLDS: u32 = 209;
    pub const ENABLE_DISABLE_AUTOSAVE: u32 = 210;
    pub const SAVE_ATTRIBUTE_VALUES: u32 = 211;
    pub const EXECUTE_OFFLINE_DIAGS: u32 = 212;
    pub const SMART_READ_LOG: u32 = 213;
    pub const SMART_WRITE_LOG: u32 = 214;
    pub const ENABLE_SMART: u32 = 216;
    pub const DISABLE_SMART: u32 = 217;
    pub const RETURN_SMART_STATUS: u32 = 218;
    pub const ENABLE_DISABLE_AUTO_OFFLINE: u32 = 219;
    pub const DISK_ATTRIBUTE_OFFLINE: u32 = 1;
    pub const DISK_ATTRIBUTE_READ_ONLY: u32 = 2;
    pub const IOCTL_CHANGER_BASE: u32 = 48;
    pub const MAX_VOLUME_ID_SIZE: u32 = 36;
    pub const MAX_VOLUME_TEMPLATE_SIZE: u32 = 40;
    pub const VENDOR_ID_LENGTH: u32 = 8;
    pub const PRODUCT_ID_LENGTH: u32 = 16;
    pub const REVISION_LENGTH: u32 = 4;
    pub const SERIAL_NUMBER_LENGTH: u32 = 32;
    pub const CHANGER_BAR_CODE_SCANNER_INSTALLED: u32 = 1;
    pub const CHANGER_INIT_ELEM_STAT_WITH_RANGE: u32 = 2;
    pub const CHANGER_CLOSE_IEPORT: u32 = 4;
    pub const CHANGER_OPEN_IEPORT: u32 = 8;
    pub const CHANGER_STATUS_NON_VOLATILE: u32 = 16;
    pub const CHANGER_EXCHANGE_MEDIA: u32 = 32;
    pub const CHANGER_CLEANER_SLOT: u32 = 64;
    pub const CHANGER_LOCK_UNLOCK: u32 = 128;
    pub const CHANGER_CARTRIDGE_MAGAZINE: u32 = 256;
    pub const CHANGER_MEDIUM_FLIP: u32 = 512;
    pub const CHANGER_POSITION_TO_ELEMENT: u32 = 1024;
    pub const CHANGER_REPORT_IEPORT_STATE: u32 = 2048;
    pub const CHANGER_STORAGE_DRIVE: u32 = 4096;
    pub const CHANGER_STORAGE_IEPORT: u32 = 8192;
    pub const CHANGER_STORAGE_SLOT: u32 = 16384;
    pub const CHANGER_STORAGE_TRANSPORT: u32 = 32768;
    pub const CHANGER_DRIVE_CLEANING_REQUIRED: u32 = 65536;
    pub const CHANGER_PREDISMOUNT_EJECT_REQUIRED: u32 = 131072;
    pub const CHANGER_CLEANER_ACCESS_NOT_VALID: u32 = 262144;
    pub const CHANGER_PREMOUNT_EJECT_REQUIRED: u32 = 524288;
    pub const CHANGER_VOLUME_IDENTIFICATION: u32 = 1048576;
    pub const CHANGER_VOLUME_SEARCH: u32 = 2097152;
    pub const CHANGER_VOLUME_ASSERT: u32 = 4194304;
    pub const CHANGER_VOLUME_REPLACE: u32 = 8388608;
    pub const CHANGER_VOLUME_UNDEFINE: u32 = 16777216;
    pub const CHANGER_SERIAL_NUMBER_VALID: u32 = 67108864;
    pub const CHANGER_DEVICE_REINITIALIZE_CAPABLE: u32 = 134217728;
    pub const CHANGER_KEYPAD_ENABLE_DISABLE: u32 = 268435456;
    pub const CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS: u32 = 536870912;
    pub const CHANGER_RESERVED_BIT: u32 = 2147483648;
    pub const CHANGER_PREDISMOUNT_ALIGN_TO_SLOT: u32 = 2147483649;
    pub const CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE: u32 = 2147483650;
    pub const CHANGER_CLEANER_AUTODISMOUNT: u32 = 2147483652;
    pub const CHANGER_TRUE_EXCHANGE_CAPABLE: u32 = 2147483656;
    pub const CHANGER_SLOTS_USE_TRAYS: u32 = 2147483664;
    pub const CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR: u32 = 2147483680;
    pub const CHANGER_CLEANER_OPS_NOT_SUPPORTED: u32 = 2147483712;
    pub const CHANGER_IEPORT_USER_CONTROL_OPEN: u32 = 2147483776;
    pub const CHANGER_IEPORT_USER_CONTROL_CLOSE: u32 = 2147483904;
    pub const CHANGER_MOVE_EXTENDS_IEPORT: u32 = 2147484160;
    pub const CHANGER_MOVE_RETRACTS_IEPORT: u32 = 2147484672;
    pub const CHANGER_TO_TRANSPORT: u32 = 1;
    pub const CHANGER_TO_SLOT: u32 = 2;
    pub const CHANGER_TO_IEPORT: u32 = 4;
    pub const CHANGER_TO_DRIVE: u32 = 8;
    pub const LOCK_UNLOCK_IEPORT: u32 = 1;
    pub const LOCK_UNLOCK_DOOR: u32 = 2;
    pub const LOCK_UNLOCK_KEYPAD: u32 = 4;
    pub const LOCK_ELEMENT: u32 = 0;
    pub const UNLOCK_ELEMENT: u32 = 1;
    pub const EXTEND_IEPORT: u32 = 2;
    pub const RETRACT_IEPORT: u32 = 3;
    pub const ELEMENT_STATUS_FULL: u32 = 1;
    pub const ELEMENT_STATUS_IMPEXP: u32 = 2;
    pub const ELEMENT_STATUS_EXCEPT: u32 = 4;
    pub const ELEMENT_STATUS_ACCESS: u32 = 8;
    pub const ELEMENT_STATUS_EXENAB: u32 = 16;
    pub const ELEMENT_STATUS_INENAB: u32 = 32;
    pub const ELEMENT_STATUS_PRODUCT_DATA: u32 = 64;
    pub const ELEMENT_STATUS_LUN_VALID: u32 = 4096;
    pub const ELEMENT_STATUS_ID_VALID: u32 = 8192;
    pub const ELEMENT_STATUS_NOT_BUS: u32 = 32768;
    pub const ELEMENT_STATUS_INVERT: u32 = 4194304;
    pub const ELEMENT_STATUS_SVALID: u32 = 8388608;
    pub const ELEMENT_STATUS_PVOLTAG: u32 = 268435456;
    pub const ELEMENT_STATUS_AVOLTAG: u32 = 536870912;
    pub const ERROR_LABEL_UNREADABLE: u32 = 1;
    pub const ERROR_LABEL_QUESTIONABLE: u32 = 2;
    pub const ERROR_SLOT_NOT_PRESENT: u32 = 4;
    pub const ERROR_DRIVE_NOT_INSTALLED: u32 = 8;
    pub const ERROR_TRAY_MALFUNCTION: u32 = 16;
    pub const ERROR_INIT_STATUS_NEEDED: u32 = 17;
    pub const ERROR_UNHANDLED_ERROR: u32 = 4294967295;
    pub const SEARCH_ALL: u32 = 0;
    pub const SEARCH_PRIMARY: u32 = 1;
    pub const SEARCH_ALTERNATE: u32 = 2;
    pub const SEARCH_ALL_NO_SEQ: u32 = 4;
    pub const SEARCH_PRI_NO_SEQ: u32 = 5;
    pub const SEARCH_ALT_NO_SEQ: u32 = 6;
    pub const ASSERT_PRIMARY: u32 = 8;
    pub const ASSERT_ALTERNATE: u32 = 9;
    pub const REPLACE_PRIMARY: u32 = 10;
    pub const REPLACE_ALTERNATE: u32 = 11;
    pub const UNDEFINE_PRIMARY: u32 = 12;
    pub const UNDEFINE_ALTERNATE: u32 = 13;
    pub const GET_VOLUME_BITMAP_FLAG_MASK_METADATA: u32 = 1;
    pub const FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE: u32 = 1;
    pub const USN_PAGE_SIZE: u32 = 4096;
    pub const USN_REASON_DATA_OVERWRITE: u32 = 1;
    pub const USN_REASON_DATA_EXTEND: u32 = 2;
    pub const USN_REASON_DATA_TRUNCATION: u32 = 4;
    pub const USN_REASON_NAMED_DATA_OVERWRITE: u32 = 16;
    pub const USN_REASON_NAMED_DATA_EXTEND: u32 = 32;
    pub const USN_REASON_NAMED_DATA_TRUNCATION: u32 = 64;
    pub const USN_REASON_FILE_CREATE: u32 = 256;
    pub const USN_REASON_FILE_DELETE: u32 = 512;
    pub const USN_REASON_EA_CHANGE: u32 = 1024;
    pub const USN_REASON_SECURITY_CHANGE: u32 = 2048;
    pub const USN_REASON_RENAME_OLD_NAME: u32 = 4096;
    pub const USN_REASON_RENAME_NEW_NAME: u32 = 8192;
    pub const USN_REASON_INDEXABLE_CHANGE: u32 = 16384;
    pub const USN_REASON_BASIC_INFO_CHANGE: u32 = 32768;
    pub const USN_REASON_HARD_LINK_CHANGE: u32 = 65536;
    pub const USN_REASON_COMPRESSION_CHANGE: u32 = 131072;
    pub const USN_REASON_ENCRYPTION_CHANGE: u32 = 262144;
    pub const USN_REASON_OBJECT_ID_CHANGE: u32 = 524288;
    pub const USN_REASON_REPARSE_POINT_CHANGE: u32 = 1048576;
    pub const USN_REASON_STREAM_CHANGE: u32 = 2097152;
    pub const USN_REASON_TRANSACTED_CHANGE: u32 = 4194304;
    pub const USN_REASON_INTEGRITY_CHANGE: u32 = 8388608;
    pub const USN_REASON_DESIRED_STORAGE_CLASS_CHANGE: u32 = 16777216;
    pub const USN_REASON_CLOSE: u32 = 2147483648;
    pub const USN_DELETE_FLAG_DELETE: u32 = 1;
    pub const USN_DELETE_FLAG_NOTIFY: u32 = 2;
    pub const USN_DELETE_VALID_FLAGS: u32 = 3;
    pub const USN_SOURCE_DATA_MANAGEMENT: u32 = 1;
    pub const USN_SOURCE_AUXILIARY_DATA: u32 = 2;
    pub const USN_SOURCE_REPLICATION_MANAGEMENT: u32 = 4;
    pub const USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT: u32 = 8;
    pub const USN_SOURCE_VALID_FLAGS: u32 = 15;
    pub const MARK_HANDLE_PROTECT_CLUSTERS: u32 = 1;
    pub const MARK_HANDLE_TXF_SYSTEM_LOG: u32 = 4;
    pub const MARK_HANDLE_NOT_TXF_SYSTEM_LOG: u32 = 8;
    pub const MARK_HANDLE_REALTIME: u32 = 32;
    pub const MARK_HANDLE_NOT_REALTIME: u32 = 64;
    pub const MARK_HANDLE_FILTER_METADATA: u32 = 512;
    pub const MARK_HANDLE_CLOUD_SYNC: u32 = 2048;
    pub const MARK_HANDLE_READ_COPY: u32 = 128;
    pub const MARK_HANDLE_NOT_READ_COPY: u32 = 256;
    pub const MARK_HANDLE_RETURN_PURGE_FAILURE: u32 = 1024;
    pub const MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION: u32 = 4096;
    pub const MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO: u32 = 8192;
    pub const MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES: u32 = 16384;
    pub const MARK_HANDLE_ENABLE_CPU_CACHE: u32 = 268435456;
    pub const VOLUME_IS_DIRTY: u32 = 1;
    pub const VOLUME_UPGRADE_SCHEDULED: u32 = 2;
    pub const VOLUME_SESSION_OPEN: u32 = 4;
    pub const FILE_PREFETCH_TYPE_FOR_CREATE: u32 = 1;
    pub const FILE_PREFETCH_TYPE_FOR_DIRENUM: u32 = 2;
    pub const FILE_PREFETCH_TYPE_FOR_CREATE_EX: u32 = 3;
    pub const FILE_PREFETCH_TYPE_FOR_DIRENUM_EX: u32 = 4;
    pub const FILE_PREFETCH_TYPE_MAX: u32 = 4;
    pub const FILESYSTEM_STATISTICS_TYPE_NTFS: u32 = 1;
    pub const FILESYSTEM_STATISTICS_TYPE_FAT: u32 = 2;
    pub const FILESYSTEM_STATISTICS_TYPE_EXFAT: u32 = 3;
    pub const FILESYSTEM_STATISTICS_TYPE_REFS: u32 = 4;
    pub const FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA: u32 = 1;
    pub const FILE_SET_ENCRYPTION: u32 = 1;
    pub const FILE_CLEAR_ENCRYPTION: u32 = 2;
    pub const STREAM_SET_ENCRYPTION: u32 = 3;
    pub const STREAM_CLEAR_ENCRYPTION: u32 = 4;
    pub const MAXIMUM_ENCRYPTION_VALUE: u32 = 4;
    pub const ENCRYPTION_FORMAT_DEFAULT: u32 = 1;
    pub const ENCRYPTED_DATA_INFO_SPARSE_FILE: u32 = 1;
    pub const COPYFILE_SIS_LINK: u32 = 1;
    pub const COPYFILE_SIS_REPLACE: u32 = 2;
    pub const COPYFILE_SIS_FLAGS: u32 = 3;
    pub const SET_REPAIR_ENABLED: u32 = 1;
    pub const SET_REPAIR_WARN_ABOUT_DATA_LOSS: u32 = 8;
    pub const SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT: u32 = 16;
    pub const SET_REPAIR_VALID_MASK: u32 = 25;
    pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE: u32 = 1;
    pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED: u32 = 2;
    pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST: u32 = 4;
    pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD: u32 = 8;
    pub const FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE: u32 = 16;
    pub const FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED: u32 = 32;
    pub const FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR: u32 = 64;
    pub const FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED: u32 = 128;
    pub const FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED: u32 = 256;
    pub const FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED: u32 = 512;
    pub const FILE_INITIATE_REPAIR_HINT1_REPAIRED: u32 = 1024;
    pub const FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG: u32 = 2048;
    pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND: u32 = 4096;
    pub const FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK: u32 = 8192;
    pub const FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION: u32 = 16384;
    pub const FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE: u32 = 32768;
    pub const FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST: u32 = 65536;
    pub const FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH: u32 = 131072;
    pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN: u32 = 262144;
    pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD: u32 = 524288;
    pub const FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT: u32 = 1048576;
    pub const FILE_INITIATE_REPAIR_HINT1_SID_VALID: u32 = 2097152;
    pub const FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH: u32 = 4194304;
    pub const FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT: u32 = 8388608;
    pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE: u32 = 16777216;
    pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED: u32 = 33554432;
    pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST: u32 = 67108864;
    pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD: u32 = 134217728;
    pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX: u32 = 268435456;
    pub const FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY: u32 = 536870912;
    pub const FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES: u32 = 1073741824;
    pub const FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE: u32 = 2147483648;
    pub const FILE_INITIATE_REPAIR_HINT1_INVALID_LCN: u64 = 4294967296;
    pub const FILE_INITIATE_REPAIR_HINT1_INVALID_VCN: u64 = 8589934592;
    pub const FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT: u64 = 17179869184;
    pub const FILE_INITIATE_REPAIR_HINT1_ORPHAN: u64 = 34359738368;
    pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL: u64 = 68719476736;
    pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT: u64 = 137438953472;
    pub const FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG: u64 = 274877906944;
    pub const FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID: u64 = 549755813888;
    pub const FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH: u64 = 1099511627776;
    pub const FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME: u64 = 2199023255552;
    pub const FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES: u64 = 4398046511104;
    pub const TXFS_RM_FLAG_LOGGING_MODE: u32 = 1;
    pub const TXFS_RM_FLAG_RENAME_RM: u32 = 2;
    pub const TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX: u32 = 4;
    pub const TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN: u32 = 8;
    pub const TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS: u32 = 16;
    pub const TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT: u32 = 32;
    pub const TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE: u32 = 64;
    pub const TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX: u32 = 128;
    pub const TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN: u32 = 256;
    pub const TXFS_RM_FLAG_GROW_LOG: u32 = 1024;
    pub const TXFS_RM_FLAG_SHRINK_LOG: u32 = 2048;
    pub const TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE: u32 = 4096;
    pub const TXFS_RM_FLAG_PRESERVE_CHANGES: u32 = 8192;
    pub const TXFS_RM_FLAG_RESET_RM_AT_NEXT_START: u32 = 16384;
    pub const TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START: u32 = 32768;
    pub const TXFS_RM_FLAG_PREFER_CONSISTENCY: u32 = 65536;
    pub const TXFS_RM_FLAG_PREFER_AVAILABILITY: u32 = 131072;
    pub const TXFS_LOGGING_MODE_SIMPLE: u32 = 1;
    pub const TXFS_LOGGING_MODE_FULL: u32 = 2;
    pub const TXFS_TRANSACTION_STATE_NONE: u32 = 0;
    pub const TXFS_TRANSACTION_STATE_ACTIVE: u32 = 1;
    pub const TXFS_TRANSACTION_STATE_PREPARED: u32 = 2;
    pub const TXFS_TRANSACTION_STATE_NOTACTIVE: u32 = 3;
    pub const TXFS_MODIFY_RM_VALID_FLAGS: u32 = 261631;
    pub const TXFS_RM_STATE_NOT_STARTED: u32 = 0;
    pub const TXFS_RM_STATE_STARTING: u32 = 1;
    pub const TXFS_RM_STATE_ACTIVE: u32 = 2;
    pub const TXFS_RM_STATE_SHUTTING_DOWN: u32 = 3;
    pub const TXFS_QUERY_RM_INFORMATION_VALID_FLAGS: u32 = 246192;
    pub const TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN: u32 = 1;
    pub const TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK: u32 = 2;
    pub const TXFS_ROLLFORWARD_REDO_VALID_FLAGS: u32 = 3;
    pub const TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX: u32 = 1;
    pub const TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN: u32 = 2;
    pub const TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE: u32 = 4;
    pub const TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS: u32 = 8;
    pub const TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT: u32 = 16;
    pub const TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE: u32 = 32;
    pub const TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX: u32 = 64;
    pub const TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN: u32 = 128;
    pub const TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT: u32 = 512;
    pub const TXFS_START_RM_FLAG_LOGGING_MODE: u32 = 1024;
    pub const TXFS_START_RM_FLAG_PRESERVE_CHANGES: u32 = 2048;
    pub const TXFS_START_RM_FLAG_PREFER_CONSISTENCY: u32 = 4096;
    pub const TXFS_START_RM_FLAG_PREFER_AVAILABILITY: u32 = 8192;
    pub const TXFS_START_RM_VALID_FLAGS: u32 = 15999;
    pub const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED: u32 = 1;
    pub const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED: u32 = 2;
    pub const TXFS_TRANSACTED_VERSION_NONTRANSACTED: u32 = 4294967294;
    pub const TXFS_TRANSACTED_VERSION_UNCOMMITTED: u32 = 4294967295;
    pub const TXFS_SAVEPOINT_SET: u32 = 1;
    pub const TXFS_SAVEPOINT_ROLLBACK: u32 = 2;
    pub const TXFS_SAVEPOINT_CLEAR: u32 = 4;
    pub const TXFS_SAVEPOINT_CLEAR_ALL: u32 = 16;
    pub const PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED: u32 = 1;
    pub const PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED: u32 = 2;
    pub const PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY: u32 = 4;
    pub const PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY: u32 = 8;
    pub const PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING: u32 = 16;
    pub const PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM: u32 = 32;
    pub const PERSISTENT_VOLUME_STATE_BACKED_BY_WIM: u32 = 64;
    pub const PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING: u32 = 128;
    pub const PERSISTENT_VOLUME_STATE_TXF_DISABLED: u32 = 256;
    pub const PERSISTENT_VOLUME_STATE_REALLOCATE_ALL_DATA_WRITES: u32 = 512;
    pub const PERSISTENT_VOLUME_STATE_CHKDSK_RAN_ONCE: u32 = 1024;
    pub const PERSISTENT_VOLUME_STATE_MODIFIED_BY_CHKDSK: u32 = 2048;
    pub const PERSISTENT_VOLUME_STATE_DAX_FORMATTED: u32 = 4096;
    pub const OPLOCK_LEVEL_CACHE_READ: u32 = 1;
    pub const OPLOCK_LEVEL_CACHE_HANDLE: u32 = 2;
    pub const OPLOCK_LEVEL_CACHE_WRITE: u32 = 4;
    pub const REQUEST_OPLOCK_INPUT_FLAG_REQUEST: u32 = 1;
    pub const REQUEST_OPLOCK_INPUT_FLAG_ACK: u32 = 2;
    pub const REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE: u32 = 4;
    pub const REQUEST_OPLOCK_CURRENT_VERSION: u32 = 1;
    pub const REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED: u32 = 1;
    pub const REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED: u32 = 2;
    pub const QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES: u32 = 1;
    pub const QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES: u32 = 2;
    pub const SD_GLOBAL_CHANGE_TYPE_MACHINE_SID: u32 = 1;
    pub const SD_GLOBAL_CHANGE_TYPE_QUERY_STATS: u32 = 65536;
    pub const SD_GLOBAL_CHANGE_TYPE_ENUM_SDS: u32 = 131072;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE: u32 = 1;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET: u32 = 2;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE: u32 = 4;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE: u32 = 8;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK: u32 = 4278190080;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA: u32 = 16777216;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX: u32 = 33554432;
    pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM: u32 = 50331648;
    pub const FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN: u32 = 1;
    pub const FILE_TYPE_NOTIFICATION_FLAG_USAGE_END: u32 = 2;
    pub const CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED: u32 = 1;
    pub const CSV_INVALID_DEVICE_NUMBER: u32 = 4294967295;
    pub const CSV_QUERY_MDS_PATH_V2_VERSION_1: u32 = 1;
    pub const CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED: u32 = 1;
    pub const CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED: u32 = 2;
    pub const CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED: u32 = 4;
    pub const QUERY_FILE_LAYOUT_RESTART: u32 = 1;
    pub const QUERY_FILE_LAYOUT_INCLUDE_NAMES: u32 = 2;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAMS: u32 = 4;
    pub const QUERY_FILE_LAYOUT_INCLUDE_EXTENTS: u32 = 8;
    pub const QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO: u32 = 16;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED: u32 = 32;
    pub const QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES: u32 = 64;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION: u32 = 128;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE: u32 = 256;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE: u32 = 512;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE: u32 = 1024;
    pub const QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES: u32 = 2048;
    pub const QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE: u32 = 4096;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DATA_ATTRIBUTE: u32 = 8192;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_REPARSE_ATTRIBUTE: u32 = 16384;
    pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EA_ATTRIBUTE: u32 = 32768;
    pub const QUERY_FILE_LAYOUT_SINGLE_INSTANCED: u32 = 1;
    pub const FILE_LAYOUT_NAME_ENTRY_PRIMARY: u32 = 1;
    pub const FILE_LAYOUT_NAME_ENTRY_DOS: u32 = 2;
    pub const STREAM_LAYOUT_ENTRY_IMMOVABLE: u32 = 1;
    pub const STREAM_LAYOUT_ENTRY_PINNED: u32 = 2;
    pub const STREAM_LAYOUT_ENTRY_RESIDENT: u32 = 4;
    pub const STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED: u32 = 8;
    pub const STREAM_LAYOUT_ENTRY_HAS_INFORMATION: u32 = 16;
    pub const STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS: u32 = 1;
    pub const STREAM_EXTENT_ENTRY_ALL_EXTENTS: u32 = 2;
    pub const CHECKSUM_TYPE_UNCHANGED: i32 = -1;
    pub const CHECKSUM_TYPE_NONE: u32 = 0;
    pub const CHECKSUM_TYPE_CRC32: u32 = 1;
    pub const CHECKSUM_TYPE_CRC64: u32 = 2;
    pub const CHECKSUM_TYPE_ECC: u32 = 3;
    pub const CHECKSUM_TYPE_FIRST_UNUSED_TYPE: u32 = 4;
    pub const FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF: u32 = 1;
    pub const OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE: u32 = 1;
    pub const SET_PURGE_FAILURE_MODE_ENABLED: u32 = 1;
    pub const SET_PURGE_FAILURE_MODE_DISABLED: u32 = 2;
    pub const FILE_REGION_USAGE_VALID_CACHED_DATA: u32 = 1;
    pub const FILE_REGION_USAGE_VALID_NONCACHED_DATA: u32 = 2;
    pub const FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT: u32 = 4;
    pub const FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT: u32 = 8;
    pub const FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT: u32 = 16;
    pub const FILE_REGION_USAGE_QUERY_ALIGNMENT: u32 = 24;
    pub const VALID_WRITE_USN_REASON_MASK: u32 = 2147483649;
    pub const FILE_STORAGE_TIER_NAME_LENGTH: u32 = 256;
    pub const FILE_STORAGE_TIER_DESCRIPTION_LENGTH: u32 = 512;
    pub const FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY: u32 = 131072;
    pub const FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE: u32 = 2097152;
    pub const FILE_STORAGE_TIER_FLAG_READ_CACHE: u32 = 4194304;
    pub const FILE_STORAGE_TIER_FLAG_PARITY: u32 = 8388608;
    pub const FILE_STORAGE_TIER_FLAG_SMR: u32 = 16777216;
    pub const QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE: u32 = 2147483648;
    pub const QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ: u32 = 1073741824;
    pub const QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME: u32 = 536870912;
    pub const QUERY_FILE_LAYOUT_REPARSE_DATA_INVALID: u32 = 1;
    pub const QUERY_FILE_LAYOUT_REPARSE_TAG_INVALID: u32 = 2;
    pub const DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC: u32 = 1;
    pub const DUPLICATE_EXTENTS_DATA_EX_ASYNC: u32 = 2;
    pub const REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1: u32 = 1;
    pub const REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1: u32 = 1;
    pub const STREAMS_INVALID_ID: u32 = 0;
    pub const STREAMS_MAX_ID: u32 = 65535;
    pub const STREAMS_ASSOCIATE_ID_CLEAR: u32 = 1;
    pub const STREAMS_ASSOCIATE_ID_SET: u32 = 2;
    pub const DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY: u32 = 1;
    pub const DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED: u32 = 2;
    pub const WOF_CURRENT_VERSION: u32 = 1;
    pub const WOF_PROVIDER_WIM: u32 = 1;
    pub const WOF_PROVIDER_FILE: u32 = 2;
    pub const WOF_PROVIDER_CLOUD: u32 = 3;
    pub const WIM_PROVIDER_HASH_SIZE: u32 = 20;
    pub const WIM_PROVIDER_CURRENT_VERSION: u32 = 1;
    pub const WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE: u32 = 1;
    pub const WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED: u32 = 2;
    pub const WIM_BOOT_OS_WIM: u32 = 1;
    pub const WIM_BOOT_NOT_OS_WIM: u32 = 0;
    pub const FILE_PROVIDER_CURRENT_VERSION: u32 = 1;
    pub const FILE_PROVIDER_SINGLE_FILE: u32 = 1;
    pub const FILE_PROVIDER_COMPRESSION_XPRESS4K: u32 = 0;
    pub const FILE_PROVIDER_COMPRESSION_LZX: u32 = 1;
    pub const FILE_PROVIDER_COMPRESSION_XPRESS8K: u32 = 2;
    pub const FILE_PROVIDER_COMPRESSION_XPRESS16K: u32 = 3;
    pub const FILE_PROVIDER_COMPRESSION_MAXIMUM: u32 = 4;
    pub const FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE: u32 = 1;
    pub const CONTAINER_VOLUME_STATE_HOSTING_CONTAINER: u32 = 1;
    pub const CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT: u32 = 1;
    pub const CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT: u32 = 2;
    pub const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT: u32 = 4;
    pub const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT: u32 = 8;
    pub const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT: u32 = 16;
    pub const CONTAINER_ROOT_INFO_FLAG_BIND_ROOT: u32 = 32;
    pub const CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT: u32 = 64;
    pub const CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT: u32 = 128;
    pub const CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME: u32 = 256;
    pub const CONTAINER_ROOT_INFO_VALID_FLAGS: u32 = 511;
    pub const PROJFS_PROTOCOL_VERSION: u32 = 3;
    pub const IOCTL_VOLUME_BASE: u32 = 86;
    pub const EFS_TRACKED_OFFSET_HEADER_FLAG: u32 = 1;
    pub const SPACES_TRACKED_OFFSET_HEADER_FLAG: u32 = 2;
    pub const SCARD_ATR_LENGTH: u32 = 33;
    pub const SCARD_PROTOCOL_UNDEFINED: u32 = 0;
    pub const SCARD_PROTOCOL_T0: u32 = 1;
    pub const SCARD_PROTOCOL_T1: u32 = 2;
    pub const SCARD_PROTOCOL_RAW: u32 = 65536;
    pub const SCARD_PROTOCOL_Tx: u32 = 3;
    pub const SCARD_PROTOCOL_DEFAULT: u32 = 2147483648;
    pub const SCARD_PROTOCOL_OPTIMAL: u32 = 0;
    pub const SCARD_POWER_DOWN: u32 = 0;
    pub const SCARD_COLD_RESET: u32 = 1;
    pub const SCARD_WARM_RESET: u32 = 2;
    pub const MAXIMUM_ATTR_STRING_LENGTH: u32 = 32;
    pub const MAXIMUM_SMARTCARD_READERS: u32 = 10;
    pub const SCARD_CLASS_VENDOR_INFO: u32 = 1;
    pub const SCARD_CLASS_COMMUNICATIONS: u32 = 2;
    pub const SCARD_CLASS_PROTOCOL: u32 = 3;
    pub const SCARD_CLASS_POWER_MGMT: u32 = 4;
    pub const SCARD_CLASS_SECURITY: u32 = 5;
    pub const SCARD_CLASS_MECHANICAL: u32 = 6;
    pub const SCARD_CLASS_VENDOR_DEFINED: u32 = 7;
    pub const SCARD_CLASS_IFD_PROTOCOL: u32 = 8;
    pub const SCARD_CLASS_ICC_STATE: u32 = 9;
    pub const SCARD_CLASS_PERF: u32 = 32766;
    pub const SCARD_CLASS_SYSTEM: u32 = 32767;
    pub const SCARD_T0_HEADER_LENGTH: u32 = 7;
    pub const SCARD_T0_CMD_LENGTH: u32 = 5;
    pub const SCARD_T1_PROLOGUE_LENGTH: u32 = 3;
    pub const SCARD_T1_EPILOGUE_LENGTH: u32 = 2;
    pub const SCARD_T1_EPILOGUE_LENGTH_LRC: u32 = 1;
    pub const SCARD_T1_MAX_IFS: u32 = 254;
    pub const SCARD_UNKNOWN: u32 = 0;
    pub const SCARD_ABSENT: u32 = 1;
    pub const SCARD_PRESENT: u32 = 2;
    pub const SCARD_SWALLOWED: u32 = 3;
    pub const SCARD_POWERED: u32 = 4;
    pub const SCARD_NEGOTIABLE: u32 = 5;
    pub const SCARD_SPECIFIC: u32 = 6;
    pub const SCARD_READER_SWALLOWS: u32 = 1;
    pub const SCARD_READER_EJECTS: u32 = 2;
    pub const SCARD_READER_CONFISCATES: u32 = 4;
    pub const SCARD_READER_CONTACTLESS: u32 = 8;
    pub const SCARD_READER_TYPE_SERIAL: u32 = 1;
    pub const SCARD_READER_TYPE_PARALELL: u32 = 2;
    pub const SCARD_READER_TYPE_KEYBOARD: u32 = 4;
    pub const SCARD_READER_TYPE_SCSI: u32 = 8;
    pub const SCARD_READER_TYPE_IDE: u32 = 16;
    pub const SCARD_READER_TYPE_USB: u32 = 32;
    pub const SCARD_READER_TYPE_PCMCIA: u32 = 64;
    pub const SCARD_READER_TYPE_TPM: u32 = 128;
    pub const SCARD_READER_TYPE_NFC: u32 = 256;
    pub const SCARD_READER_TYPE_UICC: u32 = 512;
    pub const SCARD_READER_TYPE_NGC: u32 = 1024;
    pub const SCARD_READER_TYPE_EMBEDDEDSE: u32 = 2048;
    pub const SCARD_READER_TYPE_VENDOR: u32 = 240;
    pub const SCARD_SCOPE_USER: u32 = 0;
    pub const SCARD_SCOPE_TERMINAL: u32 = 1;
    pub const SCARD_SCOPE_SYSTEM: u32 = 2;
    pub const SCARD_PROVIDER_PRIMARY: u32 = 1;
    pub const SCARD_PROVIDER_CSP: u32 = 2;
    pub const SCARD_PROVIDER_KSP: u32 = 3;
    pub const SCARD_STATE_UNAWARE: u32 = 0;
    pub const SCARD_STATE_IGNORE: u32 = 1;
    pub const SCARD_STATE_CHANGED: u32 = 2;
    pub const SCARD_STATE_UNKNOWN: u32 = 4;
    pub const SCARD_STATE_UNAVAILABLE: u32 = 8;
    pub const SCARD_STATE_EMPTY: u32 = 16;
    pub const SCARD_STATE_PRESENT: u32 = 32;
    pub const SCARD_STATE_ATRMATCH: u32 = 64;
    pub const SCARD_STATE_EXCLUSIVE: u32 = 128;
    pub const SCARD_STATE_INUSE: u32 = 256;
    pub const SCARD_STATE_MUTE: u32 = 512;
    pub const SCARD_STATE_UNPOWERED: u32 = 1024;
    pub const SCARD_SHARE_EXCLUSIVE: u32 = 1;
    pub const SCARD_SHARE_SHARED: u32 = 2;
    pub const SCARD_SHARE_DIRECT: u32 = 3;
    pub const SCARD_LEAVE_CARD: u32 = 0;
    pub const SCARD_RESET_CARD: u32 = 1;
    pub const SCARD_UNPOWER_CARD: u32 = 2;
    pub const SCARD_EJECT_CARD: u32 = 3;
    pub const SC_DLG_MINIMAL_UI: u32 = 1;
    pub const SC_DLG_NO_UI: u32 = 2;
    pub const SC_DLG_FORCE_UI: u32 = 4;
    pub const SCERR_NOCARDNAME: u32 = 16384;
    pub const SCERR_NOGUIDS: u32 = 32768;
    pub const SCARD_AUDIT_CHV_FAILURE: u32 = 0;
    pub const SCARD_AUDIT_CHV_SUCCESS: u32 = 1;
    pub const MAXPROPPAGES: u32 = 100;
    pub const PSP_DEFAULT: u32 = 0;
    pub const PSP_DLGINDIRECT: u32 = 1;
    pub const PSP_USEHICON: u32 = 2;
    pub const PSP_USEICONID: u32 = 4;
    pub const PSP_USETITLE: u32 = 8;
    pub const PSP_RTLREADING: u32 = 16;
    pub const PSP_HASHELP: u32 = 32;
    pub const PSP_USEREFPARENT: u32 = 64;
    pub const PSP_USECALLBACK: u32 = 128;
    pub const PSP_PREMATURE: u32 = 1024;
    pub const PSP_HIDEHEADER: u32 = 2048;
    pub const PSP_USEHEADERTITLE: u32 = 4096;
    pub const PSP_USEHEADERSUBTITLE: u32 = 8192;
    pub const PSP_USEFUSIONCONTEXT: u32 = 16384;
    pub const PSPCB_ADDREF: u32 = 0;
    pub const PSPCB_RELEASE: u32 = 1;
    pub const PSPCB_CREATE: u32 = 2;
    pub const PSH_DEFAULT: u32 = 0;
    pub const PSH_PROPTITLE: u32 = 1;
    pub const PSH_USEHICON: u32 = 2;
    pub const PSH_USEICONID: u32 = 4;
    pub const PSH_PROPSHEETPAGE: u32 = 8;
    pub const PSH_WIZARDHASFINISH: u32 = 16;
    pub const PSH_WIZARD: u32 = 32;
    pub const PSH_USEPSTARTPAGE: u32 = 64;
    pub const PSH_NOAPPLYNOW: u32 = 128;
    pub const PSH_USECALLBACK: u32 = 256;
    pub const PSH_HASHELP: u32 = 512;
    pub const PSH_MODELESS: u32 = 1024;
    pub const PSH_RTLREADING: u32 = 2048;
    pub const PSH_WIZARDCONTEXTHELP: u32 = 4096;
    pub const PSH_WIZARD97: u32 = 16777216;
    pub const PSH_WATERMARK: u32 = 32768;
    pub const PSH_USEHBMWATERMARK: u32 = 65536;
    pub const PSH_USEHPLWATERMARK: u32 = 131072;
    pub const PSH_STRETCHWATERMARK: u32 = 262144;
    pub const PSH_HEADER: u32 = 524288;
    pub const PSH_USEHBMHEADER: u32 = 1048576;
    pub const PSH_USEPAGELANG: u32 = 2097152;
    pub const PSH_WIZARD_LITE: u32 = 4194304;
    pub const PSH_NOCONTEXTHELP: u32 = 33554432;
    pub const PSH_AEROWIZARD: u32 = 16384;
    pub const PSH_RESIZABLE: u32 = 67108864;
    pub const PSH_HEADERBITMAP: u32 = 134217728;
    pub const PSH_NOMARGIN: u32 = 268435456;
    pub const PSCB_INITIALIZED: u32 = 1;
    pub const PSCB_PRECREATE: u32 = 2;
    pub const PSCB_BUTTONPRESSED: u32 = 3;
    pub const PSN_FIRST: i32 = -200;
    pub const PSN_LAST: i32 = -299;
    pub const PSN_SETACTIVE: i32 = -200;
    pub const PSN_KILLACTIVE: i32 = -201;
    pub const PSN_APPLY: i32 = -202;
    pub const PSN_RESET: i32 = -203;
    pub const PSN_HELP: i32 = -205;
    pub const PSN_WIZBACK: i32 = -206;
    pub const PSN_WIZNEXT: i32 = -207;
    pub const PSN_WIZFINISH: i32 = -208;
    pub const PSN_QUERYCANCEL: i32 = -209;
    pub const PSN_GETOBJECT: i32 = -210;
    pub const PSN_TRANSLATEACCELERATOR: i32 = -212;
    pub const PSN_QUERYINITIALFOCUS: i32 = -213;
    pub const PSNRET_NOERROR: u32 = 0;
    pub const PSNRET_INVALID: u32 = 1;
    pub const PSNRET_INVALID_NOCHANGEPAGE: u32 = 2;
    pub const PSNRET_MESSAGEHANDLED: u32 = 3;
    pub const PSM_SETCURSEL: u32 = 1125;
    pub const PSM_REMOVEPAGE: u32 = 1126;
    pub const PSM_ADDPAGE: u32 = 1127;
    pub const PSM_CHANGED: u32 = 1128;
    pub const PSM_RESTARTWINDOWS: u32 = 1129;
    pub const PSM_REBOOTSYSTEM: u32 = 1130;
    pub const PSM_CANCELTOCLOSE: u32 = 1131;
    pub const PSM_QUERYSIBLINGS: u32 = 1132;
    pub const PSM_UNCHANGED: u32 = 1133;
    pub const PSM_APPLY: u32 = 1134;
    pub const PSM_SETTITLEA: u32 = 1135;
    pub const PSM_SETTITLEW: u32 = 1144;
    pub const PSM_SETTITLE: u32 = 1135;
    pub const PSM_SETWIZBUTTONS: u32 = 1136;
    pub const PSWIZB_BACK: u32 = 1;
    pub const PSWIZB_NEXT: u32 = 2;
    pub const PSWIZB_FINISH: u32 = 4;
    pub const PSWIZB_DISABLEDFINISH: u32 = 8;
    pub const PSWIZBF_ELEVATIONREQUIRED: u32 = 1;
    pub const PSWIZB_CANCEL: u32 = 16;
    pub const PSM_PRESSBUTTON: u32 = 1137;
    pub const PSBTN_BACK: u32 = 0;
    pub const PSBTN_NEXT: u32 = 1;
    pub const PSBTN_FINISH: u32 = 2;
    pub const PSBTN_OK: u32 = 3;
    pub const PSBTN_APPLYNOW: u32 = 4;
    pub const PSBTN_CANCEL: u32 = 5;
    pub const PSBTN_HELP: u32 = 6;
    pub const PSBTN_MAX: u32 = 6;
    pub const PSM_SETCURSELID: u32 = 1138;
    pub const PSM_SETFINISHTEXTA: u32 = 1139;
    pub const PSM_SETFINISHTEXTW: u32 = 1145;
    pub const PSM_SETFINISHTEXT: u32 = 1139;
    pub const PSM_GETTABCONTROL: u32 = 1140;
    pub const PSM_ISDIALOGMESSAGE: u32 = 1141;
    pub const PSM_GETCURRENTPAGEHWND: u32 = 1142;
    pub const PSM_INSERTPAGE: u32 = 1143;
    pub const PSM_SETHEADERTITLEA: u32 = 1149;
    pub const PSM_SETHEADERTITLEW: u32 = 1150;
    pub const PSM_SETHEADERTITLE: u32 = 1149;
    pub const PSM_SETHEADERSUBTITLEA: u32 = 1151;
    pub const PSM_SETHEADERSUBTITLEW: u32 = 1152;
    pub const PSM_SETHEADERSUBTITLE: u32 = 1151;
    pub const PSM_HWNDTOINDEX: u32 = 1153;
    pub const PSM_INDEXTOHWND: u32 = 1154;
    pub const PSM_PAGETOINDEX: u32 = 1155;
    pub const PSM_INDEXTOPAGE: u32 = 1156;
    pub const PSM_IDTOINDEX: u32 = 1157;
    pub const PSM_INDEXTOID: u32 = 1158;
    pub const PSM_GETRESULT: u32 = 1159;
    pub const PSM_RECALCPAGESIZES: u32 = 1160;
    pub const PSM_SETNEXTTEXTW: u32 = 1161;
    pub const PSM_SETNEXTTEXT: u32 = 1161;
    pub const PSWIZB_SHOW: u32 = 0;
    pub const PSWIZB_RESTORE: u32 = 1;
    pub const PSM_SHOWWIZBUTTONS: u32 = 1162;
    pub const PSM_ENABLEWIZBUTTONS: u32 = 1163;
    pub const PSM_SETBUTTONTEXTW: u32 = 1164;
    pub const PSM_SETBUTTONTEXT: u32 = 1164;
    pub const ID_PSRESTARTWINDOWS: u32 = 2;
    pub const ID_PSREBOOTSYSTEM: u32 = 3;
    pub const WIZ_CXDLG: u32 = 276;
    pub const WIZ_CYDLG: u32 = 140;
    pub const WIZ_CXBMP: u32 = 80;
    pub const WIZ_BODYX: u32 = 92;
    pub const WIZ_BODYCX: u32 = 184;
    pub const PROP_SM_CXDLG: u32 = 212;
    pub const PROP_SM_CYDLG: u32 = 188;
    pub const PROP_MED_CXDLG: u32 = 227;
    pub const PROP_MED_CYDLG: u32 = 215;
    pub const PROP_LG_CXDLG: u32 = 252;
    pub const PROP_LG_CYDLG: u32 = 218;
    pub const DSPRINT_PUBLISH: u32 = 1;
    pub const DSPRINT_UPDATE: u32 = 2;
    pub const DSPRINT_UNPUBLISH: u32 = 4;
    pub const DSPRINT_REPUBLISH: u32 = 8;
    pub const DSPRINT_PENDING: u32 = 2147483648;
    pub const PRINTER_CONTROL_PAUSE: u32 = 1;
    pub const PRINTER_CONTROL_RESUME: u32 = 2;
    pub const PRINTER_CONTROL_PURGE: u32 = 3;
    pub const PRINTER_CONTROL_SET_STATUS: u32 = 4;
    pub const PRINTER_STATUS_PAUSED: u32 = 1;
    pub const PRINTER_STATUS_ERROR: u32 = 2;
    pub const PRINTER_STATUS_PENDING_DELETION: u32 = 4;
    pub const PRINTER_STATUS_PAPER_JAM: u32 = 8;
    pub const PRINTER_STATUS_PAPER_OUT: u32 = 16;
    pub const PRINTER_STATUS_MANUAL_FEED: u32 = 32;
    pub const PRINTER_STATUS_PAPER_PROBLEM: u32 = 64;
    pub const PRINTER_STATUS_OFFLINE: u32 = 128;
    pub const PRINTER_STATUS_IO_ACTIVE: u32 = 256;
    pub const PRINTER_STATUS_BUSY: u32 = 512;
    pub const PRINTER_STATUS_PRINTING: u32 = 1024;
    pub const PRINTER_STATUS_OUTPUT_BIN_FULL: u32 = 2048;
    pub const PRINTER_STATUS_NOT_AVAILABLE: u32 = 4096;
    pub const PRINTER_STATUS_WAITING: u32 = 8192;
    pub const PRINTER_STATUS_PROCESSING: u32 = 16384;
    pub const PRINTER_STATUS_INITIALIZING: u32 = 32768;
    pub const PRINTER_STATUS_WARMING_UP: u32 = 65536;
    pub const PRINTER_STATUS_TONER_LOW: u32 = 131072;
    pub const PRINTER_STATUS_NO_TONER: u32 = 262144;
    pub const PRINTER_STATUS_PAGE_PUNT: u32 = 524288;
    pub const PRINTER_STATUS_USER_INTERVENTION: u32 = 1048576;
    pub const PRINTER_STATUS_OUT_OF_MEMORY: u32 = 2097152;
    pub const PRINTER_STATUS_DOOR_OPEN: u32 = 4194304;
    pub const PRINTER_STATUS_SERVER_UNKNOWN: u32 = 8388608;
    pub const PRINTER_STATUS_POWER_SAVE: u32 = 16777216;
    pub const PRINTER_STATUS_SERVER_OFFLINE: u32 = 33554432;
    pub const PRINTER_STATUS_DRIVER_UPDATE_NEEDED: u32 = 67108864;
    pub const PRINTER_ATTRIBUTE_QUEUED: u32 = 1;
    pub const PRINTER_ATTRIBUTE_DIRECT: u32 = 2;
    pub const PRINTER_ATTRIBUTE_DEFAULT: u32 = 4;
    pub const PRINTER_ATTRIBUTE_SHARED: u32 = 8;
    pub const PRINTER_ATTRIBUTE_NETWORK: u32 = 16;
    pub const PRINTER_ATTRIBUTE_HIDDEN: u32 = 32;
    pub const PRINTER_ATTRIBUTE_LOCAL: u32 = 64;
    pub const PRINTER_ATTRIBUTE_ENABLE_DEVQ: u32 = 128;
    pub const PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS: u32 = 256;
    pub const PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST: u32 = 512;
    pub const PRINTER_ATTRIBUTE_WORK_OFFLINE: u32 = 1024;
    pub const PRINTER_ATTRIBUTE_ENABLE_BIDI: u32 = 2048;
    pub const PRINTER_ATTRIBUTE_RAW_ONLY: u32 = 4096;
    pub const PRINTER_ATTRIBUTE_PUBLISHED: u32 = 8192;
    pub const PRINTER_ATTRIBUTE_FAX: u32 = 16384;
    pub const PRINTER_ATTRIBUTE_TS: u32 = 32768;
    pub const PRINTER_ATTRIBUTE_PUSHED_USER: u32 = 131072;
    pub const PRINTER_ATTRIBUTE_PUSHED_MACHINE: u32 = 262144;
    pub const PRINTER_ATTRIBUTE_MACHINE: u32 = 524288;
    pub const PRINTER_ATTRIBUTE_FRIENDLY_NAME: u32 = 1048576;
    pub const PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER: u32 = 2097152;
    pub const PRINTER_ATTRIBUTE_PER_USER: u32 = 4194304;
    pub const PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD: u32 = 8388608;
    pub const NO_PRIORITY: u32 = 0;
    pub const MAX_PRIORITY: u32 = 99;
    pub const MIN_PRIORITY: u32 = 1;
    pub const DEF_PRIORITY: u32 = 1;
    pub const JOB_CONTROL_PAUSE: u32 = 1;
    pub const JOB_CONTROL_RESUME: u32 = 2;
    pub const JOB_CONTROL_CANCEL: u32 = 3;
    pub const JOB_CONTROL_RESTART: u32 = 4;
    pub const JOB_CONTROL_DELETE: u32 = 5;
    pub const JOB_CONTROL_SENT_TO_PRINTER: u32 = 6;
    pub const JOB_CONTROL_LAST_PAGE_EJECTED: u32 = 7;
    pub const JOB_CONTROL_RETAIN: u32 = 8;
    pub const JOB_CONTROL_RELEASE: u32 = 9;
    pub const JOB_STATUS_PAUSED: u32 = 1;
    pub const JOB_STATUS_ERROR: u32 = 2;
    pub const JOB_STATUS_DELETING: u32 = 4;
    pub const JOB_STATUS_SPOOLING: u32 = 8;
    pub const JOB_STATUS_PRINTING: u32 = 16;
    pub const JOB_STATUS_OFFLINE: u32 = 32;
    pub const JOB_STATUS_PAPEROUT: u32 = 64;
    pub const JOB_STATUS_PRINTED: u32 = 128;
    pub const JOB_STATUS_DELETED: u32 = 256;
    pub const JOB_STATUS_BLOCKED_DEVQ: u32 = 512;
    pub const JOB_STATUS_USER_INTERVENTION: u32 = 1024;
    pub const JOB_STATUS_RESTART: u32 = 2048;
    pub const JOB_STATUS_COMPLETE: u32 = 4096;
    pub const JOB_STATUS_RETAINED: u32 = 8192;
    pub const JOB_STATUS_RENDERING_LOCALLY: u32 = 16384;
    pub const JOB_POSITION_UNSPECIFIED: u32 = 0;
    pub const PRINTER_DRIVER_PACKAGE_AWARE: u32 = 1;
    pub const PRINTER_DRIVER_XPS: u32 = 2;
    pub const PRINTER_DRIVER_SANDBOX_ENABLED: u32 = 4;
    pub const PRINTER_DRIVER_CLASS: u32 = 8;
    pub const PRINTER_DRIVER_DERIVED: u32 = 16;
    pub const PRINTER_DRIVER_NOT_SHAREABLE: u32 = 32;
    pub const PRINTER_DRIVER_CATEGORY_FAX: u32 = 64;
    pub const PRINTER_DRIVER_CATEGORY_FILE: u32 = 128;
    pub const PRINTER_DRIVER_CATEGORY_VIRTUAL: u32 = 256;
    pub const PRINTER_DRIVER_CATEGORY_SERVICE: u32 = 512;
    pub const PRINTER_DRIVER_SOFT_RESET_REQUIRED: u32 = 1024;
    pub const PRINTER_DRIVER_SANDBOX_DISABLED: u32 = 2048;
    pub const PRINTER_DRIVER_CATEGORY_3D: u32 = 4096;
    pub const PRINTER_DRIVER_CATEGORY_CLOUD: u32 = 8192;
    pub const DRIVER_KERNELMODE: u32 = 1;
    pub const DRIVER_USERMODE: u32 = 2;
    pub const DPD_DELETE_UNUSED_FILES: u32 = 1;
    pub const DPD_DELETE_SPECIFIC_VERSION: u32 = 2;
    pub const DPD_DELETE_ALL_FILES: u32 = 4;
    pub const APD_STRICT_UPGRADE: u32 = 1;
    pub const APD_STRICT_DOWNGRADE: u32 = 2;
    pub const APD_COPY_ALL_FILES: u32 = 4;
    pub const APD_COPY_NEW_FILES: u32 = 8;
    pub const APD_COPY_FROM_DIRECTORY: u32 = 16;
    pub const STRING_NONE: u32 = 1;
    pub const STRING_MUIDLL: u32 = 2;
    pub const STRING_LANGPAIR: u32 = 4;
    pub const MAX_FORM_KEYWORD_LENGTH: u32 = 64;
    pub const DI_CHANNEL: u32 = 1;
    pub const DI_READ_SPOOL_JOB: u32 = 3;
    pub const DI_MEMORYMAP_WRITE: u32 = 1;
    pub const FORM_USER: u32 = 0;
    pub const FORM_BUILTIN: u32 = 1;
    pub const FORM_PRINTER: u32 = 2;
    pub const NORMAL_PRINT: u32 = 0;
    pub const REVERSE_PRINT: u32 = 1;
    pub const PPCAPS_RIGHT_THEN_DOWN: u32 = 1;
    pub const PPCAPS_DOWN_THEN_RIGHT: u32 = 2;
    pub const PPCAPS_LEFT_THEN_DOWN: u32 = 4;
    pub const PPCAPS_DOWN_THEN_LEFT: u32 = 8;
    pub const PPCAPS_BORDER_PRINT: u32 = 1;
    pub const PPCAPS_BOOKLET_EDGE: u32 = 1;
    pub const PPCAPS_REVERSE_PAGES_FOR_REVERSE_DUPLEX: u32 = 1;
    pub const PPCAPS_DONT_SEND_EXTRA_PAGES_FOR_DUPLEX: u32 = 2;
    pub const PPCAPS_SQUARE_SCALING: u32 = 1;
    pub const PORT_TYPE_WRITE: u32 = 1;
    pub const PORT_TYPE_READ: u32 = 2;
    pub const PORT_TYPE_REDIRECTED: u32 = 4;
    pub const PORT_TYPE_NET_ATTACHED: u32 = 8;
    pub const PORT_STATUS_TYPE_ERROR: u32 = 1;
    pub const PORT_STATUS_TYPE_WARNING: u32 = 2;
    pub const PORT_STATUS_TYPE_INFO: u32 = 3;
    pub const PORT_STATUS_OFFLINE: u32 = 1;
    pub const PORT_STATUS_PAPER_JAM: u32 = 2;
    pub const PORT_STATUS_PAPER_OUT: u32 = 3;
    pub const PORT_STATUS_OUTPUT_BIN_FULL: u32 = 4;
    pub const PORT_STATUS_PAPER_PROBLEM: u32 = 5;
    pub const PORT_STATUS_NO_TONER: u32 = 6;
    pub const PORT_STATUS_DOOR_OPEN: u32 = 7;
    pub const PORT_STATUS_USER_INTERVENTION: u32 = 8;
    pub const PORT_STATUS_OUT_OF_MEMORY: u32 = 9;
    pub const PORT_STATUS_TONER_LOW: u32 = 10;
    pub const PORT_STATUS_WARMING_UP: u32 = 11;
    pub const PORT_STATUS_POWER_SAVE: u32 = 12;
    pub const PRINTER_ENUM_DEFAULT: u32 = 1;
    pub const PRINTER_ENUM_LOCAL: u32 = 2;
    pub const PRINTER_ENUM_CONNECTIONS: u32 = 4;
    pub const PRINTER_ENUM_FAVORITE: u32 = 4;
    pub const PRINTER_ENUM_NAME: u32 = 8;
    pub const PRINTER_ENUM_REMOTE: u32 = 16;
    pub const PRINTER_ENUM_SHARED: u32 = 32;
    pub const PRINTER_ENUM_NETWORK: u32 = 64;
    pub const PRINTER_ENUM_EXPAND: u32 = 16384;
    pub const PRINTER_ENUM_CONTAINER: u32 = 32768;
    pub const PRINTER_ENUM_ICONMASK: u32 = 16711680;
    pub const PRINTER_ENUM_ICON1: u32 = 65536;
    pub const PRINTER_ENUM_ICON2: u32 = 131072;
    pub const PRINTER_ENUM_ICON3: u32 = 262144;
    pub const PRINTER_ENUM_ICON4: u32 = 524288;
    pub const PRINTER_ENUM_ICON5: u32 = 1048576;
    pub const PRINTER_ENUM_ICON6: u32 = 2097152;
    pub const PRINTER_ENUM_ICON7: u32 = 4194304;
    pub const PRINTER_ENUM_ICON8: u32 = 8388608;
    pub const PRINTER_ENUM_HIDE: u32 = 16777216;
    pub const PRINTER_ENUM_CATEGORY_ALL: u32 = 33554432;
    pub const PRINTER_ENUM_CATEGORY_3D: u32 = 67108864;
    pub const SPOOL_FILE_PERSISTENT: u32 = 1;
    pub const SPOOL_FILE_TEMPORARY: u32 = 2;
    pub const PRINTER_NOTIFY_TYPE: u32 = 0;
    pub const JOB_NOTIFY_TYPE: u32 = 1;
    pub const SERVER_NOTIFY_TYPE: u32 = 2;
    pub const PRINTER_NOTIFY_FIELD_SERVER_NAME: u32 = 0;
    pub const PRINTER_NOTIFY_FIELD_PRINTER_NAME: u32 = 1;
    pub const PRINTER_NOTIFY_FIELD_SHARE_NAME: u32 = 2;
    pub const PRINTER_NOTIFY_FIELD_PORT_NAME: u32 = 3;
    pub const PRINTER_NOTIFY_FIELD_DRIVER_NAME: u32 = 4;
    pub const PRINTER_NOTIFY_FIELD_COMMENT: u32 = 5;
    pub const PRINTER_NOTIFY_FIELD_LOCATION: u32 = 6;
    pub const PRINTER_NOTIFY_FIELD_DEVMODE: u32 = 7;
    pub const PRINTER_NOTIFY_FIELD_SEPFILE: u32 = 8;
    pub const PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR: u32 = 9;
    pub const PRINTER_NOTIFY_FIELD_PARAMETERS: u32 = 10;
    pub const PRINTER_NOTIFY_FIELD_DATATYPE: u32 = 11;
    pub const PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR: u32 = 12;
    pub const PRINTER_NOTIFY_FIELD_ATTRIBUTES: u32 = 13;
    pub const PRINTER_NOTIFY_FIELD_PRIORITY: u32 = 14;
    pub const PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY: u32 = 15;
    pub const PRINTER_NOTIFY_FIELD_START_TIME: u32 = 16;
    pub const PRINTER_NOTIFY_FIELD_UNTIL_TIME: u32 = 17;
    pub const PRINTER_NOTIFY_FIELD_STATUS: u32 = 18;
    pub const PRINTER_NOTIFY_FIELD_STATUS_STRING: u32 = 19;
    pub const PRINTER_NOTIFY_FIELD_CJOBS: u32 = 20;
    pub const PRINTER_NOTIFY_FIELD_AVERAGE_PPM: u32 = 21;
    pub const PRINTER_NOTIFY_FIELD_TOTAL_PAGES: u32 = 22;
    pub const PRINTER_NOTIFY_FIELD_PAGES_PRINTED: u32 = 23;
    pub const PRINTER_NOTIFY_FIELD_TOTAL_BYTES: u32 = 24;
    pub const PRINTER_NOTIFY_FIELD_BYTES_PRINTED: u32 = 25;
    pub const PRINTER_NOTIFY_FIELD_OBJECT_GUID: u32 = 26;
    pub const PRINTER_NOTIFY_FIELD_FRIENDLY_NAME: u32 = 27;
    pub const PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING: u32 = 28;
    pub const JOB_NOTIFY_FIELD_PRINTER_NAME: u32 = 0;
    pub const JOB_NOTIFY_FIELD_MACHINE_NAME: u32 = 1;
    pub const JOB_NOTIFY_FIELD_PORT_NAME: u32 = 2;
    pub const JOB_NOTIFY_FIELD_USER_NAME: u32 = 3;
    pub const JOB_NOTIFY_FIELD_NOTIFY_NAME: u32 = 4;
    pub const JOB_NOTIFY_FIELD_DATATYPE: u32 = 5;
    pub const JOB_NOTIFY_FIELD_PRINT_PROCESSOR: u32 = 6;
    pub const JOB_NOTIFY_FIELD_PARAMETERS: u32 = 7;
    pub const JOB_NOTIFY_FIELD_DRIVER_NAME: u32 = 8;
    pub const JOB_NOTIFY_FIELD_DEVMODE: u32 = 9;
    pub const JOB_NOTIFY_FIELD_STATUS: u32 = 10;
    pub const JOB_NOTIFY_FIELD_STATUS_STRING: u32 = 11;
    pub const JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR: u32 = 12;
    pub const JOB_NOTIFY_FIELD_DOCUMENT: u32 = 13;
    pub const JOB_NOTIFY_FIELD_PRIORITY: u32 = 14;
    pub const JOB_NOTIFY_FIELD_POSITION: u32 = 15;
    pub const JOB_NOTIFY_FIELD_SUBMITTED: u32 = 16;
    pub const JOB_NOTIFY_FIELD_START_TIME: u32 = 17;
    pub const JOB_NOTIFY_FIELD_UNTIL_TIME: u32 = 18;
    pub const JOB_NOTIFY_FIELD_TIME: u32 = 19;
    pub const JOB_NOTIFY_FIELD_TOTAL_PAGES: u32 = 20;
    pub const JOB_NOTIFY_FIELD_PAGES_PRINTED: u32 = 21;
    pub const JOB_NOTIFY_FIELD_TOTAL_BYTES: u32 = 22;
    pub const JOB_NOTIFY_FIELD_BYTES_PRINTED: u32 = 23;
    pub const JOB_NOTIFY_FIELD_REMOTE_JOB_ID: u32 = 24;
    pub const SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP: u32 = 0;
    pub const PRINTER_NOTIFY_CATEGORY_ALL: u32 = 4096;
    pub const PRINTER_NOTIFY_CATEGORY_3D: u32 = 8192;
    pub const PRINTER_NOTIFY_OPTIONS_REFRESH: u32 = 1;
    pub const PRINTER_NOTIFY_INFO_DISCARDED: u32 = 1;
    pub const BIDI_ACTION_ENUM_SCHEMA: &[u8; 11usize] = b"EnumSchema\0";
    pub const BIDI_ACTION_GET: &[u8; 4usize] = b"Get\0";
    pub const BIDI_ACTION_SET: &[u8; 4usize] = b"Set\0";
    pub const BIDI_ACTION_GET_ALL: &[u8; 7usize] = b"GetAll\0";
    pub const BIDI_ACTION_GET_WITH_ARGUMENT: &[u8; 16usize] = b"GetWithArgument\0";
    pub const BIDI_ACCESS_ADMINISTRATOR: u32 = 1;
    pub const BIDI_ACCESS_USER: u32 = 2;
    pub const ERROR_BIDI_STATUS_OK: u32 = 0;
    pub const ERROR_BIDI_NOT_SUPPORTED: u32 = 50;
    pub const ERROR_BIDI_ERROR_BASE: u32 = 13000;
    pub const ERROR_BIDI_STATUS_WARNING: u32 = 13001;
    pub const ERROR_BIDI_SCHEMA_READ_ONLY: u32 = 13002;
    pub const ERROR_BIDI_SERVER_OFFLINE: u32 = 13003;
    pub const ERROR_BIDI_DEVICE_OFFLINE: u32 = 13004;
    pub const ERROR_BIDI_SCHEMA_NOT_SUPPORTED: u32 = 13005;
    pub const ERROR_BIDI_SET_DIFFERENT_TYPE: u32 = 13006;
    pub const ERROR_BIDI_SET_MULTIPLE_SCHEMAPATH: u32 = 13007;
    pub const ERROR_BIDI_SET_INVALID_SCHEMAPATH: u32 = 13008;
    pub const ERROR_BIDI_SET_UNKNOWN_FAILURE: u32 = 13009;
    pub const ERROR_BIDI_SCHEMA_WRITE_ONLY: u32 = 13010;
    pub const ERROR_BIDI_GET_REQUIRES_ARGUMENT: u32 = 13011;
    pub const ERROR_BIDI_GET_ARGUMENT_NOT_SUPPORTED: u32 = 13012;
    pub const ERROR_BIDI_GET_MISSING_ARGUMENT: u32 = 13013;
    pub const ERROR_BIDI_DEVICE_CONFIG_UNCHANGED: u32 = 13014;
    pub const ERROR_BIDI_NO_LOCALIZED_RESOURCES: u32 = 13015;
    pub const ERROR_BIDI_NO_BIDI_SCHEMA_EXTENSIONS: u32 = 13016;
    pub const ERROR_BIDI_UNSUPPORTED_CLIENT_LANGUAGE: u32 = 13017;
    pub const ERROR_BIDI_UNSUPPORTED_RESOURCE_FORMAT: u32 = 13018;
    pub const PRINTER_CHANGE_ADD_PRINTER: u32 = 1;
    pub const PRINTER_CHANGE_SET_PRINTER: u32 = 2;
    pub const PRINTER_CHANGE_DELETE_PRINTER: u32 = 4;
    pub const PRINTER_CHANGE_FAILED_CONNECTION_PRINTER: u32 = 8;
    pub const PRINTER_CHANGE_PRINTER: u32 = 255;
    pub const PRINTER_CHANGE_ADD_JOB: u32 = 256;
    pub const PRINTER_CHANGE_SET_JOB: u32 = 512;
    pub const PRINTER_CHANGE_DELETE_JOB: u32 = 1024;
    pub const PRINTER_CHANGE_WRITE_JOB: u32 = 2048;
    pub const PRINTER_CHANGE_JOB: u32 = 65280;
    pub const PRINTER_CHANGE_ADD_FORM: u32 = 65536;
    pub const PRINTER_CHANGE_SET_FORM: u32 = 131072;
    pub const PRINTER_CHANGE_DELETE_FORM: u32 = 262144;
    pub const PRINTER_CHANGE_FORM: u32 = 458752;
    pub const PRINTER_CHANGE_ADD_PORT: u32 = 1048576;
    pub const PRINTER_CHANGE_CONFIGURE_PORT: u32 = 2097152;
    pub const PRINTER_CHANGE_DELETE_PORT: u32 = 4194304;
    pub const PRINTER_CHANGE_PORT: u32 = 7340032;
    pub const PRINTER_CHANGE_ADD_PRINT_PROCESSOR: u32 = 16777216;
    pub const PRINTER_CHANGE_DELETE_PRINT_PROCESSOR: u32 = 67108864;
    pub const PRINTER_CHANGE_PRINT_PROCESSOR: u32 = 117440512;
    pub const PRINTER_CHANGE_SERVER: u32 = 134217728;
    pub const PRINTER_CHANGE_ADD_PRINTER_DRIVER: u32 = 268435456;
    pub const PRINTER_CHANGE_SET_PRINTER_DRIVER: u32 = 536870912;
    pub const PRINTER_CHANGE_DELETE_PRINTER_DRIVER: u32 = 1073741824;
    pub const PRINTER_CHANGE_PRINTER_DRIVER: u32 = 1879048192;
    pub const PRINTER_CHANGE_TIMEOUT: u32 = 2147483648;
    pub const PRINTER_CHANGE_ALL: u32 = 2138570751;
    pub const PRINTER_ERROR_INFORMATION: u32 = 2147483648;
    pub const PRINTER_ERROR_WARNING: u32 = 1073741824;
    pub const PRINTER_ERROR_SEVERE: u32 = 536870912;
    pub const PRINTER_ERROR_OUTOFPAPER: u32 = 1;
    pub const PRINTER_ERROR_JAM: u32 = 2;
    pub const PRINTER_ERROR_OUTOFTONER: u32 = 4;
    pub const SPLREG_PRINT_DRIVER_ISOLATION_GROUPS_SEPARATOR: u8 = 92u8;
    pub const SERVER_ACCESS_ADMINISTER: u32 = 1;
    pub const SERVER_ACCESS_ENUMERATE: u32 = 2;
    pub const PRINTER_ACCESS_ADMINISTER: u32 = 4;
    pub const PRINTER_ACCESS_USE: u32 = 8;
    pub const JOB_ACCESS_ADMINISTER: u32 = 16;
    pub const JOB_ACCESS_READ: u32 = 32;
    pub const PRINTER_ACCESS_MANAGE_LIMITED: u32 = 64;
    pub const SERVER_ALL_ACCESS: u32 = 983043;
    pub const SERVER_READ: u32 = 131074;
    pub const SERVER_WRITE: u32 = 131075;
    pub const SERVER_EXECUTE: u32 = 131074;
    pub const PRINTER_ALL_ACCESS: u32 = 983052;
    pub const PRINTER_READ: u32 = 131080;
    pub const PRINTER_WRITE: u32 = 131080;
    pub const PRINTER_EXECUTE: u32 = 131080;
    pub const JOB_ALL_ACCESS: u32 = 983088;
    pub const JOB_READ: u32 = 131104;
    pub const JOB_WRITE: u32 = 131088;
    pub const JOB_EXECUTE: u32 = 131088;
    pub const PRINTER_CONNECTION_MISMATCH: u32 = 32;
    pub const PRINTER_CONNECTION_NO_UI: u32 = 64;
    pub const IPDFP_COPY_ALL_FILES: u32 = 1;
    pub const UPDP_SILENT_UPLOAD: u32 = 1;
    pub const UPDP_UPLOAD_ALWAYS: u32 = 2;
    pub const UPDP_CHECK_DRIVERSTORE: u32 = 4;
    pub const MS_PRINT_JOB_OUTPUT_FILE: &[u8; 21usize] = b"MsPrintJobOutputFile\0";
    pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
    pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
    pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
    pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
    pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
    pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
    pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
    pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
    pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
    pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
    pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
    pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
    pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
    pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
    pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
    pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
    pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
    pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
    pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
    pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
    pub const CHAR_BIT: u32 = 8;
    pub const SCHAR_MIN: i32 = -128;
    pub const SCHAR_MAX: u32 = 127;
    pub const UCHAR_MAX: u32 = 255;
    pub const CHAR_MIN: i32 = -128;
    pub const CHAR_MAX: u32 = 127;
    pub const MB_LEN_MAX: u32 = 5;
    pub const SHRT_MIN: i32 = -32768;
    pub const SHRT_MAX: u32 = 32767;
    pub const USHRT_MAX: u32 = 65535;
    pub const INT_MIN: i32 = -2147483648;
    pub const INT_MAX: u32 = 2147483647;
    pub const UINT_MAX: u32 = 4294967295;
    pub const LONG_MIN: i32 = -2147483648;
    pub const LONG_MAX: u32 = 2147483647;
    pub const ULONG_MAX: u32 = 4294967295;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const EXIT_FAILURE: u32 = 1;
    pub const _WRITE_ABORT_MSG: u32 = 1;
    pub const _CALL_REPORTFAULT: u32 = 2;
    pub const _OUT_TO_DEFAULT: u32 = 0;
    pub const _OUT_TO_STDERR: u32 = 1;
    pub const _OUT_TO_MSGBOX: u32 = 2;
    pub const _REPORT_ERRMODE: u32 = 3;
    pub const RAND_MAX: u32 = 32767;
    pub const _CVTBUFSIZE: u32 = 349;
    pub const _MAX_PATH: u32 = 260;
    pub const _MAX_DRIVE: u32 = 3;
    pub const _MAX_DIR: u32 = 256;
    pub const _MAX_FNAME: u32 = 256;
    pub const _MAX_EXT: u32 = 256;
    pub const _MAX_ENV: u32 = 32767;
    pub const _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
    pub const COM_RIGHTS_EXECUTE: u32 = 1;
    pub const COM_RIGHTS_EXECUTE_LOCAL: u32 = 2;
    pub const COM_RIGHTS_EXECUTE_REMOTE: u32 = 4;
    pub const COM_RIGHTS_ACTIVATE_LOCAL: u32 = 8;
    pub const COM_RIGHTS_ACTIVATE_REMOTE: u32 = 16;
    pub const COM_RIGHTS_RESERVED1: u32 = 32;
    pub const COM_RIGHTS_RESERVED2: u32 = 64;
    pub const CWMO_MAX_HANDLES: u32 = 56;
    pub const FADF_AUTO: u32 = 1;
    pub const FADF_STATIC: u32 = 2;
    pub const FADF_EMBEDDED: u32 = 4;
    pub const FADF_FIXEDSIZE: u32 = 16;
    pub const FADF_RECORD: u32 = 32;
    pub const FADF_HAVEIID: u32 = 64;
    pub const FADF_HAVEVARTYPE: u32 = 128;
    pub const FADF_BSTR: u32 = 256;
    pub const FADF_UNKNOWN: u32 = 512;
    pub const FADF_DISPATCH: u32 = 1024;
    pub const FADF_VARIANT: u32 = 2048;
    pub const FADF_RESERVED: u32 = 61448;
    pub const PARAMFLAG_NONE: u32 = 0;
    pub const PARAMFLAG_FIN: u32 = 1;
    pub const PARAMFLAG_FOUT: u32 = 2;
    pub const PARAMFLAG_FLCID: u32 = 4;
    pub const PARAMFLAG_FRETVAL: u32 = 8;
    pub const PARAMFLAG_FOPT: u32 = 16;
    pub const PARAMFLAG_FHASDEFAULT: u32 = 32;
    pub const PARAMFLAG_FHASCUSTDATA: u32 = 64;
    pub const IDLFLAG_NONE: u32 = 0;
    pub const IDLFLAG_FIN: u32 = 1;
    pub const IDLFLAG_FOUT: u32 = 2;
    pub const IDLFLAG_FLCID: u32 = 4;
    pub const IDLFLAG_FRETVAL: u32 = 8;
    pub const IMPLTYPEFLAG_FDEFAULT: u32 = 1;
    pub const IMPLTYPEFLAG_FSOURCE: u32 = 2;
    pub const IMPLTYPEFLAG_FRESTRICTED: u32 = 4;
    pub const IMPLTYPEFLAG_FDEFAULTVTABLE: u32 = 8;
    pub const DISPID_UNKNOWN: i32 = -1;
    pub const DISPID_VALUE: u32 = 0;
    pub const DISPID_PROPERTYPUT: i32 = -3;
    pub const DISPID_NEWENUM: i32 = -4;
    pub const DISPID_EVALUATE: i32 = -5;
    pub const DISPID_CONSTRUCTOR: i32 = -6;
    pub const DISPID_DESTRUCTOR: i32 = -7;
    pub const DISPID_COLLECT: i32 = -8;
    pub const PROPSETFLAG_DEFAULT: u32 = 0;
    pub const PROPSETFLAG_NONSIMPLE: u32 = 1;
    pub const PROPSETFLAG_ANSI: u32 = 2;
    pub const PROPSETFLAG_UNBUFFERED: u32 = 4;
    pub const PROPSETFLAG_CASE_SENSITIVE: u32 = 8;
    pub const PROPSET_BEHAVIOR_CASE_SENSITIVE: u32 = 1;
    pub const PID_DICTIONARY: u32 = 0;
    pub const PID_CODEPAGE: u32 = 1;
    pub const PID_FIRST_USABLE: u32 = 2;
    pub const PID_FIRST_NAME_DEFAULT: u32 = 4095;
    pub const PID_LOCALE: u32 = 2147483648;
    pub const PID_MODIFY_TIME: u32 = 2147483649;
    pub const PID_SECURITY: u32 = 2147483650;
    pub const PID_BEHAVIOR: u32 = 2147483651;
    pub const PID_ILLEGAL: u32 = 4294967295;
    pub const PID_MIN_READONLY: u32 = 2147483648;
    pub const PID_MAX_READONLY: u32 = 3221225471;
    pub const PRSPEC_INVALID: u32 = 4294967295;
    pub const PRSPEC_LPWSTR: u32 = 0;
    pub const PRSPEC_PROPID: u32 = 1;
    pub const PROPSETHDR_OSVERSION_UNKNOWN: u32 = 4294967295;
    pub const CWCSTORAGENAME: u32 = 32;
    pub const STGM_DIRECT: u32 = 0;
    pub const STGM_TRANSACTED: u32 = 65536;
    pub const STGM_SIMPLE: u32 = 134217728;
    pub const STGM_READ: u32 = 0;
    pub const STGM_WRITE: u32 = 1;
    pub const STGM_READWRITE: u32 = 2;
    pub const STGM_SHARE_DENY_NONE: u32 = 64;
    pub const STGM_SHARE_DENY_READ: u32 = 48;
    pub const STGM_SHARE_DENY_WRITE: u32 = 32;
    pub const STGM_SHARE_EXCLUSIVE: u32 = 16;
    pub const STGM_PRIORITY: u32 = 262144;
    pub const STGM_DELETEONRELEASE: u32 = 67108864;
    pub const STGM_NOSCRATCH: u32 = 1048576;
    pub const STGM_CREATE: u32 = 4096;
    pub const STGM_CONVERT: u32 = 131072;
    pub const STGM_FAILIFTHERE: u32 = 0;
    pub const STGM_NOSNAPSHOT: u32 = 2097152;
    pub const STGM_DIRECT_SWMR: u32 = 4194304;
    pub const STGFMT_STORAGE: u32 = 0;
    pub const STGFMT_NATIVE: u32 = 1;
    pub const STGFMT_FILE: u32 = 3;
    pub const STGFMT_ANY: u32 = 4;
    pub const STGFMT_DOCFILE: u32 = 5;
    pub const STGFMT_DOCUMENT: u32 = 0;
    pub const STGOPTIONS_VERSION: u32 = 2;
    pub const CCH_MAX_PROPSTG_NAME: u32 = 31;
    pub const MARSHALINTERFACE_MIN: u32 = 500;
    pub const ASYNC_MODE_COMPATIBILITY: u32 = 1;
    pub const ASYNC_MODE_DEFAULT: u32 = 0;
    pub const STGTY_REPEAT: u32 = 256;
    pub const STG_TOEND: u32 = 4294967295;
    pub const STG_LAYOUT_SEQUENTIAL: u32 = 0;
    pub const STG_LAYOUT_INTERLEAVED: u32 = 1;
    pub const UPDFCACHE_NODATACACHE: u32 = 1;
    pub const UPDFCACHE_ONSAVECACHE: u32 = 2;
    pub const UPDFCACHE_ONSTOPCACHE: u32 = 4;
    pub const UPDFCACHE_NORMALCACHE: u32 = 8;
    pub const UPDFCACHE_IFBLANK: u32 = 16;
    pub const UPDFCACHE_ONLYIFBLANK: u32 = 2147483648;
    pub const UPDFCACHE_IFBLANKORONSAVECACHE: u32 = 18;
    pub const MK_ALT: u32 = 32;
    pub const DROPEFFECT_NONE: u32 = 0;
    pub const DROPEFFECT_COPY: u32 = 1;
    pub const DROPEFFECT_MOVE: u32 = 2;
    pub const DROPEFFECT_LINK: u32 = 4;
    pub const DROPEFFECT_SCROLL: u32 = 2147483648;
    pub const DD_DEFSCROLLINSET: u32 = 11;
    pub const DD_DEFSCROLLDELAY: u32 = 50;
    pub const DD_DEFSCROLLINTERVAL: u32 = 50;
    pub const DD_DEFDRAGDELAY: u32 = 200;
    pub const DD_DEFDRAGMINDIST: u32 = 2;
    pub const MKSYS_URLMONIKER: u32 = 6;
    pub const URL_MK_LEGACY: u32 = 0;
    pub const URL_MK_UNIFORM: u32 = 1;
    pub const URL_MK_NO_CANONICALIZE: u32 = 2;
    pub const FIEF_FLAG_FORCE_JITUI: u32 = 1;
    pub const FIEF_FLAG_PEEK: u32 = 2;
    pub const FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK: u32 = 4;
    pub const FIEF_FLAG_RESERVED_0: u32 = 8;
    pub const FMFD_DEFAULT: u32 = 0;
    pub const FMFD_URLASFILENAME: u32 = 1;
    pub const FMFD_ENABLEMIMESNIFFING: u32 = 2;
    pub const FMFD_IGNOREMIMETEXTPLAIN: u32 = 4;
    pub const FMFD_SERVERMIME: u32 = 8;
    pub const FMFD_RESPECTTEXTPLAIN: u32 = 16;
    pub const FMFD_RETURNUPDATEDIMGMIMES: u32 = 32;
    pub const FMFD_RESERVED_1: u32 = 64;
    pub const UAS_EXACTLEGACY: u32 = 4096;
    pub const URLMON_OPTION_USERAGENT: u32 = 268435457;
    pub const URLMON_OPTION_USERAGENT_REFRESH: u32 = 268435458;
    pub const URLMON_OPTION_URL_ENCODING: u32 = 268435460;
    pub const URLMON_OPTION_USE_BINDSTRINGCREDS: u32 = 268435464;
    pub const URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS: u32 = 268435472;
    pub const CF_NULL: u32 = 0;
    pub const CFSTR_MIME_NULL: u32 = 0;
    pub const Uri_CREATE_ALLOW_RELATIVE: u32 = 1;
    pub const Uri_CREATE_ALLOW_IMPLICIT_WILDCARD_SCHEME: u32 = 2;
    pub const Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME: u32 = 4;
    pub const Uri_CREATE_NOFRAG: u32 = 8;
    pub const Uri_CREATE_NO_CANONICALIZE: u32 = 16;
    pub const Uri_CREATE_CANONICALIZE: u32 = 256;
    pub const Uri_CREATE_FILE_USE_DOS_PATH: u32 = 32;
    pub const Uri_CREATE_DECODE_EXTRA_INFO: u32 = 64;
    pub const Uri_CREATE_NO_DECODE_EXTRA_INFO: u32 = 128;
    pub const Uri_CREATE_CRACK_UNKNOWN_SCHEMES: u32 = 512;
    pub const Uri_CREATE_NO_CRACK_UNKNOWN_SCHEMES: u32 = 1024;
    pub const Uri_CREATE_PRE_PROCESS_HTML_URI: u32 = 2048;
    pub const Uri_CREATE_NO_PRE_PROCESS_HTML_URI: u32 = 4096;
    pub const Uri_CREATE_IE_SETTINGS: u32 = 8192;
    pub const Uri_CREATE_NO_IE_SETTINGS: u32 = 16384;
    pub const Uri_CREATE_NO_ENCODE_FORBIDDEN_CHARACTERS: u32 = 32768;
    pub const Uri_CREATE_NORMALIZE_INTL_CHARACTERS: u32 = 65536;
    pub const Uri_CREATE_CANONICALIZE_ABSOLUTE: u32 = 131072;
    pub const Uri_DISPLAY_NO_FRAGMENT: u32 = 1;
    pub const Uri_PUNYCODE_IDN_HOST: u32 = 2;
    pub const Uri_DISPLAY_IDN_HOST: u32 = 4;
    pub const Uri_DISPLAY_NO_PUNYCODE: u32 = 8;
    pub const Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8: u32 = 1;
    pub const Uri_ENCODING_USER_INFO_AND_PATH_IS_CP: u32 = 2;
    pub const Uri_ENCODING_HOST_IS_IDN: u32 = 4;
    pub const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8: u32 = 8;
    pub const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP: u32 = 16;
    pub const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8: u32 = 32;
    pub const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP: u32 = 64;
    pub const Uri_ENCODING_RFC: u32 = 41;
    pub const UriBuilder_USE_ORIGINAL_FLAGS: u32 = 1;
    pub const WININETINFO_OPTION_LOCK_HANDLE: u32 = 65534;
    pub const URLOSTRM_USECACHEDCOPY_ONLY: u32 = 1;
    pub const URLOSTRM_USECACHEDCOPY: u32 = 2;
    pub const URLOSTRM_GETNEWESTVERSION: u32 = 3;
    pub const SET_FEATURE_ON_THREAD: u32 = 1;
    pub const SET_FEATURE_ON_PROCESS: u32 = 2;
    pub const SET_FEATURE_IN_REGISTRY: u32 = 4;
    pub const SET_FEATURE_ON_THREAD_LOCALMACHINE: u32 = 8;
    pub const SET_FEATURE_ON_THREAD_INTRANET: u32 = 16;
    pub const SET_FEATURE_ON_THREAD_TRUSTED: u32 = 32;
    pub const SET_FEATURE_ON_THREAD_INTERNET: u32 = 64;
    pub const SET_FEATURE_ON_THREAD_RESTRICTED: u32 = 128;
    pub const GET_FEATURE_FROM_THREAD: u32 = 1;
    pub const GET_FEATURE_FROM_PROCESS: u32 = 2;
    pub const GET_FEATURE_FROM_REGISTRY: u32 = 4;
    pub const GET_FEATURE_FROM_THREAD_LOCALMACHINE: u32 = 8;
    pub const GET_FEATURE_FROM_THREAD_INTRANET: u32 = 16;
    pub const GET_FEATURE_FROM_THREAD_TRUSTED: u32 = 32;
    pub const GET_FEATURE_FROM_THREAD_INTERNET: u32 = 64;
    pub const GET_FEATURE_FROM_THREAD_RESTRICTED: u32 = 128;
    pub const PROTOCOLFLAG_NO_PICS_CHECK: u32 = 1;
    pub const MUTZ_NOSAVEDFILECHECK: u32 = 1;
    pub const MUTZ_ISFILE: u32 = 2;
    pub const MUTZ_ACCEPT_WILDCARD_SCHEME: u32 = 128;
    pub const MUTZ_ENFORCERESTRICTED: u32 = 256;
    pub const MUTZ_RESERVED: u32 = 512;
    pub const MUTZ_REQUIRESAVEDFILECHECK: u32 = 1024;
    pub const MUTZ_DONT_UNESCAPE: u32 = 2048;
    pub const MUTZ_DONT_USE_CACHE: u32 = 4096;
    pub const MUTZ_FORCE_INTRANET_FLAGS: u32 = 8192;
    pub const MUTZ_IGNORE_ZONE_MAPPINGS: u32 = 16384;
    pub const MAX_SIZE_SECURITY_ID: u32 = 512;
    pub const URLACTION_MIN: u32 = 4096;
    pub const URLACTION_DOWNLOAD_MIN: u32 = 4096;
    pub const URLACTION_DOWNLOAD_SIGNED_ACTIVEX: u32 = 4097;
    pub const URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX: u32 = 4100;
    pub const URLACTION_DOWNLOAD_CURR_MAX: u32 = 4100;
    pub const URLACTION_DOWNLOAD_MAX: u32 = 4607;
    pub const URLACTION_ACTIVEX_MIN: u32 = 4608;
    pub const URLACTION_ACTIVEX_RUN: u32 = 4608;
    pub const URLPOLICY_ACTIVEX_CHECK_LIST: u32 = 65536;
    pub const URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY: u32 = 4609;
    pub const URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY: u32 = 4610;
    pub const URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY: u32 = 4611;
    pub const URLACTION_SCRIPT_OVERRIDE_SAFETY: u32 = 5121;
    pub const URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY: u32 = 4612;
    pub const URLACTION_ACTIVEX_TREATASUNTRUSTED: u32 = 4613;
    pub const URLACTION_ACTIVEX_NO_WEBOC_SCRIPT: u32 = 4614;
    pub const URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION: u32 = 4615;
    pub const URLACTION_ACTIVEX_OVERRIDE_OPTIN: u32 = 4616;
    pub const URLACTION_ACTIVEX_SCRIPTLET_RUN: u32 = 4617;
    pub const URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION: u32 = 4618;
    pub const URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST: u32 = 4619;
    pub const URLACTION_ACTIVEX_ALLOW_TDC: u32 = 4620;
    pub const URLACTION_ACTIVEX_CURR_MAX: u32 = 4620;
    pub const URLACTION_ACTIVEX_MAX: u32 = 5119;
    pub const URLACTION_SCRIPT_MIN: u32 = 5120;
    pub const URLACTION_SCRIPT_RUN: u32 = 5120;
    pub const URLACTION_SCRIPT_JAVA_USE: u32 = 5122;
    pub const URLACTION_SCRIPT_SAFE_ACTIVEX: u32 = 5125;
    pub const URLACTION_CROSS_DOMAIN_DATA: u32 = 5126;
    pub const URLACTION_SCRIPT_PASTE: u32 = 5127;
    pub const URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE: u32 = 5128;
    pub const URLACTION_SCRIPT_XSSFILTER: u32 = 5129;
    pub const URLACTION_SCRIPT_NAVIGATE: u32 = 5130;
    pub const URLACTION_PLUGGABLE_PROTOCOL_XHR: u32 = 5131;
    pub const URLACTION_ALLOW_VBSCRIPT_IE: u32 = 5132;
    pub const URLACTION_ALLOW_JSCRIPT_IE: u32 = 5133;
    pub const URLACTION_SCRIPT_CURR_MAX: u32 = 5133;
    pub const URLACTION_SCRIPT_MAX: u32 = 5631;
    pub const URLACTION_HTML_MIN: u32 = 5632;
    pub const URLACTION_HTML_SUBMIT_FORMS: u32 = 5633;
    pub const URLACTION_HTML_SUBMIT_FORMS_FROM: u32 = 5634;
    pub const URLACTION_HTML_SUBMIT_FORMS_TO: u32 = 5635;
    pub const URLACTION_HTML_FONT_DOWNLOAD: u32 = 5636;
    pub const URLACTION_HTML_JAVA_RUN: u32 = 5637;
    pub const URLACTION_HTML_USERDATA_SAVE: u32 = 5638;
    pub const URLACTION_HTML_SUBFRAME_NAVIGATE: u32 = 5639;
    pub const URLACTION_HTML_META_REFRESH: u32 = 5640;
    pub const URLACTION_HTML_MIXED_CONTENT: u32 = 5641;
    pub const URLACTION_HTML_INCLUDE_FILE_PATH: u32 = 5642;
    pub const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML: u32 = 5643;
    pub const URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE: u32 = 5644;
    pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS: u32 = 5645;
    pub const URLACTION_HTML_ALLOW_WINDOW_CLOSE: u32 = 5646;
    pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER: u32 = 5647;
    pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK: u32 = 5648;
    pub const URLACTION_HTML_ALLOW_INDEXEDDB: u32 = 5649;
    pub const URLACTION_HTML_MAX: u32 = 6143;
    pub const URLACTION_SHELL_MIN: u32 = 6144;
    pub const URLACTION_SHELL_INSTALL_DTITEMS: u32 = 6144;
    pub const URLACTION_SHELL_MOVE_OR_COPY: u32 = 6146;
    pub const URLACTION_SHELL_FILE_DOWNLOAD: u32 = 6147;
    pub const URLACTION_SHELL_VERB: u32 = 6148;
    pub const URLACTION_SHELL_WEBVIEW_VERB: u32 = 6149;
    pub const URLACTION_SHELL_SHELLEXECUTE: u32 = 6150;
    pub const URLACTION_SHELL_EXECUTE_HIGHRISK: u32 = 6150;
    pub const URLACTION_SHELL_EXECUTE_MODRISK: u32 = 6151;
    pub const URLACTION_SHELL_EXECUTE_LOWRISK: u32 = 6152;
    pub const URLACTION_SHELL_POPUPMGR: u32 = 6153;
    pub const URLACTION_SHELL_RTF_OBJECTS_LOAD: u32 = 6154;
    pub const URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY: u32 = 6155;
    pub const URLACTION_SHELL_EXTENSIONSECURITY: u32 = 6156;
    pub const URLACTION_SHELL_SECURE_DRAGSOURCE: u32 = 6157;
    pub const URLACTION_SHELL_REMOTEQUERY: u32 = 6158;
    pub const URLACTION_SHELL_PREVIEW: u32 = 6159;
    pub const URLACTION_SHELL_SHARE: u32 = 6160;
    pub const URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE: u32 = 6161;
    pub const URLACTION_SHELL_TOCTOU_RISK: u32 = 6162;
    pub const URLACTION_SHELL_CURR_MAX: u32 = 6162;
    pub const URLACTION_SHELL_MAX: u32 = 6655;
    pub const URLACTION_NETWORK_MIN: u32 = 6656;
    pub const URLACTION_CREDENTIALS_USE: u32 = 6656;
    pub const URLPOLICY_CREDENTIALS_SILENT_LOGON_OK: u32 = 0;
    pub const URLPOLICY_CREDENTIALS_MUST_PROMPT_USER: u32 = 65536;
    pub const URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT: u32 = 131072;
    pub const URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY: u32 = 196608;
    pub const URLACTION_AUTHENTICATE_CLIENT: u32 = 6657;
    pub const URLPOLICY_AUTHENTICATE_CLEARTEXT_OK: u32 = 0;
    pub const URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE: u32 = 65536;
    pub const URLPOLICY_AUTHENTICATE_MUTUAL_ONLY: u32 = 196608;
    pub const URLACTION_COOKIES: u32 = 6658;
    pub const URLACTION_COOKIES_SESSION: u32 = 6659;
    pub const URLACTION_CLIENT_CERT_PROMPT: u32 = 6660;
    pub const URLACTION_COOKIES_THIRD_PARTY: u32 = 6661;
    pub const URLACTION_COOKIES_SESSION_THIRD_PARTY: u32 = 6662;
    pub const URLACTION_COOKIES_ENABLED: u32 = 6672;
    pub const URLACTION_NETWORK_CURR_MAX: u32 = 6672;
    pub const URLACTION_NETWORK_MAX: u32 = 7167;
    pub const URLACTION_JAVA_MIN: u32 = 7168;
    pub const URLACTION_JAVA_PERMISSIONS: u32 = 7168;
    pub const URLPOLICY_JAVA_PROHIBIT: u32 = 0;
    pub const URLPOLICY_JAVA_HIGH: u32 = 65536;
    pub const URLPOLICY_JAVA_MEDIUM: u32 = 131072;
    pub const URLPOLICY_JAVA_LOW: u32 = 196608;
    pub const URLPOLICY_JAVA_CUSTOM: u32 = 8388608;
    pub const URLACTION_JAVA_CURR_MAX: u32 = 7168;
    pub const URLACTION_JAVA_MAX: u32 = 7423;
    pub const URLACTION_INFODELIVERY_MIN: u32 = 7424;
    pub const URLACTION_INFODELIVERY_NO_ADDING_CHANNELS: u32 = 7424;
    pub const URLACTION_INFODELIVERY_NO_EDITING_CHANNELS: u32 = 7425;
    pub const URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS: u32 = 7426;
    pub const URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS: u32 = 7427;
    pub const URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS: u32 = 7428;
    pub const URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS: u32 = 7429;
    pub const URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING: u32 = 7430;
    pub const URLACTION_INFODELIVERY_CURR_MAX: u32 = 7430;
    pub const URLACTION_INFODELIVERY_MAX: u32 = 7679;
    pub const URLACTION_CHANNEL_SOFTDIST_MIN: u32 = 7680;
    pub const URLACTION_CHANNEL_SOFTDIST_PERMISSIONS: u32 = 7685;
    pub const URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT: u32 = 65536;
    pub const URLPOLICY_CHANNEL_SOFTDIST_PRECACHE: u32 = 131072;
    pub const URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL: u32 = 196608;
    pub const URLACTION_CHANNEL_SOFTDIST_MAX: u32 = 7935;
    pub const URLACTION_DOTNET_USERCONTROLS: u32 = 8197;
    pub const URLACTION_BEHAVIOR_MIN: u32 = 8192;
    pub const URLACTION_BEHAVIOR_RUN: u32 = 8192;
    pub const URLPOLICY_BEHAVIOR_CHECK_LIST: u32 = 65536;
    pub const URLACTION_FEATURE_MIN: u32 = 8448;
    pub const URLACTION_FEATURE_MIME_SNIFFING: u32 = 8448;
    pub const URLACTION_FEATURE_ZONE_ELEVATION: u32 = 8449;
    pub const URLACTION_FEATURE_WINDOW_RESTRICTIONS: u32 = 8450;
    pub const URLACTION_FEATURE_SCRIPT_STATUS_BAR: u32 = 8451;
    pub const URLACTION_FEATURE_FORCE_ADDR_AND_STATUS: u32 = 8452;
    pub const URLACTION_FEATURE_BLOCK_INPUT_PROMPTS: u32 = 8453;
    pub const URLACTION_FEATURE_DATA_BINDING: u32 = 8454;
    pub const URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE: u32 = 8455;
    pub const URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN: u32 = 8704;
    pub const URLACTION_AUTOMATIC_DOWNLOAD_UI: u32 = 8704;
    pub const URLACTION_AUTOMATIC_ACTIVEX_UI: u32 = 8705;
    pub const URLACTION_ALLOW_RESTRICTEDPROTOCOLS: u32 = 8960;
    pub const URLACTION_ALLOW_APEVALUATION: u32 = 8961;
    pub const URLACTION_ALLOW_XHR_EVALUATION: u32 = 8962;
    pub const URLACTION_WINDOWS_BROWSER_APPLICATIONS: u32 = 9216;
    pub const URLACTION_XPS_DOCUMENTS: u32 = 9217;
    pub const URLACTION_LOOSE_XAML: u32 = 9218;
    pub const URLACTION_LOWRIGHTS: u32 = 9472;
    pub const URLACTION_WINFX_SETUP: u32 = 9728;
    pub const URLACTION_INPRIVATE_BLOCKING: u32 = 9984;
    pub const URLACTION_ALLOW_AUDIO_VIDEO: u32 = 9985;
    pub const URLACTION_ALLOW_ACTIVEX_FILTERING: u32 = 9986;
    pub const URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING: u32 = 9987;
    pub const URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS: u32 = 9988;
    pub const URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT: u32 = 9989;
    pub const URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION: u32 = 9990;
    pub const URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW: u32 = 9992;
    pub const URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS: u32 = 9993;
    pub const URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST: u32 = 9994;
    pub const URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS: u32 = 9995;
    pub const URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX: u32 = 9996;
    pub const URLACTION_ALLOW_CSS_EXPRESSIONS: u32 = 9997;
    pub const URLPOLICY_ALLOW: u32 = 0;
    pub const URLPOLICY_QUERY: u32 = 1;
    pub const URLPOLICY_DISALLOW: u32 = 3;
    pub const URLPOLICY_NOTIFY_ON_ALLOW: u32 = 16;
    pub const URLPOLICY_NOTIFY_ON_DISALLOW: u32 = 32;
    pub const URLPOLICY_LOG_ON_ALLOW: u32 = 64;
    pub const URLPOLICY_LOG_ON_DISALLOW: u32 = 128;
    pub const URLPOLICY_MASK_PERMISSIONS: u32 = 15;
    pub const URLPOLICY_DONTCHECKDLGBOX: u32 = 256;
    pub const URLZONE_ESC_FLAG: u32 = 256;
    pub const SECURITY_IE_STATE_GREEN: u32 = 0;
    pub const SECURITY_IE_STATE_RED: u32 = 1;
    pub const SOFTDIST_FLAG_USAGE_EMAIL: u32 = 1;
    pub const SOFTDIST_FLAG_USAGE_PRECACHE: u32 = 2;
    pub const SOFTDIST_FLAG_USAGE_AUTOINSTALL: u32 = 4;
    pub const SOFTDIST_FLAG_DELETE_SUBSCRIPTION: u32 = 8;
    pub const SOFTDIST_ADSTATE_NONE: u32 = 0;
    pub const SOFTDIST_ADSTATE_AVAILABLE: u32 = 1;
    pub const SOFTDIST_ADSTATE_DOWNLOADED: u32 = 2;
    pub const SOFTDIST_ADSTATE_INSTALLED: u32 = 3;
    pub const CONFIRMSAFETYACTION_LOADOBJECT: u32 = 1;
    pub const PIDDI_THUMBNAIL: u32 = 2;
    pub const PIDSI_TITLE: u32 = 2;
    pub const PIDSI_SUBJECT: u32 = 3;
    pub const PIDSI_AUTHOR: u32 = 4;
    pub const PIDSI_KEYWORDS: u32 = 5;
    pub const PIDSI_COMMENTS: u32 = 6;
    pub const PIDSI_TEMPLATE: u32 = 7;
    pub const PIDSI_LASTAUTHOR: u32 = 8;
    pub const PIDSI_REVNUMBER: u32 = 9;
    pub const PIDSI_EDITTIME: u32 = 10;
    pub const PIDSI_LASTPRINTED: u32 = 11;
    pub const PIDSI_CREATE_DTM: u32 = 12;
    pub const PIDSI_LASTSAVE_DTM: u32 = 13;
    pub const PIDSI_PAGECOUNT: u32 = 14;
    pub const PIDSI_WORDCOUNT: u32 = 15;
    pub const PIDSI_CHARCOUNT: u32 = 16;
    pub const PIDSI_THUMBNAIL: u32 = 17;
    pub const PIDSI_APPNAME: u32 = 18;
    pub const PIDSI_DOC_SECURITY: u32 = 19;
    pub const PIDDSI_CATEGORY: u32 = 2;
    pub const PIDDSI_PRESFORMAT: u32 = 3;
    pub const PIDDSI_BYTECOUNT: u32 = 4;
    pub const PIDDSI_LINECOUNT: u32 = 5;
    pub const PIDDSI_PARCOUNT: u32 = 6;
    pub const PIDDSI_SLIDECOUNT: u32 = 7;
    pub const PIDDSI_NOTECOUNT: u32 = 8;
    pub const PIDDSI_HIDDENCOUNT: u32 = 9;
    pub const PIDDSI_MMCLIPCOUNT: u32 = 10;
    pub const PIDDSI_SCALE: u32 = 11;
    pub const PIDDSI_HEADINGPAIR: u32 = 12;
    pub const PIDDSI_DOCPARTS: u32 = 13;
    pub const PIDDSI_MANAGER: u32 = 14;
    pub const PIDDSI_COMPANY: u32 = 15;
    pub const PIDDSI_LINKSDIRTY: u32 = 16;
    pub const PIDMSI_EDITOR: u32 = 2;
    pub const PIDMSI_SUPPLIER: u32 = 3;
    pub const PIDMSI_SOURCE: u32 = 4;
    pub const PIDMSI_SEQUENCE_NO: u32 = 5;
    pub const PIDMSI_PROJECT: u32 = 6;
    pub const PIDMSI_STATUS: u32 = 7;
    pub const PIDMSI_OWNER: u32 = 8;
    pub const PIDMSI_RATING: u32 = 9;
    pub const PIDMSI_PRODUCTION: u32 = 10;
    pub const PIDMSI_COPYRIGHT: u32 = 11;
    pub const STDOLE_MAJORVERNUM: u32 = 1;
    pub const STDOLE_MINORVERNUM: u32 = 0;
    pub const STDOLE_LCID: u32 = 0;
    pub const STDOLE2_MAJORVERNUM: u32 = 2;
    pub const STDOLE2_MINORVERNUM: u32 = 0;
    pub const STDOLE2_LCID: u32 = 0;
    pub const VARIANT_NOVALUEPROP: u32 = 1;
    pub const VARIANT_ALPHABOOL: u32 = 2;
    pub const VARIANT_NOUSEROVERRIDE: u32 = 4;
    pub const VARIANT_CALENDAR_HIJRI: u32 = 8;
    pub const VARIANT_LOCALBOOL: u32 = 16;
    pub const VARIANT_CALENDAR_THAI: u32 = 32;
    pub const VARIANT_CALENDAR_GREGORIAN: u32 = 64;
    pub const VARIANT_USE_NLS: u32 = 128;
    pub const LOCALE_USE_NLS: u32 = 268435456;
    pub const VTDATEGRE_MAX: u32 = 2958465;
    pub const VTDATEGRE_MIN: i32 = -657434;
    pub const NUMPRS_LEADING_WHITE: u32 = 1;
    pub const NUMPRS_TRAILING_WHITE: u32 = 2;
    pub const NUMPRS_LEADING_PLUS: u32 = 4;
    pub const NUMPRS_TRAILING_PLUS: u32 = 8;
    pub const NUMPRS_LEADING_MINUS: u32 = 16;
    pub const NUMPRS_TRAILING_MINUS: u32 = 32;
    pub const NUMPRS_HEX_OCT: u32 = 64;
    pub const NUMPRS_PARENS: u32 = 128;
    pub const NUMPRS_DECIMAL: u32 = 256;
    pub const NUMPRS_THOUSANDS: u32 = 512;
    pub const NUMPRS_CURRENCY: u32 = 1024;
    pub const NUMPRS_EXPONENT: u32 = 2048;
    pub const NUMPRS_USE_ALL: u32 = 4096;
    pub const NUMPRS_STD: u32 = 8191;
    pub const NUMPRS_NEG: u32 = 65536;
    pub const NUMPRS_INEXACT: u32 = 131072;
    pub const VARCMP_LT: u32 = 0;
    pub const VARCMP_EQ: u32 = 1;
    pub const VARCMP_GT: u32 = 2;
    pub const VARCMP_NULL: u32 = 3;
    pub const MEMBERID_NIL: i32 = -1;
    pub const ID_DEFAULTINST: i32 = -2;
    pub const DISPATCH_METHOD: u32 = 1;
    pub const DISPATCH_PROPERTYGET: u32 = 2;
    pub const DISPATCH_PROPERTYPUT: u32 = 4;
    pub const DISPATCH_PROPERTYPUTREF: u32 = 8;
    pub const LOAD_TLB_AS_32BIT: u32 = 32;
    pub const LOAD_TLB_AS_64BIT: u32 = 64;
    pub const MASK_TO_RESET_TLB_BITS: i32 = -97;
    pub const ACTIVEOBJECT_STRONG: u32 = 0;
    pub const ACTIVEOBJECT_WEAK: u32 = 1;
    pub const OLEIVERB_PRIMARY: u32 = 0;
    pub const OLEIVERB_SHOW: i32 = -1;
    pub const OLEIVERB_OPEN: i32 = -2;
    pub const OLEIVERB_HIDE: i32 = -3;
    pub const OLEIVERB_UIACTIVATE: i32 = -4;
    pub const OLEIVERB_INPLACEACTIVATE: i32 = -5;
    pub const OLEIVERB_DISCARDUNDOSTATE: i32 = -6;
    pub const EMBDHLP_INPROC_HANDLER: u32 = 0;
    pub const EMBDHLP_INPROC_SERVER: u32 = 1;
    pub const EMBDHLP_CREATENOW: u32 = 0;
    pub const EMBDHLP_DELAYCREATE: u32 = 65536;
    pub const OLECREATE_LEAVERUNNING: u32 = 1;
    pub const OFN_READONLY: u32 = 1;
    pub const OFN_OVERWRITEPROMPT: u32 = 2;
    pub const OFN_HIDEREADONLY: u32 = 4;
    pub const OFN_NOCHANGEDIR: u32 = 8;
    pub const OFN_SHOWHELP: u32 = 16;
    pub const OFN_ENABLEHOOK: u32 = 32;
    pub const OFN_ENABLETEMPLATE: u32 = 64;
    pub const OFN_ENABLETEMPLATEHANDLE: u32 = 128;
    pub const OFN_NOVALIDATE: u32 = 256;
    pub const OFN_ALLOWMULTISELECT: u32 = 512;
    pub const OFN_EXTENSIONDIFFERENT: u32 = 1024;
    pub const OFN_PATHMUSTEXIST: u32 = 2048;
    pub const OFN_FILEMUSTEXIST: u32 = 4096;
    pub const OFN_CREATEPROMPT: u32 = 8192;
    pub const OFN_SHAREAWARE: u32 = 16384;
    pub const OFN_NOREADONLYRETURN: u32 = 32768;
    pub const OFN_NOTESTFILECREATE: u32 = 65536;
    pub const OFN_NONETWORKBUTTON: u32 = 131072;
    pub const OFN_NOLONGNAMES: u32 = 262144;
    pub const OFN_EXPLORER: u32 = 524288;
    pub const OFN_NODEREFERENCELINKS: u32 = 1048576;
    pub const OFN_LONGNAMES: u32 = 2097152;
    pub const OFN_ENABLEINCLUDENOTIFY: u32 = 4194304;
    pub const OFN_ENABLESIZING: u32 = 8388608;
    pub const OFN_DONTADDTORECENT: u32 = 33554432;
    pub const OFN_FORCESHOWHIDDEN: u32 = 268435456;
    pub const OFN_EX_NOPLACESBAR: u32 = 1;
    pub const OFN_SHAREFALLTHROUGH: u32 = 2;
    pub const OFN_SHARENOWARN: u32 = 1;
    pub const OFN_SHAREWARN: u32 = 0;
    pub const CDN_FIRST: i32 = -601;
    pub const CDN_LAST: i32 = -699;
    pub const CDN_INITDONE: i32 = -601;
    pub const CDN_SELCHANGE: i32 = -602;
    pub const CDN_FOLDERCHANGE: i32 = -603;
    pub const CDN_SHAREVIOLATION: i32 = -604;
    pub const CDN_HELP: i32 = -605;
    pub const CDN_FILEOK: i32 = -606;
    pub const CDN_TYPECHANGE: i32 = -607;
    pub const CDN_INCLUDEITEM: i32 = -608;
    pub const CDM_FIRST: u32 = 1124;
    pub const CDM_LAST: u32 = 1224;
    pub const CDM_GETSPEC: u32 = 1124;
    pub const CDM_GETFILEPATH: u32 = 1125;
    pub const CDM_GETFOLDERPATH: u32 = 1126;
    pub const CDM_GETFOLDERIDLIST: u32 = 1127;
    pub const CDM_SETCONTROLTEXT: u32 = 1128;
    pub const CDM_HIDECONTROL: u32 = 1129;
    pub const CDM_SETDEFEXT: u32 = 1130;
    pub const CC_RGBINIT: u32 = 1;
    pub const CC_FULLOPEN: u32 = 2;
    pub const CC_PREVENTFULLOPEN: u32 = 4;
    pub const CC_SHOWHELP: u32 = 8;
    pub const CC_ENABLEHOOK: u32 = 16;
    pub const CC_ENABLETEMPLATE: u32 = 32;
    pub const CC_ENABLETEMPLATEHANDLE: u32 = 64;
    pub const CC_SOLIDCOLOR: u32 = 128;
    pub const CC_ANYCOLOR: u32 = 256;
    pub const FR_DOWN: u32 = 1;
    pub const FR_WHOLEWORD: u32 = 2;
    pub const FR_MATCHCASE: u32 = 4;
    pub const FR_FINDNEXT: u32 = 8;
    pub const FR_REPLACE: u32 = 16;
    pub const FR_REPLACEALL: u32 = 32;
    pub const FR_DIALOGTERM: u32 = 64;
    pub const FR_SHOWHELP: u32 = 128;
    pub const FR_ENABLEHOOK: u32 = 256;
    pub const FR_ENABLETEMPLATE: u32 = 512;
    pub const FR_NOUPDOWN: u32 = 1024;
    pub const FR_NOMATCHCASE: u32 = 2048;
    pub const FR_NOWHOLEWORD: u32 = 4096;
    pub const FR_ENABLETEMPLATEHANDLE: u32 = 8192;
    pub const FR_HIDEUPDOWN: u32 = 16384;
    pub const FR_HIDEMATCHCASE: u32 = 32768;
    pub const FR_HIDEWHOLEWORD: u32 = 65536;
    pub const FR_RAW: u32 = 131072;
    pub const FR_SHOWWRAPAROUND: u32 = 262144;
    pub const FR_NOWRAPAROUND: u32 = 524288;
    pub const FR_WRAPAROUND: u32 = 1048576;
    pub const FR_MATCHDIAC: u32 = 536870912;
    pub const FR_MATCHKASHIDA: u32 = 1073741824;
    pub const FR_MATCHALEFHAMZA: u32 = 2147483648;
    pub const FRM_FIRST: u32 = 1124;
    pub const FRM_LAST: u32 = 1224;
    pub const FRM_SETOPERATIONRESULT: u32 = 1124;
    pub const FRM_SETOPERATIONRESULTTEXT: u32 = 1125;
    pub const CF_SCREENFONTS: u32 = 1;
    pub const CF_PRINTERFONTS: u32 = 2;
    pub const CF_BOTH: u32 = 3;
    pub const CF_SHOWHELP: u32 = 4;
    pub const CF_ENABLEHOOK: u32 = 8;
    pub const CF_ENABLETEMPLATE: u32 = 16;
    pub const CF_ENABLETEMPLATEHANDLE: u32 = 32;
    pub const CF_INITTOLOGFONTSTRUCT: u32 = 64;
    pub const CF_USESTYLE: u32 = 128;
    pub const CF_EFFECTS: u32 = 256;
    pub const CF_APPLY: u32 = 512;
    pub const CF_ANSIONLY: u32 = 1024;
    pub const CF_SCRIPTSONLY: u32 = 1024;
    pub const CF_NOVECTORFONTS: u32 = 2048;
    pub const CF_NOOEMFONTS: u32 = 2048;
    pub const CF_NOSIMULATIONS: u32 = 4096;
    pub const CF_LIMITSIZE: u32 = 8192;
    pub const CF_FIXEDPITCHONLY: u32 = 16384;
    pub const CF_WYSIWYG: u32 = 32768;
    pub const CF_FORCEFONTEXIST: u32 = 65536;
    pub const CF_SCALABLEONLY: u32 = 131072;
    pub const CF_TTONLY: u32 = 262144;
    pub const CF_NOFACESEL: u32 = 524288;
    pub const CF_NOSTYLESEL: u32 = 1048576;
    pub const CF_NOSIZESEL: u32 = 2097152;
    pub const CF_SELECTSCRIPT: u32 = 4194304;
    pub const CF_NOSCRIPTSEL: u32 = 8388608;
    pub const CF_NOVERTFONTS: u32 = 16777216;
    pub const CF_INACTIVEFONTS: u32 = 33554432;
    pub const SIMULATED_FONTTYPE: u32 = 32768;
    pub const PRINTER_FONTTYPE: u32 = 16384;
    pub const SCREEN_FONTTYPE: u32 = 8192;
    pub const BOLD_FONTTYPE: u32 = 256;
    pub const ITALIC_FONTTYPE: u32 = 512;
    pub const REGULAR_FONTTYPE: u32 = 1024;
    pub const PS_OPENTYPE_FONTTYPE: u32 = 65536;
    pub const TT_OPENTYPE_FONTTYPE: u32 = 131072;
    pub const TYPE1_FONTTYPE: u32 = 262144;
    pub const SYMBOL_FONTTYPE: u32 = 524288;
    pub const WM_CHOOSEFONT_GETLOGFONT: u32 = 1025;
    pub const WM_CHOOSEFONT_SETLOGFONT: u32 = 1125;
    pub const WM_CHOOSEFONT_SETFLAGS: u32 = 1126;
    pub const LBSELCHSTRINGA: &[u8; 27usize] = b"commdlg_LBSelChangedNotify\0";
    pub const SHAREVISTRINGA: &[u8; 23usize] = b"commdlg_ShareViolation\0";
    pub const FILEOKSTRINGA: &[u8; 19usize] = b"commdlg_FileNameOK\0";
    pub const COLOROKSTRINGA: &[u8; 16usize] = b"commdlg_ColorOK\0";
    pub const SETRGBSTRINGA: &[u8; 20usize] = b"commdlg_SetRGBColor\0";
    pub const HELPMSGSTRINGA: &[u8; 13usize] = b"commdlg_help\0";
    pub const FINDMSGSTRINGA: &[u8; 20usize] = b"commdlg_FindReplace\0";
    pub const LBSELCHSTRINGW: &[u8; 27usize] = b"commdlg_LBSelChangedNotify\0";
    pub const SHAREVISTRINGW: &[u8; 23usize] = b"commdlg_ShareViolation\0";
    pub const FILEOKSTRINGW: &[u8; 19usize] = b"commdlg_FileNameOK\0";
    pub const COLOROKSTRINGW: &[u8; 16usize] = b"commdlg_ColorOK\0";
    pub const SETRGBSTRINGW: &[u8; 20usize] = b"commdlg_SetRGBColor\0";
    pub const HELPMSGSTRINGW: &[u8; 13usize] = b"commdlg_help\0";
    pub const FINDMSGSTRINGW: &[u8; 20usize] = b"commdlg_FindReplace\0";
    pub const LBSELCHSTRING: &[u8; 27usize] = b"commdlg_LBSelChangedNotify\0";
    pub const SHAREVISTRING: &[u8; 23usize] = b"commdlg_ShareViolation\0";
    pub const FILEOKSTRING: &[u8; 19usize] = b"commdlg_FileNameOK\0";
    pub const COLOROKSTRING: &[u8; 16usize] = b"commdlg_ColorOK\0";
    pub const SETRGBSTRING: &[u8; 20usize] = b"commdlg_SetRGBColor\0";
    pub const HELPMSGSTRING: &[u8; 13usize] = b"commdlg_help\0";
    pub const FINDMSGSTRING: &[u8; 20usize] = b"commdlg_FindReplace\0";
    pub const CD_LBSELNOITEMS: i32 = -1;
    pub const CD_LBSELCHANGE: u32 = 0;
    pub const CD_LBSELSUB: u32 = 1;
    pub const CD_LBSELADD: u32 = 2;
    pub const PD_ALLPAGES: u32 = 0;
    pub const PD_SELECTION: u32 = 1;
    pub const PD_PAGENUMS: u32 = 2;
    pub const PD_NOSELECTION: u32 = 4;
    pub const PD_NOPAGENUMS: u32 = 8;
    pub const PD_COLLATE: u32 = 16;
    pub const PD_PRINTTOFILE: u32 = 32;
    pub const PD_PRINTSETUP: u32 = 64;
    pub const PD_NOWARNING: u32 = 128;
    pub const PD_RETURNDC: u32 = 256;
    pub const PD_RETURNIC: u32 = 512;
    pub const PD_RETURNDEFAULT: u32 = 1024;
    pub const PD_SHOWHELP: u32 = 2048;
    pub const PD_ENABLEPRINTHOOK: u32 = 4096;
    pub const PD_ENABLESETUPHOOK: u32 = 8192;
    pub const PD_ENABLEPRINTTEMPLATE: u32 = 16384;
    pub const PD_ENABLESETUPTEMPLATE: u32 = 32768;
    pub const PD_ENABLEPRINTTEMPLATEHANDLE: u32 = 65536;
    pub const PD_ENABLESETUPTEMPLATEHANDLE: u32 = 131072;
    pub const PD_USEDEVMODECOPIES: u32 = 262144;
    pub const PD_USEDEVMODECOPIESANDCOLLATE: u32 = 262144;
    pub const PD_DISABLEPRINTTOFILE: u32 = 524288;
    pub const PD_HIDEPRINTTOFILE: u32 = 1048576;
    pub const PD_NONETWORKBUTTON: u32 = 2097152;
    pub const PD_CURRENTPAGE: u32 = 4194304;
    pub const PD_NOCURRENTPAGE: u32 = 8388608;
    pub const PD_EXCLUSIONFLAGS: u32 = 16777216;
    pub const PD_USELARGETEMPLATE: u32 = 268435456;
    pub const PD_EXCL_COPIESANDCOLLATE: u32 = 33024;
    pub const START_PAGE_GENERAL: u32 = 4294967295;
    pub const PD_RESULT_CANCEL: u32 = 0;
    pub const PD_RESULT_PRINT: u32 = 1;
    pub const PD_RESULT_APPLY: u32 = 2;
    pub const DN_DEFAULTPRN: u32 = 1;
    pub const WM_PSD_PAGESETUPDLG: u32 = 1024;
    pub const WM_PSD_FULLPAGERECT: u32 = 1025;
    pub const WM_PSD_MINMARGINRECT: u32 = 1026;
    pub const WM_PSD_MARGINRECT: u32 = 1027;
    pub const WM_PSD_GREEKTEXTRECT: u32 = 1028;
    pub const WM_PSD_ENVSTAMPRECT: u32 = 1029;
    pub const WM_PSD_YAFULLPAGERECT: u32 = 1030;
    pub const PSD_DEFAULTMINMARGINS: u32 = 0;
    pub const PSD_INWININIINTLMEASURE: u32 = 0;
    pub const PSD_MINMARGINS: u32 = 1;
    pub const PSD_MARGINS: u32 = 2;
    pub const PSD_INTHOUSANDTHSOFINCHES: u32 = 4;
    pub const PSD_INHUNDREDTHSOFMILLIMETERS: u32 = 8;
    pub const PSD_DISABLEMARGINS: u32 = 16;
    pub const PSD_DISABLEPRINTER: u32 = 32;
    pub const PSD_NOWARNING: u32 = 128;
    pub const PSD_DISABLEORIENTATION: u32 = 256;
    pub const PSD_RETURNDEFAULT: u32 = 1024;
    pub const PSD_DISABLEPAPER: u32 = 512;
    pub const PSD_SHOWHELP: u32 = 2048;
    pub const PSD_ENABLEPAGESETUPHOOK: u32 = 8192;
    pub const PSD_ENABLEPAGESETUPTEMPLATE: u32 = 32768;
    pub const PSD_ENABLEPAGESETUPTEMPLATEHANDLE: u32 = 131072;
    pub const PSD_ENABLEPAGEPAINTHOOK: u32 = 262144;
    pub const PSD_DISABLEPAGEPAINTING: u32 = 524288;
    pub const PSD_NONETWORKBUTTON: u32 = 2097152;
    pub const _STRALIGN_USE_SECURE_CRT: u32 = 1;
    pub const SERVICES_ACTIVE_DATABASEW: &[u8; 15usize] = b"ServicesActive\0";
    pub const SERVICES_FAILED_DATABASEW: &[u8; 15usize] = b"ServicesFailed\0";
    pub const SERVICES_ACTIVE_DATABASEA: &[u8; 15usize] = b"ServicesActive\0";
    pub const SERVICES_FAILED_DATABASEA: &[u8; 15usize] = b"ServicesFailed\0";
    pub const SC_GROUP_IDENTIFIERW: u8 = 43u8;
    pub const SC_GROUP_IDENTIFIERA: u8 = 43u8;
    pub const SERVICES_ACTIVE_DATABASE: &[u8; 15usize] = b"ServicesActive\0";
    pub const SERVICES_FAILED_DATABASE: &[u8; 15usize] = b"ServicesFailed\0";
    pub const SC_GROUP_IDENTIFIER: u8 = 43u8;
    pub const SERVICE_NO_CHANGE: u32 = 4294967295;
    pub const SERVICE_ACTIVE: u32 = 1;
    pub const SERVICE_INACTIVE: u32 = 2;
    pub const SERVICE_STATE_ALL: u32 = 3;
    pub const SERVICE_CONTROL_STOP: u32 = 1;
    pub const SERVICE_CONTROL_PAUSE: u32 = 2;
    pub const SERVICE_CONTROL_CONTINUE: u32 = 3;
    pub const SERVICE_CONTROL_INTERROGATE: u32 = 4;
    pub const SERVICE_CONTROL_SHUTDOWN: u32 = 5;
    pub const SERVICE_CONTROL_PARAMCHANGE: u32 = 6;
    pub const SERVICE_CONTROL_NETBINDADD: u32 = 7;
    pub const SERVICE_CONTROL_NETBINDREMOVE: u32 = 8;
    pub const SERVICE_CONTROL_NETBINDENABLE: u32 = 9;
    pub const SERVICE_CONTROL_NETBINDDISABLE: u32 = 10;
    pub const SERVICE_CONTROL_DEVICEEVENT: u32 = 11;
    pub const SERVICE_CONTROL_HARDWAREPROFILECHANGE: u32 = 12;
    pub const SERVICE_CONTROL_POWEREVENT: u32 = 13;
    pub const SERVICE_CONTROL_SESSIONCHANGE: u32 = 14;
    pub const SERVICE_CONTROL_PRESHUTDOWN: u32 = 15;
    pub const SERVICE_CONTROL_TIMECHANGE: u32 = 16;
    pub const SERVICE_CONTROL_TRIGGEREVENT: u32 = 32;
    pub const SERVICE_CONTROL_LOWRESOURCES: u32 = 96;
    pub const SERVICE_CONTROL_SYSTEMLOWRESOURCES: u32 = 97;
    pub const SERVICE_STOPPED: u32 = 1;
    pub const SERVICE_START_PENDING: u32 = 2;
    pub const SERVICE_STOP_PENDING: u32 = 3;
    pub const SERVICE_RUNNING: u32 = 4;
    pub const SERVICE_CONTINUE_PENDING: u32 = 5;
    pub const SERVICE_PAUSE_PENDING: u32 = 6;
    pub const SERVICE_PAUSED: u32 = 7;
    pub const SERVICE_ACCEPT_STOP: u32 = 1;
    pub const SERVICE_ACCEPT_PAUSE_CONTINUE: u32 = 2;
    pub const SERVICE_ACCEPT_SHUTDOWN: u32 = 4;
    pub const SERVICE_ACCEPT_PARAMCHANGE: u32 = 8;
    pub const SERVICE_ACCEPT_NETBINDCHANGE: u32 = 16;
    pub const SERVICE_ACCEPT_HARDWAREPROFILECHANGE: u32 = 32;
    pub const SERVICE_ACCEPT_POWEREVENT: u32 = 64;
    pub const SERVICE_ACCEPT_SESSIONCHANGE: u32 = 128;
    pub const SERVICE_ACCEPT_PRESHUTDOWN: u32 = 256;
    pub const SERVICE_ACCEPT_TIMECHANGE: u32 = 512;
    pub const SERVICE_ACCEPT_TRIGGEREVENT: u32 = 1024;
    pub const SERVICE_ACCEPT_USER_LOGOFF: u32 = 2048;
    pub const SERVICE_ACCEPT_LOWRESOURCES: u32 = 8192;
    pub const SERVICE_ACCEPT_SYSTEMLOWRESOURCES: u32 = 16384;
    pub const SC_MANAGER_CONNECT: u32 = 1;
    pub const SC_MANAGER_CREATE_SERVICE: u32 = 2;
    pub const SC_MANAGER_ENUMERATE_SERVICE: u32 = 4;
    pub const SC_MANAGER_LOCK: u32 = 8;
    pub const SC_MANAGER_QUERY_LOCK_STATUS: u32 = 16;
    pub const SC_MANAGER_MODIFY_BOOT_CONFIG: u32 = 32;
    pub const SC_MANAGER_ALL_ACCESS: u32 = 983103;
    pub const SERVICE_QUERY_CONFIG: u32 = 1;
    pub const SERVICE_CHANGE_CONFIG: u32 = 2;
    pub const SERVICE_QUERY_STATUS: u32 = 4;
    pub const SERVICE_ENUMERATE_DEPENDENTS: u32 = 8;
    pub const SERVICE_START: u32 = 16;
    pub const SERVICE_STOP: u32 = 32;
    pub const SERVICE_PAUSE_CONTINUE: u32 = 64;
    pub const SERVICE_INTERROGATE: u32 = 128;
    pub const SERVICE_USER_DEFINED_CONTROL: u32 = 256;
    pub const SERVICE_ALL_ACCESS: u32 = 983551;
    pub const SERVICE_RUNS_IN_SYSTEM_PROCESS: u32 = 1;
    pub const SERVICE_CONFIG_DESCRIPTION: u32 = 1;
    pub const SERVICE_CONFIG_FAILURE_ACTIONS: u32 = 2;
    pub const SERVICE_CONFIG_DELAYED_AUTO_START_INFO: u32 = 3;
    pub const SERVICE_CONFIG_FAILURE_ACTIONS_FLAG: u32 = 4;
    pub const SERVICE_CONFIG_SERVICE_SID_INFO: u32 = 5;
    pub const SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO: u32 = 6;
    pub const SERVICE_CONFIG_PRESHUTDOWN_INFO: u32 = 7;
    pub const SERVICE_CONFIG_TRIGGER_INFO: u32 = 8;
    pub const SERVICE_CONFIG_PREFERRED_NODE: u32 = 9;
    pub const SERVICE_CONFIG_LAUNCH_PROTECTED: u32 = 12;
    pub const SERVICE_NOTIFY_STATUS_CHANGE_1: u32 = 1;
    pub const SERVICE_NOTIFY_STATUS_CHANGE_2: u32 = 2;
    pub const SERVICE_NOTIFY_STATUS_CHANGE: u32 = 2;
    pub const SERVICE_NOTIFY_STOPPED: u32 = 1;
    pub const SERVICE_NOTIFY_START_PENDING: u32 = 2;
    pub const SERVICE_NOTIFY_STOP_PENDING: u32 = 4;
    pub const SERVICE_NOTIFY_RUNNING: u32 = 8;
    pub const SERVICE_NOTIFY_CONTINUE_PENDING: u32 = 16;
    pub const SERVICE_NOTIFY_PAUSE_PENDING: u32 = 32;
    pub const SERVICE_NOTIFY_PAUSED: u32 = 64;
    pub const SERVICE_NOTIFY_CREATED: u32 = 128;
    pub const SERVICE_NOTIFY_DELETED: u32 = 256;
    pub const SERVICE_NOTIFY_DELETE_PENDING: u32 = 512;
    pub const SERVICE_STOP_REASON_FLAG_MIN: u32 = 0;
    pub const SERVICE_STOP_REASON_FLAG_UNPLANNED: u32 = 268435456;
    pub const SERVICE_STOP_REASON_FLAG_CUSTOM: u32 = 536870912;
    pub const SERVICE_STOP_REASON_FLAG_PLANNED: u32 = 1073741824;
    pub const SERVICE_STOP_REASON_FLAG_MAX: u32 = 2147483648;
    pub const SERVICE_STOP_REASON_MAJOR_MIN: u32 = 0;
    pub const SERVICE_STOP_REASON_MAJOR_OTHER: u32 = 65536;
    pub const SERVICE_STOP_REASON_MAJOR_HARDWARE: u32 = 131072;
    pub const SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM: u32 = 196608;
    pub const SERVICE_STOP_REASON_MAJOR_SOFTWARE: u32 = 262144;
    pub const SERVICE_STOP_REASON_MAJOR_APPLICATION: u32 = 327680;
    pub const SERVICE_STOP_REASON_MAJOR_NONE: u32 = 393216;
    pub const SERVICE_STOP_REASON_MAJOR_MAX: u32 = 458752;
    pub const SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM: u32 = 4194304;
    pub const SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM: u32 = 16711680;
    pub const SERVICE_STOP_REASON_MINOR_MIN: u32 = 0;
    pub const SERVICE_STOP_REASON_MINOR_OTHER: u32 = 1;
    pub const SERVICE_STOP_REASON_MINOR_MAINTENANCE: u32 = 2;
    pub const SERVICE_STOP_REASON_MINOR_INSTALLATION: u32 = 3;
    pub const SERVICE_STOP_REASON_MINOR_UPGRADE: u32 = 4;
    pub const SERVICE_STOP_REASON_MINOR_RECONFIG: u32 = 5;
    pub const SERVICE_STOP_REASON_MINOR_HUNG: u32 = 6;
    pub const SERVICE_STOP_REASON_MINOR_UNSTABLE: u32 = 7;
    pub const SERVICE_STOP_REASON_MINOR_DISK: u32 = 8;
    pub const SERVICE_STOP_REASON_MINOR_NETWORKCARD: u32 = 9;
    pub const SERVICE_STOP_REASON_MINOR_ENVIRONMENT: u32 = 10;
    pub const SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER: u32 = 11;
    pub const SERVICE_STOP_REASON_MINOR_OTHERDRIVER: u32 = 12;
    pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK: u32 = 13;
    pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE: u32 = 14;
    pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX: u32 = 15;
    pub const SERVICE_STOP_REASON_MINOR_SECURITY: u32 = 16;
    pub const SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY: u32 = 17;
    pub const SERVICE_STOP_REASON_MINOR_WMI: u32 = 18;
    pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL: u32 = 19;
    pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL: u32 = 20;
    pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL: u32 = 21;
    pub const SERVICE_STOP_REASON_MINOR_MMC: u32 = 22;
    pub const SERVICE_STOP_REASON_MINOR_NONE: u32 = 23;
    pub const SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT: u32 = 24;
    pub const SERVICE_STOP_REASON_MINOR_MAX: u32 = 25;
    pub const SERVICE_STOP_REASON_MINOR_MIN_CUSTOM: u32 = 256;
    pub const SERVICE_STOP_REASON_MINOR_MAX_CUSTOM: u32 = 65535;
    pub const SERVICE_CONTROL_STATUS_REASON_INFO: u32 = 1;
    pub const SERVICE_SID_TYPE_NONE: u32 = 0;
    pub const SERVICE_SID_TYPE_UNRESTRICTED: u32 = 1;
    pub const SERVICE_SID_TYPE_RESTRICTED: u32 = 3;
    pub const SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL: u32 = 1;
    pub const SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY: u32 = 2;
    pub const SERVICE_TRIGGER_TYPE_DOMAIN_JOIN: u32 = 3;
    pub const SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT: u32 = 4;
    pub const SERVICE_TRIGGER_TYPE_GROUP_POLICY: u32 = 5;
    pub const SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT: u32 = 6;
    pub const SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE: u32 = 7;
    pub const SERVICE_TRIGGER_TYPE_CUSTOM: u32 = 20;
    pub const SERVICE_TRIGGER_TYPE_AGGREGATE: u32 = 30;
    pub const SERVICE_TRIGGER_DATA_TYPE_BINARY: u32 = 1;
    pub const SERVICE_TRIGGER_DATA_TYPE_STRING: u32 = 2;
    pub const SERVICE_TRIGGER_DATA_TYPE_LEVEL: u32 = 3;
    pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY: u32 = 4;
    pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL: u32 = 5;
    pub const SERVICE_START_REASON_DEMAND: u32 = 1;
    pub const SERVICE_START_REASON_AUTO: u32 = 2;
    pub const SERVICE_START_REASON_TRIGGER: u32 = 4;
    pub const SERVICE_START_REASON_RESTART_ON_FAILURE: u32 = 8;
    pub const SERVICE_START_REASON_DELAYEDAUTO: u32 = 16;
    pub const SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON: u32 = 1;
    pub const SERVICE_LAUNCH_PROTECTED_NONE: u32 = 0;
    pub const SERVICE_LAUNCH_PROTECTED_WINDOWS: u32 = 1;
    pub const SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT: u32 = 2;
    pub const SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT: u32 = 3;
    pub const SERVICE_TRIGGER_ACTION_SERVICE_START: u32 = 1;
    pub const SERVICE_TRIGGER_ACTION_SERVICE_STOP: u32 = 2;
    pub const SERVICE_TRIGGER_STARTED_ARGUMENT: &[u8; 15usize] = b"TriggerStarted\0";
    pub const SC_AGGREGATE_STORAGE_KEY: &[u8; 57usize] =
        b"System\\CurrentControlSet\\Control\\ServiceAggregatedEvents\0";
    pub const DIALOPTION_BILLING: u32 = 64;
    pub const DIALOPTION_QUIET: u32 = 128;
    pub const DIALOPTION_DIALTONE: u32 = 256;
    pub const MDMVOLFLAG_LOW: u32 = 1;
    pub const MDMVOLFLAG_MEDIUM: u32 = 2;
    pub const MDMVOLFLAG_HIGH: u32 = 4;
    pub const MDMVOL_LOW: u32 = 0;
    pub const MDMVOL_MEDIUM: u32 = 1;
    pub const MDMVOL_HIGH: u32 = 2;
    pub const MDMSPKRFLAG_OFF: u32 = 1;
    pub const MDMSPKRFLAG_DIAL: u32 = 2;
    pub const MDMSPKRFLAG_ON: u32 = 4;
    pub const MDMSPKRFLAG_CALLSETUP: u32 = 8;
    pub const MDMSPKR_OFF: u32 = 0;
    pub const MDMSPKR_DIAL: u32 = 1;
    pub const MDMSPKR_ON: u32 = 2;
    pub const MDMSPKR_CALLSETUP: u32 = 3;
    pub const MDM_COMPRESSION: u32 = 1;
    pub const MDM_ERROR_CONTROL: u32 = 2;
    pub const MDM_FORCED_EC: u32 = 4;
    pub const MDM_CELLULAR: u32 = 8;
    pub const MDM_FLOWCONTROL_HARD: u32 = 16;
    pub const MDM_FLOWCONTROL_SOFT: u32 = 32;
    pub const MDM_CCITT_OVERRIDE: u32 = 64;
    pub const MDM_SPEED_ADJUST: u32 = 128;
    pub const MDM_TONE_DIAL: u32 = 256;
    pub const MDM_BLIND_DIAL: u32 = 512;
    pub const MDM_V23_OVERRIDE: u32 = 1024;
    pub const MDM_DIAGNOSTICS: u32 = 2048;
    pub const MDM_MASK_BEARERMODE: u32 = 61440;
    pub const MDM_SHIFT_BEARERMODE: u32 = 12;
    pub const MDM_MASK_PROTOCOLID: u32 = 983040;
    pub const MDM_SHIFT_PROTOCOLID: u32 = 16;
    pub const MDM_MASK_PROTOCOLDATA: u32 = 267386880;
    pub const MDM_SHIFT_PROTOCOLDATA: u32 = 20;
    pub const MDM_MASK_PROTOCOLINFO: u32 = 268369920;
    pub const MDM_SHIFT_PROTOCOLINFO: u32 = 16;
    pub const MDM_MASK_EXTENDEDINFO: u32 = 268431360;
    pub const MDM_SHIFT_EXTENDEDINFO: u32 = 12;
    pub const MDM_BEARERMODE_ANALOG: u32 = 0;
    pub const MDM_BEARERMODE_ISDN: u32 = 1;
    pub const MDM_BEARERMODE_GSM: u32 = 2;
    pub const MDM_PROTOCOLID_DEFAULT: u32 = 0;
    pub const MDM_PROTOCOLID_HDLCPPP: u32 = 1;
    pub const MDM_PROTOCOLID_V128: u32 = 2;
    pub const MDM_PROTOCOLID_X75: u32 = 3;
    pub const MDM_PROTOCOLID_V110: u32 = 4;
    pub const MDM_PROTOCOLID_V120: u32 = 5;
    pub const MDM_PROTOCOLID_AUTO: u32 = 6;
    pub const MDM_PROTOCOLID_ANALOG: u32 = 7;
    pub const MDM_PROTOCOLID_GPRS: u32 = 8;
    pub const MDM_PROTOCOLID_PIAFS: u32 = 9;
    pub const MDM_SHIFT_HDLCPPP_SPEED: u32 = 0;
    pub const MDM_MASK_HDLCPPP_SPEED: u32 = 7;
    pub const MDM_HDLCPPP_SPEED_DEFAULT: u32 = 0;
    pub const MDM_HDLCPPP_SPEED_64K: u32 = 1;
    pub const MDM_HDLCPPP_SPEED_56K: u32 = 2;
    pub const MDM_SHIFT_HDLCPPP_AUTH: u32 = 3;
    pub const MDM_MASK_HDLCPPP_AUTH: u32 = 56;
    pub const MDM_HDLCPPP_AUTH_DEFAULT: u32 = 0;
    pub const MDM_HDLCPPP_AUTH_NONE: u32 = 1;
    pub const MDM_HDLCPPP_AUTH_PAP: u32 = 2;
    pub const MDM_HDLCPPP_AUTH_CHAP: u32 = 3;
    pub const MDM_HDLCPPP_AUTH_MSCHAP: u32 = 4;
    pub const MDM_SHIFT_HDLCPPP_ML: u32 = 6;
    pub const MDM_MASK_HDLCPPP_ML: u32 = 192;
    pub const MDM_HDLCPPP_ML_DEFAULT: u32 = 0;
    pub const MDM_HDLCPPP_ML_NONE: u32 = 1;
    pub const MDM_HDLCPPP_ML_2: u32 = 2;
    pub const MDM_SHIFT_V120_SPEED: u32 = 0;
    pub const MDM_MASK_V120_SPEED: u32 = 7;
    pub const MDM_V120_SPEED_DEFAULT: u32 = 0;
    pub const MDM_V120_SPEED_64K: u32 = 1;
    pub const MDM_V120_SPEED_56K: u32 = 2;
    pub const MDM_SHIFT_V120_ML: u32 = 6;
    pub const MDM_MASK_V120_ML: u32 = 192;
    pub const MDM_V120_ML_DEFAULT: u32 = 0;
    pub const MDM_V120_ML_NONE: u32 = 1;
    pub const MDM_V120_ML_2: u32 = 2;
    pub const MDM_SHIFT_X75_DATA: u32 = 0;
    pub const MDM_MASK_X75_DATA: u32 = 7;
    pub const MDM_X75_DATA_DEFAULT: u32 = 0;
    pub const MDM_X75_DATA_64K: u32 = 1;
    pub const MDM_X75_DATA_128K: u32 = 2;
    pub const MDM_X75_DATA_T_70: u32 = 3;
    pub const MDM_X75_DATA_BTX: u32 = 4;
    pub const MDM_SHIFT_V110_SPEED: u32 = 0;
    pub const MDM_MASK_V110_SPEED: u32 = 15;
    pub const MDM_V110_SPEED_DEFAULT: u32 = 0;
    pub const MDM_V110_SPEED_1DOT2K: u32 = 1;
    pub const MDM_V110_SPEED_2DOT4K: u32 = 2;
    pub const MDM_V110_SPEED_4DOT8K: u32 = 3;
    pub const MDM_V110_SPEED_9DOT6K: u32 = 4;
    pub const MDM_V110_SPEED_12DOT0K: u32 = 5;
    pub const MDM_V110_SPEED_14DOT4K: u32 = 6;
    pub const MDM_V110_SPEED_19DOT2K: u32 = 7;
    pub const MDM_V110_SPEED_28DOT8K: u32 = 8;
    pub const MDM_V110_SPEED_38DOT4K: u32 = 9;
    pub const MDM_V110_SPEED_57DOT6K: u32 = 10;
    pub const MDM_SHIFT_AUTO_SPEED: u32 = 0;
    pub const MDM_MASK_AUTO_SPEED: u32 = 7;
    pub const MDM_AUTO_SPEED_DEFAULT: u32 = 0;
    pub const MDM_SHIFT_AUTO_ML: u32 = 6;
    pub const MDM_MASK_AUTO_ML: u32 = 192;
    pub const MDM_AUTO_ML_DEFAULT: u32 = 0;
    pub const MDM_AUTO_ML_NONE: u32 = 1;
    pub const MDM_AUTO_ML_2: u32 = 2;
    pub const MDM_ANALOG_RLP_ON: u32 = 0;
    pub const MDM_ANALOG_RLP_OFF: u32 = 1;
    pub const MDM_ANALOG_V34: u32 = 2;
    pub const MDM_PIAFS_INCOMING: u32 = 0;
    pub const MDM_PIAFS_OUTGOING: u32 = 1;
    pub const STYLE_DESCRIPTION_SIZE: u32 = 32;
    pub const IMEMENUITEM_STRING_SIZE: u32 = 80;
    pub const IMC_GETCANDIDATEPOS: u32 = 7;
    pub const IMC_SETCANDIDATEPOS: u32 = 8;
    pub const IMC_GETCOMPOSITIONFONT: u32 = 9;
    pub const IMC_SETCOMPOSITIONFONT: u32 = 10;
    pub const IMC_GETCOMPOSITIONWINDOW: u32 = 11;
    pub const IMC_SETCOMPOSITIONWINDOW: u32 = 12;
    pub const IMC_GETSTATUSWINDOWPOS: u32 = 15;
    pub const IMC_SETSTATUSWINDOWPOS: u32 = 16;
    pub const IMC_CLOSESTATUSWINDOW: u32 = 33;
    pub const IMC_OPENSTATUSWINDOW: u32 = 34;
    pub const NI_OPENCANDIDATE: u32 = 16;
    pub const NI_CLOSECANDIDATE: u32 = 17;
    pub const NI_SELECTCANDIDATESTR: u32 = 18;
    pub const NI_CHANGECANDIDATELIST: u32 = 19;
    pub const NI_FINALIZECONVERSIONRESULT: u32 = 20;
    pub const NI_COMPOSITIONSTR: u32 = 21;
    pub const NI_SETCANDIDATE_PAGESTART: u32 = 22;
    pub const NI_SETCANDIDATE_PAGESIZE: u32 = 23;
    pub const NI_IMEMENUSELECTED: u32 = 24;
    pub const ISC_SHOWUICANDIDATEWINDOW: u32 = 1;
    pub const ISC_SHOWUICOMPOSITIONWINDOW: u32 = 2147483648;
    pub const ISC_SHOWUIGUIDELINE: u32 = 1073741824;
    pub const ISC_SHOWUIALLCANDIDATEWINDOW: u32 = 15;
    pub const ISC_SHOWUIALL: u32 = 3221225487;
    pub const CPS_COMPLETE: u32 = 1;
    pub const CPS_CONVERT: u32 = 2;
    pub const CPS_REVERT: u32 = 3;
    pub const CPS_CANCEL: u32 = 4;
    pub const MOD_LEFT: u32 = 32768;
    pub const MOD_RIGHT: u32 = 16384;
    pub const MOD_ON_KEYUP: u32 = 2048;
    pub const MOD_IGNORE_ALL_MODIFIER: u32 = 1024;
    pub const IME_CHOTKEY_IME_NONIME_TOGGLE: u32 = 16;
    pub const IME_CHOTKEY_SHAPE_TOGGLE: u32 = 17;
    pub const IME_CHOTKEY_SYMBOL_TOGGLE: u32 = 18;
    pub const IME_JHOTKEY_CLOSE_OPEN: u32 = 48;
    pub const IME_KHOTKEY_SHAPE_TOGGLE: u32 = 80;
    pub const IME_KHOTKEY_HANJACONVERT: u32 = 81;
    pub const IME_KHOTKEY_ENGLISH: u32 = 82;
    pub const IME_THOTKEY_IME_NONIME_TOGGLE: u32 = 112;
    pub const IME_THOTKEY_SHAPE_TOGGLE: u32 = 113;
    pub const IME_THOTKEY_SYMBOL_TOGGLE: u32 = 114;
    pub const IME_HOTKEY_DSWITCH_FIRST: u32 = 256;
    pub const IME_HOTKEY_DSWITCH_LAST: u32 = 287;
    pub const IME_HOTKEY_PRIVATE_FIRST: u32 = 512;
    pub const IME_ITHOTKEY_RESEND_RESULTSTR: u32 = 512;
    pub const IME_ITHOTKEY_PREVIOUS_COMPOSITION: u32 = 513;
    pub const IME_ITHOTKEY_UISTYLE_TOGGLE: u32 = 514;
    pub const IME_ITHOTKEY_RECONVERTSTRING: u32 = 515;
    pub const IME_HOTKEY_PRIVATE_LAST: u32 = 543;
    pub const GCS_COMPREADSTR: u32 = 1;
    pub const GCS_COMPREADATTR: u32 = 2;
    pub const GCS_COMPREADCLAUSE: u32 = 4;
    pub const GCS_COMPSTR: u32 = 8;
    pub const GCS_COMPATTR: u32 = 16;
    pub const GCS_COMPCLAUSE: u32 = 32;
    pub const GCS_CURSORPOS: u32 = 128;
    pub const GCS_DELTASTART: u32 = 256;
    pub const GCS_RESULTREADSTR: u32 = 512;
    pub const GCS_RESULTREADCLAUSE: u32 = 1024;
    pub const GCS_RESULTSTR: u32 = 2048;
    pub const GCS_RESULTCLAUSE: u32 = 4096;
    pub const CS_INSERTCHAR: u32 = 8192;
    pub const CS_NOMOVECARET: u32 = 16384;
    pub const IMEVER_0310: u32 = 196618;
    pub const IMEVER_0400: u32 = 262144;
    pub const IME_PROP_AT_CARET: u32 = 65536;
    pub const IME_PROP_SPECIAL_UI: u32 = 131072;
    pub const IME_PROP_CANDLIST_START_FROM_1: u32 = 262144;
    pub const IME_PROP_UNICODE: u32 = 524288;
    pub const IME_PROP_COMPLETE_ON_UNSELECT: u32 = 1048576;
    pub const UI_CAP_2700: u32 = 1;
    pub const UI_CAP_ROT90: u32 = 2;
    pub const UI_CAP_ROTANY: u32 = 4;
    pub const SCS_CAP_COMPSTR: u32 = 1;
    pub const SCS_CAP_MAKEREAD: u32 = 2;
    pub const SCS_CAP_SETRECONVERTSTRING: u32 = 4;
    pub const SELECT_CAP_CONVERSION: u32 = 1;
    pub const SELECT_CAP_SENTENCE: u32 = 2;
    pub const GGL_LEVEL: u32 = 1;
    pub const GGL_INDEX: u32 = 2;
    pub const GGL_STRING: u32 = 3;
    pub const GGL_PRIVATE: u32 = 4;
    pub const GL_LEVEL_NOGUIDELINE: u32 = 0;
    pub const GL_LEVEL_FATAL: u32 = 1;
    pub const GL_LEVEL_ERROR: u32 = 2;
    pub const GL_LEVEL_WARNING: u32 = 3;
    pub const GL_LEVEL_INFORMATION: u32 = 4;
    pub const GL_ID_UNKNOWN: u32 = 0;
    pub const GL_ID_NOMODULE: u32 = 1;
    pub const GL_ID_NODICTIONARY: u32 = 16;
    pub const GL_ID_CANNOTSAVE: u32 = 17;
    pub const GL_ID_NOCONVERT: u32 = 32;
    pub const GL_ID_TYPINGERROR: u32 = 33;
    pub const GL_ID_TOOMANYSTROKE: u32 = 34;
    pub const GL_ID_READINGCONFLICT: u32 = 35;
    pub const GL_ID_INPUTREADING: u32 = 36;
    pub const GL_ID_INPUTRADICAL: u32 = 37;
    pub const GL_ID_INPUTCODE: u32 = 38;
    pub const GL_ID_INPUTSYMBOL: u32 = 39;
    pub const GL_ID_CHOOSECANDIDATE: u32 = 40;
    pub const GL_ID_REVERSECONVERSION: u32 = 41;
    pub const GL_ID_PRIVATE_FIRST: u32 = 32768;
    pub const GL_ID_PRIVATE_LAST: u32 = 65535;
    pub const IGP_PROPERTY: u32 = 4;
    pub const IGP_CONVERSION: u32 = 8;
    pub const IGP_SENTENCE: u32 = 12;
    pub const IGP_UI: u32 = 16;
    pub const IGP_SETCOMPSTR: u32 = 20;
    pub const IGP_SELECT: u32 = 24;
    pub const SCS_SETSTR: u32 = 9;
    pub const SCS_CHANGEATTR: u32 = 18;
    pub const SCS_CHANGECLAUSE: u32 = 36;
    pub const SCS_SETRECONVERTSTRING: u32 = 65536;
    pub const SCS_QUERYRECONVERTSTRING: u32 = 131072;
    pub const ATTR_INPUT: u32 = 0;
    pub const ATTR_TARGET_CONVERTED: u32 = 1;
    pub const ATTR_CONVERTED: u32 = 2;
    pub const ATTR_TARGET_NOTCONVERTED: u32 = 3;
    pub const ATTR_INPUT_ERROR: u32 = 4;
    pub const ATTR_FIXEDCONVERTED: u32 = 5;
    pub const CFS_DEFAULT: u32 = 0;
    pub const CFS_RECT: u32 = 1;
    pub const CFS_POINT: u32 = 2;
    pub const CFS_FORCE_POSITION: u32 = 32;
    pub const CFS_CANDIDATEPOS: u32 = 64;
    pub const CFS_EXCLUDE: u32 = 128;
    pub const GCL_CONVERSION: u32 = 1;
    pub const GCL_REVERSECONVERSION: u32 = 2;
    pub const GCL_REVERSE_LENGTH: u32 = 3;
    pub const IME_CMODE_ALPHANUMERIC: u32 = 0;
    pub const IME_CMODE_NATIVE: u32 = 1;
    pub const IME_CMODE_CHINESE: u32 = 1;
    pub const IME_CMODE_HANGUL: u32 = 1;
    pub const IME_CMODE_JAPANESE: u32 = 1;
    pub const IME_CMODE_KATAKANA: u32 = 2;
    pub const IME_CMODE_LANGUAGE: u32 = 3;
    pub const IME_CMODE_FULLSHAPE: u32 = 8;
    pub const IME_CMODE_ROMAN: u32 = 16;
    pub const IME_CMODE_CHARCODE: u32 = 32;
    pub const IME_CMODE_HANJACONVERT: u32 = 64;
    pub const IME_CMODE_NATIVESYMBOL: u32 = 128;
    pub const IME_CMODE_HANGEUL: u32 = 1;
    pub const IME_CMODE_SOFTKBD: u32 = 128;
    pub const IME_CMODE_NOCONVERSION: u32 = 256;
    pub const IME_CMODE_EUDC: u32 = 512;
    pub const IME_CMODE_SYMBOL: u32 = 1024;
    pub const IME_CMODE_FIXED: u32 = 2048;
    pub const IME_CMODE_RESERVED: u32 = 4026531840;
    pub const IME_SMODE_NONE: u32 = 0;
    pub const IME_SMODE_PLAURALCLAUSE: u32 = 1;
    pub const IME_SMODE_SINGLECONVERT: u32 = 2;
    pub const IME_SMODE_AUTOMATIC: u32 = 4;
    pub const IME_SMODE_PHRASEPREDICT: u32 = 8;
    pub const IME_SMODE_CONVERSATION: u32 = 16;
    pub const IME_SMODE_RESERVED: u32 = 61440;
    pub const IME_CAND_UNKNOWN: u32 = 0;
    pub const IME_CAND_READ: u32 = 1;
    pub const IME_CAND_CODE: u32 = 2;
    pub const IME_CAND_MEANING: u32 = 3;
    pub const IME_CAND_RADICAL: u32 = 4;
    pub const IME_CAND_STROKE: u32 = 5;
    pub const IMN_CLOSESTATUSWINDOW: u32 = 1;
    pub const IMN_OPENSTATUSWINDOW: u32 = 2;
    pub const IMN_CHANGECANDIDATE: u32 = 3;
    pub const IMN_CLOSECANDIDATE: u32 = 4;
    pub const IMN_OPENCANDIDATE: u32 = 5;
    pub const IMN_SETCONVERSIONMODE: u32 = 6;
    pub const IMN_SETSENTENCEMODE: u32 = 7;
    pub const IMN_SETOPENSTATUS: u32 = 8;
    pub const IMN_SETCANDIDATEPOS: u32 = 9;
    pub const IMN_SETCOMPOSITIONFONT: u32 = 10;
    pub const IMN_SETCOMPOSITIONWINDOW: u32 = 11;
    pub const IMN_SETSTATUSWINDOWPOS: u32 = 12;
    pub const IMN_GUIDELINE: u32 = 13;
    pub const IMN_PRIVATE: u32 = 14;
    pub const IMR_COMPOSITIONWINDOW: u32 = 1;
    pub const IMR_CANDIDATEWINDOW: u32 = 2;
    pub const IMR_COMPOSITIONFONT: u32 = 3;
    pub const IMR_RECONVERTSTRING: u32 = 4;
    pub const IMR_CONFIRMRECONVERTSTRING: u32 = 5;
    pub const IMR_QUERYCHARPOSITION: u32 = 6;
    pub const IMR_DOCUMENTFEED: u32 = 7;
    pub const IMM_ERROR_NODATA: i32 = -1;
    pub const IMM_ERROR_GENERAL: i32 = -2;
    pub const IME_CONFIG_GENERAL: u32 = 1;
    pub const IME_CONFIG_REGISTERWORD: u32 = 2;
    pub const IME_CONFIG_SELECTDICTIONARY: u32 = 3;
    pub const IME_ESC_QUERY_SUPPORT: u32 = 3;
    pub const IME_ESC_RESERVED_FIRST: u32 = 4;
    pub const IME_ESC_RESERVED_LAST: u32 = 2047;
    pub const IME_ESC_PRIVATE_FIRST: u32 = 2048;
    pub const IME_ESC_PRIVATE_LAST: u32 = 4095;
    pub const IME_ESC_SEQUENCE_TO_INTERNAL: u32 = 4097;
    pub const IME_ESC_GET_EUDC_DICTIONARY: u32 = 4099;
    pub const IME_ESC_SET_EUDC_DICTIONARY: u32 = 4100;
    pub const IME_ESC_MAX_KEY: u32 = 4101;
    pub const IME_ESC_IME_NAME: u32 = 4102;
    pub const IME_ESC_SYNC_HOTKEY: u32 = 4103;
    pub const IME_ESC_HANJA_MODE: u32 = 4104;
    pub const IME_ESC_AUTOMATA: u32 = 4105;
    pub const IME_ESC_PRIVATE_HOTKEY: u32 = 4106;
    pub const IME_ESC_GETHELPFILENAME: u32 = 4107;
    pub const IME_REGWORD_STYLE_EUDC: u32 = 1;
    pub const IME_REGWORD_STYLE_USER_FIRST: u32 = 2147483648;
    pub const IME_REGWORD_STYLE_USER_LAST: u32 = 4294967295;
    pub const IACE_CHILDREN: u32 = 1;
    pub const IACE_DEFAULT: u32 = 16;
    pub const IACE_IGNORENOCONTEXT: u32 = 32;
    pub const IGIMIF_RIGHTMENU: u32 = 1;
    pub const IGIMII_CMODE: u32 = 1;
    pub const IGIMII_SMODE: u32 = 2;
    pub const IGIMII_CONFIGURE: u32 = 4;
    pub const IGIMII_TOOLS: u32 = 8;
    pub const IGIMII_HELP: u32 = 16;
    pub const IGIMII_OTHER: u32 = 32;
    pub const IGIMII_INPUTTOOLS: u32 = 64;
    pub const IMFT_RADIOCHECK: u32 = 1;
    pub const IMFT_SEPARATOR: u32 = 2;
    pub const IMFT_SUBMENU: u32 = 4;
    pub const IMFS_GRAYED: u32 = 3;
    pub const IMFS_DISABLED: u32 = 3;
    pub const IMFS_CHECKED: u32 = 8;
    pub const IMFS_HILITE: u32 = 128;
    pub const IMFS_ENABLED: u32 = 0;
    pub const IMFS_UNCHECKED: u32 = 0;
    pub const IMFS_UNHILITE: u32 = 0;
    pub const IMFS_DEFAULT: u32 = 4096;
    pub const SOFTKEYBOARD_TYPE_T1: u32 = 1;
    pub const SOFTKEYBOARD_TYPE_C1: u32 = 2;
    pub const PERCEIVEDFLAG_UNDEFINED: u32 = 0;
    pub const PERCEIVEDFLAG_SOFTCODED: u32 = 1;
    pub const PERCEIVEDFLAG_HARDCODED: u32 = 2;
    pub const PERCEIVEDFLAG_NATIVESUPPORT: u32 = 4;
    pub const PERCEIVEDFLAG_GDIPLUS: u32 = 16;
    pub const PERCEIVEDFLAG_WMSDK: u32 = 32;
    pub const PERCEIVEDFLAG_ZIPFOLDER: u32 = 64;
    pub const STIF_DEFAULT: u32 = 0;
    pub const STIF_SUPPORT_HEX: u32 = 1;
    pub const SZ_CONTENTTYPE_HTMLA: &[u8; 10usize] = b"text/html\0";
    pub const SZ_CONTENTTYPE_HTMLW: &[u8; 10usize] = b"text/html\0";
    pub const SZ_CONTENTTYPE_CDFA: &[u8; 18usize] = b"application/x-cdf\0";
    pub const SZ_CONTENTTYPE_CDFW: &[u8; 18usize] = b"application/x-cdf\0";
    pub const SZ_CONTENTTYPE_HTML: &[u8; 10usize] = b"text/html\0";
    pub const SZ_CONTENTTYPE_CDF: &[u8; 18usize] = b"application/x-cdf\0";
    pub const GCT_INVALID: u32 = 0;
    pub const GCT_LFNCHAR: u32 = 1;
    pub const GCT_SHORTCHAR: u32 = 2;
    pub const GCT_WILD: u32 = 4;
    pub const GCT_SEPARATOR: u32 = 8;
    pub const PMSF_NORMAL: u32 = 0;
    pub const PMSF_MULTIPLE: u32 = 1;
    pub const PMSF_DONT_STRIP_SPACES: u32 = 65536;
    pub const URL_UNESCAPE: u32 = 268435456;
    pub const URL_ESCAPE_UNSAFE: u32 = 536870912;
    pub const URL_PLUGGABLE_PROTOCOL: u32 = 1073741824;
    pub const URL_WININET_COMPATIBILITY: u32 = 2147483648;
    pub const URL_DONT_ESCAPE_EXTRA_INFO: u32 = 33554432;
    pub const URL_DONT_UNESCAPE_EXTRA_INFO: u32 = 33554432;
    pub const URL_BROWSER_MODE: u32 = 33554432;
    pub const URL_ESCAPE_SPACES_ONLY: u32 = 67108864;
    pub const URL_DONT_SIMPLIFY: u32 = 134217728;
    pub const URL_NO_META: u32 = 134217728;
    pub const URL_UNESCAPE_INPLACE: u32 = 1048576;
    pub const URL_CONVERT_IF_DOSPATH: u32 = 2097152;
    pub const URL_UNESCAPE_HIGH_ANSI_ONLY: u32 = 4194304;
    pub const URL_INTERNAL_PATH: u32 = 8388608;
    pub const URL_FILE_USE_PATHURL: u32 = 65536;
    pub const URL_DONT_UNESCAPE: u32 = 131072;
    pub const URL_ESCAPE_AS_UTF8: u32 = 262144;
    pub const URL_UNESCAPE_AS_UTF8: u32 = 262144;
    pub const URL_ESCAPE_ASCII_URI_COMPONENT: u32 = 524288;
    pub const URL_ESCAPE_URI_COMPONENT: u32 = 786432;
    pub const URL_UNESCAPE_URI_COMPONENT: u32 = 262144;
    pub const URL_ESCAPE_PERCENT: u32 = 4096;
    pub const URL_ESCAPE_SEGMENT_ONLY: u32 = 8192;
    pub const URL_PARTFLAG_KEEPSCHEME: u32 = 1;
    pub const URL_APPLY_DEFAULT: u32 = 1;
    pub const URL_APPLY_GUESSSCHEME: u32 = 2;
    pub const URL_APPLY_GUESSFILE: u32 = 4;
    pub const URL_APPLY_FORCEAPPLY: u32 = 8;
    pub const SRRF_RT_REG_NONE: u32 = 1;
    pub const SRRF_RT_REG_SZ: u32 = 2;
    pub const SRRF_RT_REG_EXPAND_SZ: u32 = 4;
    pub const SRRF_RT_REG_BINARY: u32 = 8;
    pub const SRRF_RT_REG_DWORD: u32 = 16;
    pub const SRRF_RT_REG_MULTI_SZ: u32 = 32;
    pub const SRRF_RT_REG_QWORD: u32 = 64;
    pub const SRRF_RT_DWORD: u32 = 24;
    pub const SRRF_RT_QWORD: u32 = 72;
    pub const SRRF_RT_ANY: u32 = 65535;
    pub const SRRF_RM_ANY: u32 = 0;
    pub const SRRF_RM_NORMAL: u32 = 65536;
    pub const SRRF_RM_SAFE: u32 = 131072;
    pub const SRRF_RM_SAFENETWORK: u32 = 262144;
    pub const SRRF_NOEXPAND: u32 = 268435456;
    pub const SRRF_ZEROONFAILURE: u32 = 536870912;
    pub const SRRF_NOVIRT: u32 = 1073741824;
    pub const SHREGSET_HKCU: u32 = 1;
    pub const SHREGSET_FORCE_HKCU: u32 = 2;
    pub const SHREGSET_HKLM: u32 = 4;
    pub const SHREGSET_FORCE_HKLM: u32 = 8;
    pub const SHREGSET_DEFAULT: u32 = 6;
    pub const SHGVSPB_PERUSER: u32 = 1;
    pub const SHGVSPB_ALLUSERS: u32 = 2;
    pub const SHGVSPB_PERFOLDER: u32 = 4;
    pub const SHGVSPB_ALLFOLDERS: u32 = 8;
    pub const SHGVSPB_INHERIT: u32 = 16;
    pub const SHGVSPB_ROAM: u32 = 32;
    pub const SHGVSPB_NOAUTODEFAULTS: u32 = 2147483648;
    pub const SHGVSPB_FOLDER: u32 = 5;
    pub const SHGVSPB_FOLDERNODEFAULTS: u32 = 2147483653;
    pub const SHGVSPB_USERDEFAULTS: u32 = 9;
    pub const SHGVSPB_GLOBALDEFAULTS: u32 = 10;
    pub const FDTF_SHORTTIME: u32 = 1;
    pub const FDTF_SHORTDATE: u32 = 2;
    pub const FDTF_DEFAULT: u32 = 3;
    pub const FDTF_LONGDATE: u32 = 4;
    pub const FDTF_LONGTIME: u32 = 8;
    pub const FDTF_RELATIVE: u32 = 16;
    pub const FDTF_LTRDATE: u32 = 256;
    pub const FDTF_RTLDATE: u32 = 512;
    pub const FDTF_NOAUTOREADINGORDER: u32 = 1024;
    pub const OS_WINDOWS: u32 = 0;
    pub const OS_NT: u32 = 1;
    pub const OS_WIN95ORGREATER: u32 = 2;
    pub const OS_NT4ORGREATER: u32 = 3;
    pub const OS_WIN98ORGREATER: u32 = 5;
    pub const OS_WIN98_GOLD: u32 = 6;
    pub const OS_WIN2000ORGREATER: u32 = 7;
    pub const OS_WIN2000PRO: u32 = 8;
    pub const OS_WIN2000SERVER: u32 = 9;
    pub const OS_WIN2000ADVSERVER: u32 = 10;
    pub const OS_WIN2000DATACENTER: u32 = 11;
    pub const OS_WIN2000TERMINAL: u32 = 12;
    pub const OS_EMBEDDED: u32 = 13;
    pub const OS_TERMINALCLIENT: u32 = 14;
    pub const OS_TERMINALREMOTEADMIN: u32 = 15;
    pub const OS_WIN95_GOLD: u32 = 16;
    pub const OS_MEORGREATER: u32 = 17;
    pub const OS_XPORGREATER: u32 = 18;
    pub const OS_HOME: u32 = 19;
    pub const OS_PROFESSIONAL: u32 = 20;
    pub const OS_DATACENTER: u32 = 21;
    pub const OS_ADVSERVER: u32 = 22;
    pub const OS_SERVER: u32 = 23;
    pub const OS_TERMINALSERVER: u32 = 24;
    pub const OS_PERSONALTERMINALSERVER: u32 = 25;
    pub const OS_FASTUSERSWITCHING: u32 = 26;
    pub const OS_WELCOMELOGONUI: u32 = 27;
    pub const OS_DOMAINMEMBER: u32 = 28;
    pub const OS_ANYSERVER: u32 = 29;
    pub const OS_WOW6432: u32 = 30;
    pub const OS_WEBSERVER: u32 = 31;
    pub const OS_SMALLBUSINESSSERVER: u32 = 32;
    pub const OS_TABLETPC: u32 = 33;
    pub const OS_SERVERADMINUI: u32 = 34;
    pub const OS_MEDIACENTER: u32 = 35;
    pub const OS_APPLIANCE: u32 = 36;
    pub const PLATFORM_UNKNOWN: u32 = 0;
    pub const PLATFORM_IE3: u32 = 1;
    pub const PLATFORM_BROWSERONLY: u32 = 1;
    pub const PLATFORM_INTEGRATED: u32 = 2;
    pub const ILMM_IE4: u32 = 0;
    pub const SHACF_DEFAULT: u32 = 0;
    pub const SHACF_FILESYSTEM: u32 = 1;
    pub const SHACF_URLHISTORY: u32 = 2;
    pub const SHACF_URLMRU: u32 = 4;
    pub const SHACF_USETAB: u32 = 8;
    pub const SHACF_FILESYS_ONLY: u32 = 16;
    pub const SHACF_FILESYS_DIRS: u32 = 32;
    pub const SHACF_VIRTUAL_NAMESPACE: u32 = 64;
    pub const SHACF_AUTOSUGGEST_FORCE_ON: u32 = 268435456;
    pub const SHACF_AUTOSUGGEST_FORCE_OFF: u32 = 536870912;
    pub const SHACF_AUTOAPPEND_FORCE_ON: u32 = 1073741824;
    pub const SHACF_AUTOAPPEND_FORCE_OFF: u32 = 2147483648;
    pub const DLLVER_PLATFORM_WINDOWS: u32 = 1;
    pub const DLLVER_PLATFORM_NT: u32 = 2;
    pub const DLLVER_MAJOR_MASK: i64 = -281474976710656;
    pub const DLLVER_MINOR_MASK: u64 = 281470681743360;
    pub const DLLVER_BUILD_MASK: u32 = 4294901760;
    pub const DLLVER_QFE_MASK: u32 = 65535;
    pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
    pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
    pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
    pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
    pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
    pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
    pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
    pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
    pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
    pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
    pub const BUFSIZ: u32 = 512;
    pub const _NSTREAM_: u32 = 512;
    pub const _IOB_ENTRIES: u32 = 3;
    pub const EOF: i32 = -1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 64;
    pub const _IONBF: u32 = 4;
    pub const L_tmpnam: u32 = 260;
    pub const L_tmpnam_s: u32 = 260;
    pub const FILENAME_MAX: u32 = 260;
    pub const FOPEN_MAX: u32 = 20;
    pub const _SYS_OPEN: u32 = 20;
    pub const TMP_MAX: u32 = 2147483647;
    pub const TMP_MAX_S: u32 = 2147483647;
    pub const _TMP_MAX_S: u32 = 2147483647;
    pub const SYS_OPEN: u32 = 20;
    pub const STRSAFE_USE_SECURE_CRT: u32 = 0;
    pub const STRSAFE_MAX_CCH: u32 = 2147483647;
    pub const STRSAFE_MAX_LENGTH: u32 = 2147483646;
    pub const STRSAFE_IGNORE_NULLS: u32 = 256;
    pub const STRSAFE_FILL_BEHIND_NULL: u32 = 512;
    pub const STRSAFE_FILL_ON_FAILURE: u32 = 1024;
    pub const STRSAFE_NULL_ON_FAILURE: u32 = 2048;
    pub const STRSAFE_NO_TRUNCATION: u32 = 4096;
    pub const STRSAFE_VALID_FLAGS: u32 = 8191;
    pub const __WARNING_CYCLOMATIC_COMPLEXITY: u32 = 28734;
    pub const __WARNING_USING_UNINIT_VAR: u32 = 6001;
    pub const __WARNING_RETURN_UNINIT_VAR: u32 = 6101;
    pub const __WARNING_DEREF_NULL_PTR: u32 = 6011;
    pub const __WARNING_MISSING_ZERO_TERMINATION2: u32 = 6054;
    pub const __WARNING_INVALID_PARAM_VALUE_1: u32 = 6387;
    pub const __WARNING_INCORRECT_ANNOTATION: u32 = 26007;
    pub const __WARNING_POTENTIAL_BUFFER_OVERFLOW_HIGH_PRIORITY: u32 = 26015;
    pub const __WARNING_PRECONDITION_NULLTERMINATION_VIOLATION: u32 = 26035;
    pub const __WARNING_POSTCONDITION_NULLTERMINATION_VIOLATION: u32 = 26036;
    pub const __WARNING_HIGH_PRIORITY_OVERFLOW_POSTCONDITION: u32 = 26045;
    pub const __WARNING_RANGE_POSTCONDITION_VIOLATION: u32 = 26061;
    pub const __WARNING_POTENTIAL_RANGE_POSTCONDITION_VIOLATION: u32 = 26071;
    pub const __WARNING_INVALID_PARAM_VALUE_3: u32 = 28183;
    pub const __WARNING_RETURNING_BAD_RESULT: u32 = 28196;
    pub const __WARNING_BANNED_API_USAGE: u32 = 28719;
    pub const __WARNING_POST_EXPECTED: u32 = 28210;
    pub const _TEOF: i32 = -1;
    pub const FILTER_PROC_INFO_FLAG_INVERT_FIELD_ORDER: u32 = 65536;
    pub const FILTER_PROC_INFO_FLAG_INVERT_INTERLACE: u32 = 131072;
    pub const FRAME_STATUS_INTER_NORMAL: u32 = 0;
    pub const FRAME_STATUS_INTER_REVERSE: u32 = 1;
    pub const FRAME_STATUS_INTER_ODD: u32 = 2;
    pub const FRAME_STATUS_INTER_EVEN: u32 = 3;
    pub const FRAME_STATUS_INTER_MIX: u32 = 4;
    pub const FRAME_STATUS_INTER_AUTO: u32 = 5;
    pub const EDIT_FRAME_EDIT_FLAG_KEYFRAME: u32 = 1;
    pub const EDIT_FRAME_EDIT_FLAG_MARKFRAME: u32 = 2;
    pub const EDIT_FRAME_EDIT_FLAG_DELFRAME: u32 = 4;
    pub const EDIT_FRAME_EDIT_FLAG_NULLFRAME: u32 = 8;
    pub const FILE_INFO_FLAG_VIDEO: u32 = 1;
    pub const FILE_INFO_FLAG_AUDIO: u32 = 2;
    pub const SYS_INFO_FLAG_EDIT: u32 = 1;
    pub const SYS_INFO_FLAG_VFAPI: u32 = 2;
    pub const SYS_INFO_FLAG_USE_SSE: u32 = 4;
    pub const SYS_INFO_FLAG_USE_SSE2: u32 = 8;
    pub const AVI_FILE_OPEN_FLAG_VIDEO_ONLY: u32 = 16;
    pub const AVI_FILE_OPEN_FLAG_AUDIO_ONLY: u32 = 32;
    pub const AVI_FILE_OPEN_FLAG_ONLY_YUY2: u32 = 65536;
    pub const AVI_FILE_OPEN_FLAG_ONLY_RGB24: u32 = 131072;
    pub const AVI_FILE_OPEN_FLAG_ONLY_RGB32: u32 = 262144;
    pub const GET_AVI_FILE_FILTER_TYPE_VIDEO: u32 = 0;
    pub const GET_AVI_FILE_FILTER_TYPE_AUDIO: u32 = 1;
    pub const FARME_STATUS_TYPE_EDIT_FLAG: u32 = 0;
    pub const FARME_STATUS_TYPE_INTER: u32 = 1;
    pub const ADD_MENU_ITEM_FLAG_KEY_SHIFT: u32 = 1;
    pub const ADD_MENU_ITEM_FLAG_KEY_CTRL: u32 = 2;
    pub const ADD_MENU_ITEM_FLAG_KEY_ALT: u32 = 4;
    pub const EDIT_OPEN_FLAG_ADD: u32 = 2;
    pub const EDIT_OPEN_FLAG_AUDIO: u32 = 16;
    pub const EDIT_OPEN_FLAG_PROJECT: u32 = 512;
    pub const EDIT_OPEN_FLAG_DIALOG: u32 = 65536;
    pub const EDIT_OUTPUT_FLAG_NO_DIALOG: u32 = 2;
    pub const EDIT_OUTPUT_FLAG_WAV: u32 = 4;
    pub const FILTER_FLAG_ACTIVE: u32 = 1;
    pub const FILTER_FLAG_ALWAYS_ACTIVE: u32 = 4;
    pub const FILTER_FLAG_CONFIG_POPUP: u32 = 8;
    pub const FILTER_FLAG_CONFIG_CHECK: u32 = 16;
    pub const FILTER_FLAG_CONFIG_RADIO: u32 = 32;
    pub const FILTER_FLAG_EX_DATA: u32 = 1024;
    pub const FILTER_FLAG_PRIORITY_HIGHEST: u32 = 2048;
    pub const FILTER_FLAG_PRIORITY_LOWEST: u32 = 4096;
    pub const FILTER_FLAG_WINDOW_THICKFRAME: u32 = 8192;
    pub const FILTER_FLAG_WINDOW_SIZE: u32 = 16384;
    pub const FILTER_FLAG_DISP_FILTER: u32 = 32768;
    pub const FILTER_FLAG_REDRAW: u32 = 131072;
    pub const FILTER_FLAG_EX_INFORMATION: u32 = 262144;
    pub const FILTER_FLAG_INFORMATION: u32 = 524288;
    pub const FILTER_FLAG_NO_CONFIG: u32 = 1048576;
    pub const FILTER_FLAG_AUDIO_FILTER: u32 = 2097152;
    pub const FILTER_FLAG_RADIO_BUTTON: u32 = 4194304;
    pub const FILTER_FLAG_WINDOW_HSCROLL: u32 = 8388608;
    pub const FILTER_FLAG_WINDOW_VSCROLL: u32 = 16777216;
    pub const FILTER_FLAG_INTERLACE_FILTER: u32 = 67108864;
    pub const FILTER_FLAG_NO_INIT_DATA: u32 = 134217728;
    pub const FILTER_FLAG_IMPORT: u32 = 268435456;
    pub const FILTER_FLAG_EXPORT: u32 = 536870912;
    pub const FILTER_FLAG_MAIN_MESSAGE: u32 = 1073741824;
    pub const WM_FILTER_UPDATE: u32 = 1124;
    pub const WM_FILTER_FILE_OPEN: u32 = 1125;
    pub const WM_FILTER_FILE_CLOSE: u32 = 1126;
    pub const WM_FILTER_INIT: u32 = 1127;
    pub const WM_FILTER_EXIT: u32 = 1128;
    pub const WM_FILTER_SAVE_START: u32 = 1129;
    pub const WM_FILTER_SAVE_END: u32 = 1130;
    pub const WM_FILTER_IMPORT: u32 = 1131;
    pub const WM_FILTER_EXPORT: u32 = 1132;
    pub const WM_FILTER_CHANGE_ACTIVE: u32 = 1133;
    pub const WM_FILTER_CHANGE_WINDOW: u32 = 1134;
    pub const WM_FILTER_CHANGE_PARAM: u32 = 1135;
    pub const WM_FILTER_CHANGE_EDIT: u32 = 1136;
    pub const WM_FILTER_COMMAND: u32 = 1137;
    pub const WM_FILTER_FILE_UPDATE: u32 = 1138;
    pub const WM_FILTER_MAIN_MOUSE_DOWN: u32 = 1144;
    pub const WM_FILTER_MAIN_MOUSE_UP: u32 = 1145;
    pub const WM_FILTER_MAIN_MOUSE_MOVE: u32 = 1146;
    pub const WM_FILTER_MAIN_KEY_DOWN: u32 = 1147;
    pub const WM_FILTER_MAIN_KEY_UP: u32 = 1148;
    pub const WM_FILTER_MAIN_MOVESIZE: u32 = 1149;
    pub const WM_FILTER_MAIN_MOUSE_DBLCLK: u32 = 1150;
    pub const WM_FILTER_MAIN_MOUSE_R_DOWN: u32 = 1151;
    pub const WM_FILTER_MAIN_MOUSE_R_UP: u32 = 1152;
    pub const WM_FILTER_MAIN_MOUSE_WHEEL: u32 = 1153;
    pub const WM_FILTER_MAIN_CONTEXTMENU: u32 = 1154;
    pub const FILTER_UPDATE_STATUS_ALL: u32 = 0;
    pub const FILTER_UPDATE_STATUS_TRACK: u32 = 65536;
    pub const FILTER_UPDATE_STATUS_CHECK: u32 = 131072;
    pub const FILTER_WINDOW_SIZE_CLIENT: u32 = 268435456;
    pub const FILTER_WINDOW_SIZE_ADD: u32 = 805306368;
    pub const MID_FILTER_BUTTON: u32 = 12004;
    pub type va_list = *mut i8;
    extern "C" {
        pub fn __va_start(arg1: *mut root::va_list, ...);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __vcrt_va_list_is_reference {
        pub _address: u8,
    }
    pub const __vcrt_va_list_is_reference___the_value: bool = false;
    pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __vcrt_assert_va_start_is_not_reference {
        pub _address: u8,
    }
    pub type size_t = u64;
    pub type __vcrt_bool = bool;
    extern "C" {
        pub fn __security_init_cookie();
    }
    extern "C" {
        pub fn __security_check_cookie(_StackCookie: usize);
    }
    extern "C" {
        pub fn __report_gsfailure(_StackCookie: usize);
    }
    extern "C" {
        pub static mut __security_cookie: usize;
    }
    pub const _EXCEPTION_DISPOSITION_ExceptionContinueExecution: root::_EXCEPTION_DISPOSITION = 0;
    pub const _EXCEPTION_DISPOSITION_ExceptionContinueSearch: root::_EXCEPTION_DISPOSITION = 1;
    pub const _EXCEPTION_DISPOSITION_ExceptionNestedException: root::_EXCEPTION_DISPOSITION = 2;
    pub const _EXCEPTION_DISPOSITION_ExceptionCollidedUnwind: root::_EXCEPTION_DISPOSITION = 3;
    pub type _EXCEPTION_DISPOSITION = i32;
    pub use self::super::root::_EXCEPTION_DISPOSITION as EXCEPTION_DISPOSITION;
    extern "C" {
        pub fn __C_specific_handler(
            ExceptionRecord: *mut root::_EXCEPTION_RECORD,
            EstablisherFrame: *mut ::std::os::raw::c_void,
            ContextRecord: *mut root::_CONTEXT,
            DispatcherContext: *mut root::_DISPATCHER_CONTEXT,
        ) -> root::EXCEPTION_DISPOSITION;
    }
    extern "C" {
        pub fn _exception_code() -> u32;
    }
    extern "C" {
        pub fn _exception_info() -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _abnormal_termination() -> i32;
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    pub type ULONG = u32;
    pub type PULONG = *mut root::ULONG;
    pub type USHORT = u16;
    pub type PUSHORT = *mut root::USHORT;
    pub type UCHAR = u8;
    pub type PUCHAR = *mut root::UCHAR;
    pub type PSZ = *mut i8;
    pub type DWORD = u32;
    pub type BOOL = i32;
    pub type BYTE = u8;
    pub type WORD = u16;
    pub type FLOAT = f32;
    pub type PFLOAT = *mut root::FLOAT;
    pub type PBOOL = *mut root::BOOL;
    pub type LPBOOL = *mut root::BOOL;
    pub type PBYTE = *mut u8;
    pub type LPBYTE = *mut u8;
    pub type PINT = *mut i32;
    pub type LPINT = *mut i32;
    pub type PWORD = *mut u16;
    pub type LPWORD = *mut u16;
    pub type LPLONG = *mut i32;
    pub type PDWORD = *mut u32;
    pub type LPDWORD = *mut u32;
    pub type LPVOID = *mut ::std::os::raw::c_void;
    pub type LPCVOID = *const ::std::os::raw::c_void;
    pub type INT = i32;
    pub type UINT = u32;
    pub type PUINT = *mut u32;
    pub type __crt_bool = bool;
    extern "C" {
        pub fn _invalid_parameter_noinfo();
    }
    extern "C" {
        pub fn _invalid_parameter_noinfo_noreturn();
    }
    extern "C" {
        pub fn _invoke_watson(
            _Expression: *const u16,
            _FunctionName: *const u16,
            _FileName: *const u16,
            _LineNo: u32,
            _Reserved: usize,
        );
    }
    pub type errno_t = i32;
    pub type wint_t = u16;
    pub type wctype_t = u16;
    pub type __time32_t = i32;
    pub type __time64_t = i64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __crt_locale_data_public {
        pub _locale_pctype: *const u16,
        pub _locale_mb_cur_max: i32,
        pub _locale_lc_codepage: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __crt_locale_pointers {
        pub locinfo: *mut root::__crt_locale_data,
        pub mbcinfo: *mut root::__crt_multibyte_data,
    }
    pub type _locale_t = *mut root::__crt_locale_pointers;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _Mbstatet {
        pub _Wchar: u32,
        pub _Byte: u16,
        pub _State: u16,
    }
    pub type mbstate_t = root::_Mbstatet;
    pub type time_t = root::__time64_t;
    pub type rsize_t = root::size_t;
    extern "C" {
        pub fn __pctype_func() -> *const u16;
    }
    extern "C" {
        pub fn __pwctype_func() -> *const root::wctype_t;
    }
    extern "C" {
        pub fn iswalnum(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswalpha(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswascii(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswblank(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswcntrl(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswdigit(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswgraph(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswlower(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswprint(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswpunct(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswspace(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswupper(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn iswxdigit(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn __iswcsymf(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn __iswcsym(_C: root::wint_t) -> i32;
    }
    extern "C" {
        pub fn _iswalnum_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswalpha_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswblank_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswcntrl_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswdigit_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswgraph_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswlower_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswprint_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswpunct_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswspace_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswupper_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswxdigit_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswcsymf_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _iswcsym_l(_C: root::wint_t, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn towupper(_C: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn towlower(_C: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn iswctype(_C: root::wint_t, _Type: root::wctype_t) -> i32;
    }
    extern "C" {
        pub fn _towupper_l(_C: root::wint_t, _Locale: root::_locale_t) -> root::wint_t;
    }
    extern "C" {
        pub fn _towlower_l(_C: root::wint_t, _Locale: root::_locale_t) -> root::wint_t;
    }
    extern "C" {
        pub fn _iswctype_l(
            _C: root::wint_t,
            _Type: root::wctype_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isleadbyte(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isleadbyte_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn is_wctype(_C: root::wint_t, _Type: root::wctype_t) -> i32;
    }
    extern "C" {
        pub fn _isctype(
            _C: i32,
            _Type: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _isctype_l(
            _C: i32,
            _Type: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isalpha(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isalpha_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isupper(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isupper_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn islower(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _islower_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isdigit(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isdigit_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isxdigit(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isxdigit_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isspace(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isspace_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn ispunct(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _ispunct_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isblank(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isblank_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isalnum(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isalnum_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isprint(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isprint_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn isgraph(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _isgraph_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn iscntrl(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _iscntrl_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn toupper(_C: i32) -> i32;
    }
    extern "C" {
        pub fn tolower(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _tolower(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _tolower_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _toupper(_C: i32) -> i32;
    }
    extern "C" {
        pub fn _toupper_l(
            _C: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn __isascii(_C: i32) -> i32;
    }
    extern "C" {
        pub fn __toascii(_C: i32) -> i32;
    }
    extern "C" {
        pub fn __iscsymf(_C: i32) -> i32;
    }
    extern "C" {
        pub fn __iscsym(_C: i32) -> i32;
    }
    extern "C" {
        pub fn ___mb_cur_max_func() -> i32;
    }
    extern "C" {
        pub fn ___mb_cur_max_l_func(_Locale: root::_locale_t) -> i32;
    }
    pub type POINTER_64_INT = u64;
    pub type INT8 = i8;
    pub type PINT8 = *mut i8;
    pub type INT16 = i16;
    pub type PINT16 = *mut i16;
    pub type INT32 = i32;
    pub type PINT32 = *mut i32;
    pub type INT64 = i64;
    pub type PINT64 = *mut i64;
    pub type UINT8 = u8;
    pub type PUINT8 = *mut u8;
    pub type UINT16 = u16;
    pub type PUINT16 = *mut u16;
    pub type UINT32 = u32;
    pub type PUINT32 = *mut u32;
    pub type UINT64 = u64;
    pub type PUINT64 = *mut u64;
    pub type LONG32 = i32;
    pub type PLONG32 = *mut i32;
    pub type ULONG32 = u32;
    pub type PULONG32 = *mut u32;
    pub type DWORD32 = u32;
    pub type PDWORD32 = *mut u32;
    pub type INT_PTR = i64;
    pub type PINT_PTR = *mut i64;
    pub type UINT_PTR = u64;
    pub type PUINT_PTR = *mut u64;
    pub type LONG_PTR = i64;
    pub type PLONG_PTR = *mut i64;
    pub type ULONG_PTR = u64;
    pub type PULONG_PTR = *mut u64;
    pub type SHANDLE_PTR = i64;
    pub type HANDLE_PTR = u64;
    pub type UHALF_PTR = u32;
    pub type PUHALF_PTR = *mut u32;
    pub type HALF_PTR = i32;
    pub type PHALF_PTR = *mut i32;
    pub type SIZE_T = u64;
    pub type PSIZE_T = *mut u64;
    pub type SSIZE_T = i64;
    pub type PSSIZE_T = *mut i64;
    pub type DWORD_PTR = u64;
    pub type PDWORD_PTR = *mut u64;
    pub type LONG64 = i64;
    pub type PLONG64 = *mut i64;
    pub type ULONG64 = u64;
    pub type PULONG64 = *mut u64;
    pub type DWORD64 = u64;
    pub type PDWORD64 = *mut u64;
    pub type KAFFINITY = u64;
    pub type PKAFFINITY = *mut u64;
    pub type PVOID = *mut ::std::os::raw::c_void;
    pub type CHAR = i8;
    pub type SHORT = i16;
    pub type LONG = i32;
    pub type WCHAR = u16;
    pub type PWCHAR = *mut u16;
    pub type LPWCH = *mut u16;
    pub type PWCH = *mut u16;
    pub type LPCWCH = *const u16;
    pub type PCWCH = *const u16;
    pub type NWPSTR = *mut u16;
    pub type LPWSTR = *mut u16;
    pub type PWSTR = *mut u16;
    pub type PZPWSTR = *mut *mut u16;
    pub type PCZPWSTR = *const *mut u16;
    pub type LPUWSTR = *mut u16;
    pub type PUWSTR = *mut u16;
    pub type LPCWSTR = *const u16;
    pub type PCWSTR = *const u16;
    pub type PZPCWSTR = *mut *const u16;
    pub type PCZPCWSTR = *const *const u16;
    pub type LPCUWSTR = *const u16;
    pub type PCUWSTR = *const u16;
    pub type PZZWSTR = *mut u16;
    pub type PCZZWSTR = *const u16;
    pub type PUZZWSTR = *mut u16;
    pub type PCUZZWSTR = *const u16;
    pub type PNZWCH = *mut u16;
    pub type PCNZWCH = *const u16;
    pub type PUNZWCH = *mut u16;
    pub type PCUNZWCH = *const u16;
    pub type LPCWCHAR = *const u16;
    pub type PCWCHAR = *const u16;
    pub type LPCUWCHAR = *const u16;
    pub type PCUWCHAR = *const u16;
    pub type UCSCHAR = u32;
    pub type PUCSCHAR = *mut u32;
    pub type PCUCSCHAR = *const u32;
    pub type PUCSSTR = *mut u32;
    pub type PUUCSSTR = *mut u32;
    pub type PCUCSSTR = *const u32;
    pub type PCUUCSSTR = *const u32;
    pub type PUUCSCHAR = *mut u32;
    pub type PCUUCSCHAR = *const u32;
    pub type PCHAR = *mut i8;
    pub type LPCH = *mut i8;
    pub type PCH = *mut i8;
    pub type LPCCH = *const i8;
    pub type PCCH = *const i8;
    pub type NPSTR = *mut i8;
    pub type LPSTR = *mut i8;
    pub type PSTR = *mut i8;
    pub type PZPSTR = *mut *mut i8;
    pub type PCZPSTR = *const *mut i8;
    pub type LPCSTR = *const i8;
    pub type PCSTR = *const i8;
    pub type PZPCSTR = *mut *const i8;
    pub type PCZPCSTR = *const *const i8;
    pub type PZZSTR = *mut i8;
    pub type PCZZSTR = *const i8;
    pub type PNZCH = *mut i8;
    pub type PCNZCH = *const i8;
    pub type TCHAR = i8;
    pub type PTCHAR = *mut i8;
    pub type TBYTE = u8;
    pub type PTBYTE = *mut u8;
    pub type LPTCH = *mut i8;
    pub type PTCH = *mut i8;
    pub type LPCTCH = *const i8;
    pub type PCTCH = *const i8;
    pub type PTSTR = *mut i8;
    pub type LPTSTR = *mut i8;
    pub type PUTSTR = *mut i8;
    pub type LPUTSTR = *mut i8;
    pub type PCTSTR = *const i8;
    pub type LPCTSTR = *const i8;
    pub type PCUTSTR = *const i8;
    pub type LPCUTSTR = *const i8;
    pub type PZZTSTR = *mut i8;
    pub type PUZZTSTR = *mut i8;
    pub type PCZZTSTR = *const i8;
    pub type PCUZZTSTR = *const i8;
    pub type PZPTSTR = *mut *mut i8;
    pub type PNZTCH = *mut i8;
    pub type PUNZTCH = *mut i8;
    pub type PCNZTCH = *const i8;
    pub type PCUNZTCH = *const i8;
    pub type PSHORT = *mut i16;
    pub type PLONG = *mut i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESSOR_NUMBER {
        pub Group: u16,
        pub Number: u8,
        pub Reserved: u8,
    }
    pub type PROCESSOR_NUMBER = root::_PROCESSOR_NUMBER;
    pub type PPROCESSOR_NUMBER = *mut root::_PROCESSOR_NUMBER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GROUP_AFFINITY {
        pub Mask: u64,
        pub Group: u16,
        pub Reserved: [u16; 3usize],
    }
    pub type GROUP_AFFINITY = root::_GROUP_AFFINITY;
    pub type PGROUP_AFFINITY = *mut root::_GROUP_AFFINITY;
    pub type HANDLE = *mut ::std::os::raw::c_void;
    pub type PHANDLE = *mut root::HANDLE;
    pub type FCHAR = u8;
    pub type FSHORT = u16;
    pub type FLONG = u32;
    pub type HRESULT = i32;
    pub type CCHAR = i8;
    pub type LCID = u32;
    pub type PLCID = root::PDWORD;
    pub type LANGID = u16;
    pub const COMPARTMENT_ID_UNSPECIFIED_COMPARTMENT_ID: root::COMPARTMENT_ID = 0;
    pub const COMPARTMENT_ID_DEFAULT_COMPARTMENT_ID: root::COMPARTMENT_ID = 1;
    pub type COMPARTMENT_ID = i32;
    pub type PCOMPARTMENT_ID = *mut root::COMPARTMENT_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FLOAT128 {
        pub LowPart: i64,
        pub HighPart: i64,
    }
    pub type FLOAT128 = root::_FLOAT128;
    pub type PFLOAT128 = *mut root::FLOAT128;
    pub type LONGLONG = i64;
    pub type ULONGLONG = u64;
    pub type PLONGLONG = *mut root::LONGLONG;
    pub type PULONGLONG = *mut root::ULONGLONG;
    pub type USN = root::LONGLONG;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _LARGE_INTEGER {
        pub __bindgen_anon_1: root::_LARGE_INTEGER__bindgen_ty_1,
        pub u: root::_LARGE_INTEGER__bindgen_ty_2,
        pub QuadPart: root::LONGLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LARGE_INTEGER__bindgen_ty_1 {
        pub LowPart: u32,
        pub HighPart: i32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LARGE_INTEGER__bindgen_ty_2 {
        pub LowPart: u32,
        pub HighPart: i32,
    }
    pub type LARGE_INTEGER = root::_LARGE_INTEGER;
    pub type PLARGE_INTEGER = *mut root::LARGE_INTEGER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _ULARGE_INTEGER {
        pub __bindgen_anon_1: root::_ULARGE_INTEGER__bindgen_ty_1,
        pub u: root::_ULARGE_INTEGER__bindgen_ty_2,
        pub QuadPart: root::ULONGLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ULARGE_INTEGER__bindgen_ty_1 {
        pub LowPart: u32,
        pub HighPart: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ULARGE_INTEGER__bindgen_ty_2 {
        pub LowPart: u32,
        pub HighPart: u32,
    }
    pub type ULARGE_INTEGER = root::_ULARGE_INTEGER;
    pub type PULARGE_INTEGER = *mut root::ULARGE_INTEGER;
    pub type RTL_REFERENCE_COUNT = i64;
    pub type PRTL_REFERENCE_COUNT = *mut i64;
    pub type RTL_REFERENCE_COUNT32 = i32;
    pub type PRTL_REFERENCE_COUNT32 = *mut i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LUID {
        pub LowPart: u32,
        pub HighPart: i32,
    }
    pub type LUID = root::_LUID;
    pub type PLUID = *mut root::_LUID;
    pub type DWORDLONG = root::ULONGLONG;
    pub type PDWORDLONG = *mut root::DWORDLONG;
    extern "C" {
        pub fn _rotl8(
            Value: u8,
            Shift: u8,
        ) -> u8;
    }
    extern "C" {
        pub fn _rotl16(
            Value: u16,
            Shift: u8,
        ) -> u16;
    }
    extern "C" {
        pub fn _rotr8(
            Value: u8,
            Shift: u8,
        ) -> u8;
    }
    extern "C" {
        pub fn _rotr16(
            Value: u16,
            Shift: u8,
        ) -> u16;
    }
    extern "C" {
        pub fn _rotl(
            Value: u32,
            Shift: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn _rotl64(
            Value: u64,
            Shift: i32,
        ) -> u64;
    }
    extern "C" {
        pub fn _rotr(
            Value: u32,
            Shift: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn _rotr64(
            Value: u64,
            Shift: i32,
        ) -> u64;
    }
    pub type BOOLEAN = u8;
    pub type PBOOLEAN = *mut root::BOOLEAN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LIST_ENTRY {
        pub Flink: *mut root::_LIST_ENTRY,
        pub Blink: *mut root::_LIST_ENTRY,
    }
    pub type LIST_ENTRY = root::_LIST_ENTRY;
    pub type PLIST_ENTRY = *mut root::_LIST_ENTRY;
    pub type PRLIST_ENTRY = *mut root::_LIST_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SINGLE_LIST_ENTRY {
        pub Next: *mut root::_SINGLE_LIST_ENTRY,
    }
    pub type SINGLE_LIST_ENTRY = root::_SINGLE_LIST_ENTRY;
    pub type PSINGLE_LIST_ENTRY = *mut root::_SINGLE_LIST_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LIST_ENTRY32 {
        pub Flink: u32,
        pub Blink: u32,
    }
    pub type PLIST_ENTRY32 = *mut root::LIST_ENTRY32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LIST_ENTRY64 {
        pub Flink: root::ULONGLONG,
        pub Blink: root::ULONGLONG,
    }
    pub type PLIST_ENTRY64 = *mut root::LIST_ENTRY64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GUID {
        pub Data1: u32,
        pub Data2: u16,
        pub Data3: u16,
        pub Data4: [u8; 8usize],
    }
    pub type GUID = root::_GUID;
    pub type LPGUID = *mut root::GUID;
    pub type LPCGUID = *const root::GUID;
    pub type IID = root::GUID;
    pub type LPIID = *mut root::IID;
    pub type CLSID = root::GUID;
    pub type LPCLSID = *mut root::CLSID;
    pub type FMTID = root::GUID;
    pub type LPFMTID = *mut root::FMTID;
    extern "C" {
        pub fn _errno() -> *mut i32;
    }
    extern "C" {
        pub fn _set_errno(_Value: i32) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_errno(_Value: *mut i32) -> root::errno_t;
    }
    extern "C" {
        pub fn __doserrno() -> *mut u32;
    }
    extern "C" {
        pub fn _set_doserrno(_Value: u32) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_doserrno(_Value: *mut u32) -> root::errno_t;
    }
    extern "C" {
        pub fn memchr(
            _Buf: *const ::std::os::raw::c_void,
            _Val: i32,
            _MaxCount: root::size_t,
        ) -> *const ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn memcpy(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            _Dst: *mut ::std::os::raw::c_void,
            _Val: i32,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strchr(
            _Str: *const i8,
            _Val: i32,
        ) -> *const i8;
    }
    extern "C" {
        pub fn strrchr(
            _Str: *const i8,
            _Ch: i32,
        ) -> *const i8;
    }
    extern "C" {
        pub fn strstr(
            _Str: *const i8,
            _SubStr: *const i8,
        ) -> *const i8;
    }
    extern "C" {
        pub fn wcschr(_Str: *const u16, _Ch: u16) -> *const u16;
    }
    extern "C" {
        pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *const u16;
    }
    extern "C" {
        pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *const u16;
    }
    extern "C" {
        pub fn _memicmp(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _memicmp_l(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn memccpy(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Val: i32,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memicmp(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn wcscat_s(
            _Destination: *mut u16,
            _SizeInWords: root::rsize_t,
            _Source: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn wcscpy_s(
            _Destination: *mut u16,
            _SizeInWords: root::rsize_t,
            _Source: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn wcsncat_s(
            _Destination: *mut u16,
            _SizeInWords: root::rsize_t,
            _Source: *const u16,
            _MaxCount: root::rsize_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn wcsncpy_s(
            _Destination: *mut u16,
            _SizeInWords: root::rsize_t,
            _Source: *const u16,
            _MaxCount: root::rsize_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn wcstok_s(
            _String: *mut u16,
            _Delimiter: *const u16,
            _Context: *mut *mut u16,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsdup(_String: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcscat(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcscmp(_String1: *const u16, _String2: *const u16) -> i32;
    }
    extern "C" {
        pub fn wcscpy(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcscspn(_String: *const u16, _Control: *const u16) -> root::size_t;
    }
    extern "C" {
        pub fn wcslen(_String: *const u16) -> root::size_t;
    }
    extern "C" {
        pub fn wcsnlen(_Source: *const u16, _MaxCount: root::size_t) -> root::size_t;
    }
    extern "C" {
        pub fn wcsncat(
            _Destination: *mut u16,
            _Source: *const u16,
            _Count: root::size_t,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn wcsncmp(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn wcsncpy(
            _Destination: *mut u16,
            _Source: *const u16,
            _Count: root::size_t,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn wcspbrk(_String: *const u16, _Control: *const u16) -> *const u16;
    }
    extern "C" {
        pub fn wcsspn(_String: *const u16, _Control: *const u16) -> root::size_t;
    }
    extern "C" {
        pub fn wcstok(
            _String: *mut u16,
            _Delimiter: *const u16,
            _Context: *mut *mut u16,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _wcserror(_ErrorNumber: i32) -> *mut u16;
    }
    extern "C" {
        pub fn _wcserror_s(
            _Buffer: *mut u16,
            _SizeInWords: root::size_t,
            _ErrorNumber: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn __wcserror(_String: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn __wcserror_s(
            _Buffer: *mut u16,
            _SizeInWords: root::size_t,
            _ErrorMessage: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcsicmp(_String1: *const u16, _String2: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wcsicmp_l(
            _String1: *const u16,
            _String2: *const u16,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsnicmp(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsnicmp_l(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsnset_s(
            _Destination: *mut u16,
            _SizeInWords: root::size_t,
            _Value: u16,
            _MaxCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcsnset(_String: *mut u16, _Value: u16, _MaxCount: root::size_t) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsrev(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsset_s(
            _Destination: *mut u16,
            _SizeInWords: root::size_t,
            _Value: u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcslwr_s(_String: *mut u16, _SizeInWords: root::size_t) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcslwr(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcslwr_s_l(
            _String: *mut u16,
            _SizeInWords: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcslwr_l(_String: *mut u16, _Locale: root::_locale_t) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsupr_s(_String: *mut u16, _Size: root::size_t) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcsupr(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsupr_s_l(
            _String: *mut u16,
            _Size: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcsupr_l(_String: *mut u16, _Locale: root::_locale_t) -> *mut u16;
    }
    extern "C" {
        pub fn wcsxfrm(
            _Destination: *mut u16,
            _Source: *const u16,
            _MaxCount: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _wcsxfrm_l(
            _Destination: *mut u16,
            _Source: *const u16,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcscoll(_String1: *const u16, _String2: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wcscoll_l(
            _String1: *const u16,
            _String2: *const u16,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsicoll(_String1: *const u16, _String2: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wcsicoll_l(
            _String1: *const u16,
            _String2: *const u16,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsncoll(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsncoll_l(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsnicoll(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcsnicoll_l(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn wcsdup(_String: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsicmp(_String1: *const u16, _String2: *const u16) -> i32;
    }
    extern "C" {
        pub fn wcsnicmp(
            _String1: *const u16,
            _String2: *const u16,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn wcsnset(_String: *mut u16, _Value: u16, _MaxCount: root::size_t) -> *mut u16;
    }
    extern "C" {
        pub fn wcsrev(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcslwr(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsupr(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsicoll(_String1: *const u16, _String2: *const u16) -> i32;
    }
    extern "C" {
        pub fn strcpy_s(
            _Destination: *mut i8,
            _SizeInBytes: root::rsize_t,
            _Source: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn strcat_s(
            _Destination: *mut i8,
            _SizeInBytes: root::rsize_t,
            _Source: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn strerror_s(
            _Buffer: *mut i8,
            _SizeInBytes: root::size_t,
            _ErrorNumber: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn strncat_s(
            _Destination: *mut i8,
            _SizeInBytes: root::rsize_t,
            _Source: *const i8,
            _MaxCount: root::rsize_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn strncpy_s(
            _Destination: *mut i8,
            _SizeInBytes: root::rsize_t,
            _Source: *const i8,
            _MaxCount: root::rsize_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn strtok_s(
            _String: *mut i8,
            _Delimiter: *const i8,
            _Context: *mut *mut i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _memccpy(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Val: i32,
            _MaxCount: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcat(
            _Destination: *mut i8,
            _Source: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strcmp(
            _Str1: *const i8,
            _Str2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _strcmpi(
            _String1: *const i8,
            _String2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn strcoll(
            _String1: *const i8,
            _String2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _strcoll_l(
            _String1: *const i8,
            _String2: *const i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn strcpy(
            _Destination: *mut i8,
            _Source: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strcspn(
            _Str: *const i8,
            _Control: *const i8,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _strdup(_Source: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn _strerror(
            _ErrorMessage: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _strerror_s(
            _Buffer: *mut i8,
            _SizeInBytes: root::size_t,
            _ErrorMessage: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn strerror(_ErrorMessage: i32) -> *mut i8;
    }
    extern "C" {
        pub fn _stricmp(
            _String1: *const i8,
            _String2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _stricoll(
            _String1: *const i8,
            _String2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _stricoll_l(
            _String1: *const i8,
            _String2: *const i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _stricmp_l(
            _String1: *const i8,
            _String2: *const i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn strlen(_Str: *const i8) -> root::size_t;
    }
    extern "C" {
        pub fn _strlwr_s(
            _String: *mut i8,
            _Size: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _strlwr(_String: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn _strlwr_s_l(
            _String: *mut i8,
            _Size: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _strlwr_l(
            _String: *mut i8,
            _Locale: root::_locale_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strncat(
            _Destination: *mut i8,
            _Source: *const i8,
            _Count: root::size_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strncmp(
            _Str1: *const i8,
            _Str2: *const i8,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _strnicmp(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _strnicmp_l(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _strnicoll(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _strnicoll_l(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _strncoll(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _strncoll_l(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn __strncnt(
            _String: *const i8,
            _Count: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strncpy(
            _Destination: *mut i8,
            _Source: *const i8,
            _Count: root::size_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strnlen(
            _String: *const i8,
            _MaxCount: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _strnset_s(
            _String: *mut i8,
            _SizeInBytes: root::size_t,
            _Value: i32,
            _MaxCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _strnset(
            _Destination: *mut i8,
            _Value: i32,
            _Count: root::size_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strpbrk(
            _Str: *const i8,
            _Control: *const i8,
        ) -> *const i8;
    }
    extern "C" {
        pub fn _strrev(_Str: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn _strset_s(
            _Destination: *mut i8,
            _DestinationSize: root::size_t,
            _Value: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _strset(
            _Destination: *mut i8,
            _Value: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strspn(
            _Str: *const i8,
            _Control: *const i8,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strtok(
            _String: *mut i8,
            _Delimiter: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _strupr_s(
            _String: *mut i8,
            _Size: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _strupr(_String: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn _strupr_s_l(
            _String: *mut i8,
            _Size: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _strupr_l(
            _String: *mut i8,
            _Locale: root::_locale_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strxfrm(
            _Destination: *mut i8,
            _Source: *const i8,
            _MaxCount: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _strxfrm_l(
            _Destination: *mut i8,
            _Source: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strdup(_String: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn strcmpi(
            _String1: *const i8,
            _String2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn stricmp(
            _String1: *const i8,
            _String2: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn strlwr(_String: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn strnicmp(
            _String1: *const i8,
            _String2: *const i8,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn strnset(
            _String: *mut i8,
            _Value: i32,
            _MaxCount: root::size_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strrev(_String: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn strset(
            _String: *mut i8,
            _Value: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn strupr(_String: *mut i8) -> *mut i8;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OBJECTID {
        pub Lineage: root::GUID,
        pub Uniquifier: u32,
    }
    pub type OBJECTID = root::_OBJECTID;
    pub type PEXCEPTION_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut root::_EXCEPTION_RECORD,
            arg2: root::PVOID,
            arg3: *mut root::_CONTEXT,
            arg4: root::PVOID,
        ) -> root::EXCEPTION_DISPOSITION,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENUM_FLAG_SIZED_INTEGER {
        pub _address: u8,
    }
    pub type _ENUM_FLAG_SIZED_INTEGER_type = u8;
    pub type KSPIN_LOCK = u64;
    pub type PKSPIN_LOCK = *mut root::KSPIN_LOCK;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _M128A {
        pub Low: root::ULONGLONG,
        pub High: root::LONGLONG,
    }
    pub type M128A = root::_M128A;
    pub type PM128A = *mut root::_M128A;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSAVE_FORMAT {
        pub ControlWord: u16,
        pub StatusWord: u16,
        pub TagWord: u8,
        pub Reserved1: u8,
        pub ErrorOpcode: u16,
        pub ErrorOffset: u32,
        pub ErrorSelector: u16,
        pub Reserved2: u16,
        pub DataOffset: u32,
        pub DataSelector: u16,
        pub Reserved3: u16,
        pub MxCsr: u32,
        pub MxCsr_Mask: u32,
        pub FloatRegisters: [root::M128A; 8usize],
        pub XmmRegisters: [root::M128A; 16usize],
        pub Reserved4: [u8; 96usize],
    }
    pub type XSAVE_FORMAT = root::_XSAVE_FORMAT;
    pub type PXSAVE_FORMAT = *mut root::_XSAVE_FORMAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSAVE_CET_U_FORMAT {
        pub Ia32CetUMsr: root::DWORD64,
        pub Ia32Pl3SspMsr: root::DWORD64,
    }
    pub type XSAVE_CET_U_FORMAT = root::_XSAVE_CET_U_FORMAT;
    pub type PXSAVE_CET_U_FORMAT = *mut root::_XSAVE_CET_U_FORMAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSAVE_AREA_HEADER {
        pub Mask: root::DWORD64,
        pub CompactionMask: root::DWORD64,
        pub Reserved2: [root::DWORD64; 6usize],
    }
    pub type XSAVE_AREA_HEADER = root::_XSAVE_AREA_HEADER;
    pub type PXSAVE_AREA_HEADER = *mut root::_XSAVE_AREA_HEADER;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSAVE_AREA {
        pub LegacyState: root::XSAVE_FORMAT,
        pub Header: root::XSAVE_AREA_HEADER,
    }
    pub type XSAVE_AREA = root::_XSAVE_AREA;
    pub type PXSAVE_AREA = *mut root::_XSAVE_AREA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSTATE_CONTEXT {
        pub Mask: root::DWORD64,
        pub Length: u32,
        pub Reserved1: u32,
        pub Area: root::PXSAVE_AREA,
        pub Buffer: root::PVOID,
    }
    pub type XSTATE_CONTEXT = root::_XSTATE_CONTEXT;
    pub type PXSTATE_CONTEXT = *mut root::_XSTATE_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCOPE_TABLE_AMD64 {
        pub Count: u32,
        pub ScopeRecord: [root::_SCOPE_TABLE_AMD64__bindgen_ty_1; 1usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCOPE_TABLE_AMD64__bindgen_ty_1 {
        pub BeginAddress: u32,
        pub EndAddress: u32,
        pub HandlerAddress: u32,
        pub JumpTarget: u32,
    }
    pub type SCOPE_TABLE_AMD64 = root::_SCOPE_TABLE_AMD64;
    pub type PSCOPE_TABLE_AMD64 = *mut root::_SCOPE_TABLE_AMD64;
    extern "C" {
        pub fn _bittest(Base: *const i32, Offset: i32) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittestandcomplement(Base: *mut i32, Offset: i32) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittestandset(Base: *mut i32, Offset: i32) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittestandreset(Base: *mut i32, Offset: i32) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _interlockedbittestandset(
            Base: *mut i32,
            Offset: i32,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _interlockedbittestandreset(
            Base: *mut i32,
            Offset: i32,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittest64(Base: *const root::LONG64, Offset: root::LONG64) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittestandcomplement64(
            Base: *mut root::LONG64,
            Offset: root::LONG64,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittestandset64(Base: *mut root::LONG64, Offset: root::LONG64) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _bittestandreset64(Base: *mut root::LONG64, Offset: root::LONG64) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _interlockedbittestandset64(
            Base: *mut root::LONG64,
            Offset: root::LONG64,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _interlockedbittestandreset64(
            Base: *mut root::LONG64,
            Offset: root::LONG64,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _BitScanForward(Index: *mut u32, Mask: u32) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _BitScanReverse(Index: *mut u32, Mask: u32) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _BitScanForward64(Index: *mut u32, Mask: root::DWORD64) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _BitScanReverse64(Index: *mut u32, Mask: root::DWORD64) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _InterlockedIncrement16(Addend: *mut i16) -> i16;
    }
    extern "C" {
        pub fn _InterlockedDecrement16(Addend: *mut i16) -> i16;
    }
    extern "C" {
        pub fn _InterlockedCompareExchange16(
            Destination: *mut i16,
            ExChange: i16,
            Comperand: i16,
        ) -> i16;
    }
    extern "C" {
        pub fn _InterlockedAnd(Destination: *mut i32, Value: i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedOr(Destination: *mut i32, Value: i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedXor(Destination: *mut i32, Value: i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedAnd64(
            Destination: *mut root::LONG64,
            Value: root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedOr64(
            Destination: *mut root::LONG64,
            Value: root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedXor64(
            Destination: *mut root::LONG64,
            Value: root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedIncrement(Addend: *mut i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedDecrement(Addend: *mut i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedExchange(Target: *mut i32, Value: i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedExchangeAdd(Addend: *mut i32, Value: i32) -> i32;
    }
    extern "C" {
        pub fn _InterlockedCompareExchange(
            Destination: *mut i32,
            ExChange: i32,
            Comperand: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _InterlockedIncrement64(Addend: *mut root::LONG64) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedDecrement64(Addend: *mut root::LONG64) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedExchange64(
            Target: *mut root::LONG64,
            Value: root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedExchangeAdd64(
            Addend: *mut root::LONG64,
            Value: root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedCompareExchange64(
            Destination: *mut root::LONG64,
            ExChange: root::LONG64,
            Comperand: root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _InterlockedCompareExchange128(
            Destination: *mut root::LONG64,
            ExchangeHigh: root::LONG64,
            ExchangeLow: root::LONG64,
            ComparandResult: *mut root::LONG64,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn _InterlockedCompareExchangePointer(
            Destination: *mut root::PVOID,
            Exchange: root::PVOID,
            Comperand: root::PVOID,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn _InterlockedExchangePointer(
            Target: *mut root::PVOID,
            Value: root::PVOID,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn _InterlockedExchange8(Target: *mut i8, Value: i8) -> i8;
    }
    extern "C" {
        pub fn _InterlockedExchange16(
            Destination: *mut i16,
            ExChange: i16,
        ) -> i16;
    }
    extern "C" {
        pub fn _InterlockedExchangeAdd8(
            _Addend: *mut i8,
            _Value: i8,
        ) -> i8;
    }
    extern "C" {
        pub fn _InterlockedAnd8(
            Destination: *mut i8,
            Value: i8,
        ) -> i8;
    }
    extern "C" {
        pub fn _InterlockedOr8(
            Destination: *mut i8,
            Value: i8,
        ) -> i8;
    }
    extern "C" {
        pub fn _InterlockedXor8(
            Destination: *mut i8,
            Value: i8,
        ) -> i8;
    }
    extern "C" {
        pub fn _InterlockedAnd16(Destination: *mut i16, Value: i16) -> i16;
    }
    extern "C" {
        pub fn _InterlockedOr16(Destination: *mut i16, Value: i16) -> i16;
    }
    extern "C" {
        pub fn _InterlockedXor16(Destination: *mut i16, Value: i16) -> i16;
    }
    extern "C" {
        pub fn __cpuidex(
            CPUInfo: *mut i32,
            Function: i32,
            SubLeaf: i32,
        );
    }
    extern "C" {
        pub fn _mm_clflush(Address: *const ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn _ReadWriteBarrier();
    }
    extern "C" {
        pub fn __faststorefence();
    }
    extern "C" {
        pub fn _mm_lfence();
    }
    extern "C" {
        pub fn _mm_mfence();
    }
    extern "C" {
        pub fn _mm_sfence();
    }
    extern "C" {
        pub fn _mm_pause();
    }
    extern "C" {
        pub fn _mm_prefetch(a: *const i8, sel: i32);
    }
    extern "C" {
        pub fn _m_prefetchw(Source: *const ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn _mm_getcsr() -> u32;
    }
    extern "C" {
        pub fn _mm_setcsr(MxCsr: u32);
    }
    extern "C" {
        pub fn __getcallerseflags() -> u32;
    }
    extern "C" {
        pub fn __segmentlimit(Selector: u32) -> u32;
    }
    extern "C" {
        pub fn __readpmc(Counter: u32) -> root::DWORD64;
    }
    extern "C" {
        pub fn __rdtsc() -> root::DWORD64;
    }
    extern "C" {
        pub fn __movsb(Destination: root::PBYTE, Source: *const u8, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __movsw(Destination: root::PWORD, Source: *const u16, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __movsd(Destination: root::PDWORD, Source: *const u32, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __movsq(
            Destination: root::PDWORD64,
            Source: *const root::DWORD64,
            Count: root::SIZE_T,
        );
    }
    extern "C" {
        pub fn __stosb(Destination: root::PBYTE, Value: u8, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __stosw(Destination: root::PWORD, Value: u16, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __stosd(Destination: root::PDWORD, Value: u32, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __stosq(Destination: root::PDWORD64, Value: root::DWORD64, Count: root::SIZE_T);
    }
    extern "C" {
        pub fn __mulh(Multiplier: root::LONG64, Multiplicand: root::LONG64) -> root::LONGLONG;
    }
    extern "C" {
        pub fn __umulh(Multiplier: root::DWORD64, Multiplicand: root::DWORD64) -> root::ULONGLONG;
    }
    extern "C" {
        pub fn __popcnt64(operand: root::DWORD64) -> root::DWORD64;
    }
    extern "C" {
        pub fn __shiftleft128(
            LowPart: root::DWORD64,
            HighPart: root::DWORD64,
            Shift: u8,
        ) -> root::DWORD64;
    }
    extern "C" {
        pub fn __shiftright128(
            LowPart: root::DWORD64,
            HighPart: root::DWORD64,
            Shift: u8,
        ) -> root::DWORD64;
    }
    extern "C" {
        pub fn _mul128(
            Multiplier: root::LONG64,
            Multiplicand: root::LONG64,
            HighProduct: *mut root::LONG64,
        ) -> root::LONG64;
    }
    extern "C" {
        pub fn _umul128(
            Multiplier: root::DWORD64,
            Multiplicand: root::DWORD64,
            HighProduct: *mut root::DWORD64,
        ) -> root::DWORD64;
    }
    extern "C" {
        pub fn __readgsbyte(Offset: u32) -> u8;
    }
    extern "C" {
        pub fn __readgsword(Offset: u32) -> u16;
    }
    extern "C" {
        pub fn __readgsdword(Offset: u32) -> u32;
    }
    extern "C" {
        pub fn __readgsqword(Offset: u32) -> root::DWORD64;
    }
    extern "C" {
        pub fn __writegsbyte(Offset: u32, Data: u8);
    }
    extern "C" {
        pub fn __writegsword(Offset: u32, Data: u16);
    }
    extern "C" {
        pub fn __writegsdword(Offset: u32, Data: u32);
    }
    extern "C" {
        pub fn __writegsqword(Offset: u32, Data: root::DWORD64);
    }
    extern "C" {
        pub fn __incgsbyte(Offset: u32);
    }
    extern "C" {
        pub fn __addgsbyte(Offset: u32, Value: u8);
    }
    extern "C" {
        pub fn __incgsword(Offset: u32);
    }
    extern "C" {
        pub fn __addgsword(Offset: u32, Value: u16);
    }
    extern "C" {
        pub fn __incgsdword(Offset: u32);
    }
    extern "C" {
        pub fn __addgsdword(Offset: u32, Value: u32);
    }
    extern "C" {
        pub fn __incgsqword(Offset: u32);
    }
    extern "C" {
        pub fn __addgsqword(Offset: u32, Value: root::DWORD64);
    }
    pub type XMM_SAVE_AREA32 = root::XSAVE_FORMAT;
    pub type PXMM_SAVE_AREA32 = *mut root::XSAVE_FORMAT;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Copy, Clone)]
    pub struct _CONTEXT {
        pub P1Home: root::DWORD64,
        pub P2Home: root::DWORD64,
        pub P3Home: root::DWORD64,
        pub P4Home: root::DWORD64,
        pub P5Home: root::DWORD64,
        pub P6Home: root::DWORD64,
        pub ContextFlags: u32,
        pub MxCsr: u32,
        pub SegCs: u16,
        pub SegDs: u16,
        pub SegEs: u16,
        pub SegFs: u16,
        pub SegGs: u16,
        pub SegSs: u16,
        pub EFlags: u32,
        pub Dr0: root::DWORD64,
        pub Dr1: root::DWORD64,
        pub Dr2: root::DWORD64,
        pub Dr3: root::DWORD64,
        pub Dr6: root::DWORD64,
        pub Dr7: root::DWORD64,
        pub Rax: root::DWORD64,
        pub Rcx: root::DWORD64,
        pub Rdx: root::DWORD64,
        pub Rbx: root::DWORD64,
        pub Rsp: root::DWORD64,
        pub Rbp: root::DWORD64,
        pub Rsi: root::DWORD64,
        pub Rdi: root::DWORD64,
        pub R8: root::DWORD64,
        pub R9: root::DWORD64,
        pub R10: root::DWORD64,
        pub R11: root::DWORD64,
        pub R12: root::DWORD64,
        pub R13: root::DWORD64,
        pub R14: root::DWORD64,
        pub R15: root::DWORD64,
        pub Rip: root::DWORD64,
        pub __bindgen_anon_1: root::_CONTEXT__bindgen_ty_1,
        pub VectorRegister: [root::M128A; 26usize],
        pub VectorControl: root::DWORD64,
        pub DebugControl: root::DWORD64,
        pub LastBranchToRip: root::DWORD64,
        pub LastBranchFromRip: root::DWORD64,
        pub LastExceptionToRip: root::DWORD64,
        pub LastExceptionFromRip: root::DWORD64,
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Copy, Clone)]
    pub union _CONTEXT__bindgen_ty_1 {
        pub FltSave: root::XMM_SAVE_AREA32,
        pub __bindgen_anon_1: root::_CONTEXT__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONTEXT__bindgen_ty_1__bindgen_ty_1 {
        pub Header: [root::M128A; 2usize],
        pub Legacy: [root::M128A; 8usize],
        pub Xmm0: root::M128A,
        pub Xmm1: root::M128A,
        pub Xmm2: root::M128A,
        pub Xmm3: root::M128A,
        pub Xmm4: root::M128A,
        pub Xmm5: root::M128A,
        pub Xmm6: root::M128A,
        pub Xmm7: root::M128A,
        pub Xmm8: root::M128A,
        pub Xmm9: root::M128A,
        pub Xmm10: root::M128A,
        pub Xmm11: root::M128A,
        pub Xmm12: root::M128A,
        pub Xmm13: root::M128A,
        pub Xmm14: root::M128A,
        pub Xmm15: root::M128A,
    }
    pub type CONTEXT = root::_CONTEXT;
    pub type PCONTEXT = *mut root::_CONTEXT;
    pub type RUNTIME_FUNCTION = root::_IMAGE_RUNTIME_FUNCTION_ENTRY;
    pub type PRUNTIME_FUNCTION = *mut root::_IMAGE_RUNTIME_FUNCTION_ENTRY;
    pub type SCOPE_TABLE = root::SCOPE_TABLE_AMD64;
    pub type PSCOPE_TABLE = *mut root::SCOPE_TABLE_AMD64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UNWIND_HISTORY_TABLE_ENTRY {
        pub ImageBase: root::DWORD64,
        pub FunctionEntry: root::PRUNTIME_FUNCTION,
    }
    pub type UNWIND_HISTORY_TABLE_ENTRY = root::_UNWIND_HISTORY_TABLE_ENTRY;
    pub type PUNWIND_HISTORY_TABLE_ENTRY = *mut root::_UNWIND_HISTORY_TABLE_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UNWIND_HISTORY_TABLE {
        pub Count: u32,
        pub LocalHint: u8,
        pub GlobalHint: u8,
        pub Search: u8,
        pub Once: u8,
        pub LowAddress: root::DWORD64,
        pub HighAddress: root::DWORD64,
        pub Entry: [root::UNWIND_HISTORY_TABLE_ENTRY; 12usize],
    }
    pub type UNWIND_HISTORY_TABLE = root::_UNWIND_HISTORY_TABLE;
    pub type PUNWIND_HISTORY_TABLE = *mut root::_UNWIND_HISTORY_TABLE;
    pub type GET_RUNTIME_FUNCTION_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            ControlPc: root::DWORD64,
            Context: root::PVOID,
        ) -> root::PRUNTIME_FUNCTION,
    >;
    pub type PGET_RUNTIME_FUNCTION_CALLBACK = root::GET_RUNTIME_FUNCTION_CALLBACK;
    pub type OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            Process: root::HANDLE,
            TableAddress: root::PVOID,
            Entries: root::PDWORD,
            Functions: *mut root::PRUNTIME_FUNCTION,
        ) -> u32,
    >;
    pub type POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = root::OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISPATCHER_CONTEXT {
        pub ControlPc: root::DWORD64,
        pub ImageBase: root::DWORD64,
        pub FunctionEntry: root::PRUNTIME_FUNCTION,
        pub EstablisherFrame: root::DWORD64,
        pub TargetIp: root::DWORD64,
        pub ContextRecord: root::PCONTEXT,
        pub LanguageHandler: root::PEXCEPTION_ROUTINE,
        pub HandlerData: root::PVOID,
        pub HistoryTable: root::PUNWIND_HISTORY_TABLE,
        pub ScopeIndex: u32,
        pub Fill0: u32,
    }
    pub type DISPATCHER_CONTEXT = root::_DISPATCHER_CONTEXT;
    pub type PDISPATCHER_CONTEXT = *mut root::_DISPATCHER_CONTEXT;
    pub type PEXCEPTION_FILTER = ::std::option::Option<
        unsafe extern "C" fn(
            ExceptionPointers: *mut root::_EXCEPTION_POINTERS,
            EstablisherFrame: root::PVOID,
        ) -> i32,
    >;
    pub type PTERMINATION_HANDLER = ::std::option::Option<
        unsafe extern "C" fn(_abnormal_termination: root::BOOLEAN, EstablisherFrame: root::PVOID),
    >;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _KNONVOLATILE_CONTEXT_POINTERS {
        pub __bindgen_anon_1: root::_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1,
        pub __bindgen_anon_2: root::_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1 {
        pub FloatingContext: [root::PM128A; 16usize],
        pub __bindgen_anon_1: root::_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1 {
        pub Xmm0: root::PM128A,
        pub Xmm1: root::PM128A,
        pub Xmm2: root::PM128A,
        pub Xmm3: root::PM128A,
        pub Xmm4: root::PM128A,
        pub Xmm5: root::PM128A,
        pub Xmm6: root::PM128A,
        pub Xmm7: root::PM128A,
        pub Xmm8: root::PM128A,
        pub Xmm9: root::PM128A,
        pub Xmm10: root::PM128A,
        pub Xmm11: root::PM128A,
        pub Xmm12: root::PM128A,
        pub Xmm13: root::PM128A,
        pub Xmm14: root::PM128A,
        pub Xmm15: root::PM128A,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2 {
        pub IntegerContext: [root::PDWORD64; 16usize],
        pub __bindgen_anon_1: root::_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1 {
        pub Rax: root::PDWORD64,
        pub Rcx: root::PDWORD64,
        pub Rdx: root::PDWORD64,
        pub Rbx: root::PDWORD64,
        pub Rsp: root::PDWORD64,
        pub Rbp: root::PDWORD64,
        pub Rsi: root::PDWORD64,
        pub Rdi: root::PDWORD64,
        pub R8: root::PDWORD64,
        pub R9: root::PDWORD64,
        pub R10: root::PDWORD64,
        pub R11: root::PDWORD64,
        pub R12: root::PDWORD64,
        pub R13: root::PDWORD64,
        pub R14: root::PDWORD64,
        pub R15: root::PDWORD64,
    }
    pub type KNONVOLATILE_CONTEXT_POINTERS = root::_KNONVOLATILE_CONTEXT_POINTERS;
    pub type PKNONVOLATILE_CONTEXT_POINTERS = *mut root::_KNONVOLATILE_CONTEXT_POINTERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCOPE_TABLE_ARM {
        pub Count: u32,
        pub ScopeRecord: [root::_SCOPE_TABLE_ARM__bindgen_ty_1; 1usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCOPE_TABLE_ARM__bindgen_ty_1 {
        pub BeginAddress: u32,
        pub EndAddress: u32,
        pub HandlerAddress: u32,
        pub JumpTarget: u32,
    }
    pub type SCOPE_TABLE_ARM = root::_SCOPE_TABLE_ARM;
    pub type PSCOPE_TABLE_ARM = *mut root::_SCOPE_TABLE_ARM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCOPE_TABLE_ARM64 {
        pub Count: u32,
        pub ScopeRecord: [root::_SCOPE_TABLE_ARM64__bindgen_ty_1; 1usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCOPE_TABLE_ARM64__bindgen_ty_1 {
        pub BeginAddress: u32,
        pub EndAddress: u32,
        pub HandlerAddress: u32,
        pub JumpTarget: u32,
    }
    pub type SCOPE_TABLE_ARM64 = root::_SCOPE_TABLE_ARM64;
    pub type PSCOPE_TABLE_ARM64 = *mut root::_SCOPE_TABLE_ARM64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
        pub X19: root::PDWORD64,
        pub X20: root::PDWORD64,
        pub X21: root::PDWORD64,
        pub X22: root::PDWORD64,
        pub X23: root::PDWORD64,
        pub X24: root::PDWORD64,
        pub X25: root::PDWORD64,
        pub X26: root::PDWORD64,
        pub X27: root::PDWORD64,
        pub X28: root::PDWORD64,
        pub Fp: root::PDWORD64,
        pub Lr: root::PDWORD64,
        pub D8: root::PDWORD64,
        pub D9: root::PDWORD64,
        pub D10: root::PDWORD64,
        pub D11: root::PDWORD64,
        pub D12: root::PDWORD64,
        pub D13: root::PDWORD64,
        pub D14: root::PDWORD64,
        pub D15: root::PDWORD64,
    }
    pub type KNONVOLATILE_CONTEXT_POINTERS_ARM64 = root::_KNONVOLATILE_CONTEXT_POINTERS_ARM64;
    pub type PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = *mut root::_KNONVOLATILE_CONTEXT_POINTERS_ARM64;
    extern "C" {
        pub fn __int2c();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _LDT_ENTRY {
        pub LimitLow: u16,
        pub BaseLow: u16,
        pub HighWord: root::_LDT_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _LDT_ENTRY__bindgen_ty_1 {
        pub Bytes: root::_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1,
        pub Bits: root::_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        pub BaseMid: u8,
        pub Flags1: u8,
        pub Flags2: u8,
        pub BaseHi: u8,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
        #[inline]
        pub fn BaseMid(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_BaseMid(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn Type(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
        }
        #[inline]
        pub fn set_Type(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn Dpl(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_Dpl(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn Pres(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Pres(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn LimitHi(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
        }
        #[inline]
        pub fn set_LimitHi(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn Sys(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Sys(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved_0(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved_0(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(21usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Default_Big(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Default_Big(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(22usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Granularity(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Granularity(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(23usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn BaseHi(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_BaseHi(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            BaseMid: u32,
            Type: u32,
            Dpl: u32,
            Pres: u32,
            LimitHi: u32,
            Sys: u32,
            Reserved_0: u32,
            Default_Big: u32,
            Granularity: u32,
            BaseHi: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let BaseMid: u32 = unsafe { ::std::mem::transmute(BaseMid) };
                BaseMid as u64
            });
            __bindgen_bitfield_unit.set(8usize, 5u8, {
                let Type: u32 = unsafe { ::std::mem::transmute(Type) };
                Type as u64
            });
            __bindgen_bitfield_unit.set(13usize, 2u8, {
                let Dpl: u32 = unsafe { ::std::mem::transmute(Dpl) };
                Dpl as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let Pres: u32 = unsafe { ::std::mem::transmute(Pres) };
                Pres as u64
            });
            __bindgen_bitfield_unit.set(16usize, 4u8, {
                let LimitHi: u32 = unsafe { ::std::mem::transmute(LimitHi) };
                LimitHi as u64
            });
            __bindgen_bitfield_unit.set(20usize, 1u8, {
                let Sys: u32 = unsafe { ::std::mem::transmute(Sys) };
                Sys as u64
            });
            __bindgen_bitfield_unit.set(21usize, 1u8, {
                let Reserved_0: u32 = unsafe { ::std::mem::transmute(Reserved_0) };
                Reserved_0 as u64
            });
            __bindgen_bitfield_unit.set(22usize, 1u8, {
                let Default_Big: u32 = unsafe { ::std::mem::transmute(Default_Big) };
                Default_Big as u64
            });
            __bindgen_bitfield_unit.set(23usize, 1u8, {
                let Granularity: u32 = unsafe { ::std::mem::transmute(Granularity) };
                Granularity as u64
            });
            __bindgen_bitfield_unit.set(24usize, 8u8, {
                let BaseHi: u32 = unsafe { ::std::mem::transmute(BaseHi) };
                BaseHi as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type LDT_ENTRY = root::_LDT_ENTRY;
    pub type PLDT_ENTRY = *mut root::_LDT_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOW64_FLOATING_SAVE_AREA {
        pub ControlWord: u32,
        pub StatusWord: u32,
        pub TagWord: u32,
        pub ErrorOffset: u32,
        pub ErrorSelector: u32,
        pub DataOffset: u32,
        pub DataSelector: u32,
        pub RegisterArea: [u8; 80usize],
        pub Cr0NpxState: u32,
    }
    pub type WOW64_FLOATING_SAVE_AREA = root::_WOW64_FLOATING_SAVE_AREA;
    pub type PWOW64_FLOATING_SAVE_AREA = *mut root::WOW64_FLOATING_SAVE_AREA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOW64_CONTEXT {
        pub ContextFlags: u32,
        pub Dr0: u32,
        pub Dr1: u32,
        pub Dr2: u32,
        pub Dr3: u32,
        pub Dr6: u32,
        pub Dr7: u32,
        pub FloatSave: root::WOW64_FLOATING_SAVE_AREA,
        pub SegGs: u32,
        pub SegFs: u32,
        pub SegEs: u32,
        pub SegDs: u32,
        pub Edi: u32,
        pub Esi: u32,
        pub Ebx: u32,
        pub Edx: u32,
        pub Ecx: u32,
        pub Eax: u32,
        pub Ebp: u32,
        pub Eip: u32,
        pub SegCs: u32,
        pub EFlags: u32,
        pub Esp: u32,
        pub SegSs: u32,
        pub ExtendedRegisters: [u8; 512usize],
    }
    pub type WOW64_CONTEXT = root::_WOW64_CONTEXT;
    pub type PWOW64_CONTEXT = *mut root::WOW64_CONTEXT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WOW64_LDT_ENTRY {
        pub LimitLow: u16,
        pub BaseLow: u16,
        pub HighWord: root::_WOW64_LDT_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _WOW64_LDT_ENTRY__bindgen_ty_1 {
        pub Bytes: root::_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1,
        pub Bits: root::_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        pub BaseMid: u8,
        pub Flags1: u8,
        pub Flags2: u8,
        pub BaseHi: u8,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
        #[inline]
        pub fn BaseMid(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_BaseMid(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn Type(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
        }
        #[inline]
        pub fn set_Type(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn Dpl(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_Dpl(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn Pres(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Pres(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn LimitHi(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
        }
        #[inline]
        pub fn set_LimitHi(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn Sys(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Sys(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved_0(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved_0(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(21usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Default_Big(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Default_Big(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(22usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Granularity(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Granularity(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(23usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn BaseHi(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_BaseHi(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            BaseMid: u32,
            Type: u32,
            Dpl: u32,
            Pres: u32,
            LimitHi: u32,
            Sys: u32,
            Reserved_0: u32,
            Default_Big: u32,
            Granularity: u32,
            BaseHi: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let BaseMid: u32 = unsafe { ::std::mem::transmute(BaseMid) };
                BaseMid as u64
            });
            __bindgen_bitfield_unit.set(8usize, 5u8, {
                let Type: u32 = unsafe { ::std::mem::transmute(Type) };
                Type as u64
            });
            __bindgen_bitfield_unit.set(13usize, 2u8, {
                let Dpl: u32 = unsafe { ::std::mem::transmute(Dpl) };
                Dpl as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let Pres: u32 = unsafe { ::std::mem::transmute(Pres) };
                Pres as u64
            });
            __bindgen_bitfield_unit.set(16usize, 4u8, {
                let LimitHi: u32 = unsafe { ::std::mem::transmute(LimitHi) };
                LimitHi as u64
            });
            __bindgen_bitfield_unit.set(20usize, 1u8, {
                let Sys: u32 = unsafe { ::std::mem::transmute(Sys) };
                Sys as u64
            });
            __bindgen_bitfield_unit.set(21usize, 1u8, {
                let Reserved_0: u32 = unsafe { ::std::mem::transmute(Reserved_0) };
                Reserved_0 as u64
            });
            __bindgen_bitfield_unit.set(22usize, 1u8, {
                let Default_Big: u32 = unsafe { ::std::mem::transmute(Default_Big) };
                Default_Big as u64
            });
            __bindgen_bitfield_unit.set(23usize, 1u8, {
                let Granularity: u32 = unsafe { ::std::mem::transmute(Granularity) };
                Granularity as u64
            });
            __bindgen_bitfield_unit.set(24usize, 8u8, {
                let BaseHi: u32 = unsafe { ::std::mem::transmute(BaseHi) };
                BaseHi as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type WOW64_LDT_ENTRY = root::_WOW64_LDT_ENTRY;
    pub type PWOW64_LDT_ENTRY = *mut root::_WOW64_LDT_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
        pub Selector: u32,
        pub Descriptor: root::WOW64_LDT_ENTRY,
    }
    pub type WOW64_DESCRIPTOR_TABLE_ENTRY = root::_WOW64_DESCRIPTOR_TABLE_ENTRY;
    pub type PWOW64_DESCRIPTOR_TABLE_ENTRY = *mut root::_WOW64_DESCRIPTOR_TABLE_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXCEPTION_RECORD {
        pub ExceptionCode: u32,
        pub ExceptionFlags: u32,
        pub ExceptionRecord: *mut root::_EXCEPTION_RECORD,
        pub ExceptionAddress: root::PVOID,
        pub NumberParameters: u32,
        pub ExceptionInformation: [u64; 15usize],
    }
    pub type EXCEPTION_RECORD = root::_EXCEPTION_RECORD;
    pub type PEXCEPTION_RECORD = *mut root::EXCEPTION_RECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXCEPTION_RECORD32 {
        pub ExceptionCode: u32,
        pub ExceptionFlags: u32,
        pub ExceptionRecord: u32,
        pub ExceptionAddress: u32,
        pub NumberParameters: u32,
        pub ExceptionInformation: [u32; 15usize],
    }
    pub type EXCEPTION_RECORD32 = root::_EXCEPTION_RECORD32;
    pub type PEXCEPTION_RECORD32 = *mut root::_EXCEPTION_RECORD32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXCEPTION_RECORD64 {
        pub ExceptionCode: u32,
        pub ExceptionFlags: u32,
        pub ExceptionRecord: root::DWORD64,
        pub ExceptionAddress: root::DWORD64,
        pub NumberParameters: u32,
        pub __unusedAlignment: u32,
        pub ExceptionInformation: [root::DWORD64; 15usize],
    }
    pub type EXCEPTION_RECORD64 = root::_EXCEPTION_RECORD64;
    pub type PEXCEPTION_RECORD64 = *mut root::_EXCEPTION_RECORD64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXCEPTION_POINTERS {
        pub ExceptionRecord: root::PEXCEPTION_RECORD,
        pub ContextRecord: root::PCONTEXT,
    }
    pub type EXCEPTION_POINTERS = root::_EXCEPTION_POINTERS;
    pub type PEXCEPTION_POINTERS = *mut root::_EXCEPTION_POINTERS;
    pub type PACCESS_TOKEN = root::PVOID;
    pub type PSECURITY_DESCRIPTOR = root::PVOID;
    pub type PSID = root::PVOID;
    pub type PCLAIMS_BLOB = root::PVOID;
    pub type ACCESS_MASK = u32;
    pub type PACCESS_MASK = *mut root::ACCESS_MASK;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GENERIC_MAPPING {
        pub GenericRead: root::ACCESS_MASK,
        pub GenericWrite: root::ACCESS_MASK,
        pub GenericExecute: root::ACCESS_MASK,
        pub GenericAll: root::ACCESS_MASK,
    }
    pub type GENERIC_MAPPING = root::_GENERIC_MAPPING;
    pub type PGENERIC_MAPPING = *mut root::GENERIC_MAPPING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LUID_AND_ATTRIBUTES {
        pub Luid: root::LUID,
        pub Attributes: u32,
    }
    pub type LUID_AND_ATTRIBUTES = root::_LUID_AND_ATTRIBUTES;
    pub type PLUID_AND_ATTRIBUTES = *mut root::_LUID_AND_ATTRIBUTES;
    pub type LUID_AND_ATTRIBUTES_ARRAY = [root::LUID_AND_ATTRIBUTES; 1usize];
    pub type PLUID_AND_ATTRIBUTES_ARRAY = *mut root::LUID_AND_ATTRIBUTES_ARRAY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SID_IDENTIFIER_AUTHORITY {
        pub Value: [u8; 6usize],
    }
    pub type SID_IDENTIFIER_AUTHORITY = root::_SID_IDENTIFIER_AUTHORITY;
    pub type PSID_IDENTIFIER_AUTHORITY = *mut root::_SID_IDENTIFIER_AUTHORITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SID {
        pub Revision: u8,
        pub SubAuthorityCount: u8,
        pub IdentifierAuthority: root::SID_IDENTIFIER_AUTHORITY,
        pub SubAuthority: [u32; 1usize],
    }
    pub type SID = root::_SID;
    pub type PISID = *mut root::_SID;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SE_SID {
        pub Sid: root::SID,
        pub Buffer: [u8; 68usize],
    }
    pub type SE_SID = root::_SE_SID;
    pub type PSE_SID = *mut root::_SE_SID;
    pub const _SID_NAME_USE_SidTypeUser: root::_SID_NAME_USE = 1;
    pub const _SID_NAME_USE_SidTypeGroup: root::_SID_NAME_USE = 2;
    pub const _SID_NAME_USE_SidTypeDomain: root::_SID_NAME_USE = 3;
    pub const _SID_NAME_USE_SidTypeAlias: root::_SID_NAME_USE = 4;
    pub const _SID_NAME_USE_SidTypeWellKnownGroup: root::_SID_NAME_USE = 5;
    pub const _SID_NAME_USE_SidTypeDeletedAccount: root::_SID_NAME_USE = 6;
    pub const _SID_NAME_USE_SidTypeInvalid: root::_SID_NAME_USE = 7;
    pub const _SID_NAME_USE_SidTypeUnknown: root::_SID_NAME_USE = 8;
    pub const _SID_NAME_USE_SidTypeComputer: root::_SID_NAME_USE = 9;
    pub const _SID_NAME_USE_SidTypeLabel: root::_SID_NAME_USE = 10;
    pub const _SID_NAME_USE_SidTypeLogonSession: root::_SID_NAME_USE = 11;
    pub type _SID_NAME_USE = i32;
    pub use self::super::root::_SID_NAME_USE as SID_NAME_USE;
    pub type PSID_NAME_USE = *mut root::_SID_NAME_USE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SID_AND_ATTRIBUTES {
        pub Sid: root::PSID,
        pub Attributes: u32,
    }
    pub type SID_AND_ATTRIBUTES = root::_SID_AND_ATTRIBUTES;
    pub type PSID_AND_ATTRIBUTES = *mut root::_SID_AND_ATTRIBUTES;
    pub type SID_AND_ATTRIBUTES_ARRAY = [root::SID_AND_ATTRIBUTES; 1usize];
    pub type PSID_AND_ATTRIBUTES_ARRAY = *mut root::SID_AND_ATTRIBUTES_ARRAY;
    pub type SID_HASH_ENTRY = u64;
    pub type PSID_HASH_ENTRY = *mut u64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SID_AND_ATTRIBUTES_HASH {
        pub SidCount: u32,
        pub SidAttr: root::PSID_AND_ATTRIBUTES,
        pub Hash: [root::SID_HASH_ENTRY; 32usize],
    }
    pub type SID_AND_ATTRIBUTES_HASH = root::_SID_AND_ATTRIBUTES_HASH;
    pub type PSID_AND_ATTRIBUTES_HASH = *mut root::_SID_AND_ATTRIBUTES_HASH;
    pub const WELL_KNOWN_SID_TYPE_WinNullSid: root::WELL_KNOWN_SID_TYPE = 0;
    pub const WELL_KNOWN_SID_TYPE_WinWorldSid: root::WELL_KNOWN_SID_TYPE = 1;
    pub const WELL_KNOWN_SID_TYPE_WinLocalSid: root::WELL_KNOWN_SID_TYPE = 2;
    pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerSid: root::WELL_KNOWN_SID_TYPE = 3;
    pub const WELL_KNOWN_SID_TYPE_WinCreatorGroupSid: root::WELL_KNOWN_SID_TYPE = 4;
    pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerServerSid: root::WELL_KNOWN_SID_TYPE = 5;
    pub const WELL_KNOWN_SID_TYPE_WinCreatorGroupServerSid: root::WELL_KNOWN_SID_TYPE = 6;
    pub const WELL_KNOWN_SID_TYPE_WinNtAuthoritySid: root::WELL_KNOWN_SID_TYPE = 7;
    pub const WELL_KNOWN_SID_TYPE_WinDialupSid: root::WELL_KNOWN_SID_TYPE = 8;
    pub const WELL_KNOWN_SID_TYPE_WinNetworkSid: root::WELL_KNOWN_SID_TYPE = 9;
    pub const WELL_KNOWN_SID_TYPE_WinBatchSid: root::WELL_KNOWN_SID_TYPE = 10;
    pub const WELL_KNOWN_SID_TYPE_WinInteractiveSid: root::WELL_KNOWN_SID_TYPE = 11;
    pub const WELL_KNOWN_SID_TYPE_WinServiceSid: root::WELL_KNOWN_SID_TYPE = 12;
    pub const WELL_KNOWN_SID_TYPE_WinAnonymousSid: root::WELL_KNOWN_SID_TYPE = 13;
    pub const WELL_KNOWN_SID_TYPE_WinProxySid: root::WELL_KNOWN_SID_TYPE = 14;
    pub const WELL_KNOWN_SID_TYPE_WinEnterpriseControllersSid: root::WELL_KNOWN_SID_TYPE = 15;
    pub const WELL_KNOWN_SID_TYPE_WinSelfSid: root::WELL_KNOWN_SID_TYPE = 16;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticatedUserSid: root::WELL_KNOWN_SID_TYPE = 17;
    pub const WELL_KNOWN_SID_TYPE_WinRestrictedCodeSid: root::WELL_KNOWN_SID_TYPE = 18;
    pub const WELL_KNOWN_SID_TYPE_WinTerminalServerSid: root::WELL_KNOWN_SID_TYPE = 19;
    pub const WELL_KNOWN_SID_TYPE_WinRemoteLogonIdSid: root::WELL_KNOWN_SID_TYPE = 20;
    pub const WELL_KNOWN_SID_TYPE_WinLogonIdsSid: root::WELL_KNOWN_SID_TYPE = 21;
    pub const WELL_KNOWN_SID_TYPE_WinLocalSystemSid: root::WELL_KNOWN_SID_TYPE = 22;
    pub const WELL_KNOWN_SID_TYPE_WinLocalServiceSid: root::WELL_KNOWN_SID_TYPE = 23;
    pub const WELL_KNOWN_SID_TYPE_WinNetworkServiceSid: root::WELL_KNOWN_SID_TYPE = 24;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinDomainSid: root::WELL_KNOWN_SID_TYPE = 25;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinAdministratorsSid: root::WELL_KNOWN_SID_TYPE = 26;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinUsersSid: root::WELL_KNOWN_SID_TYPE = 27;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinGuestsSid: root::WELL_KNOWN_SID_TYPE = 28;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinPowerUsersSid: root::WELL_KNOWN_SID_TYPE = 29;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinAccountOperatorsSid: root::WELL_KNOWN_SID_TYPE = 30;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinSystemOperatorsSid: root::WELL_KNOWN_SID_TYPE = 31;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinPrintOperatorsSid: root::WELL_KNOWN_SID_TYPE = 32;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinBackupOperatorsSid: root::WELL_KNOWN_SID_TYPE = 33;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinReplicatorSid: root::WELL_KNOWN_SID_TYPE = 34;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinPreWindows2000CompatibleAccessSid:
        root::WELL_KNOWN_SID_TYPE = 35;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinRemoteDesktopUsersSid: root::WELL_KNOWN_SID_TYPE = 36;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinNetworkConfigurationOperatorsSid:
        root::WELL_KNOWN_SID_TYPE = 37;
    pub const WELL_KNOWN_SID_TYPE_WinAccountAdministratorSid: root::WELL_KNOWN_SID_TYPE = 38;
    pub const WELL_KNOWN_SID_TYPE_WinAccountGuestSid: root::WELL_KNOWN_SID_TYPE = 39;
    pub const WELL_KNOWN_SID_TYPE_WinAccountKrbtgtSid: root::WELL_KNOWN_SID_TYPE = 40;
    pub const WELL_KNOWN_SID_TYPE_WinAccountDomainAdminsSid: root::WELL_KNOWN_SID_TYPE = 41;
    pub const WELL_KNOWN_SID_TYPE_WinAccountDomainUsersSid: root::WELL_KNOWN_SID_TYPE = 42;
    pub const WELL_KNOWN_SID_TYPE_WinAccountDomainGuestsSid: root::WELL_KNOWN_SID_TYPE = 43;
    pub const WELL_KNOWN_SID_TYPE_WinAccountComputersSid: root::WELL_KNOWN_SID_TYPE = 44;
    pub const WELL_KNOWN_SID_TYPE_WinAccountControllersSid: root::WELL_KNOWN_SID_TYPE = 45;
    pub const WELL_KNOWN_SID_TYPE_WinAccountCertAdminsSid: root::WELL_KNOWN_SID_TYPE = 46;
    pub const WELL_KNOWN_SID_TYPE_WinAccountSchemaAdminsSid: root::WELL_KNOWN_SID_TYPE = 47;
    pub const WELL_KNOWN_SID_TYPE_WinAccountEnterpriseAdminsSid: root::WELL_KNOWN_SID_TYPE = 48;
    pub const WELL_KNOWN_SID_TYPE_WinAccountPolicyAdminsSid: root::WELL_KNOWN_SID_TYPE = 49;
    pub const WELL_KNOWN_SID_TYPE_WinAccountRasAndIasServersSid: root::WELL_KNOWN_SID_TYPE = 50;
    pub const WELL_KNOWN_SID_TYPE_WinNTLMAuthenticationSid: root::WELL_KNOWN_SID_TYPE = 51;
    pub const WELL_KNOWN_SID_TYPE_WinDigestAuthenticationSid: root::WELL_KNOWN_SID_TYPE = 52;
    pub const WELL_KNOWN_SID_TYPE_WinSChannelAuthenticationSid: root::WELL_KNOWN_SID_TYPE = 53;
    pub const WELL_KNOWN_SID_TYPE_WinThisOrganizationSid: root::WELL_KNOWN_SID_TYPE = 54;
    pub const WELL_KNOWN_SID_TYPE_WinOtherOrganizationSid: root::WELL_KNOWN_SID_TYPE = 55;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinIncomingForestTrustBuildersSid:
        root::WELL_KNOWN_SID_TYPE = 56;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinPerfMonitoringUsersSid: root::WELL_KNOWN_SID_TYPE = 57;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinPerfLoggingUsersSid: root::WELL_KNOWN_SID_TYPE = 58;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinAuthorizationAccessSid: root::WELL_KNOWN_SID_TYPE = 59;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinTerminalServerLicenseServersSid:
        root::WELL_KNOWN_SID_TYPE = 60;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinDCOMUsersSid: root::WELL_KNOWN_SID_TYPE = 61;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinIUsersSid: root::WELL_KNOWN_SID_TYPE = 62;
    pub const WELL_KNOWN_SID_TYPE_WinIUserSid: root::WELL_KNOWN_SID_TYPE = 63;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinCryptoOperatorsSid: root::WELL_KNOWN_SID_TYPE = 64;
    pub const WELL_KNOWN_SID_TYPE_WinUntrustedLabelSid: root::WELL_KNOWN_SID_TYPE = 65;
    pub const WELL_KNOWN_SID_TYPE_WinLowLabelSid: root::WELL_KNOWN_SID_TYPE = 66;
    pub const WELL_KNOWN_SID_TYPE_WinMediumLabelSid: root::WELL_KNOWN_SID_TYPE = 67;
    pub const WELL_KNOWN_SID_TYPE_WinHighLabelSid: root::WELL_KNOWN_SID_TYPE = 68;
    pub const WELL_KNOWN_SID_TYPE_WinSystemLabelSid: root::WELL_KNOWN_SID_TYPE = 69;
    pub const WELL_KNOWN_SID_TYPE_WinWriteRestrictedCodeSid: root::WELL_KNOWN_SID_TYPE = 70;
    pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerRightsSid: root::WELL_KNOWN_SID_TYPE = 71;
    pub const WELL_KNOWN_SID_TYPE_WinCacheablePrincipalsGroupSid: root::WELL_KNOWN_SID_TYPE = 72;
    pub const WELL_KNOWN_SID_TYPE_WinNonCacheablePrincipalsGroupSid: root::WELL_KNOWN_SID_TYPE = 73;
    pub const WELL_KNOWN_SID_TYPE_WinEnterpriseReadonlyControllersSid: root::WELL_KNOWN_SID_TYPE =
        74;
    pub const WELL_KNOWN_SID_TYPE_WinAccountReadonlyControllersSid: root::WELL_KNOWN_SID_TYPE = 75;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinEventLogReadersGroup: root::WELL_KNOWN_SID_TYPE = 76;
    pub const WELL_KNOWN_SID_TYPE_WinNewEnterpriseReadonlyControllersSid:
        root::WELL_KNOWN_SID_TYPE = 77;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinCertSvcDComAccessGroup: root::WELL_KNOWN_SID_TYPE = 78;
    pub const WELL_KNOWN_SID_TYPE_WinMediumPlusLabelSid: root::WELL_KNOWN_SID_TYPE = 79;
    pub const WELL_KNOWN_SID_TYPE_WinLocalLogonSid: root::WELL_KNOWN_SID_TYPE = 80;
    pub const WELL_KNOWN_SID_TYPE_WinConsoleLogonSid: root::WELL_KNOWN_SID_TYPE = 81;
    pub const WELL_KNOWN_SID_TYPE_WinThisOrganizationCertificateSid: root::WELL_KNOWN_SID_TYPE = 82;
    pub const WELL_KNOWN_SID_TYPE_WinApplicationPackageAuthoritySid: root::WELL_KNOWN_SID_TYPE = 83;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinAnyPackageSid: root::WELL_KNOWN_SID_TYPE = 84;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityInternetClientSid: root::WELL_KNOWN_SID_TYPE = 85;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityInternetClientServerSid: root::WELL_KNOWN_SID_TYPE =
        86;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityPrivateNetworkClientServerSid:
        root::WELL_KNOWN_SID_TYPE = 87;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityPicturesLibrarySid: root::WELL_KNOWN_SID_TYPE = 88;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityVideosLibrarySid: root::WELL_KNOWN_SID_TYPE = 89;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityMusicLibrarySid: root::WELL_KNOWN_SID_TYPE = 90;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityDocumentsLibrarySid: root::WELL_KNOWN_SID_TYPE = 91;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilitySharedUserCertificatesSid:
        root::WELL_KNOWN_SID_TYPE = 92;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityEnterpriseAuthenticationSid:
        root::WELL_KNOWN_SID_TYPE = 93;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityRemovableStorageSid: root::WELL_KNOWN_SID_TYPE = 94;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSRemoteAccessServersSid: root::WELL_KNOWN_SID_TYPE =
        95;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSEndpointServersSid: root::WELL_KNOWN_SID_TYPE = 96;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSManagementServersSid: root::WELL_KNOWN_SID_TYPE = 97;
    pub const WELL_KNOWN_SID_TYPE_WinUserModeDriversSid: root::WELL_KNOWN_SID_TYPE = 98;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinHyperVAdminsSid: root::WELL_KNOWN_SID_TYPE = 99;
    pub const WELL_KNOWN_SID_TYPE_WinAccountCloneableControllersSid: root::WELL_KNOWN_SID_TYPE =
        100;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinAccessControlAssistanceOperatorsSid:
        root::WELL_KNOWN_SID_TYPE = 101;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinRemoteManagementUsersSid: root::WELL_KNOWN_SID_TYPE =
        102;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticationAuthorityAssertedSid: root::WELL_KNOWN_SID_TYPE =
        103;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticationServiceAssertedSid: root::WELL_KNOWN_SID_TYPE =
        104;
    pub const WELL_KNOWN_SID_TYPE_WinLocalAccountSid: root::WELL_KNOWN_SID_TYPE = 105;
    pub const WELL_KNOWN_SID_TYPE_WinLocalAccountAndAdministratorSid: root::WELL_KNOWN_SID_TYPE =
        106;
    pub const WELL_KNOWN_SID_TYPE_WinAccountProtectedUsersSid: root::WELL_KNOWN_SID_TYPE = 107;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityAppointmentsSid: root::WELL_KNOWN_SID_TYPE = 108;
    pub const WELL_KNOWN_SID_TYPE_WinCapabilityContactsSid: root::WELL_KNOWN_SID_TYPE = 109;
    pub const WELL_KNOWN_SID_TYPE_WinAccountDefaultSystemManagedSid: root::WELL_KNOWN_SID_TYPE =
        110;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinDefaultSystemManagedGroupSid:
        root::WELL_KNOWN_SID_TYPE = 111;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinStorageReplicaAdminsSid: root::WELL_KNOWN_SID_TYPE =
        112;
    pub const WELL_KNOWN_SID_TYPE_WinAccountKeyAdminsSid: root::WELL_KNOWN_SID_TYPE = 113;
    pub const WELL_KNOWN_SID_TYPE_WinAccountEnterpriseKeyAdminsSid: root::WELL_KNOWN_SID_TYPE = 114;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyTrustSid: root::WELL_KNOWN_SID_TYPE = 115;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyPropertyMFASid: root::WELL_KNOWN_SID_TYPE =
        116;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyPropertyAttestationSid:
        root::WELL_KNOWN_SID_TYPE = 117;
    pub const WELL_KNOWN_SID_TYPE_WinAuthenticationFreshKeyAuthSid: root::WELL_KNOWN_SID_TYPE = 118;
    pub const WELL_KNOWN_SID_TYPE_WinBuiltinDeviceOwnersSid: root::WELL_KNOWN_SID_TYPE = 119;
    pub type WELL_KNOWN_SID_TYPE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACL {
        pub AclRevision: u8,
        pub Sbz1: u8,
        pub AclSize: u16,
        pub AceCount: u16,
        pub Sbz2: u16,
    }
    pub type ACL = root::_ACL;
    pub type PACL = *mut root::ACL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACE_HEADER {
        pub AceType: u8,
        pub AceFlags: u8,
        pub AceSize: u16,
    }
    pub type ACE_HEADER = root::_ACE_HEADER;
    pub type PACE_HEADER = *mut root::ACE_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_ALLOWED_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type ACCESS_ALLOWED_ACE = root::_ACCESS_ALLOWED_ACE;
    pub type PACCESS_ALLOWED_ACE = *mut root::ACCESS_ALLOWED_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_DENIED_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type ACCESS_DENIED_ACE = root::_ACCESS_DENIED_ACE;
    pub type PACCESS_DENIED_ACE = *mut root::ACCESS_DENIED_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_AUDIT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_AUDIT_ACE = root::_SYSTEM_AUDIT_ACE;
    pub type PSYSTEM_AUDIT_ACE = *mut root::SYSTEM_AUDIT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_ALARM_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_ALARM_ACE = root::_SYSTEM_ALARM_ACE;
    pub type PSYSTEM_ALARM_ACE = *mut root::SYSTEM_ALARM_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_RESOURCE_ATTRIBUTE_ACE = root::_SYSTEM_RESOURCE_ATTRIBUTE_ACE;
    pub type PSYSTEM_RESOURCE_ATTRIBUTE_ACE = *mut root::_SYSTEM_RESOURCE_ATTRIBUTE_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_SCOPED_POLICY_ID_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_SCOPED_POLICY_ID_ACE = root::_SYSTEM_SCOPED_POLICY_ID_ACE;
    pub type PSYSTEM_SCOPED_POLICY_ID_ACE = *mut root::_SYSTEM_SCOPED_POLICY_ID_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_MANDATORY_LABEL_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_MANDATORY_LABEL_ACE = root::_SYSTEM_MANDATORY_LABEL_ACE;
    pub type PSYSTEM_MANDATORY_LABEL_ACE = *mut root::_SYSTEM_MANDATORY_LABEL_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_PROCESS_TRUST_LABEL_ACE = root::_SYSTEM_PROCESS_TRUST_LABEL_ACE;
    pub type PSYSTEM_PROCESS_TRUST_LABEL_ACE = *mut root::_SYSTEM_PROCESS_TRUST_LABEL_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_ACCESS_FILTER_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_ACCESS_FILTER_ACE = root::_SYSTEM_ACCESS_FILTER_ACE;
    pub type PSYSTEM_ACCESS_FILTER_ACE = *mut root::_SYSTEM_ACCESS_FILTER_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_ALLOWED_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type ACCESS_ALLOWED_OBJECT_ACE = root::_ACCESS_ALLOWED_OBJECT_ACE;
    pub type PACCESS_ALLOWED_OBJECT_ACE = *mut root::_ACCESS_ALLOWED_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_DENIED_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type ACCESS_DENIED_OBJECT_ACE = root::_ACCESS_DENIED_OBJECT_ACE;
    pub type PACCESS_DENIED_OBJECT_ACE = *mut root::_ACCESS_DENIED_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_AUDIT_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type SYSTEM_AUDIT_OBJECT_ACE = root::_SYSTEM_AUDIT_OBJECT_ACE;
    pub type PSYSTEM_AUDIT_OBJECT_ACE = *mut root::_SYSTEM_AUDIT_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_ALARM_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type SYSTEM_ALARM_OBJECT_ACE = root::_SYSTEM_ALARM_OBJECT_ACE;
    pub type PSYSTEM_ALARM_OBJECT_ACE = *mut root::_SYSTEM_ALARM_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_ALLOWED_CALLBACK_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type ACCESS_ALLOWED_CALLBACK_ACE = root::_ACCESS_ALLOWED_CALLBACK_ACE;
    pub type PACCESS_ALLOWED_CALLBACK_ACE = *mut root::_ACCESS_ALLOWED_CALLBACK_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_DENIED_CALLBACK_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type ACCESS_DENIED_CALLBACK_ACE = root::_ACCESS_DENIED_CALLBACK_ACE;
    pub type PACCESS_DENIED_CALLBACK_ACE = *mut root::_ACCESS_DENIED_CALLBACK_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_AUDIT_CALLBACK_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_AUDIT_CALLBACK_ACE = root::_SYSTEM_AUDIT_CALLBACK_ACE;
    pub type PSYSTEM_AUDIT_CALLBACK_ACE = *mut root::_SYSTEM_AUDIT_CALLBACK_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_ALARM_CALLBACK_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub SidStart: u32,
    }
    pub type SYSTEM_ALARM_CALLBACK_ACE = root::_SYSTEM_ALARM_CALLBACK_ACE;
    pub type PSYSTEM_ALARM_CALLBACK_ACE = *mut root::_SYSTEM_ALARM_CALLBACK_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = root::_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
    pub type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = *mut root::_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type ACCESS_DENIED_CALLBACK_OBJECT_ACE = root::_ACCESS_DENIED_CALLBACK_OBJECT_ACE;
    pub type PACCESS_DENIED_CALLBACK_OBJECT_ACE = *mut root::_ACCESS_DENIED_CALLBACK_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = root::_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
    pub type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = *mut root::_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
        pub Header: root::ACE_HEADER,
        pub Mask: root::ACCESS_MASK,
        pub Flags: u32,
        pub ObjectType: root::GUID,
        pub InheritedObjectType: root::GUID,
        pub SidStart: u32,
    }
    pub type SYSTEM_ALARM_CALLBACK_OBJECT_ACE = root::_SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
    pub type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = *mut root::_SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
    pub const _ACL_INFORMATION_CLASS_AclRevisionInformation: root::_ACL_INFORMATION_CLASS = 1;
    pub const _ACL_INFORMATION_CLASS_AclSizeInformation: root::_ACL_INFORMATION_CLASS = 2;
    pub type _ACL_INFORMATION_CLASS = i32;
    pub use self::super::root::_ACL_INFORMATION_CLASS as ACL_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACL_REVISION_INFORMATION {
        pub AclRevision: u32,
    }
    pub type ACL_REVISION_INFORMATION = root::_ACL_REVISION_INFORMATION;
    pub type PACL_REVISION_INFORMATION = *mut root::ACL_REVISION_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACL_SIZE_INFORMATION {
        pub AceCount: u32,
        pub AclBytesInUse: u32,
        pub AclBytesFree: u32,
    }
    pub type ACL_SIZE_INFORMATION = root::_ACL_SIZE_INFORMATION;
    pub type PACL_SIZE_INFORMATION = *mut root::ACL_SIZE_INFORMATION;
    pub type SECURITY_DESCRIPTOR_CONTROL = u16;
    pub type PSECURITY_DESCRIPTOR_CONTROL = *mut u16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SECURITY_DESCRIPTOR_RELATIVE {
        pub Revision: u8,
        pub Sbz1: u8,
        pub Control: root::SECURITY_DESCRIPTOR_CONTROL,
        pub Owner: u32,
        pub Group: u32,
        pub Sacl: u32,
        pub Dacl: u32,
    }
    pub type SECURITY_DESCRIPTOR_RELATIVE = root::_SECURITY_DESCRIPTOR_RELATIVE;
    pub type PISECURITY_DESCRIPTOR_RELATIVE = *mut root::_SECURITY_DESCRIPTOR_RELATIVE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SECURITY_DESCRIPTOR {
        pub Revision: u8,
        pub Sbz1: u8,
        pub Control: root::SECURITY_DESCRIPTOR_CONTROL,
        pub Owner: root::PSID,
        pub Group: root::PSID,
        pub Sacl: root::PACL,
        pub Dacl: root::PACL,
    }
    pub type SECURITY_DESCRIPTOR = root::_SECURITY_DESCRIPTOR;
    pub type PISECURITY_DESCRIPTOR = *mut root::_SECURITY_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SECURITY_OBJECT_AI_PARAMS {
        pub Size: u32,
        pub ConstraintMask: u32,
    }
    pub type SECURITY_OBJECT_AI_PARAMS = root::_SECURITY_OBJECT_AI_PARAMS;
    pub type PSECURITY_OBJECT_AI_PARAMS = *mut root::_SECURITY_OBJECT_AI_PARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OBJECT_TYPE_LIST {
        pub Level: u16,
        pub Sbz: u16,
        pub ObjectType: *mut root::GUID,
    }
    pub type OBJECT_TYPE_LIST = root::_OBJECT_TYPE_LIST;
    pub type POBJECT_TYPE_LIST = *mut root::_OBJECT_TYPE_LIST;
    pub const _AUDIT_EVENT_TYPE_AuditEventObjectAccess: root::_AUDIT_EVENT_TYPE = 0;
    pub const _AUDIT_EVENT_TYPE_AuditEventDirectoryServiceAccess: root::_AUDIT_EVENT_TYPE = 1;
    pub type _AUDIT_EVENT_TYPE = i32;
    pub use self::super::root::_AUDIT_EVENT_TYPE as AUDIT_EVENT_TYPE;
    pub type PAUDIT_EVENT_TYPE = *mut root::_AUDIT_EVENT_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRIVILEGE_SET {
        pub PrivilegeCount: u32,
        pub Control: u32,
        pub Privilege: [root::LUID_AND_ATTRIBUTES; 1usize],
    }
    pub type PRIVILEGE_SET = root::_PRIVILEGE_SET;
    pub type PPRIVILEGE_SET = *mut root::_PRIVILEGE_SET;
    pub const _ACCESS_REASON_TYPE_AccessReasonNone: root::_ACCESS_REASON_TYPE = 0;
    pub const _ACCESS_REASON_TYPE_AccessReasonAllowedAce: root::_ACCESS_REASON_TYPE = 65536;
    pub const _ACCESS_REASON_TYPE_AccessReasonDeniedAce: root::_ACCESS_REASON_TYPE = 131072;
    pub const _ACCESS_REASON_TYPE_AccessReasonAllowedParentAce: root::_ACCESS_REASON_TYPE = 196608;
    pub const _ACCESS_REASON_TYPE_AccessReasonDeniedParentAce: root::_ACCESS_REASON_TYPE = 262144;
    pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedByCape: root::_ACCESS_REASON_TYPE = 327680;
    pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedByParentCape: root::_ACCESS_REASON_TYPE =
        393216;
    pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedToAppContainer: root::_ACCESS_REASON_TYPE =
        458752;
    pub const _ACCESS_REASON_TYPE_AccessReasonMissingPrivilege: root::_ACCESS_REASON_TYPE = 1048576;
    pub const _ACCESS_REASON_TYPE_AccessReasonFromPrivilege: root::_ACCESS_REASON_TYPE = 2097152;
    pub const _ACCESS_REASON_TYPE_AccessReasonIntegrityLevel: root::_ACCESS_REASON_TYPE = 3145728;
    pub const _ACCESS_REASON_TYPE_AccessReasonOwnership: root::_ACCESS_REASON_TYPE = 4194304;
    pub const _ACCESS_REASON_TYPE_AccessReasonNullDacl: root::_ACCESS_REASON_TYPE = 5242880;
    pub const _ACCESS_REASON_TYPE_AccessReasonEmptyDacl: root::_ACCESS_REASON_TYPE = 6291456;
    pub const _ACCESS_REASON_TYPE_AccessReasonNoSD: root::_ACCESS_REASON_TYPE = 7340032;
    pub const _ACCESS_REASON_TYPE_AccessReasonNoGrant: root::_ACCESS_REASON_TYPE = 8388608;
    pub const _ACCESS_REASON_TYPE_AccessReasonTrustLabel: root::_ACCESS_REASON_TYPE = 9437184;
    pub const _ACCESS_REASON_TYPE_AccessReasonFilterAce: root::_ACCESS_REASON_TYPE = 10485760;
    pub type _ACCESS_REASON_TYPE = i32;
    pub use self::super::root::_ACCESS_REASON_TYPE as ACCESS_REASON_TYPE;
    pub type ACCESS_REASON = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACCESS_REASONS {
        pub Data: [root::ACCESS_REASON; 32usize],
    }
    pub type ACCESS_REASONS = root::_ACCESS_REASONS;
    pub type PACCESS_REASONS = *mut root::_ACCESS_REASONS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SE_SECURITY_DESCRIPTOR {
        pub Size: u32,
        pub Flags: u32,
        pub SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
    }
    pub type SE_SECURITY_DESCRIPTOR = root::_SE_SECURITY_DESCRIPTOR;
    pub type PSE_SECURITY_DESCRIPTOR = *mut root::_SE_SECURITY_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SE_ACCESS_REQUEST {
        pub Size: u32,
        pub SeSecurityDescriptor: root::PSE_SECURITY_DESCRIPTOR,
        pub DesiredAccess: root::ACCESS_MASK,
        pub PreviouslyGrantedAccess: root::ACCESS_MASK,
        pub PrincipalSelfSid: root::PSID,
        pub GenericMapping: root::PGENERIC_MAPPING,
        pub ObjectTypeListCount: u32,
        pub ObjectTypeList: root::POBJECT_TYPE_LIST,
    }
    pub type SE_ACCESS_REQUEST = root::_SE_ACCESS_REQUEST;
    pub type PSE_ACCESS_REQUEST = *mut root::_SE_ACCESS_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SE_ACCESS_REPLY {
        pub Size: u32,
        pub ResultListCount: u32,
        pub GrantedAccess: root::PACCESS_MASK,
        pub AccessStatus: root::PDWORD,
        pub AccessReason: root::PACCESS_REASONS,
        pub Privileges: *mut root::PPRIVILEGE_SET,
    }
    pub type SE_ACCESS_REPLY = root::_SE_ACCESS_REPLY;
    pub type PSE_ACCESS_REPLY = *mut root::_SE_ACCESS_REPLY;
    pub const _SECURITY_IMPERSONATION_LEVEL_SecurityAnonymous: root::_SECURITY_IMPERSONATION_LEVEL =
        0;
    pub const _SECURITY_IMPERSONATION_LEVEL_SecurityIdentification:
        root::_SECURITY_IMPERSONATION_LEVEL = 1;
    pub const _SECURITY_IMPERSONATION_LEVEL_SecurityImpersonation:
        root::_SECURITY_IMPERSONATION_LEVEL = 2;
    pub const _SECURITY_IMPERSONATION_LEVEL_SecurityDelegation:
        root::_SECURITY_IMPERSONATION_LEVEL = 3;
    pub type _SECURITY_IMPERSONATION_LEVEL = i32;
    pub use self::super::root::_SECURITY_IMPERSONATION_LEVEL as SECURITY_IMPERSONATION_LEVEL;
    pub type PSECURITY_IMPERSONATION_LEVEL = *mut root::_SECURITY_IMPERSONATION_LEVEL;
    pub const _TOKEN_TYPE_TokenPrimary: root::_TOKEN_TYPE = 1;
    pub const _TOKEN_TYPE_TokenImpersonation: root::_TOKEN_TYPE = 2;
    pub type _TOKEN_TYPE = i32;
    pub use self::super::root::_TOKEN_TYPE as TOKEN_TYPE;
    pub type PTOKEN_TYPE = *mut root::TOKEN_TYPE;
    pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeDefault: root::_TOKEN_ELEVATION_TYPE = 1;
    pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeFull: root::_TOKEN_ELEVATION_TYPE = 2;
    pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeLimited: root::_TOKEN_ELEVATION_TYPE = 3;
    pub type _TOKEN_ELEVATION_TYPE = i32;
    pub use self::super::root::_TOKEN_ELEVATION_TYPE as TOKEN_ELEVATION_TYPE;
    pub type PTOKEN_ELEVATION_TYPE = *mut root::_TOKEN_ELEVATION_TYPE;
    pub const _TOKEN_INFORMATION_CLASS_TokenUser: root::_TOKEN_INFORMATION_CLASS = 1;
    pub const _TOKEN_INFORMATION_CLASS_TokenGroups: root::_TOKEN_INFORMATION_CLASS = 2;
    pub const _TOKEN_INFORMATION_CLASS_TokenPrivileges: root::_TOKEN_INFORMATION_CLASS = 3;
    pub const _TOKEN_INFORMATION_CLASS_TokenOwner: root::_TOKEN_INFORMATION_CLASS = 4;
    pub const _TOKEN_INFORMATION_CLASS_TokenPrimaryGroup: root::_TOKEN_INFORMATION_CLASS = 5;
    pub const _TOKEN_INFORMATION_CLASS_TokenDefaultDacl: root::_TOKEN_INFORMATION_CLASS = 6;
    pub const _TOKEN_INFORMATION_CLASS_TokenSource: root::_TOKEN_INFORMATION_CLASS = 7;
    pub const _TOKEN_INFORMATION_CLASS_TokenType: root::_TOKEN_INFORMATION_CLASS = 8;
    pub const _TOKEN_INFORMATION_CLASS_TokenImpersonationLevel: root::_TOKEN_INFORMATION_CLASS = 9;
    pub const _TOKEN_INFORMATION_CLASS_TokenStatistics: root::_TOKEN_INFORMATION_CLASS = 10;
    pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedSids: root::_TOKEN_INFORMATION_CLASS = 11;
    pub const _TOKEN_INFORMATION_CLASS_TokenSessionId: root::_TOKEN_INFORMATION_CLASS = 12;
    pub const _TOKEN_INFORMATION_CLASS_TokenGroupsAndPrivileges: root::_TOKEN_INFORMATION_CLASS =
        13;
    pub const _TOKEN_INFORMATION_CLASS_TokenSessionReference: root::_TOKEN_INFORMATION_CLASS = 14;
    pub const _TOKEN_INFORMATION_CLASS_TokenSandBoxInert: root::_TOKEN_INFORMATION_CLASS = 15;
    pub const _TOKEN_INFORMATION_CLASS_TokenAuditPolicy: root::_TOKEN_INFORMATION_CLASS = 16;
    pub const _TOKEN_INFORMATION_CLASS_TokenOrigin: root::_TOKEN_INFORMATION_CLASS = 17;
    pub const _TOKEN_INFORMATION_CLASS_TokenElevationType: root::_TOKEN_INFORMATION_CLASS = 18;
    pub const _TOKEN_INFORMATION_CLASS_TokenLinkedToken: root::_TOKEN_INFORMATION_CLASS = 19;
    pub const _TOKEN_INFORMATION_CLASS_TokenElevation: root::_TOKEN_INFORMATION_CLASS = 20;
    pub const _TOKEN_INFORMATION_CLASS_TokenHasRestrictions: root::_TOKEN_INFORMATION_CLASS = 21;
    pub const _TOKEN_INFORMATION_CLASS_TokenAccessInformation: root::_TOKEN_INFORMATION_CLASS = 22;
    pub const _TOKEN_INFORMATION_CLASS_TokenVirtualizationAllowed: root::_TOKEN_INFORMATION_CLASS =
        23;
    pub const _TOKEN_INFORMATION_CLASS_TokenVirtualizationEnabled: root::_TOKEN_INFORMATION_CLASS =
        24;
    pub const _TOKEN_INFORMATION_CLASS_TokenIntegrityLevel: root::_TOKEN_INFORMATION_CLASS = 25;
    pub const _TOKEN_INFORMATION_CLASS_TokenUIAccess: root::_TOKEN_INFORMATION_CLASS = 26;
    pub const _TOKEN_INFORMATION_CLASS_TokenMandatoryPolicy: root::_TOKEN_INFORMATION_CLASS = 27;
    pub const _TOKEN_INFORMATION_CLASS_TokenLogonSid: root::_TOKEN_INFORMATION_CLASS = 28;
    pub const _TOKEN_INFORMATION_CLASS_TokenIsAppContainer: root::_TOKEN_INFORMATION_CLASS = 29;
    pub const _TOKEN_INFORMATION_CLASS_TokenCapabilities: root::_TOKEN_INFORMATION_CLASS = 30;
    pub const _TOKEN_INFORMATION_CLASS_TokenAppContainerSid: root::_TOKEN_INFORMATION_CLASS = 31;
    pub const _TOKEN_INFORMATION_CLASS_TokenAppContainerNumber: root::_TOKEN_INFORMATION_CLASS = 32;
    pub const _TOKEN_INFORMATION_CLASS_TokenUserClaimAttributes: root::_TOKEN_INFORMATION_CLASS =
        33;
    pub const _TOKEN_INFORMATION_CLASS_TokenDeviceClaimAttributes: root::_TOKEN_INFORMATION_CLASS =
        34;
    pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedUserClaimAttributes:
        root::_TOKEN_INFORMATION_CLASS = 35;
    pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedDeviceClaimAttributes:
        root::_TOKEN_INFORMATION_CLASS = 36;
    pub const _TOKEN_INFORMATION_CLASS_TokenDeviceGroups: root::_TOKEN_INFORMATION_CLASS = 37;
    pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedDeviceGroups: root::_TOKEN_INFORMATION_CLASS =
        38;
    pub const _TOKEN_INFORMATION_CLASS_TokenSecurityAttributes: root::_TOKEN_INFORMATION_CLASS = 39;
    pub const _TOKEN_INFORMATION_CLASS_TokenIsRestricted: root::_TOKEN_INFORMATION_CLASS = 40;
    pub const _TOKEN_INFORMATION_CLASS_TokenProcessTrustLevel: root::_TOKEN_INFORMATION_CLASS = 41;
    pub const _TOKEN_INFORMATION_CLASS_TokenPrivateNameSpace: root::_TOKEN_INFORMATION_CLASS = 42;
    pub const _TOKEN_INFORMATION_CLASS_TokenSingletonAttributes: root::_TOKEN_INFORMATION_CLASS =
        43;
    pub const _TOKEN_INFORMATION_CLASS_TokenBnoIsolation: root::_TOKEN_INFORMATION_CLASS = 44;
    pub const _TOKEN_INFORMATION_CLASS_TokenChildProcessFlags: root::_TOKEN_INFORMATION_CLASS = 45;
    pub const _TOKEN_INFORMATION_CLASS_TokenIsLessPrivilegedAppContainer:
        root::_TOKEN_INFORMATION_CLASS = 46;
    pub const _TOKEN_INFORMATION_CLASS_TokenIsSandboxed: root::_TOKEN_INFORMATION_CLASS = 47;
    pub const _TOKEN_INFORMATION_CLASS_TokenOriginatingProcessTrustLevel:
        root::_TOKEN_INFORMATION_CLASS = 48;
    pub const _TOKEN_INFORMATION_CLASS_MaxTokenInfoClass: root::_TOKEN_INFORMATION_CLASS = 49;
    pub type _TOKEN_INFORMATION_CLASS = i32;
    pub use self::super::root::_TOKEN_INFORMATION_CLASS as TOKEN_INFORMATION_CLASS;
    pub type PTOKEN_INFORMATION_CLASS = *mut root::_TOKEN_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_USER {
        pub User: root::SID_AND_ATTRIBUTES,
    }
    pub type TOKEN_USER = root::_TOKEN_USER;
    pub type PTOKEN_USER = *mut root::_TOKEN_USER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SE_TOKEN_USER {
        pub __bindgen_anon_1: root::_SE_TOKEN_USER__bindgen_ty_1,
        pub __bindgen_anon_2: root::_SE_TOKEN_USER__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SE_TOKEN_USER__bindgen_ty_1 {
        pub TokenUser: root::TOKEN_USER,
        pub User: root::SID_AND_ATTRIBUTES,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SE_TOKEN_USER__bindgen_ty_2 {
        pub Sid: root::SID,
        pub Buffer: [u8; 68usize],
    }
    pub type SE_TOKEN_USER = root::_SE_TOKEN_USER;
    pub type PSE_TOKEN_USER = root::_SE_TOKEN_USER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_GROUPS {
        pub GroupCount: u32,
        pub Groups: [root::SID_AND_ATTRIBUTES; 1usize],
    }
    pub type TOKEN_GROUPS = root::_TOKEN_GROUPS;
    pub type PTOKEN_GROUPS = *mut root::_TOKEN_GROUPS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_PRIVILEGES {
        pub PrivilegeCount: u32,
        pub Privileges: [root::LUID_AND_ATTRIBUTES; 1usize],
    }
    pub type TOKEN_PRIVILEGES = root::_TOKEN_PRIVILEGES;
    pub type PTOKEN_PRIVILEGES = *mut root::_TOKEN_PRIVILEGES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_OWNER {
        pub Owner: root::PSID,
    }
    pub type TOKEN_OWNER = root::_TOKEN_OWNER;
    pub type PTOKEN_OWNER = *mut root::_TOKEN_OWNER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_PRIMARY_GROUP {
        pub PrimaryGroup: root::PSID,
    }
    pub type TOKEN_PRIMARY_GROUP = root::_TOKEN_PRIMARY_GROUP;
    pub type PTOKEN_PRIMARY_GROUP = *mut root::_TOKEN_PRIMARY_GROUP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_DEFAULT_DACL {
        pub DefaultDacl: root::PACL,
    }
    pub type TOKEN_DEFAULT_DACL = root::_TOKEN_DEFAULT_DACL;
    pub type PTOKEN_DEFAULT_DACL = *mut root::_TOKEN_DEFAULT_DACL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_USER_CLAIMS {
        pub UserClaims: root::PCLAIMS_BLOB,
    }
    pub type TOKEN_USER_CLAIMS = root::_TOKEN_USER_CLAIMS;
    pub type PTOKEN_USER_CLAIMS = *mut root::_TOKEN_USER_CLAIMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_DEVICE_CLAIMS {
        pub DeviceClaims: root::PCLAIMS_BLOB,
    }
    pub type TOKEN_DEVICE_CLAIMS = root::_TOKEN_DEVICE_CLAIMS;
    pub type PTOKEN_DEVICE_CLAIMS = *mut root::_TOKEN_DEVICE_CLAIMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_GROUPS_AND_PRIVILEGES {
        pub SidCount: u32,
        pub SidLength: u32,
        pub Sids: root::PSID_AND_ATTRIBUTES,
        pub RestrictedSidCount: u32,
        pub RestrictedSidLength: u32,
        pub RestrictedSids: root::PSID_AND_ATTRIBUTES,
        pub PrivilegeCount: u32,
        pub PrivilegeLength: u32,
        pub Privileges: root::PLUID_AND_ATTRIBUTES,
        pub AuthenticationId: root::LUID,
    }
    pub type TOKEN_GROUPS_AND_PRIVILEGES = root::_TOKEN_GROUPS_AND_PRIVILEGES;
    pub type PTOKEN_GROUPS_AND_PRIVILEGES = *mut root::_TOKEN_GROUPS_AND_PRIVILEGES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_LINKED_TOKEN {
        pub LinkedToken: root::HANDLE,
    }
    pub type TOKEN_LINKED_TOKEN = root::_TOKEN_LINKED_TOKEN;
    pub type PTOKEN_LINKED_TOKEN = *mut root::_TOKEN_LINKED_TOKEN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_ELEVATION {
        pub TokenIsElevated: u32,
    }
    pub type TOKEN_ELEVATION = root::_TOKEN_ELEVATION;
    pub type PTOKEN_ELEVATION = *mut root::_TOKEN_ELEVATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_MANDATORY_LABEL {
        pub Label: root::SID_AND_ATTRIBUTES,
    }
    pub type TOKEN_MANDATORY_LABEL = root::_TOKEN_MANDATORY_LABEL;
    pub type PTOKEN_MANDATORY_LABEL = *mut root::_TOKEN_MANDATORY_LABEL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_MANDATORY_POLICY {
        pub Policy: u32,
    }
    pub type TOKEN_MANDATORY_POLICY = root::_TOKEN_MANDATORY_POLICY;
    pub type PTOKEN_MANDATORY_POLICY = *mut root::_TOKEN_MANDATORY_POLICY;
    pub type PSECURITY_ATTRIBUTES_OPAQUE = root::PVOID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_ACCESS_INFORMATION {
        pub SidHash: root::PSID_AND_ATTRIBUTES_HASH,
        pub RestrictedSidHash: root::PSID_AND_ATTRIBUTES_HASH,
        pub Privileges: root::PTOKEN_PRIVILEGES,
        pub AuthenticationId: root::LUID,
        pub TokenType: root::TOKEN_TYPE,
        pub ImpersonationLevel: root::SECURITY_IMPERSONATION_LEVEL,
        pub MandatoryPolicy: root::TOKEN_MANDATORY_POLICY,
        pub Flags: u32,
        pub AppContainerNumber: u32,
        pub PackageSid: root::PSID,
        pub CapabilitiesHash: root::PSID_AND_ATTRIBUTES_HASH,
        pub TrustLevelSid: root::PSID,
        pub SecurityAttributes: root::PSECURITY_ATTRIBUTES_OPAQUE,
    }
    pub type TOKEN_ACCESS_INFORMATION = root::_TOKEN_ACCESS_INFORMATION;
    pub type PTOKEN_ACCESS_INFORMATION = *mut root::_TOKEN_ACCESS_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_AUDIT_POLICY {
        pub PerUserPolicy: [u8; 30usize],
    }
    pub type TOKEN_AUDIT_POLICY = root::_TOKEN_AUDIT_POLICY;
    pub type PTOKEN_AUDIT_POLICY = *mut root::_TOKEN_AUDIT_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_SOURCE {
        pub SourceName: [i8; 8usize],
        pub SourceIdentifier: root::LUID,
    }
    pub type TOKEN_SOURCE = root::_TOKEN_SOURCE;
    pub type PTOKEN_SOURCE = *mut root::_TOKEN_SOURCE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TOKEN_STATISTICS {
        pub TokenId: root::LUID,
        pub AuthenticationId: root::LUID,
        pub ExpirationTime: root::LARGE_INTEGER,
        pub TokenType: root::TOKEN_TYPE,
        pub ImpersonationLevel: root::SECURITY_IMPERSONATION_LEVEL,
        pub DynamicCharged: u32,
        pub DynamicAvailable: u32,
        pub GroupCount: u32,
        pub PrivilegeCount: u32,
        pub ModifiedId: root::LUID,
    }
    pub type TOKEN_STATISTICS = root::_TOKEN_STATISTICS;
    pub type PTOKEN_STATISTICS = *mut root::_TOKEN_STATISTICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_CONTROL {
        pub TokenId: root::LUID,
        pub AuthenticationId: root::LUID,
        pub ModifiedId: root::LUID,
        pub TokenSource: root::TOKEN_SOURCE,
    }
    pub type TOKEN_CONTROL = root::_TOKEN_CONTROL;
    pub type PTOKEN_CONTROL = *mut root::_TOKEN_CONTROL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_ORIGIN {
        pub OriginatingLogonSession: root::LUID,
    }
    pub type TOKEN_ORIGIN = root::_TOKEN_ORIGIN;
    pub type PTOKEN_ORIGIN = *mut root::_TOKEN_ORIGIN;
    pub const _MANDATORY_LEVEL_MandatoryLevelUntrusted: root::_MANDATORY_LEVEL = 0;
    pub const _MANDATORY_LEVEL_MandatoryLevelLow: root::_MANDATORY_LEVEL = 1;
    pub const _MANDATORY_LEVEL_MandatoryLevelMedium: root::_MANDATORY_LEVEL = 2;
    pub const _MANDATORY_LEVEL_MandatoryLevelHigh: root::_MANDATORY_LEVEL = 3;
    pub const _MANDATORY_LEVEL_MandatoryLevelSystem: root::_MANDATORY_LEVEL = 4;
    pub const _MANDATORY_LEVEL_MandatoryLevelSecureProcess: root::_MANDATORY_LEVEL = 5;
    pub const _MANDATORY_LEVEL_MandatoryLevelCount: root::_MANDATORY_LEVEL = 6;
    pub type _MANDATORY_LEVEL = i32;
    pub use self::super::root::_MANDATORY_LEVEL as MANDATORY_LEVEL;
    pub type PMANDATORY_LEVEL = *mut root::_MANDATORY_LEVEL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_APPCONTAINER_INFORMATION {
        pub TokenAppContainer: root::PSID,
    }
    pub type TOKEN_APPCONTAINER_INFORMATION = root::_TOKEN_APPCONTAINER_INFORMATION;
    pub type PTOKEN_APPCONTAINER_INFORMATION = *mut root::_TOKEN_APPCONTAINER_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_SID_INFORMATION {
        pub Sid: root::PSID,
    }
    pub type TOKEN_SID_INFORMATION = root::_TOKEN_SID_INFORMATION;
    pub type PTOKEN_SID_INFORMATION = *mut root::_TOKEN_SID_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TOKEN_BNO_ISOLATION_INFORMATION {
        pub IsolationPrefix: *mut u16,
        pub IsolationEnabled: root::BOOLEAN,
    }
    pub type TOKEN_BNO_ISOLATION_INFORMATION = root::_TOKEN_BNO_ISOLATION_INFORMATION;
    pub type PTOKEN_BNO_ISOLATION_INFORMATION = *mut root::_TOKEN_BNO_ISOLATION_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
        pub Version: root::DWORD64,
        pub Name: *mut u16,
    }
    pub type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = root::_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
    pub type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = *mut root::_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
        pub pValue: root::PVOID,
        pub ValueLength: u32,
    }
    pub type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE =
        root::_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
    pub type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE =
        *mut root::_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
        pub Name: *mut u16,
        pub ValueType: u16,
        pub Reserved: u16,
        pub Flags: u32,
        pub ValueCount: u32,
        pub Values: root::_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1 {
        pub pInt64: root::PLONG64,
        pub pUint64: root::PDWORD64,
        pub ppString: *mut *mut u16,
        pub pFqbn: root::PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,
        pub pOctetString: root::PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    }
    pub type CLAIM_SECURITY_ATTRIBUTE_V1 = root::_CLAIM_SECURITY_ATTRIBUTE_V1;
    pub type PCLAIM_SECURITY_ATTRIBUTE_V1 = *mut root::_CLAIM_SECURITY_ATTRIBUTE_V1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
        pub Name: u32,
        pub ValueType: u16,
        pub Reserved: u16,
        pub Flags: u32,
        pub ValueCount: u32,
        pub Values: root::_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1 {
        pub pInt64: [u32; 1usize],
        pub pUint64: [u32; 1usize],
        pub ppString: [u32; 1usize],
        pub pFqbn: [u32; 1usize],
        pub pOctetString: [u32; 1usize],
    }
    pub type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = root::_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
    pub type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 =
        *mut root::_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
        pub Version: u16,
        pub Reserved: u16,
        pub AttributeCount: u32,
        pub Attribute: root::_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1 {
        pub pAttributeV1: root::PCLAIM_SECURITY_ATTRIBUTE_V1,
    }
    pub type CLAIM_SECURITY_ATTRIBUTES_INFORMATION = root::_CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
    pub type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION =
        *mut root::_CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
    pub type SECURITY_CONTEXT_TRACKING_MODE = root::BOOLEAN;
    pub type PSECURITY_CONTEXT_TRACKING_MODE = *mut root::BOOLEAN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SECURITY_QUALITY_OF_SERVICE {
        pub Length: u32,
        pub ImpersonationLevel: root::SECURITY_IMPERSONATION_LEVEL,
        pub ContextTrackingMode: root::SECURITY_CONTEXT_TRACKING_MODE,
        pub EffectiveOnly: root::BOOLEAN,
    }
    pub type SECURITY_QUALITY_OF_SERVICE = root::_SECURITY_QUALITY_OF_SERVICE;
    pub type PSECURITY_QUALITY_OF_SERVICE = *mut root::_SECURITY_QUALITY_OF_SERVICE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SE_IMPERSONATION_STATE {
        pub Token: root::PACCESS_TOKEN,
        pub CopyOnOpen: root::BOOLEAN,
        pub EffectiveOnly: root::BOOLEAN,
        pub Level: root::SECURITY_IMPERSONATION_LEVEL,
    }
    pub type SE_IMPERSONATION_STATE = root::_SE_IMPERSONATION_STATE;
    pub type PSE_IMPERSONATION_STATE = *mut root::_SE_IMPERSONATION_STATE;
    pub type SECURITY_INFORMATION = u32;
    pub type PSECURITY_INFORMATION = *mut u32;
    pub type SE_SIGNING_LEVEL = u8;
    pub type PSE_SIGNING_LEVEL = *mut u8;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureNone: root::_SE_IMAGE_SIGNATURE_TYPE = 0;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureEmbedded: root::_SE_IMAGE_SIGNATURE_TYPE = 1;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCache: root::_SE_IMAGE_SIGNATURE_TYPE = 2;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogCached:
        root::_SE_IMAGE_SIGNATURE_TYPE = 3;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogNotCached:
        root::_SE_IMAGE_SIGNATURE_TYPE = 4;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogHint: root::_SE_IMAGE_SIGNATURE_TYPE =
        5;
    pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignaturePackageCatalog:
        root::_SE_IMAGE_SIGNATURE_TYPE = 6;
    pub type _SE_IMAGE_SIGNATURE_TYPE = i32;
    pub use self::super::root::_SE_IMAGE_SIGNATURE_TYPE as SE_IMAGE_SIGNATURE_TYPE;
    pub type PSE_IMAGE_SIGNATURE_TYPE = *mut root::_SE_IMAGE_SIGNATURE_TYPE;
    pub const _SE_LEARNING_MODE_DATA_TYPE_SeLearningModeInvalidType:
        root::_SE_LEARNING_MODE_DATA_TYPE = 0;
    pub const _SE_LEARNING_MODE_DATA_TYPE_SeLearningModeSettings:
        root::_SE_LEARNING_MODE_DATA_TYPE = 1;
    pub const _SE_LEARNING_MODE_DATA_TYPE_SeLearningModeMax: root::_SE_LEARNING_MODE_DATA_TYPE = 2;
    pub type _SE_LEARNING_MODE_DATA_TYPE = i32;
    pub use self::super::root::_SE_LEARNING_MODE_DATA_TYPE as SE_LEARNING_MODE_DATA_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SECURITY_CAPABILITIES {
        pub AppContainerSid: root::PSID,
        pub Capabilities: root::PSID_AND_ATTRIBUTES,
        pub CapabilityCount: u32,
        pub Reserved: u32,
    }
    pub type SECURITY_CAPABILITIES = root::_SECURITY_CAPABILITIES;
    pub type PSECURITY_CAPABILITIES = *mut root::_SECURITY_CAPABILITIES;
    pub type LPSECURITY_CAPABILITIES = *mut root::_SECURITY_CAPABILITIES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_SET_ARRAY {
        pub JobHandle: root::HANDLE,
        pub MemberLevel: u32,
        pub Flags: u32,
    }
    pub type JOB_SET_ARRAY = root::_JOB_SET_ARRAY;
    pub type PJOB_SET_ARRAY = *mut root::_JOB_SET_ARRAY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXCEPTION_REGISTRATION_RECORD {
        pub Next: *mut root::_EXCEPTION_REGISTRATION_RECORD,
        pub Handler: root::PEXCEPTION_ROUTINE,
    }
    pub type EXCEPTION_REGISTRATION_RECORD = root::_EXCEPTION_REGISTRATION_RECORD;
    pub type PEXCEPTION_REGISTRATION_RECORD = *mut root::EXCEPTION_REGISTRATION_RECORD;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _NT_TIB {
        pub ExceptionList: *mut root::_EXCEPTION_REGISTRATION_RECORD,
        pub StackBase: root::PVOID,
        pub StackLimit: root::PVOID,
        pub SubSystemTib: root::PVOID,
        pub __bindgen_anon_1: root::_NT_TIB__bindgen_ty_1,
        pub ArbitraryUserPointer: root::PVOID,
        pub Self_: *mut root::_NT_TIB,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _NT_TIB__bindgen_ty_1 {
        pub FiberData: root::PVOID,
        pub Version: u32,
    }
    pub type NT_TIB = root::_NT_TIB;
    pub type PNT_TIB = *mut root::NT_TIB;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _NT_TIB32 {
        pub ExceptionList: u32,
        pub StackBase: u32,
        pub StackLimit: u32,
        pub SubSystemTib: u32,
        pub __bindgen_anon_1: root::_NT_TIB32__bindgen_ty_1,
        pub ArbitraryUserPointer: u32,
        pub Self_: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _NT_TIB32__bindgen_ty_1 {
        pub FiberData: u32,
        pub Version: u32,
    }
    pub type NT_TIB32 = root::_NT_TIB32;
    pub type PNT_TIB32 = *mut root::_NT_TIB32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _NT_TIB64 {
        pub ExceptionList: root::DWORD64,
        pub StackBase: root::DWORD64,
        pub StackLimit: root::DWORD64,
        pub SubSystemTib: root::DWORD64,
        pub __bindgen_anon_1: root::_NT_TIB64__bindgen_ty_1,
        pub ArbitraryUserPointer: root::DWORD64,
        pub Self_: root::DWORD64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _NT_TIB64__bindgen_ty_1 {
        pub FiberData: root::DWORD64,
        pub Version: u32,
    }
    pub type NT_TIB64 = root::_NT_TIB64;
    pub type PNT_TIB64 = *mut root::_NT_TIB64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UMS_CREATE_THREAD_ATTRIBUTES {
        pub UmsVersion: u32,
        pub UmsContext: root::PVOID,
        pub UmsCompletionList: root::PVOID,
    }
    pub type UMS_CREATE_THREAD_ATTRIBUTES = root::_UMS_CREATE_THREAD_ATTRIBUTES;
    pub type PUMS_CREATE_THREAD_ATTRIBUTES = *mut root::_UMS_CREATE_THREAD_ATTRIBUTES;
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOW64_ARCHITECTURE_INFORMATION {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _WOW64_ARCHITECTURE_INFORMATION {
        #[inline]
        pub fn Machine(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_Machine(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn KernelMode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_KernelMode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn UserMode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_UserMode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(17usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Native(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Native(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(18usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Process(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Process(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(19usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedZero0(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedZero0(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 12u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Machine: u32,
            KernelMode: u32,
            UserMode: u32,
            Native: u32,
            Process: u32,
            ReservedZero0: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 16u8, {
                let Machine: u32 = unsafe { ::std::mem::transmute(Machine) };
                Machine as u64
            });
            __bindgen_bitfield_unit.set(16usize, 1u8, {
                let KernelMode: u32 = unsafe { ::std::mem::transmute(KernelMode) };
                KernelMode as u64
            });
            __bindgen_bitfield_unit.set(17usize, 1u8, {
                let UserMode: u32 = unsafe { ::std::mem::transmute(UserMode) };
                UserMode as u64
            });
            __bindgen_bitfield_unit.set(18usize, 1u8, {
                let Native: u32 = unsafe { ::std::mem::transmute(Native) };
                Native as u64
            });
            __bindgen_bitfield_unit.set(19usize, 1u8, {
                let Process: u32 = unsafe { ::std::mem::transmute(Process) };
                Process as u64
            });
            __bindgen_bitfield_unit.set(20usize, 12u8, {
                let ReservedZero0: u32 = unsafe { ::std::mem::transmute(ReservedZero0) };
                ReservedZero0 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type WOW64_ARCHITECTURE_INFORMATION = root::_WOW64_ARCHITECTURE_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
        pub TargetAddress: u64,
        pub Flags: u64,
    }
    pub type PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = root::_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
    pub type PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET =
        *mut root::_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
        pub NumberOfTargets: u16,
        pub Reserved: u16,
        pub Reserved2: u32,
        pub Targets: root::PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET,
    }
    pub type PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION =
        root::_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
    pub type PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION =
        *mut root::_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
        pub BaseAddress: u64,
        pub Size: root::SIZE_T,
        pub Flags: u32,
    }
    pub type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = root::_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
    pub type PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE =
        *mut root::_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
        pub NumberOfRanges: u16,
        pub Reserved: u16,
        pub Reserved2: u32,
        pub Ranges: root::PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE,
    }
    pub type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION =
        root::_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
    pub type PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION =
        *mut root::_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _QUOTA_LIMITS {
        pub PagedPoolLimit: root::SIZE_T,
        pub NonPagedPoolLimit: root::SIZE_T,
        pub MinimumWorkingSetSize: root::SIZE_T,
        pub MaximumWorkingSetSize: root::SIZE_T,
        pub PagefileLimit: root::SIZE_T,
        pub TimeLimit: root::LARGE_INTEGER,
    }
    pub type QUOTA_LIMITS = root::_QUOTA_LIMITS;
    pub type PQUOTA_LIMITS = *mut root::_QUOTA_LIMITS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RATE_QUOTA_LIMIT {
        pub RateData: u32,
        pub __bindgen_anon_1: root::_RATE_QUOTA_LIMIT__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _RATE_QUOTA_LIMIT__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _RATE_QUOTA_LIMIT__bindgen_ty_1 {
        #[inline]
        pub fn RatePercent(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
        }
        #[inline]
        pub fn set_RatePercent(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 7u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved0(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 25u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            RatePercent: u32,
            Reserved0: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 7u8, {
                let RatePercent: u32 = unsafe { ::std::mem::transmute(RatePercent) };
                RatePercent as u64
            });
            __bindgen_bitfield_unit.set(7usize, 25u8, {
                let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type RATE_QUOTA_LIMIT = root::_RATE_QUOTA_LIMIT;
    pub type PRATE_QUOTA_LIMIT = *mut root::_RATE_QUOTA_LIMIT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _QUOTA_LIMITS_EX {
        pub PagedPoolLimit: root::SIZE_T,
        pub NonPagedPoolLimit: root::SIZE_T,
        pub MinimumWorkingSetSize: root::SIZE_T,
        pub MaximumWorkingSetSize: root::SIZE_T,
        pub PagefileLimit: root::SIZE_T,
        pub TimeLimit: root::LARGE_INTEGER,
        pub WorkingSetLimit: root::SIZE_T,
        pub Reserved2: root::SIZE_T,
        pub Reserved3: root::SIZE_T,
        pub Reserved4: root::SIZE_T,
        pub Flags: u32,
        pub CpuRateLimit: root::RATE_QUOTA_LIMIT,
    }
    pub type QUOTA_LIMITS_EX = root::_QUOTA_LIMITS_EX;
    pub type PQUOTA_LIMITS_EX = *mut root::_QUOTA_LIMITS_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_COUNTERS {
        pub ReadOperationCount: root::ULONGLONG,
        pub WriteOperationCount: root::ULONGLONG,
        pub OtherOperationCount: root::ULONGLONG,
        pub ReadTransferCount: root::ULONGLONG,
        pub WriteTransferCount: root::ULONGLONG,
        pub OtherTransferCount: root::ULONGLONG,
    }
    pub type IO_COUNTERS = root::_IO_COUNTERS;
    pub type PIO_COUNTERS = *mut root::IO_COUNTERS;
    pub const _HARDWARE_COUNTER_TYPE_PMCCounter: root::_HARDWARE_COUNTER_TYPE = 0;
    pub const _HARDWARE_COUNTER_TYPE_MaxHardwareCounterType: root::_HARDWARE_COUNTER_TYPE = 1;
    pub type _HARDWARE_COUNTER_TYPE = i32;
    pub use self::super::root::_HARDWARE_COUNTER_TYPE as HARDWARE_COUNTER_TYPE;
    pub type PHARDWARE_COUNTER_TYPE = *mut root::_HARDWARE_COUNTER_TYPE;
    pub const _PROCESS_MITIGATION_POLICY_ProcessDEPPolicy: root::_PROCESS_MITIGATION_POLICY = 0;
    pub const _PROCESS_MITIGATION_POLICY_ProcessASLRPolicy: root::_PROCESS_MITIGATION_POLICY = 1;
    pub const _PROCESS_MITIGATION_POLICY_ProcessDynamicCodePolicy:
        root::_PROCESS_MITIGATION_POLICY = 2;
    pub const _PROCESS_MITIGATION_POLICY_ProcessStrictHandleCheckPolicy:
        root::_PROCESS_MITIGATION_POLICY = 3;
    pub const _PROCESS_MITIGATION_POLICY_ProcessSystemCallDisablePolicy:
        root::_PROCESS_MITIGATION_POLICY = 4;
    pub const _PROCESS_MITIGATION_POLICY_ProcessMitigationOptionsMask:
        root::_PROCESS_MITIGATION_POLICY = 5;
    pub const _PROCESS_MITIGATION_POLICY_ProcessExtensionPointDisablePolicy:
        root::_PROCESS_MITIGATION_POLICY = 6;
    pub const _PROCESS_MITIGATION_POLICY_ProcessControlFlowGuardPolicy:
        root::_PROCESS_MITIGATION_POLICY = 7;
    pub const _PROCESS_MITIGATION_POLICY_ProcessSignaturePolicy: root::_PROCESS_MITIGATION_POLICY =
        8;
    pub const _PROCESS_MITIGATION_POLICY_ProcessFontDisablePolicy:
        root::_PROCESS_MITIGATION_POLICY = 9;
    pub const _PROCESS_MITIGATION_POLICY_ProcessImageLoadPolicy: root::_PROCESS_MITIGATION_POLICY =
        10;
    pub const _PROCESS_MITIGATION_POLICY_ProcessSystemCallFilterPolicy:
        root::_PROCESS_MITIGATION_POLICY = 11;
    pub const _PROCESS_MITIGATION_POLICY_ProcessPayloadRestrictionPolicy:
        root::_PROCESS_MITIGATION_POLICY = 12;
    pub const _PROCESS_MITIGATION_POLICY_ProcessChildProcessPolicy:
        root::_PROCESS_MITIGATION_POLICY = 13;
    pub const _PROCESS_MITIGATION_POLICY_ProcessSideChannelIsolationPolicy:
        root::_PROCESS_MITIGATION_POLICY = 14;
    pub const _PROCESS_MITIGATION_POLICY_ProcessUserShadowStackPolicy:
        root::_PROCESS_MITIGATION_POLICY = 15;
    pub const _PROCESS_MITIGATION_POLICY_MaxProcessMitigationPolicy:
        root::_PROCESS_MITIGATION_POLICY = 16;
    pub type _PROCESS_MITIGATION_POLICY = i32;
    pub use self::super::root::_PROCESS_MITIGATION_POLICY as PROCESS_MITIGATION_POLICY;
    pub type PPROCESS_MITIGATION_POLICY = *mut root::_PROCESS_MITIGATION_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_ASLR_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn EnableBottomUpRandomization(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableBottomUpRandomization(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableForceRelocateImages(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableForceRelocateImages(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableHighEntropy(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableHighEntropy(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn DisallowStrippedImages(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisallowStrippedImages(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 28u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            EnableBottomUpRandomization: u32,
            EnableForceRelocateImages: u32,
            EnableHighEntropy: u32,
            DisallowStrippedImages: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let EnableBottomUpRandomization: u32 =
                    unsafe { ::std::mem::transmute(EnableBottomUpRandomization) };
                EnableBottomUpRandomization as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let EnableForceRelocateImages: u32 =
                    unsafe { ::std::mem::transmute(EnableForceRelocateImages) };
                EnableForceRelocateImages as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let EnableHighEntropy: u32 = unsafe { ::std::mem::transmute(EnableHighEntropy) };
                EnableHighEntropy as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let DisallowStrippedImages: u32 =
                    unsafe { ::std::mem::transmute(DisallowStrippedImages) };
                DisallowStrippedImages as u64
            });
            __bindgen_bitfield_unit.set(4usize, 28u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_ASLR_POLICY = root::_PROCESS_MITIGATION_ASLR_POLICY;
    pub type PPROCESS_MITIGATION_ASLR_POLICY = *mut root::_PROCESS_MITIGATION_ASLR_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_DEP_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1,
        pub Permanent: root::BOOLEAN,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Enable(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Enable(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn DisableAtlThunkEmulation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisableAtlThunkEmulation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Enable: u32,
            DisableAtlThunkEmulation: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let Enable: u32 = unsafe { ::std::mem::transmute(Enable) };
                Enable as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let DisableAtlThunkEmulation: u32 =
                    unsafe { ::std::mem::transmute(DisableAtlThunkEmulation) };
                DisableAtlThunkEmulation as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_DEP_POLICY = root::_PROCESS_MITIGATION_DEP_POLICY;
    pub type PPROCESS_MITIGATION_DEP_POLICY = *mut root::_PROCESS_MITIGATION_DEP_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn RaiseExceptionOnInvalidHandleReference(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_RaiseExceptionOnInvalidHandleReference(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn HandleExceptionsPermanentlyEnabled(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_HandleExceptionsPermanentlyEnabled(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            RaiseExceptionOnInvalidHandleReference: u32,
            HandleExceptionsPermanentlyEnabled: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let RaiseExceptionOnInvalidHandleReference: u32 =
                    unsafe { ::std::mem::transmute(RaiseExceptionOnInvalidHandleReference) };
                RaiseExceptionOnInvalidHandleReference as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let HandleExceptionsPermanentlyEnabled: u32 =
                    unsafe { ::std::mem::transmute(HandleExceptionsPermanentlyEnabled) };
                HandleExceptionsPermanentlyEnabled as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY =
        root::_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
    pub type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY =
        *mut root::_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn DisallowWin32kSystemCalls(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisallowWin32kSystemCalls(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditDisallowWin32kSystemCalls(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditDisallowWin32kSystemCalls(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            DisallowWin32kSystemCalls: u32,
            AuditDisallowWin32kSystemCalls: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let DisallowWin32kSystemCalls: u32 =
                    unsafe { ::std::mem::transmute(DisallowWin32kSystemCalls) };
                DisallowWin32kSystemCalls as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AuditDisallowWin32kSystemCalls: u32 =
                    unsafe { ::std::mem::transmute(AuditDisallowWin32kSystemCalls) };
                AuditDisallowWin32kSystemCalls as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY =
        root::_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
    pub type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY =
        *mut root::_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn DisableExtensionPoints(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisableExtensionPoints(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            DisableExtensionPoints: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let DisableExtensionPoints: u32 =
                    unsafe { ::std::mem::transmute(DisableExtensionPoints) };
                DisableExtensionPoints as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY =
        root::_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
    pub type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY =
        *mut root::_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn ProhibitDynamicCode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_ProhibitDynamicCode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AllowThreadOptOut(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AllowThreadOptOut(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AllowRemoteDowngrade(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AllowRemoteDowngrade(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditProhibitDynamicCode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditProhibitDynamicCode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 28u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ProhibitDynamicCode: u32,
            AllowThreadOptOut: u32,
            AllowRemoteDowngrade: u32,
            AuditProhibitDynamicCode: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let ProhibitDynamicCode: u32 =
                    unsafe { ::std::mem::transmute(ProhibitDynamicCode) };
                ProhibitDynamicCode as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AllowThreadOptOut: u32 = unsafe { ::std::mem::transmute(AllowThreadOptOut) };
                AllowThreadOptOut as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let AllowRemoteDowngrade: u32 =
                    unsafe { ::std::mem::transmute(AllowRemoteDowngrade) };
                AllowRemoteDowngrade as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let AuditProhibitDynamicCode: u32 =
                    unsafe { ::std::mem::transmute(AuditProhibitDynamicCode) };
                AuditProhibitDynamicCode as u64
            });
            __bindgen_bitfield_unit.set(4usize, 28u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = root::_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
    pub type PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY =
        *mut root::_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn EnableControlFlowGuard(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableControlFlowGuard(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableExportSuppression(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableExportSuppression(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn StrictMode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_StrictMode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 29u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            EnableControlFlowGuard: u32,
            EnableExportSuppression: u32,
            StrictMode: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let EnableControlFlowGuard: u32 =
                    unsafe { ::std::mem::transmute(EnableControlFlowGuard) };
                EnableControlFlowGuard as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let EnableExportSuppression: u32 =
                    unsafe { ::std::mem::transmute(EnableExportSuppression) };
                EnableExportSuppression as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let StrictMode: u32 = unsafe { ::std::mem::transmute(StrictMode) };
                StrictMode as u64
            });
            __bindgen_bitfield_unit.set(3usize, 29u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY =
        root::_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
    pub type PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY =
        *mut root::_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn MicrosoftSignedOnly(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_MicrosoftSignedOnly(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn StoreSignedOnly(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_StoreSignedOnly(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn MitigationOptIn(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_MitigationOptIn(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditMicrosoftSignedOnly(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditMicrosoftSignedOnly(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditStoreSignedOnly(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditStoreSignedOnly(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 27u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            MicrosoftSignedOnly: u32,
            StoreSignedOnly: u32,
            MitigationOptIn: u32,
            AuditMicrosoftSignedOnly: u32,
            AuditStoreSignedOnly: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let MicrosoftSignedOnly: u32 =
                    unsafe { ::std::mem::transmute(MicrosoftSignedOnly) };
                MicrosoftSignedOnly as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let StoreSignedOnly: u32 = unsafe { ::std::mem::transmute(StoreSignedOnly) };
                StoreSignedOnly as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let MitigationOptIn: u32 = unsafe { ::std::mem::transmute(MitigationOptIn) };
                MitigationOptIn as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let AuditMicrosoftSignedOnly: u32 =
                    unsafe { ::std::mem::transmute(AuditMicrosoftSignedOnly) };
                AuditMicrosoftSignedOnly as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let AuditStoreSignedOnly: u32 =
                    unsafe { ::std::mem::transmute(AuditStoreSignedOnly) };
                AuditStoreSignedOnly as u64
            });
            __bindgen_bitfield_unit.set(5usize, 27u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY =
        root::_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
    pub type PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY =
        *mut root::_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn DisableNonSystemFonts(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisableNonSystemFonts(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditNonSystemFontLoading(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditNonSystemFontLoading(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            DisableNonSystemFonts: u32,
            AuditNonSystemFontLoading: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let DisableNonSystemFonts: u32 =
                    unsafe { ::std::mem::transmute(DisableNonSystemFonts) };
                DisableNonSystemFonts as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AuditNonSystemFontLoading: u32 =
                    unsafe { ::std::mem::transmute(AuditNonSystemFontLoading) };
                AuditNonSystemFontLoading as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_FONT_DISABLE_POLICY = root::_PROCESS_MITIGATION_FONT_DISABLE_POLICY;
    pub type PPROCESS_MITIGATION_FONT_DISABLE_POLICY =
        *mut root::_PROCESS_MITIGATION_FONT_DISABLE_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn NoRemoteImages(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_NoRemoteImages(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn NoLowMandatoryLabelImages(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_NoLowMandatoryLabelImages(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn PreferSystem32Images(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_PreferSystem32Images(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditNoRemoteImages(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditNoRemoteImages(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditNoLowMandatoryLabelImages(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditNoLowMandatoryLabelImages(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 27u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            NoRemoteImages: u32,
            NoLowMandatoryLabelImages: u32,
            PreferSystem32Images: u32,
            AuditNoRemoteImages: u32,
            AuditNoLowMandatoryLabelImages: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let NoRemoteImages: u32 = unsafe { ::std::mem::transmute(NoRemoteImages) };
                NoRemoteImages as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let NoLowMandatoryLabelImages: u32 =
                    unsafe { ::std::mem::transmute(NoLowMandatoryLabelImages) };
                NoLowMandatoryLabelImages as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let PreferSystem32Images: u32 =
                    unsafe { ::std::mem::transmute(PreferSystem32Images) };
                PreferSystem32Images as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let AuditNoRemoteImages: u32 =
                    unsafe { ::std::mem::transmute(AuditNoRemoteImages) };
                AuditNoRemoteImages as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let AuditNoLowMandatoryLabelImages: u32 =
                    unsafe { ::std::mem::transmute(AuditNoLowMandatoryLabelImages) };
                AuditNoLowMandatoryLabelImages as u64
            });
            __bindgen_bitfield_unit.set(5usize, 27u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_IMAGE_LOAD_POLICY = root::_PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
    pub type PPROCESS_MITIGATION_IMAGE_LOAD_POLICY =
        *mut root::_PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn FilterId(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
        }
        #[inline]
        pub fn set_FilterId(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 28u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            FilterId: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 4u8, {
                let FilterId: u32 = unsafe { ::std::mem::transmute(FilterId) };
                FilterId as u64
            });
            __bindgen_bitfield_unit.set(4usize, 28u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY =
        root::_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
    pub type PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY =
        *mut root::_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn EnableExportAddressFilter(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableExportAddressFilter(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditExportAddressFilter(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditExportAddressFilter(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableExportAddressFilterPlus(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableExportAddressFilterPlus(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditExportAddressFilterPlus(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditExportAddressFilterPlus(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableImportAddressFilter(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableImportAddressFilter(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditImportAddressFilter(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditImportAddressFilter(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableRopStackPivot(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableRopStackPivot(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditRopStackPivot(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditRopStackPivot(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableRopCallerCheck(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableRopCallerCheck(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditRopCallerCheck(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditRopCallerCheck(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(9usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableRopSimExec(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableRopSimExec(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(10usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditRopSimExec(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditRopSimExec(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(11usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 20u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            EnableExportAddressFilter: u32,
            AuditExportAddressFilter: u32,
            EnableExportAddressFilterPlus: u32,
            AuditExportAddressFilterPlus: u32,
            EnableImportAddressFilter: u32,
            AuditImportAddressFilter: u32,
            EnableRopStackPivot: u32,
            AuditRopStackPivot: u32,
            EnableRopCallerCheck: u32,
            AuditRopCallerCheck: u32,
            EnableRopSimExec: u32,
            AuditRopSimExec: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let EnableExportAddressFilter: u32 =
                    unsafe { ::std::mem::transmute(EnableExportAddressFilter) };
                EnableExportAddressFilter as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AuditExportAddressFilter: u32 =
                    unsafe { ::std::mem::transmute(AuditExportAddressFilter) };
                AuditExportAddressFilter as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let EnableExportAddressFilterPlus: u32 =
                    unsafe { ::std::mem::transmute(EnableExportAddressFilterPlus) };
                EnableExportAddressFilterPlus as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let AuditExportAddressFilterPlus: u32 =
                    unsafe { ::std::mem::transmute(AuditExportAddressFilterPlus) };
                AuditExportAddressFilterPlus as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let EnableImportAddressFilter: u32 =
                    unsafe { ::std::mem::transmute(EnableImportAddressFilter) };
                EnableImportAddressFilter as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let AuditImportAddressFilter: u32 =
                    unsafe { ::std::mem::transmute(AuditImportAddressFilter) };
                AuditImportAddressFilter as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let EnableRopStackPivot: u32 =
                    unsafe { ::std::mem::transmute(EnableRopStackPivot) };
                EnableRopStackPivot as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let AuditRopStackPivot: u32 = unsafe { ::std::mem::transmute(AuditRopStackPivot) };
                AuditRopStackPivot as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let EnableRopCallerCheck: u32 =
                    unsafe { ::std::mem::transmute(EnableRopCallerCheck) };
                EnableRopCallerCheck as u64
            });
            __bindgen_bitfield_unit.set(9usize, 1u8, {
                let AuditRopCallerCheck: u32 =
                    unsafe { ::std::mem::transmute(AuditRopCallerCheck) };
                AuditRopCallerCheck as u64
            });
            __bindgen_bitfield_unit.set(10usize, 1u8, {
                let EnableRopSimExec: u32 = unsafe { ::std::mem::transmute(EnableRopSimExec) };
                EnableRopSimExec as u64
            });
            __bindgen_bitfield_unit.set(11usize, 1u8, {
                let AuditRopSimExec: u32 = unsafe { ::std::mem::transmute(AuditRopSimExec) };
                AuditRopSimExec as u64
            });
            __bindgen_bitfield_unit.set(12usize, 20u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY =
        root::_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
    pub type PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY =
        *mut root::_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn NoChildProcessCreation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_NoChildProcessCreation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditNoChildProcessCreation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditNoChildProcessCreation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AllowSecureProcessCreation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AllowSecureProcessCreation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 29u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            NoChildProcessCreation: u32,
            AuditNoChildProcessCreation: u32,
            AllowSecureProcessCreation: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let NoChildProcessCreation: u32 =
                    unsafe { ::std::mem::transmute(NoChildProcessCreation) };
                NoChildProcessCreation as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AuditNoChildProcessCreation: u32 =
                    unsafe { ::std::mem::transmute(AuditNoChildProcessCreation) };
                AuditNoChildProcessCreation as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let AllowSecureProcessCreation: u32 =
                    unsafe { ::std::mem::transmute(AllowSecureProcessCreation) };
                AllowSecureProcessCreation as u64
            });
            __bindgen_bitfield_unit.set(3usize, 29u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_CHILD_PROCESS_POLICY =
        root::_PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
    pub type PPROCESS_MITIGATION_CHILD_PROCESS_POLICY =
        *mut root::_PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn SmtBranchTargetIsolation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_SmtBranchTargetIsolation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn IsolateSecurityDomain(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_IsolateSecurityDomain(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn DisablePageCombine(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisablePageCombine(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn SpeculativeStoreBypassDisable(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_SpeculativeStoreBypassDisable(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 28u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            SmtBranchTargetIsolation: u32,
            IsolateSecurityDomain: u32,
            DisablePageCombine: u32,
            SpeculativeStoreBypassDisable: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let SmtBranchTargetIsolation: u32 =
                    unsafe { ::std::mem::transmute(SmtBranchTargetIsolation) };
                SmtBranchTargetIsolation as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let IsolateSecurityDomain: u32 =
                    unsafe { ::std::mem::transmute(IsolateSecurityDomain) };
                IsolateSecurityDomain as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let DisablePageCombine: u32 = unsafe { ::std::mem::transmute(DisablePageCombine) };
                DisablePageCombine as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let SpeculativeStoreBypassDisable: u32 =
                    unsafe { ::std::mem::transmute(SpeculativeStoreBypassDisable) };
                SpeculativeStoreBypassDisable as u64
            });
            __bindgen_bitfield_unit.set(4usize, 28u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY =
        root::_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
    pub type PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY =
        *mut root::_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
        pub __bindgen_anon_1: root::_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1 {
        pub Flags: u32,
        pub __bindgen_anon_1:
            root::_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn EnableUserShadowStack(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableUserShadowStack(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditUserShadowStack(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditUserShadowStack(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn SetContextIpValidation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_SetContextIpValidation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditSetContextIpValidation(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditSetContextIpValidation(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EnableUserShadowStackStrictMode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EnableUserShadowStackStrictMode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn BlockNonCetBinaries(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_BlockNonCetBinaries(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn BlockNonCetBinariesNonEhcont(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_BlockNonCetBinariesNonEhcont(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AuditBlockNonCetBinaries(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AuditBlockNonCetBinaries(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn CetDynamicApisOutOfProcOnly(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_CetDynamicApisOutOfProcOnly(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn SetContextIpValidationRelaxedMode(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_SetContextIpValidationRelaxedMode(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(9usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(10usize, 22u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            EnableUserShadowStack: u32,
            AuditUserShadowStack: u32,
            SetContextIpValidation: u32,
            AuditSetContextIpValidation: u32,
            EnableUserShadowStackStrictMode: u32,
            BlockNonCetBinaries: u32,
            BlockNonCetBinariesNonEhcont: u32,
            AuditBlockNonCetBinaries: u32,
            CetDynamicApisOutOfProcOnly: u32,
            SetContextIpValidationRelaxedMode: u32,
            ReservedFlags: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let EnableUserShadowStack: u32 =
                    unsafe { ::std::mem::transmute(EnableUserShadowStack) };
                EnableUserShadowStack as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AuditUserShadowStack: u32 =
                    unsafe { ::std::mem::transmute(AuditUserShadowStack) };
                AuditUserShadowStack as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let SetContextIpValidation: u32 =
                    unsafe { ::std::mem::transmute(SetContextIpValidation) };
                SetContextIpValidation as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let AuditSetContextIpValidation: u32 =
                    unsafe { ::std::mem::transmute(AuditSetContextIpValidation) };
                AuditSetContextIpValidation as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let EnableUserShadowStackStrictMode: u32 =
                    unsafe { ::std::mem::transmute(EnableUserShadowStackStrictMode) };
                EnableUserShadowStackStrictMode as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let BlockNonCetBinaries: u32 =
                    unsafe { ::std::mem::transmute(BlockNonCetBinaries) };
                BlockNonCetBinaries as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let BlockNonCetBinariesNonEhcont: u32 =
                    unsafe { ::std::mem::transmute(BlockNonCetBinariesNonEhcont) };
                BlockNonCetBinariesNonEhcont as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let AuditBlockNonCetBinaries: u32 =
                    unsafe { ::std::mem::transmute(AuditBlockNonCetBinaries) };
                AuditBlockNonCetBinaries as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let CetDynamicApisOutOfProcOnly: u32 =
                    unsafe { ::std::mem::transmute(CetDynamicApisOutOfProcOnly) };
                CetDynamicApisOutOfProcOnly as u64
            });
            __bindgen_bitfield_unit.set(9usize, 1u8, {
                let SetContextIpValidationRelaxedMode: u32 =
                    unsafe { ::std::mem::transmute(SetContextIpValidationRelaxedMode) };
                SetContextIpValidationRelaxedMode as u64
            });
            __bindgen_bitfield_unit.set(10usize, 22u8, {
                let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY =
        root::_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
    pub type PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY =
        *mut root::_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
        pub TotalUserTime: root::LARGE_INTEGER,
        pub TotalKernelTime: root::LARGE_INTEGER,
        pub ThisPeriodTotalUserTime: root::LARGE_INTEGER,
        pub ThisPeriodTotalKernelTime: root::LARGE_INTEGER,
        pub TotalPageFaultCount: u32,
        pub TotalProcesses: u32,
        pub ActiveProcesses: u32,
        pub TotalTerminatedProcesses: u32,
    }
    pub type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = root::_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
    pub type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION =
        *mut root::_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
        pub PerProcessUserTimeLimit: root::LARGE_INTEGER,
        pub PerJobUserTimeLimit: root::LARGE_INTEGER,
        pub LimitFlags: u32,
        pub MinimumWorkingSetSize: root::SIZE_T,
        pub MaximumWorkingSetSize: root::SIZE_T,
        pub ActiveProcessLimit: u32,
        pub Affinity: u64,
        pub PriorityClass: u32,
        pub SchedulingClass: u32,
    }
    pub type JOBOBJECT_BASIC_LIMIT_INFORMATION = root::_JOBOBJECT_BASIC_LIMIT_INFORMATION;
    pub type PJOBOBJECT_BASIC_LIMIT_INFORMATION = *mut root::_JOBOBJECT_BASIC_LIMIT_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
        pub BasicLimitInformation: root::JOBOBJECT_BASIC_LIMIT_INFORMATION,
        pub IoInfo: root::IO_COUNTERS,
        pub ProcessMemoryLimit: root::SIZE_T,
        pub JobMemoryLimit: root::SIZE_T,
        pub PeakProcessMemoryUsed: root::SIZE_T,
        pub PeakJobMemoryUsed: root::SIZE_T,
    }
    pub type JOBOBJECT_EXTENDED_LIMIT_INFORMATION = root::_JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
    pub type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION =
        *mut root::_JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
        pub NumberOfAssignedProcesses: u32,
        pub NumberOfProcessIdsInList: u32,
        pub ProcessIdList: [u64; 1usize],
    }
    pub type JOBOBJECT_BASIC_PROCESS_ID_LIST = root::_JOBOBJECT_BASIC_PROCESS_ID_LIST;
    pub type PJOBOBJECT_BASIC_PROCESS_ID_LIST = *mut root::_JOBOBJECT_BASIC_PROCESS_ID_LIST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
        pub UIRestrictionsClass: u32,
    }
    pub type JOBOBJECT_BASIC_UI_RESTRICTIONS = root::_JOBOBJECT_BASIC_UI_RESTRICTIONS;
    pub type PJOBOBJECT_BASIC_UI_RESTRICTIONS = *mut root::_JOBOBJECT_BASIC_UI_RESTRICTIONS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
        pub SecurityLimitFlags: u32,
        pub JobToken: root::HANDLE,
        pub SidsToDisable: root::PTOKEN_GROUPS,
        pub PrivilegesToDelete: root::PTOKEN_PRIVILEGES,
        pub RestrictedSids: root::PTOKEN_GROUPS,
    }
    pub type JOBOBJECT_SECURITY_LIMIT_INFORMATION = root::_JOBOBJECT_SECURITY_LIMIT_INFORMATION;
    pub type PJOBOBJECT_SECURITY_LIMIT_INFORMATION =
        *mut root::_JOBOBJECT_SECURITY_LIMIT_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
        pub EndOfJobTimeAction: u32,
    }
    pub type JOBOBJECT_END_OF_JOB_TIME_INFORMATION = root::_JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
    pub type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION =
        *mut root::_JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
        pub CompletionKey: root::PVOID,
        pub CompletionPort: root::HANDLE,
    }
    pub type JOBOBJECT_ASSOCIATE_COMPLETION_PORT = root::_JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
    pub type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = *mut root::_JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
        pub BasicInfo: root::JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
        pub IoInfo: root::IO_COUNTERS,
    }
    pub type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION =
        root::_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
    pub type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION =
        *mut root::_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_JOBSET_INFORMATION {
        pub MemberLevel: u32,
    }
    pub type JOBOBJECT_JOBSET_INFORMATION = root::_JOBOBJECT_JOBSET_INFORMATION;
    pub type PJOBOBJECT_JOBSET_INFORMATION = *mut root::_JOBOBJECT_JOBSET_INFORMATION;
    pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceLow:
        root::_JOBOBJECT_RATE_CONTROL_TOLERANCE = 1;
    pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceMedium:
        root::_JOBOBJECT_RATE_CONTROL_TOLERANCE = 2;
    pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceHigh:
        root::_JOBOBJECT_RATE_CONTROL_TOLERANCE = 3;
    pub type _JOBOBJECT_RATE_CONTROL_TOLERANCE = i32;
    pub use self::super::root::_JOBOBJECT_RATE_CONTROL_TOLERANCE as JOBOBJECT_RATE_CONTROL_TOLERANCE;
    pub type PJOBOBJECT_RATE_CONTROL_TOLERANCE = *mut root::_JOBOBJECT_RATE_CONTROL_TOLERANCE;
    pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalShort:
        root::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 1;
    pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalMedium:
        root::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 2;
    pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalLong:
        root::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 3;
    pub type _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = i32;
    pub use self::super::root::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
    pub type PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL =
        *mut root::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
        pub IoReadBytesLimit: root::DWORD64,
        pub IoWriteBytesLimit: root::DWORD64,
        pub PerJobUserTimeLimit: root::LARGE_INTEGER,
        pub JobMemoryLimit: root::DWORD64,
        pub RateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub RateControlToleranceInterval: root::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
        pub LimitFlags: u32,
    }
    pub type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION =
        root::_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
    pub type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION =
        *mut root::_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
        pub IoReadBytesLimit: root::DWORD64,
        pub IoWriteBytesLimit: root::DWORD64,
        pub PerJobUserTimeLimit: root::LARGE_INTEGER,
        pub __bindgen_anon_1: root::JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
        pub __bindgen_anon_2: root::JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
        pub __bindgen_anon_3: root::JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
        pub LimitFlags: u32,
        pub IoRateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub JobLowMemoryLimit: root::DWORD64,
        pub IoRateControlToleranceInterval: root::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
        pub NetRateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub NetRateControlToleranceInterval: root::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1 {
        pub JobHighMemoryLimit: root::DWORD64,
        pub JobMemoryLimit: root::DWORD64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2 {
        pub RateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub CpuRateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3 {
        pub RateControlToleranceInterval: root::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
        pub CpuRateControlToleranceInterval: root::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
        pub LimitFlags: u32,
        pub ViolationLimitFlags: u32,
        pub IoReadBytes: root::DWORD64,
        pub IoReadBytesLimit: root::DWORD64,
        pub IoWriteBytes: root::DWORD64,
        pub IoWriteBytesLimit: root::DWORD64,
        pub PerJobUserTime: root::LARGE_INTEGER,
        pub PerJobUserTimeLimit: root::LARGE_INTEGER,
        pub JobMemory: root::DWORD64,
        pub JobMemoryLimit: root::DWORD64,
        pub RateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub RateControlToleranceLimit: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
    }
    pub type JOBOBJECT_LIMIT_VIOLATION_INFORMATION = root::_JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
    pub type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION =
        *mut root::_JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
        pub LimitFlags: u32,
        pub ViolationLimitFlags: u32,
        pub IoReadBytes: root::DWORD64,
        pub IoReadBytesLimit: root::DWORD64,
        pub IoWriteBytes: root::DWORD64,
        pub IoWriteBytesLimit: root::DWORD64,
        pub PerJobUserTime: root::LARGE_INTEGER,
        pub PerJobUserTimeLimit: root::LARGE_INTEGER,
        pub JobMemory: root::DWORD64,
        pub __bindgen_anon_1: root::JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1,
        pub __bindgen_anon_2: root::JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2,
        pub __bindgen_anon_3: root::JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3,
        pub JobLowMemoryLimit: root::DWORD64,
        pub IoRateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub IoRateControlToleranceLimit: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub NetRateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub NetRateControlToleranceLimit: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1 {
        pub JobHighMemoryLimit: root::DWORD64,
        pub JobMemoryLimit: root::DWORD64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2 {
        pub RateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub CpuRateControlTolerance: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3 {
        pub RateControlToleranceLimit: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
        pub CpuRateControlToleranceLimit: root::JOBOBJECT_RATE_CONTROL_TOLERANCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
        pub ControlFlags: u32,
        pub __bindgen_anon_1: root::_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1 {
        pub CpuRate: u32,
        pub Weight: u32,
        pub __bindgen_anon_1:
            root::_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        pub MinRate: u16,
        pub MaxRate: u16,
    }
    pub type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = root::_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
    pub type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION =
        *mut root::_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
    pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_ENABLE:
        root::JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 1;
    pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH:
        root::JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 2;
    pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG:
        root::JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 4;
    pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS:
        root::JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 7;
    pub type JOB_OBJECT_NET_RATE_CONTROL_FLAGS = i32;
    pub type __C_ASSERT__ = [i8; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
        pub MaxBandwidth: root::DWORD64,
        pub ControlFlags: root::JOB_OBJECT_NET_RATE_CONTROL_FLAGS,
        pub DscpTag: u8,
    }
    pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_ENABLE:
        root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 1;
    pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME:
        root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 2;
    pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL:
        root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 4;
    pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP : root :: JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 8 ;
    pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS:
        root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 15;
    pub type JOB_OBJECT_IO_RATE_CONTROL_FLAGS = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
        pub MaxIops: root::LONG64,
        pub MaxBandwidth: root::LONG64,
        pub ReservationIops: root::LONG64,
        pub VolumeName: *mut u16,
        pub BaseIoSize: u32,
        pub ControlFlags: root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
        pub VolumeNameLength: u16,
    }
    pub type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 =
        root::JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
        pub MaxIops: root::LONG64,
        pub MaxBandwidth: root::LONG64,
        pub ReservationIops: root::LONG64,
        pub VolumeName: *mut u16,
        pub BaseIoSize: u32,
        pub ControlFlags: root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
        pub VolumeNameLength: u16,
        pub CriticalReservationIops: root::LONG64,
        pub ReservationBandwidth: root::LONG64,
        pub CriticalReservationBandwidth: root::LONG64,
        pub MaxTimePercent: root::LONG64,
        pub ReservationTimePercent: root::LONG64,
        pub CriticalReservationTimePercent: root::LONG64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
        pub MaxIops: root::LONG64,
        pub MaxBandwidth: root::LONG64,
        pub ReservationIops: root::LONG64,
        pub VolumeName: *mut u16,
        pub BaseIoSize: u32,
        pub ControlFlags: root::JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
        pub VolumeNameLength: u16,
        pub CriticalReservationIops: root::LONG64,
        pub ReservationBandwidth: root::LONG64,
        pub CriticalReservationBandwidth: root::LONG64,
        pub MaxTimePercent: root::LONG64,
        pub ReservationTimePercent: root::LONG64,
        pub CriticalReservationTimePercent: root::LONG64,
        pub SoftMaxIops: root::LONG64,
        pub SoftMaxBandwidth: root::LONG64,
        pub SoftMaxTimePercent: root::LONG64,
        pub LimitExcessNotifyIops: root::LONG64,
        pub LimitExcessNotifyBandwidth: root::LONG64,
        pub LimitExcessNotifyTimePercent: root::LONG64,
    }
    pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE:
        root::JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 1;
    pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE:
        root::JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 2;
    pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS : root :: JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 3 ;
    pub type JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
        pub IoCount: u64,
        pub TotalNonOverlappedQueueTime: root::ULONGLONG,
        pub TotalNonOverlappedServiceTime: root::ULONGLONG,
        pub TotalSize: root::ULONGLONG,
    }
    pub type JOBOBJECT_IO_ATTRIBUTION_STATS = root::_JOBOBJECT_IO_ATTRIBUTION_STATS;
    pub type PJOBOBJECT_IO_ATTRIBUTION_STATS = *mut root::_JOBOBJECT_IO_ATTRIBUTION_STATS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
        pub ControlFlags: u32,
        pub ReadStats: root::JOBOBJECT_IO_ATTRIBUTION_STATS,
        pub WriteStats: root::JOBOBJECT_IO_ATTRIBUTION_STATS,
    }
    pub type JOBOBJECT_IO_ATTRIBUTION_INFORMATION = root::_JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
    pub type PJOBOBJECT_IO_ATTRIBUTION_INFORMATION =
        *mut root::_JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
    pub const _JOBOBJECTINFOCLASS_JobObjectBasicAccountingInformation: root::_JOBOBJECTINFOCLASS =
        1;
    pub const _JOBOBJECTINFOCLASS_JobObjectBasicLimitInformation: root::_JOBOBJECTINFOCLASS = 2;
    pub const _JOBOBJECTINFOCLASS_JobObjectBasicProcessIdList: root::_JOBOBJECTINFOCLASS = 3;
    pub const _JOBOBJECTINFOCLASS_JobObjectBasicUIRestrictions: root::_JOBOBJECTINFOCLASS = 4;
    pub const _JOBOBJECTINFOCLASS_JobObjectSecurityLimitInformation: root::_JOBOBJECTINFOCLASS = 5;
    pub const _JOBOBJECTINFOCLASS_JobObjectEndOfJobTimeInformation: root::_JOBOBJECTINFOCLASS = 6;
    pub const _JOBOBJECTINFOCLASS_JobObjectAssociateCompletionPortInformation:
        root::_JOBOBJECTINFOCLASS = 7;
    pub const _JOBOBJECTINFOCLASS_JobObjectBasicAndIoAccountingInformation:
        root::_JOBOBJECTINFOCLASS = 8;
    pub const _JOBOBJECTINFOCLASS_JobObjectExtendedLimitInformation: root::_JOBOBJECTINFOCLASS = 9;
    pub const _JOBOBJECTINFOCLASS_JobObjectJobSetInformation: root::_JOBOBJECTINFOCLASS = 10;
    pub const _JOBOBJECTINFOCLASS_JobObjectGroupInformation: root::_JOBOBJECTINFOCLASS = 11;
    pub const _JOBOBJECTINFOCLASS_JobObjectNotificationLimitInformation: root::_JOBOBJECTINFOCLASS =
        12;
    pub const _JOBOBJECTINFOCLASS_JobObjectLimitViolationInformation: root::_JOBOBJECTINFOCLASS =
        13;
    pub const _JOBOBJECTINFOCLASS_JobObjectGroupInformationEx: root::_JOBOBJECTINFOCLASS = 14;
    pub const _JOBOBJECTINFOCLASS_JobObjectCpuRateControlInformation: root::_JOBOBJECTINFOCLASS =
        15;
    pub const _JOBOBJECTINFOCLASS_JobObjectCompletionFilter: root::_JOBOBJECTINFOCLASS = 16;
    pub const _JOBOBJECTINFOCLASS_JobObjectCompletionCounter: root::_JOBOBJECTINFOCLASS = 17;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved1Information: root::_JOBOBJECTINFOCLASS = 18;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved2Information: root::_JOBOBJECTINFOCLASS = 19;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved3Information: root::_JOBOBJECTINFOCLASS = 20;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved4Information: root::_JOBOBJECTINFOCLASS = 21;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved5Information: root::_JOBOBJECTINFOCLASS = 22;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved6Information: root::_JOBOBJECTINFOCLASS = 23;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved7Information: root::_JOBOBJECTINFOCLASS = 24;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved8Information: root::_JOBOBJECTINFOCLASS = 25;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved9Information: root::_JOBOBJECTINFOCLASS = 26;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved10Information: root::_JOBOBJECTINFOCLASS = 27;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved11Information: root::_JOBOBJECTINFOCLASS = 28;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved12Information: root::_JOBOBJECTINFOCLASS = 29;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved13Information: root::_JOBOBJECTINFOCLASS = 30;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved14Information: root::_JOBOBJECTINFOCLASS = 31;
    pub const _JOBOBJECTINFOCLASS_JobObjectNetRateControlInformation: root::_JOBOBJECTINFOCLASS =
        32;
    pub const _JOBOBJECTINFOCLASS_JobObjectNotificationLimitInformation2:
        root::_JOBOBJECTINFOCLASS = 33;
    pub const _JOBOBJECTINFOCLASS_JobObjectLimitViolationInformation2: root::_JOBOBJECTINFOCLASS =
        34;
    pub const _JOBOBJECTINFOCLASS_JobObjectCreateSilo: root::_JOBOBJECTINFOCLASS = 35;
    pub const _JOBOBJECTINFOCLASS_JobObjectSiloBasicInformation: root::_JOBOBJECTINFOCLASS = 36;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved15Information: root::_JOBOBJECTINFOCLASS = 37;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved16Information: root::_JOBOBJECTINFOCLASS = 38;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved17Information: root::_JOBOBJECTINFOCLASS = 39;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved18Information: root::_JOBOBJECTINFOCLASS = 40;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved19Information: root::_JOBOBJECTINFOCLASS = 41;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved20Information: root::_JOBOBJECTINFOCLASS = 42;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved21Information: root::_JOBOBJECTINFOCLASS = 43;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved22Information: root::_JOBOBJECTINFOCLASS = 44;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved23Information: root::_JOBOBJECTINFOCLASS = 45;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved24Information: root::_JOBOBJECTINFOCLASS = 46;
    pub const _JOBOBJECTINFOCLASS_JobObjectReserved25Information: root::_JOBOBJECTINFOCLASS = 47;
    pub const _JOBOBJECTINFOCLASS_MaxJobObjectInfoClass: root::_JOBOBJECTINFOCLASS = 48;
    pub type _JOBOBJECTINFOCLASS = i32;
    pub use self::super::root::_JOBOBJECTINFOCLASS as JOBOBJECTINFOCLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SILOOBJECT_BASIC_INFORMATION {
        pub SiloId: u32,
        pub SiloParentId: u32,
        pub NumberOfProcesses: u32,
        pub IsInServerSilo: root::BOOLEAN,
        pub Reserved: [u8; 3usize],
    }
    pub type SILOOBJECT_BASIC_INFORMATION = root::_SILOOBJECT_BASIC_INFORMATION;
    pub type PSILOOBJECT_BASIC_INFORMATION = *mut root::_SILOOBJECT_BASIC_INFORMATION;
    pub const _SERVERSILO_STATE_SERVERSILO_INITING: root::_SERVERSILO_STATE = 0;
    pub const _SERVERSILO_STATE_SERVERSILO_STARTED: root::_SERVERSILO_STATE = 1;
    pub const _SERVERSILO_STATE_SERVERSILO_SHUTTING_DOWN: root::_SERVERSILO_STATE = 2;
    pub const _SERVERSILO_STATE_SERVERSILO_TERMINATING: root::_SERVERSILO_STATE = 3;
    pub const _SERVERSILO_STATE_SERVERSILO_TERMINATED: root::_SERVERSILO_STATE = 4;
    pub type _SERVERSILO_STATE = i32;
    pub use self::super::root::_SERVERSILO_STATE as SERVERSILO_STATE;
    pub type PSERVERSILO_STATE = *mut root::_SERVERSILO_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVERSILO_BASIC_INFORMATION {
        pub ServiceSessionId: u32,
        pub State: root::SERVERSILO_STATE,
        pub ExitStatus: u32,
        pub IsDownlevelContainer: root::BOOLEAN,
        pub ApiSetSchema: root::PVOID,
        pub HostApiSetSchema: root::PVOID,
    }
    pub type SERVERSILO_BASIC_INFORMATION = root::_SERVERSILO_BASIC_INFORMATION;
    pub type PSERVERSILO_BASIC_INFORMATION = *mut root::_SERVERSILO_BASIC_INFORMATION;
    pub const _FIRMWARE_TYPE_FirmwareTypeUnknown: root::_FIRMWARE_TYPE = 0;
    pub const _FIRMWARE_TYPE_FirmwareTypeBios: root::_FIRMWARE_TYPE = 1;
    pub const _FIRMWARE_TYPE_FirmwareTypeUefi: root::_FIRMWARE_TYPE = 2;
    pub const _FIRMWARE_TYPE_FirmwareTypeMax: root::_FIRMWARE_TYPE = 3;
    pub type _FIRMWARE_TYPE = i32;
    pub use self::super::root::_FIRMWARE_TYPE as FIRMWARE_TYPE;
    pub type PFIRMWARE_TYPE = *mut root::_FIRMWARE_TYPE;
    pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorCore:
        root::_LOGICAL_PROCESSOR_RELATIONSHIP = 0;
    pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationNumaNode:
        root::_LOGICAL_PROCESSOR_RELATIONSHIP = 1;
    pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationCache: root::_LOGICAL_PROCESSOR_RELATIONSHIP =
        2;
    pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorPackage:
        root::_LOGICAL_PROCESSOR_RELATIONSHIP = 3;
    pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationGroup: root::_LOGICAL_PROCESSOR_RELATIONSHIP =
        4;
    pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationAll: root::_LOGICAL_PROCESSOR_RELATIONSHIP =
        65535;
    pub type _LOGICAL_PROCESSOR_RELATIONSHIP = i32;
    pub use self::super::root::_LOGICAL_PROCESSOR_RELATIONSHIP as LOGICAL_PROCESSOR_RELATIONSHIP;
    pub const _PROCESSOR_CACHE_TYPE_CacheUnified: root::_PROCESSOR_CACHE_TYPE = 0;
    pub const _PROCESSOR_CACHE_TYPE_CacheInstruction: root::_PROCESSOR_CACHE_TYPE = 1;
    pub const _PROCESSOR_CACHE_TYPE_CacheData: root::_PROCESSOR_CACHE_TYPE = 2;
    pub const _PROCESSOR_CACHE_TYPE_CacheTrace: root::_PROCESSOR_CACHE_TYPE = 3;
    pub type _PROCESSOR_CACHE_TYPE = i32;
    pub use self::super::root::_PROCESSOR_CACHE_TYPE as PROCESSOR_CACHE_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CACHE_DESCRIPTOR {
        pub Level: u8,
        pub Associativity: u8,
        pub LineSize: u16,
        pub Size: u32,
        pub Type: root::PROCESSOR_CACHE_TYPE,
    }
    pub type CACHE_DESCRIPTOR = root::_CACHE_DESCRIPTOR;
    pub type PCACHE_DESCRIPTOR = *mut root::_CACHE_DESCRIPTOR;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
        pub ProcessorMask: u64,
        pub Relationship: root::LOGICAL_PROCESSOR_RELATIONSHIP,
        pub __bindgen_anon_1: root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1 {
        pub ProcessorCore: root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        pub NumaNode: root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2,
        pub Cache: root::CACHE_DESCRIPTOR,
        pub Reserved: [root::ULONGLONG; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        pub Flags: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2 {
        pub NodeNumber: u32,
    }
    pub type SYSTEM_LOGICAL_PROCESSOR_INFORMATION = root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
    pub type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION =
        *mut root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESSOR_RELATIONSHIP {
        pub Flags: u8,
        pub EfficiencyClass: u8,
        pub Reserved: [u8; 20usize],
        pub GroupCount: u16,
        pub GroupMask: [root::GROUP_AFFINITY; 1usize],
    }
    pub type PROCESSOR_RELATIONSHIP = root::_PROCESSOR_RELATIONSHIP;
    pub type PPROCESSOR_RELATIONSHIP = *mut root::_PROCESSOR_RELATIONSHIP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NUMA_NODE_RELATIONSHIP {
        pub NodeNumber: u32,
        pub Reserved: [u8; 20usize],
        pub GroupMask: root::GROUP_AFFINITY,
    }
    pub type NUMA_NODE_RELATIONSHIP = root::_NUMA_NODE_RELATIONSHIP;
    pub type PNUMA_NODE_RELATIONSHIP = *mut root::_NUMA_NODE_RELATIONSHIP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CACHE_RELATIONSHIP {
        pub Level: u8,
        pub Associativity: u8,
        pub LineSize: u16,
        pub CacheSize: u32,
        pub Type: root::PROCESSOR_CACHE_TYPE,
        pub Reserved: [u8; 20usize],
        pub GroupMask: root::GROUP_AFFINITY,
    }
    pub type CACHE_RELATIONSHIP = root::_CACHE_RELATIONSHIP;
    pub type PCACHE_RELATIONSHIP = *mut root::_CACHE_RELATIONSHIP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESSOR_GROUP_INFO {
        pub MaximumProcessorCount: u8,
        pub ActiveProcessorCount: u8,
        pub Reserved: [u8; 38usize],
        pub ActiveProcessorMask: u64,
    }
    pub type PROCESSOR_GROUP_INFO = root::_PROCESSOR_GROUP_INFO;
    pub type PPROCESSOR_GROUP_INFO = *mut root::_PROCESSOR_GROUP_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GROUP_RELATIONSHIP {
        pub MaximumGroupCount: u16,
        pub ActiveGroupCount: u16,
        pub Reserved: [u8; 20usize],
        pub GroupInfo: [root::PROCESSOR_GROUP_INFO; 1usize],
    }
    pub type GROUP_RELATIONSHIP = root::_GROUP_RELATIONSHIP;
    pub type PGROUP_RELATIONSHIP = *mut root::_GROUP_RELATIONSHIP;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
        pub Relationship: root::LOGICAL_PROCESSOR_RELATIONSHIP,
        pub Size: u32,
        pub __bindgen_anon_1: root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1 {
        pub Processor: root::PROCESSOR_RELATIONSHIP,
        pub NumaNode: root::NUMA_NODE_RELATIONSHIP,
        pub Cache: root::CACHE_RELATIONSHIP,
        pub Group: root::GROUP_RELATIONSHIP,
    }
    pub type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX =
        root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
    pub type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX =
        *mut root::_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
    pub const _CPU_SET_INFORMATION_TYPE_CpuSetInformation: root::_CPU_SET_INFORMATION_TYPE = 0;
    pub type _CPU_SET_INFORMATION_TYPE = i32;
    pub use self::super::root::_CPU_SET_INFORMATION_TYPE as CPU_SET_INFORMATION_TYPE;
    pub type PCPU_SET_INFORMATION_TYPE = *mut root::_CPU_SET_INFORMATION_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SYSTEM_CPU_SET_INFORMATION {
        pub Size: u32,
        pub Type: root::CPU_SET_INFORMATION_TYPE,
        pub __bindgen_anon_1: root::_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1 {
        pub CpuSet: root::_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        pub Id: u32,
        pub Group: u16,
        pub LogicalProcessorIndex: u8,
        pub CoreIndex: u8,
        pub LastLevelCacheIndex: u8,
        pub NumaNodeIndex: u8,
        pub EfficiencyClass: u8,
        pub __bindgen_anon_1:
            root::_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2:
            root::_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        pub AllocationTag: root::DWORD64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 { pub AllFlags : root :: BYTE , pub __bindgen_anon_1 : root :: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
    }
    impl _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Parked(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_Parked(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Allocated(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_Allocated(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AllocatedToTargetProcess(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_AllocatedToTargetProcess(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn RealTime(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_RealTime(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedFlags(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_ReservedFlags(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Parked: u8,
            Allocated: u8,
            AllocatedToTargetProcess: u8,
            RealTime: u8,
            ReservedFlags: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let Parked: u8 = unsafe { ::std::mem::transmute(Parked) };
                Parked as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let Allocated: u8 = unsafe { ::std::mem::transmute(Allocated) };
                Allocated as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let AllocatedToTargetProcess: u8 =
                    unsafe { ::std::mem::transmute(AllocatedToTargetProcess) };
                AllocatedToTargetProcess as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let RealTime: u8 = unsafe { ::std::mem::transmute(RealTime) };
                RealTime as u64
            });
            __bindgen_bitfield_unit.set(4usize, 4u8, {
                let ReservedFlags: u8 = unsafe { ::std::mem::transmute(ReservedFlags) };
                ReservedFlags as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
        pub Reserved: u32,
        pub SchedulingClass: u8,
    }
    pub type SYSTEM_CPU_SET_INFORMATION = root::_SYSTEM_CPU_SET_INFORMATION;
    pub type PSYSTEM_CPU_SET_INFORMATION = *mut root::_SYSTEM_CPU_SET_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_POOL_ZEROING_INFORMATION {
        pub PoolZeroingSupportPresent: root::BOOLEAN,
    }
    pub type SYSTEM_POOL_ZEROING_INFORMATION = root::_SYSTEM_POOL_ZEROING_INFORMATION;
    pub type PSYSTEM_POOL_ZEROING_INFORMATION = *mut root::_SYSTEM_POOL_ZEROING_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
        pub CycleTime: root::DWORD64,
    }
    pub type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION =
        root::_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
    pub type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION =
        *mut root::_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSTATE_FEATURE {
        pub Offset: u32,
        pub Size: u32,
    }
    pub type XSTATE_FEATURE = root::_XSTATE_FEATURE;
    pub type PXSTATE_FEATURE = *mut root::_XSTATE_FEATURE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _XSTATE_CONFIGURATION {
        pub EnabledFeatures: root::DWORD64,
        pub EnabledVolatileFeatures: root::DWORD64,
        pub Size: u32,
        pub __bindgen_anon_1: root::_XSTATE_CONFIGURATION__bindgen_ty_1,
        pub Features: [root::XSTATE_FEATURE; 64usize],
        pub EnabledSupervisorFeatures: root::DWORD64,
        pub AlignedFeatures: root::DWORD64,
        pub AllFeatureSize: u32,
        pub AllFeatures: [u32; 64usize],
        pub EnabledUserVisibleSupervisorFeatures: root::DWORD64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _XSTATE_CONFIGURATION__bindgen_ty_1 {
        pub ControlFlags: u32,
        pub __bindgen_anon_1: root::_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub __bindgen_padding_0: [u8; 3usize],
    }
    impl _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn OptimizedSave(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_OptimizedSave(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn CompactionEnabled(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_CompactionEnabled(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            OptimizedSave: u32,
            CompactionEnabled: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let OptimizedSave: u32 = unsafe { ::std::mem::transmute(OptimizedSave) };
                OptimizedSave as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let CompactionEnabled: u32 = unsafe { ::std::mem::transmute(CompactionEnabled) };
                CompactionEnabled as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type XSTATE_CONFIGURATION = root::_XSTATE_CONFIGURATION;
    pub type PXSTATE_CONFIGURATION = *mut root::_XSTATE_CONFIGURATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEMORY_BASIC_INFORMATION {
        pub BaseAddress: root::PVOID,
        pub AllocationBase: root::PVOID,
        pub AllocationProtect: u32,
        pub PartitionId: u16,
        pub RegionSize: root::SIZE_T,
        pub State: u32,
        pub Protect: u32,
        pub Type: u32,
    }
    pub type MEMORY_BASIC_INFORMATION = root::_MEMORY_BASIC_INFORMATION;
    pub type PMEMORY_BASIC_INFORMATION = *mut root::_MEMORY_BASIC_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEMORY_BASIC_INFORMATION32 {
        pub BaseAddress: u32,
        pub AllocationBase: u32,
        pub AllocationProtect: u32,
        pub RegionSize: u32,
        pub State: u32,
        pub Protect: u32,
        pub Type: u32,
    }
    pub type MEMORY_BASIC_INFORMATION32 = root::_MEMORY_BASIC_INFORMATION32;
    pub type PMEMORY_BASIC_INFORMATION32 = *mut root::_MEMORY_BASIC_INFORMATION32;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEMORY_BASIC_INFORMATION64 {
        pub BaseAddress: root::ULONGLONG,
        pub AllocationBase: root::ULONGLONG,
        pub AllocationProtect: u32,
        pub __alignment1: u32,
        pub RegionSize: root::ULONGLONG,
        pub State: u32,
        pub Protect: u32,
        pub Type: u32,
        pub __alignment2: u32,
    }
    pub type MEMORY_BASIC_INFORMATION64 = root::_MEMORY_BASIC_INFORMATION64;
    pub type PMEMORY_BASIC_INFORMATION64 = *mut root::_MEMORY_BASIC_INFORMATION64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CFG_CALL_TARGET_INFO {
        pub Offset: u64,
        pub Flags: u64,
    }
    pub type CFG_CALL_TARGET_INFO = root::_CFG_CALL_TARGET_INFO;
    pub type PCFG_CALL_TARGET_INFO = *mut root::_CFG_CALL_TARGET_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEM_ADDRESS_REQUIREMENTS {
        pub LowestStartingAddress: root::PVOID,
        pub HighestEndingAddress: root::PVOID,
        pub Alignment: root::SIZE_T,
    }
    pub type MEM_ADDRESS_REQUIREMENTS = root::_MEM_ADDRESS_REQUIREMENTS;
    pub type PMEM_ADDRESS_REQUIREMENTS = *mut root::_MEM_ADDRESS_REQUIREMENTS;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterInvalidType:
        root::MEM_EXTENDED_PARAMETER_TYPE = 0;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterAddressRequirements:
        root::MEM_EXTENDED_PARAMETER_TYPE = 1;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterNumaNode:
        root::MEM_EXTENDED_PARAMETER_TYPE = 2;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterPartitionHandle:
        root::MEM_EXTENDED_PARAMETER_TYPE = 3;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterUserPhysicalHandle:
        root::MEM_EXTENDED_PARAMETER_TYPE = 4;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterAttributeFlags:
        root::MEM_EXTENDED_PARAMETER_TYPE = 5;
    pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterMax:
        root::MEM_EXTENDED_PARAMETER_TYPE = 6;
    pub type MEM_EXTENDED_PARAMETER_TYPE = i32;
    pub type PMEM_EXTENDED_PARAMETER_TYPE = *mut root::MEM_EXTENDED_PARAMETER_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct MEM_EXTENDED_PARAMETER {
        pub __bindgen_anon_1: root::MEM_EXTENDED_PARAMETER__bindgen_ty_1,
        pub __bindgen_anon_2: root::MEM_EXTENDED_PARAMETER__bindgen_ty_2,
    }
    #[repr(C)]
    #[repr(align(8))]
    #[derive(Debug, Copy, Clone)]
    pub struct MEM_EXTENDED_PARAMETER__bindgen_ty_1 {
        pub _bitfield_align_1: [u64; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 8usize]>,
    }
    impl MEM_EXTENDED_PARAMETER__bindgen_ty_1 {
        #[inline]
        pub fn Type(&self) -> root::DWORD64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u64) }
        }
        #[inline]
        pub fn set_Type(&mut self, val: root::DWORD64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> root::DWORD64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 56u8) as u64) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: root::DWORD64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 56u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Type: root::DWORD64,
            Reserved: root::DWORD64,
        ) -> root::__BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 8usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let Type: u64 = unsafe { ::std::mem::transmute(Type) };
                Type as u64
            });
            __bindgen_bitfield_unit.set(8usize, 56u8, {
                let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union MEM_EXTENDED_PARAMETER__bindgen_ty_2 {
        pub ULong64: root::DWORD64,
        pub Pointer: root::PVOID,
        pub Size: root::SIZE_T,
        pub Handle: root::HANDLE,
        pub ULong: u32,
    }
    pub type PMEM_EXTENDED_PARAMETER = *mut root::MEM_EXTENDED_PARAMETER;
    pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterInvalidType:
        root::MEM_SECTION_EXTENDED_PARAMETER_TYPE = 0;
    pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterUserPhysicalFlags:
        root::MEM_SECTION_EXTENDED_PARAMETER_TYPE = 1;
    pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterNumaNode:
        root::MEM_SECTION_EXTENDED_PARAMETER_TYPE = 2;
    pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterMax:
        root::MEM_SECTION_EXTENDED_PARAMETER_TYPE = 3;
    pub type MEM_SECTION_EXTENDED_PARAMETER_TYPE = i32;
    pub type PMEM_SECTION_EXTENDED_PARAMETER_TYPE = *mut root::MEM_SECTION_EXTENDED_PARAMETER_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCLAVE_CREATE_INFO_SGX {
        pub Secs: [u8; 4096usize],
    }
    pub type ENCLAVE_CREATE_INFO_SGX = root::_ENCLAVE_CREATE_INFO_SGX;
    pub type PENCLAVE_CREATE_INFO_SGX = *mut root::_ENCLAVE_CREATE_INFO_SGX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCLAVE_INIT_INFO_SGX {
        pub SigStruct: [u8; 1808usize],
        pub Reserved1: [u8; 240usize],
        pub EInitToken: [u8; 304usize],
        pub Reserved2: [u8; 1744usize],
    }
    pub type ENCLAVE_INIT_INFO_SGX = root::_ENCLAVE_INIT_INFO_SGX;
    pub type PENCLAVE_INIT_INFO_SGX = *mut root::_ENCLAVE_INIT_INFO_SGX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCLAVE_CREATE_INFO_VBS {
        pub Flags: u32,
        pub OwnerID: [u8; 32usize],
    }
    pub type ENCLAVE_CREATE_INFO_VBS = root::_ENCLAVE_CREATE_INFO_VBS;
    pub type PENCLAVE_CREATE_INFO_VBS = *mut root::_ENCLAVE_CREATE_INFO_VBS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCLAVE_CREATE_INFO_VBS_BASIC {
        pub Flags: u32,
        pub OwnerID: [u8; 32usize],
    }
    pub type ENCLAVE_CREATE_INFO_VBS_BASIC = root::_ENCLAVE_CREATE_INFO_VBS_BASIC;
    pub type PENCLAVE_CREATE_INFO_VBS_BASIC = *mut root::_ENCLAVE_CREATE_INFO_VBS_BASIC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCLAVE_LOAD_DATA_VBS_BASIC {
        pub PageType: u32,
    }
    pub type ENCLAVE_LOAD_DATA_VBS_BASIC = root::_ENCLAVE_LOAD_DATA_VBS_BASIC;
    pub type PENCLAVE_LOAD_DATA_VBS_BASIC = *mut root::_ENCLAVE_LOAD_DATA_VBS_BASIC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _ENCLAVE_INIT_INFO_VBS_BASIC {
        pub FamilyId: [u8; 16usize],
        pub ImageId: [u8; 16usize],
        pub EnclaveSize: root::ULONGLONG,
        pub EnclaveSvn: u32,
        pub Reserved: u32,
        pub __bindgen_anon_1: root::_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1 {
        pub SignatureInfoHandle: root::HANDLE,
        pub Unused: root::ULONGLONG,
    }
    pub type ENCLAVE_INIT_INFO_VBS_BASIC = root::_ENCLAVE_INIT_INFO_VBS_BASIC;
    pub type PENCLAVE_INIT_INFO_VBS_BASIC = *mut root::_ENCLAVE_INIT_INFO_VBS_BASIC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCLAVE_INIT_INFO_VBS {
        pub Length: u32,
        pub ThreadCount: u32,
    }
    pub type ENCLAVE_INIT_INFO_VBS = root::_ENCLAVE_INIT_INFO_VBS;
    pub type PENCLAVE_INIT_INFO_VBS = *mut root::_ENCLAVE_INIT_INFO_VBS;
    pub type ENCLAVE_TARGET_FUNCTION =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::PVOID) -> root::PVOID>;
    pub type PENCLAVE_TARGET_FUNCTION = root::ENCLAVE_TARGET_FUNCTION;
    pub type LPENCLAVE_TARGET_FUNCTION = root::PENCLAVE_TARGET_FUNCTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_ID_128 {
        pub Identifier: [u8; 16usize],
    }
    pub type FILE_ID_128 = root::_FILE_ID_128;
    pub type PFILE_ID_128 = *mut root::_FILE_ID_128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_NOTIFY_INFORMATION {
        pub NextEntryOffset: u32,
        pub Action: u32,
        pub FileNameLength: u32,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_NOTIFY_INFORMATION = root::_FILE_NOTIFY_INFORMATION;
    pub type PFILE_NOTIFY_INFORMATION = *mut root::_FILE_NOTIFY_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_NOTIFY_EXTENDED_INFORMATION {
        pub NextEntryOffset: u32,
        pub Action: u32,
        pub CreationTime: root::LARGE_INTEGER,
        pub LastModificationTime: root::LARGE_INTEGER,
        pub LastChangeTime: root::LARGE_INTEGER,
        pub LastAccessTime: root::LARGE_INTEGER,
        pub AllocatedLength: root::LARGE_INTEGER,
        pub FileSize: root::LARGE_INTEGER,
        pub FileAttributes: u32,
        pub ReparsePointTag: u32,
        pub FileId: root::LARGE_INTEGER,
        pub ParentFileId: root::LARGE_INTEGER,
        pub FileNameLength: u32,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_NOTIFY_EXTENDED_INFORMATION = root::_FILE_NOTIFY_EXTENDED_INFORMATION;
    pub type PFILE_NOTIFY_EXTENDED_INFORMATION = *mut root::_FILE_NOTIFY_EXTENDED_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _FILE_SEGMENT_ELEMENT {
        pub Buffer: *mut ::std::os::raw::c_void,
        pub Alignment: root::ULONGLONG,
    }
    pub type FILE_SEGMENT_ELEMENT = root::_FILE_SEGMENT_ELEMENT;
    pub type PFILE_SEGMENT_ELEMENT = *mut root::_FILE_SEGMENT_ELEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REPARSE_GUID_DATA_BUFFER {
        pub ReparseTag: u32,
        pub ReparseDataLength: u16,
        pub Reserved: u16,
        pub ReparseGuid: root::GUID,
        pub GenericReparseBuffer: root::_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1 {
        pub DataBuffer: [u8; 1usize],
    }
    pub type REPARSE_GUID_DATA_BUFFER = root::_REPARSE_GUID_DATA_BUFFER;
    pub type PREPARSE_GUID_DATA_BUFFER = *mut root::_REPARSE_GUID_DATA_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCRUB_DATA_INPUT {
        pub Size: u32,
        pub Flags: u32,
        pub MaximumIos: u32,
        pub ObjectId: [u32; 4usize],
        pub Reserved: [u32; 25usize],
        pub ResumeContext: [u8; 816usize],
    }
    pub type SCRUB_DATA_INPUT = root::_SCRUB_DATA_INPUT;
    pub type PSCRUB_DATA_INPUT = *mut root::_SCRUB_DATA_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCRUB_PARITY_EXTENT {
        pub Offset: root::LONGLONG,
        pub Length: root::ULONGLONG,
    }
    pub type SCRUB_PARITY_EXTENT = root::_SCRUB_PARITY_EXTENT;
    pub type PSCRUB_PARITY_EXTENT = *mut root::_SCRUB_PARITY_EXTENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCRUB_PARITY_EXTENT_DATA {
        pub Size: u16,
        pub Flags: u16,
        pub NumberOfParityExtents: u16,
        pub MaximumNumberOfParityExtents: u16,
        pub ParityExtents: [root::SCRUB_PARITY_EXTENT; 1usize],
    }
    pub type SCRUB_PARITY_EXTENT_DATA = root::_SCRUB_PARITY_EXTENT_DATA;
    pub type PSCRUB_PARITY_EXTENT_DATA = *mut root::_SCRUB_PARITY_EXTENT_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCRUB_DATA_OUTPUT {
        pub Size: u32,
        pub Flags: u32,
        pub Status: u32,
        pub ErrorFileOffset: root::ULONGLONG,
        pub ErrorLength: root::ULONGLONG,
        pub NumberOfBytesRepaired: root::ULONGLONG,
        pub NumberOfBytesFailed: root::ULONGLONG,
        pub InternalFileReference: root::ULONGLONG,
        pub ResumeContextLength: u16,
        pub ParityExtentDataOffset: u16,
        pub Reserved: [u32; 9usize],
        pub NumberOfMetadataBytesProcessed: root::ULONGLONG,
        pub NumberOfDataBytesProcessed: root::ULONGLONG,
        pub TotalNumberOfMetadataBytesInUse: root::ULONGLONG,
        pub TotalNumberOfDataBytesInUse: root::ULONGLONG,
        pub ResumeContext: [u8; 816usize],
    }
    pub type SCRUB_DATA_OUTPUT = root::_SCRUB_DATA_OUTPUT;
    pub type PSCRUB_DATA_OUTPUT = *mut root::_SCRUB_DATA_OUTPUT;
    pub const _SharedVirtualDiskSupportType_SharedVirtualDisksUnsupported:
        root::_SharedVirtualDiskSupportType = 0;
    pub const _SharedVirtualDiskSupportType_SharedVirtualDisksSupported:
        root::_SharedVirtualDiskSupportType = 1;
    pub const _SharedVirtualDiskSupportType_SharedVirtualDiskSnapshotsSupported:
        root::_SharedVirtualDiskSupportType = 3;
    pub const _SharedVirtualDiskSupportType_SharedVirtualDiskCDPSnapshotsSupported:
        root::_SharedVirtualDiskSupportType = 7;
    pub type _SharedVirtualDiskSupportType = i32;
    pub use self::super::root::_SharedVirtualDiskSupportType as SharedVirtualDiskSupportType;
    pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateNone:
        root::_SharedVirtualDiskHandleState = 0;
    pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateFileShared:
        root::_SharedVirtualDiskHandleState = 1;
    pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateHandleShared:
        root::_SharedVirtualDiskHandleState = 3;
    pub type _SharedVirtualDiskHandleState = i32;
    pub use self::super::root::_SharedVirtualDiskHandleState as SharedVirtualDiskHandleState;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHARED_VIRTUAL_DISK_SUPPORT {
        pub SharedVirtualDiskSupport: root::SharedVirtualDiskSupportType,
        pub HandleState: root::SharedVirtualDiskHandleState,
    }
    pub type SHARED_VIRTUAL_DISK_SUPPORT = root::_SHARED_VIRTUAL_DISK_SUPPORT;
    pub type PSHARED_VIRTUAL_DISK_SUPPORT = *mut root::_SHARED_VIRTUAL_DISK_SUPPORT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REARRANGE_FILE_DATA {
        pub SourceStartingOffset: root::ULONGLONG,
        pub TargetOffset: root::ULONGLONG,
        pub SourceFileHandle: root::HANDLE,
        pub Length: u32,
        pub Flags: u32,
    }
    pub type REARRANGE_FILE_DATA = root::_REARRANGE_FILE_DATA;
    pub type PREARRANGE_FILE_DATA = *mut root::_REARRANGE_FILE_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REARRANGE_FILE_DATA32 {
        pub SourceStartingOffset: root::ULONGLONG,
        pub TargetOffset: root::ULONGLONG,
        pub SourceFileHandle: root::UINT32,
        pub Length: u32,
        pub Flags: u32,
    }
    pub type REARRANGE_FILE_DATA32 = root::_REARRANGE_FILE_DATA32;
    pub type PREARRANGE_FILE_DATA32 = *mut root::_REARRANGE_FILE_DATA32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHUFFLE_FILE_DATA {
        pub StartingOffset: root::LONGLONG,
        pub Length: root::LONGLONG,
        pub Flags: u32,
    }
    pub type SHUFFLE_FILE_DATA = root::_SHUFFLE_FILE_DATA;
    pub type PSHUFFLE_FILE_DATA = *mut root::_SHUFFLE_FILE_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NETWORK_APP_INSTANCE_EA {
        pub AppInstanceID: root::GUID,
        pub CsvFlags: u32,
    }
    pub type NETWORK_APP_INSTANCE_EA = root::_NETWORK_APP_INSTANCE_EA;
    pub type PNETWORK_APP_INSTANCE_EA = *mut root::_NETWORK_APP_INSTANCE_EA;
    extern "C" {
        pub static GUID_MAX_POWER_SAVINGS: root::GUID;
    }
    extern "C" {
        pub static GUID_MIN_POWER_SAVINGS: root::GUID;
    }
    extern "C" {
        pub static GUID_TYPICAL_POWER_SAVINGS: root::GUID;
    }
    extern "C" {
        pub static NO_SUBGROUP_GUID: root::GUID;
    }
    extern "C" {
        pub static ALL_POWERSCHEMES_GUID: root::GUID;
    }
    extern "C" {
        pub static GUID_POWERSCHEME_PERSONALITY: root::GUID;
    }
    extern "C" {
        pub static GUID_ACTIVE_POWERSCHEME: root::GUID;
    }
    extern "C" {
        pub static GUID_IDLE_RESILIENCY_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_IDLE_RESILIENCY_PERIOD: root::GUID;
    }
    extern "C" {
        pub static GUID_DEEP_SLEEP_ENABLED: root::GUID;
    }
    extern "C" {
        pub static GUID_DEEP_SLEEP_PLATFORM_STATE: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_POWERDOWN_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_ANNOYANCE_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_DIM_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_ADAPTIVE_POWERDOWN: root::GUID;
    }
    extern "C" {
        pub static GUID_MONITOR_POWER_ON: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: root::GUID;
    }
    extern "C" {
        pub static GUID_CONSOLE_DISPLAY_STATE: root::GUID;
    }
    extern "C" {
        pub static GUID_ALLOW_DISPLAY_REQUIRED: root::GUID;
    }
    extern "C" {
        pub static GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_ADVANCED_COLOR_QUALITY_BIAS: root::GUID;
    }
    extern "C" {
        pub static GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_NON_ADAPTIVE_INPUT_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_MAX_POWER: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_POWERDOWN_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_IDLE_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_BURST_IGNORE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_ADAPTIVE_POWERDOWN: root::GUID;
    }
    extern "C" {
        pub static GUID_DISK_NVME_NOPPME: root::GUID;
    }
    extern "C" {
        pub static GUID_SLEEP_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_SLEEP_IDLE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_STANDBY_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_UNATTEND_SLEEP_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_HIBERNATE_TIMEOUT: root::GUID;
    }
    extern "C" {
        pub static GUID_HIBERNATE_FASTS4_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_CRITICAL_POWER_TRANSITION: root::GUID;
    }
    extern "C" {
        pub static GUID_SYSTEM_AWAYMODE: root::GUID;
    }
    extern "C" {
        pub static GUID_ALLOW_AWAYMODE: root::GUID;
    }
    extern "C" {
        pub static GUID_USER_PRESENCE_PREDICTION: root::GUID;
    }
    extern "C" {
        pub static GUID_STANDBY_BUDGET_GRACE_PERIOD: root::GUID;
    }
    extern "C" {
        pub static GUID_STANDBY_BUDGET_PERCENT: root::GUID;
    }
    extern "C" {
        pub static GUID_STANDBY_RESERVE_GRACE_PERIOD: root::GUID;
    }
    extern "C" {
        pub static GUID_STANDBY_RESERVE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_STANDBY_RESET_PERCENT: root::GUID;
    }
    extern "C" {
        pub static GUID_ALLOW_STANDBY_STATES: root::GUID;
    }
    extern "C" {
        pub static GUID_ALLOW_RTC_WAKE: root::GUID;
    }
    extern "C" {
        pub static GUID_LEGACY_RTC_MITIGATION: root::GUID;
    }
    extern "C" {
        pub static GUID_ALLOW_SYSTEM_REQUIRED: root::GUID;
    }
    extern "C" {
        pub static GUID_POWER_SAVING_STATUS: root::GUID;
    }
    extern "C" {
        pub static GUID_ENERGY_SAVER_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_ENERGY_SAVER_BATTERY_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_ENERGY_SAVER_BRIGHTNESS: root::GUID;
    }
    extern "C" {
        pub static GUID_ENERGY_SAVER_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_SYSTEM_BUTTON_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_POWERBUTTON_ACTION: root::GUID;
    }
    extern "C" {
        pub static GUID_SLEEPBUTTON_ACTION: root::GUID;
    }
    extern "C" {
        pub static GUID_USERINTERFACEBUTTON_ACTION: root::GUID;
    }
    extern "C" {
        pub static GUID_LIDCLOSE_ACTION: root::GUID;
    }
    extern "C" {
        pub static GUID_LIDOPEN_POWERSTATE: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_ACTION_0: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_LEVEL_0: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_FLAGS_0: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_ACTION_1: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_LEVEL_1: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_FLAGS_1: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_ACTION_2: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_LEVEL_2: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_FLAGS_2: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_ACTION_3: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_LEVEL_3: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_DISCHARGE_FLAGS_3: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_SETTINGS_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_THROTTLE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_THROTTLE_MAXIMUM: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_THROTTLE_MAXIMUM_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_THROTTLE_MINIMUM: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_THROTTLE_MINIMUM_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_FREQUENCY_LIMIT: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_FREQUENCY_LIMIT_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_ALLOW_THROTTLING: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLESTATE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERFSTATE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_POLICY_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_POLICY_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_TIME_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_TIME_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_TIME_CHECK: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_BOOST_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_BOOST_MODE: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_DUTY_CYCLING: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLE_ALLOW_SCALING: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLE_DISABLE: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLE_STATE_MAXIMUM: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLE_TIME_CHECK: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PARKING_CORE_OVERRIDE: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PARKING_PERF_STATE: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PARKING_PERF_STATE_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_SOFT_PARKING_LATENCY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_HISTORY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_HISTORY_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_INCREASE_HISTORY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_DECREASE_HISTORY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_LATENCY_HINT: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_DISTRIBUTE_UTILITY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_HETEROGENEOUS_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_HETERO_DECREASE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_HETERO_INCREASE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CLASS0_FLOOR_PERF: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_CLASS1_INITIAL_PERF: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_SYSTEM_COOLING_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: root::GUID;
    }
    extern "C" {
        pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: root::GUID;
    }
    extern "C" {
        pub static GUID_LOCK_CONSOLE_ON_WAKE: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVICE_IDLE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_CONNECTIVITY_IN_STANDBY: root::GUID;
    }
    extern "C" {
        pub static GUID_DISCONNECTED_STANDBY_MODE: root::GUID;
    }
    extern "C" {
        pub static GUID_ACDC_POWER_SOURCE: root::GUID;
    }
    extern "C" {
        pub static GUID_LIDSWITCH_STATE_CHANGE: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_PERCENTAGE_REMAINING: root::GUID;
    }
    extern "C" {
        pub static GUID_BATTERY_COUNT: root::GUID;
    }
    extern "C" {
        pub static GUID_GLOBAL_USER_PRESENCE: root::GUID;
    }
    extern "C" {
        pub static GUID_SESSION_DISPLAY_STATUS: root::GUID;
    }
    extern "C" {
        pub static GUID_SESSION_USER_PRESENCE: root::GUID;
    }
    extern "C" {
        pub static GUID_IDLE_BACKGROUND_TASK: root::GUID;
    }
    extern "C" {
        pub static GUID_BACKGROUND_TASK_NOTIFICATION: root::GUID;
    }
    extern "C" {
        pub static GUID_APPLAUNCH_BUTTON: root::GUID;
    }
    extern "C" {
        pub static GUID_PCIEXPRESS_SETTINGS_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_PCIEXPRESS_ASPM_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: root::GUID;
    }
    extern "C" {
        pub static GUID_INTSTEER_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_INTSTEER_MODE: root::GUID;
    }
    extern "C" {
        pub static GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: root::GUID;
    }
    extern "C" {
        pub static GUID_INTSTEER_TIME_UNPARK_TRIGGER: root::GUID;
    }
    extern "C" {
        pub static GUID_GRAPHICS_SUBGROUP: root::GUID;
    }
    extern "C" {
        pub static GUID_GPU_PREFERENCE_POLICY: root::GUID;
    }
    extern "C" {
        pub static GUID_MIXED_REALITY_MODE: root::GUID;
    }
    extern "C" {
        pub static GUID_SPR_ACTIVE_SESSION_CHANGE: root::GUID;
    }
    pub const _SYSTEM_POWER_STATE_PowerSystemUnspecified: root::_SYSTEM_POWER_STATE = 0;
    pub const _SYSTEM_POWER_STATE_PowerSystemWorking: root::_SYSTEM_POWER_STATE = 1;
    pub const _SYSTEM_POWER_STATE_PowerSystemSleeping1: root::_SYSTEM_POWER_STATE = 2;
    pub const _SYSTEM_POWER_STATE_PowerSystemSleeping2: root::_SYSTEM_POWER_STATE = 3;
    pub const _SYSTEM_POWER_STATE_PowerSystemSleeping3: root::_SYSTEM_POWER_STATE = 4;
    pub const _SYSTEM_POWER_STATE_PowerSystemHibernate: root::_SYSTEM_POWER_STATE = 5;
    pub const _SYSTEM_POWER_STATE_PowerSystemShutdown: root::_SYSTEM_POWER_STATE = 6;
    pub const _SYSTEM_POWER_STATE_PowerSystemMaximum: root::_SYSTEM_POWER_STATE = 7;
    pub type _SYSTEM_POWER_STATE = i32;
    pub use self::super::root::_SYSTEM_POWER_STATE as SYSTEM_POWER_STATE;
    pub type PSYSTEM_POWER_STATE = *mut root::_SYSTEM_POWER_STATE;
    pub const POWER_ACTION_PowerActionNone: root::POWER_ACTION = 0;
    pub const POWER_ACTION_PowerActionReserved: root::POWER_ACTION = 1;
    pub const POWER_ACTION_PowerActionSleep: root::POWER_ACTION = 2;
    pub const POWER_ACTION_PowerActionHibernate: root::POWER_ACTION = 3;
    pub const POWER_ACTION_PowerActionShutdown: root::POWER_ACTION = 4;
    pub const POWER_ACTION_PowerActionShutdownReset: root::POWER_ACTION = 5;
    pub const POWER_ACTION_PowerActionShutdownOff: root::POWER_ACTION = 6;
    pub const POWER_ACTION_PowerActionWarmEject: root::POWER_ACTION = 7;
    pub const POWER_ACTION_PowerActionDisplayOff: root::POWER_ACTION = 8;
    pub type POWER_ACTION = i32;
    pub type PPOWER_ACTION = *mut root::POWER_ACTION;
    pub const _DEVICE_POWER_STATE_PowerDeviceUnspecified: root::_DEVICE_POWER_STATE = 0;
    pub const _DEVICE_POWER_STATE_PowerDeviceD0: root::_DEVICE_POWER_STATE = 1;
    pub const _DEVICE_POWER_STATE_PowerDeviceD1: root::_DEVICE_POWER_STATE = 2;
    pub const _DEVICE_POWER_STATE_PowerDeviceD2: root::_DEVICE_POWER_STATE = 3;
    pub const _DEVICE_POWER_STATE_PowerDeviceD3: root::_DEVICE_POWER_STATE = 4;
    pub const _DEVICE_POWER_STATE_PowerDeviceMaximum: root::_DEVICE_POWER_STATE = 5;
    pub type _DEVICE_POWER_STATE = i32;
    pub use self::super::root::_DEVICE_POWER_STATE as DEVICE_POWER_STATE;
    pub type PDEVICE_POWER_STATE = *mut root::_DEVICE_POWER_STATE;
    pub const _MONITOR_DISPLAY_STATE_PowerMonitorOff: root::_MONITOR_DISPLAY_STATE = 0;
    pub const _MONITOR_DISPLAY_STATE_PowerMonitorOn: root::_MONITOR_DISPLAY_STATE = 1;
    pub const _MONITOR_DISPLAY_STATE_PowerMonitorDim: root::_MONITOR_DISPLAY_STATE = 2;
    pub type _MONITOR_DISPLAY_STATE = i32;
    pub use self::super::root::_MONITOR_DISPLAY_STATE as MONITOR_DISPLAY_STATE;
    pub type PMONITOR_DISPLAY_STATE = *mut root::_MONITOR_DISPLAY_STATE;
    pub const _USER_ACTIVITY_PRESENCE_PowerUserPresent: root::_USER_ACTIVITY_PRESENCE = 0;
    pub const _USER_ACTIVITY_PRESENCE_PowerUserNotPresent: root::_USER_ACTIVITY_PRESENCE = 1;
    pub const _USER_ACTIVITY_PRESENCE_PowerUserInactive: root::_USER_ACTIVITY_PRESENCE = 2;
    pub const _USER_ACTIVITY_PRESENCE_PowerUserMaximum: root::_USER_ACTIVITY_PRESENCE = 3;
    pub const _USER_ACTIVITY_PRESENCE_PowerUserInvalid: root::_USER_ACTIVITY_PRESENCE = 3;
    pub type _USER_ACTIVITY_PRESENCE = i32;
    pub use self::super::root::_USER_ACTIVITY_PRESENCE as USER_ACTIVITY_PRESENCE;
    pub type PUSER_ACTIVITY_PRESENCE = *mut root::_USER_ACTIVITY_PRESENCE;
    pub type EXECUTION_STATE = u32;
    pub type PEXECUTION_STATE = *mut u32;
    pub const LATENCY_TIME_LT_DONT_CARE: root::LATENCY_TIME = 0;
    pub const LATENCY_TIME_LT_LOWEST_LATENCY: root::LATENCY_TIME = 1;
    pub type LATENCY_TIME = i32;
    pub const _POWER_REQUEST_TYPE_PowerRequestDisplayRequired: root::_POWER_REQUEST_TYPE = 0;
    pub const _POWER_REQUEST_TYPE_PowerRequestSystemRequired: root::_POWER_REQUEST_TYPE = 1;
    pub const _POWER_REQUEST_TYPE_PowerRequestAwayModeRequired: root::_POWER_REQUEST_TYPE = 2;
    pub const _POWER_REQUEST_TYPE_PowerRequestExecutionRequired: root::_POWER_REQUEST_TYPE = 3;
    pub type _POWER_REQUEST_TYPE = i32;
    pub use self::super::root::_POWER_REQUEST_TYPE as POWER_REQUEST_TYPE;
    pub type PPOWER_REQUEST_TYPE = *mut root::_POWER_REQUEST_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CM_Power_Data_s {
        pub PD_Size: u32,
        pub PD_MostRecentPowerState: root::DEVICE_POWER_STATE,
        pub PD_Capabilities: u32,
        pub PD_D1Latency: u32,
        pub PD_D2Latency: u32,
        pub PD_D3Latency: u32,
        pub PD_PowerStateMapping: [root::DEVICE_POWER_STATE; 7usize],
        pub PD_DeepestSystemWake: root::SYSTEM_POWER_STATE,
    }
    pub type CM_POWER_DATA = root::CM_Power_Data_s;
    pub type PCM_POWER_DATA = *mut root::CM_Power_Data_s;
    pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyAc: root::POWER_INFORMATION_LEVEL = 0;
    pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyDc: root::POWER_INFORMATION_LEVEL = 1;
    pub const POWER_INFORMATION_LEVEL_VerifySystemPolicyAc: root::POWER_INFORMATION_LEVEL = 2;
    pub const POWER_INFORMATION_LEVEL_VerifySystemPolicyDc: root::POWER_INFORMATION_LEVEL = 3;
    pub const POWER_INFORMATION_LEVEL_SystemPowerCapabilities: root::POWER_INFORMATION_LEVEL = 4;
    pub const POWER_INFORMATION_LEVEL_SystemBatteryState: root::POWER_INFORMATION_LEVEL = 5;
    pub const POWER_INFORMATION_LEVEL_SystemPowerStateHandler: root::POWER_INFORMATION_LEVEL = 6;
    pub const POWER_INFORMATION_LEVEL_ProcessorStateHandler: root::POWER_INFORMATION_LEVEL = 7;
    pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyCurrent: root::POWER_INFORMATION_LEVEL = 8;
    pub const POWER_INFORMATION_LEVEL_AdministratorPowerPolicy: root::POWER_INFORMATION_LEVEL = 9;
    pub const POWER_INFORMATION_LEVEL_SystemReserveHiberFile: root::POWER_INFORMATION_LEVEL = 10;
    pub const POWER_INFORMATION_LEVEL_ProcessorInformation: root::POWER_INFORMATION_LEVEL = 11;
    pub const POWER_INFORMATION_LEVEL_SystemPowerInformation: root::POWER_INFORMATION_LEVEL = 12;
    pub const POWER_INFORMATION_LEVEL_ProcessorStateHandler2: root::POWER_INFORMATION_LEVEL = 13;
    pub const POWER_INFORMATION_LEVEL_LastWakeTime: root::POWER_INFORMATION_LEVEL = 14;
    pub const POWER_INFORMATION_LEVEL_LastSleepTime: root::POWER_INFORMATION_LEVEL = 15;
    pub const POWER_INFORMATION_LEVEL_SystemExecutionState: root::POWER_INFORMATION_LEVEL = 16;
    pub const POWER_INFORMATION_LEVEL_SystemPowerStateNotifyHandler: root::POWER_INFORMATION_LEVEL =
        17;
    pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyAc: root::POWER_INFORMATION_LEVEL = 18;
    pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyDc: root::POWER_INFORMATION_LEVEL = 19;
    pub const POWER_INFORMATION_LEVEL_VerifyProcessorPowerPolicyAc: root::POWER_INFORMATION_LEVEL =
        20;
    pub const POWER_INFORMATION_LEVEL_VerifyProcessorPowerPolicyDc: root::POWER_INFORMATION_LEVEL =
        21;
    pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyCurrent: root::POWER_INFORMATION_LEVEL =
        22;
    pub const POWER_INFORMATION_LEVEL_SystemPowerStateLogging: root::POWER_INFORMATION_LEVEL = 23;
    pub const POWER_INFORMATION_LEVEL_SystemPowerLoggingEntry: root::POWER_INFORMATION_LEVEL = 24;
    pub const POWER_INFORMATION_LEVEL_SetPowerSettingValue: root::POWER_INFORMATION_LEVEL = 25;
    pub const POWER_INFORMATION_LEVEL_NotifyUserPowerSetting: root::POWER_INFORMATION_LEVEL = 26;
    pub const POWER_INFORMATION_LEVEL_PowerInformationLevelUnused0: root::POWER_INFORMATION_LEVEL =
        27;
    pub const POWER_INFORMATION_LEVEL_SystemMonitorHiberBootPowerOff:
        root::POWER_INFORMATION_LEVEL = 28;
    pub const POWER_INFORMATION_LEVEL_SystemVideoState: root::POWER_INFORMATION_LEVEL = 29;
    pub const POWER_INFORMATION_LEVEL_TraceApplicationPowerMessage: root::POWER_INFORMATION_LEVEL =
        30;
    pub const POWER_INFORMATION_LEVEL_TraceApplicationPowerMessageEnd:
        root::POWER_INFORMATION_LEVEL = 31;
    pub const POWER_INFORMATION_LEVEL_ProcessorPerfStates: root::POWER_INFORMATION_LEVEL = 32;
    pub const POWER_INFORMATION_LEVEL_ProcessorIdleStates: root::POWER_INFORMATION_LEVEL = 33;
    pub const POWER_INFORMATION_LEVEL_ProcessorCap: root::POWER_INFORMATION_LEVEL = 34;
    pub const POWER_INFORMATION_LEVEL_SystemWakeSource: root::POWER_INFORMATION_LEVEL = 35;
    pub const POWER_INFORMATION_LEVEL_SystemHiberFileInformation: root::POWER_INFORMATION_LEVEL =
        36;
    pub const POWER_INFORMATION_LEVEL_TraceServicePowerMessage: root::POWER_INFORMATION_LEVEL = 37;
    pub const POWER_INFORMATION_LEVEL_ProcessorLoad: root::POWER_INFORMATION_LEVEL = 38;
    pub const POWER_INFORMATION_LEVEL_PowerShutdownNotification: root::POWER_INFORMATION_LEVEL = 39;
    pub const POWER_INFORMATION_LEVEL_MonitorCapabilities: root::POWER_INFORMATION_LEVEL = 40;
    pub const POWER_INFORMATION_LEVEL_SessionPowerInit: root::POWER_INFORMATION_LEVEL = 41;
    pub const POWER_INFORMATION_LEVEL_SessionDisplayState: root::POWER_INFORMATION_LEVEL = 42;
    pub const POWER_INFORMATION_LEVEL_PowerRequestCreate: root::POWER_INFORMATION_LEVEL = 43;
    pub const POWER_INFORMATION_LEVEL_PowerRequestAction: root::POWER_INFORMATION_LEVEL = 44;
    pub const POWER_INFORMATION_LEVEL_GetPowerRequestList: root::POWER_INFORMATION_LEVEL = 45;
    pub const POWER_INFORMATION_LEVEL_ProcessorInformationEx: root::POWER_INFORMATION_LEVEL = 46;
    pub const POWER_INFORMATION_LEVEL_NotifyUserModeLegacyPowerEvent:
        root::POWER_INFORMATION_LEVEL = 47;
    pub const POWER_INFORMATION_LEVEL_GroupPark: root::POWER_INFORMATION_LEVEL = 48;
    pub const POWER_INFORMATION_LEVEL_ProcessorIdleDomains: root::POWER_INFORMATION_LEVEL = 49;
    pub const POWER_INFORMATION_LEVEL_WakeTimerList: root::POWER_INFORMATION_LEVEL = 50;
    pub const POWER_INFORMATION_LEVEL_SystemHiberFileSize: root::POWER_INFORMATION_LEVEL = 51;
    pub const POWER_INFORMATION_LEVEL_ProcessorIdleStatesHv: root::POWER_INFORMATION_LEVEL = 52;
    pub const POWER_INFORMATION_LEVEL_ProcessorPerfStatesHv: root::POWER_INFORMATION_LEVEL = 53;
    pub const POWER_INFORMATION_LEVEL_ProcessorPerfCapHv: root::POWER_INFORMATION_LEVEL = 54;
    pub const POWER_INFORMATION_LEVEL_ProcessorSetIdle: root::POWER_INFORMATION_LEVEL = 55;
    pub const POWER_INFORMATION_LEVEL_LogicalProcessorIdling: root::POWER_INFORMATION_LEVEL = 56;
    pub const POWER_INFORMATION_LEVEL_UserPresence: root::POWER_INFORMATION_LEVEL = 57;
    pub const POWER_INFORMATION_LEVEL_PowerSettingNotificationName: root::POWER_INFORMATION_LEVEL =
        58;
    pub const POWER_INFORMATION_LEVEL_GetPowerSettingValue: root::POWER_INFORMATION_LEVEL = 59;
    pub const POWER_INFORMATION_LEVEL_IdleResiliency: root::POWER_INFORMATION_LEVEL = 60;
    pub const POWER_INFORMATION_LEVEL_SessionRITState: root::POWER_INFORMATION_LEVEL = 61;
    pub const POWER_INFORMATION_LEVEL_SessionConnectNotification: root::POWER_INFORMATION_LEVEL =
        62;
    pub const POWER_INFORMATION_LEVEL_SessionPowerCleanup: root::POWER_INFORMATION_LEVEL = 63;
    pub const POWER_INFORMATION_LEVEL_SessionLockState: root::POWER_INFORMATION_LEVEL = 64;
    pub const POWER_INFORMATION_LEVEL_SystemHiberbootState: root::POWER_INFORMATION_LEVEL = 65;
    pub const POWER_INFORMATION_LEVEL_PlatformInformation: root::POWER_INFORMATION_LEVEL = 66;
    pub const POWER_INFORMATION_LEVEL_PdcInvocation: root::POWER_INFORMATION_LEVEL = 67;
    pub const POWER_INFORMATION_LEVEL_MonitorInvocation: root::POWER_INFORMATION_LEVEL = 68;
    pub const POWER_INFORMATION_LEVEL_FirmwareTableInformationRegistered:
        root::POWER_INFORMATION_LEVEL = 69;
    pub const POWER_INFORMATION_LEVEL_SetShutdownSelectedTime: root::POWER_INFORMATION_LEVEL = 70;
    pub const POWER_INFORMATION_LEVEL_SuspendResumeInvocation: root::POWER_INFORMATION_LEVEL = 71;
    pub const POWER_INFORMATION_LEVEL_PlmPowerRequestCreate: root::POWER_INFORMATION_LEVEL = 72;
    pub const POWER_INFORMATION_LEVEL_ScreenOff: root::POWER_INFORMATION_LEVEL = 73;
    pub const POWER_INFORMATION_LEVEL_CsDeviceNotification: root::POWER_INFORMATION_LEVEL = 74;
    pub const POWER_INFORMATION_LEVEL_PlatformRole: root::POWER_INFORMATION_LEVEL = 75;
    pub const POWER_INFORMATION_LEVEL_LastResumePerformance: root::POWER_INFORMATION_LEVEL = 76;
    pub const POWER_INFORMATION_LEVEL_DisplayBurst: root::POWER_INFORMATION_LEVEL = 77;
    pub const POWER_INFORMATION_LEVEL_ExitLatencySamplingPercentage: root::POWER_INFORMATION_LEVEL =
        78;
    pub const POWER_INFORMATION_LEVEL_RegisterSpmPowerSettings: root::POWER_INFORMATION_LEVEL = 79;
    pub const POWER_INFORMATION_LEVEL_PlatformIdleStates: root::POWER_INFORMATION_LEVEL = 80;
    pub const POWER_INFORMATION_LEVEL_ProcessorIdleVeto: root::POWER_INFORMATION_LEVEL = 81;
    pub const POWER_INFORMATION_LEVEL_PlatformIdleVeto: root::POWER_INFORMATION_LEVEL = 82;
    pub const POWER_INFORMATION_LEVEL_SystemBatteryStatePrecise: root::POWER_INFORMATION_LEVEL = 83;
    pub const POWER_INFORMATION_LEVEL_ThermalEvent: root::POWER_INFORMATION_LEVEL = 84;
    pub const POWER_INFORMATION_LEVEL_PowerRequestActionInternal: root::POWER_INFORMATION_LEVEL =
        85;
    pub const POWER_INFORMATION_LEVEL_BatteryDeviceState: root::POWER_INFORMATION_LEVEL = 86;
    pub const POWER_INFORMATION_LEVEL_PowerInformationInternal: root::POWER_INFORMATION_LEVEL = 87;
    pub const POWER_INFORMATION_LEVEL_ThermalStandby: root::POWER_INFORMATION_LEVEL = 88;
    pub const POWER_INFORMATION_LEVEL_SystemHiberFileType: root::POWER_INFORMATION_LEVEL = 89;
    pub const POWER_INFORMATION_LEVEL_PhysicalPowerButtonPress: root::POWER_INFORMATION_LEVEL = 90;
    pub const POWER_INFORMATION_LEVEL_QueryPotentialDripsConstraint: root::POWER_INFORMATION_LEVEL =
        91;
    pub const POWER_INFORMATION_LEVEL_EnergyTrackerCreate: root::POWER_INFORMATION_LEVEL = 92;
    pub const POWER_INFORMATION_LEVEL_EnergyTrackerQuery: root::POWER_INFORMATION_LEVEL = 93;
    pub const POWER_INFORMATION_LEVEL_UpdateBlackBoxRecorder: root::POWER_INFORMATION_LEVEL = 94;
    pub const POWER_INFORMATION_LEVEL_SessionAllowExternalDmaDevices:
        root::POWER_INFORMATION_LEVEL = 95;
    pub const POWER_INFORMATION_LEVEL_PowerInformationLevelMaximum: root::POWER_INFORMATION_LEVEL =
        96;
    pub type POWER_INFORMATION_LEVEL = i32;
    pub const POWER_USER_PRESENCE_TYPE_UserNotPresent: root::POWER_USER_PRESENCE_TYPE = 0;
    pub const POWER_USER_PRESENCE_TYPE_UserPresent: root::POWER_USER_PRESENCE_TYPE = 1;
    pub const POWER_USER_PRESENCE_TYPE_UserUnknown: root::POWER_USER_PRESENCE_TYPE = 255;
    pub type POWER_USER_PRESENCE_TYPE = i32;
    pub type PPOWER_USER_PRESENCE_TYPE = *mut root::POWER_USER_PRESENCE_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_USER_PRESENCE {
        pub UserPresence: root::POWER_USER_PRESENCE_TYPE,
    }
    pub type POWER_USER_PRESENCE = root::_POWER_USER_PRESENCE;
    pub type PPOWER_USER_PRESENCE = *mut root::_POWER_USER_PRESENCE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_SESSION_CONNECT {
        pub Connected: root::BOOLEAN,
        pub Console: root::BOOLEAN,
    }
    pub type POWER_SESSION_CONNECT = root::_POWER_SESSION_CONNECT;
    pub type PPOWER_SESSION_CONNECT = *mut root::_POWER_SESSION_CONNECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_SESSION_TIMEOUTS {
        pub InputTimeout: u32,
        pub DisplayTimeout: u32,
    }
    pub type POWER_SESSION_TIMEOUTS = root::_POWER_SESSION_TIMEOUTS;
    pub type PPOWER_SESSION_TIMEOUTS = *mut root::_POWER_SESSION_TIMEOUTS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_SESSION_RIT_STATE {
        pub Active: root::BOOLEAN,
        pub LastInputTime: u32,
    }
    pub type POWER_SESSION_RIT_STATE = root::_POWER_SESSION_RIT_STATE;
    pub type PPOWER_SESSION_RIT_STATE = *mut root::_POWER_SESSION_RIT_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_SESSION_WINLOGON {
        pub SessionId: u32,
        pub Console: root::BOOLEAN,
        pub Locked: root::BOOLEAN,
    }
    pub type POWER_SESSION_WINLOGON = root::_POWER_SESSION_WINLOGON;
    pub type PPOWER_SESSION_WINLOGON = *mut root::_POWER_SESSION_WINLOGON;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
        pub IsAllowed: root::BOOLEAN,
    }
    pub type POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES =
        root::_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
    pub type PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES =
        *mut root::_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_IDLE_RESILIENCY {
        pub CoalescingTimeout: u32,
        pub IdleResiliencyPeriod: u32,
    }
    pub type POWER_IDLE_RESILIENCY = root::_POWER_IDLE_RESILIENCY;
    pub type PPOWER_IDLE_RESILIENCY = *mut root::_POWER_IDLE_RESILIENCY;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUnknown:
        root::POWER_MONITOR_REQUEST_REASON = 0;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPowerButton:
        root::POWER_MONITOR_REQUEST_REASON = 1;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonRemoteConnection:
        root::POWER_MONITOR_REQUEST_REASON = 2;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonScMonitorpower:
        root::POWER_MONITOR_REQUEST_REASON = 3;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInput:
        root::POWER_MONITOR_REQUEST_REASON = 4;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAcDcDisplayBurst:
        root::POWER_MONITOR_REQUEST_REASON = 5;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserDisplayBurst:
        root::POWER_MONITOR_REQUEST_REASON = 6;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPoSetSystemState:
        root::POWER_MONITOR_REQUEST_REASON = 7;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSetThreadExecutionState:
        root::POWER_MONITOR_REQUEST_REASON = 8;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonFullWake:
        root::POWER_MONITOR_REQUEST_REASON = 9;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSessionUnlock:
        root::POWER_MONITOR_REQUEST_REASON = 10;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonScreenOffRequest:
        root::POWER_MONITOR_REQUEST_REASON = 11;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonIdleTimeout:
        root::POWER_MONITOR_REQUEST_REASON = 12;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPolicyChange:
        root::POWER_MONITOR_REQUEST_REASON = 13;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSleepButton:
        root::POWER_MONITOR_REQUEST_REASON = 14;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonLid:
        root::POWER_MONITOR_REQUEST_REASON = 15;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryCountChange:
        root::POWER_MONITOR_REQUEST_REASON = 16;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonGracePeriod:
        root::POWER_MONITOR_REQUEST_REASON = 17;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPnP:
        root::POWER_MONITOR_REQUEST_REASON = 18;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDP:
        root::POWER_MONITOR_REQUEST_REASON = 19;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSxTransition:
        root::POWER_MONITOR_REQUEST_REASON = 20;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSystemIdle:
        root::POWER_MONITOR_REQUEST_REASON = 21;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonNearProximity:
        root::POWER_MONITOR_REQUEST_REASON = 22;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonThermalStandby:
        root::POWER_MONITOR_REQUEST_REASON = 23;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumePdc:
        root::POWER_MONITOR_REQUEST_REASON = 24;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumeS4:
        root::POWER_MONITOR_REQUEST_REASON = 25;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonTerminal:
        root::POWER_MONITOR_REQUEST_REASON = 26;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignal:
        root::POWER_MONITOR_REQUEST_REASON = 27;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAcDcDisplayBurstSuppressed:
        root::POWER_MONITOR_REQUEST_REASON = 28;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSystemStateEntered:
        root::POWER_MONITOR_REQUEST_REASON = 29;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonWinrt:
        root::POWER_MONITOR_REQUEST_REASON = 30;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputKeyboard:
        root::POWER_MONITOR_REQUEST_REASON = 31;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputMouse:
        root::POWER_MONITOR_REQUEST_REASON = 32;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputTouch:
        root::POWER_MONITOR_REQUEST_REASON = 33;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputPen:
        root::POWER_MONITOR_REQUEST_REASON = 34;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputAccelerometer:
        root::POWER_MONITOR_REQUEST_REASON = 35;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputHid:
        root::POWER_MONITOR_REQUEST_REASON = 36;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputPoUserPresent:
        root::POWER_MONITOR_REQUEST_REASON = 37;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputSessionSwitch:
        root::POWER_MONITOR_REQUEST_REASON = 38;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputInitialization:
        root::POWER_MONITOR_REQUEST_REASON = 39;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalWindowsMobilePwrNotif:
        root::POWER_MONITOR_REQUEST_REASON = 40;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalWindowsMobileShell:
        root::POWER_MONITOR_REQUEST_REASON = 41;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalHeyCortana:
        root::POWER_MONITOR_REQUEST_REASON = 42;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalHolographicShell:
        root::POWER_MONITOR_REQUEST_REASON = 43;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalFingerprint:
        root::POWER_MONITOR_REQUEST_REASON = 44;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDirectedDrips:
        root::POWER_MONITOR_REQUEST_REASON = 45;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDim:
        root::POWER_MONITOR_REQUEST_REASON = 46;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBuiltinPanel:
        root::POWER_MONITOR_REQUEST_REASON = 47;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDisplayRequiredUnDim:
        root::POWER_MONITOR_REQUEST_REASON = 48;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryCountChangeSuppressed:
        root::POWER_MONITOR_REQUEST_REASON = 49;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumeModernStandby:
        root::POWER_MONITOR_REQUEST_REASON = 50;
    pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonMax:
        root::POWER_MONITOR_REQUEST_REASON = 51;
    pub type POWER_MONITOR_REQUEST_REASON = i32;
    pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeOff: root::_POWER_MONITOR_REQUEST_TYPE =
        0;
    pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeOnAndPresent:
        root::_POWER_MONITOR_REQUEST_TYPE = 1;
    pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeToggleOn:
        root::_POWER_MONITOR_REQUEST_TYPE = 2;
    pub type _POWER_MONITOR_REQUEST_TYPE = i32;
    pub use self::super::root::_POWER_MONITOR_REQUEST_TYPE as POWER_MONITOR_REQUEST_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_MONITOR_INVOCATION {
        pub Console: root::BOOLEAN,
        pub RequestReason: root::POWER_MONITOR_REQUEST_REASON,
    }
    pub type POWER_MONITOR_INVOCATION = root::_POWER_MONITOR_INVOCATION;
    pub type PPOWER_MONITOR_INVOCATION = *mut root::_POWER_MONITOR_INVOCATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RESUME_PERFORMANCE {
        pub PostTimeMs: u32,
        pub TotalResumeTimeMs: root::ULONGLONG,
        pub ResumeCompleteTimestamp: root::ULONGLONG,
    }
    pub type RESUME_PERFORMANCE = root::_RESUME_PERFORMANCE;
    pub type PRESUME_PERFORMANCE = *mut root::_RESUME_PERFORMANCE;
    pub const SYSTEM_POWER_CONDITION_PoAc: root::SYSTEM_POWER_CONDITION = 0;
    pub const SYSTEM_POWER_CONDITION_PoDc: root::SYSTEM_POWER_CONDITION = 1;
    pub const SYSTEM_POWER_CONDITION_PoHot: root::SYSTEM_POWER_CONDITION = 2;
    pub const SYSTEM_POWER_CONDITION_PoConditionMaximum: root::SYSTEM_POWER_CONDITION = 3;
    pub type SYSTEM_POWER_CONDITION = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SET_POWER_SETTING_VALUE {
        pub Version: u32,
        pub Guid: root::GUID,
        pub PowerCondition: root::SYSTEM_POWER_CONDITION,
        pub DataLength: u32,
        pub Data: [u8; 1usize],
    }
    pub type PSET_POWER_SETTING_VALUE = *mut root::SET_POWER_SETTING_VALUE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NOTIFY_USER_POWER_SETTING {
        pub Guid: root::GUID,
    }
    pub type PNOTIFY_USER_POWER_SETTING = *mut root::NOTIFY_USER_POWER_SETTING;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _APPLICATIONLAUNCH_SETTING_VALUE {
        pub ActivationTime: root::LARGE_INTEGER,
        pub Flags: u32,
        pub ButtonInstanceID: u32,
    }
    pub type APPLICATIONLAUNCH_SETTING_VALUE = root::_APPLICATIONLAUNCH_SETTING_VALUE;
    pub type PAPPLICATIONLAUNCH_SETTING_VALUE = *mut root::_APPLICATIONLAUNCH_SETTING_VALUE;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleUnspecified: root::_POWER_PLATFORM_ROLE = 0;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleDesktop: root::_POWER_PLATFORM_ROLE = 1;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleMobile: root::_POWER_PLATFORM_ROLE = 2;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleWorkstation: root::_POWER_PLATFORM_ROLE = 3;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleEnterpriseServer: root::_POWER_PLATFORM_ROLE = 4;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleSOHOServer: root::_POWER_PLATFORM_ROLE = 5;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleAppliancePC: root::_POWER_PLATFORM_ROLE = 6;
    pub const _POWER_PLATFORM_ROLE_PlatformRolePerformanceServer: root::_POWER_PLATFORM_ROLE = 7;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleSlate: root::_POWER_PLATFORM_ROLE = 8;
    pub const _POWER_PLATFORM_ROLE_PlatformRoleMaximum: root::_POWER_PLATFORM_ROLE = 9;
    pub type _POWER_PLATFORM_ROLE = i32;
    pub use self::super::root::_POWER_PLATFORM_ROLE as POWER_PLATFORM_ROLE;
    pub type PPOWER_PLATFORM_ROLE = *mut root::_POWER_PLATFORM_ROLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POWER_PLATFORM_INFORMATION {
        pub AoAc: root::BOOLEAN,
    }
    pub type POWER_PLATFORM_INFORMATION = root::_POWER_PLATFORM_INFORMATION;
    pub type PPOWER_PLATFORM_INFORMATION = *mut root::_POWER_PLATFORM_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct BATTERY_REPORTING_SCALE {
        pub Granularity: u32,
        pub Capacity: u32,
    }
    pub type PBATTERY_REPORTING_SCALE = *mut root::BATTERY_REPORTING_SCALE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_LEGACY_PERFSTATE {
        pub Frequency: u32,
        pub Flags: u32,
        pub PercentFrequency: u32,
    }
    pub type PPPM_WMI_LEGACY_PERFSTATE = *mut root::PPM_WMI_LEGACY_PERFSTATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_IDLE_STATE {
        pub Latency: u32,
        pub Power: u32,
        pub TimeCheck: u32,
        pub PromotePercent: u8,
        pub DemotePercent: u8,
        pub StateType: u8,
        pub Reserved: u8,
        pub StateFlags: u32,
        pub Context: u32,
        pub IdleHandler: u32,
        pub Reserved1: u32,
    }
    pub type PPPM_WMI_IDLE_STATE = *mut root::PPM_WMI_IDLE_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_IDLE_STATES {
        pub Type: u32,
        pub Count: u32,
        pub TargetState: u32,
        pub OldState: u32,
        pub TargetProcessors: root::DWORD64,
        pub State: [root::PPM_WMI_IDLE_STATE; 1usize],
    }
    pub type PPPM_WMI_IDLE_STATES = *mut root::PPM_WMI_IDLE_STATES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_IDLE_STATES_EX {
        pub Type: u32,
        pub Count: u32,
        pub TargetState: u32,
        pub OldState: u32,
        pub TargetProcessors: root::PVOID,
        pub State: [root::PPM_WMI_IDLE_STATE; 1usize],
    }
    pub type PPPM_WMI_IDLE_STATES_EX = *mut root::PPM_WMI_IDLE_STATES_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_PERF_STATE {
        pub Frequency: u32,
        pub Power: u32,
        pub PercentFrequency: u8,
        pub IncreaseLevel: u8,
        pub DecreaseLevel: u8,
        pub Type: u8,
        pub IncreaseTime: u32,
        pub DecreaseTime: u32,
        pub Control: root::DWORD64,
        pub Status: root::DWORD64,
        pub HitCount: u32,
        pub Reserved1: u32,
        pub Reserved2: root::DWORD64,
        pub Reserved3: root::DWORD64,
    }
    pub type PPPM_WMI_PERF_STATE = *mut root::PPM_WMI_PERF_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_PERF_STATES {
        pub Count: u32,
        pub MaxFrequency: u32,
        pub CurrentState: u32,
        pub MaxPerfState: u32,
        pub MinPerfState: u32,
        pub LowestPerfState: u32,
        pub ThermalConstraint: u32,
        pub BusyAdjThreshold: u8,
        pub PolicyType: u8,
        pub Type: u8,
        pub Reserved: u8,
        pub TimerInterval: u32,
        pub TargetProcessors: root::DWORD64,
        pub PStateHandler: u32,
        pub PStateContext: u32,
        pub TStateHandler: u32,
        pub TStateContext: u32,
        pub FeedbackHandler: u32,
        pub Reserved1: u32,
        pub Reserved2: root::DWORD64,
        pub State: [root::PPM_WMI_PERF_STATE; 1usize],
    }
    pub type PPPM_WMI_PERF_STATES = *mut root::PPM_WMI_PERF_STATES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_WMI_PERF_STATES_EX {
        pub Count: u32,
        pub MaxFrequency: u32,
        pub CurrentState: u32,
        pub MaxPerfState: u32,
        pub MinPerfState: u32,
        pub LowestPerfState: u32,
        pub ThermalConstraint: u32,
        pub BusyAdjThreshold: u8,
        pub PolicyType: u8,
        pub Type: u8,
        pub Reserved: u8,
        pub TimerInterval: u32,
        pub TargetProcessors: root::PVOID,
        pub PStateHandler: u32,
        pub PStateContext: u32,
        pub TStateHandler: u32,
        pub TStateContext: u32,
        pub FeedbackHandler: u32,
        pub Reserved1: u32,
        pub Reserved2: root::DWORD64,
        pub State: [root::PPM_WMI_PERF_STATE; 1usize],
    }
    pub type PPPM_WMI_PERF_STATES_EX = *mut root::PPM_WMI_PERF_STATES_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_IDLE_STATE_ACCOUNTING {
        pub IdleTransitions: u32,
        pub FailedTransitions: u32,
        pub InvalidBucketIndex: u32,
        pub TotalTime: root::DWORD64,
        pub IdleTimeBuckets: [u32; 6usize],
    }
    pub type PPPM_IDLE_STATE_ACCOUNTING = *mut root::PPM_IDLE_STATE_ACCOUNTING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_IDLE_ACCOUNTING {
        pub StateCount: u32,
        pub TotalTransitions: u32,
        pub ResetCount: u32,
        pub StartTime: root::DWORD64,
        pub State: [root::PPM_IDLE_STATE_ACCOUNTING; 1usize],
    }
    pub type PPPM_IDLE_ACCOUNTING = *mut root::PPM_IDLE_ACCOUNTING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_IDLE_STATE_BUCKET_EX {
        pub TotalTimeUs: root::DWORD64,
        pub MinTimeUs: u32,
        pub MaxTimeUs: u32,
        pub Count: u32,
    }
    pub type PPPM_IDLE_STATE_BUCKET_EX = *mut root::PPM_IDLE_STATE_BUCKET_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_IDLE_STATE_ACCOUNTING_EX {
        pub TotalTime: root::DWORD64,
        pub IdleTransitions: u32,
        pub FailedTransitions: u32,
        pub InvalidBucketIndex: u32,
        pub MinTimeUs: u32,
        pub MaxTimeUs: u32,
        pub CancelledTransitions: u32,
        pub IdleTimeBuckets: [root::PPM_IDLE_STATE_BUCKET_EX; 16usize],
    }
    pub type PPPM_IDLE_STATE_ACCOUNTING_EX = *mut root::PPM_IDLE_STATE_ACCOUNTING_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_IDLE_ACCOUNTING_EX {
        pub StateCount: u32,
        pub TotalTransitions: u32,
        pub ResetCount: u32,
        pub AbortCount: u32,
        pub StartTime: root::DWORD64,
        pub State: [root::PPM_IDLE_STATE_ACCOUNTING_EX; 1usize],
    }
    pub type PPPM_IDLE_ACCOUNTING_EX = *mut root::PPM_IDLE_ACCOUNTING_EX;
    extern "C" {
        pub static PPM_PERFSTATE_CHANGE_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_PERFSTATE_DOMAIN_CHANGE_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_IDLESTATE_CHANGE_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_PERFSTATES_DATA_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_IDLESTATES_DATA_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_IDLE_ACCOUNTING_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_IDLE_ACCOUNTING_EX_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_THERMALCONSTRAINT_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_PERFMON_PERFSTATE_GUID: root::GUID;
    }
    extern "C" {
        pub static PPM_THERMAL_POLICY_CHANGE_GUID: root::GUID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_PERFSTATE_EVENT {
        pub State: u32,
        pub Status: u32,
        pub Latency: u32,
        pub Speed: u32,
        pub Processor: u32,
    }
    pub type PPPM_PERFSTATE_EVENT = *mut root::PPM_PERFSTATE_EVENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_PERFSTATE_DOMAIN_EVENT {
        pub State: u32,
        pub Latency: u32,
        pub Speed: u32,
        pub Processors: root::DWORD64,
    }
    pub type PPPM_PERFSTATE_DOMAIN_EVENT = *mut root::PPM_PERFSTATE_DOMAIN_EVENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_IDLESTATE_EVENT {
        pub NewState: u32,
        pub OldState: u32,
        pub Processors: root::DWORD64,
    }
    pub type PPPM_IDLESTATE_EVENT = *mut root::PPM_IDLESTATE_EVENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_THERMALCHANGE_EVENT {
        pub ThermalConstraint: u32,
        pub Processors: root::DWORD64,
    }
    pub type PPPM_THERMALCHANGE_EVENT = *mut root::PPM_THERMALCHANGE_EVENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PPM_THERMAL_POLICY_EVENT {
        pub Mode: u8,
        pub Processors: root::DWORD64,
    }
    pub type PPPM_THERMAL_POLICY_EVENT = *mut root::PPM_THERMAL_POLICY_EVENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct POWER_ACTION_POLICY {
        pub Action: root::POWER_ACTION,
        pub Flags: u32,
        pub EventCode: u32,
    }
    pub type PPOWER_ACTION_POLICY = *mut root::POWER_ACTION_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SYSTEM_POWER_LEVEL {
        pub Enable: root::BOOLEAN,
        pub Spare: [u8; 3usize],
        pub BatteryLevel: u32,
        pub PowerPolicy: root::POWER_ACTION_POLICY,
        pub MinSystemState: root::SYSTEM_POWER_STATE,
    }
    pub type PSYSTEM_POWER_LEVEL = *mut root::SYSTEM_POWER_LEVEL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_POWER_POLICY {
        pub Revision: u32,
        pub PowerButton: root::POWER_ACTION_POLICY,
        pub SleepButton: root::POWER_ACTION_POLICY,
        pub LidClose: root::POWER_ACTION_POLICY,
        pub LidOpenWake: root::SYSTEM_POWER_STATE,
        pub Reserved: u32,
        pub Idle: root::POWER_ACTION_POLICY,
        pub IdleTimeout: u32,
        pub IdleSensitivity: u8,
        pub DynamicThrottle: u8,
        pub Spare2: [u8; 2usize],
        pub MinSleep: root::SYSTEM_POWER_STATE,
        pub MaxSleep: root::SYSTEM_POWER_STATE,
        pub ReducedLatencySleep: root::SYSTEM_POWER_STATE,
        pub WinLogonFlags: u32,
        pub Spare3: u32,
        pub DozeS4Timeout: u32,
        pub BroadcastCapacityResolution: u32,
        pub DischargePolicy: [root::SYSTEM_POWER_LEVEL; 4usize],
        pub VideoTimeout: u32,
        pub VideoDimDisplay: root::BOOLEAN,
        pub VideoReserved: [u32; 3usize],
        pub SpindownTimeout: u32,
        pub OptimizeForPower: root::BOOLEAN,
        pub FanThrottleTolerance: u8,
        pub ForcedThrottle: u8,
        pub MinThrottle: u8,
        pub OverThrottled: root::POWER_ACTION_POLICY,
    }
    pub type SYSTEM_POWER_POLICY = root::_SYSTEM_POWER_POLICY;
    pub type PSYSTEM_POWER_POLICY = *mut root::_SYSTEM_POWER_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PROCESSOR_IDLESTATE_INFO {
        pub TimeCheck: u32,
        pub DemotePercent: u8,
        pub PromotePercent: u8,
        pub Spare: [u8; 2usize],
    }
    pub type PPROCESSOR_IDLESTATE_INFO = *mut root::PROCESSOR_IDLESTATE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct PROCESSOR_IDLESTATE_POLICY {
        pub Revision: u16,
        pub Flags: root::PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1,
        pub PolicyCount: u32,
        pub Policy: [root::PROCESSOR_IDLESTATE_INFO; 3usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1 {
        pub AsWORD: u16,
        pub __bindgen_anon_1: root::PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
    }
    impl PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn AllowScaling(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_AllowScaling(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Disabled(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_Disabled(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 14u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            AllowScaling: u16,
            Disabled: u16,
            Reserved: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let AllowScaling: u16 = unsafe { ::std::mem::transmute(AllowScaling) };
                AllowScaling as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let Disabled: u16 = unsafe { ::std::mem::transmute(Disabled) };
                Disabled as u64
            });
            __bindgen_bitfield_unit.set(2usize, 14u8, {
                let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PPROCESSOR_IDLESTATE_POLICY = *mut root::PROCESSOR_IDLESTATE_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESSOR_POWER_POLICY_INFO {
        pub TimeCheck: u32,
        pub DemoteLimit: u32,
        pub PromoteLimit: u32,
        pub DemotePercent: u8,
        pub PromotePercent: u8,
        pub Spare: [u8; 2usize],
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _PROCESSOR_POWER_POLICY_INFO {
        #[inline]
        pub fn AllowDemotion(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AllowDemotion(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AllowPromotion(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AllowPromotion(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            AllowDemotion: u32,
            AllowPromotion: u32,
            Reserved: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let AllowDemotion: u32 = unsafe { ::std::mem::transmute(AllowDemotion) };
                AllowDemotion as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let AllowPromotion: u32 = unsafe { ::std::mem::transmute(AllowPromotion) };
                AllowPromotion as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESSOR_POWER_POLICY_INFO = root::_PROCESSOR_POWER_POLICY_INFO;
    pub type PPROCESSOR_POWER_POLICY_INFO = *mut root::_PROCESSOR_POWER_POLICY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESSOR_POWER_POLICY {
        pub Revision: u32,
        pub DynamicThrottle: u8,
        pub Spare: [u8; 3usize],
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub PolicyCount: u32,
        pub Policy: [root::PROCESSOR_POWER_POLICY_INFO; 3usize],
    }
    impl _PROCESSOR_POWER_POLICY {
        #[inline]
        pub fn DisableCStates(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DisableCStates(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            DisableCStates: u32,
            Reserved: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let DisableCStates: u32 = unsafe { ::std::mem::transmute(DisableCStates) };
                DisableCStates as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PROCESSOR_POWER_POLICY = root::_PROCESSOR_POWER_POLICY;
    pub type PPROCESSOR_POWER_POLICY = *mut root::_PROCESSOR_POWER_POLICY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct PROCESSOR_PERFSTATE_POLICY {
        pub Revision: u32,
        pub MaxThrottle: u8,
        pub MinThrottle: u8,
        pub BusyAdjThreshold: u8,
        pub __bindgen_anon_1: root::PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1,
        pub TimeCheck: u32,
        pub IncreaseTime: u32,
        pub DecreaseTime: u32,
        pub IncreasePercent: u32,
        pub DecreasePercent: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1 {
        pub Spare: u8,
        pub Flags: root::PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
        pub AsBYTE: u8,
        pub __bindgen_anon_1:
            root::PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
    }
    impl PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn NoDomainAccounting(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_NoDomainAccounting(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn IncreasePolicy(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
        }
        #[inline]
        pub fn set_IncreasePolicy(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn DecreasePolicy(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
        }
        #[inline]
        pub fn set_DecreasePolicy(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            NoDomainAccounting: u8,
            IncreasePolicy: u8,
            DecreasePolicy: u8,
            Reserved: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let NoDomainAccounting: u8 = unsafe { ::std::mem::transmute(NoDomainAccounting) };
                NoDomainAccounting as u64
            });
            __bindgen_bitfield_unit.set(1usize, 2u8, {
                let IncreasePolicy: u8 = unsafe { ::std::mem::transmute(IncreasePolicy) };
                IncreasePolicy as u64
            });
            __bindgen_bitfield_unit.set(3usize, 2u8, {
                let DecreasePolicy: u8 = unsafe { ::std::mem::transmute(DecreasePolicy) };
                DecreasePolicy as u64
            });
            __bindgen_bitfield_unit.set(5usize, 3u8, {
                let Reserved: u8 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PPROCESSOR_PERFSTATE_POLICY = *mut root::PROCESSOR_PERFSTATE_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ADMINISTRATOR_POWER_POLICY {
        pub MinSleep: root::SYSTEM_POWER_STATE,
        pub MaxSleep: root::SYSTEM_POWER_STATE,
        pub MinVideoTimeout: u32,
        pub MaxVideoTimeout: u32,
        pub MinSpindownTimeout: u32,
        pub MaxSpindownTimeout: u32,
    }
    pub type ADMINISTRATOR_POWER_POLICY = root::_ADMINISTRATOR_POWER_POLICY;
    pub type PADMINISTRATOR_POWER_POLICY = *mut root::_ADMINISTRATOR_POWER_POLICY;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket1GB: root::_HIBERFILE_BUCKET_SIZE = 0;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket2GB: root::_HIBERFILE_BUCKET_SIZE = 1;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket4GB: root::_HIBERFILE_BUCKET_SIZE = 2;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket8GB: root::_HIBERFILE_BUCKET_SIZE = 3;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket16GB: root::_HIBERFILE_BUCKET_SIZE = 4;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket32GB: root::_HIBERFILE_BUCKET_SIZE = 5;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucketUnlimited: root::_HIBERFILE_BUCKET_SIZE = 6;
    pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucketMax: root::_HIBERFILE_BUCKET_SIZE = 7;
    pub type _HIBERFILE_BUCKET_SIZE = i32;
    pub use self::super::root::_HIBERFILE_BUCKET_SIZE as HIBERFILE_BUCKET_SIZE;
    pub type PHIBERFILE_BUCKET_SIZE = *mut root::_HIBERFILE_BUCKET_SIZE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HIBERFILE_BUCKET {
        pub MaxPhysicalMemory: root::DWORD64,
        pub PhysicalMemoryPercent: [u32; 3usize],
    }
    pub type HIBERFILE_BUCKET = root::_HIBERFILE_BUCKET;
    pub type PHIBERFILE_BUCKET = *mut root::_HIBERFILE_BUCKET;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SYSTEM_POWER_CAPABILITIES {
        pub PowerButtonPresent: root::BOOLEAN,
        pub SleepButtonPresent: root::BOOLEAN,
        pub LidPresent: root::BOOLEAN,
        pub SystemS1: root::BOOLEAN,
        pub SystemS2: root::BOOLEAN,
        pub SystemS3: root::BOOLEAN,
        pub SystemS4: root::BOOLEAN,
        pub SystemS5: root::BOOLEAN,
        pub HiberFilePresent: root::BOOLEAN,
        pub FullWake: root::BOOLEAN,
        pub VideoDimPresent: root::BOOLEAN,
        pub ApmPresent: root::BOOLEAN,
        pub UpsPresent: root::BOOLEAN,
        pub ThermalControl: root::BOOLEAN,
        pub ProcessorThrottle: root::BOOLEAN,
        pub ProcessorMinThrottle: u8,
        pub ProcessorMaxThrottle: u8,
        pub FastSystemS4: root::BOOLEAN,
        pub Hiberboot: root::BOOLEAN,
        pub WakeAlarmPresent: root::BOOLEAN,
        pub AoAc: root::BOOLEAN,
        pub DiskSpinDown: root::BOOLEAN,
        pub HiberFileType: u8,
        pub AoAcConnectivitySupported: root::BOOLEAN,
        pub spare3: [u8; 6usize],
        pub SystemBatteriesPresent: root::BOOLEAN,
        pub BatteriesAreShortTerm: root::BOOLEAN,
        pub BatteryScale: [root::BATTERY_REPORTING_SCALE; 3usize],
        pub AcOnLineWake: root::SYSTEM_POWER_STATE,
        pub SoftLidWake: root::SYSTEM_POWER_STATE,
        pub RtcWake: root::SYSTEM_POWER_STATE,
        pub MinDeviceWakeState: root::SYSTEM_POWER_STATE,
        pub DefaultLowLatencyWake: root::SYSTEM_POWER_STATE,
    }
    pub type PSYSTEM_POWER_CAPABILITIES = *mut root::SYSTEM_POWER_CAPABILITIES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SYSTEM_BATTERY_STATE {
        pub AcOnLine: root::BOOLEAN,
        pub BatteryPresent: root::BOOLEAN,
        pub Charging: root::BOOLEAN,
        pub Discharging: root::BOOLEAN,
        pub Spare1: [root::BOOLEAN; 3usize],
        pub Tag: u8,
        pub MaxCapacity: u32,
        pub RemainingCapacity: u32,
        pub Rate: u32,
        pub EstimatedTime: u32,
        pub DefaultAlert1: u32,
        pub DefaultAlert2: u32,
    }
    pub type PSYSTEM_BATTERY_STATE = *mut root::SYSTEM_BATTERY_STATE;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DOS_HEADER {
        pub e_magic: u16,
        pub e_cblp: u16,
        pub e_cp: u16,
        pub e_crlc: u16,
        pub e_cparhdr: u16,
        pub e_minalloc: u16,
        pub e_maxalloc: u16,
        pub e_ss: u16,
        pub e_sp: u16,
        pub e_csum: u16,
        pub e_ip: u16,
        pub e_cs: u16,
        pub e_lfarlc: u16,
        pub e_ovno: u16,
        pub e_res: [u16; 4usize],
        pub e_oemid: u16,
        pub e_oeminfo: u16,
        pub e_res2: [u16; 10usize],
        pub e_lfanew: i32,
    }
    pub type IMAGE_DOS_HEADER = root::_IMAGE_DOS_HEADER;
    pub type PIMAGE_DOS_HEADER = *mut root::_IMAGE_DOS_HEADER;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_OS2_HEADER {
        pub ne_magic: u16,
        pub ne_ver: i8,
        pub ne_rev: i8,
        pub ne_enttab: u16,
        pub ne_cbenttab: u16,
        pub ne_crc: i32,
        pub ne_flags: u16,
        pub ne_autodata: u16,
        pub ne_heap: u16,
        pub ne_stack: u16,
        pub ne_csip: i32,
        pub ne_sssp: i32,
        pub ne_cseg: u16,
        pub ne_cmod: u16,
        pub ne_cbnrestab: u16,
        pub ne_segtab: u16,
        pub ne_rsrctab: u16,
        pub ne_restab: u16,
        pub ne_modtab: u16,
        pub ne_imptab: u16,
        pub ne_nrestab: i32,
        pub ne_cmovent: u16,
        pub ne_align: u16,
        pub ne_cres: u16,
        pub ne_exetyp: u8,
        pub ne_flagsothers: u8,
        pub ne_pretthunks: u16,
        pub ne_psegrefbytes: u16,
        pub ne_swaparea: u16,
        pub ne_expver: u16,
    }
    pub type IMAGE_OS2_HEADER = root::_IMAGE_OS2_HEADER;
    pub type PIMAGE_OS2_HEADER = *mut root::_IMAGE_OS2_HEADER;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_VXD_HEADER {
        pub e32_magic: u16,
        pub e32_border: u8,
        pub e32_worder: u8,
        pub e32_level: u32,
        pub e32_cpu: u16,
        pub e32_os: u16,
        pub e32_ver: u32,
        pub e32_mflags: u32,
        pub e32_mpages: u32,
        pub e32_startobj: u32,
        pub e32_eip: u32,
        pub e32_stackobj: u32,
        pub e32_esp: u32,
        pub e32_pagesize: u32,
        pub e32_lastpagesize: u32,
        pub e32_fixupsize: u32,
        pub e32_fixupsum: u32,
        pub e32_ldrsize: u32,
        pub e32_ldrsum: u32,
        pub e32_objtab: u32,
        pub e32_objcnt: u32,
        pub e32_objmap: u32,
        pub e32_itermap: u32,
        pub e32_rsrctab: u32,
        pub e32_rsrccnt: u32,
        pub e32_restab: u32,
        pub e32_enttab: u32,
        pub e32_dirtab: u32,
        pub e32_dircnt: u32,
        pub e32_fpagetab: u32,
        pub e32_frectab: u32,
        pub e32_impmod: u32,
        pub e32_impmodcnt: u32,
        pub e32_impproc: u32,
        pub e32_pagesum: u32,
        pub e32_datapage: u32,
        pub e32_preload: u32,
        pub e32_nrestab: u32,
        pub e32_cbnrestab: u32,
        pub e32_nressum: u32,
        pub e32_autodata: u32,
        pub e32_debuginfo: u32,
        pub e32_debuglen: u32,
        pub e32_instpreload: u32,
        pub e32_instdemand: u32,
        pub e32_heapsize: u32,
        pub e32_res3: [u8; 12usize],
        pub e32_winresoff: u32,
        pub e32_winreslen: u32,
        pub e32_devid: u16,
        pub e32_ddkver: u16,
    }
    pub type IMAGE_VXD_HEADER = root::_IMAGE_VXD_HEADER;
    pub type PIMAGE_VXD_HEADER = *mut root::_IMAGE_VXD_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_FILE_HEADER {
        pub Machine: u16,
        pub NumberOfSections: u16,
        pub TimeDateStamp: u32,
        pub PointerToSymbolTable: u32,
        pub NumberOfSymbols: u32,
        pub SizeOfOptionalHeader: u16,
        pub Characteristics: u16,
    }
    pub type IMAGE_FILE_HEADER = root::_IMAGE_FILE_HEADER;
    pub type PIMAGE_FILE_HEADER = *mut root::_IMAGE_FILE_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DATA_DIRECTORY {
        pub VirtualAddress: u32,
        pub Size: u32,
    }
    pub type IMAGE_DATA_DIRECTORY = root::_IMAGE_DATA_DIRECTORY;
    pub type PIMAGE_DATA_DIRECTORY = *mut root::_IMAGE_DATA_DIRECTORY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_OPTIONAL_HEADER {
        pub Magic: u16,
        pub MajorLinkerVersion: u8,
        pub MinorLinkerVersion: u8,
        pub SizeOfCode: u32,
        pub SizeOfInitializedData: u32,
        pub SizeOfUninitializedData: u32,
        pub AddressOfEntryPoint: u32,
        pub BaseOfCode: u32,
        pub BaseOfData: u32,
        pub ImageBase: u32,
        pub SectionAlignment: u32,
        pub FileAlignment: u32,
        pub MajorOperatingSystemVersion: u16,
        pub MinorOperatingSystemVersion: u16,
        pub MajorImageVersion: u16,
        pub MinorImageVersion: u16,
        pub MajorSubsystemVersion: u16,
        pub MinorSubsystemVersion: u16,
        pub Win32VersionValue: u32,
        pub SizeOfImage: u32,
        pub SizeOfHeaders: u32,
        pub CheckSum: u32,
        pub Subsystem: u16,
        pub DllCharacteristics: u16,
        pub SizeOfStackReserve: u32,
        pub SizeOfStackCommit: u32,
        pub SizeOfHeapReserve: u32,
        pub SizeOfHeapCommit: u32,
        pub LoaderFlags: u32,
        pub NumberOfRvaAndSizes: u32,
        pub DataDirectory: [root::IMAGE_DATA_DIRECTORY; 16usize],
    }
    pub type IMAGE_OPTIONAL_HEADER32 = root::_IMAGE_OPTIONAL_HEADER;
    pub type PIMAGE_OPTIONAL_HEADER32 = *mut root::_IMAGE_OPTIONAL_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ROM_OPTIONAL_HEADER {
        pub Magic: u16,
        pub MajorLinkerVersion: u8,
        pub MinorLinkerVersion: u8,
        pub SizeOfCode: u32,
        pub SizeOfInitializedData: u32,
        pub SizeOfUninitializedData: u32,
        pub AddressOfEntryPoint: u32,
        pub BaseOfCode: u32,
        pub BaseOfData: u32,
        pub BaseOfBss: u32,
        pub GprMask: u32,
        pub CprMask: [u32; 4usize],
        pub GpValue: u32,
    }
    pub type IMAGE_ROM_OPTIONAL_HEADER = root::_IMAGE_ROM_OPTIONAL_HEADER;
    pub type PIMAGE_ROM_OPTIONAL_HEADER = *mut root::_IMAGE_ROM_OPTIONAL_HEADER;
    #[repr(C, packed(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_OPTIONAL_HEADER64 {
        pub Magic: u16,
        pub MajorLinkerVersion: u8,
        pub MinorLinkerVersion: u8,
        pub SizeOfCode: u32,
        pub SizeOfInitializedData: u32,
        pub SizeOfUninitializedData: u32,
        pub AddressOfEntryPoint: u32,
        pub BaseOfCode: u32,
        pub ImageBase: root::ULONGLONG,
        pub SectionAlignment: u32,
        pub FileAlignment: u32,
        pub MajorOperatingSystemVersion: u16,
        pub MinorOperatingSystemVersion: u16,
        pub MajorImageVersion: u16,
        pub MinorImageVersion: u16,
        pub MajorSubsystemVersion: u16,
        pub MinorSubsystemVersion: u16,
        pub Win32VersionValue: u32,
        pub SizeOfImage: u32,
        pub SizeOfHeaders: u32,
        pub CheckSum: u32,
        pub Subsystem: u16,
        pub DllCharacteristics: u16,
        pub SizeOfStackReserve: root::ULONGLONG,
        pub SizeOfStackCommit: root::ULONGLONG,
        pub SizeOfHeapReserve: root::ULONGLONG,
        pub SizeOfHeapCommit: root::ULONGLONG,
        pub LoaderFlags: u32,
        pub NumberOfRvaAndSizes: u32,
        pub DataDirectory: [root::IMAGE_DATA_DIRECTORY; 16usize],
    }
    pub type IMAGE_OPTIONAL_HEADER64 = root::_IMAGE_OPTIONAL_HEADER64;
    pub type PIMAGE_OPTIONAL_HEADER64 = *mut root::_IMAGE_OPTIONAL_HEADER64;
    pub type IMAGE_OPTIONAL_HEADER = root::IMAGE_OPTIONAL_HEADER64;
    pub type PIMAGE_OPTIONAL_HEADER = root::PIMAGE_OPTIONAL_HEADER64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_NT_HEADERS64 {
        pub Signature: u32,
        pub FileHeader: root::IMAGE_FILE_HEADER,
        pub OptionalHeader: root::IMAGE_OPTIONAL_HEADER64,
    }
    pub type IMAGE_NT_HEADERS64 = root::_IMAGE_NT_HEADERS64;
    pub type PIMAGE_NT_HEADERS64 = *mut root::_IMAGE_NT_HEADERS64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_NT_HEADERS {
        pub Signature: u32,
        pub FileHeader: root::IMAGE_FILE_HEADER,
        pub OptionalHeader: root::IMAGE_OPTIONAL_HEADER32,
    }
    pub type IMAGE_NT_HEADERS32 = root::_IMAGE_NT_HEADERS;
    pub type PIMAGE_NT_HEADERS32 = *mut root::_IMAGE_NT_HEADERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ROM_HEADERS {
        pub FileHeader: root::IMAGE_FILE_HEADER,
        pub OptionalHeader: root::IMAGE_ROM_OPTIONAL_HEADER,
    }
    pub type IMAGE_ROM_HEADERS = root::_IMAGE_ROM_HEADERS;
    pub type PIMAGE_ROM_HEADERS = *mut root::_IMAGE_ROM_HEADERS;
    pub type IMAGE_NT_HEADERS = root::IMAGE_NT_HEADERS64;
    pub type PIMAGE_NT_HEADERS = root::PIMAGE_NT_HEADERS64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ANON_OBJECT_HEADER {
        pub Sig1: u16,
        pub Sig2: u16,
        pub Version: u16,
        pub Machine: u16,
        pub TimeDateStamp: u32,
        pub ClassID: root::CLSID,
        pub SizeOfData: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ANON_OBJECT_HEADER_V2 {
        pub Sig1: u16,
        pub Sig2: u16,
        pub Version: u16,
        pub Machine: u16,
        pub TimeDateStamp: u32,
        pub ClassID: root::CLSID,
        pub SizeOfData: u32,
        pub Flags: u32,
        pub MetaDataSize: u32,
        pub MetaDataOffset: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ANON_OBJECT_HEADER_BIGOBJ {
        pub Sig1: u16,
        pub Sig2: u16,
        pub Version: u16,
        pub Machine: u16,
        pub TimeDateStamp: u32,
        pub ClassID: root::CLSID,
        pub SizeOfData: u32,
        pub Flags: u32,
        pub MetaDataSize: u32,
        pub MetaDataOffset: u32,
        pub NumberOfSections: u32,
        pub PointerToSymbolTable: u32,
        pub NumberOfSymbols: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_SECTION_HEADER {
        pub Name: [u8; 8usize],
        pub Misc: root::_IMAGE_SECTION_HEADER__bindgen_ty_1,
        pub VirtualAddress: u32,
        pub SizeOfRawData: u32,
        pub PointerToRawData: u32,
        pub PointerToRelocations: u32,
        pub PointerToLinenumbers: u32,
        pub NumberOfRelocations: u16,
        pub NumberOfLinenumbers: u16,
        pub Characteristics: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_SECTION_HEADER__bindgen_ty_1 {
        pub PhysicalAddress: u32,
        pub VirtualSize: u32,
    }
    pub type IMAGE_SECTION_HEADER = root::_IMAGE_SECTION_HEADER;
    pub type PIMAGE_SECTION_HEADER = *mut root::_IMAGE_SECTION_HEADER;
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_SYMBOL {
        pub N: root::_IMAGE_SYMBOL__bindgen_ty_1,
        pub Value: u32,
        pub SectionNumber: i16,
        pub Type: u16,
        pub StorageClass: u8,
        pub NumberOfAuxSymbols: u8,
    }
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub union _IMAGE_SYMBOL__bindgen_ty_1 {
        pub ShortName: [u8; 8usize],
        pub Name: root::_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1,
        pub LongName: [u32; 2usize],
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
        pub Short: u32,
        pub Long: u32,
    }
    pub type IMAGE_SYMBOL = root::_IMAGE_SYMBOL;
    pub type PIMAGE_SYMBOL = *mut root::IMAGE_SYMBOL;
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_SYMBOL_EX {
        pub N: root::_IMAGE_SYMBOL_EX__bindgen_ty_1,
        pub Value: u32,
        pub SectionNumber: i32,
        pub Type: u16,
        pub StorageClass: u8,
        pub NumberOfAuxSymbols: u8,
    }
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub union _IMAGE_SYMBOL_EX__bindgen_ty_1 {
        pub ShortName: [u8; 8usize],
        pub Name: root::_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1,
        pub LongName: [u32; 2usize],
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1 {
        pub Short: u32,
        pub Long: u32,
    }
    pub type IMAGE_SYMBOL_EX = root::_IMAGE_SYMBOL_EX;
    pub type PIMAGE_SYMBOL_EX = *mut root::IMAGE_SYMBOL_EX;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
        pub bAuxType: u8,
        pub bReserved: u8,
        pub SymbolTableIndex: u32,
        pub rgbReserved: [u8; 12usize],
    }
    pub type PIMAGE_AUX_SYMBOL_TOKEN_DEF = *mut root::IMAGE_AUX_SYMBOL_TOKEN_DEF;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_AUX_SYMBOL {
        pub Sym: root::_IMAGE_AUX_SYMBOL__bindgen_ty_1,
        pub File: root::_IMAGE_AUX_SYMBOL__bindgen_ty_2,
        pub Section: root::_IMAGE_AUX_SYMBOL__bindgen_ty_3,
        pub TokenDef: root::IMAGE_AUX_SYMBOL_TOKEN_DEF,
        pub CRC: root::_IMAGE_AUX_SYMBOL__bindgen_ty_4,
    }
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1 {
        pub TagIndex: u32,
        pub Misc: root::_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1,
        pub FcnAry: root::_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2,
        pub TvIndex: u16,
    }
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
        pub LnSz: root::_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        pub TotalSize: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub Linenumber: u16,
        pub Size: u16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2 {
        pub Function: root::_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        pub Array: root::_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
        pub PointerToLinenumber: u32,
        pub PointerToNextFunction: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 {
        pub Dimension: [u16; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_2 {
        pub Name: [u8; 18usize],
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_3 {
        pub Length: u32,
        pub NumberOfRelocations: u16,
        pub NumberOfLinenumbers: u16,
        pub CheckSum: u32,
        pub Number: i16,
        pub Selection: u8,
        pub bReserved: u8,
        pub HighNumber: i16,
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_4 {
        pub crc: u32,
        pub rgbReserved: [u8; 14usize],
    }
    pub type IMAGE_AUX_SYMBOL = root::_IMAGE_AUX_SYMBOL;
    pub type PIMAGE_AUX_SYMBOL = *mut root::IMAGE_AUX_SYMBOL;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_AUX_SYMBOL_EX {
        pub Sym: root::_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1,
        pub File: root::_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2,
        pub Section: root::_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3,
        pub __bindgen_anon_1: root::_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4,
        pub CRC: root::_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5,
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1 {
        pub WeakDefaultSymIndex: u32,
        pub WeakSearchType: u32,
        pub rgbReserved: [u8; 12usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2 {
        pub Name: [u8; 20usize],
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3 {
        pub Length: u32,
        pub NumberOfRelocations: u16,
        pub NumberOfLinenumbers: u16,
        pub CheckSum: u32,
        pub Number: i16,
        pub Selection: u8,
        pub bReserved: u8,
        pub HighNumber: i16,
        pub rgbReserved: [u8; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4 {
        pub TokenDef: root::IMAGE_AUX_SYMBOL_TOKEN_DEF,
        pub rgbReserved: [u8; 2usize],
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5 {
        pub crc: u32,
        pub rgbReserved: [u8; 16usize],
    }
    pub type IMAGE_AUX_SYMBOL_EX = root::_IMAGE_AUX_SYMBOL_EX;
    pub type PIMAGE_AUX_SYMBOL_EX = *mut root::IMAGE_AUX_SYMBOL_EX;
    pub const IMAGE_AUX_SYMBOL_TYPE_IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF: root::IMAGE_AUX_SYMBOL_TYPE =
        1;
    pub type IMAGE_AUX_SYMBOL_TYPE = i32;
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_RELOCATION {
        pub __bindgen_anon_1: root::_IMAGE_RELOCATION__bindgen_ty_1,
        pub SymbolTableIndex: u32,
        pub Type: u16,
    }
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub union _IMAGE_RELOCATION__bindgen_ty_1 {
        pub VirtualAddress: u32,
        pub RelocCount: u32,
    }
    pub type IMAGE_RELOCATION = root::_IMAGE_RELOCATION;
    pub type PIMAGE_RELOCATION = *mut root::IMAGE_RELOCATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_LINENUMBER {
        pub Type: root::_IMAGE_LINENUMBER__bindgen_ty_1,
        pub Linenumber: u16,
    }
    #[repr(C, packed(2))]
    #[derive(Copy, Clone)]
    pub union _IMAGE_LINENUMBER__bindgen_ty_1 {
        pub SymbolTableIndex: u32,
        pub VirtualAddress: u32,
    }
    pub type IMAGE_LINENUMBER = root::_IMAGE_LINENUMBER;
    pub type PIMAGE_LINENUMBER = *mut root::IMAGE_LINENUMBER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_BASE_RELOCATION {
        pub VirtualAddress: u32,
        pub SizeOfBlock: u32,
    }
    pub type IMAGE_BASE_RELOCATION = root::_IMAGE_BASE_RELOCATION;
    pub type PIMAGE_BASE_RELOCATION = *mut root::IMAGE_BASE_RELOCATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ARCHIVE_MEMBER_HEADER {
        pub Name: [u8; 16usize],
        pub Date: [u8; 12usize],
        pub UserID: [u8; 6usize],
        pub GroupID: [u8; 6usize],
        pub Mode: [u8; 8usize],
        pub Size: [u8; 10usize],
        pub EndHeader: [u8; 2usize],
    }
    pub type IMAGE_ARCHIVE_MEMBER_HEADER = root::_IMAGE_ARCHIVE_MEMBER_HEADER;
    pub type PIMAGE_ARCHIVE_MEMBER_HEADER = *mut root::_IMAGE_ARCHIVE_MEMBER_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_EXPORT_DIRECTORY {
        pub Characteristics: u32,
        pub TimeDateStamp: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub Name: u32,
        pub Base: u32,
        pub NumberOfFunctions: u32,
        pub NumberOfNames: u32,
        pub AddressOfFunctions: u32,
        pub AddressOfNames: u32,
        pub AddressOfNameOrdinals: u32,
    }
    pub type IMAGE_EXPORT_DIRECTORY = root::_IMAGE_EXPORT_DIRECTORY;
    pub type PIMAGE_EXPORT_DIRECTORY = *mut root::_IMAGE_EXPORT_DIRECTORY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_IMPORT_BY_NAME {
        pub Hint: u16,
        pub Name: [i8; 1usize],
    }
    pub type IMAGE_IMPORT_BY_NAME = root::_IMAGE_IMPORT_BY_NAME;
    pub type PIMAGE_IMPORT_BY_NAME = *mut root::_IMAGE_IMPORT_BY_NAME;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_THUNK_DATA64 {
        pub u1: root::_IMAGE_THUNK_DATA64__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_THUNK_DATA64__bindgen_ty_1 {
        pub ForwarderString: root::ULONGLONG,
        pub Function: root::ULONGLONG,
        pub Ordinal: root::ULONGLONG,
        pub AddressOfData: root::ULONGLONG,
    }
    pub type IMAGE_THUNK_DATA64 = root::_IMAGE_THUNK_DATA64;
    pub type PIMAGE_THUNK_DATA64 = *mut root::IMAGE_THUNK_DATA64;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_THUNK_DATA32 {
        pub u1: root::_IMAGE_THUNK_DATA32__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_THUNK_DATA32__bindgen_ty_1 {
        pub ForwarderString: u32,
        pub Function: u32,
        pub Ordinal: u32,
        pub AddressOfData: u32,
    }
    pub type IMAGE_THUNK_DATA32 = root::_IMAGE_THUNK_DATA32;
    pub type PIMAGE_THUNK_DATA32 = *mut root::IMAGE_THUNK_DATA32;
    pub type PIMAGE_TLS_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(DllHandle: root::PVOID, Reason: u32, Reserved: root::PVOID),
    >;
    #[repr(C, packed(4))]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_TLS_DIRECTORY64 {
        pub StartAddressOfRawData: root::ULONGLONG,
        pub EndAddressOfRawData: root::ULONGLONG,
        pub AddressOfIndex: root::ULONGLONG,
        pub AddressOfCallBacks: root::ULONGLONG,
        pub SizeOfZeroFill: u32,
        pub __bindgen_anon_1: root::_IMAGE_TLS_DIRECTORY64__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_TLS_DIRECTORY64__bindgen_ty_1 {
        pub Characteristics: u32,
        pub __bindgen_anon_1: root::_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Reserved0(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 20u8, val as u64)
            }
        }
        #[inline]
        pub fn Alignment(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
        }
        #[inline]
        pub fn set_Alignment(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved1(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved1(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Reserved0: u32,
            Alignment: u32,
            Reserved1: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 20u8, {
                let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit.set(20usize, 4u8, {
                let Alignment: u32 = unsafe { ::std::mem::transmute(Alignment) };
                Alignment as u64
            });
            __bindgen_bitfield_unit.set(24usize, 8u8, {
                let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
                Reserved1 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_TLS_DIRECTORY64 = root::_IMAGE_TLS_DIRECTORY64;
    pub type PIMAGE_TLS_DIRECTORY64 = *mut root::IMAGE_TLS_DIRECTORY64;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_TLS_DIRECTORY32 {
        pub StartAddressOfRawData: u32,
        pub EndAddressOfRawData: u32,
        pub AddressOfIndex: u32,
        pub AddressOfCallBacks: u32,
        pub SizeOfZeroFill: u32,
        pub __bindgen_anon_1: root::_IMAGE_TLS_DIRECTORY32__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_TLS_DIRECTORY32__bindgen_ty_1 {
        pub Characteristics: u32,
        pub __bindgen_anon_1: root::_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Reserved0(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 20u8, val as u64)
            }
        }
        #[inline]
        pub fn Alignment(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
        }
        #[inline]
        pub fn set_Alignment(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved1(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved1(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Reserved0: u32,
            Alignment: u32,
            Reserved1: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 20u8, {
                let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit.set(20usize, 4u8, {
                let Alignment: u32 = unsafe { ::std::mem::transmute(Alignment) };
                Alignment as u64
            });
            __bindgen_bitfield_unit.set(24usize, 8u8, {
                let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
                Reserved1 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_TLS_DIRECTORY32 = root::_IMAGE_TLS_DIRECTORY32;
    pub type PIMAGE_TLS_DIRECTORY32 = *mut root::IMAGE_TLS_DIRECTORY32;
    pub type IMAGE_THUNK_DATA = root::IMAGE_THUNK_DATA64;
    pub type PIMAGE_THUNK_DATA = root::PIMAGE_THUNK_DATA64;
    pub type IMAGE_TLS_DIRECTORY = root::IMAGE_TLS_DIRECTORY64;
    pub type PIMAGE_TLS_DIRECTORY = root::PIMAGE_TLS_DIRECTORY64;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_IMPORT_DESCRIPTOR {
        pub __bindgen_anon_1: root::_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1,
        pub TimeDateStamp: u32,
        pub ForwarderChain: u32,
        pub Name: u32,
        pub FirstThunk: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1 {
        pub Characteristics: u32,
        pub OriginalFirstThunk: u32,
    }
    pub type IMAGE_IMPORT_DESCRIPTOR = root::_IMAGE_IMPORT_DESCRIPTOR;
    pub type PIMAGE_IMPORT_DESCRIPTOR = *mut root::IMAGE_IMPORT_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
        pub TimeDateStamp: u32,
        pub OffsetModuleName: u16,
        pub NumberOfModuleForwarderRefs: u16,
    }
    pub type IMAGE_BOUND_IMPORT_DESCRIPTOR = root::_IMAGE_BOUND_IMPORT_DESCRIPTOR;
    pub type PIMAGE_BOUND_IMPORT_DESCRIPTOR = *mut root::_IMAGE_BOUND_IMPORT_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_BOUND_FORWARDER_REF {
        pub TimeDateStamp: u32,
        pub OffsetModuleName: u16,
        pub Reserved: u16,
    }
    pub type IMAGE_BOUND_FORWARDER_REF = root::_IMAGE_BOUND_FORWARDER_REF;
    pub type PIMAGE_BOUND_FORWARDER_REF = *mut root::_IMAGE_BOUND_FORWARDER_REF;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_DELAYLOAD_DESCRIPTOR {
        pub Attributes: root::_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1,
        pub DllNameRVA: u32,
        pub ModuleHandleRVA: u32,
        pub ImportAddressTableRVA: u32,
        pub ImportNameTableRVA: u32,
        pub BoundImportAddressTableRVA: u32,
        pub UnloadInformationTableRVA: u32,
        pub TimeDateStamp: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1 {
        pub AllAttributes: u32,
        pub __bindgen_anon_1: root::_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn RvaBased(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_RvaBased(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ReservedAttributes(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_ReservedAttributes(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            RvaBased: u32,
            ReservedAttributes: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let RvaBased: u32 = unsafe { ::std::mem::transmute(RvaBased) };
                RvaBased as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let ReservedAttributes: u32 = unsafe { ::std::mem::transmute(ReservedAttributes) };
                ReservedAttributes as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_DELAYLOAD_DESCRIPTOR = root::_IMAGE_DELAYLOAD_DESCRIPTOR;
    pub type PIMAGE_DELAYLOAD_DESCRIPTOR = *mut root::_IMAGE_DELAYLOAD_DESCRIPTOR;
    pub type PCIMAGE_DELAYLOAD_DESCRIPTOR = *const root::IMAGE_DELAYLOAD_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DIRECTORY {
        pub Characteristics: u32,
        pub TimeDateStamp: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub NumberOfNamedEntries: u16,
        pub NumberOfIdEntries: u16,
    }
    pub type IMAGE_RESOURCE_DIRECTORY = root::_IMAGE_RESOURCE_DIRECTORY;
    pub type PIMAGE_RESOURCE_DIRECTORY = *mut root::_IMAGE_RESOURCE_DIRECTORY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
        pub __bindgen_anon_1: root::_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1,
        pub __bindgen_anon_2: root::_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1,
        pub Name: u32,
        pub Id: u16,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn NameOffset(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_NameOffset(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn NameIsString(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_NameIsString(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(31usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            NameOffset: u32,
            NameIsString: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 31u8, {
                let NameOffset: u32 = unsafe { ::std::mem::transmute(NameOffset) };
                NameOffset as u64
            });
            __bindgen_bitfield_unit.set(31usize, 1u8, {
                let NameIsString: u32 = unsafe { ::std::mem::transmute(NameIsString) };
                NameIsString as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2 {
        pub OffsetToData: u32,
        pub __bindgen_anon_1: root::_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
        #[inline]
        pub fn OffsetToDirectory(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_OffsetToDirectory(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn DataIsDirectory(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DataIsDirectory(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(31usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            OffsetToDirectory: u32,
            DataIsDirectory: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 31u8, {
                let OffsetToDirectory: u32 = unsafe { ::std::mem::transmute(OffsetToDirectory) };
                OffsetToDirectory as u64
            });
            __bindgen_bitfield_unit.set(31usize, 1u8, {
                let DataIsDirectory: u32 = unsafe { ::std::mem::transmute(DataIsDirectory) };
                DataIsDirectory as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_RESOURCE_DIRECTORY_ENTRY = root::_IMAGE_RESOURCE_DIRECTORY_ENTRY;
    pub type PIMAGE_RESOURCE_DIRECTORY_ENTRY = *mut root::_IMAGE_RESOURCE_DIRECTORY_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DIRECTORY_STRING {
        pub Length: u16,
        pub NameString: [i8; 1usize],
    }
    pub type IMAGE_RESOURCE_DIRECTORY_STRING = root::_IMAGE_RESOURCE_DIRECTORY_STRING;
    pub type PIMAGE_RESOURCE_DIRECTORY_STRING = *mut root::_IMAGE_RESOURCE_DIRECTORY_STRING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DIR_STRING_U {
        pub Length: u16,
        pub NameString: [u16; 1usize],
    }
    pub type IMAGE_RESOURCE_DIR_STRING_U = root::_IMAGE_RESOURCE_DIR_STRING_U;
    pub type PIMAGE_RESOURCE_DIR_STRING_U = *mut root::_IMAGE_RESOURCE_DIR_STRING_U;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_RESOURCE_DATA_ENTRY {
        pub OffsetToData: u32,
        pub Size: u32,
        pub CodePage: u32,
        pub Reserved: u32,
    }
    pub type IMAGE_RESOURCE_DATA_ENTRY = root::_IMAGE_RESOURCE_DATA_ENTRY;
    pub type PIMAGE_RESOURCE_DATA_ENTRY = *mut root::_IMAGE_RESOURCE_DATA_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
        pub Flags: u16,
        pub Catalog: u16,
        pub CatalogOffset: u32,
        pub Reserved: u32,
    }
    pub type IMAGE_LOAD_CONFIG_CODE_INTEGRITY = root::_IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
    pub type PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = *mut root::_IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
        pub Version: u32,
        pub Size: u32,
    }
    pub type IMAGE_DYNAMIC_RELOCATION_TABLE = root::_IMAGE_DYNAMIC_RELOCATION_TABLE;
    pub type PIMAGE_DYNAMIC_RELOCATION_TABLE = *mut root::_IMAGE_DYNAMIC_RELOCATION_TABLE;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DYNAMIC_RELOCATION32 {
        pub Symbol: u32,
        pub BaseRelocSize: u32,
    }
    pub type IMAGE_DYNAMIC_RELOCATION32 = root::_IMAGE_DYNAMIC_RELOCATION32;
    pub type PIMAGE_DYNAMIC_RELOCATION32 = *mut root::_IMAGE_DYNAMIC_RELOCATION32;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DYNAMIC_RELOCATION64 {
        pub Symbol: root::ULONGLONG,
        pub BaseRelocSize: u32,
    }
    pub type IMAGE_DYNAMIC_RELOCATION64 = root::_IMAGE_DYNAMIC_RELOCATION64;
    pub type PIMAGE_DYNAMIC_RELOCATION64 = *mut root::_IMAGE_DYNAMIC_RELOCATION64;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
        pub HeaderSize: u32,
        pub FixupInfoSize: u32,
        pub Symbol: u32,
        pub SymbolGroup: u32,
        pub Flags: u32,
    }
    pub type IMAGE_DYNAMIC_RELOCATION32_V2 = root::_IMAGE_DYNAMIC_RELOCATION32_V2;
    pub type PIMAGE_DYNAMIC_RELOCATION32_V2 = *mut root::_IMAGE_DYNAMIC_RELOCATION32_V2;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
        pub HeaderSize: u32,
        pub FixupInfoSize: u32,
        pub Symbol: root::ULONGLONG,
        pub SymbolGroup: u32,
        pub Flags: u32,
    }
    pub type IMAGE_DYNAMIC_RELOCATION64_V2 = root::_IMAGE_DYNAMIC_RELOCATION64_V2;
    pub type PIMAGE_DYNAMIC_RELOCATION64_V2 = *mut root::_IMAGE_DYNAMIC_RELOCATION64_V2;
    pub type IMAGE_DYNAMIC_RELOCATION = root::IMAGE_DYNAMIC_RELOCATION64;
    pub type PIMAGE_DYNAMIC_RELOCATION = root::PIMAGE_DYNAMIC_RELOCATION64;
    pub type IMAGE_DYNAMIC_RELOCATION_V2 = root::IMAGE_DYNAMIC_RELOCATION64_V2;
    pub type PIMAGE_DYNAMIC_RELOCATION_V2 = root::PIMAGE_DYNAMIC_RELOCATION64_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
        pub PrologueByteCount: u8,
    }
    pub type IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER =
        root::_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
    pub type PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER =
        *mut root::IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
        pub EpilogueCount: u32,
        pub EpilogueByteCount: u8,
        pub BranchDescriptorElementSize: u8,
        pub BranchDescriptorCount: u16,
    }
    pub type IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER =
        root::_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
    pub type PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER =
        *mut root::IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
        #[inline]
        pub fn PageRelativeOffset(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
        }
        #[inline]
        pub fn set_PageRelativeOffset(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 12u8, val as u64)
            }
        }
        #[inline]
        pub fn IndirectCall(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_IndirectCall(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn IATIndex(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 19u8) as u32) }
        }
        #[inline]
        pub fn set_IATIndex(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 19u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            PageRelativeOffset: u32,
            IndirectCall: u32,
            IATIndex: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 12u8, {
                let PageRelativeOffset: u32 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
                PageRelativeOffset as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let IndirectCall: u32 = unsafe { ::std::mem::transmute(IndirectCall) };
                IndirectCall as u64
            });
            __bindgen_bitfield_unit.set(13usize, 19u8, {
                let IATIndex: u32 = unsafe { ::std::mem::transmute(IATIndex) };
                IATIndex as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
        root::_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    pub type PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
        *mut root::IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
    }
    impl _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
        #[inline]
        pub fn PageRelativeOffset(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
        }
        #[inline]
        pub fn set_PageRelativeOffset(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 12u8, val as u64)
            }
        }
        #[inline]
        pub fn IndirectCall(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_IndirectCall(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn RexWPrefix(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_RexWPrefix(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn CfgCheck(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_CfgCheck(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            PageRelativeOffset: u16,
            IndirectCall: u16,
            RexWPrefix: u16,
            CfgCheck: u16,
            Reserved: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 12u8, {
                let PageRelativeOffset: u16 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
                PageRelativeOffset as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let IndirectCall: u16 = unsafe { ::std::mem::transmute(IndirectCall) };
                IndirectCall as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let RexWPrefix: u16 = unsafe { ::std::mem::transmute(RexWPrefix) };
                RexWPrefix as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let CfgCheck: u16 = unsafe { ::std::mem::transmute(CfgCheck) };
                CfgCheck as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
        root::_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    pub type PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
        *mut root::IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
    }
    impl _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
        #[inline]
        pub fn PageRelativeOffset(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
        }
        #[inline]
        pub fn set_PageRelativeOffset(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 12u8, val as u64)
            }
        }
        #[inline]
        pub fn RegisterNumber(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u16) }
        }
        #[inline]
        pub fn set_RegisterNumber(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            PageRelativeOffset: u16,
            RegisterNumber: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 12u8, {
                let PageRelativeOffset: u16 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
                PageRelativeOffset as u64
            });
            __bindgen_bitfield_unit.set(12usize, 4u8, {
                let RegisterNumber: u16 = unsafe { ::std::mem::transmute(RegisterNumber) };
                RegisterNumber as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION =
        root::_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
    pub type PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION =
        *mut root::IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
        pub Size: u32,
        pub TimeDateStamp: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub GlobalFlagsClear: u32,
        pub GlobalFlagsSet: u32,
        pub CriticalSectionDefaultTimeout: u32,
        pub DeCommitFreeBlockThreshold: u32,
        pub DeCommitTotalFreeThreshold: u32,
        pub LockPrefixTable: u32,
        pub MaximumAllocationSize: u32,
        pub VirtualMemoryThreshold: u32,
        pub ProcessHeapFlags: u32,
        pub ProcessAffinityMask: u32,
        pub CSDVersion: u16,
        pub DependentLoadFlags: u16,
        pub EditList: u32,
        pub SecurityCookie: u32,
        pub SEHandlerTable: u32,
        pub SEHandlerCount: u32,
        pub GuardCFCheckFunctionPointer: u32,
        pub GuardCFDispatchFunctionPointer: u32,
        pub GuardCFFunctionTable: u32,
        pub GuardCFFunctionCount: u32,
        pub GuardFlags: u32,
        pub CodeIntegrity: root::IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
        pub GuardAddressTakenIatEntryTable: u32,
        pub GuardAddressTakenIatEntryCount: u32,
        pub GuardLongJumpTargetTable: u32,
        pub GuardLongJumpTargetCount: u32,
        pub DynamicValueRelocTable: u32,
        pub CHPEMetadataPointer: u32,
        pub GuardRFFailureRoutine: u32,
        pub GuardRFFailureRoutineFunctionPointer: u32,
        pub DynamicValueRelocTableOffset: u32,
        pub DynamicValueRelocTableSection: u16,
        pub Reserved2: u16,
        pub GuardRFVerifyStackPointerFunctionPointer: u32,
        pub HotPatchTableOffset: u32,
        pub Reserved3: u32,
        pub EnclaveConfigurationPointer: u32,
        pub VolatileMetadataPointer: u32,
        pub GuardEHContinuationTable: u32,
        pub GuardEHContinuationCount: u32,
    }
    pub type IMAGE_LOAD_CONFIG_DIRECTORY32 = root::_IMAGE_LOAD_CONFIG_DIRECTORY32;
    pub type PIMAGE_LOAD_CONFIG_DIRECTORY32 = *mut root::_IMAGE_LOAD_CONFIG_DIRECTORY32;
    #[repr(C, packed(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
        pub Size: u32,
        pub TimeDateStamp: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub GlobalFlagsClear: u32,
        pub GlobalFlagsSet: u32,
        pub CriticalSectionDefaultTimeout: u32,
        pub DeCommitFreeBlockThreshold: root::ULONGLONG,
        pub DeCommitTotalFreeThreshold: root::ULONGLONG,
        pub LockPrefixTable: root::ULONGLONG,
        pub MaximumAllocationSize: root::ULONGLONG,
        pub VirtualMemoryThreshold: root::ULONGLONG,
        pub ProcessAffinityMask: root::ULONGLONG,
        pub ProcessHeapFlags: u32,
        pub CSDVersion: u16,
        pub DependentLoadFlags: u16,
        pub EditList: root::ULONGLONG,
        pub SecurityCookie: root::ULONGLONG,
        pub SEHandlerTable: root::ULONGLONG,
        pub SEHandlerCount: root::ULONGLONG,
        pub GuardCFCheckFunctionPointer: root::ULONGLONG,
        pub GuardCFDispatchFunctionPointer: root::ULONGLONG,
        pub GuardCFFunctionTable: root::ULONGLONG,
        pub GuardCFFunctionCount: root::ULONGLONG,
        pub GuardFlags: u32,
        pub CodeIntegrity: root::IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
        pub GuardAddressTakenIatEntryTable: root::ULONGLONG,
        pub GuardAddressTakenIatEntryCount: root::ULONGLONG,
        pub GuardLongJumpTargetTable: root::ULONGLONG,
        pub GuardLongJumpTargetCount: root::ULONGLONG,
        pub DynamicValueRelocTable: root::ULONGLONG,
        pub CHPEMetadataPointer: root::ULONGLONG,
        pub GuardRFFailureRoutine: root::ULONGLONG,
        pub GuardRFFailureRoutineFunctionPointer: root::ULONGLONG,
        pub DynamicValueRelocTableOffset: u32,
        pub DynamicValueRelocTableSection: u16,
        pub Reserved2: u16,
        pub GuardRFVerifyStackPointerFunctionPointer: root::ULONGLONG,
        pub HotPatchTableOffset: u32,
        pub Reserved3: u32,
        pub EnclaveConfigurationPointer: root::ULONGLONG,
        pub VolatileMetadataPointer: root::ULONGLONG,
        pub GuardEHContinuationTable: root::ULONGLONG,
        pub GuardEHContinuationCount: root::ULONGLONG,
    }
    pub type IMAGE_LOAD_CONFIG_DIRECTORY64 = root::_IMAGE_LOAD_CONFIG_DIRECTORY64;
    pub type PIMAGE_LOAD_CONFIG_DIRECTORY64 = *mut root::_IMAGE_LOAD_CONFIG_DIRECTORY64;
    pub type IMAGE_LOAD_CONFIG_DIRECTORY = root::IMAGE_LOAD_CONFIG_DIRECTORY64;
    pub type PIMAGE_LOAD_CONFIG_DIRECTORY = root::PIMAGE_LOAD_CONFIG_DIRECTORY64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_HOT_PATCH_INFO {
        pub Version: u32,
        pub Size: u32,
        pub SequenceNumber: u32,
        pub BaseImageList: u32,
        pub BaseImageCount: u32,
        pub BufferOffset: u32,
        pub ExtraPatchSize: u32,
    }
    pub type IMAGE_HOT_PATCH_INFO = root::_IMAGE_HOT_PATCH_INFO;
    pub type PIMAGE_HOT_PATCH_INFO = *mut root::_IMAGE_HOT_PATCH_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_HOT_PATCH_BASE {
        pub SequenceNumber: u32,
        pub Flags: u32,
        pub OriginalTimeDateStamp: u32,
        pub OriginalCheckSum: u32,
        pub CodeIntegrityInfo: u32,
        pub CodeIntegritySize: u32,
        pub PatchTable: u32,
        pub BufferOffset: u32,
    }
    pub type IMAGE_HOT_PATCH_BASE = root::_IMAGE_HOT_PATCH_BASE;
    pub type PIMAGE_HOT_PATCH_BASE = *mut root::_IMAGE_HOT_PATCH_BASE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_HOT_PATCH_HASHES {
        pub SHA256: [u8; 32usize],
        pub SHA1: [u8; 20usize],
    }
    pub type IMAGE_HOT_PATCH_HASHES = root::_IMAGE_HOT_PATCH_HASHES;
    pub type PIMAGE_HOT_PATCH_HASHES = *mut root::_IMAGE_HOT_PATCH_HASHES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
        pub FuncStart: u32,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
        #[inline]
        pub fn PrologLen(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_PrologLen(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn FuncLen(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 22u8) as u32) }
        }
        #[inline]
        pub fn set_FuncLen(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 22u8, val as u64)
            }
        }
        #[inline]
        pub fn ThirtyTwoBit(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_ThirtyTwoBit(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(30usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ExceptionFlag(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_ExceptionFlag(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(31usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            PrologLen: u32,
            FuncLen: u32,
            ThirtyTwoBit: u32,
            ExceptionFlag: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let PrologLen: u32 = unsafe { ::std::mem::transmute(PrologLen) };
                PrologLen as u64
            });
            __bindgen_bitfield_unit.set(8usize, 22u8, {
                let FuncLen: u32 = unsafe { ::std::mem::transmute(FuncLen) };
                FuncLen as u64
            });
            __bindgen_bitfield_unit.set(30usize, 1u8, {
                let ThirtyTwoBit: u32 = unsafe { ::std::mem::transmute(ThirtyTwoBit) };
                ThirtyTwoBit as u64
            });
            __bindgen_bitfield_unit.set(31usize, 1u8, {
                let ExceptionFlag: u32 = unsafe { ::std::mem::transmute(ExceptionFlag) };
                ExceptionFlag as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_CE_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = *mut root::_IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
        pub BeginAddress: u32,
        pub __bindgen_anon_1: root::_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
        pub UnwindData: u32,
        pub __bindgen_anon_1: root::_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Flag(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_Flag(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn FunctionLength(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 11u8) as u32) }
        }
        #[inline]
        pub fn set_FunctionLength(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 11u8, val as u64)
            }
        }
        #[inline]
        pub fn Ret(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_Ret(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn H(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_H(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reg(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
        }
        #[inline]
        pub fn set_Reg(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn R(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_R(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(19usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn L(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_L(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn C(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_C(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(21usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn StackAdjust(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
        }
        #[inline]
        pub fn set_StackAdjust(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(22usize, 10u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Flag: u32,
            FunctionLength: u32,
            Ret: u32,
            H: u32,
            Reg: u32,
            R: u32,
            L: u32,
            C: u32,
            StackAdjust: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 2u8, {
                let Flag: u32 = unsafe { ::std::mem::transmute(Flag) };
                Flag as u64
            });
            __bindgen_bitfield_unit.set(2usize, 11u8, {
                let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
                FunctionLength as u64
            });
            __bindgen_bitfield_unit.set(13usize, 2u8, {
                let Ret: u32 = unsafe { ::std::mem::transmute(Ret) };
                Ret as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let H: u32 = unsafe { ::std::mem::transmute(H) };
                H as u64
            });
            __bindgen_bitfield_unit.set(16usize, 3u8, {
                let Reg: u32 = unsafe { ::std::mem::transmute(Reg) };
                Reg as u64
            });
            __bindgen_bitfield_unit.set(19usize, 1u8, {
                let R: u32 = unsafe { ::std::mem::transmute(R) };
                R as u64
            });
            __bindgen_bitfield_unit.set(20usize, 1u8, {
                let L: u32 = unsafe { ::std::mem::transmute(L) };
                L as u64
            });
            __bindgen_bitfield_unit.set(21usize, 1u8, {
                let C: u32 = unsafe { ::std::mem::transmute(C) };
                C as u64
            });
            __bindgen_bitfield_unit.set(22usize, 10u8, {
                let StackAdjust: u32 = unsafe { ::std::mem::transmute(StackAdjust) };
                StackAdjust as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = *mut root::_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
    pub const ARM64_FNPDATA_FLAGS_PdataRefToFullXdata: root::ARM64_FNPDATA_FLAGS = 0;
    pub const ARM64_FNPDATA_FLAGS_PdataPackedUnwindFunction: root::ARM64_FNPDATA_FLAGS = 1;
    pub const ARM64_FNPDATA_FLAGS_PdataPackedUnwindFragment: root::ARM64_FNPDATA_FLAGS = 2;
    pub type ARM64_FNPDATA_FLAGS = i32;
    pub const ARM64_FNPDATA_CR_PdataCrUnchained: root::ARM64_FNPDATA_CR = 0;
    pub const ARM64_FNPDATA_CR_PdataCrUnchainedSavedLr: root::ARM64_FNPDATA_CR = 1;
    pub const ARM64_FNPDATA_CR_PdataCrChainedWithPac: root::ARM64_FNPDATA_CR = 2;
    pub const ARM64_FNPDATA_CR_PdataCrChained: root::ARM64_FNPDATA_CR = 3;
    pub type ARM64_FNPDATA_CR = i32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
        pub BeginAddress: u32,
        pub __bindgen_anon_1: root::_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
        pub UnwindData: u32,
        pub __bindgen_anon_1: root::_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Flag(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_Flag(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn FunctionLength(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 11u8) as u32) }
        }
        #[inline]
        pub fn set_FunctionLength(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 11u8, val as u64)
            }
        }
        #[inline]
        pub fn RegF(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
        }
        #[inline]
        pub fn set_RegF(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn RegI(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
        }
        #[inline]
        pub fn set_RegI(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn H(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_H(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn CR(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_CR(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(21usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn FrameSize(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u32) }
        }
        #[inline]
        pub fn set_FrameSize(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(23usize, 9u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Flag: u32,
            FunctionLength: u32,
            RegF: u32,
            RegI: u32,
            H: u32,
            CR: u32,
            FrameSize: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 2u8, {
                let Flag: u32 = unsafe { ::std::mem::transmute(Flag) };
                Flag as u64
            });
            __bindgen_bitfield_unit.set(2usize, 11u8, {
                let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
                FunctionLength as u64
            });
            __bindgen_bitfield_unit.set(13usize, 3u8, {
                let RegF: u32 = unsafe { ::std::mem::transmute(RegF) };
                RegF as u64
            });
            __bindgen_bitfield_unit.set(16usize, 4u8, {
                let RegI: u32 = unsafe { ::std::mem::transmute(RegI) };
                RegI as u64
            });
            __bindgen_bitfield_unit.set(20usize, 1u8, {
                let H: u32 = unsafe { ::std::mem::transmute(H) };
                H as u64
            });
            __bindgen_bitfield_unit.set(21usize, 2u8, {
                let CR: u32 = unsafe { ::std::mem::transmute(CR) };
                CR as u64
            });
            __bindgen_bitfield_unit.set(23usize, 9u8, {
                let FrameSize: u32 = unsafe { ::std::mem::transmute(FrameSize) };
                FrameSize as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = *mut root::_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
        pub HeaderData: u32,
        pub __bindgen_anon_1: root::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1 {
        #[inline]
        pub fn FunctionLength(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
        }
        #[inline]
        pub fn set_FunctionLength(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 18u8, val as u64)
            }
        }
        #[inline]
        pub fn Version(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_Version(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(18usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn ExceptionDataPresent(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_ExceptionDataPresent(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EpilogInHeader(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_EpilogInHeader(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(21usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn EpilogCount(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
        }
        #[inline]
        pub fn set_EpilogCount(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(22usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn CodeWords(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
        }
        #[inline]
        pub fn set_CodeWords(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(27usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            FunctionLength: u32,
            Version: u32,
            ExceptionDataPresent: u32,
            EpilogInHeader: u32,
            EpilogCount: u32,
            CodeWords: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 18u8, {
                let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
                FunctionLength as u64
            });
            __bindgen_bitfield_unit.set(18usize, 2u8, {
                let Version: u32 = unsafe { ::std::mem::transmute(Version) };
                Version as u64
            });
            __bindgen_bitfield_unit.set(20usize, 1u8, {
                let ExceptionDataPresent: u32 =
                    unsafe { ::std::mem::transmute(ExceptionDataPresent) };
                ExceptionDataPresent as u64
            });
            __bindgen_bitfield_unit.set(21usize, 1u8, {
                let EpilogInHeader: u32 = unsafe { ::std::mem::transmute(EpilogInHeader) };
                EpilogInHeader as u64
            });
            __bindgen_bitfield_unit.set(22usize, 5u8, {
                let EpilogCount: u32 = unsafe { ::std::mem::transmute(EpilogCount) };
                EpilogCount as u64
            });
            __bindgen_bitfield_unit.set(27usize, 5u8, {
                let CodeWords: u32 = unsafe { ::std::mem::transmute(CodeWords) };
                CodeWords as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C, packed(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
        pub BeginAddress: root::ULONGLONG,
        pub EndAddress: root::ULONGLONG,
        pub ExceptionHandler: root::ULONGLONG,
        pub HandlerData: root::ULONGLONG,
        pub PrologEndAddress: root::ULONGLONG,
    }
    pub type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY =
        *mut root::_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
        pub BeginAddress: u32,
        pub EndAddress: u32,
        pub ExceptionHandler: u32,
        pub HandlerData: u32,
        pub PrologEndAddress: u32,
    }
    pub type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = *mut root::_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
        pub BeginAddress: u32,
        pub EndAddress: u32,
        pub __bindgen_anon_1: root::_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
        pub UnwindInfoAddress: u32,
        pub UnwindData: u32,
    }
    pub type _PIMAGE_RUNTIME_FUNCTION_ENTRY = *mut root::_IMAGE_RUNTIME_FUNCTION_ENTRY;
    pub type IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = root::_PIMAGE_RUNTIME_FUNCTION_ENTRY;
    pub type IMAGE_RUNTIME_FUNCTION_ENTRY = root::_IMAGE_RUNTIME_FUNCTION_ENTRY;
    pub type PIMAGE_RUNTIME_FUNCTION_ENTRY = root::_PIMAGE_RUNTIME_FUNCTION_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ENCLAVE_CONFIG32 {
        pub Size: u32,
        pub MinimumRequiredConfigSize: u32,
        pub PolicyFlags: u32,
        pub NumberOfImports: u32,
        pub ImportList: u32,
        pub ImportEntrySize: u32,
        pub FamilyID: [u8; 16usize],
        pub ImageID: [u8; 16usize],
        pub ImageVersion: u32,
        pub SecurityVersion: u32,
        pub EnclaveSize: u32,
        pub NumberOfThreads: u32,
        pub EnclaveFlags: u32,
    }
    pub type IMAGE_ENCLAVE_CONFIG32 = root::_IMAGE_ENCLAVE_CONFIG32;
    pub type PIMAGE_ENCLAVE_CONFIG32 = *mut root::_IMAGE_ENCLAVE_CONFIG32;
    #[repr(C, packed(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ENCLAVE_CONFIG64 {
        pub Size: u32,
        pub MinimumRequiredConfigSize: u32,
        pub PolicyFlags: u32,
        pub NumberOfImports: u32,
        pub ImportList: u32,
        pub ImportEntrySize: u32,
        pub FamilyID: [u8; 16usize],
        pub ImageID: [u8; 16usize],
        pub ImageVersion: u32,
        pub SecurityVersion: u32,
        pub EnclaveSize: root::ULONGLONG,
        pub NumberOfThreads: u32,
        pub EnclaveFlags: u32,
    }
    pub type IMAGE_ENCLAVE_CONFIG64 = root::_IMAGE_ENCLAVE_CONFIG64;
    pub type PIMAGE_ENCLAVE_CONFIG64 = *mut root::_IMAGE_ENCLAVE_CONFIG64;
    pub type IMAGE_ENCLAVE_CONFIG = root::IMAGE_ENCLAVE_CONFIG64;
    pub type PIMAGE_ENCLAVE_CONFIG = root::PIMAGE_ENCLAVE_CONFIG64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_ENCLAVE_IMPORT {
        pub MatchType: u32,
        pub MinimumSecurityVersion: u32,
        pub UniqueOrAuthorID: [u8; 32usize],
        pub FamilyID: [u8; 16usize],
        pub ImageID: [u8; 16usize],
        pub ImportName: u32,
        pub Reserved: u32,
    }
    pub type IMAGE_ENCLAVE_IMPORT = root::_IMAGE_ENCLAVE_IMPORT;
    pub type PIMAGE_ENCLAVE_IMPORT = *mut root::_IMAGE_ENCLAVE_IMPORT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DEBUG_DIRECTORY {
        pub Characteristics: u32,
        pub TimeDateStamp: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub Type: u32,
        pub SizeOfData: u32,
        pub AddressOfRawData: u32,
        pub PointerToRawData: u32,
    }
    pub type IMAGE_DEBUG_DIRECTORY = root::_IMAGE_DEBUG_DIRECTORY;
    pub type PIMAGE_DEBUG_DIRECTORY = *mut root::_IMAGE_DEBUG_DIRECTORY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_COFF_SYMBOLS_HEADER {
        pub NumberOfSymbols: u32,
        pub LvaToFirstSymbol: u32,
        pub NumberOfLinenumbers: u32,
        pub LvaToFirstLinenumber: u32,
        pub RvaToFirstByteOfCode: u32,
        pub RvaToLastByteOfCode: u32,
        pub RvaToFirstByteOfData: u32,
        pub RvaToLastByteOfData: u32,
    }
    pub type IMAGE_COFF_SYMBOLS_HEADER = root::_IMAGE_COFF_SYMBOLS_HEADER;
    pub type PIMAGE_COFF_SYMBOLS_HEADER = *mut root::_IMAGE_COFF_SYMBOLS_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FPO_DATA {
        pub ulOffStart: u32,
        pub cbProcSize: u32,
        pub cdwLocals: u32,
        pub cdwParams: u16,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
    }
    impl _FPO_DATA {
        #[inline]
        pub fn cbProlog(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
        }
        #[inline]
        pub fn set_cbProlog(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn cbRegs(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u16) }
        }
        #[inline]
        pub fn set_cbRegs(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn fHasSEH(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fHasSEH(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(11usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fUseBP(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fUseBP(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cbFrame(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
        }
        #[inline]
        pub fn set_cbFrame(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            cbProlog: u16,
            cbRegs: u16,
            fHasSEH: u16,
            fUseBP: u16,
            reserved: u16,
            cbFrame: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let cbProlog: u16 = unsafe { ::std::mem::transmute(cbProlog) };
                cbProlog as u64
            });
            __bindgen_bitfield_unit.set(8usize, 3u8, {
                let cbRegs: u16 = unsafe { ::std::mem::transmute(cbRegs) };
                cbRegs as u64
            });
            __bindgen_bitfield_unit.set(11usize, 1u8, {
                let fHasSEH: u16 = unsafe { ::std::mem::transmute(fHasSEH) };
                fHasSEH as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let fUseBP: u16 = unsafe { ::std::mem::transmute(fUseBP) };
                fUseBP as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit.set(14usize, 2u8, {
                let cbFrame: u16 = unsafe { ::std::mem::transmute(cbFrame) };
                cbFrame as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type FPO_DATA = root::_FPO_DATA;
    pub type PFPO_DATA = *mut root::_FPO_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_DEBUG_MISC {
        pub DataType: u32,
        pub Length: u32,
        pub Unicode: root::BOOLEAN,
        pub Reserved: [u8; 3usize],
        pub Data: [u8; 1usize],
    }
    pub type IMAGE_DEBUG_MISC = root::_IMAGE_DEBUG_MISC;
    pub type PIMAGE_DEBUG_MISC = *mut root::_IMAGE_DEBUG_MISC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_FUNCTION_ENTRY {
        pub StartingAddress: u32,
        pub EndingAddress: u32,
        pub EndOfPrologue: u32,
    }
    pub type IMAGE_FUNCTION_ENTRY = root::_IMAGE_FUNCTION_ENTRY;
    pub type PIMAGE_FUNCTION_ENTRY = *mut root::_IMAGE_FUNCTION_ENTRY;
    #[repr(C, packed(4))]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_FUNCTION_ENTRY64 {
        pub StartingAddress: root::ULONGLONG,
        pub EndingAddress: root::ULONGLONG,
        pub __bindgen_anon_1: root::_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1,
    }
    #[repr(C, packed(4))]
    #[derive(Copy, Clone)]
    pub union _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1 {
        pub EndOfPrologue: root::ULONGLONG,
        pub UnwindInfoAddress: root::ULONGLONG,
    }
    pub type IMAGE_FUNCTION_ENTRY64 = root::_IMAGE_FUNCTION_ENTRY64;
    pub type PIMAGE_FUNCTION_ENTRY64 = *mut root::_IMAGE_FUNCTION_ENTRY64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IMAGE_SEPARATE_DEBUG_HEADER {
        pub Signature: u16,
        pub Flags: u16,
        pub Machine: u16,
        pub Characteristics: u16,
        pub TimeDateStamp: u32,
        pub CheckSum: u32,
        pub ImageBase: u32,
        pub SizeOfImage: u32,
        pub NumberOfSections: u32,
        pub ExportedNamesSize: u32,
        pub DebugDirectorySize: u32,
        pub SectionAlignment: u32,
        pub Reserved: [u32; 2usize],
    }
    pub type IMAGE_SEPARATE_DEBUG_HEADER = root::_IMAGE_SEPARATE_DEBUG_HEADER;
    pub type PIMAGE_SEPARATE_DEBUG_HEADER = *mut root::_IMAGE_SEPARATE_DEBUG_HEADER;
    #[repr(C, packed(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _NON_PAGED_DEBUG_INFO {
        pub Signature: u16,
        pub Flags: u16,
        pub Size: u32,
        pub Machine: u16,
        pub Characteristics: u16,
        pub TimeDateStamp: u32,
        pub CheckSum: u32,
        pub SizeOfImage: u32,
        pub ImageBase: root::ULONGLONG,
    }
    pub type NON_PAGED_DEBUG_INFO = root::_NON_PAGED_DEBUG_INFO;
    pub type PNON_PAGED_DEBUG_INFO = *mut root::_NON_PAGED_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ImageArchitectureHeader {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub FirstEntryRVA: u32,
    }
    impl _ImageArchitectureHeader {
        #[inline]
        pub fn AmaskValue(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AmaskValue(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AmaskShift(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_AmaskShift(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            AmaskValue: u32,
            AmaskShift: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let AmaskValue: u32 = unsafe { ::std::mem::transmute(AmaskValue) };
                AmaskValue as u64
            });
            __bindgen_bitfield_unit.set(8usize, 8u8, {
                let AmaskShift: u32 = unsafe { ::std::mem::transmute(AmaskShift) };
                AmaskShift as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type IMAGE_ARCHITECTURE_HEADER = root::_ImageArchitectureHeader;
    pub type PIMAGE_ARCHITECTURE_HEADER = *mut root::_ImageArchitectureHeader;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ImageArchitectureEntry {
        pub FixupInstRVA: u32,
        pub NewInst: u32,
    }
    pub type IMAGE_ARCHITECTURE_ENTRY = root::_ImageArchitectureEntry;
    pub type PIMAGE_ARCHITECTURE_ENTRY = *mut root::_ImageArchitectureEntry;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct IMPORT_OBJECT_HEADER {
        pub Sig1: u16,
        pub Sig2: u16,
        pub Version: u16,
        pub Machine: u16,
        pub TimeDateStamp: u32,
        pub SizeOfData: u32,
        pub __bindgen_anon_1: root::IMPORT_OBJECT_HEADER__bindgen_ty_1,
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union IMPORT_OBJECT_HEADER__bindgen_ty_1 {
        pub Ordinal: u16,
        pub Hint: u16,
    }
    impl IMPORT_OBJECT_HEADER {
        #[inline]
        pub fn Type(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
        }
        #[inline]
        pub fn set_Type(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn NameType(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u16) }
        }
        #[inline]
        pub fn set_NameType(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 11u8) as u16) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 11u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Type: u16,
            NameType: u16,
            Reserved: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 2u8, {
                let Type: u16 = unsafe { ::std::mem::transmute(Type) };
                Type as u64
            });
            __bindgen_bitfield_unit.set(2usize, 3u8, {
                let NameType: u16 = unsafe { ::std::mem::transmute(NameType) };
                NameType as u64
            });
            __bindgen_bitfield_unit.set(5usize, 11u8, {
                let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_CODE: root::IMPORT_OBJECT_TYPE = 0;
    pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_DATA: root::IMPORT_OBJECT_TYPE = 1;
    pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_CONST: root::IMPORT_OBJECT_TYPE = 2;
    pub type IMPORT_OBJECT_TYPE = i32;
    pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_ORDINAL: root::IMPORT_OBJECT_NAME_TYPE = 0;
    pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME: root::IMPORT_OBJECT_NAME_TYPE = 1;
    pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_NO_PREFIX: root::IMPORT_OBJECT_NAME_TYPE =
        2;
    pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_UNDECORATE: root::IMPORT_OBJECT_NAME_TYPE =
        3;
    pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_EXPORTAS: root::IMPORT_OBJECT_NAME_TYPE =
        4;
    pub type IMPORT_OBJECT_NAME_TYPE = i32;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_ILONLY:
        root::ReplacesCorHdrNumericDefines = 1;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_32BITREQUIRED:
        root::ReplacesCorHdrNumericDefines = 2;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_IL_LIBRARY:
        root::ReplacesCorHdrNumericDefines = 4;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_STRONGNAMESIGNED:
        root::ReplacesCorHdrNumericDefines = 8;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_NATIVE_ENTRYPOINT:
        root::ReplacesCorHdrNumericDefines = 16;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_TRACKDEBUGDATA:
        root::ReplacesCorHdrNumericDefines = 65536;
    pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_32BITPREFERRED:
        root::ReplacesCorHdrNumericDefines = 131072;
    pub const ReplacesCorHdrNumericDefines_COR_VERSION_MAJOR_V2:
        root::ReplacesCorHdrNumericDefines = 2;
    pub const ReplacesCorHdrNumericDefines_COR_VERSION_MAJOR: root::ReplacesCorHdrNumericDefines =
        2;
    pub const ReplacesCorHdrNumericDefines_COR_VERSION_MINOR: root::ReplacesCorHdrNumericDefines =
        5;
    pub const ReplacesCorHdrNumericDefines_COR_DELETED_NAME_LENGTH:
        root::ReplacesCorHdrNumericDefines = 8;
    pub const ReplacesCorHdrNumericDefines_COR_VTABLEGAP_NAME_LENGTH:
        root::ReplacesCorHdrNumericDefines = 8;
    pub const ReplacesCorHdrNumericDefines_NATIVE_TYPE_MAX_CB: root::ReplacesCorHdrNumericDefines =
        1;
    pub const ReplacesCorHdrNumericDefines_COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE:
        root::ReplacesCorHdrNumericDefines = 255;
    pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_METHODRVA:
        root::ReplacesCorHdrNumericDefines = 1;
    pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_EHRVA: root::ReplacesCorHdrNumericDefines =
        2;
    pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_BASICBLOCK:
        root::ReplacesCorHdrNumericDefines = 8;
    pub const ReplacesCorHdrNumericDefines_COR_VTABLE_32BIT: root::ReplacesCorHdrNumericDefines = 1;
    pub const ReplacesCorHdrNumericDefines_COR_VTABLE_64BIT: root::ReplacesCorHdrNumericDefines = 2;
    pub const ReplacesCorHdrNumericDefines_COR_VTABLE_FROM_UNMANAGED:
        root::ReplacesCorHdrNumericDefines = 4;
    pub const ReplacesCorHdrNumericDefines_COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN:
        root::ReplacesCorHdrNumericDefines = 8;
    pub const ReplacesCorHdrNumericDefines_COR_VTABLE_CALL_MOST_DERIVED:
        root::ReplacesCorHdrNumericDefines = 16;
    pub const ReplacesCorHdrNumericDefines_IMAGE_COR_EATJ_THUNK_SIZE:
        root::ReplacesCorHdrNumericDefines = 32;
    pub const ReplacesCorHdrNumericDefines_MAX_CLASS_NAME: root::ReplacesCorHdrNumericDefines =
        1024;
    pub const ReplacesCorHdrNumericDefines_MAX_PACKAGE_NAME: root::ReplacesCorHdrNumericDefines =
        1024;
    pub type ReplacesCorHdrNumericDefines = i32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct IMAGE_COR20_HEADER {
        pub cb: u32,
        pub MajorRuntimeVersion: u16,
        pub MinorRuntimeVersion: u16,
        pub MetaData: root::IMAGE_DATA_DIRECTORY,
        pub Flags: u32,
        pub __bindgen_anon_1: root::IMAGE_COR20_HEADER__bindgen_ty_1,
        pub Resources: root::IMAGE_DATA_DIRECTORY,
        pub StrongNameSignature: root::IMAGE_DATA_DIRECTORY,
        pub CodeManagerTable: root::IMAGE_DATA_DIRECTORY,
        pub VTableFixups: root::IMAGE_DATA_DIRECTORY,
        pub ExportAddressTableJumps: root::IMAGE_DATA_DIRECTORY,
        pub ManagedNativeHeader: root::IMAGE_DATA_DIRECTORY,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union IMAGE_COR20_HEADER__bindgen_ty_1 {
        pub EntryPointToken: u32,
        pub EntryPointRVA: u32,
    }
    pub type PIMAGE_COR20_HEADER = *mut root::IMAGE_COR20_HEADER;
    extern "C" {
        pub fn RtlCaptureStackBackTrace(
            FramesToSkip: u32,
            FramesToCapture: u32,
            BackTrace: *mut root::PVOID,
            BackTraceHash: root::PDWORD,
        ) -> u16;
    }
    extern "C" {
        pub fn RtlCaptureContext(ContextRecord: root::PCONTEXT);
    }
    extern "C" {
        pub fn RtlCaptureContext2(ContextRecord: root::PCONTEXT);
    }
    extern "C" {
        pub fn RtlUnwind(
            TargetFrame: root::PVOID,
            TargetIp: root::PVOID,
            ExceptionRecord: root::PEXCEPTION_RECORD,
            ReturnValue: root::PVOID,
        );
    }
    extern "C" {
        pub fn RtlAddFunctionTable(
            FunctionTable: root::PRUNTIME_FUNCTION,
            EntryCount: u32,
            BaseAddress: root::DWORD64,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn RtlDeleteFunctionTable(FunctionTable: root::PRUNTIME_FUNCTION) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn RtlInstallFunctionTableCallback(
            TableIdentifier: root::DWORD64,
            BaseAddress: root::DWORD64,
            Length: u32,
            Callback: root::PGET_RUNTIME_FUNCTION_CALLBACK,
            Context: root::PVOID,
            OutOfProcessCallbackDll: *const u16,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn RtlAddGrowableFunctionTable(
            DynamicTable: *mut root::PVOID,
            FunctionTable: root::PRUNTIME_FUNCTION,
            EntryCount: u32,
            MaximumEntryCount: u32,
            RangeBase: u64,
            RangeEnd: u64,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlGrowFunctionTable(DynamicTable: root::PVOID, NewEntryCount: u32);
    }
    extern "C" {
        pub fn RtlDeleteGrowableFunctionTable(DynamicTable: root::PVOID);
    }
    extern "C" {
        pub fn RtlLookupFunctionEntry(
            ControlPc: root::DWORD64,
            ImageBase: root::PDWORD64,
            HistoryTable: root::PUNWIND_HISTORY_TABLE,
        ) -> root::PRUNTIME_FUNCTION;
    }
    extern "C" {
        pub fn RtlRestoreContext(
            ContextRecord: root::PCONTEXT,
            ExceptionRecord: *mut root::_EXCEPTION_RECORD,
        );
    }
    extern "C" {
        pub fn RtlUnwindEx(
            TargetFrame: root::PVOID,
            TargetIp: root::PVOID,
            ExceptionRecord: root::PEXCEPTION_RECORD,
            ReturnValue: root::PVOID,
            ContextRecord: root::PCONTEXT,
            HistoryTable: root::PUNWIND_HISTORY_TABLE,
        );
    }
    extern "C" {
        pub fn RtlVirtualUnwind(
            HandlerType: u32,
            ImageBase: root::DWORD64,
            ControlPc: root::DWORD64,
            FunctionEntry: root::PRUNTIME_FUNCTION,
            ContextRecord: root::PCONTEXT,
            HandlerData: *mut root::PVOID,
            EstablisherFrame: root::PDWORD64,
            ContextPointers: root::PKNONVOLATILE_CONTEXT_POINTERS,
        ) -> root::PEXCEPTION_ROUTINE;
    }
    extern "C" {
        pub fn RtlRaiseException(ExceptionRecord: root::PEXCEPTION_RECORD);
    }
    extern "C" {
        pub fn RtlPcToFileHeader(
            PcValue: root::PVOID,
            BaseOfImage: *mut root::PVOID,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn RtlCompareMemory(
            Source1: *const ::std::os::raw::c_void,
            Source2: *const ::std::os::raw::c_void,
            Length: root::SIZE_T,
        ) -> root::SIZE_T;
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _SLIST_ENTRY {
        pub Next: *mut root::_SLIST_ENTRY,
    }
    pub type SLIST_ENTRY = root::_SLIST_ENTRY;
    pub type PSLIST_ENTRY = *mut root::_SLIST_ENTRY;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Copy, Clone)]
    pub union _SLIST_HEADER {
        pub __bindgen_anon_1: root::_SLIST_HEADER__bindgen_ty_1,
        pub HeaderX64: root::_SLIST_HEADER__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SLIST_HEADER__bindgen_ty_1 {
        pub Alignment: root::ULONGLONG,
        pub Region: root::ULONGLONG,
    }
    #[repr(C)]
    #[repr(align(8))]
    #[derive(Debug, Copy, Clone)]
    pub struct _SLIST_HEADER__bindgen_ty_2 {
        pub _bitfield_align_1: [u64; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 16usize]>,
    }
    impl _SLIST_HEADER__bindgen_ty_2 {
        #[inline]
        pub fn Depth(&self) -> root::ULONGLONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
        }
        #[inline]
        pub fn set_Depth(&mut self, val: root::ULONGLONG) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn Sequence(&self) -> root::ULONGLONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 48u8) as u64) }
        }
        #[inline]
        pub fn set_Sequence(&mut self, val: root::ULONGLONG) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 48u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> root::ULONGLONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 4u8) as u64) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: root::ULONGLONG) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(64usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn NextEntry(&self) -> root::ULONGLONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(68usize, 60u8) as u64) }
        }
        #[inline]
        pub fn set_NextEntry(&mut self, val: root::ULONGLONG) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(68usize, 60u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Depth: root::ULONGLONG,
            Sequence: root::ULONGLONG,
            Reserved: root::ULONGLONG,
            NextEntry: root::ULONGLONG,
        ) -> root::__BindgenBitfieldUnit<[u8; 16usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 16usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 16u8, {
                let Depth: u64 = unsafe { ::std::mem::transmute(Depth) };
                Depth as u64
            });
            __bindgen_bitfield_unit.set(16usize, 48u8, {
                let Sequence: u64 = unsafe { ::std::mem::transmute(Sequence) };
                Sequence as u64
            });
            __bindgen_bitfield_unit.set(64usize, 4u8, {
                let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit.set(68usize, 60u8, {
                let NextEntry: u64 = unsafe { ::std::mem::transmute(NextEntry) };
                NextEntry as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type SLIST_HEADER = root::_SLIST_HEADER;
    pub type PSLIST_HEADER = *mut root::_SLIST_HEADER;
    extern "C" {
        pub fn RtlInitializeSListHead(ListHead: root::PSLIST_HEADER);
    }
    extern "C" {
        pub fn RtlFirstEntrySList(ListHead: *const root::SLIST_HEADER) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn RtlInterlockedPopEntrySList(ListHead: root::PSLIST_HEADER) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn RtlInterlockedPushEntrySList(
            ListHead: root::PSLIST_HEADER,
            ListEntry: root::PSLIST_ENTRY,
        ) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn RtlInterlockedPushListSListEx(
            ListHead: root::PSLIST_HEADER,
            List: root::PSLIST_ENTRY,
            ListEnd: root::PSLIST_ENTRY,
            Count: u32,
        ) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn RtlInterlockedFlushSList(ListHead: root::PSLIST_HEADER) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn RtlQueryDepthSList(ListHead: root::PSLIST_HEADER) -> u16;
    }
    extern "C" {
        pub fn RtlGetReturnAddressHijackTarget() -> u64;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RTL_RUN_ONCE {
        pub Ptr: root::PVOID,
    }
    pub type RTL_RUN_ONCE = root::_RTL_RUN_ONCE;
    pub type PRTL_RUN_ONCE = *mut root::_RTL_RUN_ONCE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RTL_BARRIER {
        pub Reserved1: u32,
        pub Reserved2: u32,
        pub Reserved3: [u64; 2usize],
        pub Reserved4: u32,
        pub Reserved5: u32,
    }
    pub type RTL_BARRIER = root::_RTL_BARRIER;
    pub type PRTL_BARRIER = *mut root::_RTL_BARRIER;
    extern "C" {
        pub fn __fastfail(Code: u32);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MESSAGE_RESOURCE_ENTRY {
        pub Length: u16,
        pub Flags: u16,
        pub Text: [u8; 1usize],
    }
    pub type MESSAGE_RESOURCE_ENTRY = root::_MESSAGE_RESOURCE_ENTRY;
    pub type PMESSAGE_RESOURCE_ENTRY = *mut root::_MESSAGE_RESOURCE_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MESSAGE_RESOURCE_BLOCK {
        pub LowId: u32,
        pub HighId: u32,
        pub OffsetToEntries: u32,
    }
    pub type MESSAGE_RESOURCE_BLOCK = root::_MESSAGE_RESOURCE_BLOCK;
    pub type PMESSAGE_RESOURCE_BLOCK = *mut root::_MESSAGE_RESOURCE_BLOCK;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MESSAGE_RESOURCE_DATA {
        pub NumberOfBlocks: u32,
        pub Blocks: [root::MESSAGE_RESOURCE_BLOCK; 1usize],
    }
    pub type MESSAGE_RESOURCE_DATA = root::_MESSAGE_RESOURCE_DATA;
    pub type PMESSAGE_RESOURCE_DATA = *mut root::_MESSAGE_RESOURCE_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OSVERSIONINFOA {
        pub dwOSVersionInfoSize: u32,
        pub dwMajorVersion: u32,
        pub dwMinorVersion: u32,
        pub dwBuildNumber: u32,
        pub dwPlatformId: u32,
        pub szCSDVersion: [i8; 128usize],
    }
    pub type OSVERSIONINFOA = root::_OSVERSIONINFOA;
    pub type POSVERSIONINFOA = *mut root::_OSVERSIONINFOA;
    pub type LPOSVERSIONINFOA = *mut root::_OSVERSIONINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OSVERSIONINFOW {
        pub dwOSVersionInfoSize: u32,
        pub dwMajorVersion: u32,
        pub dwMinorVersion: u32,
        pub dwBuildNumber: u32,
        pub dwPlatformId: u32,
        pub szCSDVersion: [u16; 128usize],
    }
    pub type OSVERSIONINFOW = root::_OSVERSIONINFOW;
    pub type POSVERSIONINFOW = *mut root::_OSVERSIONINFOW;
    pub type LPOSVERSIONINFOW = *mut root::_OSVERSIONINFOW;
    pub type RTL_OSVERSIONINFOW = root::_OSVERSIONINFOW;
    pub type PRTL_OSVERSIONINFOW = *mut root::_OSVERSIONINFOW;
    pub type OSVERSIONINFO = root::OSVERSIONINFOA;
    pub type POSVERSIONINFO = root::POSVERSIONINFOA;
    pub type LPOSVERSIONINFO = root::LPOSVERSIONINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OSVERSIONINFOEXA {
        pub dwOSVersionInfoSize: u32,
        pub dwMajorVersion: u32,
        pub dwMinorVersion: u32,
        pub dwBuildNumber: u32,
        pub dwPlatformId: u32,
        pub szCSDVersion: [i8; 128usize],
        pub wServicePackMajor: u16,
        pub wServicePackMinor: u16,
        pub wSuiteMask: u16,
        pub wProductType: u8,
        pub wReserved: u8,
    }
    pub type OSVERSIONINFOEXA = root::_OSVERSIONINFOEXA;
    pub type POSVERSIONINFOEXA = *mut root::_OSVERSIONINFOEXA;
    pub type LPOSVERSIONINFOEXA = *mut root::_OSVERSIONINFOEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OSVERSIONINFOEXW {
        pub dwOSVersionInfoSize: u32,
        pub dwMajorVersion: u32,
        pub dwMinorVersion: u32,
        pub dwBuildNumber: u32,
        pub dwPlatformId: u32,
        pub szCSDVersion: [u16; 128usize],
        pub wServicePackMajor: u16,
        pub wServicePackMinor: u16,
        pub wSuiteMask: u16,
        pub wProductType: u8,
        pub wReserved: u8,
    }
    pub type OSVERSIONINFOEXW = root::_OSVERSIONINFOEXW;
    pub type POSVERSIONINFOEXW = *mut root::_OSVERSIONINFOEXW;
    pub type LPOSVERSIONINFOEXW = *mut root::_OSVERSIONINFOEXW;
    pub type RTL_OSVERSIONINFOEXW = root::_OSVERSIONINFOEXW;
    pub type PRTL_OSVERSIONINFOEXW = *mut root::_OSVERSIONINFOEXW;
    pub type OSVERSIONINFOEX = root::OSVERSIONINFOEXA;
    pub type POSVERSIONINFOEX = root::POSVERSIONINFOEXA;
    pub type LPOSVERSIONINFOEX = root::LPOSVERSIONINFOEXA;
    extern "C" {
        pub fn VerSetConditionMask(
            ConditionMask: root::ULONGLONG,
            TypeMask: u32,
            Condition: u8,
        ) -> root::ULONGLONG;
    }
    extern "C" {
        pub fn RtlGetProductInfo(
            OSMajorVersion: u32,
            OSMinorVersion: u32,
            SpMajorVersion: u32,
            SpMinorVersion: u32,
            ReturnedProductType: root::PDWORD,
        ) -> root::BOOLEAN;
    }
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadInvalidInfoClass:
        root::_RTL_UMS_THREAD_INFO_CLASS = 0;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadUserContext: root::_RTL_UMS_THREAD_INFO_CLASS = 1;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadPriority: root::_RTL_UMS_THREAD_INFO_CLASS = 2;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadAffinity: root::_RTL_UMS_THREAD_INFO_CLASS = 3;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadTeb: root::_RTL_UMS_THREAD_INFO_CLASS = 4;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadIsSuspended: root::_RTL_UMS_THREAD_INFO_CLASS = 5;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadIsTerminated: root::_RTL_UMS_THREAD_INFO_CLASS =
        6;
    pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadMaxInfoClass: root::_RTL_UMS_THREAD_INFO_CLASS =
        7;
    pub type _RTL_UMS_THREAD_INFO_CLASS = i32;
    pub use self::super::root::_RTL_UMS_THREAD_INFO_CLASS as RTL_UMS_THREAD_INFO_CLASS;
    pub type PRTL_UMS_THREAD_INFO_CLASS = *mut root::_RTL_UMS_THREAD_INFO_CLASS;
    pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerStartup: root::_RTL_UMS_SCHEDULER_REASON = 0;
    pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerThreadBlocked: root::_RTL_UMS_SCHEDULER_REASON =
        1;
    pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerThreadYield: root::_RTL_UMS_SCHEDULER_REASON =
        2;
    pub type _RTL_UMS_SCHEDULER_REASON = i32;
    pub use self::super::root::_RTL_UMS_SCHEDULER_REASON as RTL_UMS_SCHEDULER_REASON;
    pub type PRTL_UMS_SCHEDULER_REASON = *mut root::_RTL_UMS_SCHEDULER_REASON;
    pub type PRTL_UMS_SCHEDULER_ENTRY_POINT = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::RTL_UMS_SCHEDULER_REASON,
            arg2: u64,
            arg3: root::PVOID,
        ),
    >;
    extern "C" {
        pub fn RtlCrc32(
            Buffer: *const ::std::os::raw::c_void,
            Size: root::size_t,
            InitialCrc: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlCrc64(
            Buffer: *const ::std::os::raw::c_void,
            Size: root::size_t,
            InitialCrc: root::ULONGLONG,
        ) -> root::ULONGLONG;
    }
    pub const _OS_DEPLOYEMENT_STATE_VALUES_OS_DEPLOYMENT_STANDARD:
        root::_OS_DEPLOYEMENT_STATE_VALUES = 1;
    pub const _OS_DEPLOYEMENT_STATE_VALUES_OS_DEPLOYMENT_COMPACT:
        root::_OS_DEPLOYEMENT_STATE_VALUES = 2;
    pub type _OS_DEPLOYEMENT_STATE_VALUES = i32;
    pub use self::super::root::_OS_DEPLOYEMENT_STATE_VALUES as OS_DEPLOYEMENT_STATE_VALUES;
    extern "C" {
        pub fn RtlOsDeploymentState(Flags: u32) -> root::OS_DEPLOYEMENT_STATE_VALUES;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NV_MEMORY_RANGE {
        pub BaseAddress: *mut ::std::os::raw::c_void,
        pub Length: root::SIZE_T,
    }
    pub type NV_MEMORY_RANGE = root::_NV_MEMORY_RANGE;
    pub type PNV_MEMORY_RANGE = *mut root::_NV_MEMORY_RANGE;
    extern "C" {
        pub fn RtlGetNonVolatileToken(
            NvBuffer: root::PVOID,
            Size: root::SIZE_T,
            NvToken: *mut root::PVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlFreeNonVolatileToken(NvToken: root::PVOID) -> u32;
    }
    extern "C" {
        pub fn RtlFlushNonVolatileMemory(
            NvToken: root::PVOID,
            NvBuffer: root::PVOID,
            Size: root::SIZE_T,
            Flags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlDrainNonVolatileFlush(NvToken: root::PVOID) -> u32;
    }
    extern "C" {
        pub fn RtlWriteNonVolatileMemory(
            NvToken: root::PVOID,
            NvDestination: *mut ::std::os::raw::c_void,
            Source: *const ::std::os::raw::c_void,
            Size: root::SIZE_T,
            Flags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlFillNonVolatileMemory(
            NvToken: root::PVOID,
            NvDestination: *mut ::std::os::raw::c_void,
            Size: root::SIZE_T,
            Value: u8,
            Flags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlFlushNonVolatileMemoryRanges(
            NvToken: root::PVOID,
            NvRanges: root::PNV_MEMORY_RANGE,
            NumRanges: root::SIZE_T,
            Flags: u32,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CORRELATION_VECTOR {
        pub Version: i8,
        pub Vector: [i8; 129usize],
    }
    pub type PCORRELATION_VECTOR = *mut root::CORRELATION_VECTOR;
    extern "C" {
        pub fn RtlInitializeCorrelationVector(
            CorrelationVector: root::PCORRELATION_VECTOR,
            Version: i32,
            Guid: *const root::GUID,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlIncrementCorrelationVector(
            CorrelationVector: root::PCORRELATION_VECTOR,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlExtendCorrelationVector(
            CorrelationVector: root::PCORRELATION_VECTOR,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlValidateCorrelationVector(Vector: root::PCORRELATION_VECTOR) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
        pub Size: u32,
        pub TriggerId: *const u16,
    }
    pub type CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = root::_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
    pub type PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = *mut root::_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
    extern "C" {
        pub fn RtlRaiseCustomSystemEventTrigger(
            TriggerConfig: root::PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
        ) -> u32;
    }
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeNone: root::_IMAGE_POLICY_ENTRY_TYPE = 0;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeBool: root::_IMAGE_POLICY_ENTRY_TYPE = 1;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt8: root::_IMAGE_POLICY_ENTRY_TYPE = 2;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt8: root::_IMAGE_POLICY_ENTRY_TYPE =
        3;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt16: root::_IMAGE_POLICY_ENTRY_TYPE =
        4;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt16: root::_IMAGE_POLICY_ENTRY_TYPE =
        5;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt32: root::_IMAGE_POLICY_ENTRY_TYPE =
        6;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt32: root::_IMAGE_POLICY_ENTRY_TYPE =
        7;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt64: root::_IMAGE_POLICY_ENTRY_TYPE =
        8;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt64: root::_IMAGE_POLICY_ENTRY_TYPE =
        9;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeAnsiString:
        root::_IMAGE_POLICY_ENTRY_TYPE = 10;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUnicodeString:
        root::_IMAGE_POLICY_ENTRY_TYPE = 11;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeOverride:
        root::_IMAGE_POLICY_ENTRY_TYPE = 12;
    pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeMaximum: root::_IMAGE_POLICY_ENTRY_TYPE =
        13;
    pub type _IMAGE_POLICY_ENTRY_TYPE = i32;
    pub use self::super::root::_IMAGE_POLICY_ENTRY_TYPE as IMAGE_POLICY_ENTRY_TYPE;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdNone: root::_IMAGE_POLICY_ID = 0;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdEtw: root::_IMAGE_POLICY_ID = 1;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdDebug: root::_IMAGE_POLICY_ID = 2;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDump: root::_IMAGE_POLICY_ID = 3;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDumpKey: root::_IMAGE_POLICY_ID = 4;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDumpKeyGuid: root::_IMAGE_POLICY_ID = 5;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdParentSd: root::_IMAGE_POLICY_ID = 6;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdParentSdRev: root::_IMAGE_POLICY_ID = 7;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdSvn: root::_IMAGE_POLICY_ID = 8;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdDeviceId: root::_IMAGE_POLICY_ID = 9;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdCapability: root::_IMAGE_POLICY_ID = 10;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdScenarioId: root::_IMAGE_POLICY_ID = 11;
    pub const _IMAGE_POLICY_ID_ImagePolicyIdMaximum: root::_IMAGE_POLICY_ID = 12;
    pub type _IMAGE_POLICY_ID = i32;
    pub use self::super::root::_IMAGE_POLICY_ID as IMAGE_POLICY_ID;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _IMAGE_POLICY_ENTRY {
        pub Type: root::IMAGE_POLICY_ENTRY_TYPE,
        pub PolicyId: root::IMAGE_POLICY_ID,
        pub u: root::_IMAGE_POLICY_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _IMAGE_POLICY_ENTRY__bindgen_ty_1 {
        pub None: *const ::std::os::raw::c_void,
        pub BoolValue: root::BOOLEAN,
        pub Int8Value: root::INT8,
        pub UInt8Value: root::UINT8,
        pub Int16Value: root::INT16,
        pub UInt16Value: root::UINT16,
        pub Int32Value: root::INT32,
        pub UInt32Value: root::UINT32,
        pub Int64Value: root::INT64,
        pub UInt64Value: root::UINT64,
        pub AnsiStringValue: *const i8,
        pub UnicodeStringValue: *const u16,
    }
    pub type IMAGE_POLICY_ENTRY = root::_IMAGE_POLICY_ENTRY;
    pub type PCIMAGE_POLICY_ENTRY = *const root::IMAGE_POLICY_ENTRY;
    #[repr(C)]
    pub struct _IMAGE_POLICY_METADATA {
        pub Version: u8,
        pub Reserved0: [u8; 7usize],
        pub ApplicationId: root::ULONGLONG,
        pub Policies: root::__IncompleteArrayField<root::IMAGE_POLICY_ENTRY>,
    }
    pub type IMAGE_POLICY_METADATA = root::_IMAGE_POLICY_METADATA;
    pub type PCIMAGE_POLICY_METADATA = *const root::IMAGE_POLICY_METADATA;
    extern "C" {
        pub fn RtlIsZeroMemory(Buffer: root::PVOID, Length: root::SIZE_T) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn RtlNormalizeSecurityDescriptor(
            SecurityDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            SecurityDescriptorLength: u32,
            NewSecurityDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            NewSecurityDescriptorLength: root::PDWORD,
            CheckOnly: root::BOOLEAN,
        ) -> root::BOOLEAN;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RTL_CRITICAL_SECTION_DEBUG {
        pub Type: u16,
        pub CreatorBackTraceIndex: u16,
        pub CriticalSection: *mut root::_RTL_CRITICAL_SECTION,
        pub ProcessLocksList: root::LIST_ENTRY,
        pub EntryCount: u32,
        pub ContentionCount: u32,
        pub Flags: u32,
        pub CreatorBackTraceIndexHigh: u16,
        pub SpareWORD: u16,
    }
    pub type RTL_CRITICAL_SECTION_DEBUG = root::_RTL_CRITICAL_SECTION_DEBUG;
    pub type PRTL_CRITICAL_SECTION_DEBUG = *mut root::_RTL_CRITICAL_SECTION_DEBUG;
    pub type RTL_RESOURCE_DEBUG = root::_RTL_CRITICAL_SECTION_DEBUG;
    pub type PRTL_RESOURCE_DEBUG = *mut root::_RTL_CRITICAL_SECTION_DEBUG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RTL_CRITICAL_SECTION {
        pub DebugInfo: root::PRTL_CRITICAL_SECTION_DEBUG,
        pub LockCount: i32,
        pub RecursionCount: i32,
        pub OwningThread: root::HANDLE,
        pub LockSemaphore: root::HANDLE,
        pub SpinCount: u64,
    }
    pub type RTL_CRITICAL_SECTION = root::_RTL_CRITICAL_SECTION;
    pub type PRTL_CRITICAL_SECTION = *mut root::_RTL_CRITICAL_SECTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RTL_SRWLOCK {
        pub Ptr: root::PVOID,
    }
    pub type RTL_SRWLOCK = root::_RTL_SRWLOCK;
    pub type PRTL_SRWLOCK = *mut root::_RTL_SRWLOCK;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RTL_CONDITION_VARIABLE {
        pub Ptr: root::PVOID,
    }
    pub type RTL_CONDITION_VARIABLE = root::_RTL_CONDITION_VARIABLE;
    pub type PRTL_CONDITION_VARIABLE = *mut root::_RTL_CONDITION_VARIABLE;
    pub type PAPCFUNC = ::std::option::Option<unsafe extern "C" fn(Parameter: u64)>;
    pub type PVECTORED_EXCEPTION_HANDLER = ::std::option::Option<
        unsafe extern "C" fn(ExceptionInfo: *mut root::_EXCEPTION_POINTERS) -> i32,
    >;
    pub const _HEAP_INFORMATION_CLASS_HeapCompatibilityInformation: root::_HEAP_INFORMATION_CLASS =
        0;
    pub const _HEAP_INFORMATION_CLASS_HeapEnableTerminationOnCorruption:
        root::_HEAP_INFORMATION_CLASS = 1;
    pub const _HEAP_INFORMATION_CLASS_HeapOptimizeResources: root::_HEAP_INFORMATION_CLASS = 3;
    pub type _HEAP_INFORMATION_CLASS = i32;
    pub use self::super::root::_HEAP_INFORMATION_CLASS as HEAP_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
        pub Version: u32,
        pub Flags: u32,
    }
    pub type HEAP_OPTIMIZE_RESOURCES_INFORMATION = root::_HEAP_OPTIMIZE_RESOURCES_INFORMATION;
    pub type PHEAP_OPTIMIZE_RESOURCES_INFORMATION = *mut root::_HEAP_OPTIMIZE_RESOURCES_INFORMATION;
    pub type WAITORTIMERCALLBACKFUNC =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::PVOID, arg2: root::BOOLEAN)>;
    pub type WORKERCALLBACKFUNC = ::std::option::Option<unsafe extern "C" fn(arg1: root::PVOID)>;
    pub type APC_CALLBACK_FUNCTION = ::std::option::Option<
        unsafe extern "C" fn(arg1: u32, arg2: root::PVOID, arg3: root::PVOID),
    >;
    pub type WAITORTIMERCALLBACK = root::WAITORTIMERCALLBACKFUNC;
    pub type PFLS_CALLBACK_FUNCTION =
        ::std::option::Option<unsafe extern "C" fn(lpFlsData: root::PVOID)>;
    pub type PSECURE_MEMORY_CACHE_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(Addr: root::PVOID, Range: root::SIZE_T) -> root::BOOLEAN,
    >;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextBasicInformation:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 1;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextDetailedInformation:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 2;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_AssemblyDetailedInformationInActivationContext:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 3;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_FileInformationInAssemblyOfAssemblyInActivationContext : root :: _ACTIVATION_CONTEXT_INFO_CLASS = 4 ;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_RunlevelInformationInActivationContext:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 5;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_CompatibilityInformationInActivationContext:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 6;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextManifestResourceName:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 7;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_MaxActivationContextInfoClass:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 8;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_AssemblyDetailedInformationInActivationContxt:
        root::_ACTIVATION_CONTEXT_INFO_CLASS = 3;
    pub const _ACTIVATION_CONTEXT_INFO_CLASS_FileInformationInAssemblyOfAssemblyInActivationContxt : root :: _ACTIVATION_CONTEXT_INFO_CLASS = 4 ;
    pub type _ACTIVATION_CONTEXT_INFO_CLASS = i32;
    pub use self::super::root::_ACTIVATION_CONTEXT_INFO_CLASS as ACTIVATION_CONTEXT_INFO_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACTIVATION_CONTEXT_QUERY_INDEX {
        pub ulAssemblyIndex: u32,
        pub ulFileIndexInAssembly: u32,
    }
    pub type ACTIVATION_CONTEXT_QUERY_INDEX = root::_ACTIVATION_CONTEXT_QUERY_INDEX;
    pub type PACTIVATION_CONTEXT_QUERY_INDEX = *mut root::_ACTIVATION_CONTEXT_QUERY_INDEX;
    pub type PCACTIVATION_CONTEXT_QUERY_INDEX = *const root::_ACTIVATION_CONTEXT_QUERY_INDEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
        pub ulFlags: u32,
        pub ulFilenameLength: u32,
        pub ulPathLength: u32,
        pub lpFileName: *const u16,
        pub lpFilePath: *const u16,
    }
    pub type ASSEMBLY_FILE_DETAILED_INFORMATION = root::_ASSEMBLY_FILE_DETAILED_INFORMATION;
    pub type PASSEMBLY_FILE_DETAILED_INFORMATION = *mut root::_ASSEMBLY_FILE_DETAILED_INFORMATION;
    pub type PCASSEMBLY_FILE_DETAILED_INFORMATION = *const root::ASSEMBLY_FILE_DETAILED_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
        pub ulFlags: u32,
        pub ulEncodedAssemblyIdentityLength: u32,
        pub ulManifestPathType: u32,
        pub ulManifestPathLength: u32,
        pub liManifestLastWriteTime: root::LARGE_INTEGER,
        pub ulPolicyPathType: u32,
        pub ulPolicyPathLength: u32,
        pub liPolicyLastWriteTime: root::LARGE_INTEGER,
        pub ulMetadataSatelliteRosterIndex: u32,
        pub ulManifestVersionMajor: u32,
        pub ulManifestVersionMinor: u32,
        pub ulPolicyVersionMajor: u32,
        pub ulPolicyVersionMinor: u32,
        pub ulAssemblyDirectoryNameLength: u32,
        pub lpAssemblyEncodedAssemblyIdentity: *const u16,
        pub lpAssemblyManifestPath: *const u16,
        pub lpAssemblyPolicyPath: *const u16,
        pub lpAssemblyDirectoryName: *const u16,
        pub ulFileCount: u32,
    }
    pub type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
        root::_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
    pub type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
        *mut root::_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
    pub type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
        *const root::_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
    pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_UNSPECIFIED:
        root::ACTCTX_REQUESTED_RUN_LEVEL = 0;
    pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_AS_INVOKER:
        root::ACTCTX_REQUESTED_RUN_LEVEL = 1;
    pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE:
        root::ACTCTX_REQUESTED_RUN_LEVEL = 2;
    pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_REQUIRE_ADMIN:
        root::ACTCTX_REQUESTED_RUN_LEVEL = 3;
    pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_NUMBERS:
        root::ACTCTX_REQUESTED_RUN_LEVEL = 4;
    pub type ACTCTX_REQUESTED_RUN_LEVEL = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
        pub ulFlags: u32,
        pub RunLevel: root::ACTCTX_REQUESTED_RUN_LEVEL,
        pub UiAccess: u32,
    }
    pub type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION =
        root::_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
    pub type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION =
        *mut root::_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
    pub type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION =
        *const root::_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
    pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN:
        root::ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 0;
    pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS:
        root::ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 1;
    pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION:
        root::ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 2;
    pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED : root :: ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 3 ;
    pub type ACTCTX_COMPATIBILITY_ELEMENT_TYPE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMPATIBILITY_CONTEXT_ELEMENT {
        pub Id: root::GUID,
        pub Type: root::ACTCTX_COMPATIBILITY_ELEMENT_TYPE,
        pub MaxVersionTested: root::ULONGLONG,
    }
    pub type COMPATIBILITY_CONTEXT_ELEMENT = root::_COMPATIBILITY_CONTEXT_ELEMENT;
    pub type PCOMPATIBILITY_CONTEXT_ELEMENT = *mut root::_COMPATIBILITY_CONTEXT_ELEMENT;
    pub type PCCOMPATIBILITY_CONTEXT_ELEMENT = *const root::_COMPATIBILITY_CONTEXT_ELEMENT;
    #[repr(C)]
    #[derive(Debug)]
    pub struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
        pub ElementCount: u32,
        pub Elements: root::__IncompleteArrayField<root::COMPATIBILITY_CONTEXT_ELEMENT>,
    }
    pub type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
        root::_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
    pub type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
        *mut root::_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
    pub type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
        *const root::_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SUPPORTED_OS_INFO {
        pub MajorVersion: u16,
        pub MinorVersion: u16,
    }
    pub type SUPPORTED_OS_INFO = root::_SUPPORTED_OS_INFO;
    pub type PSUPPORTED_OS_INFO = *mut root::_SUPPORTED_OS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MAXVERSIONTESTED_INFO {
        pub MaxVersionTested: root::ULONGLONG,
    }
    pub type MAXVERSIONTESTED_INFO = root::_MAXVERSIONTESTED_INFO;
    pub type PMAXVERSIONTESTED_INFO = *mut root::_MAXVERSIONTESTED_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
        pub dwFlags: u32,
        pub ulFormatVersion: u32,
        pub ulAssemblyCount: u32,
        pub ulRootManifestPathType: u32,
        pub ulRootManifestPathChars: u32,
        pub ulRootConfigurationPathType: u32,
        pub ulRootConfigurationPathChars: u32,
        pub ulAppDirPathType: u32,
        pub ulAppDirPathChars: u32,
        pub lpRootManifestPath: *const u16,
        pub lpRootConfigurationPath: *const u16,
        pub lpAppDirPath: *const u16,
    }
    pub type ACTIVATION_CONTEXT_DETAILED_INFORMATION =
        root::_ACTIVATION_CONTEXT_DETAILED_INFORMATION;
    pub type PACTIVATION_CONTEXT_DETAILED_INFORMATION =
        *mut root::_ACTIVATION_CONTEXT_DETAILED_INFORMATION;
    pub type PCACTIVATION_CONTEXT_DETAILED_INFORMATION =
        *const root::_ACTIVATION_CONTEXT_DETAILED_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HARDWARE_COUNTER_DATA {
        pub Type: root::HARDWARE_COUNTER_TYPE,
        pub Reserved: u32,
        pub Value: root::DWORD64,
    }
    pub type HARDWARE_COUNTER_DATA = root::_HARDWARE_COUNTER_DATA;
    pub type PHARDWARE_COUNTER_DATA = *mut root::_HARDWARE_COUNTER_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PERFORMANCE_DATA {
        pub Size: u16,
        pub Version: u8,
        pub HwCountersCount: u8,
        pub ContextSwitchCount: u32,
        pub WaitReasonBitMap: root::DWORD64,
        pub CycleTime: root::DWORD64,
        pub RetryCount: u32,
        pub Reserved: u32,
        pub HwCounters: [root::HARDWARE_COUNTER_DATA; 16usize],
    }
    pub type PERFORMANCE_DATA = root::_PERFORMANCE_DATA;
    pub type PPERFORMANCE_DATA = *mut root::_PERFORMANCE_DATA;
    extern "C" {
        pub fn RtlGetDeviceFamilyInfoEnum(
            pullUAPInfo: *mut root::ULONGLONG,
            pulDeviceFamily: *mut u32,
            pulDeviceForm: *mut u32,
        );
    }
    extern "C" {
        pub fn RtlConvertDeviceFamilyInfoToString(
            pulDeviceFamilyBufferSize: root::PDWORD,
            pulDeviceFormBufferSize: root::PDWORD,
            DeviceFamily: *mut u16,
            DeviceForm: *mut u16,
        ) -> u32;
    }
    extern "C" {
        pub fn RtlSwitchedVVI(
            VersionInfo: root::PRTL_OSVERSIONINFOEXW,
            TypeMask: u32,
            ConditionMask: root::ULONGLONG,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EVENTLOGRECORD {
        pub Length: u32,
        pub Reserved: u32,
        pub RecordNumber: u32,
        pub TimeGenerated: u32,
        pub TimeWritten: u32,
        pub EventID: u32,
        pub EventType: u16,
        pub NumStrings: u16,
        pub EventCategory: u16,
        pub ReservedFlags: u16,
        pub ClosingRecordNumber: u32,
        pub StringOffset: u32,
        pub UserSidLength: u32,
        pub UserSidOffset: u32,
        pub DataLength: u32,
        pub DataOffset: u32,
    }
    pub type EVENTLOGRECORD = root::_EVENTLOGRECORD;
    pub type PEVENTLOGRECORD = *mut root::_EVENTLOGRECORD;
    pub type EVENTSFORLOGFILE = root::_EVENTSFORLOGFILE;
    pub type PEVENTSFORLOGFILE = *mut root::_EVENTSFORLOGFILE;
    pub type PACKEDEVENTINFO = root::_PACKEDEVENTINFO;
    pub type PPACKEDEVENTINFO = *mut root::_PACKEDEVENTINFO;
    #[repr(C)]
    #[derive(Debug)]
    pub struct _EVENTSFORLOGFILE {
        pub ulSize: u32,
        pub szLogicalLogFile: [u16; 256usize],
        pub ulNumRecords: u32,
        pub pEventLogRecords: root::__IncompleteArrayField<root::EVENTLOGRECORD>,
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct _PACKEDEVENTINFO {
        pub ulSize: u32,
        pub ulNumEventsForLogFile: u32,
        pub ulOffsets: root::__IncompleteArrayField<u32>,
    }
    pub const _CM_SERVICE_NODE_TYPE_DriverType: root::_CM_SERVICE_NODE_TYPE = 1;
    pub const _CM_SERVICE_NODE_TYPE_FileSystemType: root::_CM_SERVICE_NODE_TYPE = 2;
    pub const _CM_SERVICE_NODE_TYPE_Win32ServiceOwnProcess: root::_CM_SERVICE_NODE_TYPE = 16;
    pub const _CM_SERVICE_NODE_TYPE_Win32ServiceShareProcess: root::_CM_SERVICE_NODE_TYPE = 32;
    pub const _CM_SERVICE_NODE_TYPE_AdapterType: root::_CM_SERVICE_NODE_TYPE = 4;
    pub const _CM_SERVICE_NODE_TYPE_RecognizerType: root::_CM_SERVICE_NODE_TYPE = 8;
    pub type _CM_SERVICE_NODE_TYPE = i32;
    pub use self::super::root::_CM_SERVICE_NODE_TYPE as SERVICE_NODE_TYPE;
    pub const _CM_SERVICE_LOAD_TYPE_BootLoad: root::_CM_SERVICE_LOAD_TYPE = 0;
    pub const _CM_SERVICE_LOAD_TYPE_SystemLoad: root::_CM_SERVICE_LOAD_TYPE = 1;
    pub const _CM_SERVICE_LOAD_TYPE_AutoLoad: root::_CM_SERVICE_LOAD_TYPE = 2;
    pub const _CM_SERVICE_LOAD_TYPE_DemandLoad: root::_CM_SERVICE_LOAD_TYPE = 3;
    pub const _CM_SERVICE_LOAD_TYPE_DisableLoad: root::_CM_SERVICE_LOAD_TYPE = 4;
    pub type _CM_SERVICE_LOAD_TYPE = i32;
    pub use self::super::root::_CM_SERVICE_LOAD_TYPE as SERVICE_LOAD_TYPE;
    pub const _CM_ERROR_CONTROL_TYPE_IgnoreError: root::_CM_ERROR_CONTROL_TYPE = 0;
    pub const _CM_ERROR_CONTROL_TYPE_NormalError: root::_CM_ERROR_CONTROL_TYPE = 1;
    pub const _CM_ERROR_CONTROL_TYPE_SevereError: root::_CM_ERROR_CONTROL_TYPE = 2;
    pub const _CM_ERROR_CONTROL_TYPE_CriticalError: root::_CM_ERROR_CONTROL_TYPE = 3;
    pub type _CM_ERROR_CONTROL_TYPE = i32;
    pub use self::super::root::_CM_ERROR_CONTROL_TYPE as SERVICE_ERROR_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_ERASE {
        pub Type: u32,
        pub Immediate: root::BOOLEAN,
    }
    pub type TAPE_ERASE = root::_TAPE_ERASE;
    pub type PTAPE_ERASE = *mut root::_TAPE_ERASE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_PREPARE {
        pub Operation: u32,
        pub Immediate: root::BOOLEAN,
    }
    pub type TAPE_PREPARE = root::_TAPE_PREPARE;
    pub type PTAPE_PREPARE = *mut root::_TAPE_PREPARE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_WRITE_MARKS {
        pub Type: u32,
        pub Count: u32,
        pub Immediate: root::BOOLEAN,
    }
    pub type TAPE_WRITE_MARKS = root::_TAPE_WRITE_MARKS;
    pub type PTAPE_WRITE_MARKS = *mut root::_TAPE_WRITE_MARKS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TAPE_GET_POSITION {
        pub Type: u32,
        pub Partition: u32,
        pub Offset: root::LARGE_INTEGER,
    }
    pub type TAPE_GET_POSITION = root::_TAPE_GET_POSITION;
    pub type PTAPE_GET_POSITION = *mut root::_TAPE_GET_POSITION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TAPE_SET_POSITION {
        pub Method: u32,
        pub Partition: u32,
        pub Offset: root::LARGE_INTEGER,
        pub Immediate: root::BOOLEAN,
    }
    pub type TAPE_SET_POSITION = root::_TAPE_SET_POSITION;
    pub type PTAPE_SET_POSITION = *mut root::_TAPE_SET_POSITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_GET_DRIVE_PARAMETERS {
        pub ECC: root::BOOLEAN,
        pub Compression: root::BOOLEAN,
        pub DataPadding: root::BOOLEAN,
        pub ReportSetmarks: root::BOOLEAN,
        pub DefaultBlockSize: u32,
        pub MaximumBlockSize: u32,
        pub MinimumBlockSize: u32,
        pub MaximumPartitionCount: u32,
        pub FeaturesLow: u32,
        pub FeaturesHigh: u32,
        pub EOTWarningZoneSize: u32,
    }
    pub type TAPE_GET_DRIVE_PARAMETERS = root::_TAPE_GET_DRIVE_PARAMETERS;
    pub type PTAPE_GET_DRIVE_PARAMETERS = *mut root::_TAPE_GET_DRIVE_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_SET_DRIVE_PARAMETERS {
        pub ECC: root::BOOLEAN,
        pub Compression: root::BOOLEAN,
        pub DataPadding: root::BOOLEAN,
        pub ReportSetmarks: root::BOOLEAN,
        pub EOTWarningZoneSize: u32,
    }
    pub type TAPE_SET_DRIVE_PARAMETERS = root::_TAPE_SET_DRIVE_PARAMETERS;
    pub type PTAPE_SET_DRIVE_PARAMETERS = *mut root::_TAPE_SET_DRIVE_PARAMETERS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TAPE_GET_MEDIA_PARAMETERS {
        pub Capacity: root::LARGE_INTEGER,
        pub Remaining: root::LARGE_INTEGER,
        pub BlockSize: u32,
        pub PartitionCount: u32,
        pub WriteProtected: root::BOOLEAN,
    }
    pub type TAPE_GET_MEDIA_PARAMETERS = root::_TAPE_GET_MEDIA_PARAMETERS;
    pub type PTAPE_GET_MEDIA_PARAMETERS = *mut root::_TAPE_GET_MEDIA_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_SET_MEDIA_PARAMETERS {
        pub BlockSize: u32,
    }
    pub type TAPE_SET_MEDIA_PARAMETERS = root::_TAPE_SET_MEDIA_PARAMETERS;
    pub type PTAPE_SET_MEDIA_PARAMETERS = *mut root::_TAPE_SET_MEDIA_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_CREATE_PARTITION {
        pub Method: u32,
        pub Count: u32,
        pub Size: u32,
    }
    pub type TAPE_CREATE_PARTITION = root::_TAPE_CREATE_PARTITION;
    pub type PTAPE_CREATE_PARTITION = *mut root::_TAPE_CREATE_PARTITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_WMI_OPERATIONS {
        pub Method: u32,
        pub DataBufferSize: u32,
        pub DataBuffer: root::PVOID,
    }
    pub type TAPE_WMI_OPERATIONS = root::_TAPE_WMI_OPERATIONS;
    pub type PTAPE_WMI_OPERATIONS = *mut root::_TAPE_WMI_OPERATIONS;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveProblemNone: root::_TAPE_DRIVE_PROBLEM_TYPE = 0;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWriteWarning: root::_TAPE_DRIVE_PROBLEM_TYPE =
        1;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWriteError: root::_TAPE_DRIVE_PROBLEM_TYPE = 2;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWarning: root::_TAPE_DRIVE_PROBLEM_TYPE = 3;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveWriteWarning: root::_TAPE_DRIVE_PROBLEM_TYPE = 4;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadError: root::_TAPE_DRIVE_PROBLEM_TYPE = 5;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveWriteError: root::_TAPE_DRIVE_PROBLEM_TYPE = 6;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveHardwareError: root::_TAPE_DRIVE_PROBLEM_TYPE = 7;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveUnsupportedMedia: root::_TAPE_DRIVE_PROBLEM_TYPE =
        8;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveScsiConnectionError:
        root::_TAPE_DRIVE_PROBLEM_TYPE = 9;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveTimetoClean: root::_TAPE_DRIVE_PROBLEM_TYPE = 10;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveCleanDriveNow: root::_TAPE_DRIVE_PROBLEM_TYPE = 11;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveMediaLifeExpired: root::_TAPE_DRIVE_PROBLEM_TYPE =
        12;
    pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveSnappedTape: root::_TAPE_DRIVE_PROBLEM_TYPE = 13;
    pub type _TAPE_DRIVE_PROBLEM_TYPE = i32;
    pub use self::super::root::_TAPE_DRIVE_PROBLEM_TYPE as TAPE_DRIVE_PROBLEM_TYPE;
    pub type UOW = root::GUID;
    pub type PUOW = *mut root::GUID;
    pub type CRM_PROTOCOL_ID = root::GUID;
    pub type PCRM_PROTOCOL_ID = *mut root::GUID;
    pub type NOTIFICATION_MASK = root::ULONG;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TRANSACTION_NOTIFICATION {
        pub TransactionKey: root::PVOID,
        pub TransactionNotification: root::ULONG,
        pub TmVirtualClock: root::LARGE_INTEGER,
        pub ArgumentLength: root::ULONG,
    }
    pub type TRANSACTION_NOTIFICATION = root::_TRANSACTION_NOTIFICATION;
    pub type PTRANSACTION_NOTIFICATION = *mut root::_TRANSACTION_NOTIFICATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
        pub EnlistmentId: root::GUID,
        pub UOW: root::UOW,
    }
    pub type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT =
        root::_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
    pub type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT =
        *mut root::_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
        pub TmIdentity: root::GUID,
        pub Flags: root::ULONG,
    }
    pub type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT =
        root::_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
    pub type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT =
        *mut root::_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
    pub type SAVEPOINT_ID = root::ULONG;
    pub type PSAVEPOINT_ID = *mut root::ULONG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
        pub SavepointId: root::SAVEPOINT_ID,
    }
    pub type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT =
        root::_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
    pub type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT =
        *mut root::_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
        pub PropagationCookie: root::ULONG,
        pub UOW: root::GUID,
        pub TmIdentity: root::GUID,
        pub BufferLength: root::ULONG,
    }
    pub type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT =
        root::_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
    pub type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT =
        *mut root::_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
        pub MarshalCookie: root::ULONG,
        pub UOW: root::GUID,
    }
    pub type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT =
        root::_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
    pub type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT =
        *mut root::_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
    pub type TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT =
        root::TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
    pub type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT =
        *mut root::TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KCRM_MARSHAL_HEADER {
        pub VersionMajor: root::ULONG,
        pub VersionMinor: root::ULONG,
        pub NumProtocols: root::ULONG,
        pub Unused: root::ULONG,
    }
    pub type KCRM_MARSHAL_HEADER = root::_KCRM_MARSHAL_HEADER;
    pub type PKCRM_MARSHAL_HEADER = *mut root::_KCRM_MARSHAL_HEADER;
    pub type PRKCRM_MARSHAL_HEADER = *mut root::_KCRM_MARSHAL_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KCRM_TRANSACTION_BLOB {
        pub UOW: root::UOW,
        pub TmIdentity: root::GUID,
        pub IsolationLevel: root::ULONG,
        pub IsolationFlags: root::ULONG,
        pub Timeout: root::ULONG,
        pub Description: [u16; 64usize],
    }
    pub type KCRM_TRANSACTION_BLOB = root::_KCRM_TRANSACTION_BLOB;
    pub type PKCRM_TRANSACTION_BLOB = *mut root::_KCRM_TRANSACTION_BLOB;
    pub type PRKCRM_TRANSACTION_BLOB = *mut root::_KCRM_TRANSACTION_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KCRM_PROTOCOL_BLOB {
        pub ProtocolId: root::CRM_PROTOCOL_ID,
        pub StaticInfoLength: root::ULONG,
        pub TransactionIdInfoLength: root::ULONG,
        pub Unused1: root::ULONG,
        pub Unused2: root::ULONG,
    }
    pub type KCRM_PROTOCOL_BLOB = root::_KCRM_PROTOCOL_BLOB;
    pub type PKCRM_PROTOCOL_BLOB = *mut root::_KCRM_PROTOCOL_BLOB;
    pub type PRKCRM_PROTOCOL_BLOB = *mut root::_KCRM_PROTOCOL_BLOB;
    pub const _TRANSACTION_OUTCOME_TransactionOutcomeUndetermined: root::_TRANSACTION_OUTCOME = 1;
    pub const _TRANSACTION_OUTCOME_TransactionOutcomeCommitted: root::_TRANSACTION_OUTCOME = 2;
    pub const _TRANSACTION_OUTCOME_TransactionOutcomeAborted: root::_TRANSACTION_OUTCOME = 3;
    pub type _TRANSACTION_OUTCOME = i32;
    pub use self::super::root::_TRANSACTION_OUTCOME as TRANSACTION_OUTCOME;
    pub const _TRANSACTION_STATE_TransactionStateNormal: root::_TRANSACTION_STATE = 1;
    pub const _TRANSACTION_STATE_TransactionStateIndoubt: root::_TRANSACTION_STATE = 2;
    pub const _TRANSACTION_STATE_TransactionStateCommittedNotify: root::_TRANSACTION_STATE = 3;
    pub type _TRANSACTION_STATE = i32;
    pub use self::super::root::_TRANSACTION_STATE as TRANSACTION_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_BASIC_INFORMATION {
        pub TransactionId: root::GUID,
        pub State: u32,
        pub Outcome: u32,
    }
    pub type TRANSACTION_BASIC_INFORMATION = root::_TRANSACTION_BASIC_INFORMATION;
    pub type PTRANSACTION_BASIC_INFORMATION = *mut root::_TRANSACTION_BASIC_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
        pub TmIdentity: root::GUID,
        pub VirtualClock: root::LARGE_INTEGER,
    }
    pub type TRANSACTIONMANAGER_BASIC_INFORMATION = root::_TRANSACTIONMANAGER_BASIC_INFORMATION;
    pub type PTRANSACTIONMANAGER_BASIC_INFORMATION =
        *mut root::_TRANSACTIONMANAGER_BASIC_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTIONMANAGER_LOG_INFORMATION {
        pub LogIdentity: root::GUID,
    }
    pub type TRANSACTIONMANAGER_LOG_INFORMATION = root::_TRANSACTIONMANAGER_LOG_INFORMATION;
    pub type PTRANSACTIONMANAGER_LOG_INFORMATION = *mut root::_TRANSACTIONMANAGER_LOG_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
        pub LogPathLength: u32,
        pub LogPath: [u16; 1usize],
    }
    pub type TRANSACTIONMANAGER_LOGPATH_INFORMATION = root::_TRANSACTIONMANAGER_LOGPATH_INFORMATION;
    pub type PTRANSACTIONMANAGER_LOGPATH_INFORMATION =
        *mut root::_TRANSACTIONMANAGER_LOGPATH_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
        pub LastRecoveredLsn: root::ULONGLONG,
    }
    pub type TRANSACTIONMANAGER_RECOVERY_INFORMATION =
        root::_TRANSACTIONMANAGER_RECOVERY_INFORMATION;
    pub type PTRANSACTIONMANAGER_RECOVERY_INFORMATION =
        *mut root::_TRANSACTIONMANAGER_RECOVERY_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
        pub OldestTransactionGuid: root::GUID,
    }
    pub type TRANSACTIONMANAGER_OLDEST_INFORMATION = root::_TRANSACTIONMANAGER_OLDEST_INFORMATION;
    pub type PTRANSACTIONMANAGER_OLDEST_INFORMATION =
        *mut root::_TRANSACTIONMANAGER_OLDEST_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TRANSACTION_PROPERTIES_INFORMATION {
        pub IsolationLevel: u32,
        pub IsolationFlags: u32,
        pub Timeout: root::LARGE_INTEGER,
        pub Outcome: u32,
        pub DescriptionLength: u32,
        pub Description: [u16; 1usize],
    }
    pub type TRANSACTION_PROPERTIES_INFORMATION = root::_TRANSACTION_PROPERTIES_INFORMATION;
    pub type PTRANSACTION_PROPERTIES_INFORMATION = *mut root::_TRANSACTION_PROPERTIES_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_BIND_INFORMATION {
        pub TmHandle: root::HANDLE,
    }
    pub type TRANSACTION_BIND_INFORMATION = root::_TRANSACTION_BIND_INFORMATION;
    pub type PTRANSACTION_BIND_INFORMATION = *mut root::_TRANSACTION_BIND_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_ENLISTMENT_PAIR {
        pub EnlistmentId: root::GUID,
        pub ResourceManagerId: root::GUID,
    }
    pub type TRANSACTION_ENLISTMENT_PAIR = root::_TRANSACTION_ENLISTMENT_PAIR;
    pub type PTRANSACTION_ENLISTMENT_PAIR = *mut root::_TRANSACTION_ENLISTMENT_PAIR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_ENLISTMENTS_INFORMATION {
        pub NumberOfEnlistments: u32,
        pub EnlistmentPair: [root::TRANSACTION_ENLISTMENT_PAIR; 1usize],
    }
    pub type TRANSACTION_ENLISTMENTS_INFORMATION = root::_TRANSACTION_ENLISTMENTS_INFORMATION;
    pub type PTRANSACTION_ENLISTMENTS_INFORMATION = *mut root::_TRANSACTION_ENLISTMENTS_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
        pub SuperiorEnlistmentPair: root::TRANSACTION_ENLISTMENT_PAIR,
    }
    pub type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION =
        root::_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
    pub type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION =
        *mut root::_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RESOURCEMANAGER_BASIC_INFORMATION {
        pub ResourceManagerId: root::GUID,
        pub DescriptionLength: u32,
        pub Description: [u16; 1usize],
    }
    pub type RESOURCEMANAGER_BASIC_INFORMATION = root::_RESOURCEMANAGER_BASIC_INFORMATION;
    pub type PRESOURCEMANAGER_BASIC_INFORMATION = *mut root::_RESOURCEMANAGER_BASIC_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
        pub IoCompletionPortHandle: root::HANDLE,
        pub CompletionKey: u64,
    }
    pub type RESOURCEMANAGER_COMPLETION_INFORMATION = root::_RESOURCEMANAGER_COMPLETION_INFORMATION;
    pub type PRESOURCEMANAGER_COMPLETION_INFORMATION =
        *mut root::_RESOURCEMANAGER_COMPLETION_INFORMATION;
    pub const _TRANSACTION_INFORMATION_CLASS_TransactionBasicInformation:
        root::_TRANSACTION_INFORMATION_CLASS = 0;
    pub const _TRANSACTION_INFORMATION_CLASS_TransactionPropertiesInformation:
        root::_TRANSACTION_INFORMATION_CLASS = 1;
    pub const _TRANSACTION_INFORMATION_CLASS_TransactionEnlistmentInformation:
        root::_TRANSACTION_INFORMATION_CLASS = 2;
    pub const _TRANSACTION_INFORMATION_CLASS_TransactionSuperiorEnlistmentInformation:
        root::_TRANSACTION_INFORMATION_CLASS = 3;
    pub const _TRANSACTION_INFORMATION_CLASS_TransactionBindInformation:
        root::_TRANSACTION_INFORMATION_CLASS = 4;
    pub const _TRANSACTION_INFORMATION_CLASS_TransactionDTCPrivateInformation:
        root::_TRANSACTION_INFORMATION_CLASS = 5;
    pub type _TRANSACTION_INFORMATION_CLASS = i32;
    pub use self::super::root::_TRANSACTION_INFORMATION_CLASS as TRANSACTION_INFORMATION_CLASS;
    pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerBasicInformation:
        root::_TRANSACTIONMANAGER_INFORMATION_CLASS = 0;
    pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerLogInformation:
        root::_TRANSACTIONMANAGER_INFORMATION_CLASS = 1;
    pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerLogPathInformation:
        root::_TRANSACTIONMANAGER_INFORMATION_CLASS = 2;
    pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerRecoveryInformation:
        root::_TRANSACTIONMANAGER_INFORMATION_CLASS = 4;
    pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerOnlineProbeInformation:
        root::_TRANSACTIONMANAGER_INFORMATION_CLASS = 3;
    pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerOldestTransactionInformation : root :: _TRANSACTIONMANAGER_INFORMATION_CLASS = 5 ;
    pub type _TRANSACTIONMANAGER_INFORMATION_CLASS = i32;
    pub use self::super::root::_TRANSACTIONMANAGER_INFORMATION_CLASS as TRANSACTIONMANAGER_INFORMATION_CLASS;
    pub const _RESOURCEMANAGER_INFORMATION_CLASS_ResourceManagerBasicInformation:
        root::_RESOURCEMANAGER_INFORMATION_CLASS = 0;
    pub const _RESOURCEMANAGER_INFORMATION_CLASS_ResourceManagerCompletionInformation:
        root::_RESOURCEMANAGER_INFORMATION_CLASS = 1;
    pub type _RESOURCEMANAGER_INFORMATION_CLASS = i32;
    pub use self::super::root::_RESOURCEMANAGER_INFORMATION_CLASS as RESOURCEMANAGER_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENLISTMENT_BASIC_INFORMATION {
        pub EnlistmentId: root::GUID,
        pub TransactionId: root::GUID,
        pub ResourceManagerId: root::GUID,
    }
    pub type ENLISTMENT_BASIC_INFORMATION = root::_ENLISTMENT_BASIC_INFORMATION;
    pub type PENLISTMENT_BASIC_INFORMATION = *mut root::_ENLISTMENT_BASIC_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENLISTMENT_CRM_INFORMATION {
        pub CrmTransactionManagerId: root::GUID,
        pub CrmResourceManagerId: root::GUID,
        pub CrmEnlistmentId: root::GUID,
    }
    pub type ENLISTMENT_CRM_INFORMATION = root::_ENLISTMENT_CRM_INFORMATION;
    pub type PENLISTMENT_CRM_INFORMATION = *mut root::_ENLISTMENT_CRM_INFORMATION;
    pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentBasicInformation:
        root::_ENLISTMENT_INFORMATION_CLASS = 0;
    pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentRecoveryInformation:
        root::_ENLISTMENT_INFORMATION_CLASS = 1;
    pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentCrmInformation:
        root::_ENLISTMENT_INFORMATION_CLASS = 2;
    pub type _ENLISTMENT_INFORMATION_CLASS = i32;
    pub use self::super::root::_ENLISTMENT_INFORMATION_CLASS as ENLISTMENT_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_LIST_ENTRY {
        pub UOW: root::UOW,
    }
    pub type TRANSACTION_LIST_ENTRY = root::_TRANSACTION_LIST_ENTRY;
    pub type PTRANSACTION_LIST_ENTRY = *mut root::_TRANSACTION_LIST_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSACTION_LIST_INFORMATION {
        pub NumberOfTransactions: u32,
        pub TransactionInformation: [root::TRANSACTION_LIST_ENTRY; 1usize],
    }
    pub type TRANSACTION_LIST_INFORMATION = root::_TRANSACTION_LIST_INFORMATION;
    pub type PTRANSACTION_LIST_INFORMATION = *mut root::_TRANSACTION_LIST_INFORMATION;
    pub const _KTMOBJECT_TYPE_KTMOBJECT_TRANSACTION: root::_KTMOBJECT_TYPE = 0;
    pub const _KTMOBJECT_TYPE_KTMOBJECT_TRANSACTION_MANAGER: root::_KTMOBJECT_TYPE = 1;
    pub const _KTMOBJECT_TYPE_KTMOBJECT_RESOURCE_MANAGER: root::_KTMOBJECT_TYPE = 2;
    pub const _KTMOBJECT_TYPE_KTMOBJECT_ENLISTMENT: root::_KTMOBJECT_TYPE = 3;
    pub const _KTMOBJECT_TYPE_KTMOBJECT_INVALID: root::_KTMOBJECT_TYPE = 4;
    pub type _KTMOBJECT_TYPE = i32;
    pub use self::super::root::_KTMOBJECT_TYPE as KTMOBJECT_TYPE;
    pub type PKTMOBJECT_TYPE = *mut root::_KTMOBJECT_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KTMOBJECT_CURSOR {
        pub LastQuery: root::GUID,
        pub ObjectIdCount: u32,
        pub ObjectIds: [root::GUID; 1usize],
    }
    pub type KTMOBJECT_CURSOR = root::_KTMOBJECT_CURSOR;
    pub type PKTMOBJECT_CURSOR = *mut root::_KTMOBJECT_CURSOR;
    pub type TP_VERSION = u32;
    pub type PTP_VERSION = *mut u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_CALLBACK_INSTANCE {
        _unused: [u8; 0],
    }
    pub type TP_CALLBACK_INSTANCE = root::_TP_CALLBACK_INSTANCE;
    pub type PTP_CALLBACK_INSTANCE = *mut root::_TP_CALLBACK_INSTANCE;
    pub type PTP_SIMPLE_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(Instance: root::PTP_CALLBACK_INSTANCE, Context: root::PVOID),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_POOL {
        _unused: [u8; 0],
    }
    pub type TP_POOL = root::_TP_POOL;
    pub type PTP_POOL = *mut root::_TP_POOL;
    pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_HIGH: root::_TP_CALLBACK_PRIORITY = 0;
    pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_NORMAL: root::_TP_CALLBACK_PRIORITY = 1;
    pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_LOW: root::_TP_CALLBACK_PRIORITY = 2;
    pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_INVALID: root::_TP_CALLBACK_PRIORITY = 3;
    pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_COUNT: root::_TP_CALLBACK_PRIORITY = 3;
    pub type _TP_CALLBACK_PRIORITY = i32;
    pub use self::super::root::_TP_CALLBACK_PRIORITY as TP_CALLBACK_PRIORITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_POOL_STACK_INFORMATION {
        pub StackReserve: root::SIZE_T,
        pub StackCommit: root::SIZE_T,
    }
    pub type TP_POOL_STACK_INFORMATION = root::_TP_POOL_STACK_INFORMATION;
    pub type PTP_POOL_STACK_INFORMATION = *mut root::_TP_POOL_STACK_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_CLEANUP_GROUP {
        _unused: [u8; 0],
    }
    pub type TP_CLEANUP_GROUP = root::_TP_CLEANUP_GROUP;
    pub type PTP_CLEANUP_GROUP = *mut root::_TP_CLEANUP_GROUP;
    pub type PTP_CLEANUP_GROUP_CANCEL_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(ObjectContext: root::PVOID, CleanupContext: root::PVOID),
    >;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TP_CALLBACK_ENVIRON_V3 {
        pub Version: root::TP_VERSION,
        pub Pool: root::PTP_POOL,
        pub CleanupGroup: root::PTP_CLEANUP_GROUP,
        pub CleanupGroupCancelCallback: root::PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
        pub RaceDll: root::PVOID,
        pub ActivationContext: *mut root::_ACTIVATION_CONTEXT,
        pub FinalizationCallback: root::PTP_SIMPLE_CALLBACK,
        pub u: root::_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1,
        pub CallbackPriority: root::TP_CALLBACK_PRIORITY,
        pub Size: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1 {
        pub Flags: u32,
        pub s: root::_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn LongFunction(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_LongFunction(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Persistent(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Persistent(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Private(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_Private(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            LongFunction: u32,
            Persistent: u32,
            Private: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let LongFunction: u32 = unsafe { ::std::mem::transmute(LongFunction) };
                LongFunction as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let Persistent: u32 = unsafe { ::std::mem::transmute(Persistent) };
                Persistent as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let Private: u32 = unsafe { ::std::mem::transmute(Private) };
                Private as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type TP_CALLBACK_ENVIRON_V3 = root::_TP_CALLBACK_ENVIRON_V3;
    pub type TP_CALLBACK_ENVIRON = root::TP_CALLBACK_ENVIRON_V3;
    pub type PTP_CALLBACK_ENVIRON = *mut root::TP_CALLBACK_ENVIRON_V3;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_WORK {
        _unused: [u8; 0],
    }
    pub type TP_WORK = root::_TP_WORK;
    pub type PTP_WORK = *mut root::_TP_WORK;
    pub type PTP_WORK_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            Instance: root::PTP_CALLBACK_INSTANCE,
            Context: root::PVOID,
            Work: root::PTP_WORK,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_TIMER {
        _unused: [u8; 0],
    }
    pub type TP_TIMER = root::_TP_TIMER;
    pub type PTP_TIMER = *mut root::_TP_TIMER;
    pub type PTP_TIMER_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            Instance: root::PTP_CALLBACK_INSTANCE,
            Context: root::PVOID,
            Timer: root::PTP_TIMER,
        ),
    >;
    pub type TP_WAIT_RESULT = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_WAIT {
        _unused: [u8; 0],
    }
    pub type TP_WAIT = root::_TP_WAIT;
    pub type PTP_WAIT = *mut root::_TP_WAIT;
    pub type PTP_WAIT_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            Instance: root::PTP_CALLBACK_INSTANCE,
            Context: root::PVOID,
            Wait: root::PTP_WAIT,
            WaitResult: root::TP_WAIT_RESULT,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TP_IO {
        _unused: [u8; 0],
    }
    pub type TP_IO = root::_TP_IO;
    pub type PTP_IO = *mut root::_TP_IO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TEB {
        _unused: [u8; 0],
    }
    pub type WPARAM = u64;
    pub type LPARAM = i64;
    pub type LRESULT = i64;
    pub type SPHANDLE = *mut root::HANDLE;
    pub type LPHANDLE = *mut root::HANDLE;
    pub type HGLOBAL = root::HANDLE;
    pub type HLOCAL = root::HANDLE;
    pub type GLOBALHANDLE = root::HANDLE;
    pub type LOCALHANDLE = root::HANDLE;
    pub type FARPROC = ::std::option::Option<unsafe extern "C" fn() -> root::INT_PTR>;
    pub type NEARPROC = ::std::option::Option<unsafe extern "C" fn() -> root::INT_PTR>;
    pub type PROC = ::std::option::Option<unsafe extern "C" fn() -> root::INT_PTR>;
    pub type ATOM = u16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HKEY__ {
        pub unused: i32,
    }
    pub type HKEY = *mut root::HKEY__;
    pub type PHKEY = *mut root::HKEY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMETAFILE__ {
        pub unused: i32,
    }
    pub type HMETAFILE = *mut root::HMETAFILE__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HINSTANCE__ {
        pub unused: i32,
    }
    pub type HINSTANCE = *mut root::HINSTANCE__;
    pub type HMODULE = root::HINSTANCE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HRGN__ {
        pub unused: i32,
    }
    pub type HRGN = *mut root::HRGN__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HRSRC__ {
        pub unused: i32,
    }
    pub type HRSRC = *mut root::HRSRC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HSPRITE__ {
        pub unused: i32,
    }
    pub type HSPRITE = *mut root::HSPRITE__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HLSURF__ {
        pub unused: i32,
    }
    pub type HLSURF = *mut root::HLSURF__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HSTR__ {
        pub unused: i32,
    }
    pub type HSTR = *mut root::HSTR__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HTASK__ {
        pub unused: i32,
    }
    pub type HTASK = *mut root::HTASK__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWINSTA__ {
        pub unused: i32,
    }
    pub type HWINSTA = *mut root::HWINSTA__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HKL__ {
        pub unused: i32,
    }
    pub type HKL = *mut root::HKL__;
    pub type HFILE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILETIME {
        pub dwLowDateTime: u32,
        pub dwHighDateTime: u32,
    }
    pub type FILETIME = root::_FILETIME;
    pub type PFILETIME = *mut root::_FILETIME;
    pub type LPFILETIME = *mut root::_FILETIME;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        pub unused: i32,
    }
    pub type HWND = *mut root::HWND__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HHOOK__ {
        pub unused: i32,
    }
    pub type HHOOK = *mut root::HHOOK__;
    pub type HGDIOBJ = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HACCEL__ {
        pub unused: i32,
    }
    pub type HACCEL = *mut root::HACCEL__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HBITMAP__ {
        pub unused: i32,
    }
    pub type HBITMAP = *mut root::HBITMAP__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HBRUSH__ {
        pub unused: i32,
    }
    pub type HBRUSH = *mut root::HBRUSH__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HCOLORSPACE__ {
        pub unused: i32,
    }
    pub type HCOLORSPACE = *mut root::HCOLORSPACE__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDC__ {
        pub unused: i32,
    }
    pub type HDC = *mut root::HDC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HGLRC__ {
        pub unused: i32,
    }
    pub type HGLRC = *mut root::HGLRC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDESK__ {
        pub unused: i32,
    }
    pub type HDESK = *mut root::HDESK__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HENHMETAFILE__ {
        pub unused: i32,
    }
    pub type HENHMETAFILE = *mut root::HENHMETAFILE__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HFONT__ {
        pub unused: i32,
    }
    pub type HFONT = *mut root::HFONT__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HICON__ {
        pub unused: i32,
    }
    pub type HICON = *mut root::HICON__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMENU__ {
        pub unused: i32,
    }
    pub type HMENU = *mut root::HMENU__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HPALETTE__ {
        pub unused: i32,
    }
    pub type HPALETTE = *mut root::HPALETTE__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HPEN__ {
        pub unused: i32,
    }
    pub type HPEN = *mut root::HPEN__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWINEVENTHOOK__ {
        pub unused: i32,
    }
    pub type HWINEVENTHOOK = *mut root::HWINEVENTHOOK__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMONITOR__ {
        pub unused: i32,
    }
    pub type HMONITOR = *mut root::HMONITOR__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HUMPD__ {
        pub unused: i32,
    }
    pub type HUMPD = *mut root::HUMPD__;
    pub type HCURSOR = root::HICON;
    pub type COLORREF = u32;
    pub type LPCOLORREF = *mut u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRECT {
        pub left: i32,
        pub top: i32,
        pub right: i32,
        pub bottom: i32,
    }
    pub type RECT = root::tagRECT;
    pub type PRECT = *mut root::tagRECT;
    pub type NPRECT = *mut root::tagRECT;
    pub type LPRECT = *mut root::tagRECT;
    pub type LPCRECT = *const root::RECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RECTL {
        pub left: i32,
        pub top: i32,
        pub right: i32,
        pub bottom: i32,
    }
    pub type RECTL = root::_RECTL;
    pub type PRECTL = *mut root::_RECTL;
    pub type LPRECTL = *mut root::_RECTL;
    pub type LPCRECTL = *const root::RECTL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINT {
        pub x: i32,
        pub y: i32,
    }
    pub type POINT = root::tagPOINT;
    pub type PPOINT = *mut root::tagPOINT;
    pub type NPPOINT = *mut root::tagPOINT;
    pub type LPPOINT = *mut root::tagPOINT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POINTL {
        pub x: i32,
        pub y: i32,
    }
    pub type POINTL = root::_POINTL;
    pub type PPOINTL = *mut root::_POINTL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSIZE {
        pub cx: i32,
        pub cy: i32,
    }
    pub type SIZE = root::tagSIZE;
    pub type PSIZE = *mut root::tagSIZE;
    pub type LPSIZE = *mut root::tagSIZE;
    pub type SIZEL = root::SIZE;
    pub type PSIZEL = *mut root::SIZE;
    pub type LPSIZEL = *mut root::SIZE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTS {
        pub x: i16,
        pub y: i16,
    }
    pub type POINTS = root::tagPOINTS;
    pub type PPOINTS = *mut root::tagPOINTS;
    pub type LPPOINTS = *mut root::tagPOINTS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct APP_LOCAL_DEVICE_ID {
        pub value: [u8; 32usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DPI_AWARENESS_CONTEXT__ {
        pub unused: i32,
    }
    pub type DPI_AWARENESS_CONTEXT = *mut root::DPI_AWARENESS_CONTEXT__;
    pub const DPI_AWARENESS_DPI_AWARENESS_INVALID: root::DPI_AWARENESS = -1;
    pub const DPI_AWARENESS_DPI_AWARENESS_UNAWARE: root::DPI_AWARENESS = 0;
    pub const DPI_AWARENESS_DPI_AWARENESS_SYSTEM_AWARE: root::DPI_AWARENESS = 1;
    pub const DPI_AWARENESS_DPI_AWARENESS_PER_MONITOR_AWARE: root::DPI_AWARENESS = 2;
    pub type DPI_AWARENESS = i32;
    pub const DPI_HOSTING_BEHAVIOR_DPI_HOSTING_BEHAVIOR_INVALID: root::DPI_HOSTING_BEHAVIOR = -1;
    pub const DPI_HOSTING_BEHAVIOR_DPI_HOSTING_BEHAVIOR_DEFAULT: root::DPI_HOSTING_BEHAVIOR = 0;
    pub const DPI_HOSTING_BEHAVIOR_DPI_HOSTING_BEHAVIOR_MIXED: root::DPI_HOSTING_BEHAVIOR = 1;
    pub type DPI_HOSTING_BEHAVIOR = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SECURITY_ATTRIBUTES {
        pub nLength: u32,
        pub lpSecurityDescriptor: root::LPVOID,
        pub bInheritHandle: root::BOOL,
    }
    pub type SECURITY_ATTRIBUTES = root::_SECURITY_ATTRIBUTES;
    pub type PSECURITY_ATTRIBUTES = *mut root::_SECURITY_ATTRIBUTES;
    pub type LPSECURITY_ATTRIBUTES = *mut root::_SECURITY_ATTRIBUTES;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _OVERLAPPED {
        pub Internal: u64,
        pub InternalHigh: u64,
        pub __bindgen_anon_1: root::_OVERLAPPED__bindgen_ty_1,
        pub hEvent: root::HANDLE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _OVERLAPPED__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
        pub Pointer: root::PVOID,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
        pub Offset: u32,
        pub OffsetHigh: u32,
    }
    pub type OVERLAPPED = root::_OVERLAPPED;
    pub type LPOVERLAPPED = *mut root::_OVERLAPPED;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OVERLAPPED_ENTRY {
        pub lpCompletionKey: u64,
        pub lpOverlapped: root::LPOVERLAPPED,
        pub Internal: u64,
        pub dwNumberOfBytesTransferred: u32,
    }
    pub type OVERLAPPED_ENTRY = root::_OVERLAPPED_ENTRY;
    pub type LPOVERLAPPED_ENTRY = *mut root::_OVERLAPPED_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEMTIME {
        pub wYear: u16,
        pub wMonth: u16,
        pub wDayOfWeek: u16,
        pub wDay: u16,
        pub wHour: u16,
        pub wMinute: u16,
        pub wSecond: u16,
        pub wMilliseconds: u16,
    }
    pub type SYSTEMTIME = root::_SYSTEMTIME;
    pub type PSYSTEMTIME = *mut root::_SYSTEMTIME;
    pub type LPSYSTEMTIME = *mut root::_SYSTEMTIME;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WIN32_FIND_DATAA {
        pub dwFileAttributes: u32,
        pub ftCreationTime: root::FILETIME,
        pub ftLastAccessTime: root::FILETIME,
        pub ftLastWriteTime: root::FILETIME,
        pub nFileSizeHigh: u32,
        pub nFileSizeLow: u32,
        pub dwReserved0: u32,
        pub dwReserved1: u32,
        pub cFileName: [i8; 260usize],
        pub cAlternateFileName: [i8; 14usize],
    }
    pub type WIN32_FIND_DATAA = root::_WIN32_FIND_DATAA;
    pub type PWIN32_FIND_DATAA = *mut root::_WIN32_FIND_DATAA;
    pub type LPWIN32_FIND_DATAA = *mut root::_WIN32_FIND_DATAA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WIN32_FIND_DATAW {
        pub dwFileAttributes: u32,
        pub ftCreationTime: root::FILETIME,
        pub ftLastAccessTime: root::FILETIME,
        pub ftLastWriteTime: root::FILETIME,
        pub nFileSizeHigh: u32,
        pub nFileSizeLow: u32,
        pub dwReserved0: u32,
        pub dwReserved1: u32,
        pub cFileName: [u16; 260usize],
        pub cAlternateFileName: [u16; 14usize],
    }
    pub type WIN32_FIND_DATAW = root::_WIN32_FIND_DATAW;
    pub type PWIN32_FIND_DATAW = *mut root::_WIN32_FIND_DATAW;
    pub type LPWIN32_FIND_DATAW = *mut root::_WIN32_FIND_DATAW;
    pub type WIN32_FIND_DATA = root::WIN32_FIND_DATAA;
    pub type PWIN32_FIND_DATA = root::PWIN32_FIND_DATAA;
    pub type LPWIN32_FIND_DATA = root::LPWIN32_FIND_DATAA;
    pub const _FINDEX_INFO_LEVELS_FindExInfoStandard: root::_FINDEX_INFO_LEVELS = 0;
    pub const _FINDEX_INFO_LEVELS_FindExInfoBasic: root::_FINDEX_INFO_LEVELS = 1;
    pub const _FINDEX_INFO_LEVELS_FindExInfoMaxInfoLevel: root::_FINDEX_INFO_LEVELS = 2;
    pub type _FINDEX_INFO_LEVELS = i32;
    pub use self::super::root::_FINDEX_INFO_LEVELS as FINDEX_INFO_LEVELS;
    pub const _FINDEX_SEARCH_OPS_FindExSearchNameMatch: root::_FINDEX_SEARCH_OPS = 0;
    pub const _FINDEX_SEARCH_OPS_FindExSearchLimitToDirectories: root::_FINDEX_SEARCH_OPS = 1;
    pub const _FINDEX_SEARCH_OPS_FindExSearchLimitToDevices: root::_FINDEX_SEARCH_OPS = 2;
    pub const _FINDEX_SEARCH_OPS_FindExSearchMaxSearchOp: root::_FINDEX_SEARCH_OPS = 3;
    pub type _FINDEX_SEARCH_OPS = i32;
    pub use self::super::root::_FINDEX_SEARCH_OPS as FINDEX_SEARCH_OPS;
    pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_ReadDirectoryNotifyInformation:
        root::_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 1;
    pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_ReadDirectoryNotifyExtendedInformation:
        root::_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 2;
    pub type _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = i32;
    pub use self::super::root::_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS as READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
    pub type PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS =
        *mut root::_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
    pub const _GET_FILEEX_INFO_LEVELS_GetFileExInfoStandard: root::_GET_FILEEX_INFO_LEVELS = 0;
    pub const _GET_FILEEX_INFO_LEVELS_GetFileExMaxInfoLevel: root::_GET_FILEEX_INFO_LEVELS = 1;
    pub type _GET_FILEEX_INFO_LEVELS = i32;
    pub use self::super::root::_GET_FILEEX_INFO_LEVELS as GET_FILEEX_INFO_LEVELS;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileBasicInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 0;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileStandardInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 1;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileNameInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 2;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileRenameInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 3;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileDispositionInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 4;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileAllocationInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 5;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileEndOfFileInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 6;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileStreamInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 7;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileCompressionInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 8;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileAttributeTagInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 9;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdBothDirectoryInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        10;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdBothDirectoryRestartInfo:
        root::_FILE_INFO_BY_HANDLE_CLASS = 11;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileIoPriorityHintInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        12;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileRemoteProtocolInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        13;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileFullDirectoryInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        14;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileFullDirectoryRestartInfo:
        root::_FILE_INFO_BY_HANDLE_CLASS = 15;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileStorageInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 16;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileAlignmentInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 17;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdInfo: root::_FILE_INFO_BY_HANDLE_CLASS = 18;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdExtdDirectoryInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        19;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdExtdDirectoryRestartInfo:
        root::_FILE_INFO_BY_HANDLE_CLASS = 20;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileDispositionInfoEx: root::_FILE_INFO_BY_HANDLE_CLASS =
        21;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileRenameInfoEx: root::_FILE_INFO_BY_HANDLE_CLASS = 22;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileCaseSensitiveInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        23;
    pub const _FILE_INFO_BY_HANDLE_CLASS_FileNormalizedNameInfo: root::_FILE_INFO_BY_HANDLE_CLASS =
        24;
    pub const _FILE_INFO_BY_HANDLE_CLASS_MaximumFileInfoByHandleClass:
        root::_FILE_INFO_BY_HANDLE_CLASS = 25;
    pub type _FILE_INFO_BY_HANDLE_CLASS = i32;
    pub use self::super::root::_FILE_INFO_BY_HANDLE_CLASS as FILE_INFO_BY_HANDLE_CLASS;
    pub type PFILE_INFO_BY_HANDLE_CLASS = *mut root::_FILE_INFO_BY_HANDLE_CLASS;
    pub type CRITICAL_SECTION = root::RTL_CRITICAL_SECTION;
    pub type PCRITICAL_SECTION = root::PRTL_CRITICAL_SECTION;
    pub type LPCRITICAL_SECTION = root::PRTL_CRITICAL_SECTION;
    pub type CRITICAL_SECTION_DEBUG = root::RTL_CRITICAL_SECTION_DEBUG;
    pub type PCRITICAL_SECTION_DEBUG = root::PRTL_CRITICAL_SECTION_DEBUG;
    pub type LPCRITICAL_SECTION_DEBUG = root::PRTL_CRITICAL_SECTION_DEBUG;
    pub type LPOVERLAPPED_COMPLETION_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            dwErrorCode: u32,
            dwNumberOfBytesTransfered: u32,
            lpOverlapped: root::LPOVERLAPPED,
        ),
    >;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROCESS_HEAP_ENTRY {
        pub lpData: root::PVOID,
        pub cbData: u32,
        pub cbOverhead: u8,
        pub iRegionIndex: u8,
        pub wFlags: u16,
        pub __bindgen_anon_1: root::_PROCESS_HEAP_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROCESS_HEAP_ENTRY__bindgen_ty_1 {
        pub Block: root::_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1,
        pub Region: root::_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1 {
        pub hMem: root::HANDLE,
        pub dwReserved: [u32; 3usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2 {
        pub dwCommittedSize: u32,
        pub dwUnCommittedSize: u32,
        pub lpFirstBlock: root::LPVOID,
        pub lpLastBlock: root::LPVOID,
    }
    pub type PROCESS_HEAP_ENTRY = root::_PROCESS_HEAP_ENTRY;
    pub type LPPROCESS_HEAP_ENTRY = *mut root::_PROCESS_HEAP_ENTRY;
    pub type PPROCESS_HEAP_ENTRY = *mut root::_PROCESS_HEAP_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _REASON_CONTEXT {
        pub Version: root::ULONG,
        pub Flags: u32,
        pub Reason: root::_REASON_CONTEXT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _REASON_CONTEXT__bindgen_ty_1 {
        pub Detailed: root::_REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        pub SimpleReasonString: root::LPWSTR,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
        pub LocalizedReasonModule: root::HMODULE,
        pub LocalizedReasonId: root::ULONG,
        pub ReasonStringCount: root::ULONG,
        pub ReasonStrings: *mut root::LPWSTR,
    }
    pub type REASON_CONTEXT = root::_REASON_CONTEXT;
    pub type PREASON_CONTEXT = *mut root::_REASON_CONTEXT;
    pub type PTHREAD_START_ROUTINE =
        ::std::option::Option<unsafe extern "C" fn(lpThreadParameter: root::LPVOID) -> u32>;
    pub type LPTHREAD_START_ROUTINE = root::PTHREAD_START_ROUTINE;
    pub type PENCLAVE_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(lpThreadParameter: root::LPVOID) -> root::LPVOID,
    >;
    pub type LPENCLAVE_ROUTINE = root::PENCLAVE_ROUTINE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXCEPTION_DEBUG_INFO {
        pub ExceptionRecord: root::EXCEPTION_RECORD,
        pub dwFirstChance: u32,
    }
    pub type EXCEPTION_DEBUG_INFO = root::_EXCEPTION_DEBUG_INFO;
    pub type LPEXCEPTION_DEBUG_INFO = *mut root::_EXCEPTION_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CREATE_THREAD_DEBUG_INFO {
        pub hThread: root::HANDLE,
        pub lpThreadLocalBase: root::LPVOID,
        pub lpStartAddress: root::LPTHREAD_START_ROUTINE,
    }
    pub type CREATE_THREAD_DEBUG_INFO = root::_CREATE_THREAD_DEBUG_INFO;
    pub type LPCREATE_THREAD_DEBUG_INFO = *mut root::_CREATE_THREAD_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CREATE_PROCESS_DEBUG_INFO {
        pub hFile: root::HANDLE,
        pub hProcess: root::HANDLE,
        pub hThread: root::HANDLE,
        pub lpBaseOfImage: root::LPVOID,
        pub dwDebugInfoFileOffset: u32,
        pub nDebugInfoSize: u32,
        pub lpThreadLocalBase: root::LPVOID,
        pub lpStartAddress: root::LPTHREAD_START_ROUTINE,
        pub lpImageName: root::LPVOID,
        pub fUnicode: u16,
    }
    pub type CREATE_PROCESS_DEBUG_INFO = root::_CREATE_PROCESS_DEBUG_INFO;
    pub type LPCREATE_PROCESS_DEBUG_INFO = *mut root::_CREATE_PROCESS_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXIT_THREAD_DEBUG_INFO {
        pub dwExitCode: u32,
    }
    pub type EXIT_THREAD_DEBUG_INFO = root::_EXIT_THREAD_DEBUG_INFO;
    pub type LPEXIT_THREAD_DEBUG_INFO = *mut root::_EXIT_THREAD_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXIT_PROCESS_DEBUG_INFO {
        pub dwExitCode: u32,
    }
    pub type EXIT_PROCESS_DEBUG_INFO = root::_EXIT_PROCESS_DEBUG_INFO;
    pub type LPEXIT_PROCESS_DEBUG_INFO = *mut root::_EXIT_PROCESS_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LOAD_DLL_DEBUG_INFO {
        pub hFile: root::HANDLE,
        pub lpBaseOfDll: root::LPVOID,
        pub dwDebugInfoFileOffset: u32,
        pub nDebugInfoSize: u32,
        pub lpImageName: root::LPVOID,
        pub fUnicode: u16,
    }
    pub type LOAD_DLL_DEBUG_INFO = root::_LOAD_DLL_DEBUG_INFO;
    pub type LPLOAD_DLL_DEBUG_INFO = *mut root::_LOAD_DLL_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UNLOAD_DLL_DEBUG_INFO {
        pub lpBaseOfDll: root::LPVOID,
    }
    pub type UNLOAD_DLL_DEBUG_INFO = root::_UNLOAD_DLL_DEBUG_INFO;
    pub type LPUNLOAD_DLL_DEBUG_INFO = *mut root::_UNLOAD_DLL_DEBUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OUTPUT_DEBUG_STRING_INFO {
        pub lpDebugStringData: *mut i8,
        pub fUnicode: u16,
        pub nDebugStringLength: u16,
    }
    pub type OUTPUT_DEBUG_STRING_INFO = root::_OUTPUT_DEBUG_STRING_INFO;
    pub type LPOUTPUT_DEBUG_STRING_INFO = *mut root::_OUTPUT_DEBUG_STRING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RIP_INFO {
        pub dwError: u32,
        pub dwType: u32,
    }
    pub type RIP_INFO = root::_RIP_INFO;
    pub type LPRIP_INFO = *mut root::_RIP_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEBUG_EVENT {
        pub dwDebugEventCode: u32,
        pub dwProcessId: u32,
        pub dwThreadId: u32,
        pub u: root::_DEBUG_EVENT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DEBUG_EVENT__bindgen_ty_1 {
        pub Exception: root::EXCEPTION_DEBUG_INFO,
        pub CreateThread: root::CREATE_THREAD_DEBUG_INFO,
        pub CreateProcessInfo: root::CREATE_PROCESS_DEBUG_INFO,
        pub ExitThread: root::EXIT_THREAD_DEBUG_INFO,
        pub ExitProcess: root::EXIT_PROCESS_DEBUG_INFO,
        pub LoadDll: root::LOAD_DLL_DEBUG_INFO,
        pub UnloadDll: root::UNLOAD_DLL_DEBUG_INFO,
        pub DebugString: root::OUTPUT_DEBUG_STRING_INFO,
        pub RipInfo: root::RIP_INFO,
    }
    pub type DEBUG_EVENT = root::_DEBUG_EVENT;
    pub type LPDEBUG_EVENT = *mut root::_DEBUG_EVENT;
    pub type LPCONTEXT = root::PCONTEXT;
    extern "C" {
        pub fn IsApiSetImplemented(Contract: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetEnvironmentStringsW(NewEnvironment: root::LPWCH) -> root::BOOL;
    }
    extern "C" {
        pub fn GetStdHandle(nStdHandle: u32) -> root::HANDLE;
    }
    extern "C" {
        pub fn SetStdHandle(nStdHandle: u32, hHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetStdHandleEx(
            nStdHandle: u32,
            hHandle: root::HANDLE,
            phPrevValue: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommandLineA() -> *mut i8;
    }
    extern "C" {
        pub fn GetCommandLineW() -> root::LPWSTR;
    }
    extern "C" {
        pub fn GetEnvironmentStrings() -> *mut i8;
    }
    extern "C" {
        pub fn GetEnvironmentStringsW() -> root::LPWCH;
    }
    extern "C" {
        pub fn FreeEnvironmentStringsA(penv: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn FreeEnvironmentStringsW(penv: root::LPWCH) -> root::BOOL;
    }
    extern "C" {
        pub fn GetEnvironmentVariableA(
            lpName: *const i8,
            lpBuffer: *mut i8,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetEnvironmentVariableW(
            lpName: root::LPCWSTR,
            lpBuffer: root::LPWSTR,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetEnvironmentVariableA(lpName: *const i8, lpValue: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetEnvironmentVariableW(lpName: root::LPCWSTR, lpValue: root::LPCWSTR)
            -> root::BOOL;
    }
    extern "C" {
        pub fn ExpandEnvironmentStringsA(
            lpSrc: *const i8,
            lpDst: *mut i8,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ExpandEnvironmentStringsW(
            lpSrc: root::LPCWSTR,
            lpDst: root::LPWSTR,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetCurrentDirectoryA(lpPathName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCurrentDirectoryW(lpPathName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentDirectoryA(
            nBufferLength: u32,
            lpBuffer: *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetCurrentDirectoryW(
            nBufferLength: u32,
            lpBuffer: root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn SearchPathW(
            lpPath: root::LPCWSTR,
            lpFileName: root::LPCWSTR,
            lpExtension: root::LPCWSTR,
            nBufferLength: u32,
            lpBuffer: root::LPWSTR,
            lpFilePart: *mut root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn SearchPathA(
            lpPath: *const i8,
            lpFileName: *const i8,
            lpExtension: *const i8,
            nBufferLength: u32,
            lpBuffer: *mut i8,
            lpFilePart: *mut *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn NeedCurrentDirectoryForExePathA(ExeName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn NeedCurrentDirectoryForExePathW(ExeName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn CompareFileTime(
            lpFileTime1: *const root::FILETIME,
            lpFileTime2: *const root::FILETIME,
        ) -> i32;
    }
    extern "C" {
        pub fn CreateDirectoryA(
            lpPathName: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDirectoryW(
            lpPathName: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateFileA(
            lpFileName: *const i8,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            dwCreationDisposition: u32,
            dwFlagsAndAttributes: u32,
            hTemplateFile: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateFileW(
            lpFileName: root::LPCWSTR,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            dwCreationDisposition: u32,
            dwFlagsAndAttributes: u32,
            hTemplateFile: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn DefineDosDeviceW(
            dwFlags: u32,
            lpDeviceName: root::LPCWSTR,
            lpTargetPath: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteFileA(lpFileName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteFileW(lpFileName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteVolumeMountPointW(lpszVolumeMountPoint: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn FileTimeToLocalFileTime(
            lpFileTime: *const root::FILETIME,
            lpLocalFileTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindClose(hFindFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn FindCloseChangeNotification(hChangeHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstChangeNotificationA(
            lpPathName: *const i8,
            bWatchSubtree: root::BOOL,
            dwNotifyFilter: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstChangeNotificationW(
            lpPathName: root::LPCWSTR,
            bWatchSubtree: root::BOOL,
            dwNotifyFilter: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstFileA(
            lpFileName: *const i8,
            lpFindFileData: root::LPWIN32_FIND_DATAA,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstFileW(
            lpFileName: root::LPCWSTR,
            lpFindFileData: root::LPWIN32_FIND_DATAW,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstFileExA(
            lpFileName: *const i8,
            fInfoLevelId: root::FINDEX_INFO_LEVELS,
            lpFindFileData: root::LPVOID,
            fSearchOp: root::FINDEX_SEARCH_OPS,
            lpSearchFilter: root::LPVOID,
            dwAdditionalFlags: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstFileExW(
            lpFileName: root::LPCWSTR,
            fInfoLevelId: root::FINDEX_INFO_LEVELS,
            lpFindFileData: root::LPVOID,
            fSearchOp: root::FINDEX_SEARCH_OPS,
            lpSearchFilter: root::LPVOID,
            dwAdditionalFlags: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstVolumeW(
            lpszVolumeName: root::LPWSTR,
            cchBufferLength: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindNextChangeNotification(hChangeHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn FindNextFileA(
            hFindFile: root::HANDLE,
            lpFindFileData: root::LPWIN32_FIND_DATAA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindNextFileW(
            hFindFile: root::HANDLE,
            lpFindFileData: root::LPWIN32_FIND_DATAW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindNextVolumeW(
            hFindVolume: root::HANDLE,
            lpszVolumeName: root::LPWSTR,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindVolumeClose(hFindVolume: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn FlushFileBuffers(hFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDiskFreeSpaceA(
            lpRootPathName: *const i8,
            lpSectorsPerCluster: root::LPDWORD,
            lpBytesPerSector: root::LPDWORD,
            lpNumberOfFreeClusters: root::LPDWORD,
            lpTotalNumberOfClusters: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDiskFreeSpaceW(
            lpRootPathName: root::LPCWSTR,
            lpSectorsPerCluster: root::LPDWORD,
            lpBytesPerSector: root::LPDWORD,
            lpNumberOfFreeClusters: root::LPDWORD,
            lpTotalNumberOfClusters: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDiskFreeSpaceExA(
            lpDirectoryName: *const i8,
            lpFreeBytesAvailableToCaller: root::PULARGE_INTEGER,
            lpTotalNumberOfBytes: root::PULARGE_INTEGER,
            lpTotalNumberOfFreeBytes: root::PULARGE_INTEGER,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDiskFreeSpaceExW(
            lpDirectoryName: root::LPCWSTR,
            lpFreeBytesAvailableToCaller: root::PULARGE_INTEGER,
            lpTotalNumberOfBytes: root::PULARGE_INTEGER,
            lpTotalNumberOfFreeBytes: root::PULARGE_INTEGER,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISK_SPACE_INFORMATION {
        pub ActualTotalAllocationUnits: root::ULONGLONG,
        pub ActualAvailableAllocationUnits: root::ULONGLONG,
        pub ActualPoolUnavailableAllocationUnits: root::ULONGLONG,
        pub CallerTotalAllocationUnits: root::ULONGLONG,
        pub CallerAvailableAllocationUnits: root::ULONGLONG,
        pub CallerPoolUnavailableAllocationUnits: root::ULONGLONG,
        pub UsedAllocationUnits: root::ULONGLONG,
        pub TotalReservedAllocationUnits: root::ULONGLONG,
        pub VolumeStorageReserveAllocationUnits: root::ULONGLONG,
        pub AvailableCommittedAllocationUnits: root::ULONGLONG,
        pub PoolAvailableAllocationUnits: root::ULONGLONG,
        pub SectorsPerAllocationUnit: u32,
        pub BytesPerSector: u32,
    }
    extern "C" {
        pub fn GetDiskSpaceInformationA(
            rootPath: *const i8,
            diskSpaceInfo: *mut root::DISK_SPACE_INFORMATION,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetDiskSpaceInformationW(
            rootPath: root::LPCWSTR,
            diskSpaceInfo: *mut root::DISK_SPACE_INFORMATION,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetDriveTypeA(lpRootPathName: *const i8) -> root::UINT;
    }
    extern "C" {
        pub fn GetDriveTypeW(lpRootPathName: root::LPCWSTR) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WIN32_FILE_ATTRIBUTE_DATA {
        pub dwFileAttributes: u32,
        pub ftCreationTime: root::FILETIME,
        pub ftLastAccessTime: root::FILETIME,
        pub ftLastWriteTime: root::FILETIME,
        pub nFileSizeHigh: u32,
        pub nFileSizeLow: u32,
    }
    pub type WIN32_FILE_ATTRIBUTE_DATA = root::_WIN32_FILE_ATTRIBUTE_DATA;
    pub type LPWIN32_FILE_ATTRIBUTE_DATA = *mut root::_WIN32_FILE_ATTRIBUTE_DATA;
    extern "C" {
        pub fn GetFileAttributesA(lpFileName: *const i8) -> u32;
    }
    extern "C" {
        pub fn GetFileAttributesW(lpFileName: root::LPCWSTR) -> u32;
    }
    extern "C" {
        pub fn GetFileAttributesExA(
            lpFileName: *const i8,
            fInfoLevelId: root::GET_FILEEX_INFO_LEVELS,
            lpFileInformation: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileAttributesExW(
            lpFileName: root::LPCWSTR,
            fInfoLevelId: root::GET_FILEEX_INFO_LEVELS,
            lpFileInformation: root::LPVOID,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BY_HANDLE_FILE_INFORMATION {
        pub dwFileAttributes: u32,
        pub ftCreationTime: root::FILETIME,
        pub ftLastAccessTime: root::FILETIME,
        pub ftLastWriteTime: root::FILETIME,
        pub dwVolumeSerialNumber: u32,
        pub nFileSizeHigh: u32,
        pub nFileSizeLow: u32,
        pub nNumberOfLinks: u32,
        pub nFileIndexHigh: u32,
        pub nFileIndexLow: u32,
    }
    pub type BY_HANDLE_FILE_INFORMATION = root::_BY_HANDLE_FILE_INFORMATION;
    pub type PBY_HANDLE_FILE_INFORMATION = *mut root::_BY_HANDLE_FILE_INFORMATION;
    pub type LPBY_HANDLE_FILE_INFORMATION = *mut root::_BY_HANDLE_FILE_INFORMATION;
    extern "C" {
        pub fn GetFileInformationByHandle(
            hFile: root::HANDLE,
            lpFileInformation: root::LPBY_HANDLE_FILE_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileSize(hFile: root::HANDLE, lpFileSizeHigh: root::LPDWORD) -> u32;
    }
    extern "C" {
        pub fn GetFileSizeEx(hFile: root::HANDLE, lpFileSize: root::PLARGE_INTEGER) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileType(hFile: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn GetFinalPathNameByHandleA(
            hFile: root::HANDLE,
            lpszFilePath: *mut i8,
            cchFilePath: u32,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFinalPathNameByHandleW(
            hFile: root::HANDLE,
            lpszFilePath: root::LPWSTR,
            cchFilePath: u32,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFileTime(
            hFile: root::HANDLE,
            lpCreationTime: root::LPFILETIME,
            lpLastAccessTime: root::LPFILETIME,
            lpLastWriteTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFullPathNameW(
            lpFileName: root::LPCWSTR,
            nBufferLength: u32,
            lpBuffer: root::LPWSTR,
            lpFilePart: *mut root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFullPathNameA(
            lpFileName: *const i8,
            nBufferLength: u32,
            lpBuffer: *mut i8,
            lpFilePart: *mut *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetLogicalDrives() -> u32;
    }
    extern "C" {
        pub fn GetLogicalDriveStringsW(
            nBufferLength: u32,
            lpBuffer: root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetLongPathNameA(
            lpszShortPath: *const i8,
            lpszLongPath: *mut i8,
            cchBuffer: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetLongPathNameW(
            lpszShortPath: root::LPCWSTR,
            lpszLongPath: root::LPWSTR,
            cchBuffer: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetShortPathNameW(
            lpszLongPath: root::LPCWSTR,
            lpszShortPath: root::LPWSTR,
            cchBuffer: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetTempFileNameW(
            lpPathName: root::LPCWSTR,
            lpPrefixString: root::LPCWSTR,
            uUnique: root::UINT,
            lpTempFileName: root::LPWSTR,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetVolumeInformationByHandleW(
            hFile: root::HANDLE,
            lpVolumeNameBuffer: root::LPWSTR,
            nVolumeNameSize: u32,
            lpVolumeSerialNumber: root::LPDWORD,
            lpMaximumComponentLength: root::LPDWORD,
            lpFileSystemFlags: root::LPDWORD,
            lpFileSystemNameBuffer: root::LPWSTR,
            nFileSystemNameSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumeInformationW(
            lpRootPathName: root::LPCWSTR,
            lpVolumeNameBuffer: root::LPWSTR,
            nVolumeNameSize: u32,
            lpVolumeSerialNumber: root::LPDWORD,
            lpMaximumComponentLength: root::LPDWORD,
            lpFileSystemFlags: root::LPDWORD,
            lpFileSystemNameBuffer: root::LPWSTR,
            nFileSystemNameSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumePathNameW(
            lpszFileName: root::LPCWSTR,
            lpszVolumePathName: root::LPWSTR,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LocalFileTimeToFileTime(
            lpLocalFileTime: *const root::FILETIME,
            lpFileTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LockFile(
            hFile: root::HANDLE,
            dwFileOffsetLow: u32,
            dwFileOffsetHigh: u32,
            nNumberOfBytesToLockLow: u32,
            nNumberOfBytesToLockHigh: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LockFileEx(
            hFile: root::HANDLE,
            dwFlags: u32,
            dwReserved: u32,
            nNumberOfBytesToLockLow: u32,
            nNumberOfBytesToLockHigh: u32,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryDosDeviceW(
            lpDeviceName: root::LPCWSTR,
            lpTargetPath: root::LPWSTR,
            ucchMax: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ReadFile(
            hFile: root::HANDLE,
            lpBuffer: root::LPVOID,
            nNumberOfBytesToRead: u32,
            lpNumberOfBytesRead: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadFileEx(
            hFile: root::HANDLE,
            lpBuffer: root::LPVOID,
            nNumberOfBytesToRead: u32,
            lpOverlapped: root::LPOVERLAPPED,
            lpCompletionRoutine: root::LPOVERLAPPED_COMPLETION_ROUTINE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadFileScatter(
            hFile: root::HANDLE,
            aSegmentArray: *mut root::FILE_SEGMENT_ELEMENT,
            nNumberOfBytesToRead: u32,
            lpReserved: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveDirectoryA(lpPathName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveDirectoryW(lpPathName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn SetEndOfFile(hFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileAttributesA(
            lpFileName: *const i8,
            dwFileAttributes: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileAttributesW(
            lpFileName: root::LPCWSTR,
            dwFileAttributes: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileInformationByHandle(
            hFile: root::HANDLE,
            FileInformationClass: root::FILE_INFO_BY_HANDLE_CLASS,
            lpFileInformation: root::LPVOID,
            dwBufferSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFilePointer(
            hFile: root::HANDLE,
            lDistanceToMove: i32,
            lpDistanceToMoveHigh: root::PLONG,
            dwMoveMethod: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetFilePointerEx(
            hFile: root::HANDLE,
            liDistanceToMove: root::LARGE_INTEGER,
            lpNewFilePointer: root::PLARGE_INTEGER,
            dwMoveMethod: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileTime(
            hFile: root::HANDLE,
            lpCreationTime: *const root::FILETIME,
            lpLastAccessTime: *const root::FILETIME,
            lpLastWriteTime: *const root::FILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileValidData(hFile: root::HANDLE, ValidDataLength: root::LONGLONG)
            -> root::BOOL;
    }
    extern "C" {
        pub fn UnlockFile(
            hFile: root::HANDLE,
            dwFileOffsetLow: u32,
            dwFileOffsetHigh: u32,
            nNumberOfBytesToUnlockLow: u32,
            nNumberOfBytesToUnlockHigh: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnlockFileEx(
            hFile: root::HANDLE,
            dwReserved: u32,
            nNumberOfBytesToUnlockLow: u32,
            nNumberOfBytesToUnlockHigh: u32,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteFile(
            hFile: root::HANDLE,
            lpBuffer: root::LPCVOID,
            nNumberOfBytesToWrite: u32,
            lpNumberOfBytesWritten: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteFileEx(
            hFile: root::HANDLE,
            lpBuffer: root::LPCVOID,
            nNumberOfBytesToWrite: u32,
            lpOverlapped: root::LPOVERLAPPED,
            lpCompletionRoutine: root::LPOVERLAPPED_COMPLETION_ROUTINE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteFileGather(
            hFile: root::HANDLE,
            aSegmentArray: *mut root::FILE_SEGMENT_ELEMENT,
            nNumberOfBytesToWrite: u32,
            lpReserved: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTempPathW(nBufferLength: u32, lpBuffer: root::LPWSTR) -> u32;
    }
    extern "C" {
        pub fn GetVolumeNameForVolumeMountPointW(
            lpszVolumeMountPoint: root::LPCWSTR,
            lpszVolumeName: root::LPWSTR,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumePathNamesForVolumeNameW(
            lpszVolumeName: root::LPCWSTR,
            lpszVolumePathNames: root::LPWCH,
            cchBufferLength: u32,
            lpcchReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CREATEFILE2_EXTENDED_PARAMETERS {
        pub dwSize: u32,
        pub dwFileAttributes: u32,
        pub dwFileFlags: u32,
        pub dwSecurityQosFlags: u32,
        pub lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        pub hTemplateFile: root::HANDLE,
    }
    pub type CREATEFILE2_EXTENDED_PARAMETERS = root::_CREATEFILE2_EXTENDED_PARAMETERS;
    pub type PCREATEFILE2_EXTENDED_PARAMETERS = *mut root::_CREATEFILE2_EXTENDED_PARAMETERS;
    pub type LPCREATEFILE2_EXTENDED_PARAMETERS = *mut root::_CREATEFILE2_EXTENDED_PARAMETERS;
    extern "C" {
        pub fn CreateFile2(
            lpFileName: root::LPCWSTR,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            dwCreationDisposition: u32,
            pCreateExParams: root::LPCREATEFILE2_EXTENDED_PARAMETERS,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn SetFileIoOverlappedRange(
            FileHandle: root::HANDLE,
            OverlappedRangeStart: root::PUCHAR,
            Length: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCompressedFileSizeA(
            lpFileName: *const i8,
            lpFileSizeHigh: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetCompressedFileSizeW(
            lpFileName: root::LPCWSTR,
            lpFileSizeHigh: root::LPDWORD,
        ) -> u32;
    }
    pub const _STREAM_INFO_LEVELS_FindStreamInfoStandard: root::_STREAM_INFO_LEVELS = 0;
    pub const _STREAM_INFO_LEVELS_FindStreamInfoMaxInfoLevel: root::_STREAM_INFO_LEVELS = 1;
    pub type _STREAM_INFO_LEVELS = i32;
    pub use self::super::root::_STREAM_INFO_LEVELS as STREAM_INFO_LEVELS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIN32_FIND_STREAM_DATA {
        pub StreamSize: root::LARGE_INTEGER,
        pub cStreamName: [u16; 296usize],
    }
    pub type WIN32_FIND_STREAM_DATA = root::_WIN32_FIND_STREAM_DATA;
    pub type PWIN32_FIND_STREAM_DATA = *mut root::_WIN32_FIND_STREAM_DATA;
    extern "C" {
        pub fn FindFirstStreamW(
            lpFileName: root::LPCWSTR,
            InfoLevel: root::STREAM_INFO_LEVELS,
            lpFindStreamData: root::LPVOID,
            dwFlags: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindNextStreamW(
            hFindStream: root::HANDLE,
            lpFindStreamData: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AreFileApisANSI() -> root::BOOL;
    }
    extern "C" {
        pub fn GetTempPathA(nBufferLength: u32, lpBuffer: *mut i8) -> u32;
    }
    extern "C" {
        pub fn FindFirstFileNameW(
            lpFileName: root::LPCWSTR,
            dwFlags: u32,
            StringLength: root::LPDWORD,
            LinkName: *mut u16,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindNextFileNameW(
            hFindStream: root::HANDLE,
            StringLength: root::LPDWORD,
            LinkName: *mut u16,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumeInformationA(
            lpRootPathName: *const i8,
            lpVolumeNameBuffer: *mut i8,
            nVolumeNameSize: u32,
            lpVolumeSerialNumber: root::LPDWORD,
            lpMaximumComponentLength: root::LPDWORD,
            lpFileSystemFlags: root::LPDWORD,
            lpFileSystemNameBuffer: *mut i8,
            nFileSystemNameSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTempFileNameA(
            lpPathName: *const i8,
            lpPrefixString: *const i8,
            uUnique: root::UINT,
            lpTempFileName: *mut i8,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn SetFileApisToOEM();
    }
    extern "C" {
        pub fn SetFileApisToANSI();
    }
    extern "C" {
        pub fn CopyFileFromAppW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            bFailIfExists: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDirectoryFromAppW(
            lpPathName: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateFileFromAppW(
            lpFileName: root::LPCWSTR,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            dwCreationDisposition: u32,
            dwFlagsAndAttributes: u32,
            hTemplateFile: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateFile2FromAppW(
            lpFileName: root::LPCWSTR,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            dwCreationDisposition: u32,
            pCreateExParams: root::LPCREATEFILE2_EXTENDED_PARAMETERS,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn DeleteFileFromAppW(lpFileName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstFileExFromAppW(
            lpFileName: root::LPCWSTR,
            fInfoLevelId: root::FINDEX_INFO_LEVELS,
            lpFindFileData: root::LPVOID,
            fSearchOp: root::FINDEX_SEARCH_OPS,
            lpSearchFilter: root::LPVOID,
            dwAdditionalFlags: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetFileAttributesExFromAppW(
            lpFileName: root::LPCWSTR,
            fInfoLevelId: root::GET_FILEEX_INFO_LEVELS,
            lpFileInformation: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileFromAppW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveDirectoryFromAppW(lpPathName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn ReplaceFileFromAppW(
            lpReplacedFileName: root::LPCWSTR,
            lpReplacementFileName: root::LPCWSTR,
            lpBackupFileName: root::LPCWSTR,
            dwReplaceFlags: u32,
            lpExclude: root::LPVOID,
            lpReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileAttributesFromAppW(
            lpFileName: root::LPCWSTR,
            dwFileAttributes: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsDebuggerPresent() -> root::BOOL;
    }
    extern "C" {
        pub fn DebugBreak();
    }
    extern "C" {
        pub fn OutputDebugStringA(lpOutputString: *const i8);
    }
    extern "C" {
        pub fn OutputDebugStringW(lpOutputString: root::LPCWSTR);
    }
    extern "C" {
        pub fn ContinueDebugEvent(
            dwProcessId: u32,
            dwThreadId: u32,
            dwContinueStatus: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitForDebugEvent(
            lpDebugEvent: root::LPDEBUG_EVENT,
            dwMilliseconds: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DebugActiveProcess(dwProcessId: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn DebugActiveProcessStop(dwProcessId: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckRemoteDebuggerPresent(
            hProcess: root::HANDLE,
            pbDebuggerPresent: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitForDebugEventEx(
            lpDebugEvent: root::LPDEBUG_EVENT,
            dwMilliseconds: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EncodePointer(Ptr: root::PVOID) -> root::PVOID;
    }
    extern "C" {
        pub fn DecodePointer(Ptr: root::PVOID) -> root::PVOID;
    }
    extern "C" {
        pub fn EncodeSystemPointer(Ptr: root::PVOID) -> root::PVOID;
    }
    extern "C" {
        pub fn DecodeSystemPointer(Ptr: root::PVOID) -> root::PVOID;
    }
    extern "C" {
        pub fn EncodeRemotePointer(
            ProcessHandle: root::HANDLE,
            Ptr: root::PVOID,
            EncodedPtr: *mut root::PVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DecodeRemotePointer(
            ProcessHandle: root::HANDLE,
            Ptr: root::PVOID,
            DecodedPtr: *mut root::PVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn Beep(dwFreq: u32, dwDuration: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseHandle(hObject: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn DuplicateHandle(
            hSourceProcessHandle: root::HANDLE,
            hSourceHandle: root::HANDLE,
            hTargetProcessHandle: root::HANDLE,
            lpTargetHandle: root::LPHANDLE,
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            dwOptions: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CompareObjectHandles(
            hFirstObjectHandle: root::HANDLE,
            hSecondObjectHandle: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetHandleInformation(hObject: root::HANDLE, lpdwFlags: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn SetHandleInformation(
            hObject: root::HANDLE,
            dwMask: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    pub type PTOP_LEVEL_EXCEPTION_FILTER = ::std::option::Option<
        unsafe extern "C" fn(ExceptionInfo: *mut root::_EXCEPTION_POINTERS) -> i32,
    >;
    pub type LPTOP_LEVEL_EXCEPTION_FILTER = root::PTOP_LEVEL_EXCEPTION_FILTER;
    extern "C" {
        pub fn RaiseException(
            dwExceptionCode: u32,
            dwExceptionFlags: u32,
            nNumberOfArguments: u32,
            lpArguments: *const u64,
        );
    }
    extern "C" {
        pub fn UnhandledExceptionFilter(
            ExceptionInfo: *mut root::_EXCEPTION_POINTERS,
        ) -> i32;
    }
    extern "C" {
        pub fn SetUnhandledExceptionFilter(
            lpTopLevelExceptionFilter: root::LPTOP_LEVEL_EXCEPTION_FILTER,
        ) -> root::LPTOP_LEVEL_EXCEPTION_FILTER;
    }
    extern "C" {
        pub fn GetLastError() -> u32;
    }
    extern "C" {
        pub fn SetLastError(dwErrCode: u32);
    }
    extern "C" {
        pub fn GetErrorMode() -> root::UINT;
    }
    extern "C" {
        pub fn SetErrorMode(uMode: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn AddVectoredExceptionHandler(
            First: root::ULONG,
            Handler: root::PVECTORED_EXCEPTION_HANDLER,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn RemoveVectoredExceptionHandler(Handle: root::PVOID) -> root::ULONG;
    }
    extern "C" {
        pub fn AddVectoredContinueHandler(
            First: root::ULONG,
            Handler: root::PVECTORED_EXCEPTION_HANDLER,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn RemoveVectoredContinueHandler(Handle: root::PVOID) -> root::ULONG;
    }
    extern "C" {
        pub fn RaiseFailFastException(
            pExceptionRecord: root::PEXCEPTION_RECORD,
            pContextRecord: root::PCONTEXT,
            dwFlags: u32,
        );
    }
    extern "C" {
        pub fn FatalAppExitA(uAction: root::UINT, lpMessageText: *const i8);
    }
    extern "C" {
        pub fn FatalAppExitW(uAction: root::UINT, lpMessageText: root::LPCWSTR);
    }
    extern "C" {
        pub fn GetThreadErrorMode() -> u32;
    }
    extern "C" {
        pub fn SetThreadErrorMode(dwNewMode: u32, lpOldMode: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn TerminateProcessOnMemoryExhaustion(FailedAllocationSize: root::SIZE_T);
    }
    extern "C" {
        pub fn FlsAlloc(lpCallback: root::PFLS_CALLBACK_FUNCTION) -> u32;
    }
    extern "C" {
        pub fn FlsGetValue(dwFlsIndex: u32) -> root::PVOID;
    }
    extern "C" {
        pub fn FlsSetValue(dwFlsIndex: u32, lpFlsData: root::PVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn FlsFree(dwFlsIndex: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn IsThreadAFiber() -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePipe(
            hReadPipe: root::PHANDLE,
            hWritePipe: root::PHANDLE,
            lpPipeAttributes: root::LPSECURITY_ATTRIBUTES,
            nSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ConnectNamedPipe(
            hNamedPipe: root::HANDLE,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DisconnectNamedPipe(hNamedPipe: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetNamedPipeHandleState(
            hNamedPipe: root::HANDLE,
            lpMode: root::LPDWORD,
            lpMaxCollectionCount: root::LPDWORD,
            lpCollectDataTimeout: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PeekNamedPipe(
            hNamedPipe: root::HANDLE,
            lpBuffer: root::LPVOID,
            nBufferSize: u32,
            lpBytesRead: root::LPDWORD,
            lpTotalBytesAvail: root::LPDWORD,
            lpBytesLeftThisMessage: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TransactNamedPipe(
            hNamedPipe: root::HANDLE,
            lpInBuffer: root::LPVOID,
            nInBufferSize: u32,
            lpOutBuffer: root::LPVOID,
            nOutBufferSize: u32,
            lpBytesRead: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateNamedPipeW(
            lpName: root::LPCWSTR,
            dwOpenMode: u32,
            dwPipeMode: u32,
            nMaxInstances: u32,
            nOutBufferSize: u32,
            nInBufferSize: u32,
            nDefaultTimeOut: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WaitNamedPipeW(lpNamedPipeName: root::LPCWSTR, nTimeOut: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeClientComputerNameW(
            Pipe: root::HANDLE,
            ClientComputerName: root::LPWSTR,
            ClientComputerNameLength: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImpersonateNamedPipeClient(hNamedPipe: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeInfo(
            hNamedPipe: root::HANDLE,
            lpFlags: root::LPDWORD,
            lpOutBufferSize: root::LPDWORD,
            lpInBufferSize: root::LPDWORD,
            lpMaxInstances: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeHandleStateW(
            hNamedPipe: root::HANDLE,
            lpState: root::LPDWORD,
            lpCurInstances: root::LPDWORD,
            lpMaxCollectionCount: root::LPDWORD,
            lpCollectDataTimeout: root::LPDWORD,
            lpUserName: root::LPWSTR,
            nMaxUserNameSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CallNamedPipeW(
            lpNamedPipeName: root::LPCWSTR,
            lpInBuffer: root::LPVOID,
            nInBufferSize: u32,
            lpOutBuffer: root::LPVOID,
            nOutBufferSize: u32,
            lpBytesRead: root::LPDWORD,
            nTimeOut: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryPerformanceCounter(lpPerformanceCount: *mut root::LARGE_INTEGER) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryPerformanceFrequency(lpFrequency: *mut root::LARGE_INTEGER) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HEAP_SUMMARY {
        pub cb: u32,
        pub cbAllocated: root::SIZE_T,
        pub cbCommitted: root::SIZE_T,
        pub cbReserved: root::SIZE_T,
        pub cbMaxReserve: root::SIZE_T,
    }
    pub type HEAP_SUMMARY = root::_HEAP_SUMMARY;
    pub type PHEAP_SUMMARY = *mut root::_HEAP_SUMMARY;
    pub type LPHEAP_SUMMARY = root::PHEAP_SUMMARY;
    extern "C" {
        pub fn HeapCreate(
            flOptions: u32,
            dwInitialSize: root::SIZE_T,
            dwMaximumSize: root::SIZE_T,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn HeapDestroy(hHeap: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapAlloc(
            hHeap: root::HANDLE,
            dwFlags: u32,
            dwBytes: root::SIZE_T,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn HeapReAlloc(
            hHeap: root::HANDLE,
            dwFlags: u32,
            lpMem: root::LPVOID,
            dwBytes: root::SIZE_T,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn HeapFree(
            hHeap: root::HANDLE,
            dwFlags: u32,
            lpMem: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapSize(
            hHeap: root::HANDLE,
            dwFlags: u32,
            lpMem: root::LPCVOID,
        ) -> root::SIZE_T;
    }
    extern "C" {
        pub fn GetProcessHeap() -> root::HANDLE;
    }
    extern "C" {
        pub fn HeapCompact(hHeap: root::HANDLE, dwFlags: u32) -> root::SIZE_T;
    }
    extern "C" {
        pub fn HeapSetInformation(
            HeapHandle: root::HANDLE,
            HeapInformationClass: root::HEAP_INFORMATION_CLASS,
            HeapInformation: root::PVOID,
            HeapInformationLength: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapValidate(
            hHeap: root::HANDLE,
            dwFlags: u32,
            lpMem: root::LPCVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapSummary(
            hHeap: root::HANDLE,
            dwFlags: u32,
            lpSummary: root::LPHEAP_SUMMARY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessHeaps(
            NumberOfHeaps: u32,
            ProcessHeaps: root::PHANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn HeapLock(hHeap: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapUnlock(hHeap: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapWalk(hHeap: root::HANDLE, lpEntry: root::LPPROCESS_HEAP_ENTRY) -> root::BOOL;
    }
    extern "C" {
        pub fn HeapQueryInformation(
            HeapHandle: root::HANDLE,
            HeapInformationClass: root::HEAP_INFORMATION_CLASS,
            HeapInformation: root::PVOID,
            HeapInformationLength: root::SIZE_T,
            ReturnLength: root::PSIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateIoCompletionPort(
            FileHandle: root::HANDLE,
            ExistingCompletionPort: root::HANDLE,
            CompletionKey: u64,
            NumberOfConcurrentThreads: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetQueuedCompletionStatus(
            CompletionPort: root::HANDLE,
            lpNumberOfBytesTransferred: root::LPDWORD,
            lpCompletionKey: root::PULONG_PTR,
            lpOverlapped: *mut root::LPOVERLAPPED,
            dwMilliseconds: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetQueuedCompletionStatusEx(
            CompletionPort: root::HANDLE,
            lpCompletionPortEntries: root::LPOVERLAPPED_ENTRY,
            ulCount: root::ULONG,
            ulNumEntriesRemoved: root::PULONG,
            dwMilliseconds: u32,
            fAlertable: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PostQueuedCompletionStatus(
            CompletionPort: root::HANDLE,
            dwNumberOfBytesTransferred: u32,
            dwCompletionKey: u64,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeviceIoControl(
            hDevice: root::HANDLE,
            dwIoControlCode: u32,
            lpInBuffer: root::LPVOID,
            nInBufferSize: u32,
            lpOutBuffer: root::LPVOID,
            nOutBufferSize: u32,
            lpBytesReturned: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetOverlappedResult(
            hFile: root::HANDLE,
            lpOverlapped: root::LPOVERLAPPED,
            lpNumberOfBytesTransferred: root::LPDWORD,
            bWait: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CancelIoEx(hFile: root::HANDLE, lpOverlapped: root::LPOVERLAPPED) -> root::BOOL;
    }
    extern "C" {
        pub fn CancelIo(hFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetOverlappedResultEx(
            hFile: root::HANDLE,
            lpOverlapped: root::LPOVERLAPPED,
            lpNumberOfBytesTransferred: root::LPDWORD,
            dwMilliseconds: u32,
            bAlertable: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CancelSynchronousIo(hThread: root::HANDLE) -> root::BOOL;
    }
    pub type SRWLOCK = root::RTL_SRWLOCK;
    pub type PSRWLOCK = *mut root::RTL_SRWLOCK;
    extern "C" {
        pub fn InitializeSRWLock(SRWLock: root::PSRWLOCK);
    }
    extern "C" {
        pub fn ReleaseSRWLockExclusive(SRWLock: root::PSRWLOCK);
    }
    extern "C" {
        pub fn ReleaseSRWLockShared(SRWLock: root::PSRWLOCK);
    }
    extern "C" {
        pub fn AcquireSRWLockExclusive(SRWLock: root::PSRWLOCK);
    }
    extern "C" {
        pub fn AcquireSRWLockShared(SRWLock: root::PSRWLOCK);
    }
    extern "C" {
        pub fn TryAcquireSRWLockExclusive(SRWLock: root::PSRWLOCK) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn TryAcquireSRWLockShared(SRWLock: root::PSRWLOCK) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn InitializeCriticalSection(lpCriticalSection: root::LPCRITICAL_SECTION);
    }
    extern "C" {
        pub fn EnterCriticalSection(lpCriticalSection: root::LPCRITICAL_SECTION);
    }
    extern "C" {
        pub fn LeaveCriticalSection(lpCriticalSection: root::LPCRITICAL_SECTION);
    }
    extern "C" {
        pub fn InitializeCriticalSectionAndSpinCount(
            lpCriticalSection: root::LPCRITICAL_SECTION,
            dwSpinCount: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeCriticalSectionEx(
            lpCriticalSection: root::LPCRITICAL_SECTION,
            dwSpinCount: u32,
            Flags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCriticalSectionSpinCount(
            lpCriticalSection: root::LPCRITICAL_SECTION,
            dwSpinCount: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn TryEnterCriticalSection(lpCriticalSection: root::LPCRITICAL_SECTION) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteCriticalSection(lpCriticalSection: root::LPCRITICAL_SECTION);
    }
    pub type INIT_ONCE = root::RTL_RUN_ONCE;
    pub type PINIT_ONCE = root::PRTL_RUN_ONCE;
    pub type LPINIT_ONCE = root::PRTL_RUN_ONCE;
    pub type PINIT_ONCE_FN = ::std::option::Option<
        unsafe extern "C" fn(
            InitOnce: root::PINIT_ONCE,
            Parameter: root::PVOID,
            Context: *mut root::PVOID,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn InitOnceInitialize(InitOnce: root::PINIT_ONCE);
    }
    extern "C" {
        pub fn InitOnceExecuteOnce(
            InitOnce: root::PINIT_ONCE,
            InitFn: root::PINIT_ONCE_FN,
            Parameter: root::PVOID,
            Context: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitOnceBeginInitialize(
            lpInitOnce: root::LPINIT_ONCE,
            dwFlags: u32,
            fPending: root::PBOOL,
            lpContext: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitOnceComplete(
            lpInitOnce: root::LPINIT_ONCE,
            dwFlags: u32,
            lpContext: root::LPVOID,
        ) -> root::BOOL;
    }
    pub type CONDITION_VARIABLE = root::RTL_CONDITION_VARIABLE;
    pub type PCONDITION_VARIABLE = *mut root::RTL_CONDITION_VARIABLE;
    extern "C" {
        pub fn InitializeConditionVariable(ConditionVariable: root::PCONDITION_VARIABLE);
    }
    extern "C" {
        pub fn WakeConditionVariable(ConditionVariable: root::PCONDITION_VARIABLE);
    }
    extern "C" {
        pub fn WakeAllConditionVariable(ConditionVariable: root::PCONDITION_VARIABLE);
    }
    extern "C" {
        pub fn SleepConditionVariableCS(
            ConditionVariable: root::PCONDITION_VARIABLE,
            CriticalSection: root::PCRITICAL_SECTION,
            dwMilliseconds: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SleepConditionVariableSRW(
            ConditionVariable: root::PCONDITION_VARIABLE,
            SRWLock: root::PSRWLOCK,
            dwMilliseconds: u32,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetEvent(hEvent: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ResetEvent(hEvent: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ReleaseSemaphore(
            hSemaphore: root::HANDLE,
            lReleaseCount: i32,
            lpPreviousCount: root::LPLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReleaseMutex(hMutex: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitForSingleObject(
            hHandle: root::HANDLE,
            dwMilliseconds: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SleepEx(dwMilliseconds: u32, bAlertable: root::BOOL) -> u32;
    }
    extern "C" {
        pub fn WaitForSingleObjectEx(
            hHandle: root::HANDLE,
            dwMilliseconds: u32,
            bAlertable: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn WaitForMultipleObjectsEx(
            nCount: u32,
            lpHandles: *const root::HANDLE,
            bWaitAll: root::BOOL,
            dwMilliseconds: u32,
            bAlertable: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn CreateMutexA(
            lpMutexAttributes: root::LPSECURITY_ATTRIBUTES,
            bInitialOwner: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateMutexW(
            lpMutexAttributes: root::LPSECURITY_ATTRIBUTES,
            bInitialOwner: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenMutexW(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateEventA(
            lpEventAttributes: root::LPSECURITY_ATTRIBUTES,
            bManualReset: root::BOOL,
            bInitialState: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateEventW(
            lpEventAttributes: root::LPSECURITY_ATTRIBUTES,
            bManualReset: root::BOOL,
            bInitialState: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenEventA(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenEventW(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenSemaphoreW(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    pub type PTIMERAPCROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            lpArgToCompletionRoutine: root::LPVOID,
            dwTimerLowValue: u32,
            dwTimerHighValue: u32,
        ),
    >;
    extern "C" {
        pub fn OpenWaitableTimerW(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpTimerName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn SetWaitableTimerEx(
            hTimer: root::HANDLE,
            lpDueTime: *const root::LARGE_INTEGER,
            lPeriod: i32,
            pfnCompletionRoutine: root::PTIMERAPCROUTINE,
            lpArgToCompletionRoutine: root::LPVOID,
            WakeContext: root::PREASON_CONTEXT,
            TolerableDelay: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWaitableTimer(
            hTimer: root::HANDLE,
            lpDueTime: *const root::LARGE_INTEGER,
            lPeriod: i32,
            pfnCompletionRoutine: root::PTIMERAPCROUTINE,
            lpArgToCompletionRoutine: root::LPVOID,
            fResume: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CancelWaitableTimer(hTimer: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateMutexExA(
            lpMutexAttributes: root::LPSECURITY_ATTRIBUTES,
            lpName: *const i8,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateMutexExW(
            lpMutexAttributes: root::LPSECURITY_ATTRIBUTES,
            lpName: root::LPCWSTR,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateEventExA(
            lpEventAttributes: root::LPSECURITY_ATTRIBUTES,
            lpName: *const i8,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateEventExW(
            lpEventAttributes: root::LPSECURITY_ATTRIBUTES,
            lpName: root::LPCWSTR,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateSemaphoreExW(
            lpSemaphoreAttributes: root::LPSECURITY_ATTRIBUTES,
            lInitialCount: i32,
            lMaximumCount: i32,
            lpName: root::LPCWSTR,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateWaitableTimerExW(
            lpTimerAttributes: root::LPSECURITY_ATTRIBUTES,
            lpTimerName: root::LPCWSTR,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    pub type SYNCHRONIZATION_BARRIER = root::RTL_BARRIER;
    pub type PSYNCHRONIZATION_BARRIER = root::PRTL_BARRIER;
    pub type LPSYNCHRONIZATION_BARRIER = root::PRTL_BARRIER;
    extern "C" {
        pub fn EnterSynchronizationBarrier(
            lpBarrier: root::LPSYNCHRONIZATION_BARRIER,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeSynchronizationBarrier(
            lpBarrier: root::LPSYNCHRONIZATION_BARRIER,
            lTotalThreads: i32,
            lSpinCount: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteSynchronizationBarrier(
            lpBarrier: root::LPSYNCHRONIZATION_BARRIER,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Sleep(dwMilliseconds: u32);
    }
    extern "C" {
        pub fn WaitOnAddress(
            Address: *mut ::std::os::raw::c_void,
            CompareAddress: root::PVOID,
            AddressSize: root::SIZE_T,
            dwMilliseconds: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WakeByAddressSingle(Address: root::PVOID);
    }
    extern "C" {
        pub fn WakeByAddressAll(Address: root::PVOID);
    }
    extern "C" {
        pub fn SignalObjectAndWait(
            hObjectToSignal: root::HANDLE,
            hObjectToWaitOn: root::HANDLE,
            dwMilliseconds: u32,
            bAlertable: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn WaitForMultipleObjects(
            nCount: u32,
            lpHandles: *const root::HANDLE,
            bWaitAll: root::BOOL,
            dwMilliseconds: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CreateSemaphoreW(
            lpSemaphoreAttributes: root::LPSECURITY_ATTRIBUTES,
            lInitialCount: i32,
            lMaximumCount: i32,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateWaitableTimerW(
            lpTimerAttributes: root::LPSECURITY_ATTRIBUTES,
            bManualReset: root::BOOL,
            lpTimerName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn InitializeSListHead(ListHead: root::PSLIST_HEADER);
    }
    extern "C" {
        pub fn InterlockedPopEntrySList(ListHead: root::PSLIST_HEADER) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn InterlockedPushEntrySList(
            ListHead: root::PSLIST_HEADER,
            ListEntry: root::PSLIST_ENTRY,
        ) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn InterlockedPushListSListEx(
            ListHead: root::PSLIST_HEADER,
            List: root::PSLIST_ENTRY,
            ListEnd: root::PSLIST_ENTRY,
            Count: root::ULONG,
        ) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn InterlockedFlushSList(ListHead: root::PSLIST_HEADER) -> root::PSLIST_ENTRY;
    }
    extern "C" {
        pub fn QueryDepthSList(ListHead: root::PSLIST_HEADER) -> root::USHORT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_INFORMATION {
        pub hProcess: root::HANDLE,
        pub hThread: root::HANDLE,
        pub dwProcessId: u32,
        pub dwThreadId: u32,
    }
    pub type PROCESS_INFORMATION = root::_PROCESS_INFORMATION;
    pub type PPROCESS_INFORMATION = *mut root::_PROCESS_INFORMATION;
    pub type LPPROCESS_INFORMATION = *mut root::_PROCESS_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STARTUPINFOA {
        pub cb: u32,
        pub lpReserved: *mut i8,
        pub lpDesktop: *mut i8,
        pub lpTitle: *mut i8,
        pub dwX: u32,
        pub dwY: u32,
        pub dwXSize: u32,
        pub dwYSize: u32,
        pub dwXCountChars: u32,
        pub dwYCountChars: u32,
        pub dwFillAttribute: u32,
        pub dwFlags: u32,
        pub wShowWindow: u16,
        pub cbReserved2: u16,
        pub lpReserved2: root::LPBYTE,
        pub hStdInput: root::HANDLE,
        pub hStdOutput: root::HANDLE,
        pub hStdError: root::HANDLE,
    }
    pub type STARTUPINFOA = root::_STARTUPINFOA;
    pub type LPSTARTUPINFOA = *mut root::_STARTUPINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STARTUPINFOW {
        pub cb: u32,
        pub lpReserved: root::LPWSTR,
        pub lpDesktop: root::LPWSTR,
        pub lpTitle: root::LPWSTR,
        pub dwX: u32,
        pub dwY: u32,
        pub dwXSize: u32,
        pub dwYSize: u32,
        pub dwXCountChars: u32,
        pub dwYCountChars: u32,
        pub dwFillAttribute: u32,
        pub dwFlags: u32,
        pub wShowWindow: u16,
        pub cbReserved2: u16,
        pub lpReserved2: root::LPBYTE,
        pub hStdInput: root::HANDLE,
        pub hStdOutput: root::HANDLE,
        pub hStdError: root::HANDLE,
    }
    pub type STARTUPINFOW = root::_STARTUPINFOW;
    pub type LPSTARTUPINFOW = *mut root::_STARTUPINFOW;
    pub type STARTUPINFO = root::STARTUPINFOA;
    pub type LPSTARTUPINFO = root::LPSTARTUPINFOA;
    extern "C" {
        pub fn QueueUserAPC(
            pfnAPC: root::PAPCFUNC,
            hThread: root::HANDLE,
            dwData: u64,
        ) -> u32;
    }
    extern "C" {
        pub fn GetProcessTimes(
            hProcess: root::HANDLE,
            lpCreationTime: root::LPFILETIME,
            lpExitTime: root::LPFILETIME,
            lpKernelTime: root::LPFILETIME,
            lpUserTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentProcess() -> root::HANDLE;
    }
    extern "C" {
        pub fn GetCurrentProcessId() -> u32;
    }
    extern "C" {
        pub fn ExitProcess(uExitCode: root::UINT);
    }
    extern "C" {
        pub fn TerminateProcess(hProcess: root::HANDLE, uExitCode: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetExitCodeProcess(hProcess: root::HANDLE, lpExitCode: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn SwitchToThread() -> root::BOOL;
    }
    extern "C" {
        pub fn CreateThread(
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            dwStackSize: root::SIZE_T,
            lpStartAddress: root::LPTHREAD_START_ROUTINE,
            lpParameter: root::LPVOID,
            dwCreationFlags: u32,
            lpThreadId: root::LPDWORD,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateRemoteThread(
            hProcess: root::HANDLE,
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            dwStackSize: root::SIZE_T,
            lpStartAddress: root::LPTHREAD_START_ROUTINE,
            lpParameter: root::LPVOID,
            dwCreationFlags: u32,
            lpThreadId: root::LPDWORD,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetCurrentThread() -> root::HANDLE;
    }
    extern "C" {
        pub fn GetCurrentThreadId() -> u32;
    }
    extern "C" {
        pub fn OpenThread(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            dwThreadId: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn SetThreadPriority(
            hThread: root::HANDLE,
            nPriority: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadPriorityBoost(
            hThread: root::HANDLE,
            bDisablePriorityBoost: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadPriorityBoost(
            hThread: root::HANDLE,
            pDisablePriorityBoost: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadPriority(hThread: root::HANDLE) -> i32;
    }
    extern "C" {
        pub fn ExitThread(dwExitCode: u32);
    }
    extern "C" {
        pub fn TerminateThread(hThread: root::HANDLE, dwExitCode: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetExitCodeThread(hThread: root::HANDLE, lpExitCode: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn SuspendThread(hThread: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn ResumeThread(hThread: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn TlsAlloc() -> u32;
    }
    extern "C" {
        pub fn TlsGetValue(dwTlsIndex: u32) -> root::LPVOID;
    }
    extern "C" {
        pub fn TlsSetValue(dwTlsIndex: u32, lpTlsValue: root::LPVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn TlsFree(dwTlsIndex: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateProcessA(
            lpApplicationName: *const i8,
            lpCommandLine: *mut i8,
            lpProcessAttributes: root::LPSECURITY_ATTRIBUTES,
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            bInheritHandles: root::BOOL,
            dwCreationFlags: u32,
            lpEnvironment: root::LPVOID,
            lpCurrentDirectory: *const i8,
            lpStartupInfo: root::LPSTARTUPINFOA,
            lpProcessInformation: root::LPPROCESS_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateProcessW(
            lpApplicationName: root::LPCWSTR,
            lpCommandLine: root::LPWSTR,
            lpProcessAttributes: root::LPSECURITY_ATTRIBUTES,
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            bInheritHandles: root::BOOL,
            dwCreationFlags: u32,
            lpEnvironment: root::LPVOID,
            lpCurrentDirectory: root::LPCWSTR,
            lpStartupInfo: root::LPSTARTUPINFOW,
            lpProcessInformation: root::LPPROCESS_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessShutdownParameters(
            dwLevel: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessVersion(ProcessId: u32) -> u32;
    }
    extern "C" {
        pub fn GetStartupInfoW(lpStartupInfo: root::LPSTARTUPINFOW);
    }
    extern "C" {
        pub fn CreateProcessAsUserW(
            hToken: root::HANDLE,
            lpApplicationName: root::LPCWSTR,
            lpCommandLine: root::LPWSTR,
            lpProcessAttributes: root::LPSECURITY_ATTRIBUTES,
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            bInheritHandles: root::BOOL,
            dwCreationFlags: u32,
            lpEnvironment: root::LPVOID,
            lpCurrentDirectory: root::LPCWSTR,
            lpStartupInfo: root::LPSTARTUPINFOW,
            lpProcessInformation: root::LPPROCESS_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadToken(Thread: root::PHANDLE, Token: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenProcessToken(
            ProcessHandle: root::HANDLE,
            DesiredAccess: u32,
            TokenHandle: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenThreadToken(
            ThreadHandle: root::HANDLE,
            DesiredAccess: u32,
            OpenAsSelf: root::BOOL,
            TokenHandle: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPriorityClass(hProcess: root::HANDLE, dwPriorityClass: u32)
            -> root::BOOL;
    }
    extern "C" {
        pub fn GetPriorityClass(hProcess: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn SetThreadStackGuarantee(StackSizeInBytes: root::PULONG) -> root::BOOL;
    }
    extern "C" {
        pub fn ProcessIdToSessionId(
            dwProcessId: u32,
            pSessionId: *mut u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROC_THREAD_ATTRIBUTE_LIST {
        _unused: [u8; 0],
    }
    pub type PPROC_THREAD_ATTRIBUTE_LIST = *mut root::_PROC_THREAD_ATTRIBUTE_LIST;
    pub type LPPROC_THREAD_ATTRIBUTE_LIST = *mut root::_PROC_THREAD_ATTRIBUTE_LIST;
    extern "C" {
        pub fn GetProcessId(Process: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn GetThreadId(Thread: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn FlushProcessWriteBuffers();
    }
    extern "C" {
        pub fn GetProcessIdOfThread(Thread: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn InitializeProcThreadAttributeList(
            lpAttributeList: root::LPPROC_THREAD_ATTRIBUTE_LIST,
            dwAttributeCount: u32,
            dwFlags: u32,
            lpSize: root::PSIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteProcThreadAttributeList(lpAttributeList: root::LPPROC_THREAD_ATTRIBUTE_LIST);
    }
    extern "C" {
        pub fn UpdateProcThreadAttribute(
            lpAttributeList: root::LPPROC_THREAD_ATTRIBUTE_LIST,
            dwFlags: u32,
            Attribute: root::DWORD_PTR,
            lpValue: root::PVOID,
            cbSize: root::SIZE_T,
            lpPreviousValue: root::PVOID,
            lpReturnSize: root::PSIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessDynamicEHContinuationTargets(
            Process: root::HANDLE,
            NumberOfTargets: root::USHORT,
            Targets: root::PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessDynamicEnforcedCetCompatibleRanges(
            Process: root::HANDLE,
            NumberOfRanges: root::USHORT,
            Ranges: root::PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessAffinityUpdateMode(
            hProcess: root::HANDLE,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryProcessAffinityUpdateMode(
            hProcess: root::HANDLE,
            lpdwFlags: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateRemoteThreadEx(
            hProcess: root::HANDLE,
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            dwStackSize: root::SIZE_T,
            lpStartAddress: root::LPTHREAD_START_ROUTINE,
            lpParameter: root::LPVOID,
            dwCreationFlags: u32,
            lpAttributeList: root::LPPROC_THREAD_ATTRIBUTE_LIST,
            lpThreadId: root::LPDWORD,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetCurrentThreadStackLimits(LowLimit: root::PULONG_PTR, HighLimit: root::PULONG_PTR);
    }
    extern "C" {
        pub fn GetThreadContext(hThread: root::HANDLE, lpContext: root::LPCONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessMitigationPolicy(
            hProcess: root::HANDLE,
            MitigationPolicy: root::PROCESS_MITIGATION_POLICY,
            lpBuffer: root::PVOID,
            dwLength: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadContext(
            hThread: root::HANDLE,
            lpContext: *const root::CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessMitigationPolicy(
            MitigationPolicy: root::PROCESS_MITIGATION_POLICY,
            lpBuffer: root::PVOID,
            dwLength: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FlushInstructionCache(
            hProcess: root::HANDLE,
            lpBaseAddress: root::LPCVOID,
            dwSize: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadTimes(
            hThread: root::HANDLE,
            lpCreationTime: root::LPFILETIME,
            lpExitTime: root::LPFILETIME,
            lpKernelTime: root::LPFILETIME,
            lpUserTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenProcess(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            dwProcessId: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn IsProcessorFeaturePresent(ProcessorFeature: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessHandleCount(
            hProcess: root::HANDLE,
            pdwHandleCount: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentProcessorNumber() -> u32;
    }
    extern "C" {
        pub fn SetThreadIdealProcessorEx(
            hThread: root::HANDLE,
            lpIdealProcessor: root::PPROCESSOR_NUMBER,
            lpPreviousIdealProcessor: root::PPROCESSOR_NUMBER,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadIdealProcessorEx(
            hThread: root::HANDLE,
            lpIdealProcessor: root::PPROCESSOR_NUMBER,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentProcessorNumberEx(ProcNumber: root::PPROCESSOR_NUMBER);
    }
    extern "C" {
        pub fn GetProcessPriorityBoost(
            hProcess: root::HANDLE,
            pDisablePriorityBoost: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessPriorityBoost(
            hProcess: root::HANDLE,
            bDisablePriorityBoost: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadIOPendingFlag(
            hThread: root::HANDLE,
            lpIOIsPending: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemTimes(
            lpIdleTime: root::PFILETIME,
            lpKernelTime: root::PFILETIME,
            lpUserTime: root::PFILETIME,
        ) -> root::BOOL;
    }
    pub const _THREAD_INFORMATION_CLASS_ThreadMemoryPriority: root::_THREAD_INFORMATION_CLASS = 0;
    pub const _THREAD_INFORMATION_CLASS_ThreadAbsoluteCpuPriority: root::_THREAD_INFORMATION_CLASS =
        1;
    pub const _THREAD_INFORMATION_CLASS_ThreadDynamicCodePolicy: root::_THREAD_INFORMATION_CLASS =
        2;
    pub const _THREAD_INFORMATION_CLASS_ThreadPowerThrottling: root::_THREAD_INFORMATION_CLASS = 3;
    pub const _THREAD_INFORMATION_CLASS_ThreadInformationClassMax: root::_THREAD_INFORMATION_CLASS =
        4;
    pub type _THREAD_INFORMATION_CLASS = i32;
    pub use self::super::root::_THREAD_INFORMATION_CLASS as THREAD_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEMORY_PRIORITY_INFORMATION {
        pub MemoryPriority: root::ULONG,
    }
    pub type MEMORY_PRIORITY_INFORMATION = root::_MEMORY_PRIORITY_INFORMATION;
    pub type PMEMORY_PRIORITY_INFORMATION = *mut root::_MEMORY_PRIORITY_INFORMATION;
    extern "C" {
        pub fn GetThreadInformation(
            hThread: root::HANDLE,
            ThreadInformationClass: root::THREAD_INFORMATION_CLASS,
            ThreadInformation: root::LPVOID,
            ThreadInformationSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadInformation(
            hThread: root::HANDLE,
            ThreadInformationClass: root::THREAD_INFORMATION_CLASS,
            ThreadInformation: root::LPVOID,
            ThreadInformationSize: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _THREAD_POWER_THROTTLING_STATE {
        pub Version: root::ULONG,
        pub ControlMask: root::ULONG,
        pub StateMask: root::ULONG,
    }
    pub type THREAD_POWER_THROTTLING_STATE = root::_THREAD_POWER_THROTTLING_STATE;
    extern "C" {
        pub fn IsProcessCritical(hProcess: root::HANDLE, Critical: root::PBOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProtectedPolicy(
            PolicyGuid: root::LPCGUID,
            PolicyValue: u64,
            OldPolicyValue: root::PULONG_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryProtectedPolicy(
            PolicyGuid: root::LPCGUID,
            PolicyValue: root::PULONG_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadIdealProcessor(
            hThread: root::HANDLE,
            dwIdealProcessor: u32,
        ) -> u32;
    }
    pub const _PROCESS_INFORMATION_CLASS_ProcessMemoryPriority: root::_PROCESS_INFORMATION_CLASS =
        0;
    pub const _PROCESS_INFORMATION_CLASS_ProcessMemoryExhaustionInfo:
        root::_PROCESS_INFORMATION_CLASS = 1;
    pub const _PROCESS_INFORMATION_CLASS_ProcessAppMemoryInfo: root::_PROCESS_INFORMATION_CLASS = 2;
    pub const _PROCESS_INFORMATION_CLASS_ProcessInPrivateInfo: root::_PROCESS_INFORMATION_CLASS = 3;
    pub const _PROCESS_INFORMATION_CLASS_ProcessPowerThrottling: root::_PROCESS_INFORMATION_CLASS =
        4;
    pub const _PROCESS_INFORMATION_CLASS_ProcessReservedValue1: root::_PROCESS_INFORMATION_CLASS =
        5;
    pub const _PROCESS_INFORMATION_CLASS_ProcessTelemetryCoverageInfo:
        root::_PROCESS_INFORMATION_CLASS = 6;
    pub const _PROCESS_INFORMATION_CLASS_ProcessProtectionLevelInfo:
        root::_PROCESS_INFORMATION_CLASS = 7;
    pub const _PROCESS_INFORMATION_CLASS_ProcessLeapSecondInfo: root::_PROCESS_INFORMATION_CLASS =
        8;
    pub const _PROCESS_INFORMATION_CLASS_ProcessInformationClassMax:
        root::_PROCESS_INFORMATION_CLASS = 9;
    pub type _PROCESS_INFORMATION_CLASS = i32;
    pub use self::super::root::_PROCESS_INFORMATION_CLASS as PROCESS_INFORMATION_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _APP_MEMORY_INFORMATION {
        pub AvailableCommit: root::ULONG64,
        pub PrivateCommitUsage: root::ULONG64,
        pub PeakPrivateCommitUsage: root::ULONG64,
        pub TotalCommitUsage: root::ULONG64,
    }
    pub type APP_MEMORY_INFORMATION = root::_APP_MEMORY_INFORMATION;
    pub type PAPP_MEMORY_INFORMATION = *mut root::_APP_MEMORY_INFORMATION;
    pub const _PROCESS_MEMORY_EXHAUSTION_TYPE_PMETypeFailFastOnCommitFailure:
        root::_PROCESS_MEMORY_EXHAUSTION_TYPE = 0;
    pub const _PROCESS_MEMORY_EXHAUSTION_TYPE_PMETypeMax: root::_PROCESS_MEMORY_EXHAUSTION_TYPE = 1;
    pub type _PROCESS_MEMORY_EXHAUSTION_TYPE = i32;
    pub use self::super::root::_PROCESS_MEMORY_EXHAUSTION_TYPE as PROCESS_MEMORY_EXHAUSTION_TYPE;
    pub type PPROCESS_MEMORY_EXHAUSTION_TYPE = *mut root::_PROCESS_MEMORY_EXHAUSTION_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_MEMORY_EXHAUSTION_INFO {
        pub Version: root::USHORT,
        pub Reserved: root::USHORT,
        pub Type: root::PROCESS_MEMORY_EXHAUSTION_TYPE,
        pub Value: u64,
    }
    pub type PROCESS_MEMORY_EXHAUSTION_INFO = root::_PROCESS_MEMORY_EXHAUSTION_INFO;
    pub type PPROCESS_MEMORY_EXHAUSTION_INFO = *mut root::_PROCESS_MEMORY_EXHAUSTION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_POWER_THROTTLING_STATE {
        pub Version: root::ULONG,
        pub ControlMask: root::ULONG,
        pub StateMask: root::ULONG,
    }
    pub type PROCESS_POWER_THROTTLING_STATE = root::_PROCESS_POWER_THROTTLING_STATE;
    pub type PPROCESS_POWER_THROTTLING_STATE = *mut root::_PROCESS_POWER_THROTTLING_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PROCESS_PROTECTION_LEVEL_INFORMATION {
        pub ProtectionLevel: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROCESS_LEAP_SECOND_INFO {
        pub Flags: root::ULONG,
        pub Reserved: root::ULONG,
    }
    pub type PROCESS_LEAP_SECOND_INFO = root::_PROCESS_LEAP_SECOND_INFO;
    pub type PPROCESS_LEAP_SECOND_INFO = *mut root::_PROCESS_LEAP_SECOND_INFO;
    extern "C" {
        pub fn SetProcessInformation(
            hProcess: root::HANDLE,
            ProcessInformationClass: root::PROCESS_INFORMATION_CLASS,
            ProcessInformation: root::LPVOID,
            ProcessInformationSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessInformation(
            hProcess: root::HANDLE,
            ProcessInformationClass: root::PROCESS_INFORMATION_CLASS,
            ProcessInformation: root::LPVOID,
            ProcessInformationSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemCpuSetInformation(
            Information: root::PSYSTEM_CPU_SET_INFORMATION,
            BufferLength: root::ULONG,
            ReturnedLength: root::PULONG,
            Process: root::HANDLE,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessDefaultCpuSets(
            Process: root::HANDLE,
            CpuSetIds: root::PULONG,
            CpuSetIdCount: root::ULONG,
            RequiredIdCount: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessDefaultCpuSets(
            Process: root::HANDLE,
            CpuSetIds: *const root::ULONG,
            CpuSetIdCount: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadSelectedCpuSets(
            Thread: root::HANDLE,
            CpuSetIds: root::PULONG,
            CpuSetIdCount: root::ULONG,
            RequiredIdCount: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadSelectedCpuSets(
            Thread: root::HANDLE,
            CpuSetIds: *const root::ULONG,
            CpuSetIdCount: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateProcessAsUserA(
            hToken: root::HANDLE,
            lpApplicationName: *const i8,
            lpCommandLine: *mut i8,
            lpProcessAttributes: root::LPSECURITY_ATTRIBUTES,
            lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
            bInheritHandles: root::BOOL,
            dwCreationFlags: u32,
            lpEnvironment: root::LPVOID,
            lpCurrentDirectory: *const i8,
            lpStartupInfo: root::LPSTARTUPINFOA,
            lpProcessInformation: root::LPPROCESS_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessShutdownParameters(
            lpdwLevel: root::LPDWORD,
            lpdwFlags: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadDescription(
            hThread: root::HANDLE,
            lpThreadDescription: *const u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetThreadDescription(
            hThread: root::HANDLE,
            ppszThreadDescription: *mut *mut u16,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SYSTEM_INFO {
        pub __bindgen_anon_1: root::_SYSTEM_INFO__bindgen_ty_1,
        pub dwPageSize: u32,
        pub lpMinimumApplicationAddress: root::LPVOID,
        pub lpMaximumApplicationAddress: root::LPVOID,
        pub dwActiveProcessorMask: root::DWORD_PTR,
        pub dwNumberOfProcessors: u32,
        pub dwProcessorType: u32,
        pub dwAllocationGranularity: u32,
        pub wProcessorLevel: u16,
        pub wProcessorRevision: u16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SYSTEM_INFO__bindgen_ty_1 {
        pub dwOemId: u32,
        pub __bindgen_anon_1: root::_SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub wProcessorArchitecture: u16,
        pub wReserved: u16,
    }
    pub type SYSTEM_INFO = root::_SYSTEM_INFO;
    pub type LPSYSTEM_INFO = *mut root::_SYSTEM_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEMORYSTATUSEX {
        pub dwLength: u32,
        pub dwMemoryLoad: u32,
        pub ullTotalPhys: root::DWORDLONG,
        pub ullAvailPhys: root::DWORDLONG,
        pub ullTotalPageFile: root::DWORDLONG,
        pub ullAvailPageFile: root::DWORDLONG,
        pub ullTotalVirtual: root::DWORDLONG,
        pub ullAvailVirtual: root::DWORDLONG,
        pub ullAvailExtendedVirtual: root::DWORDLONG,
    }
    pub type MEMORYSTATUSEX = root::_MEMORYSTATUSEX;
    pub type LPMEMORYSTATUSEX = *mut root::_MEMORYSTATUSEX;
    extern "C" {
        pub fn GlobalMemoryStatusEx(lpBuffer: root::LPMEMORYSTATUSEX) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemInfo(lpSystemInfo: root::LPSYSTEM_INFO);
    }
    extern "C" {
        pub fn GetSystemTime(lpSystemTime: root::LPSYSTEMTIME);
    }
    extern "C" {
        pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: root::LPFILETIME);
    }
    extern "C" {
        pub fn GetLocalTime(lpSystemTime: root::LPSYSTEMTIME);
    }
    extern "C" {
        pub fn IsUserCetAvailableInEnvironment(UserCetEnvironment: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemLeapSecondInformation(
            Enabled: root::PBOOL,
            Flags: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVersion() -> u32;
    }
    extern "C" {
        pub fn SetLocalTime(lpSystemTime: *const root::SYSTEMTIME) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTickCount() -> u32;
    }
    extern "C" {
        pub fn GetTickCount64() -> root::ULONGLONG;
    }
    extern "C" {
        pub fn GetSystemTimeAdjustment(
            lpTimeAdjustment: root::PDWORD,
            lpTimeIncrement: root::PDWORD,
            lpTimeAdjustmentDisabled: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemTimeAdjustmentPrecise(
            lpTimeAdjustment: root::PDWORD64,
            lpTimeIncrement: root::PDWORD64,
            lpTimeAdjustmentDisabled: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemDirectoryA(lpBuffer: *mut i8, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemDirectoryW(lpBuffer: root::LPWSTR, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetWindowsDirectoryA(lpBuffer: *mut i8, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetWindowsDirectoryW(lpBuffer: root::LPWSTR, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemWindowsDirectoryA(lpBuffer: *mut i8, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemWindowsDirectoryW(lpBuffer: root::LPWSTR, uSize: root::UINT) -> root::UINT;
    }
    pub const _COMPUTER_NAME_FORMAT_ComputerNameNetBIOS: root::_COMPUTER_NAME_FORMAT = 0;
    pub const _COMPUTER_NAME_FORMAT_ComputerNameDnsHostname: root::_COMPUTER_NAME_FORMAT = 1;
    pub const _COMPUTER_NAME_FORMAT_ComputerNameDnsDomain: root::_COMPUTER_NAME_FORMAT = 2;
    pub const _COMPUTER_NAME_FORMAT_ComputerNameDnsFullyQualified: root::_COMPUTER_NAME_FORMAT = 3;
    pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalNetBIOS: root::_COMPUTER_NAME_FORMAT = 4;
    pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalDnsHostname: root::_COMPUTER_NAME_FORMAT =
        5;
    pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalDnsDomain: root::_COMPUTER_NAME_FORMAT = 6;
    pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalDnsFullyQualified:
        root::_COMPUTER_NAME_FORMAT = 7;
    pub const _COMPUTER_NAME_FORMAT_ComputerNameMax: root::_COMPUTER_NAME_FORMAT = 8;
    pub type _COMPUTER_NAME_FORMAT = i32;
    pub use self::super::root::_COMPUTER_NAME_FORMAT as COMPUTER_NAME_FORMAT;
    extern "C" {
        pub fn GetComputerNameExA(
            NameType: root::COMPUTER_NAME_FORMAT,
            lpBuffer: *mut i8,
            nSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetComputerNameExW(
            NameType: root::COMPUTER_NAME_FORMAT,
            lpBuffer: root::LPWSTR,
            nSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetComputerNameExW(
            NameType: root::COMPUTER_NAME_FORMAT,
            lpBuffer: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSystemTime(lpSystemTime: *const root::SYSTEMTIME) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVersionExA(lpVersionInformation: root::LPOSVERSIONINFOA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVersionExW(lpVersionInformation: root::LPOSVERSIONINFOW) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLogicalProcessorInformation(
            Buffer: root::PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,
            ReturnedLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLogicalProcessorInformationEx(
            RelationshipType: root::LOGICAL_PROCESSOR_RELATIONSHIP,
            Buffer: root::PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,
            ReturnedLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNativeSystemInfo(lpSystemInfo: root::LPSYSTEM_INFO);
    }
    extern "C" {
        pub fn GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: root::LPFILETIME);
    }
    extern "C" {
        pub fn GetProductInfo(
            dwOSMajorVersion: u32,
            dwOSMinorVersion: u32,
            dwSpMajorVersion: u32,
            dwSpMinorVersion: u32,
            pdwReturnedProductType: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetOsSafeBootMode(Flags: root::PDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemFirmwareTables(
            FirmwareTableProviderSignature: u32,
            pFirmwareTableEnumBuffer: root::PVOID,
            BufferSize: u32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemFirmwareTable(
            FirmwareTableProviderSignature: u32,
            FirmwareTableID: u32,
            pFirmwareTableBuffer: root::PVOID,
            BufferSize: u32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DnsHostnameToComputerNameExW(
            Hostname: root::LPCWSTR,
            ComputerName: root::LPWSTR,
            nSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPhysicallyInstalledSystemMemory(
            TotalMemoryInKilobytes: root::PULONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetComputerNameEx2W(
            NameType: root::COMPUTER_NAME_FORMAT,
            Flags: u32,
            lpBuffer: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSystemTimeAdjustment(
            dwTimeAdjustment: u32,
            bTimeAdjustmentDisabled: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSystemTimeAdjustmentPrecise(
            dwTimeAdjustment: root::DWORD64,
            bTimeAdjustmentDisabled: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InstallELAMCertificateInfo(ELAMFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessorSystemCycleTime(
            Group: root::USHORT,
            Buffer: root::PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,
            ReturnedLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetOsManufacturingMode(pbEnabled: root::PBOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetIntegratedDisplaySize(sizeInInches: *mut f64) -> root::HRESULT;
    }
    extern "C" {
        pub fn SetComputerNameA(lpComputerName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetComputerNameW(lpComputerName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn SetComputerNameExA(
            NameType: root::COMPUTER_NAME_FORMAT,
            lpBuffer: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualAlloc(
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            flAllocationType: u32,
            flProtect: u32,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn VirtualProtect(
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            flNewProtect: u32,
            lpflOldProtect: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualFree(
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            dwFreeType: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualQuery(
            lpAddress: root::LPCVOID,
            lpBuffer: root::PMEMORY_BASIC_INFORMATION,
            dwLength: root::SIZE_T,
        ) -> root::SIZE_T;
    }
    extern "C" {
        pub fn VirtualAllocEx(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            flAllocationType: u32,
            flProtect: u32,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn VirtualProtectEx(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            flNewProtect: u32,
            lpflOldProtect: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualQueryEx(
            hProcess: root::HANDLE,
            lpAddress: root::LPCVOID,
            lpBuffer: root::PMEMORY_BASIC_INFORMATION,
            dwLength: root::SIZE_T,
        ) -> root::SIZE_T;
    }
    extern "C" {
        pub fn ReadProcessMemory(
            hProcess: root::HANDLE,
            lpBaseAddress: root::LPCVOID,
            lpBuffer: root::LPVOID,
            nSize: root::SIZE_T,
            lpNumberOfBytesRead: *mut root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteProcessMemory(
            hProcess: root::HANDLE,
            lpBaseAddress: root::LPVOID,
            lpBuffer: root::LPCVOID,
            nSize: root::SIZE_T,
            lpNumberOfBytesWritten: *mut root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateFileMappingW(
            hFile: root::HANDLE,
            lpFileMappingAttributes: root::LPSECURITY_ATTRIBUTES,
            flProtect: u32,
            dwMaximumSizeHigh: u32,
            dwMaximumSizeLow: u32,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenFileMappingW(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn MapViewOfFile(
            hFileMappingObject: root::HANDLE,
            dwDesiredAccess: u32,
            dwFileOffsetHigh: u32,
            dwFileOffsetLow: u32,
            dwNumberOfBytesToMap: root::SIZE_T,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn MapViewOfFileEx(
            hFileMappingObject: root::HANDLE,
            dwDesiredAccess: u32,
            dwFileOffsetHigh: u32,
            dwFileOffsetLow: u32,
            dwNumberOfBytesToMap: root::SIZE_T,
            lpBaseAddress: root::LPVOID,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn VirtualFreeEx(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            dwFreeType: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FlushViewOfFile(
            lpBaseAddress: root::LPCVOID,
            dwNumberOfBytesToFlush: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnmapViewOfFile(lpBaseAddress: root::LPCVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLargePageMinimum() -> root::SIZE_T;
    }
    extern "C" {
        pub fn GetProcessWorkingSetSizeEx(
            hProcess: root::HANDLE,
            lpMinimumWorkingSetSize: root::PSIZE_T,
            lpMaximumWorkingSetSize: root::PSIZE_T,
            Flags: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessWorkingSetSizeEx(
            hProcess: root::HANDLE,
            dwMinimumWorkingSetSize: root::SIZE_T,
            dwMaximumWorkingSetSize: root::SIZE_T,
            Flags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualLock(lpAddress: root::LPVOID, dwSize: root::SIZE_T) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualUnlock(lpAddress: root::LPVOID, dwSize: root::SIZE_T) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWriteWatch(
            dwFlags: u32,
            lpBaseAddress: root::PVOID,
            dwRegionSize: root::SIZE_T,
            lpAddresses: *mut root::PVOID,
            lpdwCount: *mut u64,
            lpdwGranularity: root::LPDWORD,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ResetWriteWatch(
            lpBaseAddress: root::LPVOID,
            dwRegionSize: root::SIZE_T,
        ) -> root::UINT;
    }
    pub const _MEMORY_RESOURCE_NOTIFICATION_TYPE_LowMemoryResourceNotification:
        root::_MEMORY_RESOURCE_NOTIFICATION_TYPE = 0;
    pub const _MEMORY_RESOURCE_NOTIFICATION_TYPE_HighMemoryResourceNotification:
        root::_MEMORY_RESOURCE_NOTIFICATION_TYPE = 1;
    pub type _MEMORY_RESOURCE_NOTIFICATION_TYPE = i32;
    pub use self::super::root::_MEMORY_RESOURCE_NOTIFICATION_TYPE as MEMORY_RESOURCE_NOTIFICATION_TYPE;
    extern "C" {
        pub fn CreateMemoryResourceNotification(
            NotificationType: root::MEMORY_RESOURCE_NOTIFICATION_TYPE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn QueryMemoryResourceNotification(
            ResourceNotificationHandle: root::HANDLE,
            ResourceState: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemFileCacheSize(
            lpMinimumFileCacheSize: root::PSIZE_T,
            lpMaximumFileCacheSize: root::PSIZE_T,
            lpFlags: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSystemFileCacheSize(
            MinimumFileCacheSize: root::SIZE_T,
            MaximumFileCacheSize: root::SIZE_T,
            Flags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateFileMappingNumaW(
            hFile: root::HANDLE,
            lpFileMappingAttributes: root::LPSECURITY_ATTRIBUTES,
            flProtect: u32,
            dwMaximumSizeHigh: u32,
            dwMaximumSizeLow: u32,
            lpName: root::LPCWSTR,
            nndPreferred: u32,
        ) -> root::HANDLE;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WIN32_MEMORY_RANGE_ENTRY {
        pub VirtualAddress: root::PVOID,
        pub NumberOfBytes: root::SIZE_T,
    }
    pub type WIN32_MEMORY_RANGE_ENTRY = root::_WIN32_MEMORY_RANGE_ENTRY;
    pub type PWIN32_MEMORY_RANGE_ENTRY = *mut root::_WIN32_MEMORY_RANGE_ENTRY;
    extern "C" {
        pub fn PrefetchVirtualMemory(
            hProcess: root::HANDLE,
            NumberOfEntries: u64,
            VirtualAddresses: root::PWIN32_MEMORY_RANGE_ENTRY,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateFileMappingFromApp(
            hFile: root::HANDLE,
            SecurityAttributes: root::PSECURITY_ATTRIBUTES,
            PageProtection: root::ULONG,
            MaximumSize: root::ULONG64,
            Name: *const u16,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn MapViewOfFileFromApp(
            hFileMappingObject: root::HANDLE,
            DesiredAccess: root::ULONG,
            FileOffset: root::ULONG64,
            NumberOfBytesToMap: root::SIZE_T,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn UnmapViewOfFileEx(BaseAddress: root::PVOID, UnmapFlags: root::ULONG) -> root::BOOL;
    }
    extern "C" {
        pub fn AllocateUserPhysicalPages(
            hProcess: root::HANDLE,
            NumberOfPages: root::PULONG_PTR,
            PageArray: root::PULONG_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FreeUserPhysicalPages(
            hProcess: root::HANDLE,
            NumberOfPages: root::PULONG_PTR,
            PageArray: root::PULONG_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MapUserPhysicalPages(
            VirtualAddress: root::PVOID,
            NumberOfPages: u64,
            PageArray: root::PULONG_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AllocateUserPhysicalPagesNuma(
            hProcess: root::HANDLE,
            NumberOfPages: root::PULONG_PTR,
            PageArray: root::PULONG_PTR,
            nndPreferred: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualAllocExNuma(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            flAllocationType: u32,
            flProtect: u32,
            nndPreferred: u32,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn GetMemoryErrorHandlingCapabilities(Capabilities: root::PULONG) -> root::BOOL;
    }
    pub type PBAD_MEMORY_CALLBACK_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
    extern "C" {
        pub fn RegisterBadMemoryNotification(
            Callback: root::PBAD_MEMORY_CALLBACK_ROUTINE,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn UnregisterBadMemoryNotification(RegistrationHandle: root::PVOID) -> root::BOOL;
    }
    pub const OFFER_PRIORITY_VmOfferPriorityVeryLow: root::OFFER_PRIORITY = 1;
    pub const OFFER_PRIORITY_VmOfferPriorityLow: root::OFFER_PRIORITY = 2;
    pub const OFFER_PRIORITY_VmOfferPriorityBelowNormal: root::OFFER_PRIORITY = 3;
    pub const OFFER_PRIORITY_VmOfferPriorityNormal: root::OFFER_PRIORITY = 4;
    pub type OFFER_PRIORITY = i32;
    extern "C" {
        pub fn OfferVirtualMemory(
            VirtualAddress: root::PVOID,
            Size: root::SIZE_T,
            Priority: root::OFFER_PRIORITY,
        ) -> u32;
    }
    extern "C" {
        pub fn ReclaimVirtualMemory(
            VirtualAddress: *const ::std::os::raw::c_void,
            Size: root::SIZE_T,
        ) -> u32;
    }
    extern "C" {
        pub fn DiscardVirtualMemory(VirtualAddress: root::PVOID, Size: root::SIZE_T)
            -> u32;
    }
    extern "C" {
        pub fn SetProcessValidCallTargets(
            hProcess: root::HANDLE,
            VirtualAddress: root::PVOID,
            RegionSize: root::SIZE_T,
            NumberOfOffsets: root::ULONG,
            OffsetInformation: root::PCFG_CALL_TARGET_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessValidCallTargetsForMappedView(
            Process: root::HANDLE,
            VirtualAddress: root::PVOID,
            RegionSize: root::SIZE_T,
            NumberOfOffsets: root::ULONG,
            OffsetInformation: root::PCFG_CALL_TARGET_INFO,
            Section: root::HANDLE,
            ExpectedFileOffset: root::ULONG64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualAllocFromApp(
            BaseAddress: root::PVOID,
            Size: root::SIZE_T,
            AllocationType: root::ULONG,
            Protection: root::ULONG,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn VirtualProtectFromApp(
            Address: root::PVOID,
            Size: root::SIZE_T,
            NewProtection: root::ULONG,
            OldProtection: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenFileMappingFromApp(
            DesiredAccess: root::ULONG,
            InheritHandle: root::BOOL,
            Name: *const u16,
        ) -> root::HANDLE;
    }
    pub const WIN32_MEMORY_INFORMATION_CLASS_MemoryRegionInfo:
        root::WIN32_MEMORY_INFORMATION_CLASS = 0;
    pub type WIN32_MEMORY_INFORMATION_CLASS = i32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct WIN32_MEMORY_REGION_INFORMATION {
        pub AllocationBase: root::PVOID,
        pub AllocationProtect: root::ULONG,
        pub __bindgen_anon_1: root::WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1,
        pub RegionSize: root::SIZE_T,
        pub CommitSize: root::SIZE_T,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1 {
        pub Flags: root::ULONG,
        pub __bindgen_anon_1: root::WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn Private(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Private(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn MappedDataFile(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_MappedDataFile(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn MappedImage(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_MappedImage(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn MappedPageFile(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_MappedPageFile(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn MappedPhysical(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_MappedPhysical(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn DirectMapped(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_DirectMapped(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 26u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Private: root::ULONG,
            MappedDataFile: root::ULONG,
            MappedImage: root::ULONG,
            MappedPageFile: root::ULONG,
            MappedPhysical: root::ULONG,
            DirectMapped: root::ULONG,
            Reserved: root::ULONG,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let Private: u32 = unsafe { ::std::mem::transmute(Private) };
                Private as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let MappedDataFile: u32 = unsafe { ::std::mem::transmute(MappedDataFile) };
                MappedDataFile as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let MappedImage: u32 = unsafe { ::std::mem::transmute(MappedImage) };
                MappedImage as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let MappedPageFile: u32 = unsafe { ::std::mem::transmute(MappedPageFile) };
                MappedPageFile as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let MappedPhysical: u32 = unsafe { ::std::mem::transmute(MappedPhysical) };
                MappedPhysical as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let DirectMapped: u32 = unsafe { ::std::mem::transmute(DirectMapped) };
                DirectMapped as u64
            });
            __bindgen_bitfield_unit.set(6usize, 26u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        pub fn QueryVirtualMemoryInformation(
            Process: root::HANDLE,
            VirtualAddress: *const ::std::os::raw::c_void,
            MemoryInformationClass: root::WIN32_MEMORY_INFORMATION_CLASS,
            MemoryInformation: root::PVOID,
            MemoryInformationSize: root::SIZE_T,
            ReturnSize: root::PSIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MapViewOfFileNuma2(
            FileMappingHandle: root::HANDLE,
            ProcessHandle: root::HANDLE,
            Offset: root::ULONG64,
            BaseAddress: root::PVOID,
            ViewSize: root::SIZE_T,
            AllocationType: root::ULONG,
            PageProtection: root::ULONG,
            PreferredNode: root::ULONG,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn UnmapViewOfFile2(
            Process: root::HANDLE,
            BaseAddress: root::PVOID,
            UnmapFlags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualUnlockEx(
            Process: root::HANDLE,
            Address: root::LPVOID,
            Size: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualAlloc2(
            Process: root::HANDLE,
            BaseAddress: root::PVOID,
            Size: root::SIZE_T,
            AllocationType: root::ULONG,
            PageProtection: root::ULONG,
            ExtendedParameters: *mut root::MEM_EXTENDED_PARAMETER,
            ParameterCount: root::ULONG,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn MapViewOfFile3(
            FileMapping: root::HANDLE,
            Process: root::HANDLE,
            BaseAddress: root::PVOID,
            Offset: root::ULONG64,
            ViewSize: root::SIZE_T,
            AllocationType: root::ULONG,
            PageProtection: root::ULONG,
            ExtendedParameters: *mut root::MEM_EXTENDED_PARAMETER,
            ParameterCount: root::ULONG,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn VirtualAlloc2FromApp(
            Process: root::HANDLE,
            BaseAddress: root::PVOID,
            Size: root::SIZE_T,
            AllocationType: root::ULONG,
            PageProtection: root::ULONG,
            ExtendedParameters: *mut root::MEM_EXTENDED_PARAMETER,
            ParameterCount: root::ULONG,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn MapViewOfFile3FromApp(
            FileMapping: root::HANDLE,
            Process: root::HANDLE,
            BaseAddress: root::PVOID,
            Offset: root::ULONG64,
            ViewSize: root::SIZE_T,
            AllocationType: root::ULONG,
            PageProtection: root::ULONG,
            ExtendedParameters: *mut root::MEM_EXTENDED_PARAMETER,
            ParameterCount: root::ULONG,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn CreateFileMapping2(
            File: root::HANDLE,
            SecurityAttributes: *mut root::SECURITY_ATTRIBUTES,
            DesiredAccess: root::ULONG,
            PageProtection: root::ULONG,
            AllocationAttributes: root::ULONG,
            MaximumSize: root::ULONG64,
            Name: *const u16,
            ExtendedParameters: *mut root::MEM_EXTENDED_PARAMETER,
            ParameterCount: root::ULONG,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn IsEnclaveTypeSupported(flEnclaveType: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateEnclave(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            dwSize: root::SIZE_T,
            dwInitialCommitment: root::SIZE_T,
            flEnclaveType: u32,
            lpEnclaveInformation: root::LPCVOID,
            dwInfoLength: u32,
            lpEnclaveError: root::LPDWORD,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn LoadEnclaveData(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            lpBuffer: root::LPCVOID,
            nSize: root::SIZE_T,
            flProtect: u32,
            lpPageInformation: root::LPCVOID,
            dwInfoLength: u32,
            lpNumberOfBytesWritten: root::PSIZE_T,
            lpEnclaveError: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeEnclave(
            hProcess: root::HANDLE,
            lpAddress: root::LPVOID,
            lpEnclaveInformation: root::LPCVOID,
            dwInfoLength: u32,
            lpEnclaveError: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LoadEnclaveImageA(
            lpEnclaveAddress: root::LPVOID,
            lpImageName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LoadEnclaveImageW(
            lpEnclaveAddress: root::LPVOID,
            lpImageName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CallEnclave(
            lpRoutine: root::LPENCLAVE_ROUTINE,
            lpParameter: root::LPVOID,
            fWaitForThread: root::BOOL,
            lpReturnValue: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TerminateEnclave(lpAddress: root::LPVOID, fWait: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteEnclave(lpAddress: root::LPVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn QueueUserWorkItem(
            Function: root::LPTHREAD_START_ROUTINE,
            Context: root::PVOID,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterWaitEx(
            WaitHandle: root::HANDLE,
            CompletionEvent: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateTimerQueue() -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateTimerQueueTimer(
            phNewTimer: root::PHANDLE,
            TimerQueue: root::HANDLE,
            Callback: root::WAITORTIMERCALLBACK,
            Parameter: root::PVOID,
            DueTime: u32,
            Period: u32,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeTimerQueueTimer(
            TimerQueue: root::HANDLE,
            Timer: root::HANDLE,
            DueTime: root::ULONG,
            Period: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteTimerQueueTimer(
            TimerQueue: root::HANDLE,
            Timer: root::HANDLE,
            CompletionEvent: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteTimerQueueEx(
            TimerQueue: root::HANDLE,
            CompletionEvent: root::HANDLE,
        ) -> root::BOOL;
    }
    pub type PTP_WIN32_IO_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            Instance: root::PTP_CALLBACK_INSTANCE,
            Context: root::PVOID,
            Overlapped: root::PVOID,
            IoResult: root::ULONG,
            NumberOfBytesTransferred: u64,
            Io: root::PTP_IO,
        ),
    >;
    extern "C" {
        pub fn CreateThreadpool(reserved: root::PVOID) -> root::PTP_POOL;
    }
    extern "C" {
        pub fn SetThreadpoolThreadMaximum(ptpp: root::PTP_POOL, cthrdMost: u32);
    }
    extern "C" {
        pub fn SetThreadpoolThreadMinimum(
            ptpp: root::PTP_POOL,
            cthrdMic: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadpoolStackInformation(
            ptpp: root::PTP_POOL,
            ptpsi: root::PTP_POOL_STACK_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryThreadpoolStackInformation(
            ptpp: root::PTP_POOL,
            ptpsi: root::PTP_POOL_STACK_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseThreadpool(ptpp: root::PTP_POOL);
    }
    extern "C" {
        pub fn CreateThreadpoolCleanupGroup() -> root::PTP_CLEANUP_GROUP;
    }
    extern "C" {
        pub fn CloseThreadpoolCleanupGroupMembers(
            ptpcg: root::PTP_CLEANUP_GROUP,
            fCancelPendingCallbacks: root::BOOL,
            pvCleanupContext: root::PVOID,
        );
    }
    extern "C" {
        pub fn CloseThreadpoolCleanupGroup(ptpcg: root::PTP_CLEANUP_GROUP);
    }
    extern "C" {
        pub fn SetEventWhenCallbackReturns(pci: root::PTP_CALLBACK_INSTANCE, evt: root::HANDLE);
    }
    extern "C" {
        pub fn ReleaseSemaphoreWhenCallbackReturns(
            pci: root::PTP_CALLBACK_INSTANCE,
            sem: root::HANDLE,
            crel: u32,
        );
    }
    extern "C" {
        pub fn ReleaseMutexWhenCallbackReturns(
            pci: root::PTP_CALLBACK_INSTANCE,
            mut_: root::HANDLE,
        );
    }
    extern "C" {
        pub fn LeaveCriticalSectionWhenCallbackReturns(
            pci: root::PTP_CALLBACK_INSTANCE,
            pcs: root::PCRITICAL_SECTION,
        );
    }
    extern "C" {
        pub fn FreeLibraryWhenCallbackReturns(
            pci: root::PTP_CALLBACK_INSTANCE,
            mod_: root::HMODULE,
        );
    }
    extern "C" {
        pub fn CallbackMayRunLong(pci: root::PTP_CALLBACK_INSTANCE) -> root::BOOL;
    }
    extern "C" {
        pub fn DisassociateCurrentThreadFromCallback(pci: root::PTP_CALLBACK_INSTANCE);
    }
    extern "C" {
        pub fn TrySubmitThreadpoolCallback(
            pfns: root::PTP_SIMPLE_CALLBACK,
            pv: root::PVOID,
            pcbe: root::PTP_CALLBACK_ENVIRON,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateThreadpoolWork(
            pfnwk: root::PTP_WORK_CALLBACK,
            pv: root::PVOID,
            pcbe: root::PTP_CALLBACK_ENVIRON,
        ) -> root::PTP_WORK;
    }
    extern "C" {
        pub fn SubmitThreadpoolWork(pwk: root::PTP_WORK);
    }
    extern "C" {
        pub fn WaitForThreadpoolWorkCallbacks(
            pwk: root::PTP_WORK,
            fCancelPendingCallbacks: root::BOOL,
        );
    }
    extern "C" {
        pub fn CloseThreadpoolWork(pwk: root::PTP_WORK);
    }
    extern "C" {
        pub fn CreateThreadpoolTimer(
            pfnti: root::PTP_TIMER_CALLBACK,
            pv: root::PVOID,
            pcbe: root::PTP_CALLBACK_ENVIRON,
        ) -> root::PTP_TIMER;
    }
    extern "C" {
        pub fn SetThreadpoolTimer(
            pti: root::PTP_TIMER,
            pftDueTime: root::PFILETIME,
            msPeriod: u32,
            msWindowLength: u32,
        );
    }
    extern "C" {
        pub fn IsThreadpoolTimerSet(pti: root::PTP_TIMER) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitForThreadpoolTimerCallbacks(
            pti: root::PTP_TIMER,
            fCancelPendingCallbacks: root::BOOL,
        );
    }
    extern "C" {
        pub fn CloseThreadpoolTimer(pti: root::PTP_TIMER);
    }
    extern "C" {
        pub fn CreateThreadpoolWait(
            pfnwa: root::PTP_WAIT_CALLBACK,
            pv: root::PVOID,
            pcbe: root::PTP_CALLBACK_ENVIRON,
        ) -> root::PTP_WAIT;
    }
    extern "C" {
        pub fn SetThreadpoolWait(pwa: root::PTP_WAIT, h: root::HANDLE, pftTimeout: root::PFILETIME);
    }
    extern "C" {
        pub fn WaitForThreadpoolWaitCallbacks(
            pwa: root::PTP_WAIT,
            fCancelPendingCallbacks: root::BOOL,
        );
    }
    extern "C" {
        pub fn CloseThreadpoolWait(pwa: root::PTP_WAIT);
    }
    extern "C" {
        pub fn CreateThreadpoolIo(
            fl: root::HANDLE,
            pfnio: root::PTP_WIN32_IO_CALLBACK,
            pv: root::PVOID,
            pcbe: root::PTP_CALLBACK_ENVIRON,
        ) -> root::PTP_IO;
    }
    extern "C" {
        pub fn StartThreadpoolIo(pio: root::PTP_IO);
    }
    extern "C" {
        pub fn CancelThreadpoolIo(pio: root::PTP_IO);
    }
    extern "C" {
        pub fn WaitForThreadpoolIoCallbacks(pio: root::PTP_IO, fCancelPendingCallbacks: root::BOOL);
    }
    extern "C" {
        pub fn CloseThreadpoolIo(pio: root::PTP_IO);
    }
    extern "C" {
        pub fn SetThreadpoolTimerEx(
            pti: root::PTP_TIMER,
            pftDueTime: root::PFILETIME,
            msPeriod: u32,
            msWindowLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadpoolWaitEx(
            pwa: root::PTP_WAIT,
            h: root::HANDLE,
            pftTimeout: root::PFILETIME,
            Reserved: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsProcessInJob(
            ProcessHandle: root::HANDLE,
            JobHandle: root::HANDLE,
            Result: root::PBOOL,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
        pub MaxIops: root::LONG64,
        pub MaxBandwidth: root::LONG64,
        pub ReservationIops: root::LONG64,
        pub VolumeName: *const u16,
        pub BaseIoSize: root::ULONG,
        pub ControlFlags: root::ULONG,
    }
    extern "C" {
        pub fn CreateJobObjectW(
            lpJobAttributes: root::LPSECURITY_ATTRIBUTES,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FreeMemoryJobObject(Buffer: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn OpenJobObjectW(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn AssignProcessToJobObject(hJob: root::HANDLE, hProcess: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn TerminateJobObject(hJob: root::HANDLE, uExitCode: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn SetInformationJobObject(
            hJob: root::HANDLE,
            JobObjectInformationClass: root::JOBOBJECTINFOCLASS,
            lpJobObjectInformation: root::LPVOID,
            cbJobObjectInformationLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetIoRateControlInformationJobObject(
            hJob: root::HANDLE,
            IoRateControlInfo: *mut root::JOBOBJECT_IO_RATE_CONTROL_INFORMATION,
        ) -> u32;
    }
    extern "C" {
        pub fn QueryInformationJobObject(
            hJob: root::HANDLE,
            JobObjectInformationClass: root::JOBOBJECTINFOCLASS,
            lpJobObjectInformation: root::LPVOID,
            cbJobObjectInformationLength: u32,
            lpReturnLength: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryIoRateControlInformationJobObject(
            hJob: root::HANDLE,
            VolumeName: *const u16,
            InfoBlocks: *mut *mut root::JOBOBJECT_IO_RATE_CONTROL_INFORMATION,
            InfoBlockCount: *mut root::ULONG,
        ) -> u32;
    }
    extern "C" {
        pub fn Wow64DisableWow64FsRedirection(OldValue: *mut root::PVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn Wow64RevertWow64FsRedirection(OlValue: root::PVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn IsWow64Process(hProcess: root::HANDLE, Wow64Process: root::PBOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemWow64DirectoryA(lpBuffer: *mut i8, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemWow64DirectoryW(lpBuffer: root::LPWSTR, uSize: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn Wow64SetThreadDefaultGuestMachine(Machine: root::USHORT) -> root::USHORT;
    }
    extern "C" {
        pub fn IsWow64Process2(
            hProcess: root::HANDLE,
            pProcessMachine: *mut root::USHORT,
            pNativeMachine: *mut root::USHORT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemWow64Directory2A(
            lpBuffer: *mut i8,
            uSize: root::UINT,
            ImageFileMachineType: u16,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemWow64Directory2W(
            lpBuffer: root::LPWSTR,
            uSize: root::UINT,
            ImageFileMachineType: u16,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn IsWow64GuestMachineSupported(
            WowGuestMachine: root::USHORT,
            MachineIsSupported: *mut root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn Wow64GetThreadContext(
            hThread: root::HANDLE,
            lpContext: root::PWOW64_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Wow64SetThreadContext(
            hThread: root::HANDLE,
            lpContext: *const root::WOW64_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Wow64SuspendThread(hThread: root::HANDLE) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMUILANG {
        pub NumOfEnumUILang: root::ULONG,
        pub SizeOfEnumUIBuffer: root::ULONG,
        pub pEnumUIBuffer: *mut root::LANGID,
    }
    pub type ENUMUILANG = root::tagENUMUILANG;
    pub type PENUMUILANG = *mut root::tagENUMUILANG;
    pub type ENUMRESLANGPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpName: *const i8,
            wLanguage: u16,
            lParam: i64,
        ) -> root::BOOL,
    >;
    pub type ENUMRESLANGPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpName: root::LPCWSTR,
            wLanguage: u16,
            lParam: i64,
        ) -> root::BOOL,
    >;
    pub type ENUMRESNAMEPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpName: *mut i8,
            lParam: i64,
        ) -> root::BOOL,
    >;
    pub type ENUMRESNAMEPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpName: root::LPWSTR,
            lParam: i64,
        ) -> root::BOOL,
    >;
    pub type ENUMRESTYPEPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            hModule: root::HMODULE,
            lpType: *mut i8,
            lParam: i64,
        ) -> root::BOOL,
    >;
    pub type ENUMRESTYPEPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            hModule: root::HMODULE,
            lpType: root::LPWSTR,
            lParam: i64,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn DisableThreadLibraryCalls(hLibModule: root::HMODULE) -> root::BOOL;
    }
    extern "C" {
        pub fn FindResourceExW(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpName: root::LPCWSTR,
            wLanguage: u16,
        ) -> root::HRSRC;
    }
    extern "C" {
        pub fn FindStringOrdinal(
            dwFindStringOrdinalFlags: u32,
            lpStringSource: root::LPCWSTR,
            cchSource: i32,
            lpStringValue: root::LPCWSTR,
            cchValue: i32,
            bIgnoreCase: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn FreeLibrary(hLibModule: root::HMODULE) -> root::BOOL;
    }
    extern "C" {
        pub fn FreeLibraryAndExitThread(hLibModule: root::HMODULE, dwExitCode: u32);
    }
    extern "C" {
        pub fn FreeResource(hResData: root::HGLOBAL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetModuleFileNameA(
            hModule: root::HMODULE,
            lpFilename: *mut i8,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetModuleFileNameW(
            hModule: root::HMODULE,
            lpFilename: root::LPWSTR,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetModuleHandleA(lpModuleName: *const i8) -> root::HMODULE;
    }
    extern "C" {
        pub fn GetModuleHandleW(lpModuleName: root::LPCWSTR) -> root::HMODULE;
    }
    pub type PGET_MODULE_HANDLE_EXA = ::std::option::Option<
        unsafe extern "C" fn(
            dwFlags: u32,
            lpModuleName: *const i8,
            phModule: *mut root::HMODULE,
        ) -> root::BOOL,
    >;
    pub type PGET_MODULE_HANDLE_EXW = ::std::option::Option<
        unsafe extern "C" fn(
            dwFlags: u32,
            lpModuleName: root::LPCWSTR,
            phModule: *mut root::HMODULE,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn GetModuleHandleExA(
            dwFlags: u32,
            lpModuleName: *const i8,
            phModule: *mut root::HMODULE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetModuleHandleExW(
            dwFlags: u32,
            lpModuleName: root::LPCWSTR,
            phModule: *mut root::HMODULE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcAddress(hModule: root::HMODULE, lpProcName: *const i8) -> root::FARPROC;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REDIRECTION_FUNCTION_DESCRIPTOR {
        pub DllName: *const i8,
        pub FunctionName: *const i8,
        pub RedirectionTarget: root::PVOID,
    }
    pub type REDIRECTION_FUNCTION_DESCRIPTOR = root::_REDIRECTION_FUNCTION_DESCRIPTOR;
    pub type PREDIRECTION_FUNCTION_DESCRIPTOR = *mut root::_REDIRECTION_FUNCTION_DESCRIPTOR;
    pub type PCREDIRECTION_FUNCTION_DESCRIPTOR = *const root::REDIRECTION_FUNCTION_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REDIRECTION_DESCRIPTOR {
        pub Version: root::ULONG,
        pub FunctionCount: root::ULONG,
        pub Redirections: root::PCREDIRECTION_FUNCTION_DESCRIPTOR,
    }
    pub type REDIRECTION_DESCRIPTOR = root::_REDIRECTION_DESCRIPTOR;
    pub type PREDIRECTION_DESCRIPTOR = *mut root::_REDIRECTION_DESCRIPTOR;
    pub type PCREDIRECTION_DESCRIPTOR = *const root::REDIRECTION_DESCRIPTOR;
    extern "C" {
        pub fn LoadLibraryExA(
            lpLibFileName: *const i8,
            hFile: root::HANDLE,
            dwFlags: u32,
        ) -> root::HMODULE;
    }
    extern "C" {
        pub fn LoadLibraryExW(
            lpLibFileName: root::LPCWSTR,
            hFile: root::HANDLE,
            dwFlags: u32,
        ) -> root::HMODULE;
    }
    extern "C" {
        pub fn LoadResource(hModule: root::HMODULE, hResInfo: root::HRSRC) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn LoadStringA(
            hInstance: root::HINSTANCE,
            uID: root::UINT,
            lpBuffer: *mut i8,
            cchBufferMax: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn LoadStringW(
            hInstance: root::HINSTANCE,
            uID: root::UINT,
            lpBuffer: root::LPWSTR,
            cchBufferMax: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn LockResource(hResData: root::HGLOBAL) -> root::LPVOID;
    }
    extern "C" {
        pub fn SizeofResource(hModule: root::HMODULE, hResInfo: root::HRSRC) -> u32;
    }
    pub type DLL_DIRECTORY_COOKIE = root::PVOID;
    pub type PDLL_DIRECTORY_COOKIE = *mut root::PVOID;
    extern "C" {
        pub fn AddDllDirectory(NewDirectory: *const u16) -> root::DLL_DIRECTORY_COOKIE;
    }
    extern "C" {
        pub fn RemoveDllDirectory(Cookie: root::DLL_DIRECTORY_COOKIE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDefaultDllDirectories(DirectoryFlags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceLanguagesExA(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpName: *const i8,
            lpEnumFunc: root::ENUMRESLANGPROCA,
            lParam: i64,
            dwFlags: u32,
            LangId: root::LANGID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceLanguagesExW(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpName: root::LPCWSTR,
            lpEnumFunc: root::ENUMRESLANGPROCW,
            lParam: i64,
            dwFlags: u32,
            LangId: root::LANGID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceNamesExA(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpEnumFunc: root::ENUMRESNAMEPROCA,
            lParam: i64,
            dwFlags: u32,
            LangId: root::LANGID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceNamesExW(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpEnumFunc: root::ENUMRESNAMEPROCW,
            lParam: i64,
            dwFlags: u32,
            LangId: root::LANGID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceTypesExA(
            hModule: root::HMODULE,
            lpEnumFunc: root::ENUMRESTYPEPROCA,
            lParam: i64,
            dwFlags: u32,
            LangId: root::LANGID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceTypesExW(
            hModule: root::HMODULE,
            lpEnumFunc: root::ENUMRESTYPEPROCW,
            lParam: i64,
            dwFlags: u32,
            LangId: root::LANGID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindResourceW(
            hModule: root::HMODULE,
            lpName: root::LPCWSTR,
            lpType: root::LPCWSTR,
        ) -> root::HRSRC;
    }
    extern "C" {
        pub fn LoadLibraryA(lpLibFileName: *const i8) -> root::HMODULE;
    }
    extern "C" {
        pub fn LoadLibraryW(lpLibFileName: root::LPCWSTR) -> root::HMODULE;
    }
    extern "C" {
        pub fn EnumResourceNamesW(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpEnumFunc: root::ENUMRESNAMEPROCW,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheck(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            PrivilegeSet: root::PPRIVILEGE_SET,
            PrivilegeSetLength: root::LPDWORD,
            GrantedAccess: root::LPDWORD,
            AccessStatus: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckAndAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            ObjectTypeName: root::LPWSTR,
            ObjectName: root::LPWSTR,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            DesiredAccess: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccess: root::LPDWORD,
            AccessStatus: root::LPBOOL,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByType(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            PrivilegeSet: root::PPRIVILEGE_SET,
            PrivilegeSetLength: root::LPDWORD,
            GrantedAccess: root::LPDWORD,
            AccessStatus: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeResultList(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            PrivilegeSet: root::PPRIVILEGE_SET,
            PrivilegeSetLength: root::LPDWORD,
            GrantedAccessList: root::LPDWORD,
            AccessStatusList: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeAndAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            ObjectTypeName: root::LPCWSTR,
            ObjectName: root::LPCWSTR,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            DesiredAccess: u32,
            AuditType: root::AUDIT_EVENT_TYPE,
            Flags: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccess: root::LPDWORD,
            AccessStatus: root::LPBOOL,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeResultListAndAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            ObjectTypeName: root::LPCWSTR,
            ObjectName: root::LPCWSTR,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            DesiredAccess: u32,
            AuditType: root::AUDIT_EVENT_TYPE,
            Flags: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccessList: root::LPDWORD,
            AccessStatusList: root::LPDWORD,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            ClientToken: root::HANDLE,
            ObjectTypeName: root::LPCWSTR,
            ObjectName: root::LPCWSTR,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            DesiredAccess: u32,
            AuditType: root::AUDIT_EVENT_TYPE,
            Flags: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccessList: root::LPDWORD,
            AccessStatusList: root::LPDWORD,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAccessAllowedAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AccessMask: u32,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAccessAllowedAceEx(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAccessAllowedObjectAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            ObjectTypeGuid: *mut root::GUID,
            InheritedObjectTypeGuid: *mut root::GUID,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAccessDeniedAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AccessMask: u32,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAccessDeniedAceEx(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAccessDeniedObjectAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            ObjectTypeGuid: *mut root::GUID,
            InheritedObjectTypeGuid: *mut root::GUID,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            dwStartingAceIndex: u32,
            pAceList: root::LPVOID,
            nAceListLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAuditAccessAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            dwAccessMask: u32,
            pSid: root::PSID,
            bAuditSuccess: root::BOOL,
            bAuditFailure: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAuditAccessAceEx(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            dwAccessMask: u32,
            pSid: root::PSID,
            bAuditSuccess: root::BOOL,
            bAuditFailure: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddAuditAccessObjectAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            ObjectTypeGuid: *mut root::GUID,
            InheritedObjectTypeGuid: *mut root::GUID,
            pSid: root::PSID,
            bAuditSuccess: root::BOOL,
            bAuditFailure: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddMandatoryAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            MandatoryPolicy: u32,
            pLabelSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddResourceAttributeAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            pSid: root::PSID,
            pAttributeInfo: root::PCLAIM_SECURITY_ATTRIBUTES_INFORMATION,
            pReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddScopedPolicyIDAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AccessMask: u32,
            pSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AdjustTokenGroups(
            TokenHandle: root::HANDLE,
            ResetToDefault: root::BOOL,
            NewState: root::PTOKEN_GROUPS,
            BufferLength: u32,
            PreviousState: root::PTOKEN_GROUPS,
            ReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AdjustTokenPrivileges(
            TokenHandle: root::HANDLE,
            DisableAllPrivileges: root::BOOL,
            NewState: root::PTOKEN_PRIVILEGES,
            BufferLength: u32,
            PreviousState: root::PTOKEN_PRIVILEGES,
            ReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AllocateAndInitializeSid(
            pIdentifierAuthority: root::PSID_IDENTIFIER_AUTHORITY,
            nSubAuthorityCount: u8,
            nSubAuthority0: u32,
            nSubAuthority1: u32,
            nSubAuthority2: u32,
            nSubAuthority3: u32,
            nSubAuthority4: u32,
            nSubAuthority5: u32,
            nSubAuthority6: u32,
            nSubAuthority7: u32,
            pSid: *mut root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AllocateLocallyUniqueId(Luid: root::PLUID) -> root::BOOL;
    }
    extern "C" {
        pub fn AreAllAccessesGranted(
            GrantedAccess: u32,
            DesiredAccess: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AreAnyAccessesGranted(
            GrantedAccess: u32,
            DesiredAccess: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckTokenMembership(
            TokenHandle: root::HANDLE,
            SidToCheck: root::PSID,
            IsMember: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckTokenCapability(
            TokenHandle: root::HANDLE,
            CapabilitySidToCheck: root::PSID,
            HasCapability: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetAppContainerAce(
            Acl: root::PACL,
            StartingAceIndex: u32,
            AppContainerAce: *mut root::PVOID,
            AppContainerAceIndex: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckTokenMembershipEx(
            TokenHandle: root::HANDLE,
            SidToCheck: root::PSID,
            Flags: u32,
            IsMember: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ConvertToAutoInheritPrivateObjectSecurity(
            ParentDescriptor: root::PSECURITY_DESCRIPTOR,
            CurrentSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            NewSecurityDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            ObjectType: *mut root::GUID,
            IsDirectoryObject: root::BOOLEAN,
            GenericMapping: root::PGENERIC_MAPPING,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CopySid(
            nDestinationSidLength: u32,
            pDestinationSid: root::PSID,
            pSourceSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePrivateObjectSecurity(
            ParentDescriptor: root::PSECURITY_DESCRIPTOR,
            CreatorDescriptor: root::PSECURITY_DESCRIPTOR,
            NewDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            IsDirectoryObject: root::BOOL,
            Token: root::HANDLE,
            GenericMapping: root::PGENERIC_MAPPING,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePrivateObjectSecurityEx(
            ParentDescriptor: root::PSECURITY_DESCRIPTOR,
            CreatorDescriptor: root::PSECURITY_DESCRIPTOR,
            NewDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            ObjectType: *mut root::GUID,
            IsContainerObject: root::BOOL,
            AutoInheritFlags: root::ULONG,
            Token: root::HANDLE,
            GenericMapping: root::PGENERIC_MAPPING,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePrivateObjectSecurityWithMultipleInheritance(
            ParentDescriptor: root::PSECURITY_DESCRIPTOR,
            CreatorDescriptor: root::PSECURITY_DESCRIPTOR,
            NewDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            ObjectTypes: *mut *mut root::GUID,
            GuidCount: root::ULONG,
            IsContainerObject: root::BOOL,
            AutoInheritFlags: root::ULONG,
            Token: root::HANDLE,
            GenericMapping: root::PGENERIC_MAPPING,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateRestrictedToken(
            ExistingTokenHandle: root::HANDLE,
            Flags: u32,
            DisableSidCount: u32,
            SidsToDisable: root::PSID_AND_ATTRIBUTES,
            DeletePrivilegeCount: u32,
            PrivilegesToDelete: root::PLUID_AND_ATTRIBUTES,
            RestrictedSidCount: u32,
            SidsToRestrict: root::PSID_AND_ATTRIBUTES,
            NewTokenHandle: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateWellKnownSid(
            WellKnownSidType: root::WELL_KNOWN_SID_TYPE,
            DomainSid: root::PSID,
            pSid: root::PSID,
            cbSid: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EqualDomainSid(
            pSid1: root::PSID,
            pSid2: root::PSID,
            pfEqual: *mut root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteAce(pAcl: root::PACL, dwAceIndex: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn DestroyPrivateObjectSecurity(
            ObjectDescriptor: *mut root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DuplicateToken(
            ExistingTokenHandle: root::HANDLE,
            ImpersonationLevel: root::SECURITY_IMPERSONATION_LEVEL,
            DuplicateTokenHandle: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DuplicateTokenEx(
            hExistingToken: root::HANDLE,
            dwDesiredAccess: u32,
            lpTokenAttributes: root::LPSECURITY_ATTRIBUTES,
            ImpersonationLevel: root::SECURITY_IMPERSONATION_LEVEL,
            TokenType: root::TOKEN_TYPE,
            phNewToken: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EqualPrefixSid(pSid1: root::PSID, pSid2: root::PSID) -> root::BOOL;
    }
    extern "C" {
        pub fn EqualSid(pSid1: root::PSID, pSid2: root::PSID) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstFreeAce(pAcl: root::PACL, pAce: *mut root::LPVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn FreeSid(pSid: root::PSID) -> root::PVOID;
    }
    extern "C" {
        pub fn GetAce(
            pAcl: root::PACL,
            dwAceIndex: u32,
            pAce: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetAclInformation(
            pAcl: root::PACL,
            pAclInformation: root::LPVOID,
            nAclInformationLength: u32,
            dwAclInformationClass: root::ACL_INFORMATION_CLASS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileSecurityW(
            lpFileName: root::LPCWSTR,
            RequestedInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            nLength: u32,
            lpnLengthNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetKernelObjectSecurity(
            Handle: root::HANDLE,
            RequestedInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            nLength: u32,
            lpnLengthNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLengthSid(pSid: root::PSID) -> u32;
    }
    extern "C" {
        pub fn GetPrivateObjectSecurity(
            ObjectDescriptor: root::PSECURITY_DESCRIPTOR,
            SecurityInformation: root::SECURITY_INFORMATION,
            ResultantDescriptor: root::PSECURITY_DESCRIPTOR,
            DescriptorLength: u32,
            ReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSecurityDescriptorControl(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pControl: root::PSECURITY_DESCRIPTOR_CONTROL,
            lpdwRevision: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSecurityDescriptorDacl(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            lpbDaclPresent: root::LPBOOL,
            pDacl: *mut root::PACL,
            lpbDaclDefaulted: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSecurityDescriptorGroup(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pGroup: *mut root::PSID,
            lpbGroupDefaulted: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSecurityDescriptorLength(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetSecurityDescriptorOwner(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pOwner: *mut root::PSID,
            lpbOwnerDefaulted: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSecurityDescriptorRMControl(
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            RMControl: root::PUCHAR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetSecurityDescriptorSacl(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            lpbSaclPresent: root::LPBOOL,
            pSacl: *mut root::PACL,
            lpbSaclDefaulted: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSidIdentifierAuthority(pSid: root::PSID) -> root::PSID_IDENTIFIER_AUTHORITY;
    }
    extern "C" {
        pub fn GetSidLengthRequired(nSubAuthorityCount: root::UCHAR) -> u32;
    }
    extern "C" {
        pub fn GetSidSubAuthority(pSid: root::PSID, nSubAuthority: u32) -> root::PDWORD;
    }
    extern "C" {
        pub fn GetSidSubAuthorityCount(pSid: root::PSID) -> root::PUCHAR;
    }
    extern "C" {
        pub fn GetTokenInformation(
            TokenHandle: root::HANDLE,
            TokenInformationClass: root::TOKEN_INFORMATION_CLASS,
            TokenInformation: root::LPVOID,
            TokenInformationLength: u32,
            ReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowsAccountDomainSid(
            pSid: root::PSID,
            pDomainSid: root::PSID,
            cbDomainSid: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImpersonateAnonymousToken(ThreadHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ImpersonateLoggedOnUser(hToken: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ImpersonateSelf(
            ImpersonationLevel: root::SECURITY_IMPERSONATION_LEVEL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeAcl(
            pAcl: root::PACL,
            nAclLength: u32,
            dwAclRevision: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeSecurityDescriptor(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            dwRevision: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeSid(
            Sid: root::PSID,
            pIdentifierAuthority: root::PSID_IDENTIFIER_AUTHORITY,
            nSubAuthorityCount: u8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsTokenRestricted(TokenHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidAcl(pAcl: root::PACL) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidSecurityDescriptor(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidSid(pSid: root::PSID) -> root::BOOL;
    }
    extern "C" {
        pub fn IsWellKnownSid(
            pSid: root::PSID,
            WellKnownSidType: root::WELL_KNOWN_SID_TYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MakeAbsoluteSD(
            pSelfRelativeSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pAbsoluteSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            lpdwAbsoluteSecurityDescriptorSize: root::LPDWORD,
            pDacl: root::PACL,
            lpdwDaclSize: root::LPDWORD,
            pSacl: root::PACL,
            lpdwSaclSize: root::LPDWORD,
            pOwner: root::PSID,
            lpdwOwnerSize: root::LPDWORD,
            pPrimaryGroup: root::PSID,
            lpdwPrimaryGroupSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MakeSelfRelativeSD(
            pAbsoluteSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pSelfRelativeSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            lpdwBufferLength: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MapGenericMask(AccessMask: root::PDWORD, GenericMapping: root::PGENERIC_MAPPING);
    }
    extern "C" {
        pub fn ObjectCloseAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            GenerateOnClose: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectDeleteAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            GenerateOnClose: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectOpenAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            ObjectTypeName: root::LPWSTR,
            ObjectName: root::LPWSTR,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            GrantedAccess: u32,
            Privileges: root::PPRIVILEGE_SET,
            ObjectCreation: root::BOOL,
            AccessGranted: root::BOOL,
            GenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectPrivilegeAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            HandleId: root::LPVOID,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            Privileges: root::PPRIVILEGE_SET,
            AccessGranted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PrivilegeCheck(
            ClientToken: root::HANDLE,
            RequiredPrivileges: root::PPRIVILEGE_SET,
            pfResult: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PrivilegedServiceAuditAlarmW(
            SubsystemName: root::LPCWSTR,
            ServiceName: root::LPCWSTR,
            ClientToken: root::HANDLE,
            Privileges: root::PPRIVILEGE_SET,
            AccessGranted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QuerySecurityAccessMask(
            SecurityInformation: root::SECURITY_INFORMATION,
            DesiredAccess: root::LPDWORD,
        );
    }
    extern "C" {
        pub fn RevertToSelf() -> root::BOOL;
    }
    extern "C" {
        pub fn SetAclInformation(
            pAcl: root::PACL,
            pAclInformation: root::LPVOID,
            nAclInformationLength: u32,
            dwAclInformationClass: root::ACL_INFORMATION_CLASS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileSecurityW(
            lpFileName: root::LPCWSTR,
            SecurityInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetKernelObjectSecurity(
            Handle: root::HANDLE,
            SecurityInformation: root::SECURITY_INFORMATION,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPrivateObjectSecurity(
            SecurityInformation: root::SECURITY_INFORMATION,
            ModificationDescriptor: root::PSECURITY_DESCRIPTOR,
            ObjectsSecurityDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            GenericMapping: root::PGENERIC_MAPPING,
            Token: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPrivateObjectSecurityEx(
            SecurityInformation: root::SECURITY_INFORMATION,
            ModificationDescriptor: root::PSECURITY_DESCRIPTOR,
            ObjectsSecurityDescriptor: *mut root::PSECURITY_DESCRIPTOR,
            AutoInheritFlags: root::ULONG,
            GenericMapping: root::PGENERIC_MAPPING,
            Token: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSecurityAccessMask(
            SecurityInformation: root::SECURITY_INFORMATION,
            DesiredAccess: root::LPDWORD,
        );
    }
    extern "C" {
        pub fn SetSecurityDescriptorControl(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            ControlBitsOfInterest: root::SECURITY_DESCRIPTOR_CONTROL,
            ControlBitsToSet: root::SECURITY_DESCRIPTOR_CONTROL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSecurityDescriptorDacl(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            bDaclPresent: root::BOOL,
            pDacl: root::PACL,
            bDaclDefaulted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSecurityDescriptorGroup(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pGroup: root::PSID,
            bGroupDefaulted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSecurityDescriptorOwner(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            pOwner: root::PSID,
            bOwnerDefaulted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSecurityDescriptorRMControl(
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            RMControl: root::PUCHAR,
        ) -> u32;
    }
    extern "C" {
        pub fn SetSecurityDescriptorSacl(
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            bSaclPresent: root::BOOL,
            pSacl: root::PACL,
            bSaclDefaulted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetTokenInformation(
            TokenHandle: root::HANDLE,
            TokenInformationClass: root::TOKEN_INFORMATION_CLASS,
            TokenInformation: root::LPVOID,
            TokenInformationLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCachedSigningLevel(
            SourceFiles: root::PHANDLE,
            SourceFileCount: root::ULONG,
            Flags: root::ULONG,
            TargetFile: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCachedSigningLevel(
            File: root::HANDLE,
            Flags: root::PULONG,
            SigningLevel: root::PULONG,
            Thumbprint: root::PUCHAR,
            ThumbprintSize: root::PULONG,
            ThumbprintAlgorithm: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CveEventWrite(CveId: *const u16, AdditionalDetails: *const u16) -> i32;
    }
    extern "C" {
        pub fn DeriveCapabilitySidsFromName(
            CapName: root::LPCWSTR,
            CapabilityGroupSids: *mut *mut root::PSID,
            CapabilityGroupSidCount: *mut u32,
            CapabilitySids: *mut *mut root::PSID,
            CapabilitySidCount: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePrivateNamespaceW(
            lpPrivateNamespaceAttributes: root::LPSECURITY_ATTRIBUTES,
            lpBoundaryDescriptor: root::LPVOID,
            lpAliasPrefix: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenPrivateNamespaceW(
            lpBoundaryDescriptor: root::LPVOID,
            lpAliasPrefix: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn ClosePrivateNamespace(Handle: root::HANDLE, Flags: root::ULONG) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn CreateBoundaryDescriptorW(Name: root::LPCWSTR, Flags: root::ULONG) -> root::HANDLE;
    }
    extern "C" {
        pub fn AddSIDToBoundaryDescriptor(
            BoundaryDescriptor: *mut root::HANDLE,
            RequiredSid: root::PSID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteBoundaryDescriptor(BoundaryDescriptor: root::HANDLE);
    }
    extern "C" {
        pub fn GetNumaHighestNodeNumber(HighestNodeNumber: root::PULONG) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaNodeProcessorMaskEx(
            Node: root::USHORT,
            ProcessorMask: root::PGROUP_AFFINITY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaProximityNodeEx(
            ProximityId: root::ULONG,
            NodeNumber: root::PUSHORT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessGroupAffinity(
            hProcess: root::HANDLE,
            GroupCount: root::PUSHORT,
            GroupArray: root::PUSHORT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadGroupAffinity(
            hThread: root::HANDLE,
            GroupAffinity: root::PGROUP_AFFINITY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadGroupAffinity(
            hThread: root::HANDLE,
            GroupAffinity: *const root::GROUP_AFFINITY,
            PreviousGroupAffinity: root::PGROUP_AFFINITY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetAppContainerNamedObjectPath(
            Token: root::HANDLE,
            AppContainerSid: root::PSID,
            ObjectPathLength: root::ULONG,
            ObjectPath: root::LPWSTR,
            ReturnLength: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryThreadCycleTime(
            ThreadHandle: root::HANDLE,
            CycleTime: root::PULONG64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryProcessCycleTime(
            ProcessHandle: root::HANDLE,
            CycleTime: root::PULONG64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryIdleProcessorCycleTime(
            BufferLength: root::PULONG,
            ProcessorIdleCycleTime: root::PULONG64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryIdleProcessorCycleTimeEx(
            Group: root::USHORT,
            BufferLength: root::PULONG,
            ProcessorIdleCycleTime: root::PULONG64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryInterruptTimePrecise(lpInterruptTimePrecise: root::PULONGLONG);
    }
    extern "C" {
        pub fn QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: root::PULONGLONG);
    }
    extern "C" {
        pub fn QueryInterruptTime(lpInterruptTime: root::PULONGLONG);
    }
    extern "C" {
        pub fn QueryUnbiasedInterruptTime(UnbiasedTime: root::PULONGLONG) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryAuxiliaryCounterFrequency(
            lpAuxiliaryCounterFrequency: root::PULONGLONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ConvertAuxiliaryCounterToPerformanceCounter(
            ullAuxiliaryCounterValue: root::ULONGLONG,
            lpPerformanceCounterValue: root::PULONGLONG,
            lpConversionError: root::PULONGLONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ConvertPerformanceCounterToAuxiliaryCounter(
            ullPerformanceCounterValue: root::ULONGLONG,
            lpAuxiliaryCounterValue: root::PULONGLONG,
            lpConversionError: root::PULONGLONG,
        ) -> root::HRESULT;
    }
    pub type PFIBER_START_ROUTINE =
        ::std::option::Option<unsafe extern "C" fn(lpFiberParameter: root::LPVOID)>;
    pub type LPFIBER_START_ROUTINE = root::PFIBER_START_ROUTINE;
    pub type PFIBER_CALLOUT_ROUTINE =
        ::std::option::Option<unsafe extern "C" fn(lpParameter: root::LPVOID) -> root::LPVOID>;
    pub type LPLDT_ENTRY = root::LPVOID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMMPROP {
        pub wPacketLength: u16,
        pub wPacketVersion: u16,
        pub dwServiceMask: u32,
        pub dwReserved1: u32,
        pub dwMaxTxQueue: u32,
        pub dwMaxRxQueue: u32,
        pub dwMaxBaud: u32,
        pub dwProvSubType: u32,
        pub dwProvCapabilities: u32,
        pub dwSettableParams: u32,
        pub dwSettableBaud: u32,
        pub wSettableData: u16,
        pub wSettableStopParity: u16,
        pub dwCurrentTxQueue: u32,
        pub dwCurrentRxQueue: u32,
        pub dwProvSpec1: u32,
        pub dwProvSpec2: u32,
        pub wcProvChar: [u16; 1usize],
    }
    pub type COMMPROP = root::_COMMPROP;
    pub type LPCOMMPROP = *mut root::_COMMPROP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMSTAT {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub cbInQue: u32,
        pub cbOutQue: u32,
    }
    impl _COMSTAT {
        #[inline]
        pub fn fCtsHold(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fCtsHold(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fDsrHold(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fDsrHold(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fRlsdHold(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fRlsdHold(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fXoffHold(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fXoffHold(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fXoffSent(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fXoffSent(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fEof(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fEof(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fTxim(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fTxim(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fReserved(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
        }
        #[inline]
        pub fn set_fReserved(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 25u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            fCtsHold: u32,
            fDsrHold: u32,
            fRlsdHold: u32,
            fXoffHold: u32,
            fXoffSent: u32,
            fEof: u32,
            fTxim: u32,
            fReserved: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let fCtsHold: u32 = unsafe { ::std::mem::transmute(fCtsHold) };
                fCtsHold as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let fDsrHold: u32 = unsafe { ::std::mem::transmute(fDsrHold) };
                fDsrHold as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let fRlsdHold: u32 = unsafe { ::std::mem::transmute(fRlsdHold) };
                fRlsdHold as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let fXoffHold: u32 = unsafe { ::std::mem::transmute(fXoffHold) };
                fXoffHold as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let fXoffSent: u32 = unsafe { ::std::mem::transmute(fXoffSent) };
                fXoffSent as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let fEof: u32 = unsafe { ::std::mem::transmute(fEof) };
                fEof as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let fTxim: u32 = unsafe { ::std::mem::transmute(fTxim) };
                fTxim as u64
            });
            __bindgen_bitfield_unit.set(7usize, 25u8, {
                let fReserved: u32 = unsafe { ::std::mem::transmute(fReserved) };
                fReserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type COMSTAT = root::_COMSTAT;
    pub type LPCOMSTAT = *mut root::_COMSTAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DCB {
        pub DCBlength: u32,
        pub BaudRate: u32,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub wReserved: u16,
        pub XonLim: u16,
        pub XoffLim: u16,
        pub ByteSize: u8,
        pub Parity: u8,
        pub StopBits: u8,
        pub XonChar: i8,
        pub XoffChar: i8,
        pub ErrorChar: i8,
        pub EofChar: i8,
        pub EvtChar: i8,
        pub wReserved1: u16,
    }
    impl _DCB {
        #[inline]
        pub fn fBinary(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fBinary(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fParity(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fParity(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fOutxCtsFlow(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fOutxCtsFlow(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fOutxDsrFlow(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fOutxDsrFlow(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fDtrControl(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_fDtrControl(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn fDsrSensitivity(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fDsrSensitivity(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fTXContinueOnXoff(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fTXContinueOnXoff(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fOutX(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fOutX(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fInX(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fInX(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(9usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fErrorChar(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fErrorChar(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(10usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fNull(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fNull(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(11usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fRtsControl(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
        }
        #[inline]
        pub fn set_fRtsControl(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn fAbortOnError(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fAbortOnError(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fDummy2(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
        }
        #[inline]
        pub fn set_fDummy2(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 17u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            fBinary: u32,
            fParity: u32,
            fOutxCtsFlow: u32,
            fOutxDsrFlow: u32,
            fDtrControl: u32,
            fDsrSensitivity: u32,
            fTXContinueOnXoff: u32,
            fOutX: u32,
            fInX: u32,
            fErrorChar: u32,
            fNull: u32,
            fRtsControl: u32,
            fAbortOnError: u32,
            fDummy2: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let fBinary: u32 = unsafe { ::std::mem::transmute(fBinary) };
                fBinary as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let fParity: u32 = unsafe { ::std::mem::transmute(fParity) };
                fParity as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let fOutxCtsFlow: u32 = unsafe { ::std::mem::transmute(fOutxCtsFlow) };
                fOutxCtsFlow as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let fOutxDsrFlow: u32 = unsafe { ::std::mem::transmute(fOutxDsrFlow) };
                fOutxDsrFlow as u64
            });
            __bindgen_bitfield_unit.set(4usize, 2u8, {
                let fDtrControl: u32 = unsafe { ::std::mem::transmute(fDtrControl) };
                fDtrControl as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let fDsrSensitivity: u32 = unsafe { ::std::mem::transmute(fDsrSensitivity) };
                fDsrSensitivity as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let fTXContinueOnXoff: u32 = unsafe { ::std::mem::transmute(fTXContinueOnXoff) };
                fTXContinueOnXoff as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let fOutX: u32 = unsafe { ::std::mem::transmute(fOutX) };
                fOutX as u64
            });
            __bindgen_bitfield_unit.set(9usize, 1u8, {
                let fInX: u32 = unsafe { ::std::mem::transmute(fInX) };
                fInX as u64
            });
            __bindgen_bitfield_unit.set(10usize, 1u8, {
                let fErrorChar: u32 = unsafe { ::std::mem::transmute(fErrorChar) };
                fErrorChar as u64
            });
            __bindgen_bitfield_unit.set(11usize, 1u8, {
                let fNull: u32 = unsafe { ::std::mem::transmute(fNull) };
                fNull as u64
            });
            __bindgen_bitfield_unit.set(12usize, 2u8, {
                let fRtsControl: u32 = unsafe { ::std::mem::transmute(fRtsControl) };
                fRtsControl as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let fAbortOnError: u32 = unsafe { ::std::mem::transmute(fAbortOnError) };
                fAbortOnError as u64
            });
            __bindgen_bitfield_unit.set(15usize, 17u8, {
                let fDummy2: u32 = unsafe { ::std::mem::transmute(fDummy2) };
                fDummy2 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type DCB = root::_DCB;
    pub type LPDCB = *mut root::_DCB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMMTIMEOUTS {
        pub ReadIntervalTimeout: u32,
        pub ReadTotalTimeoutMultiplier: u32,
        pub ReadTotalTimeoutConstant: u32,
        pub WriteTotalTimeoutMultiplier: u32,
        pub WriteTotalTimeoutConstant: u32,
    }
    pub type COMMTIMEOUTS = root::_COMMTIMEOUTS;
    pub type LPCOMMTIMEOUTS = *mut root::_COMMTIMEOUTS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMMCONFIG {
        pub dwSize: u32,
        pub wVersion: u16,
        pub wReserved: u16,
        pub dcb: root::DCB,
        pub dwProviderSubType: u32,
        pub dwProviderOffset: u32,
        pub dwProviderSize: u32,
        pub wcProviderData: [u16; 1usize],
    }
    pub type COMMCONFIG = root::_COMMCONFIG;
    pub type LPCOMMCONFIG = *mut root::_COMMCONFIG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MEMORYSTATUS {
        pub dwLength: u32,
        pub dwMemoryLoad: u32,
        pub dwTotalPhys: root::SIZE_T,
        pub dwAvailPhys: root::SIZE_T,
        pub dwTotalPageFile: root::SIZE_T,
        pub dwAvailPageFile: root::SIZE_T,
        pub dwTotalVirtual: root::SIZE_T,
        pub dwAvailVirtual: root::SIZE_T,
    }
    pub type MEMORYSTATUS = root::_MEMORYSTATUS;
    pub type LPMEMORYSTATUS = *mut root::_MEMORYSTATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JIT_DEBUG_INFO {
        pub dwSize: u32,
        pub dwProcessorArchitecture: u32,
        pub dwThreadID: u32,
        pub dwReserved0: u32,
        pub lpExceptionAddress: root::ULONG64,
        pub lpExceptionRecord: root::ULONG64,
        pub lpContextRecord: root::ULONG64,
    }
    pub type JIT_DEBUG_INFO = root::_JIT_DEBUG_INFO;
    pub type LPJIT_DEBUG_INFO = *mut root::_JIT_DEBUG_INFO;
    pub type JIT_DEBUG_INFO32 = root::JIT_DEBUG_INFO;
    pub type LPJIT_DEBUG_INFO32 = *mut root::JIT_DEBUG_INFO;
    pub type JIT_DEBUG_INFO64 = root::JIT_DEBUG_INFO;
    pub type LPJIT_DEBUG_INFO64 = *mut root::JIT_DEBUG_INFO;
    pub type LPEXCEPTION_RECORD = root::PEXCEPTION_RECORD;
    pub type LPEXCEPTION_POINTERS = root::PEXCEPTION_POINTERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OFSTRUCT {
        pub cBytes: u8,
        pub fFixedDisk: u8,
        pub nErrCode: u16,
        pub Reserved1: u16,
        pub Reserved2: u16,
        pub szPathName: [i8; 128usize],
    }
    pub type OFSTRUCT = root::_OFSTRUCT;
    pub type LPOFSTRUCT = *mut root::_OFSTRUCT;
    pub type POFSTRUCT = *mut root::_OFSTRUCT;
    extern "C" {
        pub fn WinMain(
            hInstance: root::HINSTANCE,
            hPrevInstance: root::HINSTANCE,
            lpCmdLine: *mut i8,
            nShowCmd: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn wWinMain(
            hInstance: root::HINSTANCE,
            hPrevInstance: root::HINSTANCE,
            lpCmdLine: root::LPWSTR,
            nShowCmd: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GlobalAlloc(uFlags: root::UINT, dwBytes: root::SIZE_T) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn GlobalReAlloc(
            hMem: root::HGLOBAL,
            dwBytes: root::SIZE_T,
            uFlags: root::UINT,
        ) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn GlobalSize(hMem: root::HGLOBAL) -> root::SIZE_T;
    }
    extern "C" {
        pub fn GlobalUnlock(hMem: root::HGLOBAL) -> root::BOOL;
    }
    extern "C" {
        pub fn GlobalLock(hMem: root::HGLOBAL) -> root::LPVOID;
    }
    extern "C" {
        pub fn GlobalFlags(hMem: root::HGLOBAL) -> root::UINT;
    }
    extern "C" {
        pub fn GlobalHandle(pMem: root::LPCVOID) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn GlobalFree(hMem: root::HGLOBAL) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn GlobalCompact(dwMinFree: u32) -> root::SIZE_T;
    }
    extern "C" {
        pub fn GlobalFix(hMem: root::HGLOBAL);
    }
    extern "C" {
        pub fn GlobalUnfix(hMem: root::HGLOBAL);
    }
    extern "C" {
        pub fn GlobalWire(hMem: root::HGLOBAL) -> root::LPVOID;
    }
    extern "C" {
        pub fn GlobalUnWire(hMem: root::HGLOBAL) -> root::BOOL;
    }
    extern "C" {
        pub fn GlobalMemoryStatus(lpBuffer: root::LPMEMORYSTATUS);
    }
    extern "C" {
        pub fn LocalAlloc(uFlags: root::UINT, uBytes: root::SIZE_T) -> root::HLOCAL;
    }
    extern "C" {
        pub fn LocalReAlloc(
            hMem: root::HLOCAL,
            uBytes: root::SIZE_T,
            uFlags: root::UINT,
        ) -> root::HLOCAL;
    }
    extern "C" {
        pub fn LocalLock(hMem: root::HLOCAL) -> root::LPVOID;
    }
    extern "C" {
        pub fn LocalHandle(pMem: root::LPCVOID) -> root::HLOCAL;
    }
    extern "C" {
        pub fn LocalUnlock(hMem: root::HLOCAL) -> root::BOOL;
    }
    extern "C" {
        pub fn LocalSize(hMem: root::HLOCAL) -> root::SIZE_T;
    }
    extern "C" {
        pub fn LocalFlags(hMem: root::HLOCAL) -> root::UINT;
    }
    extern "C" {
        pub fn LocalFree(hMem: root::HLOCAL) -> root::HLOCAL;
    }
    extern "C" {
        pub fn LocalShrink(hMem: root::HLOCAL, cbNewSize: root::UINT) -> root::SIZE_T;
    }
    extern "C" {
        pub fn LocalCompact(uMinFree: root::UINT) -> root::SIZE_T;
    }
    extern "C" {
        pub fn GetBinaryTypeA(
            lpApplicationName: *const i8,
            lpBinaryType: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetBinaryTypeW(
            lpApplicationName: root::LPCWSTR,
            lpBinaryType: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetShortPathNameA(
            lpszLongPath: *const i8,
            lpszShortPath: *mut i8,
            cchBuffer: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetLongPathNameTransactedA(
            lpszShortPath: *const i8,
            lpszLongPath: *mut i8,
            cchBuffer: u32,
            hTransaction: root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn GetLongPathNameTransactedW(
            lpszShortPath: root::LPCWSTR,
            lpszLongPath: root::LPWSTR,
            cchBuffer: u32,
            hTransaction: root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn GetProcessAffinityMask(
            hProcess: root::HANDLE,
            lpProcessAffinityMask: root::PDWORD_PTR,
            lpSystemAffinityMask: root::PDWORD_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessAffinityMask(
            hProcess: root::HANDLE,
            dwProcessAffinityMask: root::DWORD_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessIoCounters(
            hProcess: root::HANDLE,
            lpIoCounters: root::PIO_COUNTERS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessWorkingSetSize(
            hProcess: root::HANDLE,
            lpMinimumWorkingSetSize: root::PSIZE_T,
            lpMaximumWorkingSetSize: root::PSIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessWorkingSetSize(
            hProcess: root::HANDLE,
            dwMinimumWorkingSetSize: root::SIZE_T,
            dwMaximumWorkingSetSize: root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FatalExit(ExitCode: i32);
    }
    extern "C" {
        pub fn SetEnvironmentStringsA(NewEnvironment: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SwitchToFiber(lpFiber: root::LPVOID);
    }
    extern "C" {
        pub fn DeleteFiber(lpFiber: root::LPVOID);
    }
    extern "C" {
        pub fn ConvertFiberToThread() -> root::BOOL;
    }
    extern "C" {
        pub fn CreateFiberEx(
            dwStackCommitSize: root::SIZE_T,
            dwStackReserveSize: root::SIZE_T,
            dwFlags: u32,
            lpStartAddress: root::LPFIBER_START_ROUTINE,
            lpParameter: root::LPVOID,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn ConvertThreadToFiberEx(
            lpParameter: root::LPVOID,
            dwFlags: u32,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn CreateFiber(
            dwStackSize: root::SIZE_T,
            lpStartAddress: root::LPFIBER_START_ROUTINE,
            lpParameter: root::LPVOID,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn ConvertThreadToFiber(lpParameter: root::LPVOID) -> root::LPVOID;
    }
    pub type PUMS_CONTEXT = *mut ::std::os::raw::c_void;
    pub type PUMS_COMPLETION_LIST = *mut ::std::os::raw::c_void;
    pub use self::super::root::_RTL_UMS_THREAD_INFO_CLASS as UMS_THREAD_INFO_CLASS;
    pub type PUMS_THREAD_INFO_CLASS = *mut root::_RTL_UMS_THREAD_INFO_CLASS;
    pub use self::super::root::_RTL_UMS_SCHEDULER_REASON as UMS_SCHEDULER_REASON;
    pub type PUMS_SCHEDULER_ENTRY_POINT = root::PRTL_UMS_SCHEDULER_ENTRY_POINT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UMS_SCHEDULER_STARTUP_INFO {
        pub UmsVersion: root::ULONG,
        pub CompletionList: root::PUMS_COMPLETION_LIST,
        pub SchedulerProc: root::PUMS_SCHEDULER_ENTRY_POINT,
        pub SchedulerParam: root::PVOID,
    }
    pub type UMS_SCHEDULER_STARTUP_INFO = root::_UMS_SCHEDULER_STARTUP_INFO;
    pub type PUMS_SCHEDULER_STARTUP_INFO = *mut root::_UMS_SCHEDULER_STARTUP_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _UMS_SYSTEM_THREAD_INFORMATION {
        pub UmsVersion: root::ULONG,
        pub __bindgen_anon_1: root::_UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        pub ThreadUmsFlags: root::ULONG,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub __bindgen_padding_0: [u8; 3usize],
    }
    impl _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn IsUmsSchedulerThread(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_IsUmsSchedulerThread(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn IsUmsWorkerThread(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_IsUmsWorkerThread(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            IsUmsSchedulerThread: root::ULONG,
            IsUmsWorkerThread: root::ULONG,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let IsUmsSchedulerThread: u32 =
                    unsafe { ::std::mem::transmute(IsUmsSchedulerThread) };
                IsUmsSchedulerThread as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let IsUmsWorkerThread: u32 = unsafe { ::std::mem::transmute(IsUmsWorkerThread) };
                IsUmsWorkerThread as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type UMS_SYSTEM_THREAD_INFORMATION = root::_UMS_SYSTEM_THREAD_INFORMATION;
    pub type PUMS_SYSTEM_THREAD_INFORMATION = *mut root::_UMS_SYSTEM_THREAD_INFORMATION;
    extern "C" {
        pub fn CreateUmsCompletionList(
            UmsCompletionList: *mut root::PUMS_COMPLETION_LIST,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DequeueUmsCompletionListItems(
            UmsCompletionList: root::PUMS_COMPLETION_LIST,
            WaitTimeOut: u32,
            UmsThreadList: *mut root::PUMS_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUmsCompletionListEvent(
            UmsCompletionList: root::PUMS_COMPLETION_LIST,
            UmsCompletionEvent: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ExecuteUmsThread(UmsThread: root::PUMS_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn UmsThreadYield(SchedulerParam: root::PVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteUmsCompletionList(UmsCompletionList: root::PUMS_COMPLETION_LIST)
            -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentUmsThread() -> root::PUMS_CONTEXT;
    }
    extern "C" {
        pub fn GetNextUmsListItem(UmsContext: root::PUMS_CONTEXT) -> root::PUMS_CONTEXT;
    }
    extern "C" {
        pub fn QueryUmsThreadInformation(
            UmsThread: root::PUMS_CONTEXT,
            UmsThreadInfoClass: root::UMS_THREAD_INFO_CLASS,
            UmsThreadInformation: root::PVOID,
            UmsThreadInformationLength: root::ULONG,
            ReturnLength: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetUmsThreadInformation(
            UmsThread: root::PUMS_CONTEXT,
            UmsThreadInfoClass: root::UMS_THREAD_INFO_CLASS,
            UmsThreadInformation: root::PVOID,
            UmsThreadInformationLength: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteUmsThreadContext(UmsThread: root::PUMS_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateUmsThreadContext(lpUmsThread: *mut root::PUMS_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn EnterUmsSchedulingMode(
            SchedulerStartupInfo: root::PUMS_SCHEDULER_STARTUP_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUmsSystemThreadInformation(
            ThreadHandle: root::HANDLE,
            SystemThreadInfo: root::PUMS_SYSTEM_THREAD_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadAffinityMask(
            hThread: root::HANDLE,
            dwThreadAffinityMask: root::DWORD_PTR,
        ) -> root::DWORD_PTR;
    }
    extern "C" {
        pub fn SetProcessDEPPolicy(dwFlags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessDEPPolicy(
            hProcess: root::HANDLE,
            lpFlags: root::LPDWORD,
            lpPermanent: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RequestWakeupLatency(latency: root::LATENCY_TIME) -> root::BOOL;
    }
    extern "C" {
        pub fn IsSystemResumeAutomatic() -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadSelectorEntry(
            hThread: root::HANDLE,
            dwSelector: u32,
            lpSelectorEntry: root::LPLDT_ENTRY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadExecutionState(esFlags: root::EXECUTION_STATE) -> root::EXECUTION_STATE;
    }
    pub type POWER_REQUEST_CONTEXT = root::REASON_CONTEXT;
    pub type PPOWER_REQUEST_CONTEXT = *mut root::REASON_CONTEXT;
    pub type LPPOWER_REQUEST_CONTEXT = *mut root::REASON_CONTEXT;
    extern "C" {
        pub fn PowerCreateRequest(Context: root::PREASON_CONTEXT) -> root::HANDLE;
    }
    extern "C" {
        pub fn PowerSetRequest(
            PowerRequest: root::HANDLE,
            RequestType: root::POWER_REQUEST_TYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PowerClearRequest(
            PowerRequest: root::HANDLE,
            RequestType: root::POWER_REQUEST_TYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileCompletionNotificationModes(
            FileHandle: root::HANDLE,
            Flags: root::UCHAR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Wow64GetThreadSelectorEntry(
            hThread: root::HANDLE,
            dwSelector: u32,
            lpSelectorEntry: root::PWOW64_LDT_ENTRY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DebugSetProcessKillOnExit(KillOnExit: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn DebugBreakProcess(Process: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn PulseEvent(hEvent: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GlobalDeleteAtom(nAtom: root::ATOM) -> root::ATOM;
    }
    extern "C" {
        pub fn InitAtomTable(nSize: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteAtom(nAtom: root::ATOM) -> root::ATOM;
    }
    extern "C" {
        pub fn SetHandleCount(uNumber: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn RequestDeviceWakeup(hDevice: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn CancelDeviceWakeupRequest(hDevice: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDevicePowerState(hDevice: root::HANDLE, pfOn: *mut root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn SetMessageWaitingIndicator(
            hMsgIndicator: root::HANDLE,
            ulMsgCount: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileShortNameA(hFile: root::HANDLE, lpShortName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileShortNameW(hFile: root::HANDLE, lpShortName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn LoadModule(
            lpModuleName: *const i8,
            lpParameterBlock: root::LPVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn WinExec(lpCmdLine: *const i8, uCmdShow: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn ClearCommBreak(hFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ClearCommError(
            hFile: root::HANDLE,
            lpErrors: root::LPDWORD,
            lpStat: root::LPCOMSTAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetupComm(
            hFile: root::HANDLE,
            dwInQueue: u32,
            dwOutQueue: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EscapeCommFunction(hFile: root::HANDLE, dwFunc: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommConfig(
            hCommDev: root::HANDLE,
            lpCC: root::LPCOMMCONFIG,
            lpdwSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommMask(hFile: root::HANDLE, lpEvtMask: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommProperties(hFile: root::HANDLE, lpCommProp: root::LPCOMMPROP) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommModemStatus(hFile: root::HANDLE, lpModemStat: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommState(hFile: root::HANDLE, lpDCB: root::LPDCB) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCommTimeouts(
            hFile: root::HANDLE,
            lpCommTimeouts: root::LPCOMMTIMEOUTS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PurgeComm(hFile: root::HANDLE, dwFlags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCommBreak(hFile: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCommConfig(
            hCommDev: root::HANDLE,
            lpCC: root::LPCOMMCONFIG,
            dwSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCommMask(hFile: root::HANDLE, dwEvtMask: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCommState(hFile: root::HANDLE, lpDCB: root::LPDCB) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCommTimeouts(
            hFile: root::HANDLE,
            lpCommTimeouts: root::LPCOMMTIMEOUTS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TransmitCommChar(hFile: root::HANDLE, cChar: i8) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitCommEvent(
            hFile: root::HANDLE,
            lpEvtMask: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenCommPort(
            uPortNumber: root::ULONG,
            dwDesiredAccess: u32,
            dwFlagsAndAttributes: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetCommPorts(
            lpPortNumbers: root::PULONG,
            uPortNumbersCount: root::ULONG,
            puPortNumbersFound: root::PULONG,
        ) -> root::ULONG;
    }
    extern "C" {
        pub fn SetTapePosition(
            hDevice: root::HANDLE,
            dwPositionMethod: u32,
            dwPartition: u32,
            dwOffsetLow: u32,
            dwOffsetHigh: u32,
            bImmediate: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn GetTapePosition(
            hDevice: root::HANDLE,
            dwPositionType: u32,
            lpdwPartition: root::LPDWORD,
            lpdwOffsetLow: root::LPDWORD,
            lpdwOffsetHigh: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn PrepareTape(
            hDevice: root::HANDLE,
            dwOperation: u32,
            bImmediate: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn EraseTape(
            hDevice: root::HANDLE,
            dwEraseType: u32,
            bImmediate: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn CreateTapePartition(
            hDevice: root::HANDLE,
            dwPartitionMethod: u32,
            dwCount: u32,
            dwSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WriteTapemark(
            hDevice: root::HANDLE,
            dwTapemarkType: u32,
            dwTapemarkCount: u32,
            bImmediate: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn GetTapeStatus(hDevice: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn GetTapeParameters(
            hDevice: root::HANDLE,
            dwOperation: u32,
            lpdwSize: root::LPDWORD,
            lpTapeInformation: root::LPVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn SetTapeParameters(
            hDevice: root::HANDLE,
            dwOperation: u32,
            lpTapeInformation: root::LPVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn MulDiv(
            nNumber: i32,
            nNumerator: i32,
            nDenominator: i32,
        ) -> i32;
    }
    pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyAlwaysOff: root::_DEP_SYSTEM_POLICY_TYPE = 0;
    pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyAlwaysOn: root::_DEP_SYSTEM_POLICY_TYPE = 1;
    pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyOptIn: root::_DEP_SYSTEM_POLICY_TYPE = 2;
    pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyOptOut: root::_DEP_SYSTEM_POLICY_TYPE = 3;
    pub const _DEP_SYSTEM_POLICY_TYPE_DEPTotalPolicyCount: root::_DEP_SYSTEM_POLICY_TYPE = 4;
    pub type _DEP_SYSTEM_POLICY_TYPE = i32;
    pub use self::super::root::_DEP_SYSTEM_POLICY_TYPE as DEP_SYSTEM_POLICY_TYPE;
    extern "C" {
        pub fn GetSystemDEPPolicy() -> root::DEP_SYSTEM_POLICY_TYPE;
    }
    extern "C" {
        pub fn GetSystemRegistryQuota(
            pdwQuotaAllowed: root::PDWORD,
            pdwQuotaUsed: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FileTimeToDosDateTime(
            lpFileTime: *const root::FILETIME,
            lpFatDate: root::LPWORD,
            lpFatTime: root::LPWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DosDateTimeToFileTime(
            wFatDate: u16,
            wFatTime: u16,
            lpFileTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FormatMessageA(
            dwFlags: u32,
            lpSource: root::LPCVOID,
            dwMessageId: u32,
            dwLanguageId: u32,
            lpBuffer: *mut i8,
            nSize: u32,
            Arguments: *mut root::va_list,
        ) -> u32;
    }
    extern "C" {
        pub fn FormatMessageW(
            dwFlags: u32,
            lpSource: root::LPCVOID,
            dwMessageId: u32,
            dwLanguageId: u32,
            lpBuffer: root::LPWSTR,
            nSize: u32,
            Arguments: *mut root::va_list,
        ) -> u32;
    }
    extern "C" {
        pub fn CreateMailslotA(
            lpName: *const i8,
            nMaxMessageSize: u32,
            lReadTimeout: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateMailslotW(
            lpName: root::LPCWSTR,
            nMaxMessageSize: u32,
            lReadTimeout: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetMailslotInfo(
            hMailslot: root::HANDLE,
            lpMaxMessageSize: root::LPDWORD,
            lpNextSize: root::LPDWORD,
            lpMessageCount: root::LPDWORD,
            lpReadTimeout: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetMailslotInfo(hMailslot: root::HANDLE, lReadTimeout: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn EncryptFileA(lpFileName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn EncryptFileW(lpFileName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn DecryptFileA(lpFileName: *const i8, dwReserved: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn DecryptFileW(lpFileName: root::LPCWSTR, dwReserved: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn FileEncryptionStatusA(
            lpFileName: *const i8,
            lpStatus: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FileEncryptionStatusW(
            lpFileName: root::LPCWSTR,
            lpStatus: root::LPDWORD,
        ) -> root::BOOL;
    }
    pub type PFE_EXPORT_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            pbData: root::PBYTE,
            pvCallbackContext: root::PVOID,
            ulLength: root::ULONG,
        ) -> u32,
    >;
    pub type PFE_IMPORT_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            pbData: root::PBYTE,
            pvCallbackContext: root::PVOID,
            ulLength: root::PULONG,
        ) -> u32,
    >;
    extern "C" {
        pub fn OpenEncryptedFileRawA(
            lpFileName: *const i8,
            ulFlags: root::ULONG,
            pvContext: *mut root::PVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn OpenEncryptedFileRawW(
            lpFileName: root::LPCWSTR,
            ulFlags: root::ULONG,
            pvContext: *mut root::PVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn ReadEncryptedFileRaw(
            pfExportCallback: root::PFE_EXPORT_FUNC,
            pvCallbackContext: root::PVOID,
            pvContext: root::PVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn WriteEncryptedFileRaw(
            pfImportCallback: root::PFE_IMPORT_FUNC,
            pvCallbackContext: root::PVOID,
            pvContext: root::PVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn CloseEncryptedFileRaw(pvContext: root::PVOID);
    }
    extern "C" {
        pub fn lstrcmpA(lpString1: *const i8, lpString2: *const i8) -> i32;
    }
    extern "C" {
        pub fn lstrcmpW(
            lpString1: root::LPCWSTR,
            lpString2: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn lstrcmpiA(lpString1: *const i8, lpString2: *const i8)
            -> i32;
    }
    extern "C" {
        pub fn lstrcmpiW(
            lpString1: root::LPCWSTR,
            lpString2: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn lstrcpynA(
            lpString1: *mut i8,
            lpString2: *const i8,
            iMaxLength: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn lstrcpynW(
            lpString1: root::LPWSTR,
            lpString2: root::LPCWSTR,
            iMaxLength: i32,
        ) -> root::LPWSTR;
    }
    extern "C" {
        pub fn lstrcpyA(lpString1: *mut i8, lpString2: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn lstrcpyW(lpString1: root::LPWSTR, lpString2: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn lstrcatA(lpString1: *mut i8, lpString2: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn lstrcatW(lpString1: root::LPWSTR, lpString2: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn lstrlenA(lpString: *const i8) -> i32;
    }
    extern "C" {
        pub fn lstrlenW(lpString: root::LPCWSTR) -> i32;
    }
    extern "C" {
        pub fn OpenFile(
            lpFileName: *const i8,
            lpReOpenBuff: root::LPOFSTRUCT,
            uStyle: root::UINT,
        ) -> root::HFILE;
    }
    extern "C" {
        pub fn _lopen(lpPathName: *const i8, iReadWrite: i32) -> root::HFILE;
    }
    extern "C" {
        pub fn _lcreat(lpPathName: *const i8, iAttribute: i32) -> root::HFILE;
    }
    extern "C" {
        pub fn _lread(hFile: root::HFILE, lpBuffer: root::LPVOID, uBytes: root::UINT)
            -> root::UINT;
    }
    extern "C" {
        pub fn _lwrite(hFile: root::HFILE, lpBuffer: *const i8, uBytes: root::UINT)
            -> root::UINT;
    }
    extern "C" {
        pub fn _hread(
            hFile: root::HFILE,
            lpBuffer: root::LPVOID,
            lBytes: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _hwrite(
            hFile: root::HFILE,
            lpBuffer: *const i8,
            lBytes: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _lclose(hFile: root::HFILE) -> root::HFILE;
    }
    extern "C" {
        pub fn _llseek(
            hFile: root::HFILE,
            lOffset: i32,
            iOrigin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn IsTextUnicode(
            lpv: *const ::std::os::raw::c_void,
            iSize: i32,
            lpiResult: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BackupRead(
            hFile: root::HANDLE,
            lpBuffer: root::LPBYTE,
            nNumberOfBytesToRead: u32,
            lpNumberOfBytesRead: root::LPDWORD,
            bAbort: root::BOOL,
            bProcessSecurity: root::BOOL,
            lpContext: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BackupSeek(
            hFile: root::HANDLE,
            dwLowBytesToSeek: u32,
            dwHighBytesToSeek: u32,
            lpdwLowByteSeeked: root::LPDWORD,
            lpdwHighByteSeeked: root::LPDWORD,
            lpContext: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BackupWrite(
            hFile: root::HANDLE,
            lpBuffer: root::LPBYTE,
            nNumberOfBytesToWrite: u32,
            lpNumberOfBytesWritten: root::LPDWORD,
            bAbort: root::BOOL,
            bProcessSecurity: root::BOOL,
            lpContext: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIN32_STREAM_ID {
        pub dwStreamId: u32,
        pub dwStreamAttributes: u32,
        pub Size: root::LARGE_INTEGER,
        pub dwStreamNameSize: u32,
        pub cStreamName: [u16; 1usize],
    }
    pub type WIN32_STREAM_ID = root::_WIN32_STREAM_ID;
    pub type LPWIN32_STREAM_ID = *mut root::_WIN32_STREAM_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STARTUPINFOEXA {
        pub StartupInfo: root::STARTUPINFOA,
        pub lpAttributeList: root::LPPROC_THREAD_ATTRIBUTE_LIST,
    }
    pub type STARTUPINFOEXA = root::_STARTUPINFOEXA;
    pub type LPSTARTUPINFOEXA = *mut root::_STARTUPINFOEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STARTUPINFOEXW {
        pub StartupInfo: root::STARTUPINFOW,
        pub lpAttributeList: root::LPPROC_THREAD_ATTRIBUTE_LIST,
    }
    pub type STARTUPINFOEXW = root::_STARTUPINFOEXW;
    pub type LPSTARTUPINFOEXW = *mut root::_STARTUPINFOEXW;
    pub type STARTUPINFOEX = root::STARTUPINFOEXA;
    pub type LPSTARTUPINFOEX = root::LPSTARTUPINFOEXA;
    extern "C" {
        pub fn OpenMutexA(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateSemaphoreA(
            lpSemaphoreAttributes: root::LPSECURITY_ATTRIBUTES,
            lInitialCount: i32,
            lMaximumCount: i32,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenSemaphoreA(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateWaitableTimerA(
            lpTimerAttributes: root::LPSECURITY_ATTRIBUTES,
            bManualReset: root::BOOL,
            lpTimerName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenWaitableTimerA(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpTimerName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateSemaphoreExA(
            lpSemaphoreAttributes: root::LPSECURITY_ATTRIBUTES,
            lInitialCount: i32,
            lMaximumCount: i32,
            lpName: *const i8,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateWaitableTimerExA(
            lpTimerAttributes: root::LPSECURITY_ATTRIBUTES,
            lpTimerName: *const i8,
            dwFlags: u32,
            dwDesiredAccess: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateFileMappingA(
            hFile: root::HANDLE,
            lpFileMappingAttributes: root::LPSECURITY_ATTRIBUTES,
            flProtect: u32,
            dwMaximumSizeHigh: u32,
            dwMaximumSizeLow: u32,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateFileMappingNumaA(
            hFile: root::HANDLE,
            lpFileMappingAttributes: root::LPSECURITY_ATTRIBUTES,
            flProtect: u32,
            dwMaximumSizeHigh: u32,
            dwMaximumSizeLow: u32,
            lpName: *const i8,
            nndPreferred: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenFileMappingA(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetLogicalDriveStringsA(
            nBufferLength: u32,
            lpBuffer: *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn LoadPackagedLibrary(
            lpwLibFileName: root::LPCWSTR,
            Reserved: u32,
        ) -> root::HMODULE;
    }
    extern "C" {
        pub fn QueryFullProcessImageNameA(
            hProcess: root::HANDLE,
            dwFlags: u32,
            lpExeName: *mut i8,
            lpdwSize: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryFullProcessImageNameW(
            hProcess: root::HANDLE,
            dwFlags: u32,
            lpExeName: root::LPWSTR,
            lpdwSize: root::PDWORD,
        ) -> root::BOOL;
    }
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeParentProcess:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 0;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeHandleList:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 2;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeGroupAffinity:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 3;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributePreferredNode:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 4;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeIdealProcessor:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 5;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeUmsThread:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 6;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeMitigationPolicy:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 7;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeSecurityCapabilities:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 9;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeProtectionLevel:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 11;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeJobList:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 13;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeChildProcessPolicy:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 14;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeAllApplicationPackagesPolicy:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 15;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeWin32kFilter:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 16;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeSafeOpenPromptOriginClaim:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 17;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeDesktopAppPolicy:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 18;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributePseudoConsole:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 22;
    pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeMitigationAuditPolicy:
        root::_PROC_THREAD_ATTRIBUTE_NUM = 24;
    pub type _PROC_THREAD_ATTRIBUTE_NUM = i32;
    pub use self::super::root::_PROC_THREAD_ATTRIBUTE_NUM as PROC_THREAD_ATTRIBUTE_NUM;
    extern "C" {
        pub fn GetStartupInfoA(lpStartupInfo: root::LPSTARTUPINFOA);
    }
    extern "C" {
        pub fn GetFirmwareEnvironmentVariableA(
            lpName: *const i8,
            lpGuid: *const i8,
            pBuffer: root::PVOID,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFirmwareEnvironmentVariableW(
            lpName: root::LPCWSTR,
            lpGuid: root::LPCWSTR,
            pBuffer: root::PVOID,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFirmwareEnvironmentVariableExA(
            lpName: *const i8,
            lpGuid: *const i8,
            pBuffer: root::PVOID,
            nSize: u32,
            pdwAttribubutes: root::PDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFirmwareEnvironmentVariableExW(
            lpName: root::LPCWSTR,
            lpGuid: root::LPCWSTR,
            pBuffer: root::PVOID,
            nSize: u32,
            pdwAttribubutes: root::PDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn SetFirmwareEnvironmentVariableA(
            lpName: *const i8,
            lpGuid: *const i8,
            pValue: root::PVOID,
            nSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFirmwareEnvironmentVariableW(
            lpName: root::LPCWSTR,
            lpGuid: root::LPCWSTR,
            pValue: root::PVOID,
            nSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFirmwareEnvironmentVariableExA(
            lpName: *const i8,
            lpGuid: *const i8,
            pValue: root::PVOID,
            nSize: u32,
            dwAttributes: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFirmwareEnvironmentVariableExW(
            lpName: root::LPCWSTR,
            lpGuid: root::LPCWSTR,
            pValue: root::PVOID,
            nSize: u32,
            dwAttributes: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFirmwareType(FirmwareType: root::PFIRMWARE_TYPE) -> root::BOOL;
    }
    extern "C" {
        pub fn IsNativeVhdBoot(NativeVhdBoot: root::PBOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn FindResourceA(
            hModule: root::HMODULE,
            lpName: *const i8,
            lpType: *const i8,
        ) -> root::HRSRC;
    }
    extern "C" {
        pub fn FindResourceExA(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpName: *const i8,
            wLanguage: u16,
        ) -> root::HRSRC;
    }
    extern "C" {
        pub fn EnumResourceTypesA(
            hModule: root::HMODULE,
            lpEnumFunc: root::ENUMRESTYPEPROCA,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceTypesW(
            hModule: root::HMODULE,
            lpEnumFunc: root::ENUMRESTYPEPROCW,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceNamesA(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpEnumFunc: root::ENUMRESNAMEPROCA,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceLanguagesA(
            hModule: root::HMODULE,
            lpType: *const i8,
            lpName: *const i8,
            lpEnumFunc: root::ENUMRESLANGPROCA,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumResourceLanguagesW(
            hModule: root::HMODULE,
            lpType: root::LPCWSTR,
            lpName: root::LPCWSTR,
            lpEnumFunc: root::ENUMRESLANGPROCW,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BeginUpdateResourceA(
            pFileName: *const i8,
            bDeleteExistingResources: root::BOOL,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn BeginUpdateResourceW(
            pFileName: root::LPCWSTR,
            bDeleteExistingResources: root::BOOL,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn UpdateResourceA(
            hUpdate: root::HANDLE,
            lpType: *const i8,
            lpName: *const i8,
            wLanguage: u16,
            lpData: root::LPVOID,
            cb: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UpdateResourceW(
            hUpdate: root::HANDLE,
            lpType: root::LPCWSTR,
            lpName: root::LPCWSTR,
            wLanguage: u16,
            lpData: root::LPVOID,
            cb: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EndUpdateResourceA(hUpdate: root::HANDLE, fDiscard: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn EndUpdateResourceW(hUpdate: root::HANDLE, fDiscard: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn GlobalAddAtomA(lpString: *const i8) -> root::ATOM;
    }
    extern "C" {
        pub fn GlobalAddAtomW(lpString: root::LPCWSTR) -> root::ATOM;
    }
    extern "C" {
        pub fn GlobalAddAtomExA(lpString: *const i8, Flags: u32) -> root::ATOM;
    }
    extern "C" {
        pub fn GlobalAddAtomExW(lpString: root::LPCWSTR, Flags: u32) -> root::ATOM;
    }
    extern "C" {
        pub fn GlobalFindAtomA(lpString: *const i8) -> root::ATOM;
    }
    extern "C" {
        pub fn GlobalFindAtomW(lpString: root::LPCWSTR) -> root::ATOM;
    }
    extern "C" {
        pub fn GlobalGetAtomNameA(
            nAtom: root::ATOM,
            lpBuffer: *mut i8,
            nSize: i32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GlobalGetAtomNameW(
            nAtom: root::ATOM,
            lpBuffer: root::LPWSTR,
            nSize: i32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn AddAtomA(lpString: *const i8) -> root::ATOM;
    }
    extern "C" {
        pub fn AddAtomW(lpString: root::LPCWSTR) -> root::ATOM;
    }
    extern "C" {
        pub fn FindAtomA(lpString: *const i8) -> root::ATOM;
    }
    extern "C" {
        pub fn FindAtomW(lpString: root::LPCWSTR) -> root::ATOM;
    }
    extern "C" {
        pub fn GetAtomNameA(
            nAtom: root::ATOM,
            lpBuffer: *mut i8,
            nSize: i32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetAtomNameW(
            nAtom: root::ATOM,
            lpBuffer: root::LPWSTR,
            nSize: i32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetProfileIntA(
            lpAppName: *const i8,
            lpKeyName: *const i8,
            nDefault: root::INT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetProfileIntW(
            lpAppName: root::LPCWSTR,
            lpKeyName: root::LPCWSTR,
            nDefault: root::INT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetProfileStringA(
            lpAppName: *const i8,
            lpKeyName: *const i8,
            lpDefault: *const i8,
            lpReturnedString: *mut i8,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetProfileStringW(
            lpAppName: root::LPCWSTR,
            lpKeyName: root::LPCWSTR,
            lpDefault: root::LPCWSTR,
            lpReturnedString: root::LPWSTR,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WriteProfileStringA(
            lpAppName: *const i8,
            lpKeyName: *const i8,
            lpString: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteProfileStringW(
            lpAppName: root::LPCWSTR,
            lpKeyName: root::LPCWSTR,
            lpString: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProfileSectionA(
            lpAppName: *const i8,
            lpReturnedString: *mut i8,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetProfileSectionW(
            lpAppName: root::LPCWSTR,
            lpReturnedString: root::LPWSTR,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WriteProfileSectionA(lpAppName: *const i8, lpString: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteProfileSectionW(
            lpAppName: root::LPCWSTR,
            lpString: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrivateProfileIntA(
            lpAppName: *const i8,
            lpKeyName: *const i8,
            nDefault: root::INT,
            lpFileName: *const i8,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetPrivateProfileIntW(
            lpAppName: root::LPCWSTR,
            lpKeyName: root::LPCWSTR,
            nDefault: root::INT,
            lpFileName: root::LPCWSTR,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetPrivateProfileStringA(
            lpAppName: *const i8,
            lpKeyName: *const i8,
            lpDefault: *const i8,
            lpReturnedString: *mut i8,
            nSize: u32,
            lpFileName: *const i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrivateProfileStringW(
            lpAppName: root::LPCWSTR,
            lpKeyName: root::LPCWSTR,
            lpDefault: root::LPCWSTR,
            lpReturnedString: root::LPWSTR,
            nSize: u32,
            lpFileName: root::LPCWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn WritePrivateProfileStringA(
            lpAppName: *const i8,
            lpKeyName: *const i8,
            lpString: *const i8,
            lpFileName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WritePrivateProfileStringW(
            lpAppName: root::LPCWSTR,
            lpKeyName: root::LPCWSTR,
            lpString: root::LPCWSTR,
            lpFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrivateProfileSectionA(
            lpAppName: *const i8,
            lpReturnedString: *mut i8,
            nSize: u32,
            lpFileName: *const i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrivateProfileSectionW(
            lpAppName: root::LPCWSTR,
            lpReturnedString: root::LPWSTR,
            nSize: u32,
            lpFileName: root::LPCWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn WritePrivateProfileSectionA(
            lpAppName: *const i8,
            lpString: *const i8,
            lpFileName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WritePrivateProfileSectionW(
            lpAppName: root::LPCWSTR,
            lpString: root::LPCWSTR,
            lpFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrivateProfileSectionNamesA(
            lpszReturnBuffer: *mut i8,
            nSize: u32,
            lpFileName: *const i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrivateProfileSectionNamesW(
            lpszReturnBuffer: root::LPWSTR,
            nSize: u32,
            lpFileName: root::LPCWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrivateProfileStructA(
            lpszSection: *const i8,
            lpszKey: *const i8,
            lpStruct: root::LPVOID,
            uSizeStruct: root::UINT,
            szFile: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrivateProfileStructW(
            lpszSection: root::LPCWSTR,
            lpszKey: root::LPCWSTR,
            lpStruct: root::LPVOID,
            uSizeStruct: root::UINT,
            szFile: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WritePrivateProfileStructA(
            lpszSection: *const i8,
            lpszKey: *const i8,
            lpStruct: root::LPVOID,
            uSizeStruct: root::UINT,
            szFile: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WritePrivateProfileStructW(
            lpszSection: root::LPCWSTR,
            lpszKey: root::LPCWSTR,
            lpStruct: root::LPVOID,
            uSizeStruct: root::UINT,
            szFile: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Wow64EnableWow64FsRedirection(
            Wow64FsEnableRedirection: root::BOOLEAN,
        ) -> root::BOOLEAN;
    }
    pub type PGET_SYSTEM_WOW64_DIRECTORY_A = ::std::option::Option<
        unsafe extern "C" fn(lpBuffer: *mut i8, uSize: root::UINT) -> root::UINT,
    >;
    pub type PGET_SYSTEM_WOW64_DIRECTORY_W = ::std::option::Option<
        unsafe extern "C" fn(lpBuffer: root::LPWSTR, uSize: root::UINT) -> root::UINT,
    >;
    extern "C" {
        pub fn SetDllDirectoryA(lpPathName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDllDirectoryW(lpPathName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDllDirectoryA(nBufferLength: u32, lpBuffer: *mut i8) -> u32;
    }
    extern "C" {
        pub fn GetDllDirectoryW(nBufferLength: u32, lpBuffer: root::LPWSTR) -> u32;
    }
    extern "C" {
        pub fn SetSearchPathMode(Flags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDirectoryExA(
            lpTemplateDirectory: *const i8,
            lpNewDirectory: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDirectoryExW(
            lpTemplateDirectory: root::LPCWSTR,
            lpNewDirectory: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDirectoryTransactedA(
            lpTemplateDirectory: *const i8,
            lpNewDirectory: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDirectoryTransactedW(
            lpTemplateDirectory: root::LPCWSTR,
            lpNewDirectory: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveDirectoryTransactedA(
            lpPathName: *const i8,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveDirectoryTransactedW(
            lpPathName: root::LPCWSTR,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFullPathNameTransactedA(
            lpFileName: *const i8,
            nBufferLength: u32,
            lpBuffer: *mut i8,
            lpFilePart: *mut *mut i8,
            hTransaction: root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFullPathNameTransactedW(
            lpFileName: root::LPCWSTR,
            nBufferLength: u32,
            lpBuffer: root::LPWSTR,
            lpFilePart: *mut root::LPWSTR,
            hTransaction: root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn DefineDosDeviceA(
            dwFlags: u32,
            lpDeviceName: *const i8,
            lpTargetPath: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryDosDeviceA(
            lpDeviceName: *const i8,
            lpTargetPath: *mut i8,
            ucchMax: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CreateFileTransactedA(
            lpFileName: *const i8,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            dwCreationDisposition: u32,
            dwFlagsAndAttributes: u32,
            hTemplateFile: root::HANDLE,
            hTransaction: root::HANDLE,
            pusMiniVersion: root::PUSHORT,
            lpExtendedParameter: root::PVOID,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateFileTransactedW(
            lpFileName: root::LPCWSTR,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            dwCreationDisposition: u32,
            dwFlagsAndAttributes: u32,
            hTemplateFile: root::HANDLE,
            hTransaction: root::HANDLE,
            pusMiniVersion: root::PUSHORT,
            lpExtendedParameter: root::PVOID,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn ReOpenFile(
            hOriginalFile: root::HANDLE,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            dwFlagsAndAttributes: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn SetFileAttributesTransactedA(
            lpFileName: *const i8,
            dwFileAttributes: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileAttributesTransactedW(
            lpFileName: root::LPCWSTR,
            dwFileAttributes: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileAttributesTransactedA(
            lpFileName: *const i8,
            fInfoLevelId: root::GET_FILEEX_INFO_LEVELS,
            lpFileInformation: root::LPVOID,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileAttributesTransactedW(
            lpFileName: root::LPCWSTR,
            fInfoLevelId: root::GET_FILEEX_INFO_LEVELS,
            lpFileInformation: root::LPVOID,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCompressedFileSizeTransactedA(
            lpFileName: *const i8,
            lpFileSizeHigh: root::LPDWORD,
            hTransaction: root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn GetCompressedFileSizeTransactedW(
            lpFileName: root::LPCWSTR,
            lpFileSizeHigh: root::LPDWORD,
            hTransaction: root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn DeleteFileTransactedA(
            lpFileName: *const i8,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteFileTransactedW(
            lpFileName: root::LPCWSTR,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckNameLegalDOS8Dot3A(
            lpName: *const i8,
            lpOemName: *mut i8,
            OemNameSize: u32,
            pbNameContainsSpaces: root::PBOOL,
            pbNameLegal: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckNameLegalDOS8Dot3W(
            lpName: root::LPCWSTR,
            lpOemName: *mut i8,
            OemNameSize: u32,
            pbNameContainsSpaces: root::PBOOL,
            pbNameLegal: root::PBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstFileTransactedA(
            lpFileName: *const i8,
            fInfoLevelId: root::FINDEX_INFO_LEVELS,
            lpFindFileData: root::LPVOID,
            fSearchOp: root::FINDEX_SEARCH_OPS,
            lpSearchFilter: root::LPVOID,
            dwAdditionalFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstFileTransactedW(
            lpFileName: root::LPCWSTR,
            fInfoLevelId: root::FINDEX_INFO_LEVELS,
            lpFindFileData: root::LPVOID,
            fSearchOp: root::FINDEX_SEARCH_OPS,
            lpSearchFilter: root::LPVOID,
            dwAdditionalFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CopyFileA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
            bFailIfExists: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyFileW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            bFailIfExists: root::BOOL,
        ) -> root::BOOL;
    }
    pub type LPPROGRESS_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            TotalFileSize: root::LARGE_INTEGER,
            TotalBytesTransferred: root::LARGE_INTEGER,
            StreamSize: root::LARGE_INTEGER,
            StreamBytesTransferred: root::LARGE_INTEGER,
            dwStreamNumber: u32,
            dwCallbackReason: u32,
            hSourceFile: root::HANDLE,
            hDestinationFile: root::HANDLE,
            lpData: root::LPVOID,
        ) -> u32,
    >;
    extern "C" {
        pub fn CopyFileExA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            pbCancel: root::LPBOOL,
            dwCopyFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyFileExW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            pbCancel: root::LPBOOL,
            dwCopyFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyFileTransactedA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            pbCancel: root::LPBOOL,
            dwCopyFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyFileTransactedW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            pbCancel: root::LPBOOL,
            dwCopyFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_NONE: root::_COPYFILE2_MESSAGE_TYPE = 0;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_CHUNK_STARTED:
        root::_COPYFILE2_MESSAGE_TYPE = 1;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_CHUNK_FINISHED:
        root::_COPYFILE2_MESSAGE_TYPE = 2;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_STREAM_STARTED:
        root::_COPYFILE2_MESSAGE_TYPE = 3;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_STREAM_FINISHED:
        root::_COPYFILE2_MESSAGE_TYPE = 4;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_POLL_CONTINUE:
        root::_COPYFILE2_MESSAGE_TYPE = 5;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_ERROR: root::_COPYFILE2_MESSAGE_TYPE = 6;
    pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_MAX: root::_COPYFILE2_MESSAGE_TYPE = 7;
    pub type _COPYFILE2_MESSAGE_TYPE = i32;
    pub use self::super::root::_COPYFILE2_MESSAGE_TYPE as COPYFILE2_MESSAGE_TYPE;
    pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_CONTINUE:
        root::_COPYFILE2_MESSAGE_ACTION = 0;
    pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_CANCEL: root::_COPYFILE2_MESSAGE_ACTION =
        1;
    pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_STOP: root::_COPYFILE2_MESSAGE_ACTION =
        2;
    pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_QUIET: root::_COPYFILE2_MESSAGE_ACTION =
        3;
    pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_PAUSE: root::_COPYFILE2_MESSAGE_ACTION =
        4;
    pub type _COPYFILE2_MESSAGE_ACTION = i32;
    pub use self::super::root::_COPYFILE2_MESSAGE_ACTION as COPYFILE2_MESSAGE_ACTION;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_NONE: root::_COPYFILE2_COPY_PHASE = 0;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_PREPARE_SOURCE: root::_COPYFILE2_COPY_PHASE = 1;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_PREPARE_DEST: root::_COPYFILE2_COPY_PHASE = 2;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_READ_SOURCE: root::_COPYFILE2_COPY_PHASE = 3;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_WRITE_DESTINATION: root::_COPYFILE2_COPY_PHASE =
        4;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_SERVER_COPY: root::_COPYFILE2_COPY_PHASE = 5;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_NAMEGRAFT_COPY: root::_COPYFILE2_COPY_PHASE = 6;
    pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_MAX: root::_COPYFILE2_COPY_PHASE = 7;
    pub type _COPYFILE2_COPY_PHASE = i32;
    pub use self::super::root::_COPYFILE2_COPY_PHASE as COPYFILE2_COPY_PHASE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct COPYFILE2_MESSAGE {
        pub Type: root::COPYFILE2_MESSAGE_TYPE,
        pub dwPadding: u32,
        pub Info: root::COPYFILE2_MESSAGE__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union COPYFILE2_MESSAGE__bindgen_ty_1 {
        pub ChunkStarted: root::COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        pub ChunkFinished: root::COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        pub StreamStarted: root::COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        pub StreamFinished: root::COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        pub PollContinue: root::COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5,
        pub Error: root::COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1 {
        pub dwStreamNumber: u32,
        pub dwReserved: u32,
        pub hSourceFile: root::HANDLE,
        pub hDestinationFile: root::HANDLE,
        pub uliChunkNumber: root::ULARGE_INTEGER,
        pub uliChunkSize: root::ULARGE_INTEGER,
        pub uliStreamSize: root::ULARGE_INTEGER,
        pub uliTotalFileSize: root::ULARGE_INTEGER,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2 {
        pub dwStreamNumber: u32,
        pub dwFlags: u32,
        pub hSourceFile: root::HANDLE,
        pub hDestinationFile: root::HANDLE,
        pub uliChunkNumber: root::ULARGE_INTEGER,
        pub uliChunkSize: root::ULARGE_INTEGER,
        pub uliStreamSize: root::ULARGE_INTEGER,
        pub uliStreamBytesTransferred: root::ULARGE_INTEGER,
        pub uliTotalFileSize: root::ULARGE_INTEGER,
        pub uliTotalBytesTransferred: root::ULARGE_INTEGER,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3 {
        pub dwStreamNumber: u32,
        pub dwReserved: u32,
        pub hSourceFile: root::HANDLE,
        pub hDestinationFile: root::HANDLE,
        pub uliStreamSize: root::ULARGE_INTEGER,
        pub uliTotalFileSize: root::ULARGE_INTEGER,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4 {
        pub dwStreamNumber: u32,
        pub dwReserved: u32,
        pub hSourceFile: root::HANDLE,
        pub hDestinationFile: root::HANDLE,
        pub uliStreamSize: root::ULARGE_INTEGER,
        pub uliStreamBytesTransferred: root::ULARGE_INTEGER,
        pub uliTotalFileSize: root::ULARGE_INTEGER,
        pub uliTotalBytesTransferred: root::ULARGE_INTEGER,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5 {
        pub dwReserved: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6 {
        pub CopyPhase: root::COPYFILE2_COPY_PHASE,
        pub dwStreamNumber: u32,
        pub hrFailure: root::HRESULT,
        pub dwReserved: u32,
        pub uliChunkNumber: root::ULARGE_INTEGER,
        pub uliStreamSize: root::ULARGE_INTEGER,
        pub uliStreamBytesTransferred: root::ULARGE_INTEGER,
        pub uliTotalFileSize: root::ULARGE_INTEGER,
        pub uliTotalBytesTransferred: root::ULARGE_INTEGER,
    }
    pub type PCOPYFILE2_PROGRESS_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            pMessage: *const root::COPYFILE2_MESSAGE,
            pvCallbackContext: root::PVOID,
        ) -> root::COPYFILE2_MESSAGE_ACTION,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct COPYFILE2_EXTENDED_PARAMETERS {
        pub dwSize: u32,
        pub dwCopyFlags: u32,
        pub pfCancel: *mut root::BOOL,
        pub pProgressRoutine: root::PCOPYFILE2_PROGRESS_ROUTINE,
        pub pvCallbackContext: root::PVOID,
    }
    extern "C" {
        pub fn CopyFile2(
            pwszExistingFileName: *const u16,
            pwszNewFileName: *const u16,
            pExtendedParameters: *mut root::COPYFILE2_EXTENDED_PARAMETERS,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn MoveFileA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileExA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileExW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileWithProgressA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileWithProgressW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileTransactedA(
            lpExistingFileName: *const i8,
            lpNewFileName: *const i8,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            dwFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveFileTransactedW(
            lpExistingFileName: root::LPCWSTR,
            lpNewFileName: root::LPCWSTR,
            lpProgressRoutine: root::LPPROGRESS_ROUTINE,
            lpData: root::LPVOID,
            dwFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReplaceFileA(
            lpReplacedFileName: *const i8,
            lpReplacementFileName: *const i8,
            lpBackupFileName: *const i8,
            dwReplaceFlags: u32,
            lpExclude: root::LPVOID,
            lpReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReplaceFileW(
            lpReplacedFileName: root::LPCWSTR,
            lpReplacementFileName: root::LPCWSTR,
            lpBackupFileName: root::LPCWSTR,
            dwReplaceFlags: u32,
            lpExclude: root::LPVOID,
            lpReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateHardLinkA(
            lpFileName: *const i8,
            lpExistingFileName: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateHardLinkW(
            lpFileName: root::LPCWSTR,
            lpExistingFileName: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateHardLinkTransactedA(
            lpFileName: *const i8,
            lpExistingFileName: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateHardLinkTransactedW(
            lpFileName: root::LPCWSTR,
            lpExistingFileName: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            hTransaction: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstStreamTransactedW(
            lpFileName: root::LPCWSTR,
            InfoLevel: root::STREAM_INFO_LEVELS,
            lpFindStreamData: root::LPVOID,
            dwFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstFileNameTransactedW(
            lpFileName: root::LPCWSTR,
            dwFlags: u32,
            StringLength: root::LPDWORD,
            LinkName: *mut u16,
            hTransaction: root::HANDLE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateNamedPipeA(
            lpName: *const i8,
            dwOpenMode: u32,
            dwPipeMode: u32,
            nMaxInstances: u32,
            nOutBufferSize: u32,
            nInBufferSize: u32,
            nDefaultTimeOut: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetNamedPipeHandleStateA(
            hNamedPipe: root::HANDLE,
            lpState: root::LPDWORD,
            lpCurInstances: root::LPDWORD,
            lpMaxCollectionCount: root::LPDWORD,
            lpCollectDataTimeout: root::LPDWORD,
            lpUserName: *mut i8,
            nMaxUserNameSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CallNamedPipeA(
            lpNamedPipeName: *const i8,
            lpInBuffer: root::LPVOID,
            nInBufferSize: u32,
            lpOutBuffer: root::LPVOID,
            nOutBufferSize: u32,
            lpBytesRead: root::LPDWORD,
            nTimeOut: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitNamedPipeA(lpNamedPipeName: *const i8, nTimeOut: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeClientComputerNameA(
            Pipe: root::HANDLE,
            ClientComputerName: *mut i8,
            ClientComputerNameLength: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeClientProcessId(
            Pipe: root::HANDLE,
            ClientProcessId: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeClientSessionId(
            Pipe: root::HANDLE,
            ClientSessionId: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeServerProcessId(
            Pipe: root::HANDLE,
            ServerProcessId: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNamedPipeServerSessionId(
            Pipe: root::HANDLE,
            ServerSessionId: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetVolumeLabelA(
            lpRootPathName: *const i8,
            lpVolumeName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetVolumeLabelW(
            lpRootPathName: root::LPCWSTR,
            lpVolumeName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileBandwidthReservation(
            hFile: root::HANDLE,
            nPeriodMilliseconds: u32,
            nBytesPerPeriod: u32,
            bDiscardable: root::BOOL,
            lpTransferSize: root::LPDWORD,
            lpNumOutstandingRequests: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileBandwidthReservation(
            hFile: root::HANDLE,
            lpPeriodMilliseconds: root::LPDWORD,
            lpBytesPerPeriod: root::LPDWORD,
            pDiscardable: root::LPBOOL,
            lpTransferSize: root::LPDWORD,
            lpNumOutstandingRequests: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ClearEventLogA(
            hEventLog: root::HANDLE,
            lpBackupFileName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ClearEventLogW(
            hEventLog: root::HANDLE,
            lpBackupFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BackupEventLogA(
            hEventLog: root::HANDLE,
            lpBackupFileName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BackupEventLogW(
            hEventLog: root::HANDLE,
            lpBackupFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseEventLog(hEventLog: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn DeregisterEventSource(hEventLog: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn NotifyChangeEventLog(hEventLog: root::HANDLE, hEvent: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumberOfEventLogRecords(
            hEventLog: root::HANDLE,
            NumberOfRecords: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetOldestEventLogRecord(
            hEventLog: root::HANDLE,
            OldestRecord: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenEventLogA(
            lpUNCServerName: *const i8,
            lpSourceName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenEventLogW(
            lpUNCServerName: root::LPCWSTR,
            lpSourceName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn RegisterEventSourceA(
            lpUNCServerName: *const i8,
            lpSourceName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn RegisterEventSourceW(
            lpUNCServerName: root::LPCWSTR,
            lpSourceName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenBackupEventLogA(
            lpUNCServerName: *const i8,
            lpFileName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenBackupEventLogW(
            lpUNCServerName: root::LPCWSTR,
            lpFileName: root::LPCWSTR,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn ReadEventLogA(
            hEventLog: root::HANDLE,
            dwReadFlags: u32,
            dwRecordOffset: u32,
            lpBuffer: root::LPVOID,
            nNumberOfBytesToRead: u32,
            pnBytesRead: *mut u32,
            pnMinNumberOfBytesNeeded: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadEventLogW(
            hEventLog: root::HANDLE,
            dwReadFlags: u32,
            dwRecordOffset: u32,
            lpBuffer: root::LPVOID,
            nNumberOfBytesToRead: u32,
            pnBytesRead: *mut u32,
            pnMinNumberOfBytesNeeded: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReportEventA(
            hEventLog: root::HANDLE,
            wType: u16,
            wCategory: u16,
            dwEventID: u32,
            lpUserSid: root::PSID,
            wNumStrings: u16,
            dwDataSize: u32,
            lpStrings: *mut *const i8,
            lpRawData: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReportEventW(
            hEventLog: root::HANDLE,
            wType: u16,
            wCategory: u16,
            dwEventID: u32,
            lpUserSid: root::PSID,
            wNumStrings: u16,
            dwDataSize: u32,
            lpStrings: *mut root::LPCWSTR,
            lpRawData: root::LPVOID,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EVENTLOG_FULL_INFORMATION {
        pub dwFull: u32,
    }
    pub type EVENTLOG_FULL_INFORMATION = root::_EVENTLOG_FULL_INFORMATION;
    pub type LPEVENTLOG_FULL_INFORMATION = *mut root::_EVENTLOG_FULL_INFORMATION;
    extern "C" {
        pub fn GetEventLogInformation(
            hEventLog: root::HANDLE,
            dwInfoLevel: u32,
            lpBuffer: root::LPVOID,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    pub type OPERATION_ID = root::ULONG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OPERATION_START_PARAMETERS {
        pub Version: root::ULONG,
        pub OperationId: root::OPERATION_ID,
        pub Flags: root::ULONG,
    }
    pub type OPERATION_START_PARAMETERS = root::_OPERATION_START_PARAMETERS;
    pub type POPERATION_START_PARAMETERS = *mut root::_OPERATION_START_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OPERATION_END_PARAMETERS {
        pub Version: root::ULONG,
        pub OperationId: root::OPERATION_ID,
        pub Flags: root::ULONG,
    }
    pub type OPERATION_END_PARAMETERS = root::_OPERATION_END_PARAMETERS;
    pub type POPERATION_END_PARAMETERS = *mut root::_OPERATION_END_PARAMETERS;
    extern "C" {
        pub fn OperationStart(
            OperationStartParams: *mut root::OPERATION_START_PARAMETERS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OperationEnd(OperationEndParams: *mut root::OPERATION_END_PARAMETERS) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckAndAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            ObjectTypeName: *mut i8,
            ObjectName: *mut i8,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            DesiredAccess: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccess: root::LPDWORD,
            AccessStatus: root::LPBOOL,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeAndAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            ObjectTypeName: *const i8,
            ObjectName: *const i8,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            DesiredAccess: u32,
            AuditType: root::AUDIT_EVENT_TYPE,
            Flags: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccess: root::LPDWORD,
            AccessStatus: root::LPBOOL,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeResultListAndAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            ObjectTypeName: *const i8,
            ObjectName: *const i8,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            DesiredAccess: u32,
            AuditType: root::AUDIT_EVENT_TYPE,
            Flags: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccess: root::LPDWORD,
            AccessStatusList: root::LPDWORD,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            ClientToken: root::HANDLE,
            ObjectTypeName: *const i8,
            ObjectName: *const i8,
            SecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            PrincipalSelfSid: root::PSID,
            DesiredAccess: u32,
            AuditType: root::AUDIT_EVENT_TYPE,
            Flags: u32,
            ObjectTypeList: root::POBJECT_TYPE_LIST,
            ObjectTypeListLength: u32,
            GenericMapping: root::PGENERIC_MAPPING,
            ObjectCreation: root::BOOL,
            GrantedAccess: root::LPDWORD,
            AccessStatusList: root::LPDWORD,
            pfGenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectOpenAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            ObjectTypeName: *mut i8,
            ObjectName: *mut i8,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            GrantedAccess: u32,
            Privileges: root::PPRIVILEGE_SET,
            ObjectCreation: root::BOOL,
            AccessGranted: root::BOOL,
            GenerateOnClose: root::LPBOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectPrivilegeAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            ClientToken: root::HANDLE,
            DesiredAccess: u32,
            Privileges: root::PPRIVILEGE_SET,
            AccessGranted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectCloseAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            GenerateOnClose: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ObjectDeleteAuditAlarmA(
            SubsystemName: *const i8,
            HandleId: root::LPVOID,
            GenerateOnClose: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PrivilegedServiceAuditAlarmA(
            SubsystemName: *const i8,
            ServiceName: *const i8,
            ClientToken: root::HANDLE,
            Privileges: root::PPRIVILEGE_SET,
            AccessGranted: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddConditionalAce(
            pAcl: root::PACL,
            dwAceRevision: u32,
            AceFlags: u32,
            AceType: root::UCHAR,
            AccessMask: u32,
            pSid: root::PSID,
            ConditionStr: root::PWCHAR,
            ReturnLength: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFileSecurityA(
            lpFileName: *const i8,
            SecurityInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileSecurityA(
            lpFileName: *const i8,
            RequestedInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            nLength: u32,
            lpnLengthNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadDirectoryChangesW(
            hDirectory: root::HANDLE,
            lpBuffer: root::LPVOID,
            nBufferLength: u32,
            bWatchSubtree: root::BOOL,
            dwNotifyFilter: u32,
            lpBytesReturned: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
            lpCompletionRoutine: root::LPOVERLAPPED_COMPLETION_ROUTINE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadDirectoryChangesExW(
            hDirectory: root::HANDLE,
            lpBuffer: root::LPVOID,
            nBufferLength: u32,
            bWatchSubtree: root::BOOL,
            dwNotifyFilter: u32,
            lpBytesReturned: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
            lpCompletionRoutine: root::LPOVERLAPPED_COMPLETION_ROUTINE,
            ReadDirectoryNotifyInformationClass: root::READ_DIRECTORY_NOTIFY_INFORMATION_CLASS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MapViewOfFileExNuma(
            hFileMappingObject: root::HANDLE,
            dwDesiredAccess: u32,
            dwFileOffsetHigh: u32,
            dwFileOffsetLow: u32,
            dwNumberOfBytesToMap: root::SIZE_T,
            lpBaseAddress: root::LPVOID,
            nndPreferred: u32,
        ) -> root::LPVOID;
    }
    extern "C" {
        pub fn IsBadReadPtr(lp: *const ::std::os::raw::c_void, ucb: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn IsBadWritePtr(lp: root::LPVOID, ucb: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn IsBadHugeReadPtr(
            lp: *const ::std::os::raw::c_void,
            ucb: u64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsBadHugeWritePtr(lp: root::LPVOID, ucb: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn IsBadCodePtr(lpfn: root::FARPROC) -> root::BOOL;
    }
    extern "C" {
        pub fn IsBadStringPtrA(lpsz: *const i8, ucchMax: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn IsBadStringPtrW(lpsz: root::LPCWSTR, ucchMax: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountSidA(
            lpSystemName: *const i8,
            Sid: root::PSID,
            Name: *mut i8,
            cchName: root::LPDWORD,
            ReferencedDomainName: *mut i8,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountSidW(
            lpSystemName: root::LPCWSTR,
            Sid: root::PSID,
            Name: root::LPWSTR,
            cchName: root::LPDWORD,
            ReferencedDomainName: root::LPWSTR,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountNameA(
            lpSystemName: *const i8,
            lpAccountName: *const i8,
            Sid: root::PSID,
            cbSid: root::LPDWORD,
            ReferencedDomainName: *mut i8,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountNameW(
            lpSystemName: root::LPCWSTR,
            lpAccountName: root::LPCWSTR,
            Sid: root::PSID,
            cbSid: root::LPDWORD,
            ReferencedDomainName: root::LPWSTR,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountNameLocalA(
            lpAccountName: *const i8,
            Sid: root::PSID,
            cbSid: root::LPDWORD,
            ReferencedDomainName: *mut i8,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountNameLocalW(
            lpAccountName: root::LPCWSTR,
            Sid: root::PSID,
            cbSid: root::LPDWORD,
            ReferencedDomainName: root::LPWSTR,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountSidLocalA(
            Sid: root::PSID,
            Name: *mut i8,
            cchName: root::LPDWORD,
            ReferencedDomainName: *mut i8,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupAccountSidLocalW(
            Sid: root::PSID,
            Name: root::LPWSTR,
            cchName: root::LPDWORD,
            ReferencedDomainName: root::LPWSTR,
            cchReferencedDomainName: root::LPDWORD,
            peUse: root::PSID_NAME_USE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupPrivilegeValueA(
            lpSystemName: *const i8,
            lpName: *const i8,
            lpLuid: root::PLUID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupPrivilegeValueW(
            lpSystemName: root::LPCWSTR,
            lpName: root::LPCWSTR,
            lpLuid: root::PLUID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupPrivilegeNameA(
            lpSystemName: *const i8,
            lpLuid: root::PLUID,
            lpName: *mut i8,
            cchName: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupPrivilegeNameW(
            lpSystemName: root::LPCWSTR,
            lpLuid: root::PLUID,
            lpName: root::LPWSTR,
            cchName: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupPrivilegeDisplayNameA(
            lpSystemName: *const i8,
            lpName: *const i8,
            lpDisplayName: *mut i8,
            cchDisplayName: root::LPDWORD,
            lpLanguageId: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupPrivilegeDisplayNameW(
            lpSystemName: root::LPCWSTR,
            lpName: root::LPCWSTR,
            lpDisplayName: root::LPWSTR,
            cchDisplayName: root::LPDWORD,
            lpLanguageId: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BuildCommDCBA(lpDef: *const i8, lpDCB: root::LPDCB) -> root::BOOL;
    }
    extern "C" {
        pub fn BuildCommDCBW(lpDef: root::LPCWSTR, lpDCB: root::LPDCB) -> root::BOOL;
    }
    extern "C" {
        pub fn BuildCommDCBAndTimeoutsA(
            lpDef: *const i8,
            lpDCB: root::LPDCB,
            lpCommTimeouts: root::LPCOMMTIMEOUTS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BuildCommDCBAndTimeoutsW(
            lpDef: root::LPCWSTR,
            lpDCB: root::LPDCB,
            lpCommTimeouts: root::LPCOMMTIMEOUTS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CommConfigDialogA(
            lpszName: *const i8,
            hWnd: root::HWND,
            lpCC: root::LPCOMMCONFIG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CommConfigDialogW(
            lpszName: root::LPCWSTR,
            hWnd: root::HWND,
            lpCC: root::LPCOMMCONFIG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDefaultCommConfigA(
            lpszName: *const i8,
            lpCC: root::LPCOMMCONFIG,
            lpdwSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDefaultCommConfigW(
            lpszName: root::LPCWSTR,
            lpCC: root::LPCOMMCONFIG,
            lpdwSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDefaultCommConfigA(
            lpszName: *const i8,
            lpCC: root::LPCOMMCONFIG,
            dwSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDefaultCommConfigW(
            lpszName: root::LPCWSTR,
            lpCC: root::LPCOMMCONFIG,
            dwSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetComputerNameA(lpBuffer: *mut i8, nSize: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn GetComputerNameW(lpBuffer: root::LPWSTR, nSize: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn DnsHostnameToComputerNameA(
            Hostname: *const i8,
            ComputerName: *mut i8,
            nSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DnsHostnameToComputerNameW(
            Hostname: root::LPCWSTR,
            ComputerName: root::LPWSTR,
            nSize: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserNameA(lpBuffer: *mut i8, pcbBuffer: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserNameW(lpBuffer: root::LPWSTR, pcbBuffer: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn LogonUserA(
            lpszUsername: *const i8,
            lpszDomain: *const i8,
            lpszPassword: *const i8,
            dwLogonType: u32,
            dwLogonProvider: u32,
            phToken: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LogonUserW(
            lpszUsername: root::LPCWSTR,
            lpszDomain: root::LPCWSTR,
            lpszPassword: root::LPCWSTR,
            dwLogonType: u32,
            dwLogonProvider: u32,
            phToken: root::PHANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LogonUserExA(
            lpszUsername: *const i8,
            lpszDomain: *const i8,
            lpszPassword: *const i8,
            dwLogonType: u32,
            dwLogonProvider: u32,
            phToken: root::PHANDLE,
            ppLogonSid: *mut root::PSID,
            ppProfileBuffer: *mut root::PVOID,
            pdwProfileLength: root::LPDWORD,
            pQuotaLimits: root::PQUOTA_LIMITS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LogonUserExW(
            lpszUsername: root::LPCWSTR,
            lpszDomain: root::LPCWSTR,
            lpszPassword: root::LPCWSTR,
            dwLogonType: u32,
            dwLogonProvider: u32,
            phToken: root::PHANDLE,
            ppLogonSid: *mut root::PSID,
            ppProfileBuffer: *mut root::PVOID,
            pdwProfileLength: root::LPDWORD,
            pQuotaLimits: root::PQUOTA_LIMITS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateProcessWithLogonW(
            lpUsername: root::LPCWSTR,
            lpDomain: root::LPCWSTR,
            lpPassword: root::LPCWSTR,
            dwLogonFlags: u32,
            lpApplicationName: root::LPCWSTR,
            lpCommandLine: root::LPWSTR,
            dwCreationFlags: u32,
            lpEnvironment: root::LPVOID,
            lpCurrentDirectory: root::LPCWSTR,
            lpStartupInfo: root::LPSTARTUPINFOW,
            lpProcessInformation: root::LPPROCESS_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateProcessWithTokenW(
            hToken: root::HANDLE,
            dwLogonFlags: u32,
            lpApplicationName: root::LPCWSTR,
            lpCommandLine: root::LPWSTR,
            dwCreationFlags: u32,
            lpEnvironment: root::LPVOID,
            lpCurrentDirectory: root::LPCWSTR,
            lpStartupInfo: root::LPSTARTUPINFOW,
            lpProcessInformation: root::LPPROCESS_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsTokenUntrusted(TokenHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterWaitForSingleObject(
            phNewWaitObject: root::PHANDLE,
            hObject: root::HANDLE,
            Callback: root::WAITORTIMERCALLBACK,
            Context: root::PVOID,
            dwMilliseconds: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterWait(WaitHandle: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn BindIoCompletionCallback(
            FileHandle: root::HANDLE,
            Function: root::LPOVERLAPPED_COMPLETION_ROUTINE,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetTimerQueueTimer(
            TimerQueue: root::HANDLE,
            Callback: root::WAITORTIMERCALLBACK,
            Parameter: root::PVOID,
            DueTime: u32,
            Period: u32,
            PreferIo: root::BOOL,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CancelTimerQueueTimer(TimerQueue: root::HANDLE, Timer: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteTimerQueue(TimerQueue: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePrivateNamespaceA(
            lpPrivateNamespaceAttributes: root::LPSECURITY_ATTRIBUTES,
            lpBoundaryDescriptor: root::LPVOID,
            lpAliasPrefix: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenPrivateNamespaceA(
            lpBoundaryDescriptor: root::LPVOID,
            lpAliasPrefix: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateBoundaryDescriptorA(Name: *const i8, Flags: root::ULONG) -> root::HANDLE;
    }
    extern "C" {
        pub fn AddIntegrityLabelToBoundaryDescriptor(
            BoundaryDescriptor: *mut root::HANDLE,
            IntegrityLabel: root::PSID,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHW_PROFILE_INFOA {
        pub dwDockInfo: u32,
        pub szHwProfileGuid: [i8; 39usize],
        pub szHwProfileName: [i8; 80usize],
    }
    pub type HW_PROFILE_INFOA = root::tagHW_PROFILE_INFOA;
    pub type LPHW_PROFILE_INFOA = *mut root::tagHW_PROFILE_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHW_PROFILE_INFOW {
        pub dwDockInfo: u32,
        pub szHwProfileGuid: [u16; 39usize],
        pub szHwProfileName: [u16; 80usize],
    }
    pub type HW_PROFILE_INFOW = root::tagHW_PROFILE_INFOW;
    pub type LPHW_PROFILE_INFOW = *mut root::tagHW_PROFILE_INFOW;
    pub type HW_PROFILE_INFO = root::HW_PROFILE_INFOA;
    pub type LPHW_PROFILE_INFO = root::LPHW_PROFILE_INFOA;
    extern "C" {
        pub fn GetCurrentHwProfileA(lpHwProfileInfo: root::LPHW_PROFILE_INFOA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentHwProfileW(lpHwProfileInfo: root::LPHW_PROFILE_INFOW) -> root::BOOL;
    }
    extern "C" {
        pub fn VerifyVersionInfoA(
            lpVersionInformation: root::LPOSVERSIONINFOEXA,
            dwTypeMask: u32,
            dwlConditionMask: root::DWORDLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VerifyVersionInfoW(
            lpVersionInformation: root::LPOSVERSIONINFOEXW,
            dwTypeMask: u32,
            dwlConditionMask: root::DWORDLONG,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TIME_ZONE_INFORMATION {
        pub Bias: i32,
        pub StandardName: [u16; 32usize],
        pub StandardDate: root::SYSTEMTIME,
        pub StandardBias: i32,
        pub DaylightName: [u16; 32usize],
        pub DaylightDate: root::SYSTEMTIME,
        pub DaylightBias: i32,
    }
    pub type TIME_ZONE_INFORMATION = root::_TIME_ZONE_INFORMATION;
    pub type PTIME_ZONE_INFORMATION = *mut root::_TIME_ZONE_INFORMATION;
    pub type LPTIME_ZONE_INFORMATION = *mut root::_TIME_ZONE_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TIME_DYNAMIC_ZONE_INFORMATION {
        pub Bias: i32,
        pub StandardName: [u16; 32usize],
        pub StandardDate: root::SYSTEMTIME,
        pub StandardBias: i32,
        pub DaylightName: [u16; 32usize],
        pub DaylightDate: root::SYSTEMTIME,
        pub DaylightBias: i32,
        pub TimeZoneKeyName: [u16; 128usize],
        pub DynamicDaylightTimeDisabled: root::BOOLEAN,
    }
    pub type DYNAMIC_TIME_ZONE_INFORMATION = root::_TIME_DYNAMIC_ZONE_INFORMATION;
    pub type PDYNAMIC_TIME_ZONE_INFORMATION = *mut root::_TIME_DYNAMIC_ZONE_INFORMATION;
    extern "C" {
        pub fn SystemTimeToTzSpecificLocalTime(
            lpTimeZoneInformation: *const root::TIME_ZONE_INFORMATION,
            lpUniversalTime: *const root::SYSTEMTIME,
            lpLocalTime: root::LPSYSTEMTIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TzSpecificLocalTimeToSystemTime(
            lpTimeZoneInformation: *const root::TIME_ZONE_INFORMATION,
            lpLocalTime: *const root::SYSTEMTIME,
            lpUniversalTime: root::LPSYSTEMTIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FileTimeToSystemTime(
            lpFileTime: *const root::FILETIME,
            lpSystemTime: root::LPSYSTEMTIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SystemTimeToFileTime(
            lpSystemTime: *const root::SYSTEMTIME,
            lpFileTime: root::LPFILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTimeZoneInformation(
            lpTimeZoneInformation: root::LPTIME_ZONE_INFORMATION,
        ) -> u32;
    }
    extern "C" {
        pub fn SetTimeZoneInformation(
            lpTimeZoneInformation: *const root::TIME_ZONE_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDynamicTimeZoneInformation(
            lpTimeZoneInformation: *const root::DYNAMIC_TIME_ZONE_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDynamicTimeZoneInformation(
            pTimeZoneInformation: root::PDYNAMIC_TIME_ZONE_INFORMATION,
        ) -> u32;
    }
    extern "C" {
        pub fn GetTimeZoneInformationForYear(
            wYear: root::USHORT,
            pdtzi: root::PDYNAMIC_TIME_ZONE_INFORMATION,
            ptzi: root::LPTIME_ZONE_INFORMATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDynamicTimeZoneInformation(
            dwIndex: u32,
            lpTimeZoneInformation: root::PDYNAMIC_TIME_ZONE_INFORMATION,
        ) -> u32;
    }
    extern "C" {
        pub fn GetDynamicTimeZoneInformationEffectiveYears(
            lpTimeZoneInformation: root::PDYNAMIC_TIME_ZONE_INFORMATION,
            FirstYear: root::LPDWORD,
            LastYear: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn SystemTimeToTzSpecificLocalTimeEx(
            lpTimeZoneInformation: *const root::DYNAMIC_TIME_ZONE_INFORMATION,
            lpUniversalTime: *const root::SYSTEMTIME,
            lpLocalTime: root::LPSYSTEMTIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TzSpecificLocalTimeToSystemTimeEx(
            lpTimeZoneInformation: *const root::DYNAMIC_TIME_ZONE_INFORMATION,
            lpLocalTime: *const root::SYSTEMTIME,
            lpUniversalTime: root::LPSYSTEMTIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LocalFileTimeToLocalSystemTime(
            timeZoneInformation: *const root::TIME_ZONE_INFORMATION,
            localFileTime: *const root::FILETIME,
            localSystemTime: *mut root::SYSTEMTIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LocalSystemTimeToLocalFileTime(
            timeZoneInformation: *const root::TIME_ZONE_INFORMATION,
            localSystemTime: *const root::SYSTEMTIME,
            localFileTime: *mut root::FILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSystemPowerState(fSuspend: root::BOOL, fForce: root::BOOL) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SYSTEM_POWER_STATUS {
        pub ACLineStatus: u8,
        pub BatteryFlag: u8,
        pub BatteryLifePercent: u8,
        pub SystemStatusFlag: u8,
        pub BatteryLifeTime: u32,
        pub BatteryFullLifeTime: u32,
    }
    pub type SYSTEM_POWER_STATUS = root::_SYSTEM_POWER_STATUS;
    pub type LPSYSTEM_POWER_STATUS = *mut root::_SYSTEM_POWER_STATUS;
    extern "C" {
        pub fn GetSystemPowerStatus(lpSystemPowerStatus: root::LPSYSTEM_POWER_STATUS)
            -> root::BOOL;
    }
    extern "C" {
        pub fn MapUserPhysicalPagesScatter(
            VirtualAddresses: *mut root::PVOID,
            NumberOfPages: u64,
            PageArray: root::PULONG_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateJobObjectA(
            lpJobAttributes: root::LPSECURITY_ATTRIBUTES,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OpenJobObjectA(
            dwDesiredAccess: u32,
            bInheritHandle: root::BOOL,
            lpName: *const i8,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateJobSet(
            NumJob: root::ULONG,
            UserJobSet: root::PJOB_SET_ARRAY,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstVolumeA(
            lpszVolumeName: *mut i8,
            cchBufferLength: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindNextVolumeA(
            hFindVolume: root::HANDLE,
            lpszVolumeName: *mut i8,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindFirstVolumeMountPointA(
            lpszRootPathName: *const i8,
            lpszVolumeMountPoint: *mut i8,
            cchBufferLength: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindFirstVolumeMountPointW(
            lpszRootPathName: root::LPCWSTR,
            lpszVolumeMountPoint: root::LPWSTR,
            cchBufferLength: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindNextVolumeMountPointA(
            hFindVolumeMountPoint: root::HANDLE,
            lpszVolumeMountPoint: *mut i8,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindNextVolumeMountPointW(
            hFindVolumeMountPoint: root::HANDLE,
            lpszVolumeMountPoint: root::LPWSTR,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindVolumeMountPointClose(hFindVolumeMountPoint: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetVolumeMountPointA(
            lpszVolumeMountPoint: *const i8,
            lpszVolumeName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetVolumeMountPointW(
            lpszVolumeMountPoint: root::LPCWSTR,
            lpszVolumeName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteVolumeMountPointA(lpszVolumeMountPoint: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumeNameForVolumeMountPointA(
            lpszVolumeMountPoint: *const i8,
            lpszVolumeName: *mut i8,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumePathNameA(
            lpszFileName: *const i8,
            lpszVolumePathName: *mut i8,
            cchBufferLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetVolumePathNamesForVolumeNameA(
            lpszVolumeName: *const i8,
            lpszVolumePathNames: *mut i8,
            cchBufferLength: u32,
            lpcchReturnLength: root::PDWORD,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACTCTXA {
        pub cbSize: root::ULONG,
        pub dwFlags: u32,
        pub lpSource: *const i8,
        pub wProcessorArchitecture: root::USHORT,
        pub wLangId: root::LANGID,
        pub lpAssemblyDirectory: *const i8,
        pub lpResourceName: *const i8,
        pub lpApplicationName: *const i8,
        pub hModule: root::HMODULE,
    }
    pub type ACTCTXA = root::tagACTCTXA;
    pub type PACTCTXA = *mut root::tagACTCTXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACTCTXW {
        pub cbSize: root::ULONG,
        pub dwFlags: u32,
        pub lpSource: root::LPCWSTR,
        pub wProcessorArchitecture: root::USHORT,
        pub wLangId: root::LANGID,
        pub lpAssemblyDirectory: root::LPCWSTR,
        pub lpResourceName: root::LPCWSTR,
        pub lpApplicationName: root::LPCWSTR,
        pub hModule: root::HMODULE,
    }
    pub type ACTCTXW = root::tagACTCTXW;
    pub type PACTCTXW = *mut root::tagACTCTXW;
    pub type ACTCTX = root::ACTCTXA;
    pub type PACTCTX = root::PACTCTXA;
    pub type PCACTCTXA = *const root::ACTCTXA;
    pub type PCACTCTXW = *const root::ACTCTXW;
    pub type PCACTCTX = root::PCACTCTXA;
    extern "C" {
        pub fn CreateActCtxA(pActCtx: root::PCACTCTXA) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateActCtxW(pActCtx: root::PCACTCTXW) -> root::HANDLE;
    }
    extern "C" {
        pub fn AddRefActCtx(hActCtx: root::HANDLE);
    }
    extern "C" {
        pub fn ReleaseActCtx(hActCtx: root::HANDLE);
    }
    extern "C" {
        pub fn ZombifyActCtx(hActCtx: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ActivateActCtx(hActCtx: root::HANDLE, lpCookie: *mut u64) -> root::BOOL;
    }
    extern "C" {
        pub fn DeactivateActCtx(dwFlags: u32, ulCookie: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCurrentActCtx(lphActCtx: *mut root::HANDLE) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACTCTX_SECTION_KEYED_DATA_2600 {
        pub cbSize: root::ULONG,
        pub ulDataFormatVersion: root::ULONG,
        pub lpData: root::PVOID,
        pub ulLength: root::ULONG,
        pub lpSectionGlobalData: root::PVOID,
        pub ulSectionGlobalDataLength: root::ULONG,
        pub lpSectionBase: root::PVOID,
        pub ulSectionTotalLength: root::ULONG,
        pub hActCtx: root::HANDLE,
        pub ulAssemblyRosterIndex: root::ULONG,
    }
    pub type ACTCTX_SECTION_KEYED_DATA_2600 = root::tagACTCTX_SECTION_KEYED_DATA_2600;
    pub type PACTCTX_SECTION_KEYED_DATA_2600 = *mut root::tagACTCTX_SECTION_KEYED_DATA_2600;
    pub type PCACTCTX_SECTION_KEYED_DATA_2600 = *const root::ACTCTX_SECTION_KEYED_DATA_2600;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
        pub lpInformation: root::PVOID,
        pub lpSectionBase: root::PVOID,
        pub ulSectionLength: root::ULONG,
        pub lpSectionGlobalDataBase: root::PVOID,
        pub ulSectionGlobalDataLength: root::ULONG,
    }
    pub type ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA =
        root::tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
    pub type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA =
        *mut root::tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
    pub type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA =
        *const root::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACTCTX_SECTION_KEYED_DATA {
        pub cbSize: root::ULONG,
        pub ulDataFormatVersion: root::ULONG,
        pub lpData: root::PVOID,
        pub ulLength: root::ULONG,
        pub lpSectionGlobalData: root::PVOID,
        pub ulSectionGlobalDataLength: root::ULONG,
        pub lpSectionBase: root::PVOID,
        pub ulSectionTotalLength: root::ULONG,
        pub hActCtx: root::HANDLE,
        pub ulAssemblyRosterIndex: root::ULONG,
        pub ulFlags: root::ULONG,
        pub AssemblyMetadata: root::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
    }
    pub type ACTCTX_SECTION_KEYED_DATA = root::tagACTCTX_SECTION_KEYED_DATA;
    pub type PACTCTX_SECTION_KEYED_DATA = *mut root::tagACTCTX_SECTION_KEYED_DATA;
    pub type PCACTCTX_SECTION_KEYED_DATA = *const root::ACTCTX_SECTION_KEYED_DATA;
    extern "C" {
        pub fn FindActCtxSectionStringA(
            dwFlags: u32,
            lpExtensionGuid: *const root::GUID,
            ulSectionId: root::ULONG,
            lpStringToFind: *const i8,
            ReturnedData: root::PACTCTX_SECTION_KEYED_DATA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindActCtxSectionStringW(
            dwFlags: u32,
            lpExtensionGuid: *const root::GUID,
            ulSectionId: root::ULONG,
            lpStringToFind: root::LPCWSTR,
            ReturnedData: root::PACTCTX_SECTION_KEYED_DATA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindActCtxSectionGuid(
            dwFlags: u32,
            lpExtensionGuid: *const root::GUID,
            ulSectionId: root::ULONG,
            lpGuidToFind: *const root::GUID,
            ReturnedData: root::PACTCTX_SECTION_KEYED_DATA,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
        pub hActCtx: root::HANDLE,
        pub dwFlags: u32,
    }
    pub type ACTIVATION_CONTEXT_BASIC_INFORMATION = root::_ACTIVATION_CONTEXT_BASIC_INFORMATION;
    pub type PACTIVATION_CONTEXT_BASIC_INFORMATION =
        *mut root::_ACTIVATION_CONTEXT_BASIC_INFORMATION;
    pub type PCACTIVATION_CONTEXT_BASIC_INFORMATION =
        *const root::_ACTIVATION_CONTEXT_BASIC_INFORMATION;
    extern "C" {
        pub fn QueryActCtxW(
            dwFlags: u32,
            hActCtx: root::HANDLE,
            pvSubInstance: root::PVOID,
            ulInfoClass: root::ULONG,
            pvBuffer: root::PVOID,
            cbBuffer: root::SIZE_T,
            pcbWrittenOrRequired: *mut root::SIZE_T,
        ) -> root::BOOL;
    }
    pub type PQUERYACTCTXW_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            dwFlags: u32,
            hActCtx: root::HANDLE,
            pvSubInstance: root::PVOID,
            ulInfoClass: root::ULONG,
            pvBuffer: root::PVOID,
            cbBuffer: root::SIZE_T,
            pcbWrittenOrRequired: *mut root::SIZE_T,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn WTSGetActiveConsoleSessionId() -> u32;
    }
    extern "C" {
        pub fn WTSGetServiceSessionId() -> u32;
    }
    extern "C" {
        pub fn WTSIsServerContainer() -> root::BOOLEAN;
    }
    extern "C" {
        pub fn GetActiveProcessorGroupCount() -> u16;
    }
    extern "C" {
        pub fn GetMaximumProcessorGroupCount() -> u16;
    }
    extern "C" {
        pub fn GetActiveProcessorCount(GroupNumber: u16) -> u32;
    }
    extern "C" {
        pub fn GetMaximumProcessorCount(GroupNumber: u16) -> u32;
    }
    extern "C" {
        pub fn GetNumaProcessorNode(Processor: root::UCHAR, NodeNumber: root::PUCHAR)
            -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaNodeNumberFromHandle(
            hFile: root::HANDLE,
            NodeNumber: root::PUSHORT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaProcessorNodeEx(
            Processor: root::PPROCESSOR_NUMBER,
            NodeNumber: root::PUSHORT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaNodeProcessorMask(
            Node: root::UCHAR,
            ProcessorMask: root::PULONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaAvailableMemoryNode(
            Node: root::UCHAR,
            AvailableBytes: root::PULONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaAvailableMemoryNodeEx(
            Node: root::USHORT,
            AvailableBytes: root::PULONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumaProximityNode(
            ProximityId: root::ULONG,
            NodeNumber: root::PUCHAR,
        ) -> root::BOOL;
    }
    pub type APPLICATION_RECOVERY_CALLBACK =
        ::std::option::Option<unsafe extern "C" fn(pvParameter: root::PVOID) -> u32>;
    extern "C" {
        pub fn RegisterApplicationRecoveryCallback(
            pRecoveyCallback: root::APPLICATION_RECOVERY_CALLBACK,
            pvParameter: root::PVOID,
            dwPingInterval: u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UnregisterApplicationRecoveryCallback() -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterApplicationRestart(
            pwzCommandline: *const u16,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UnregisterApplicationRestart() -> root::HRESULT;
    }
    extern "C" {
        pub fn GetApplicationRecoveryCallback(
            hProcess: root::HANDLE,
            pRecoveryCallback: *mut root::APPLICATION_RECOVERY_CALLBACK,
            ppvParameter: *mut root::PVOID,
            pdwPingInterval: root::PDWORD,
            pdwFlags: root::PDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetApplicationRestartSettings(
            hProcess: root::HANDLE,
            pwzCommandline: *mut u16,
            pcchSize: root::PDWORD,
            pdwFlags: root::PDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ApplicationRecoveryInProgress(pbCancelled: root::PBOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn ApplicationRecoveryFinished(bSuccess: root::BOOL);
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_BASIC_INFO {
        pub CreationTime: root::LARGE_INTEGER,
        pub LastAccessTime: root::LARGE_INTEGER,
        pub LastWriteTime: root::LARGE_INTEGER,
        pub ChangeTime: root::LARGE_INTEGER,
        pub FileAttributes: u32,
    }
    pub type FILE_BASIC_INFO = root::_FILE_BASIC_INFO;
    pub type PFILE_BASIC_INFO = *mut root::_FILE_BASIC_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_STANDARD_INFO {
        pub AllocationSize: root::LARGE_INTEGER,
        pub EndOfFile: root::LARGE_INTEGER,
        pub NumberOfLinks: u32,
        pub DeletePending: root::BOOLEAN,
        pub Directory: root::BOOLEAN,
    }
    pub type FILE_STANDARD_INFO = root::_FILE_STANDARD_INFO;
    pub type PFILE_STANDARD_INFO = *mut root::_FILE_STANDARD_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_NAME_INFO {
        pub FileNameLength: u32,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_NAME_INFO = root::_FILE_NAME_INFO;
    pub type PFILE_NAME_INFO = *mut root::_FILE_NAME_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_CASE_SENSITIVE_INFO {
        pub Flags: root::ULONG,
    }
    pub type FILE_CASE_SENSITIVE_INFO = root::_FILE_CASE_SENSITIVE_INFO;
    pub type PFILE_CASE_SENSITIVE_INFO = *mut root::_FILE_CASE_SENSITIVE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_RENAME_INFO {
        pub __bindgen_anon_1: root::_FILE_RENAME_INFO__bindgen_ty_1,
        pub RootDirectory: root::HANDLE,
        pub FileNameLength: u32,
        pub FileName: [u16; 1usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _FILE_RENAME_INFO__bindgen_ty_1 {
        pub ReplaceIfExists: root::BOOLEAN,
        pub Flags: u32,
    }
    pub type FILE_RENAME_INFO = root::_FILE_RENAME_INFO;
    pub type PFILE_RENAME_INFO = *mut root::_FILE_RENAME_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_ALLOCATION_INFO {
        pub AllocationSize: root::LARGE_INTEGER,
    }
    pub type FILE_ALLOCATION_INFO = root::_FILE_ALLOCATION_INFO;
    pub type PFILE_ALLOCATION_INFO = *mut root::_FILE_ALLOCATION_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_END_OF_FILE_INFO {
        pub EndOfFile: root::LARGE_INTEGER,
    }
    pub type FILE_END_OF_FILE_INFO = root::_FILE_END_OF_FILE_INFO;
    pub type PFILE_END_OF_FILE_INFO = *mut root::_FILE_END_OF_FILE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_STREAM_INFO {
        pub NextEntryOffset: u32,
        pub StreamNameLength: u32,
        pub StreamSize: root::LARGE_INTEGER,
        pub StreamAllocationSize: root::LARGE_INTEGER,
        pub StreamName: [u16; 1usize],
    }
    pub type FILE_STREAM_INFO = root::_FILE_STREAM_INFO;
    pub type PFILE_STREAM_INFO = *mut root::_FILE_STREAM_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_COMPRESSION_INFO {
        pub CompressedFileSize: root::LARGE_INTEGER,
        pub CompressionFormat: u16,
        pub CompressionUnitShift: root::UCHAR,
        pub ChunkShift: root::UCHAR,
        pub ClusterShift: root::UCHAR,
        pub Reserved: [root::UCHAR; 3usize],
    }
    pub type FILE_COMPRESSION_INFO = root::_FILE_COMPRESSION_INFO;
    pub type PFILE_COMPRESSION_INFO = *mut root::_FILE_COMPRESSION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_ATTRIBUTE_TAG_INFO {
        pub FileAttributes: u32,
        pub ReparseTag: u32,
    }
    pub type FILE_ATTRIBUTE_TAG_INFO = root::_FILE_ATTRIBUTE_TAG_INFO;
    pub type PFILE_ATTRIBUTE_TAG_INFO = *mut root::_FILE_ATTRIBUTE_TAG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_DISPOSITION_INFO {
        pub DeleteFileA: root::BOOLEAN,
    }
    pub type FILE_DISPOSITION_INFO = root::_FILE_DISPOSITION_INFO;
    pub type PFILE_DISPOSITION_INFO = *mut root::_FILE_DISPOSITION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_DISPOSITION_INFO_EX {
        pub Flags: u32,
    }
    pub type FILE_DISPOSITION_INFO_EX = root::_FILE_DISPOSITION_INFO_EX;
    pub type PFILE_DISPOSITION_INFO_EX = *mut root::_FILE_DISPOSITION_INFO_EX;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_ID_BOTH_DIR_INFO {
        pub NextEntryOffset: u32,
        pub FileIndex: u32,
        pub CreationTime: root::LARGE_INTEGER,
        pub LastAccessTime: root::LARGE_INTEGER,
        pub LastWriteTime: root::LARGE_INTEGER,
        pub ChangeTime: root::LARGE_INTEGER,
        pub EndOfFile: root::LARGE_INTEGER,
        pub AllocationSize: root::LARGE_INTEGER,
        pub FileAttributes: u32,
        pub FileNameLength: u32,
        pub EaSize: u32,
        pub ShortNameLength: root::CCHAR,
        pub ShortName: [u16; 12usize],
        pub FileId: root::LARGE_INTEGER,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_ID_BOTH_DIR_INFO = root::_FILE_ID_BOTH_DIR_INFO;
    pub type PFILE_ID_BOTH_DIR_INFO = *mut root::_FILE_ID_BOTH_DIR_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_FULL_DIR_INFO {
        pub NextEntryOffset: root::ULONG,
        pub FileIndex: root::ULONG,
        pub CreationTime: root::LARGE_INTEGER,
        pub LastAccessTime: root::LARGE_INTEGER,
        pub LastWriteTime: root::LARGE_INTEGER,
        pub ChangeTime: root::LARGE_INTEGER,
        pub EndOfFile: root::LARGE_INTEGER,
        pub AllocationSize: root::LARGE_INTEGER,
        pub FileAttributes: root::ULONG,
        pub FileNameLength: root::ULONG,
        pub EaSize: root::ULONG,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_FULL_DIR_INFO = root::_FILE_FULL_DIR_INFO;
    pub type PFILE_FULL_DIR_INFO = *mut root::_FILE_FULL_DIR_INFO;
    pub const _PRIORITY_HINT_IoPriorityHintVeryLow: root::_PRIORITY_HINT = 0;
    pub const _PRIORITY_HINT_IoPriorityHintLow: root::_PRIORITY_HINT = 1;
    pub const _PRIORITY_HINT_IoPriorityHintNormal: root::_PRIORITY_HINT = 2;
    pub const _PRIORITY_HINT_MaximumIoPriorityHintType: root::_PRIORITY_HINT = 3;
    pub type _PRIORITY_HINT = i32;
    pub use self::super::root::_PRIORITY_HINT as PRIORITY_HINT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_IO_PRIORITY_HINT_INFO {
        pub PriorityHint: root::PRIORITY_HINT,
    }
    pub type FILE_IO_PRIORITY_HINT_INFO = root::_FILE_IO_PRIORITY_HINT_INFO;
    pub type PFILE_IO_PRIORITY_HINT_INFO = *mut root::_FILE_IO_PRIORITY_HINT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_ALIGNMENT_INFO {
        pub AlignmentRequirement: root::ULONG,
    }
    pub type FILE_ALIGNMENT_INFO = root::_FILE_ALIGNMENT_INFO;
    pub type PFILE_ALIGNMENT_INFO = *mut root::_FILE_ALIGNMENT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_STORAGE_INFO {
        pub LogicalBytesPerSector: root::ULONG,
        pub PhysicalBytesPerSectorForAtomicity: root::ULONG,
        pub PhysicalBytesPerSectorForPerformance: root::ULONG,
        pub FileSystemEffectivePhysicalBytesPerSectorForAtomicity: root::ULONG,
        pub Flags: root::ULONG,
        pub ByteOffsetForSectorAlignment: root::ULONG,
        pub ByteOffsetForPartitionAlignment: root::ULONG,
    }
    pub type FILE_STORAGE_INFO = root::_FILE_STORAGE_INFO;
    pub type PFILE_STORAGE_INFO = *mut root::_FILE_STORAGE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_ID_INFO {
        pub VolumeSerialNumber: root::ULONGLONG,
        pub FileId: root::FILE_ID_128,
    }
    pub type FILE_ID_INFO = root::_FILE_ID_INFO;
    pub type PFILE_ID_INFO = *mut root::_FILE_ID_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_ID_EXTD_DIR_INFO {
        pub NextEntryOffset: root::ULONG,
        pub FileIndex: root::ULONG,
        pub CreationTime: root::LARGE_INTEGER,
        pub LastAccessTime: root::LARGE_INTEGER,
        pub LastWriteTime: root::LARGE_INTEGER,
        pub ChangeTime: root::LARGE_INTEGER,
        pub EndOfFile: root::LARGE_INTEGER,
        pub AllocationSize: root::LARGE_INTEGER,
        pub FileAttributes: root::ULONG,
        pub FileNameLength: root::ULONG,
        pub EaSize: root::ULONG,
        pub ReparsePointTag: root::ULONG,
        pub FileId: root::FILE_ID_128,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_ID_EXTD_DIR_INFO = root::_FILE_ID_EXTD_DIR_INFO;
    pub type PFILE_ID_EXTD_DIR_INFO = *mut root::_FILE_ID_EXTD_DIR_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_REMOTE_PROTOCOL_INFO {
        pub StructureVersion: root::USHORT,
        pub StructureSize: root::USHORT,
        pub Protocol: root::ULONG,
        pub ProtocolMajorVersion: root::USHORT,
        pub ProtocolMinorVersion: root::USHORT,
        pub ProtocolRevision: root::USHORT,
        pub Reserved: root::USHORT,
        pub Flags: root::ULONG,
        pub GenericReserved: root::_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1,
        pub ProtocolSpecific: root::_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1 {
        pub Reserved: [root::ULONG; 8usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2 {
        pub Smb2: root::_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1,
        pub Reserved: [root::ULONG; 16usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1 {
        pub Server: root::_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
        pub Share: root::_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
        pub Capabilities: root::ULONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
        pub Capabilities: root::ULONG,
        pub CachingFlags: root::ULONG,
    }
    pub type FILE_REMOTE_PROTOCOL_INFO = root::_FILE_REMOTE_PROTOCOL_INFO;
    pub type PFILE_REMOTE_PROTOCOL_INFO = *mut root::_FILE_REMOTE_PROTOCOL_INFO;
    extern "C" {
        pub fn GetFileInformationByHandleEx(
            hFile: root::HANDLE,
            FileInformationClass: root::FILE_INFO_BY_HANDLE_CLASS,
            lpFileInformation: root::LPVOID,
            dwBufferSize: u32,
        ) -> root::BOOL;
    }
    pub const _FILE_ID_TYPE_FileIdType: root::_FILE_ID_TYPE = 0;
    pub const _FILE_ID_TYPE_ObjectIdType: root::_FILE_ID_TYPE = 1;
    pub const _FILE_ID_TYPE_ExtendedFileIdType: root::_FILE_ID_TYPE = 2;
    pub const _FILE_ID_TYPE_MaximumFileIdType: root::_FILE_ID_TYPE = 3;
    pub type _FILE_ID_TYPE = i32;
    pub use self::super::root::_FILE_ID_TYPE as FILE_ID_TYPE;
    pub type PFILE_ID_TYPE = *mut root::_FILE_ID_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct FILE_ID_DESCRIPTOR {
        pub dwSize: u32,
        pub Type: root::FILE_ID_TYPE,
        pub __bindgen_anon_1: root::FILE_ID_DESCRIPTOR__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union FILE_ID_DESCRIPTOR__bindgen_ty_1 {
        pub FileId: root::LARGE_INTEGER,
        pub ObjectId: root::GUID,
        pub ExtendedFileId: root::FILE_ID_128,
    }
    pub type LPFILE_ID_DESCRIPTOR = *mut root::FILE_ID_DESCRIPTOR;
    extern "C" {
        pub fn OpenFileById(
            hVolumeHint: root::HANDLE,
            lpFileId: root::LPFILE_ID_DESCRIPTOR,
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            dwFlagsAndAttributes: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CreateSymbolicLinkA(
            lpSymlinkFileName: *const i8,
            lpTargetFileName: *const i8,
            dwFlags: u32,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn CreateSymbolicLinkW(
            lpSymlinkFileName: root::LPCWSTR,
            lpTargetFileName: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn QueryActCtxSettingsW(
            dwFlags: u32,
            hActCtx: root::HANDLE,
            settingsNameSpace: *const u16,
            settingName: *const u16,
            pvBuffer: *mut u16,
            dwBuffer: root::SIZE_T,
            pdwWrittenOrRequired: *mut root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateSymbolicLinkTransactedA(
            lpSymlinkFileName: *const i8,
            lpTargetFileName: *const i8,
            dwFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn CreateSymbolicLinkTransactedW(
            lpSymlinkFileName: root::LPCWSTR,
            lpTargetFileName: root::LPCWSTR,
            dwFlags: u32,
            hTransaction: root::HANDLE,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub fn ReplacePartitionUnit(
            TargetPartition: *mut u16,
            SparePartition: *mut u16,
            Flags: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddSecureMemoryCacheCallback(
            pfnCallBack: root::PSECURE_MEMORY_CACHE_CALLBACK,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveSecureMemoryCacheCallback(
            pfnCallBack: root::PSECURE_MEMORY_CACHE_CALLBACK,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyContext(
            Destination: root::PCONTEXT,
            ContextFlags: u32,
            Source: root::PCONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeContext(
            Buffer: root::PVOID,
            ContextFlags: u32,
            Context: *mut root::PCONTEXT,
            ContextLength: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitializeContext2(
            Buffer: root::PVOID,
            ContextFlags: u32,
            Context: *mut root::PCONTEXT,
            ContextLength: root::PDWORD,
            XStateCompactionMask: root::ULONG64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetEnabledXStateFeatures() -> root::DWORD64;
    }
    extern "C" {
        pub fn GetXStateFeaturesMask(
            Context: root::PCONTEXT,
            FeatureMask: root::PDWORD64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LocateXStateFeature(
            Context: root::PCONTEXT,
            FeatureId: u32,
            Length: root::PDWORD,
        ) -> root::PVOID;
    }
    extern "C" {
        pub fn SetXStateFeaturesMask(
            Context: root::PCONTEXT,
            FeatureMask: root::DWORD64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnableThreadProfiling(
            ThreadHandle: root::HANDLE,
            Flags: u32,
            HardwareCounters: root::DWORD64,
            PerformanceDataHandle: *mut root::HANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn DisableThreadProfiling(PerformanceDataHandle: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn QueryThreadProfiling(
            ThreadHandle: root::HANDLE,
            Enabled: root::PBOOLEAN,
        ) -> u32;
    }
    extern "C" {
        pub fn ReadThreadProfilingData(
            PerformanceDataHandle: root::HANDLE,
            Flags: u32,
            PerformanceData: root::PPERFORMANCE_DATA,
        ) -> u32;
    }
    extern "C" {
        pub fn RaiseCustomSystemEventTrigger(
            CustomSystemEventTriggerConfig: root::PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRAWPATRECT {
        pub ptPosition: root::POINT,
        pub ptSize: root::POINT,
        pub wStyle: u16,
        pub wPattern: u16,
    }
    pub type DRAWPATRECT = root::_DRAWPATRECT;
    pub type PDRAWPATRECT = *mut root::_DRAWPATRECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PSINJECTDATA {
        pub DataBytes: u32,
        pub InjectionPoint: u16,
        pub PageNumber: u16,
    }
    pub type PSINJECTDATA = root::_PSINJECTDATA;
    pub type PPSINJECTDATA = *mut root::_PSINJECTDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PSFEATURE_OUTPUT {
        pub bPageIndependent: root::BOOL,
        pub bSetPageDevice: root::BOOL,
    }
    pub type PSFEATURE_OUTPUT = root::_PSFEATURE_OUTPUT;
    pub type PPSFEATURE_OUTPUT = *mut root::_PSFEATURE_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PSFEATURE_CUSTPAPER {
        pub lOrientation: i32,
        pub lWidth: i32,
        pub lHeight: i32,
        pub lWidthOffset: i32,
        pub lHeightOffset: i32,
    }
    pub type PSFEATURE_CUSTPAPER = root::_PSFEATURE_CUSTPAPER;
    pub type PPSFEATURE_CUSTPAPER = *mut root::_PSFEATURE_CUSTPAPER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagXFORM {
        pub eM11: root::FLOAT,
        pub eM12: root::FLOAT,
        pub eM21: root::FLOAT,
        pub eM22: root::FLOAT,
        pub eDx: root::FLOAT,
        pub eDy: root::FLOAT,
    }
    pub type XFORM = root::tagXFORM;
    pub type PXFORM = *mut root::tagXFORM;
    pub type LPXFORM = *mut root::tagXFORM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAP {
        pub bmType: i32,
        pub bmWidth: i32,
        pub bmHeight: i32,
        pub bmWidthBytes: i32,
        pub bmPlanes: u16,
        pub bmBitsPixel: u16,
        pub bmBits: root::LPVOID,
    }
    pub type BITMAP = root::tagBITMAP;
    pub type PBITMAP = *mut root::tagBITMAP;
    pub type NPBITMAP = *mut root::tagBITMAP;
    pub type LPBITMAP = *mut root::tagBITMAP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRGBTRIPLE {
        pub rgbtBlue: u8,
        pub rgbtGreen: u8,
        pub rgbtRed: u8,
    }
    pub type RGBTRIPLE = root::tagRGBTRIPLE;
    pub type PRGBTRIPLE = *mut root::tagRGBTRIPLE;
    pub type NPRGBTRIPLE = *mut root::tagRGBTRIPLE;
    pub type LPRGBTRIPLE = *mut root::tagRGBTRIPLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRGBQUAD {
        pub rgbBlue: u8,
        pub rgbGreen: u8,
        pub rgbRed: u8,
        pub rgbReserved: u8,
    }
    pub type RGBQUAD = root::tagRGBQUAD;
    pub type LPRGBQUAD = *mut root::RGBQUAD;
    pub type LCSCSTYPE = i32;
    pub type LCSGAMUTMATCH = i32;
    pub type FXPT16DOT16 = i32;
    pub type LPFXPT16DOT16 = *mut i32;
    pub type FXPT2DOT30 = i32;
    pub type LPFXPT2DOT30 = *mut i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCIEXYZ {
        pub ciexyzX: root::FXPT2DOT30,
        pub ciexyzY: root::FXPT2DOT30,
        pub ciexyzZ: root::FXPT2DOT30,
    }
    pub type CIEXYZ = root::tagCIEXYZ;
    pub type LPCIEXYZ = *mut root::CIEXYZ;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagICEXYZTRIPLE {
        pub ciexyzRed: root::CIEXYZ,
        pub ciexyzGreen: root::CIEXYZ,
        pub ciexyzBlue: root::CIEXYZ,
    }
    pub type CIEXYZTRIPLE = root::tagICEXYZTRIPLE;
    pub type LPCIEXYZTRIPLE = *mut root::CIEXYZTRIPLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGCOLORSPACEA {
        pub lcsSignature: u32,
        pub lcsVersion: u32,
        pub lcsSize: u32,
        pub lcsCSType: root::LCSCSTYPE,
        pub lcsIntent: root::LCSGAMUTMATCH,
        pub lcsEndpoints: root::CIEXYZTRIPLE,
        pub lcsGammaRed: u32,
        pub lcsGammaGreen: u32,
        pub lcsGammaBlue: u32,
        pub lcsFilename: [i8; 260usize],
    }
    pub type LOGCOLORSPACEA = root::tagLOGCOLORSPACEA;
    pub type LPLOGCOLORSPACEA = *mut root::tagLOGCOLORSPACEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGCOLORSPACEW {
        pub lcsSignature: u32,
        pub lcsVersion: u32,
        pub lcsSize: u32,
        pub lcsCSType: root::LCSCSTYPE,
        pub lcsIntent: root::LCSGAMUTMATCH,
        pub lcsEndpoints: root::CIEXYZTRIPLE,
        pub lcsGammaRed: u32,
        pub lcsGammaGreen: u32,
        pub lcsGammaBlue: u32,
        pub lcsFilename: [u16; 260usize],
    }
    pub type LOGCOLORSPACEW = root::tagLOGCOLORSPACEW;
    pub type LPLOGCOLORSPACEW = *mut root::tagLOGCOLORSPACEW;
    pub type LOGCOLORSPACE = root::LOGCOLORSPACEA;
    pub type LPLOGCOLORSPACE = root::LPLOGCOLORSPACEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAPCOREHEADER {
        pub bcSize: u32,
        pub bcWidth: u16,
        pub bcHeight: u16,
        pub bcPlanes: u16,
        pub bcBitCount: u16,
    }
    pub type BITMAPCOREHEADER = root::tagBITMAPCOREHEADER;
    pub type LPBITMAPCOREHEADER = *mut root::tagBITMAPCOREHEADER;
    pub type PBITMAPCOREHEADER = *mut root::tagBITMAPCOREHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAPINFOHEADER {
        pub biSize: u32,
        pub biWidth: i32,
        pub biHeight: i32,
        pub biPlanes: u16,
        pub biBitCount: u16,
        pub biCompression: u32,
        pub biSizeImage: u32,
        pub biXPelsPerMeter: i32,
        pub biYPelsPerMeter: i32,
        pub biClrUsed: u32,
        pub biClrImportant: u32,
    }
    pub type BITMAPINFOHEADER = root::tagBITMAPINFOHEADER;
    pub type LPBITMAPINFOHEADER = *mut root::tagBITMAPINFOHEADER;
    pub type PBITMAPINFOHEADER = *mut root::tagBITMAPINFOHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct BITMAPV4HEADER {
        pub bV4Size: u32,
        pub bV4Width: i32,
        pub bV4Height: i32,
        pub bV4Planes: u16,
        pub bV4BitCount: u16,
        pub bV4V4Compression: u32,
        pub bV4SizeImage: u32,
        pub bV4XPelsPerMeter: i32,
        pub bV4YPelsPerMeter: i32,
        pub bV4ClrUsed: u32,
        pub bV4ClrImportant: u32,
        pub bV4RedMask: u32,
        pub bV4GreenMask: u32,
        pub bV4BlueMask: u32,
        pub bV4AlphaMask: u32,
        pub bV4CSType: u32,
        pub bV4Endpoints: root::CIEXYZTRIPLE,
        pub bV4GammaRed: u32,
        pub bV4GammaGreen: u32,
        pub bV4GammaBlue: u32,
    }
    pub type LPBITMAPV4HEADER = *mut root::BITMAPV4HEADER;
    pub type PBITMAPV4HEADER = *mut root::BITMAPV4HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct BITMAPV5HEADER {
        pub bV5Size: u32,
        pub bV5Width: i32,
        pub bV5Height: i32,
        pub bV5Planes: u16,
        pub bV5BitCount: u16,
        pub bV5Compression: u32,
        pub bV5SizeImage: u32,
        pub bV5XPelsPerMeter: i32,
        pub bV5YPelsPerMeter: i32,
        pub bV5ClrUsed: u32,
        pub bV5ClrImportant: u32,
        pub bV5RedMask: u32,
        pub bV5GreenMask: u32,
        pub bV5BlueMask: u32,
        pub bV5AlphaMask: u32,
        pub bV5CSType: u32,
        pub bV5Endpoints: root::CIEXYZTRIPLE,
        pub bV5GammaRed: u32,
        pub bV5GammaGreen: u32,
        pub bV5GammaBlue: u32,
        pub bV5Intent: u32,
        pub bV5ProfileData: u32,
        pub bV5ProfileSize: u32,
        pub bV5Reserved: u32,
    }
    pub type LPBITMAPV5HEADER = *mut root::BITMAPV5HEADER;
    pub type PBITMAPV5HEADER = *mut root::BITMAPV5HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAPINFO {
        pub bmiHeader: root::BITMAPINFOHEADER,
        pub bmiColors: [root::RGBQUAD; 1usize],
    }
    pub type BITMAPINFO = root::tagBITMAPINFO;
    pub type LPBITMAPINFO = *mut root::tagBITMAPINFO;
    pub type PBITMAPINFO = *mut root::tagBITMAPINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAPCOREINFO {
        pub bmciHeader: root::BITMAPCOREHEADER,
        pub bmciColors: [root::RGBTRIPLE; 1usize],
    }
    pub type BITMAPCOREINFO = root::tagBITMAPCOREINFO;
    pub type LPBITMAPCOREINFO = *mut root::tagBITMAPCOREINFO;
    pub type PBITMAPCOREINFO = *mut root::tagBITMAPCOREINFO;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAPFILEHEADER {
        pub bfType: u16,
        pub bfSize: u32,
        pub bfReserved1: u16,
        pub bfReserved2: u16,
        pub bfOffBits: u32,
    }
    pub type BITMAPFILEHEADER = root::tagBITMAPFILEHEADER;
    pub type LPBITMAPFILEHEADER = *mut root::tagBITMAPFILEHEADER;
    pub type PBITMAPFILEHEADER = *mut root::tagBITMAPFILEHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagFONTSIGNATURE {
        pub fsUsb: [u32; 4usize],
        pub fsCsb: [u32; 2usize],
    }
    pub type FONTSIGNATURE = root::tagFONTSIGNATURE;
    pub type PFONTSIGNATURE = *mut root::tagFONTSIGNATURE;
    pub type LPFONTSIGNATURE = *mut root::tagFONTSIGNATURE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCHARSETINFO {
        pub ciCharset: root::UINT,
        pub ciACP: root::UINT,
        pub fs: root::FONTSIGNATURE,
    }
    pub type CHARSETINFO = root::tagCHARSETINFO;
    pub type PCHARSETINFO = *mut root::tagCHARSETINFO;
    pub type NPCHARSETINFO = *mut root::tagCHARSETINFO;
    pub type LPCHARSETINFO = *mut root::tagCHARSETINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOCALESIGNATURE {
        pub lsUsb: [u32; 4usize],
        pub lsCsbDefault: [u32; 2usize],
        pub lsCsbSupported: [u32; 2usize],
    }
    pub type LOCALESIGNATURE = root::tagLOCALESIGNATURE;
    pub type PLOCALESIGNATURE = *mut root::tagLOCALESIGNATURE;
    pub type LPLOCALESIGNATURE = *mut root::tagLOCALESIGNATURE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHANDLETABLE {
        pub objectHandle: [root::HGDIOBJ; 1usize],
    }
    pub type HANDLETABLE = root::tagHANDLETABLE;
    pub type PHANDLETABLE = *mut root::tagHANDLETABLE;
    pub type LPHANDLETABLE = *mut root::tagHANDLETABLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMETARECORD {
        pub rdSize: u32,
        pub rdFunction: u16,
        pub rdParm: [u16; 1usize],
    }
    pub type METARECORD = root::tagMETARECORD;
    pub type PMETARECORD = *mut root::tagMETARECORD;
    pub type LPMETARECORD = *mut root::tagMETARECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMETAFILEPICT {
        pub mm: i32,
        pub xExt: i32,
        pub yExt: i32,
        pub hMF: root::HMETAFILE,
    }
    pub type METAFILEPICT = root::tagMETAFILEPICT;
    pub type LPMETAFILEPICT = *mut root::tagMETAFILEPICT;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMETAHEADER {
        pub mtType: u16,
        pub mtHeaderSize: u16,
        pub mtVersion: u16,
        pub mtSize: u32,
        pub mtNoObjects: u16,
        pub mtMaxRecord: u32,
        pub mtNoParameters: u16,
    }
    pub type METAHEADER = root::tagMETAHEADER;
    pub type PMETAHEADER = *mut root::tagMETAHEADER;
    pub type LPMETAHEADER = *mut root::tagMETAHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENHMETARECORD {
        pub iType: u32,
        pub nSize: u32,
        pub dParm: [u32; 1usize],
    }
    pub type ENHMETARECORD = root::tagENHMETARECORD;
    pub type PENHMETARECORD = *mut root::tagENHMETARECORD;
    pub type LPENHMETARECORD = *mut root::tagENHMETARECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENHMETAHEADER {
        pub iType: u32,
        pub nSize: u32,
        pub rclBounds: root::RECTL,
        pub rclFrame: root::RECTL,
        pub dSignature: u32,
        pub nVersion: u32,
        pub nBytes: u32,
        pub nRecords: u32,
        pub nHandles: u16,
        pub sReserved: u16,
        pub nDescription: u32,
        pub offDescription: u32,
        pub nPalEntries: u32,
        pub szlDevice: root::SIZEL,
        pub szlMillimeters: root::SIZEL,
        pub cbPixelFormat: u32,
        pub offPixelFormat: u32,
        pub bOpenGL: u32,
        pub szlMicrometers: root::SIZEL,
    }
    pub type ENHMETAHEADER = root::tagENHMETAHEADER;
    pub type PENHMETAHEADER = *mut root::tagENHMETAHEADER;
    pub type LPENHMETAHEADER = *mut root::tagENHMETAHEADER;
    pub type BCHAR = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTEXTMETRICA {
        pub tmHeight: i32,
        pub tmAscent: i32,
        pub tmDescent: i32,
        pub tmInternalLeading: i32,
        pub tmExternalLeading: i32,
        pub tmAveCharWidth: i32,
        pub tmMaxCharWidth: i32,
        pub tmWeight: i32,
        pub tmOverhang: i32,
        pub tmDigitizedAspectX: i32,
        pub tmDigitizedAspectY: i32,
        pub tmFirstChar: u8,
        pub tmLastChar: u8,
        pub tmDefaultChar: u8,
        pub tmBreakChar: u8,
        pub tmItalic: u8,
        pub tmUnderlined: u8,
        pub tmStruckOut: u8,
        pub tmPitchAndFamily: u8,
        pub tmCharSet: u8,
    }
    pub type TEXTMETRICA = root::tagTEXTMETRICA;
    pub type PTEXTMETRICA = *mut root::tagTEXTMETRICA;
    pub type NPTEXTMETRICA = *mut root::tagTEXTMETRICA;
    pub type LPTEXTMETRICA = *mut root::tagTEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTEXTMETRICW {
        pub tmHeight: i32,
        pub tmAscent: i32,
        pub tmDescent: i32,
        pub tmInternalLeading: i32,
        pub tmExternalLeading: i32,
        pub tmAveCharWidth: i32,
        pub tmMaxCharWidth: i32,
        pub tmWeight: i32,
        pub tmOverhang: i32,
        pub tmDigitizedAspectX: i32,
        pub tmDigitizedAspectY: i32,
        pub tmFirstChar: u16,
        pub tmLastChar: u16,
        pub tmDefaultChar: u16,
        pub tmBreakChar: u16,
        pub tmItalic: u8,
        pub tmUnderlined: u8,
        pub tmStruckOut: u8,
        pub tmPitchAndFamily: u8,
        pub tmCharSet: u8,
    }
    pub type TEXTMETRICW = root::tagTEXTMETRICW;
    pub type PTEXTMETRICW = *mut root::tagTEXTMETRICW;
    pub type NPTEXTMETRICW = *mut root::tagTEXTMETRICW;
    pub type LPTEXTMETRICW = *mut root::tagTEXTMETRICW;
    pub type TEXTMETRIC = root::TEXTMETRICA;
    pub type PTEXTMETRIC = root::PTEXTMETRICA;
    pub type NPTEXTMETRIC = root::NPTEXTMETRICA;
    pub type LPTEXTMETRIC = root::LPTEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNEWTEXTMETRICA {
        pub tmHeight: i32,
        pub tmAscent: i32,
        pub tmDescent: i32,
        pub tmInternalLeading: i32,
        pub tmExternalLeading: i32,
        pub tmAveCharWidth: i32,
        pub tmMaxCharWidth: i32,
        pub tmWeight: i32,
        pub tmOverhang: i32,
        pub tmDigitizedAspectX: i32,
        pub tmDigitizedAspectY: i32,
        pub tmFirstChar: u8,
        pub tmLastChar: u8,
        pub tmDefaultChar: u8,
        pub tmBreakChar: u8,
        pub tmItalic: u8,
        pub tmUnderlined: u8,
        pub tmStruckOut: u8,
        pub tmPitchAndFamily: u8,
        pub tmCharSet: u8,
        pub ntmFlags: u32,
        pub ntmSizeEM: root::UINT,
        pub ntmCellHeight: root::UINT,
        pub ntmAvgWidth: root::UINT,
    }
    pub type NEWTEXTMETRICA = root::tagNEWTEXTMETRICA;
    pub type PNEWTEXTMETRICA = *mut root::tagNEWTEXTMETRICA;
    pub type NPNEWTEXTMETRICA = *mut root::tagNEWTEXTMETRICA;
    pub type LPNEWTEXTMETRICA = *mut root::tagNEWTEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNEWTEXTMETRICW {
        pub tmHeight: i32,
        pub tmAscent: i32,
        pub tmDescent: i32,
        pub tmInternalLeading: i32,
        pub tmExternalLeading: i32,
        pub tmAveCharWidth: i32,
        pub tmMaxCharWidth: i32,
        pub tmWeight: i32,
        pub tmOverhang: i32,
        pub tmDigitizedAspectX: i32,
        pub tmDigitizedAspectY: i32,
        pub tmFirstChar: u16,
        pub tmLastChar: u16,
        pub tmDefaultChar: u16,
        pub tmBreakChar: u16,
        pub tmItalic: u8,
        pub tmUnderlined: u8,
        pub tmStruckOut: u8,
        pub tmPitchAndFamily: u8,
        pub tmCharSet: u8,
        pub ntmFlags: u32,
        pub ntmSizeEM: root::UINT,
        pub ntmCellHeight: root::UINT,
        pub ntmAvgWidth: root::UINT,
    }
    pub type NEWTEXTMETRICW = root::tagNEWTEXTMETRICW;
    pub type PNEWTEXTMETRICW = *mut root::tagNEWTEXTMETRICW;
    pub type NPNEWTEXTMETRICW = *mut root::tagNEWTEXTMETRICW;
    pub type LPNEWTEXTMETRICW = *mut root::tagNEWTEXTMETRICW;
    pub type NEWTEXTMETRIC = root::NEWTEXTMETRICA;
    pub type PNEWTEXTMETRIC = root::PNEWTEXTMETRICA;
    pub type NPNEWTEXTMETRIC = root::NPNEWTEXTMETRICA;
    pub type LPNEWTEXTMETRIC = root::LPNEWTEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNEWTEXTMETRICEXA {
        pub ntmTm: root::NEWTEXTMETRICA,
        pub ntmFontSig: root::FONTSIGNATURE,
    }
    pub type NEWTEXTMETRICEXA = root::tagNEWTEXTMETRICEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNEWTEXTMETRICEXW {
        pub ntmTm: root::NEWTEXTMETRICW,
        pub ntmFontSig: root::FONTSIGNATURE,
    }
    pub type NEWTEXTMETRICEXW = root::tagNEWTEXTMETRICEXW;
    pub type NEWTEXTMETRICEX = root::NEWTEXTMETRICEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPELARRAY {
        pub paXCount: i32,
        pub paYCount: i32,
        pub paXExt: i32,
        pub paYExt: i32,
        pub paRGBs: u8,
    }
    pub type PELARRAY = root::tagPELARRAY;
    pub type PPELARRAY = *mut root::tagPELARRAY;
    pub type NPPELARRAY = *mut root::tagPELARRAY;
    pub type LPPELARRAY = *mut root::tagPELARRAY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGBRUSH {
        pub lbStyle: root::UINT,
        pub lbColor: root::COLORREF,
        pub lbHatch: u64,
    }
    pub type LOGBRUSH = root::tagLOGBRUSH;
    pub type PLOGBRUSH = *mut root::tagLOGBRUSH;
    pub type NPLOGBRUSH = *mut root::tagLOGBRUSH;
    pub type LPLOGBRUSH = *mut root::tagLOGBRUSH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGBRUSH32 {
        pub lbStyle: root::UINT,
        pub lbColor: root::COLORREF,
        pub lbHatch: root::ULONG,
    }
    pub type LOGBRUSH32 = root::tagLOGBRUSH32;
    pub type PLOGBRUSH32 = *mut root::tagLOGBRUSH32;
    pub type NPLOGBRUSH32 = *mut root::tagLOGBRUSH32;
    pub type LPLOGBRUSH32 = *mut root::tagLOGBRUSH32;
    pub type PATTERN = root::LOGBRUSH;
    pub type PPATTERN = *mut root::PATTERN;
    pub type NPPATTERN = *mut root::PATTERN;
    pub type LPPATTERN = *mut root::PATTERN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGPEN {
        pub lopnStyle: root::UINT,
        pub lopnWidth: root::POINT,
        pub lopnColor: root::COLORREF,
    }
    pub type LOGPEN = root::tagLOGPEN;
    pub type PLOGPEN = *mut root::tagLOGPEN;
    pub type NPLOGPEN = *mut root::tagLOGPEN;
    pub type LPLOGPEN = *mut root::tagLOGPEN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEXTLOGPEN {
        pub elpPenStyle: u32,
        pub elpWidth: u32,
        pub elpBrushStyle: root::UINT,
        pub elpColor: root::COLORREF,
        pub elpHatch: u64,
        pub elpNumEntries: u32,
        pub elpStyleEntry: [u32; 1usize],
    }
    pub type EXTLOGPEN = root::tagEXTLOGPEN;
    pub type PEXTLOGPEN = *mut root::tagEXTLOGPEN;
    pub type NPEXTLOGPEN = *mut root::tagEXTLOGPEN;
    pub type LPEXTLOGPEN = *mut root::tagEXTLOGPEN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEXTLOGPEN32 {
        pub elpPenStyle: u32,
        pub elpWidth: u32,
        pub elpBrushStyle: root::UINT,
        pub elpColor: root::COLORREF,
        pub elpHatch: root::ULONG,
        pub elpNumEntries: u32,
        pub elpStyleEntry: [u32; 1usize],
    }
    pub type EXTLOGPEN32 = root::tagEXTLOGPEN32;
    pub type PEXTLOGPEN32 = *mut root::tagEXTLOGPEN32;
    pub type NPEXTLOGPEN32 = *mut root::tagEXTLOGPEN32;
    pub type LPEXTLOGPEN32 = *mut root::tagEXTLOGPEN32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPALETTEENTRY {
        pub peRed: u8,
        pub peGreen: u8,
        pub peBlue: u8,
        pub peFlags: u8,
    }
    pub type PALETTEENTRY = root::tagPALETTEENTRY;
    pub type PPALETTEENTRY = *mut root::tagPALETTEENTRY;
    pub type LPPALETTEENTRY = *mut root::tagPALETTEENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGPALETTE {
        pub palVersion: u16,
        pub palNumEntries: u16,
        pub palPalEntry: [root::PALETTEENTRY; 1usize],
    }
    pub type LOGPALETTE = root::tagLOGPALETTE;
    pub type PLOGPALETTE = *mut root::tagLOGPALETTE;
    pub type NPLOGPALETTE = *mut root::tagLOGPALETTE;
    pub type LPLOGPALETTE = *mut root::tagLOGPALETTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGFONTA {
        pub lfHeight: i32,
        pub lfWidth: i32,
        pub lfEscapement: i32,
        pub lfOrientation: i32,
        pub lfWeight: i32,
        pub lfItalic: u8,
        pub lfUnderline: u8,
        pub lfStrikeOut: u8,
        pub lfCharSet: u8,
        pub lfOutPrecision: u8,
        pub lfClipPrecision: u8,
        pub lfQuality: u8,
        pub lfPitchAndFamily: u8,
        pub lfFaceName: [i8; 32usize],
    }
    pub type LOGFONTA = root::tagLOGFONTA;
    pub type PLOGFONTA = *mut root::tagLOGFONTA;
    pub type NPLOGFONTA = *mut root::tagLOGFONTA;
    pub type LPLOGFONTA = *mut root::tagLOGFONTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLOGFONTW {
        pub lfHeight: i32,
        pub lfWidth: i32,
        pub lfEscapement: i32,
        pub lfOrientation: i32,
        pub lfWeight: i32,
        pub lfItalic: u8,
        pub lfUnderline: u8,
        pub lfStrikeOut: u8,
        pub lfCharSet: u8,
        pub lfOutPrecision: u8,
        pub lfClipPrecision: u8,
        pub lfQuality: u8,
        pub lfPitchAndFamily: u8,
        pub lfFaceName: [u16; 32usize],
    }
    pub type LOGFONTW = root::tagLOGFONTW;
    pub type PLOGFONTW = *mut root::tagLOGFONTW;
    pub type NPLOGFONTW = *mut root::tagLOGFONTW;
    pub type LPLOGFONTW = *mut root::tagLOGFONTW;
    pub type LOGFONT = root::LOGFONTA;
    pub type PLOGFONT = root::PLOGFONTA;
    pub type NPLOGFONT = root::NPLOGFONTA;
    pub type LPLOGFONT = root::LPLOGFONTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMLOGFONTA {
        pub elfLogFont: root::LOGFONTA,
        pub elfFullName: [u8; 64usize],
        pub elfStyle: [u8; 32usize],
    }
    pub type ENUMLOGFONTA = root::tagENUMLOGFONTA;
    pub type LPENUMLOGFONTA = *mut root::tagENUMLOGFONTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMLOGFONTW {
        pub elfLogFont: root::LOGFONTW,
        pub elfFullName: [u16; 64usize],
        pub elfStyle: [u16; 32usize],
    }
    pub type ENUMLOGFONTW = root::tagENUMLOGFONTW;
    pub type LPENUMLOGFONTW = *mut root::tagENUMLOGFONTW;
    pub type ENUMLOGFONT = root::ENUMLOGFONTA;
    pub type LPENUMLOGFONT = root::LPENUMLOGFONTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMLOGFONTEXA {
        pub elfLogFont: root::LOGFONTA,
        pub elfFullName: [u8; 64usize],
        pub elfStyle: [u8; 32usize],
        pub elfScript: [u8; 32usize],
    }
    pub type ENUMLOGFONTEXA = root::tagENUMLOGFONTEXA;
    pub type LPENUMLOGFONTEXA = *mut root::tagENUMLOGFONTEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMLOGFONTEXW {
        pub elfLogFont: root::LOGFONTW,
        pub elfFullName: [u16; 64usize],
        pub elfStyle: [u16; 32usize],
        pub elfScript: [u16; 32usize],
    }
    pub type ENUMLOGFONTEXW = root::tagENUMLOGFONTEXW;
    pub type LPENUMLOGFONTEXW = *mut root::tagENUMLOGFONTEXW;
    pub type ENUMLOGFONTEX = root::ENUMLOGFONTEXA;
    pub type LPENUMLOGFONTEX = root::LPENUMLOGFONTEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPANOSE {
        pub bFamilyType: u8,
        pub bSerifStyle: u8,
        pub bWeight: u8,
        pub bProportion: u8,
        pub bContrast: u8,
        pub bStrokeVariation: u8,
        pub bArmStyle: u8,
        pub bLetterform: u8,
        pub bMidline: u8,
        pub bXHeight: u8,
    }
    pub type PANOSE = root::tagPANOSE;
    pub type LPPANOSE = *mut root::tagPANOSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEXTLOGFONTA {
        pub elfLogFont: root::LOGFONTA,
        pub elfFullName: [u8; 64usize],
        pub elfStyle: [u8; 32usize],
        pub elfVersion: u32,
        pub elfStyleSize: u32,
        pub elfMatch: u32,
        pub elfReserved: u32,
        pub elfVendorId: [u8; 4usize],
        pub elfCulture: u32,
        pub elfPanose: root::PANOSE,
    }
    pub type EXTLOGFONTA = root::tagEXTLOGFONTA;
    pub type PEXTLOGFONTA = *mut root::tagEXTLOGFONTA;
    pub type NPEXTLOGFONTA = *mut root::tagEXTLOGFONTA;
    pub type LPEXTLOGFONTA = *mut root::tagEXTLOGFONTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEXTLOGFONTW {
        pub elfLogFont: root::LOGFONTW,
        pub elfFullName: [u16; 64usize],
        pub elfStyle: [u16; 32usize],
        pub elfVersion: u32,
        pub elfStyleSize: u32,
        pub elfMatch: u32,
        pub elfReserved: u32,
        pub elfVendorId: [u8; 4usize],
        pub elfCulture: u32,
        pub elfPanose: root::PANOSE,
    }
    pub type EXTLOGFONTW = root::tagEXTLOGFONTW;
    pub type PEXTLOGFONTW = *mut root::tagEXTLOGFONTW;
    pub type NPEXTLOGFONTW = *mut root::tagEXTLOGFONTW;
    pub type LPEXTLOGFONTW = *mut root::tagEXTLOGFONTW;
    pub type EXTLOGFONT = root::EXTLOGFONTA;
    pub type PEXTLOGFONT = root::PEXTLOGFONTA;
    pub type NPEXTLOGFONT = root::NPEXTLOGFONTA;
    pub type LPEXTLOGFONT = root::LPEXTLOGFONTA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _devicemodeA {
        pub dmDeviceName: [u8; 32usize],
        pub dmSpecVersion: u16,
        pub dmDriverVersion: u16,
        pub dmSize: u16,
        pub dmDriverExtra: u16,
        pub dmFields: u32,
        pub __bindgen_anon_1: root::_devicemodeA__bindgen_ty_1,
        pub dmColor: i16,
        pub dmDuplex: i16,
        pub dmYResolution: i16,
        pub dmTTOption: i16,
        pub dmCollate: i16,
        pub dmFormName: [u8; 32usize],
        pub dmLogPixels: u16,
        pub dmBitsPerPel: u32,
        pub dmPelsWidth: u32,
        pub dmPelsHeight: u32,
        pub __bindgen_anon_2: root::_devicemodeA__bindgen_ty_2,
        pub dmDisplayFrequency: u32,
        pub dmICMMethod: u32,
        pub dmICMIntent: u32,
        pub dmMediaType: u32,
        pub dmDitherType: u32,
        pub dmReserved1: u32,
        pub dmReserved2: u32,
        pub dmPanningWidth: u32,
        pub dmPanningHeight: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _devicemodeA__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_devicemodeA__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2: root::_devicemodeA__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _devicemodeA__bindgen_ty_1__bindgen_ty_1 {
        pub dmOrientation: i16,
        pub dmPaperSize: i16,
        pub dmPaperLength: i16,
        pub dmPaperWidth: i16,
        pub dmScale: i16,
        pub dmCopies: i16,
        pub dmDefaultSource: i16,
        pub dmPrintQuality: i16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _devicemodeA__bindgen_ty_1__bindgen_ty_2 {
        pub dmPosition: root::POINTL,
        pub dmDisplayOrientation: u32,
        pub dmDisplayFixedOutput: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _devicemodeA__bindgen_ty_2 {
        pub dmDisplayFlags: u32,
        pub dmNup: u32,
    }
    pub type DEVMODEA = root::_devicemodeA;
    pub type PDEVMODEA = *mut root::_devicemodeA;
    pub type NPDEVMODEA = *mut root::_devicemodeA;
    pub type LPDEVMODEA = *mut root::_devicemodeA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _devicemodeW {
        pub dmDeviceName: [u16; 32usize],
        pub dmSpecVersion: u16,
        pub dmDriverVersion: u16,
        pub dmSize: u16,
        pub dmDriverExtra: u16,
        pub dmFields: u32,
        pub __bindgen_anon_1: root::_devicemodeW__bindgen_ty_1,
        pub dmColor: i16,
        pub dmDuplex: i16,
        pub dmYResolution: i16,
        pub dmTTOption: i16,
        pub dmCollate: i16,
        pub dmFormName: [u16; 32usize],
        pub dmLogPixels: u16,
        pub dmBitsPerPel: u32,
        pub dmPelsWidth: u32,
        pub dmPelsHeight: u32,
        pub __bindgen_anon_2: root::_devicemodeW__bindgen_ty_2,
        pub dmDisplayFrequency: u32,
        pub dmICMMethod: u32,
        pub dmICMIntent: u32,
        pub dmMediaType: u32,
        pub dmDitherType: u32,
        pub dmReserved1: u32,
        pub dmReserved2: u32,
        pub dmPanningWidth: u32,
        pub dmPanningHeight: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _devicemodeW__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_devicemodeW__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2: root::_devicemodeW__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _devicemodeW__bindgen_ty_1__bindgen_ty_1 {
        pub dmOrientation: i16,
        pub dmPaperSize: i16,
        pub dmPaperLength: i16,
        pub dmPaperWidth: i16,
        pub dmScale: i16,
        pub dmCopies: i16,
        pub dmDefaultSource: i16,
        pub dmPrintQuality: i16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _devicemodeW__bindgen_ty_1__bindgen_ty_2 {
        pub dmPosition: root::POINTL,
        pub dmDisplayOrientation: u32,
        pub dmDisplayFixedOutput: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _devicemodeW__bindgen_ty_2 {
        pub dmDisplayFlags: u32,
        pub dmNup: u32,
    }
    pub type DEVMODEW = root::_devicemodeW;
    pub type PDEVMODEW = *mut root::_devicemodeW;
    pub type NPDEVMODEW = *mut root::_devicemodeW;
    pub type LPDEVMODEW = *mut root::_devicemodeW;
    pub type DEVMODE = root::DEVMODEA;
    pub type PDEVMODE = root::PDEVMODEA;
    pub type NPDEVMODE = root::NPDEVMODEA;
    pub type LPDEVMODE = root::LPDEVMODEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISPLAY_DEVICEA {
        pub cb: u32,
        pub DeviceName: [i8; 32usize],
        pub DeviceString: [i8; 128usize],
        pub StateFlags: u32,
        pub DeviceID: [i8; 128usize],
        pub DeviceKey: [i8; 128usize],
    }
    pub type DISPLAY_DEVICEA = root::_DISPLAY_DEVICEA;
    pub type PDISPLAY_DEVICEA = *mut root::_DISPLAY_DEVICEA;
    pub type LPDISPLAY_DEVICEA = *mut root::_DISPLAY_DEVICEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISPLAY_DEVICEW {
        pub cb: u32,
        pub DeviceName: [u16; 32usize],
        pub DeviceString: [u16; 128usize],
        pub StateFlags: u32,
        pub DeviceID: [u16; 128usize],
        pub DeviceKey: [u16; 128usize],
    }
    pub type DISPLAY_DEVICEW = root::_DISPLAY_DEVICEW;
    pub type PDISPLAY_DEVICEW = *mut root::_DISPLAY_DEVICEW;
    pub type LPDISPLAY_DEVICEW = *mut root::_DISPLAY_DEVICEW;
    pub type DISPLAY_DEVICE = root::DISPLAY_DEVICEA;
    pub type PDISPLAY_DEVICE = root::PDISPLAY_DEVICEA;
    pub type LPDISPLAY_DEVICE = root::LPDISPLAY_DEVICEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_RATIONAL {
        pub Numerator: root::UINT32,
        pub Denominator: root::UINT32,
    }
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = -1;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 0;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 1;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO : root :: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 2 ;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO : root :: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 3 ;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 4;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 5;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 6;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 8;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 9;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL : root :: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 10 ;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED : root :: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 11 ;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 12;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 13;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 14;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 15;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED : root :: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 16 ;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL : root :: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 17 ;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = -2147483648;
    pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32:
        root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = -1;
    pub type DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = i32;
    pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED:
        root::DISPLAYCONFIG_SCANLINE_ORDERING = 0;
    pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE:
        root::DISPLAYCONFIG_SCANLINE_ORDERING = 1;
    pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED:
        root::DISPLAYCONFIG_SCANLINE_ORDERING = 2;
    pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST : root :: DISPLAYCONFIG_SCANLINE_ORDERING = 2 ;
    pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST : root :: DISPLAYCONFIG_SCANLINE_ORDERING = 3 ;
    pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32:
        root::DISPLAYCONFIG_SCANLINE_ORDERING = -1;
    pub type DISPLAYCONFIG_SCANLINE_ORDERING = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_2DREGION {
        pub cx: root::UINT32,
        pub cy: root::UINT32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
        pub pixelRate: root::UINT64,
        pub hSyncFreq: root::DISPLAYCONFIG_RATIONAL,
        pub vSyncFreq: root::DISPLAYCONFIG_RATIONAL,
        pub activeSize: root::DISPLAYCONFIG_2DREGION,
        pub totalSize: root::DISPLAYCONFIG_2DREGION,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1,
        pub scanLineOrdering: root::DISPLAYCONFIG_SCANLINE_ORDERING,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1 {
        pub AdditionalSignalInfo: root::DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1,
        pub videoStandard: root::UINT32,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn videoStandard(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_videoStandard(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn vSyncFreqDivider(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
        }
        #[inline]
        pub fn set_vSyncFreqDivider(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 6u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(22usize, 10u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            videoStandard: root::UINT32,
            vSyncFreqDivider: root::UINT32,
            reserved: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 16u8, {
                let videoStandard: u32 = unsafe { ::std::mem::transmute(videoStandard) };
                videoStandard as u64
            });
            __bindgen_bitfield_unit.set(16usize, 6u8, {
                let vSyncFreqDivider: u32 = unsafe { ::std::mem::transmute(vSyncFreqDivider) };
                vSyncFreqDivider as u64
            });
            __bindgen_bitfield_unit.set(22usize, 10u8, {
                let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_IDENTITY: root::DISPLAYCONFIG_SCALING = 1;
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_CENTERED: root::DISPLAYCONFIG_SCALING = 2;
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_STRETCHED: root::DISPLAYCONFIG_SCALING =
        3;
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX:
        root::DISPLAYCONFIG_SCALING = 4;
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_CUSTOM: root::DISPLAYCONFIG_SCALING = 5;
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_PREFERRED: root::DISPLAYCONFIG_SCALING =
        128;
    pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_FORCE_UINT32:
        root::DISPLAYCONFIG_SCALING = -1;
    pub type DISPLAYCONFIG_SCALING = i32;
    pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_IDENTITY: root::DISPLAYCONFIG_ROTATION =
        1;
    pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_ROTATE90: root::DISPLAYCONFIG_ROTATION =
        2;
    pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_ROTATE180:
        root::DISPLAYCONFIG_ROTATION = 3;
    pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_ROTATE270:
        root::DISPLAYCONFIG_ROTATION = 4;
    pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_FORCE_UINT32:
        root::DISPLAYCONFIG_ROTATION = -1;
    pub type DISPLAYCONFIG_ROTATION = i32;
    pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE:
        root::DISPLAYCONFIG_MODE_INFO_TYPE = 1;
    pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_TARGET:
        root::DISPLAYCONFIG_MODE_INFO_TYPE = 2;
    pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE:
        root::DISPLAYCONFIG_MODE_INFO_TYPE = 3;
    pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32:
        root::DISPLAYCONFIG_MODE_INFO_TYPE = -1;
    pub type DISPLAYCONFIG_MODE_INFO_TYPE = i32;
    pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_8BPP:
        root::DISPLAYCONFIG_PIXELFORMAT = 1;
    pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_16BPP:
        root::DISPLAYCONFIG_PIXELFORMAT = 2;
    pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_24BPP:
        root::DISPLAYCONFIG_PIXELFORMAT = 3;
    pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_32BPP:
        root::DISPLAYCONFIG_PIXELFORMAT = 4;
    pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_NONGDI:
        root::DISPLAYCONFIG_PIXELFORMAT = 5;
    pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32:
        root::DISPLAYCONFIG_PIXELFORMAT = -1;
    pub type DISPLAYCONFIG_PIXELFORMAT = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_SOURCE_MODE {
        pub width: root::UINT32,
        pub height: root::UINT32,
        pub pixelFormat: root::DISPLAYCONFIG_PIXELFORMAT,
        pub position: root::POINTL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_TARGET_MODE {
        pub targetVideoSignalInfo: root::DISPLAYCONFIG_VIDEO_SIGNAL_INFO,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO {
        pub PathSourceSize: root::POINTL,
        pub DesktopImageRegion: root::RECTL,
        pub DesktopImageClip: root::RECTL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_MODE_INFO {
        pub infoType: root::DISPLAYCONFIG_MODE_INFO_TYPE,
        pub id: root::UINT32,
        pub adapterId: root::LUID,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_MODE_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_MODE_INFO__bindgen_ty_1 {
        pub targetMode: root::DISPLAYCONFIG_TARGET_MODE,
        pub sourceMode: root::DISPLAYCONFIG_SOURCE_MODE,
        pub desktopImageInfo: root::DISPLAYCONFIG_DESKTOP_IMAGE_INFO,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_PATH_SOURCE_INFO {
        pub adapterId: root::LUID,
        pub id: root::UINT32,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1,
        pub statusFlags: root::UINT32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1 {
        pub modeInfoIdx: root::UINT32,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn cloneGroupId(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_cloneGroupId(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn sourceModeInfoIdx(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_sourceModeInfoIdx(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            cloneGroupId: root::UINT32,
            sourceModeInfoIdx: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 16u8, {
                let cloneGroupId: u32 = unsafe { ::std::mem::transmute(cloneGroupId) };
                cloneGroupId as u64
            });
            __bindgen_bitfield_unit.set(16usize, 16u8, {
                let sourceModeInfoIdx: u32 = unsafe { ::std::mem::transmute(sourceModeInfoIdx) };
                sourceModeInfoIdx as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_PATH_TARGET_INFO {
        pub adapterId: root::LUID,
        pub id: root::UINT32,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1,
        pub outputTechnology: root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
        pub rotation: root::DISPLAYCONFIG_ROTATION,
        pub scaling: root::DISPLAYCONFIG_SCALING,
        pub refreshRate: root::DISPLAYCONFIG_RATIONAL,
        pub scanLineOrdering: root::DISPLAYCONFIG_SCANLINE_ORDERING,
        pub targetAvailable: root::BOOL,
        pub statusFlags: root::UINT32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1 {
        pub modeInfoIdx: root::UINT32,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn desktopModeInfoIdx(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_desktopModeInfoIdx(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn targetModeInfoIdx(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_targetModeInfoIdx(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            desktopModeInfoIdx: root::UINT32,
            targetModeInfoIdx: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 16u8, {
                let desktopModeInfoIdx: u32 = unsafe { ::std::mem::transmute(desktopModeInfoIdx) };
                desktopModeInfoIdx as u64
            });
            __bindgen_bitfield_unit.set(16usize, 16u8, {
                let targetModeInfoIdx: u32 = unsafe { ::std::mem::transmute(targetModeInfoIdx) };
                targetModeInfoIdx as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_PATH_INFO {
        pub sourceInfo: root::DISPLAYCONFIG_PATH_SOURCE_INFO,
        pub targetInfo: root::DISPLAYCONFIG_PATH_TARGET_INFO,
        pub flags: root::UINT32,
    }
    pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_INTERNAL:
        root::DISPLAYCONFIG_TOPOLOGY_ID = 1;
    pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_CLONE:
        root::DISPLAYCONFIG_TOPOLOGY_ID = 2;
    pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_EXTEND:
        root::DISPLAYCONFIG_TOPOLOGY_ID = 4;
    pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_EXTERNAL:
        root::DISPLAYCONFIG_TOPOLOGY_ID = 8;
    pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32:
        root::DISPLAYCONFIG_TOPOLOGY_ID = -1;
    pub type DISPLAYCONFIG_TOPOLOGY_ID = i32;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 1;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 2;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 3;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 4;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 5;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 6;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION : root :: DISPLAYCONFIG_DEVICE_INFO_TYPE = 7 ;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION : root :: DISPLAYCONFIG_DEVICE_INFO_TYPE = 8 ;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 9;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 10;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = 11;
    pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32:
        root::DISPLAYCONFIG_DEVICE_INFO_TYPE = -1;
    pub type DISPLAYCONFIG_DEVICE_INFO_TYPE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
        pub type_: root::DISPLAYCONFIG_DEVICE_INFO_TYPE,
        pub size: root::UINT32,
        pub adapterId: root::LUID,
        pub id: root::UINT32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub viewGdiDeviceName: [u16; 32usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
        pub __bindgen_anon_1: root::DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1 {
        pub __bindgen_anon_1:
            root::DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1,
        pub value: root::UINT32,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn friendlyNameFromEdid(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_friendlyNameFromEdid(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn friendlyNameForced(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_friendlyNameForced(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn edidIdsValid(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_edidIdsValid(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 29u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            friendlyNameFromEdid: root::UINT32,
            friendlyNameForced: root::UINT32,
            edidIdsValid: root::UINT32,
            reserved: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let friendlyNameFromEdid: u32 =
                    unsafe { ::std::mem::transmute(friendlyNameFromEdid) };
                friendlyNameFromEdid as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let friendlyNameForced: u32 = unsafe { ::std::mem::transmute(friendlyNameForced) };
                friendlyNameForced as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let edidIdsValid: u32 = unsafe { ::std::mem::transmute(edidIdsValid) };
                edidIdsValid as u64
            });
            __bindgen_bitfield_unit.set(3usize, 29u8, {
                let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub flags: root::DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
        pub outputTechnology: root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
        pub edidManufactureId: root::UINT16,
        pub edidProductCodeId: root::UINT16,
        pub connectorInstance: root::UINT32,
        pub monitorFriendlyDeviceName: [u16; 64usize],
        pub monitorDevicePath: [u16; 128usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub width: root::UINT32,
        pub height: root::UINT32,
        pub targetMode: root::DISPLAYCONFIG_TARGET_MODE,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_ADAPTER_NAME {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub adapterDevicePath: [u16; 128usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_TARGET_BASE_TYPE {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub baseOutputTechnology: root::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1 {
        pub __bindgen_anon_1:
            root::DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1,
        pub value: root::UINT32,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn bootPersistenceOn(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_bootPersistenceOn(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            bootPersistenceOn: root::UINT32,
            reserved: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let bootPersistenceOn: u32 = unsafe { ::std::mem::transmute(bootPersistenceOn) };
                bootPersistenceOn as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub __bindgen_anon_1: root::DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1 {
        pub __bindgen_anon_1:
            root::DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1,
        pub value: root::UINT32,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn disableMonitorVirtualResolution(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_disableMonitorVirtualResolution(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            disableMonitorVirtualResolution: root::UINT32,
            reserved: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let disableMonitorVirtualResolution: u32 =
                    unsafe { ::std::mem::transmute(disableMonitorVirtualResolution) };
                disableMonitorVirtualResolution as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_RGB:
        root::_DISPLAYCONFIG_COLOR_ENCODING = 0;
    pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_YCBCR444:
        root::_DISPLAYCONFIG_COLOR_ENCODING = 1;
    pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_YCBCR422:
        root::_DISPLAYCONFIG_COLOR_ENCODING = 2;
    pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_YCBCR420:
        root::_DISPLAYCONFIG_COLOR_ENCODING = 3;
    pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_INTENSITY:
        root::_DISPLAYCONFIG_COLOR_ENCODING = 4;
    pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32:
        root::_DISPLAYCONFIG_COLOR_ENCODING = -1;
    pub type _DISPLAYCONFIG_COLOR_ENCODING = i32;
    pub use self::super::root::_DISPLAYCONFIG_COLOR_ENCODING as DISPLAYCONFIG_COLOR_ENCODING;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub __bindgen_anon_1: root::_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1,
        pub colorEncoding: root::DISPLAYCONFIG_COLOR_ENCODING,
        pub bitsPerColorChannel: root::UINT32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1 {
        pub __bindgen_anon_1:
            root::_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1,
        pub value: root::UINT32,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn advancedColorSupported(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_advancedColorSupported(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn advancedColorEnabled(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_advancedColorEnabled(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn wideColorEnforced(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_wideColorEnforced(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn advancedColorForceDisabled(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_advancedColorForceDisabled(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 28u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            advancedColorSupported: root::UINT32,
            advancedColorEnabled: root::UINT32,
            wideColorEnforced: root::UINT32,
            advancedColorForceDisabled: root::UINT32,
            reserved: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let advancedColorSupported: u32 =
                    unsafe { ::std::mem::transmute(advancedColorSupported) };
                advancedColorSupported as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let advancedColorEnabled: u32 =
                    unsafe { ::std::mem::transmute(advancedColorEnabled) };
                advancedColorEnabled as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let wideColorEnforced: u32 = unsafe { ::std::mem::transmute(wideColorEnforced) };
                wideColorEnforced as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let advancedColorForceDisabled: u32 =
                    unsafe { ::std::mem::transmute(advancedColorForceDisabled) };
                advancedColorForceDisabled as u64
            });
            __bindgen_bitfield_unit.set(4usize, 28u8, {
                let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = root::_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub __bindgen_anon_1: root::_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1 {
        pub __bindgen_anon_1:
            root::_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1,
        pub value: root::UINT32,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn enableAdvancedColor(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_enableAdvancedColor(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> root::UINT32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: root::UINT32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            enableAdvancedColor: root::UINT32,
            reserved: root::UINT32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let enableAdvancedColor: u32 =
                    unsafe { ::std::mem::transmute(enableAdvancedColor) };
                enableAdvancedColor as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = root::_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISPLAYCONFIG_SDR_WHITE_LEVEL {
        pub header: root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        pub SDRWhiteLevel: root::ULONG,
    }
    pub type DISPLAYCONFIG_SDR_WHITE_LEVEL = root::_DISPLAYCONFIG_SDR_WHITE_LEVEL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RGNDATAHEADER {
        pub dwSize: u32,
        pub iType: u32,
        pub nCount: u32,
        pub nRgnSize: u32,
        pub rcBound: root::RECT,
    }
    pub type RGNDATAHEADER = root::_RGNDATAHEADER;
    pub type PRGNDATAHEADER = *mut root::_RGNDATAHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RGNDATA {
        pub rdh: root::RGNDATAHEADER,
        pub Buffer: [i8; 1usize],
    }
    pub type RGNDATA = root::_RGNDATA;
    pub type PRGNDATA = *mut root::_RGNDATA;
    pub type NPRGNDATA = *mut root::_RGNDATA;
    pub type LPRGNDATA = *mut root::_RGNDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ABC {
        pub abcA: i32,
        pub abcB: root::UINT,
        pub abcC: i32,
    }
    pub type ABC = root::_ABC;
    pub type PABC = *mut root::_ABC;
    pub type NPABC = *mut root::_ABC;
    pub type LPABC = *mut root::_ABC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ABCFLOAT {
        pub abcfA: root::FLOAT,
        pub abcfB: root::FLOAT,
        pub abcfC: root::FLOAT,
    }
    pub type ABCFLOAT = root::_ABCFLOAT;
    pub type PABCFLOAT = *mut root::_ABCFLOAT;
    pub type NPABCFLOAT = *mut root::_ABCFLOAT;
    pub type LPABCFLOAT = *mut root::_ABCFLOAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OUTLINETEXTMETRICA {
        pub otmSize: root::UINT,
        pub otmTextMetrics: root::TEXTMETRICA,
        pub otmFiller: u8,
        pub otmPanoseNumber: root::PANOSE,
        pub otmfsSelection: root::UINT,
        pub otmfsType: root::UINT,
        pub otmsCharSlopeRise: i32,
        pub otmsCharSlopeRun: i32,
        pub otmItalicAngle: i32,
        pub otmEMSquare: root::UINT,
        pub otmAscent: i32,
        pub otmDescent: i32,
        pub otmLineGap: root::UINT,
        pub otmsCapEmHeight: root::UINT,
        pub otmsXHeight: root::UINT,
        pub otmrcFontBox: root::RECT,
        pub otmMacAscent: i32,
        pub otmMacDescent: i32,
        pub otmMacLineGap: root::UINT,
        pub otmusMinimumPPEM: root::UINT,
        pub otmptSubscriptSize: root::POINT,
        pub otmptSubscriptOffset: root::POINT,
        pub otmptSuperscriptSize: root::POINT,
        pub otmptSuperscriptOffset: root::POINT,
        pub otmsStrikeoutSize: root::UINT,
        pub otmsStrikeoutPosition: i32,
        pub otmsUnderscoreSize: i32,
        pub otmsUnderscorePosition: i32,
        pub otmpFamilyName: *mut i8,
        pub otmpFaceName: *mut i8,
        pub otmpStyleName: *mut i8,
        pub otmpFullName: *mut i8,
    }
    pub type OUTLINETEXTMETRICA = root::_OUTLINETEXTMETRICA;
    pub type POUTLINETEXTMETRICA = *mut root::_OUTLINETEXTMETRICA;
    pub type NPOUTLINETEXTMETRICA = *mut root::_OUTLINETEXTMETRICA;
    pub type LPOUTLINETEXTMETRICA = *mut root::_OUTLINETEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OUTLINETEXTMETRICW {
        pub otmSize: root::UINT,
        pub otmTextMetrics: root::TEXTMETRICW,
        pub otmFiller: u8,
        pub otmPanoseNumber: root::PANOSE,
        pub otmfsSelection: root::UINT,
        pub otmfsType: root::UINT,
        pub otmsCharSlopeRise: i32,
        pub otmsCharSlopeRun: i32,
        pub otmItalicAngle: i32,
        pub otmEMSquare: root::UINT,
        pub otmAscent: i32,
        pub otmDescent: i32,
        pub otmLineGap: root::UINT,
        pub otmsCapEmHeight: root::UINT,
        pub otmsXHeight: root::UINT,
        pub otmrcFontBox: root::RECT,
        pub otmMacAscent: i32,
        pub otmMacDescent: i32,
        pub otmMacLineGap: root::UINT,
        pub otmusMinimumPPEM: root::UINT,
        pub otmptSubscriptSize: root::POINT,
        pub otmptSubscriptOffset: root::POINT,
        pub otmptSuperscriptSize: root::POINT,
        pub otmptSuperscriptOffset: root::POINT,
        pub otmsStrikeoutSize: root::UINT,
        pub otmsStrikeoutPosition: i32,
        pub otmsUnderscoreSize: i32,
        pub otmsUnderscorePosition: i32,
        pub otmpFamilyName: *mut i8,
        pub otmpFaceName: *mut i8,
        pub otmpStyleName: *mut i8,
        pub otmpFullName: *mut i8,
    }
    pub type OUTLINETEXTMETRICW = root::_OUTLINETEXTMETRICW;
    pub type POUTLINETEXTMETRICW = *mut root::_OUTLINETEXTMETRICW;
    pub type NPOUTLINETEXTMETRICW = *mut root::_OUTLINETEXTMETRICW;
    pub type LPOUTLINETEXTMETRICW = *mut root::_OUTLINETEXTMETRICW;
    pub type OUTLINETEXTMETRIC = root::OUTLINETEXTMETRICA;
    pub type POUTLINETEXTMETRIC = root::POUTLINETEXTMETRICA;
    pub type NPOUTLINETEXTMETRIC = root::NPOUTLINETEXTMETRICA;
    pub type LPOUTLINETEXTMETRIC = root::LPOUTLINETEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOLYTEXTA {
        pub x: i32,
        pub y: i32,
        pub n: root::UINT,
        pub lpstr: *const i8,
        pub uiFlags: root::UINT,
        pub rcl: root::RECT,
        pub pdx: *mut i32,
    }
    pub type POLYTEXTA = root::tagPOLYTEXTA;
    pub type PPOLYTEXTA = *mut root::tagPOLYTEXTA;
    pub type NPPOLYTEXTA = *mut root::tagPOLYTEXTA;
    pub type LPPOLYTEXTA = *mut root::tagPOLYTEXTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOLYTEXTW {
        pub x: i32,
        pub y: i32,
        pub n: root::UINT,
        pub lpstr: root::LPCWSTR,
        pub uiFlags: root::UINT,
        pub rcl: root::RECT,
        pub pdx: *mut i32,
    }
    pub type POLYTEXTW = root::tagPOLYTEXTW;
    pub type PPOLYTEXTW = *mut root::tagPOLYTEXTW;
    pub type NPPOLYTEXTW = *mut root::tagPOLYTEXTW;
    pub type LPPOLYTEXTW = *mut root::tagPOLYTEXTW;
    pub type POLYTEXT = root::POLYTEXTA;
    pub type PPOLYTEXT = root::PPOLYTEXTA;
    pub type NPPOLYTEXT = root::NPPOLYTEXTA;
    pub type LPPOLYTEXT = root::LPPOLYTEXTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FIXED {
        pub fract: u16,
        pub value: i16,
    }
    pub type FIXED = root::_FIXED;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MAT2 {
        pub eM11: root::FIXED,
        pub eM12: root::FIXED,
        pub eM21: root::FIXED,
        pub eM22: root::FIXED,
    }
    pub type MAT2 = root::_MAT2;
    pub type LPMAT2 = *mut root::_MAT2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GLYPHMETRICS {
        pub gmBlackBoxX: root::UINT,
        pub gmBlackBoxY: root::UINT,
        pub gmptGlyphOrigin: root::POINT,
        pub gmCellIncX: i16,
        pub gmCellIncY: i16,
    }
    pub type GLYPHMETRICS = root::_GLYPHMETRICS;
    pub type LPGLYPHMETRICS = *mut root::_GLYPHMETRICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTFX {
        pub x: root::FIXED,
        pub y: root::FIXED,
    }
    pub type POINTFX = root::tagPOINTFX;
    pub type LPPOINTFX = *mut root::tagPOINTFX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTTPOLYCURVE {
        pub wType: u16,
        pub cpfx: u16,
        pub apfx: [root::POINTFX; 1usize],
    }
    pub type TTPOLYCURVE = root::tagTTPOLYCURVE;
    pub type LPTTPOLYCURVE = *mut root::tagTTPOLYCURVE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTTPOLYGONHEADER {
        pub cb: u32,
        pub dwType: u32,
        pub pfxStart: root::POINTFX,
    }
    pub type TTPOLYGONHEADER = root::tagTTPOLYGONHEADER;
    pub type LPTTPOLYGONHEADER = *mut root::tagTTPOLYGONHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGCP_RESULTSA {
        pub lStructSize: u32,
        pub lpOutString: *mut i8,
        pub lpOrder: *mut root::UINT,
        pub lpDx: *mut i32,
        pub lpCaretPos: *mut i32,
        pub lpClass: *mut i8,
        pub lpGlyphs: root::LPWSTR,
        pub nGlyphs: root::UINT,
        pub nMaxFit: i32,
    }
    pub type GCP_RESULTSA = root::tagGCP_RESULTSA;
    pub type LPGCP_RESULTSA = *mut root::tagGCP_RESULTSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGCP_RESULTSW {
        pub lStructSize: u32,
        pub lpOutString: root::LPWSTR,
        pub lpOrder: *mut root::UINT,
        pub lpDx: *mut i32,
        pub lpCaretPos: *mut i32,
        pub lpClass: *mut i8,
        pub lpGlyphs: root::LPWSTR,
        pub nGlyphs: root::UINT,
        pub nMaxFit: i32,
    }
    pub type GCP_RESULTSW = root::tagGCP_RESULTSW;
    pub type LPGCP_RESULTSW = *mut root::tagGCP_RESULTSW;
    pub type GCP_RESULTS = root::GCP_RESULTSA;
    pub type LPGCP_RESULTS = root::LPGCP_RESULTSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RASTERIZER_STATUS {
        pub nSize: i16,
        pub wFlags: i16,
        pub nLanguageID: i16,
    }
    pub type RASTERIZER_STATUS = root::_RASTERIZER_STATUS;
    pub type LPRASTERIZER_STATUS = *mut root::_RASTERIZER_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPIXELFORMATDESCRIPTOR {
        pub nSize: u16,
        pub nVersion: u16,
        pub dwFlags: u32,
        pub iPixelType: u8,
        pub cColorBits: u8,
        pub cRedBits: u8,
        pub cRedShift: u8,
        pub cGreenBits: u8,
        pub cGreenShift: u8,
        pub cBlueBits: u8,
        pub cBlueShift: u8,
        pub cAlphaBits: u8,
        pub cAlphaShift: u8,
        pub cAccumBits: u8,
        pub cAccumRedBits: u8,
        pub cAccumGreenBits: u8,
        pub cAccumBlueBits: u8,
        pub cAccumAlphaBits: u8,
        pub cDepthBits: u8,
        pub cStencilBits: u8,
        pub cAuxBuffers: u8,
        pub iLayerType: u8,
        pub bReserved: u8,
        pub dwLayerMask: u32,
        pub dwVisibleMask: u32,
        pub dwDamageMask: u32,
    }
    pub type PIXELFORMATDESCRIPTOR = root::tagPIXELFORMATDESCRIPTOR;
    pub type PPIXELFORMATDESCRIPTOR = *mut root::tagPIXELFORMATDESCRIPTOR;
    pub type LPPIXELFORMATDESCRIPTOR = *mut root::tagPIXELFORMATDESCRIPTOR;
    pub type OLDFONTENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const root::LOGFONTA,
            arg2: *const root::TEXTMETRICA,
            arg3: u32,
            arg4: root::LPARAM,
        ) -> i32,
    >;
    pub type OLDFONTENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const root::LOGFONTW,
            arg2: *const root::TEXTMETRICW,
            arg3: u32,
            arg4: root::LPARAM,
        ) -> i32,
    >;
    pub type FONTENUMPROCA = root::OLDFONTENUMPROCA;
    pub type FONTENUMPROCW = root::OLDFONTENUMPROCW;
    pub type FONTENUMPROC = root::FONTENUMPROCA;
    pub type GOBJENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPVOID, arg2: root::LPARAM) -> i32,
    >;
    pub type LINEDDAPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: i32,
            arg2: i32,
            arg3: root::LPARAM,
        ),
    >;
    extern "C" {
        pub fn AddFontResourceA(arg1: *const i8) -> i32;
    }
    extern "C" {
        pub fn AddFontResourceW(arg1: root::LPCWSTR) -> i32;
    }
    extern "C" {
        pub fn AnimatePalette(
            hPal: root::HPALETTE,
            iStartIndex: root::UINT,
            cEntries: root::UINT,
            ppe: *const root::PALETTEENTRY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Arc(
            hdc: root::HDC,
            x1: i32,
            y1: i32,
            x2: i32,
            y2: i32,
            x3: i32,
            y3: i32,
            x4: i32,
            y4: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BitBlt(
            hdc: root::HDC,
            x: i32,
            y: i32,
            cx: i32,
            cy: i32,
            hdcSrc: root::HDC,
            x1: i32,
            y1: i32,
            rop: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CancelDC(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn Chord(
            hdc: root::HDC,
            x1: i32,
            y1: i32,
            x2: i32,
            y2: i32,
            x3: i32,
            y3: i32,
            x4: i32,
            y4: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChoosePixelFormat(
            hdc: root::HDC,
            ppfd: *const root::PIXELFORMATDESCRIPTOR,
        ) -> i32;
    }
    extern "C" {
        pub fn CloseMetaFile(hdc: root::HDC) -> root::HMETAFILE;
    }
    extern "C" {
        pub fn CombineRgn(
            hrgnDst: root::HRGN,
            hrgnSrc1: root::HRGN,
            hrgnSrc2: root::HRGN,
            iMode: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn CopyMetaFileA(arg1: root::HMETAFILE, arg2: *const i8) -> root::HMETAFILE;
    }
    extern "C" {
        pub fn CopyMetaFileW(arg1: root::HMETAFILE, arg2: root::LPCWSTR) -> root::HMETAFILE;
    }
    extern "C" {
        pub fn CreateBitmap(
            nWidth: i32,
            nHeight: i32,
            nPlanes: root::UINT,
            nBitCount: root::UINT,
            lpBits: *const ::std::os::raw::c_void,
        ) -> root::HBITMAP;
    }
    extern "C" {
        pub fn CreateBitmapIndirect(pbm: *const root::BITMAP) -> root::HBITMAP;
    }
    extern "C" {
        pub fn CreateBrushIndirect(plbrush: *const root::LOGBRUSH) -> root::HBRUSH;
    }
    extern "C" {
        pub fn CreateCompatibleBitmap(
            hdc: root::HDC,
            cx: i32,
            cy: i32,
        ) -> root::HBITMAP;
    }
    extern "C" {
        pub fn CreateDiscardableBitmap(
            hdc: root::HDC,
            cx: i32,
            cy: i32,
        ) -> root::HBITMAP;
    }
    extern "C" {
        pub fn CreateCompatibleDC(hdc: root::HDC) -> root::HDC;
    }
    extern "C" {
        pub fn CreateDCA(
            pwszDriver: *const i8,
            pwszDevice: *const i8,
            pszPort: *const i8,
            pdm: *const root::DEVMODEA,
        ) -> root::HDC;
    }
    extern "C" {
        pub fn CreateDCW(
            pwszDriver: root::LPCWSTR,
            pwszDevice: root::LPCWSTR,
            pszPort: root::LPCWSTR,
            pdm: *const root::DEVMODEW,
        ) -> root::HDC;
    }
    extern "C" {
        pub fn CreateDIBitmap(
            hdc: root::HDC,
            pbmih: *const root::BITMAPINFOHEADER,
            flInit: u32,
            pjBits: *const ::std::os::raw::c_void,
            pbmi: *const root::BITMAPINFO,
            iUsage: root::UINT,
        ) -> root::HBITMAP;
    }
    extern "C" {
        pub fn CreateDIBPatternBrush(h: root::HGLOBAL, iUsage: root::UINT) -> root::HBRUSH;
    }
    extern "C" {
        pub fn CreateDIBPatternBrushPt(
            lpPackedDIB: *const ::std::os::raw::c_void,
            iUsage: root::UINT,
        ) -> root::HBRUSH;
    }
    extern "C" {
        pub fn CreateEllipticRgn(
            x1: i32,
            y1: i32,
            x2: i32,
            y2: i32,
        ) -> root::HRGN;
    }
    extern "C" {
        pub fn CreateEllipticRgnIndirect(lprect: *const root::RECT) -> root::HRGN;
    }
    extern "C" {
        pub fn CreateFontIndirectA(lplf: *const root::LOGFONTA) -> isize;
    }
    extern "C" {
        pub fn CreateFontIndirectW(lplf: *const root::LOGFONTW) -> isize;
    }
    extern "C" {
        pub fn CreateFontA(
            cHeight: i32,
            cWidth: i32,
            cEscapement: i32,
            cOrientation: i32,
            cWeight: i32,
            bItalic: u32,
            bUnderline: u32,
            bStrikeOut: u32,
            iCharSet: u32,
            iOutPrecision: u32,
            iClipPrecision: u32,
            iQuality: u32,
            iPitchAndFamily: u32,
            pszFaceName: *const i8,
        ) -> isize;
    }
    extern "C" {
        pub fn CreateFontW(
            cHeight: i32,
            cWidth: i32,
            cEscapement: i32,
            cOrientation: i32,
            cWeight: i32,
            bItalic: u32,
            bUnderline: u32,
            bStrikeOut: u32,
            iCharSet: u32,
            iOutPrecision: u32,
            iClipPrecision: u32,
            iQuality: u32,
            iPitchAndFamily: u32,
            pszFaceName: root::LPCWSTR,
        ) -> isize;
    }
    extern "C" {
        pub fn CreateHatchBrush(
            iHatch: i32,
            color: root::COLORREF,
        ) -> root::HBRUSH;
    }
    extern "C" {
        pub fn CreateICA(
            pszDriver: *const i8,
            pszDevice: *const i8,
            pszPort: *const i8,
            pdm: *const root::DEVMODEA,
        ) -> root::HDC;
    }
    extern "C" {
        pub fn CreateICW(
            pszDriver: root::LPCWSTR,
            pszDevice: root::LPCWSTR,
            pszPort: root::LPCWSTR,
            pdm: *const root::DEVMODEW,
        ) -> root::HDC;
    }
    extern "C" {
        pub fn CreateMetaFileA(pszFile: *const i8) -> root::HDC;
    }
    extern "C" {
        pub fn CreateMetaFileW(pszFile: root::LPCWSTR) -> root::HDC;
    }
    extern "C" {
        pub fn CreatePalette(plpal: *const root::LOGPALETTE) -> root::HPALETTE;
    }
    extern "C" {
        pub fn CreatePen(
            iStyle: i32,
            cWidth: i32,
            color: root::COLORREF,
        ) -> root::HPEN;
    }
    extern "C" {
        pub fn CreatePenIndirect(plpen: *const root::LOGPEN) -> root::HPEN;
    }
    extern "C" {
        pub fn CreatePolyPolygonRgn(
            pptl: *const root::POINT,
            pc: *const root::INT,
            cPoly: i32,
            iMode: i32,
        ) -> root::HRGN;
    }
    extern "C" {
        pub fn CreatePatternBrush(hbm: root::HBITMAP) -> root::HBRUSH;
    }
    extern "C" {
        pub fn CreateRectRgn(
            x1: i32,
            y1: i32,
            x2: i32,
            y2: i32,
        ) -> root::HRGN;
    }
    extern "C" {
        pub fn CreateRectRgnIndirect(lprect: *const root::RECT) -> root::HRGN;
    }
    extern "C" {
        pub fn CreateRoundRectRgn(
            x1: i32,
            y1: i32,
            x2: i32,
            y2: i32,
            w: i32,
            h: i32,
        ) -> root::HRGN;
    }
    extern "C" {
        pub fn CreateScalableFontResourceA(
            fdwHidden: u32,
            lpszFont: *const i8,
            lpszFile: *const i8,
            lpszPath: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateScalableFontResourceW(
            fdwHidden: u32,
            lpszFont: root::LPCWSTR,
            lpszFile: root::LPCWSTR,
            lpszPath: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateSolidBrush(color: root::COLORREF) -> root::HBRUSH;
    }
    extern "C" {
        pub fn DeleteDC(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteMetaFile(hmf: root::HMETAFILE) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteObject(ho: root::HGDIOBJ) -> root::BOOL;
    }
    extern "C" {
        pub fn DescribePixelFormat(
            hdc: root::HDC,
            iPixelFormat: i32,
            nBytes: root::UINT,
            ppfd: root::LPPIXELFORMATDESCRIPTOR,
        ) -> i32;
    }
    pub type LPFNDEVMODE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::HMODULE,
            arg3: root::LPDEVMODE,
            arg4: *mut i8,
            arg5: *mut i8,
            arg6: root::LPDEVMODE,
            arg7: *mut i8,
            arg8: root::UINT,
        ) -> root::UINT,
    >;
    pub type LPFNDEVCAPS = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut i8,
            arg2: *mut i8,
            arg3: root::UINT,
            arg4: *mut i8,
            arg5: root::LPDEVMODE,
        ) -> u32,
    >;
    extern "C" {
        pub fn DeviceCapabilitiesA(
            pDevice: *const i8,
            pPort: *const i8,
            fwCapability: u16,
            pOutput: *mut i8,
            pDevMode: *const root::DEVMODEA,
        ) -> i32;
    }
    extern "C" {
        pub fn DeviceCapabilitiesW(
            pDevice: root::LPCWSTR,
            pPort: root::LPCWSTR,
            fwCapability: u16,
            pOutput: root::LPWSTR,
            pDevMode: *const root::DEVMODEW,
        ) -> i32;
    }
    extern "C" {
        pub fn DrawEscape(
            hdc: root::HDC,
            iEscape: i32,
            cjIn: i32,
            lpIn: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn Ellipse(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumFontFamiliesExA(
            hdc: root::HDC,
            lpLogfont: root::LPLOGFONTA,
            lpProc: root::FONTENUMPROCA,
            lParam: root::LPARAM,
            dwFlags: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumFontFamiliesExW(
            hdc: root::HDC,
            lpLogfont: root::LPLOGFONTW,
            lpProc: root::FONTENUMPROCW,
            lParam: root::LPARAM,
            dwFlags: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumFontFamiliesA(
            hdc: root::HDC,
            lpLogfont: *const i8,
            lpProc: root::FONTENUMPROCA,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumFontFamiliesW(
            hdc: root::HDC,
            lpLogfont: root::LPCWSTR,
            lpProc: root::FONTENUMPROCW,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumFontsA(
            hdc: root::HDC,
            lpLogfont: *const i8,
            lpProc: root::FONTENUMPROCA,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumFontsW(
            hdc: root::HDC,
            lpLogfont: root::LPCWSTR,
            lpProc: root::FONTENUMPROCW,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumObjects(
            hdc: root::HDC,
            nType: i32,
            lpFunc: root::GOBJENUMPROC,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EqualRgn(hrgn1: root::HRGN, hrgn2: root::HRGN) -> root::BOOL;
    }
    extern "C" {
        pub fn Escape(
            hdc: root::HDC,
            iEscape: i32,
            cjIn: i32,
            pvIn: *const i8,
            pvOut: root::LPVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn ExtEscape(
            hdc: root::HDC,
            iEscape: i32,
            cjInput: i32,
            lpInData: *const i8,
            cjOutput: i32,
            lpOutData: *mut i8,
        ) -> i32;
    }
    extern "C" {
        pub fn ExcludeClipRect(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn ExtCreateRegion(
            lpx: *const root::XFORM,
            nCount: u32,
            lpData: *const root::RGNDATA,
        ) -> root::HRGN;
    }
    extern "C" {
        pub fn ExtFloodFill(
            hdc: root::HDC,
            x: i32,
            y: i32,
            color: root::COLORREF,
            type_: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FillRgn(hdc: root::HDC, hrgn: root::HRGN, hbr: root::HBRUSH) -> root::BOOL;
    }
    extern "C" {
        pub fn FloodFill(
            hdc: root::HDC,
            x: i32,
            y: i32,
            color: root::COLORREF,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FrameRgn(
            hdc: root::HDC,
            hrgn: root::HRGN,
            hbr: root::HBRUSH,
            w: i32,
            h: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetROP2(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetAspectRatioFilterEx(hdc: root::HDC, lpsize: root::LPSIZE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetBkColor(hdc: root::HDC) -> root::COLORREF;
    }
    extern "C" {
        pub fn GetDCBrushColor(hdc: root::HDC) -> root::COLORREF;
    }
    extern "C" {
        pub fn GetDCPenColor(hdc: root::HDC) -> root::COLORREF;
    }
    extern "C" {
        pub fn GetBkMode(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetBitmapBits(
            hbit: root::HBITMAP,
            cb: i32,
            lpvBits: root::LPVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn GetBitmapDimensionEx(hbit: root::HBITMAP, lpsize: root::LPSIZE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetBoundsRect(hdc: root::HDC, lprect: root::LPRECT, flags: root::UINT)
            -> root::UINT;
    }
    extern "C" {
        pub fn GetBrushOrgEx(hdc: root::HDC, lppt: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidthA(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpBuffer: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidthW(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpBuffer: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidth32A(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpBuffer: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidth32W(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpBuffer: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidthFloatA(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpBuffer: root::PFLOAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidthFloatW(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpBuffer: root::PFLOAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharABCWidthsA(
            hdc: root::HDC,
            wFirst: root::UINT,
            wLast: root::UINT,
            lpABC: root::LPABC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharABCWidthsW(
            hdc: root::HDC,
            wFirst: root::UINT,
            wLast: root::UINT,
            lpABC: root::LPABC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharABCWidthsFloatA(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpABC: root::LPABCFLOAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharABCWidthsFloatW(
            hdc: root::HDC,
            iFirst: root::UINT,
            iLast: root::UINT,
            lpABC: root::LPABCFLOAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetClipBox(hdc: root::HDC, lprect: root::LPRECT) -> i32;
    }
    extern "C" {
        pub fn GetClipRgn(hdc: root::HDC, hrgn: root::HRGN) -> i32;
    }
    extern "C" {
        pub fn GetMetaRgn(hdc: root::HDC, hrgn: root::HRGN) -> i32;
    }
    extern "C" {
        pub fn GetCurrentObject(hdc: root::HDC, type_: root::UINT) -> root::HGDIOBJ;
    }
    extern "C" {
        pub fn GetCurrentPositionEx(hdc: root::HDC, lppt: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDeviceCaps(hdc: root::HDC, index: i32)
            -> i32;
    }
    extern "C" {
        pub fn GetDIBits(
            hdc: root::HDC,
            hbm: root::HBITMAP,
            start: root::UINT,
            cLines: root::UINT,
            lpvBits: root::LPVOID,
            lpbmi: root::LPBITMAPINFO,
            usage: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn GetFontData(
            hdc: root::HDC,
            dwTable: u32,
            dwOffset: u32,
            pvBuffer: root::PVOID,
            cjBuffer: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetGlyphOutlineA(
            hdc: root::HDC,
            uChar: root::UINT,
            fuFormat: root::UINT,
            lpgm: root::LPGLYPHMETRICS,
            cjBuffer: u32,
            pvBuffer: root::LPVOID,
            lpmat2: *const root::MAT2,
        ) -> u32;
    }
    extern "C" {
        pub fn GetGlyphOutlineW(
            hdc: root::HDC,
            uChar: root::UINT,
            fuFormat: root::UINT,
            lpgm: root::LPGLYPHMETRICS,
            cjBuffer: u32,
            pvBuffer: root::LPVOID,
            lpmat2: *const root::MAT2,
        ) -> u32;
    }
    extern "C" {
        pub fn GetGraphicsMode(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetMapMode(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetMetaFileBitsEx(
            hMF: root::HMETAFILE,
            cbBuffer: root::UINT,
            lpData: root::LPVOID,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetMetaFileA(lpName: *const i8) -> root::HMETAFILE;
    }
    extern "C" {
        pub fn GetMetaFileW(lpName: root::LPCWSTR) -> root::HMETAFILE;
    }
    extern "C" {
        pub fn GetNearestColor(hdc: root::HDC, color: root::COLORREF) -> root::COLORREF;
    }
    extern "C" {
        pub fn GetNearestPaletteIndex(h: root::HPALETTE, color: root::COLORREF) -> root::UINT;
    }
    extern "C" {
        pub fn GetObjectType(h: root::HGDIOBJ) -> u32;
    }
    extern "C" {
        pub fn GetOutlineTextMetricsA(
            hdc: root::HDC,
            cjCopy: root::UINT,
            potm: root::LPOUTLINETEXTMETRICA,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetOutlineTextMetricsW(
            hdc: root::HDC,
            cjCopy: root::UINT,
            potm: root::LPOUTLINETEXTMETRICW,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetPaletteEntries(
            hpal: root::HPALETTE,
            iStart: root::UINT,
            cEntries: root::UINT,
            pPalEntries: root::LPPALETTEENTRY,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetPixel(
            hdc: root::HDC,
            x: i32,
            y: i32,
        ) -> root::COLORREF;
    }
    extern "C" {
        pub fn GetPixelFormat(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetPolyFillMode(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetRasterizerCaps(
            lpraststat: root::LPRASTERIZER_STATUS,
            cjBytes: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetRandomRgn(
            hdc: root::HDC,
            hrgn: root::HRGN,
            i: root::INT,
        ) -> i32;
    }
    extern "C" {
        pub fn GetRegionData(
            hrgn: root::HRGN,
            nCount: u32,
            lpRgnData: root::LPRGNDATA,
        ) -> u32;
    }
    extern "C" {
        pub fn GetRgnBox(hrgn: root::HRGN, lprc: root::LPRECT) -> i32;
    }
    extern "C" {
        pub fn GetStockObject(i: i32) -> root::HGDIOBJ;
    }
    extern "C" {
        pub fn GetStretchBltMode(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetSystemPaletteEntries(
            hdc: root::HDC,
            iStart: root::UINT,
            cEntries: root::UINT,
            pPalEntries: root::LPPALETTEENTRY,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemPaletteUse(hdc: root::HDC) -> root::UINT;
    }
    extern "C" {
        pub fn GetTextCharacterExtra(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetTextAlign(hdc: root::HDC) -> root::UINT;
    }
    extern "C" {
        pub fn GetTextColor(hdc: root::HDC) -> root::COLORREF;
    }
    extern "C" {
        pub fn GetTextExtentPointA(
            hdc: root::HDC,
            lpString: *const i8,
            c: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextExtentPointW(
            hdc: root::HDC,
            lpString: root::LPCWSTR,
            c: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextExtentPoint32A(
            hdc: root::HDC,
            lpString: *const i8,
            c: i32,
            psizl: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextExtentPoint32W(
            hdc: root::HDC,
            lpString: root::LPCWSTR,
            c: i32,
            psizl: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextExtentExPointA(
            hdc: root::HDC,
            lpszString: *const i8,
            cchString: i32,
            nMaxExtent: i32,
            lpnFit: root::LPINT,
            lpnDx: root::LPINT,
            lpSize: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextExtentExPointW(
            hdc: root::HDC,
            lpszString: root::LPCWSTR,
            cchString: i32,
            nMaxExtent: i32,
            lpnFit: root::LPINT,
            lpnDx: root::LPINT,
            lpSize: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextCharset(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetTextCharsetInfo(
            hdc: root::HDC,
            lpSig: root::LPFONTSIGNATURE,
            dwFlags: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn TranslateCharsetInfo(
            lpSrc: *mut u32,
            lpCs: root::LPCHARSETINFO,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFontLanguageInfo(hdc: root::HDC) -> u32;
    }
    extern "C" {
        pub fn GetCharacterPlacementA(
            hdc: root::HDC,
            lpString: *const i8,
            nCount: i32,
            nMexExtent: i32,
            lpResults: root::LPGCP_RESULTSA,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetCharacterPlacementW(
            hdc: root::HDC,
            lpString: root::LPCWSTR,
            nCount: i32,
            nMexExtent: i32,
            lpResults: root::LPGCP_RESULTSW,
            dwFlags: u32,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWCRANGE {
        pub wcLow: u16,
        pub cGlyphs: root::USHORT,
    }
    pub type WCRANGE = root::tagWCRANGE;
    pub type PWCRANGE = *mut root::tagWCRANGE;
    pub type LPWCRANGE = *mut root::tagWCRANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGLYPHSET {
        pub cbThis: u32,
        pub flAccel: u32,
        pub cGlyphsSupported: u32,
        pub cRanges: u32,
        pub ranges: [root::WCRANGE; 1usize],
    }
    pub type GLYPHSET = root::tagGLYPHSET;
    pub type PGLYPHSET = *mut root::tagGLYPHSET;
    pub type LPGLYPHSET = *mut root::tagGLYPHSET;
    extern "C" {
        pub fn GetFontUnicodeRanges(hdc: root::HDC, lpgs: root::LPGLYPHSET) -> u32;
    }
    extern "C" {
        pub fn GetGlyphIndicesA(
            hdc: root::HDC,
            lpstr: *const i8,
            c: i32,
            pgi: root::LPWORD,
            fl: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetGlyphIndicesW(
            hdc: root::HDC,
            lpstr: root::LPCWSTR,
            c: i32,
            pgi: root::LPWORD,
            fl: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetTextExtentPointI(
            hdc: root::HDC,
            pgiIn: root::LPWORD,
            cgi: i32,
            psize: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextExtentExPointI(
            hdc: root::HDC,
            lpwszString: root::LPWORD,
            cwchString: i32,
            nMaxExtent: i32,
            lpnFit: root::LPINT,
            lpnDx: root::LPINT,
            lpSize: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharWidthI(
            hdc: root::HDC,
            giFirst: root::UINT,
            cgi: root::UINT,
            pgi: root::LPWORD,
            piWidths: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCharABCWidthsI(
            hdc: root::HDC,
            giFirst: root::UINT,
            cgi: root::UINT,
            pgi: root::LPWORD,
            pabc: root::LPABC,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDESIGNVECTOR {
        pub dvReserved: u32,
        pub dvNumAxes: u32,
        pub dvValues: [i32; 16usize],
    }
    pub type DESIGNVECTOR = root::tagDESIGNVECTOR;
    pub type PDESIGNVECTOR = *mut root::tagDESIGNVECTOR;
    pub type LPDESIGNVECTOR = *mut root::tagDESIGNVECTOR;
    extern "C" {
        pub fn AddFontResourceExA(
            name: *const i8,
            fl: u32,
            res: root::PVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn AddFontResourceExW(
            name: root::LPCWSTR,
            fl: u32,
            res: root::PVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn RemoveFontResourceExA(
            name: *const i8,
            fl: u32,
            pdv: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveFontResourceExW(
            name: root::LPCWSTR,
            fl: u32,
            pdv: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddFontMemResourceEx(
            pFileView: root::PVOID,
            cjSize: u32,
            pvResrved: root::PVOID,
            pNumFonts: *mut u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn RemoveFontMemResourceEx(h: root::HANDLE) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAXISINFOA {
        pub axMinValue: i32,
        pub axMaxValue: i32,
        pub axAxisName: [u8; 16usize],
    }
    pub type AXISINFOA = root::tagAXISINFOA;
    pub type PAXISINFOA = *mut root::tagAXISINFOA;
    pub type LPAXISINFOA = *mut root::tagAXISINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAXISINFOW {
        pub axMinValue: i32,
        pub axMaxValue: i32,
        pub axAxisName: [u16; 16usize],
    }
    pub type AXISINFOW = root::tagAXISINFOW;
    pub type PAXISINFOW = *mut root::tagAXISINFOW;
    pub type LPAXISINFOW = *mut root::tagAXISINFOW;
    pub type AXISINFO = root::AXISINFOA;
    pub type PAXISINFO = root::PAXISINFOA;
    pub type LPAXISINFO = root::LPAXISINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAXESLISTA {
        pub axlReserved: u32,
        pub axlNumAxes: u32,
        pub axlAxisInfo: [root::AXISINFOA; 16usize],
    }
    pub type AXESLISTA = root::tagAXESLISTA;
    pub type PAXESLISTA = *mut root::tagAXESLISTA;
    pub type LPAXESLISTA = *mut root::tagAXESLISTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAXESLISTW {
        pub axlReserved: u32,
        pub axlNumAxes: u32,
        pub axlAxisInfo: [root::AXISINFOW; 16usize],
    }
    pub type AXESLISTW = root::tagAXESLISTW;
    pub type PAXESLISTW = *mut root::tagAXESLISTW;
    pub type LPAXESLISTW = *mut root::tagAXESLISTW;
    pub type AXESLIST = root::AXESLISTA;
    pub type PAXESLIST = root::PAXESLISTA;
    pub type LPAXESLIST = root::LPAXESLISTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMLOGFONTEXDVA {
        pub elfEnumLogfontEx: root::ENUMLOGFONTEXA,
        pub elfDesignVector: root::DESIGNVECTOR,
    }
    pub type ENUMLOGFONTEXDVA = root::tagENUMLOGFONTEXDVA;
    pub type PENUMLOGFONTEXDVA = *mut root::tagENUMLOGFONTEXDVA;
    pub type LPENUMLOGFONTEXDVA = *mut root::tagENUMLOGFONTEXDVA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMLOGFONTEXDVW {
        pub elfEnumLogfontEx: root::ENUMLOGFONTEXW,
        pub elfDesignVector: root::DESIGNVECTOR,
    }
    pub type ENUMLOGFONTEXDVW = root::tagENUMLOGFONTEXDVW;
    pub type PENUMLOGFONTEXDVW = *mut root::tagENUMLOGFONTEXDVW;
    pub type LPENUMLOGFONTEXDVW = *mut root::tagENUMLOGFONTEXDVW;
    pub type ENUMLOGFONTEXDV = root::ENUMLOGFONTEXDVA;
    pub type PENUMLOGFONTEXDV = root::PENUMLOGFONTEXDVA;
    pub type LPENUMLOGFONTEXDV = root::LPENUMLOGFONTEXDVA;
    extern "C" {
        pub fn CreateFontIndirectExA(arg1: *const root::ENUMLOGFONTEXDVA) -> isize;
    }
    extern "C" {
        pub fn CreateFontIndirectExW(arg1: *const root::ENUMLOGFONTEXDVW) -> isize;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMTEXTMETRICA {
        pub etmNewTextMetricEx: root::NEWTEXTMETRICEXA,
        pub etmAxesList: root::AXESLISTA,
    }
    pub type ENUMTEXTMETRICA = root::tagENUMTEXTMETRICA;
    pub type PENUMTEXTMETRICA = *mut root::tagENUMTEXTMETRICA;
    pub type LPENUMTEXTMETRICA = *mut root::tagENUMTEXTMETRICA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagENUMTEXTMETRICW {
        pub etmNewTextMetricEx: root::NEWTEXTMETRICEXW,
        pub etmAxesList: root::AXESLISTW,
    }
    pub type ENUMTEXTMETRICW = root::tagENUMTEXTMETRICW;
    pub type PENUMTEXTMETRICW = *mut root::tagENUMTEXTMETRICW;
    pub type LPENUMTEXTMETRICW = *mut root::tagENUMTEXTMETRICW;
    pub type ENUMTEXTMETRIC = root::ENUMTEXTMETRICA;
    pub type PENUMTEXTMETRIC = root::PENUMTEXTMETRICA;
    pub type LPENUMTEXTMETRIC = root::LPENUMTEXTMETRICA;
    extern "C" {
        pub fn GetViewportExtEx(hdc: root::HDC, lpsize: root::LPSIZE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetViewportOrgEx(hdc: root::HDC, lppoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowExtEx(hdc: root::HDC, lpsize: root::LPSIZE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowOrgEx(hdc: root::HDC, lppoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn IntersectClipRect(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn InvertRgn(hdc: root::HDC, hrgn: root::HRGN) -> root::BOOL;
    }
    extern "C" {
        pub fn LineDDA(
            xStart: i32,
            yStart: i32,
            xEnd: i32,
            yEnd: i32,
            lpProc: root::LINEDDAPROC,
            data: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LineTo(
            hdc: root::HDC,
            x: i32,
            y: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MaskBlt(
            hdcDest: root::HDC,
            xDest: i32,
            yDest: i32,
            width: i32,
            height: i32,
            hdcSrc: root::HDC,
            xSrc: i32,
            ySrc: i32,
            hbmMask: root::HBITMAP,
            xMask: i32,
            yMask: i32,
            rop: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PlgBlt(
            hdcDest: root::HDC,
            lpPoint: *const root::POINT,
            hdcSrc: root::HDC,
            xSrc: i32,
            ySrc: i32,
            width: i32,
            height: i32,
            hbmMask: root::HBITMAP,
            xMask: i32,
            yMask: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OffsetClipRgn(
            hdc: root::HDC,
            x: i32,
            y: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn OffsetRgn(
            hrgn: root::HRGN,
            x: i32,
            y: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn PatBlt(
            hdc: root::HDC,
            x: i32,
            y: i32,
            w: i32,
            h: i32,
            rop: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Pie(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
            xr1: i32,
            yr1: i32,
            xr2: i32,
            yr2: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PlayMetaFile(hdc: root::HDC, hmf: root::HMETAFILE) -> root::BOOL;
    }
    extern "C" {
        pub fn PaintRgn(hdc: root::HDC, hrgn: root::HRGN) -> root::BOOL;
    }
    extern "C" {
        pub fn PolyPolygon(
            hdc: root::HDC,
            apt: *const root::POINT,
            asz: *const root::INT,
            csz: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PtInRegion(
            hrgn: root::HRGN,
            x: i32,
            y: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PtVisible(
            hdc: root::HDC,
            x: i32,
            y: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RectInRegion(hrgn: root::HRGN, lprect: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn RectVisible(hdc: root::HDC, lprect: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn Rectangle(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RestoreDC(hdc: root::HDC, nSavedDC: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn ResetDCA(hdc: root::HDC, lpdm: *const root::DEVMODEA) -> root::HDC;
    }
    extern "C" {
        pub fn ResetDCW(hdc: root::HDC, lpdm: *const root::DEVMODEW) -> root::HDC;
    }
    extern "C" {
        pub fn RealizePalette(hdc: root::HDC) -> root::UINT;
    }
    extern "C" {
        pub fn RemoveFontResourceA(lpFileName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveFontResourceW(lpFileName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn RoundRect(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
            width: i32,
            height: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ResizePalette(hpal: root::HPALETTE, n: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn SaveDC(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn SelectClipRgn(hdc: root::HDC, hrgn: root::HRGN) -> i32;
    }
    extern "C" {
        pub fn ExtSelectClipRgn(
            hdc: root::HDC,
            hrgn: root::HRGN,
            mode: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetMetaRgn(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn SelectObject(hdc: root::HDC, h: root::HGDIOBJ) -> root::HGDIOBJ;
    }
    extern "C" {
        pub fn SelectPalette(
            hdc: root::HDC,
            hPal: root::HPALETTE,
            bForceBkgd: root::BOOL,
        ) -> root::HPALETTE;
    }
    extern "C" {
        pub fn SetBkColor(hdc: root::HDC, color: root::COLORREF) -> root::COLORREF;
    }
    extern "C" {
        pub fn SetDCBrushColor(hdc: root::HDC, color: root::COLORREF) -> root::COLORREF;
    }
    extern "C" {
        pub fn SetDCPenColor(hdc: root::HDC, color: root::COLORREF) -> root::COLORREF;
    }
    extern "C" {
        pub fn SetBkMode(hdc: root::HDC, mode: i32) -> i32;
    }
    extern "C" {
        pub fn SetBitmapBits(
            hbm: root::HBITMAP,
            cb: u32,
            pvBits: *const ::std::os::raw::c_void,
        ) -> i32;
    }
    extern "C" {
        pub fn SetBoundsRect(
            hdc: root::HDC,
            lprect: *const root::RECT,
            flags: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn SetDIBits(
            hdc: root::HDC,
            hbm: root::HBITMAP,
            start: root::UINT,
            cLines: root::UINT,
            lpBits: *const ::std::os::raw::c_void,
            lpbmi: *const root::BITMAPINFO,
            ColorUse: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn SetDIBitsToDevice(
            hdc: root::HDC,
            xDest: i32,
            yDest: i32,
            w: u32,
            h: u32,
            xSrc: i32,
            ySrc: i32,
            StartScan: root::UINT,
            cLines: root::UINT,
            lpvBits: *const ::std::os::raw::c_void,
            lpbmi: *const root::BITMAPINFO,
            ColorUse: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn SetMapperFlags(hdc: root::HDC, flags: u32) -> u32;
    }
    extern "C" {
        pub fn SetGraphicsMode(
            hdc: root::HDC,
            iMode: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetMapMode(hdc: root::HDC, iMode: i32) -> i32;
    }
    extern "C" {
        pub fn SetLayout(hdc: root::HDC, l: u32) -> u32;
    }
    extern "C" {
        pub fn GetLayout(hdc: root::HDC) -> u32;
    }
    extern "C" {
        pub fn SetMetaFileBitsEx(
            cbBuffer: root::UINT,
            lpData: *const u8,
        ) -> root::HMETAFILE;
    }
    extern "C" {
        pub fn SetPaletteEntries(
            hpal: root::HPALETTE,
            iStart: root::UINT,
            cEntries: root::UINT,
            pPalEntries: *const root::PALETTEENTRY,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn SetPixel(
            hdc: root::HDC,
            x: i32,
            y: i32,
            color: root::COLORREF,
        ) -> root::COLORREF;
    }
    extern "C" {
        pub fn SetPixelV(
            hdc: root::HDC,
            x: i32,
            y: i32,
            color: root::COLORREF,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPixelFormat(
            hdc: root::HDC,
            format: i32,
            ppfd: *const root::PIXELFORMATDESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPolyFillMode(
            hdc: root::HDC,
            mode: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StretchBlt(
            hdcDest: root::HDC,
            xDest: i32,
            yDest: i32,
            wDest: i32,
            hDest: i32,
            hdcSrc: root::HDC,
            xSrc: i32,
            ySrc: i32,
            wSrc: i32,
            hSrc: i32,
            rop: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetRectRgn(
            hrgn: root::HRGN,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StretchDIBits(
            hdc: root::HDC,
            xDest: i32,
            yDest: i32,
            DestWidth: i32,
            DestHeight: i32,
            xSrc: i32,
            ySrc: i32,
            SrcWidth: i32,
            SrcHeight: i32,
            lpBits: *const ::std::os::raw::c_void,
            lpbmi: *const root::BITMAPINFO,
            iUsage: root::UINT,
            rop: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetROP2(hdc: root::HDC, rop2: i32) -> i32;
    }
    extern "C" {
        pub fn SetStretchBltMode(
            hdc: root::HDC,
            mode: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetSystemPaletteUse(hdc: root::HDC, use_: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn SetTextCharacterExtra(
            hdc: root::HDC,
            extra: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetTextColor(hdc: root::HDC, color: root::COLORREF) -> root::COLORREF;
    }
    extern "C" {
        pub fn SetTextAlign(hdc: root::HDC, align: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn SetTextJustification(
            hdc: root::HDC,
            extra: i32,
            count: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UpdateColors(hdc: root::HDC) -> root::BOOL;
    }
    pub type COLOR16 = root::USHORT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRIVERTEX {
        pub x: i32,
        pub y: i32,
        pub Red: root::COLOR16,
        pub Green: root::COLOR16,
        pub Blue: root::COLOR16,
        pub Alpha: root::COLOR16,
    }
    pub type TRIVERTEX = root::_TRIVERTEX;
    pub type PTRIVERTEX = *mut root::_TRIVERTEX;
    pub type LPTRIVERTEX = *mut root::_TRIVERTEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GRADIENT_TRIANGLE {
        pub Vertex1: root::ULONG,
        pub Vertex2: root::ULONG,
        pub Vertex3: root::ULONG,
    }
    pub type GRADIENT_TRIANGLE = root::_GRADIENT_TRIANGLE;
    pub type PGRADIENT_TRIANGLE = *mut root::_GRADIENT_TRIANGLE;
    pub type LPGRADIENT_TRIANGLE = *mut root::_GRADIENT_TRIANGLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GRADIENT_RECT {
        pub UpperLeft: root::ULONG,
        pub LowerRight: root::ULONG,
    }
    pub type GRADIENT_RECT = root::_GRADIENT_RECT;
    pub type PGRADIENT_RECT = *mut root::_GRADIENT_RECT;
    pub type LPGRADIENT_RECT = *mut root::_GRADIENT_RECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BLENDFUNCTION {
        pub BlendOp: u8,
        pub BlendFlags: u8,
        pub SourceConstantAlpha: u8,
        pub AlphaFormat: u8,
    }
    pub type BLENDFUNCTION = root::_BLENDFUNCTION;
    pub type PBLENDFUNCTION = *mut root::_BLENDFUNCTION;
    extern "C" {
        pub fn AlphaBlend(
            hdcDest: root::HDC,
            xoriginDest: i32,
            yoriginDest: i32,
            wDest: i32,
            hDest: i32,
            hdcSrc: root::HDC,
            xoriginSrc: i32,
            yoriginSrc: i32,
            wSrc: i32,
            hSrc: i32,
            ftn: root::BLENDFUNCTION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TransparentBlt(
            hdcDest: root::HDC,
            xoriginDest: i32,
            yoriginDest: i32,
            wDest: i32,
            hDest: i32,
            hdcSrc: root::HDC,
            xoriginSrc: i32,
            yoriginSrc: i32,
            wSrc: i32,
            hSrc: i32,
            crTransparent: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GradientFill(
            hdc: root::HDC,
            pVertex: root::PTRIVERTEX,
            nVertex: root::ULONG,
            pMesh: root::PVOID,
            nMesh: root::ULONG,
            ulMode: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GdiAlphaBlend(
            hdcDest: root::HDC,
            xoriginDest: i32,
            yoriginDest: i32,
            wDest: i32,
            hDest: i32,
            hdcSrc: root::HDC,
            xoriginSrc: i32,
            yoriginSrc: i32,
            wSrc: i32,
            hSrc: i32,
            ftn: root::BLENDFUNCTION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GdiTransparentBlt(
            hdcDest: root::HDC,
            xoriginDest: i32,
            yoriginDest: i32,
            wDest: i32,
            hDest: i32,
            hdcSrc: root::HDC,
            xoriginSrc: i32,
            yoriginSrc: i32,
            wSrc: i32,
            hSrc: i32,
            crTransparent: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GdiGradientFill(
            hdc: root::HDC,
            pVertex: root::PTRIVERTEX,
            nVertex: root::ULONG,
            pMesh: root::PVOID,
            nCount: root::ULONG,
            ulMode: root::ULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PlayMetaFileRecord(
            hdc: root::HDC,
            lpHandleTable: root::LPHANDLETABLE,
            lpMR: root::LPMETARECORD,
            noObjs: root::UINT,
        ) -> root::BOOL;
    }
    pub type MFENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(
            hdc: root::HDC,
            lpht: *mut root::HANDLETABLE,
            lpMR: *mut root::METARECORD,
            nObj: i32,
            param: root::LPARAM,
        ) -> i32,
    >;
    extern "C" {
        pub fn EnumMetaFile(
            hdc: root::HDC,
            hmf: root::HMETAFILE,
            proc_: root::MFENUMPROC,
            param: root::LPARAM,
        ) -> root::BOOL;
    }
    pub type ENHMFENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(
            hdc: root::HDC,
            lpht: *mut root::HANDLETABLE,
            lpmr: *const root::ENHMETARECORD,
            nHandles: i32,
            data: root::LPARAM,
        ) -> i32,
    >;
    extern "C" {
        pub fn CloseEnhMetaFile(hdc: root::HDC) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn CopyEnhMetaFileA(
            hEnh: root::HENHMETAFILE,
            lpFileName: *const i8,
        ) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn CopyEnhMetaFileW(
            hEnh: root::HENHMETAFILE,
            lpFileName: root::LPCWSTR,
        ) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn CreateEnhMetaFileA(
            hdc: root::HDC,
            lpFilename: *const i8,
            lprc: *const root::RECT,
            lpDesc: *const i8,
        ) -> root::HDC;
    }
    extern "C" {
        pub fn CreateEnhMetaFileW(
            hdc: root::HDC,
            lpFilename: root::LPCWSTR,
            lprc: *const root::RECT,
            lpDesc: root::LPCWSTR,
        ) -> root::HDC;
    }
    extern "C" {
        pub fn DeleteEnhMetaFile(hmf: root::HENHMETAFILE) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumEnhMetaFile(
            hdc: root::HDC,
            hmf: root::HENHMETAFILE,
            proc_: root::ENHMFENUMPROC,
            param: root::LPVOID,
            lpRect: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetEnhMetaFileA(lpName: *const i8) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn GetEnhMetaFileW(lpName: root::LPCWSTR) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn GetEnhMetaFileBits(
            hEMF: root::HENHMETAFILE,
            nSize: root::UINT,
            lpData: root::LPBYTE,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetEnhMetaFileDescriptionA(
            hemf: root::HENHMETAFILE,
            cchBuffer: root::UINT,
            lpDescription: *mut i8,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetEnhMetaFileDescriptionW(
            hemf: root::HENHMETAFILE,
            cchBuffer: root::UINT,
            lpDescription: root::LPWSTR,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetEnhMetaFileHeader(
            hemf: root::HENHMETAFILE,
            nSize: root::UINT,
            lpEnhMetaHeader: root::LPENHMETAHEADER,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetEnhMetaFilePaletteEntries(
            hemf: root::HENHMETAFILE,
            nNumEntries: root::UINT,
            lpPaletteEntries: root::LPPALETTEENTRY,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetEnhMetaFilePixelFormat(
            hemf: root::HENHMETAFILE,
            cbBuffer: root::UINT,
            ppfd: *mut root::PIXELFORMATDESCRIPTOR,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetWinMetaFileBits(
            hemf: root::HENHMETAFILE,
            cbData16: root::UINT,
            pData16: root::LPBYTE,
            iMapMode: root::INT,
            hdcRef: root::HDC,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn PlayEnhMetaFile(
            hdc: root::HDC,
            hmf: root::HENHMETAFILE,
            lprect: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PlayEnhMetaFileRecord(
            hdc: root::HDC,
            pht: root::LPHANDLETABLE,
            pmr: *const root::ENHMETARECORD,
            cht: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetEnhMetaFileBits(nSize: root::UINT, pb: *const u8) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn SetWinMetaFileBits(
            nSize: root::UINT,
            lpMeta16Data: *const u8,
            hdcRef: root::HDC,
            lpMFP: *const root::METAFILEPICT,
        ) -> root::HENHMETAFILE;
    }
    extern "C" {
        pub fn GdiComment(
            hdc: root::HDC,
            nSize: root::UINT,
            lpData: *const u8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextMetricsA(hdc: root::HDC, lptm: root::LPTEXTMETRICA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextMetricsW(hdc: root::HDC, lptm: root::LPTEXTMETRICW) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDIBSECTION {
        pub dsBm: root::BITMAP,
        pub dsBmih: root::BITMAPINFOHEADER,
        pub dsBitfields: [u32; 3usize],
        pub dshSection: root::HANDLE,
        pub dsOffset: u32,
    }
    pub type DIBSECTION = root::tagDIBSECTION;
    pub type LPDIBSECTION = *mut root::tagDIBSECTION;
    pub type PDIBSECTION = *mut root::tagDIBSECTION;
    extern "C" {
        pub fn AngleArc(
            hdc: root::HDC,
            x: i32,
            y: i32,
            r: u32,
            StartAngle: root::FLOAT,
            SweepAngle: root::FLOAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PolyPolyline(
            hdc: root::HDC,
            apt: *const root::POINT,
            asz: *const u32,
            csz: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWorldTransform(hdc: root::HDC, lpxf: root::LPXFORM) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWorldTransform(hdc: root::HDC, lpxf: *const root::XFORM) -> root::BOOL;
    }
    extern "C" {
        pub fn ModifyWorldTransform(
            hdc: root::HDC,
            lpxf: *const root::XFORM,
            mode: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CombineTransform(
            lpxfOut: root::LPXFORM,
            lpxf1: *const root::XFORM,
            lpxf2: *const root::XFORM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDIBSection(
            hdc: root::HDC,
            pbmi: *const root::BITMAPINFO,
            usage: root::UINT,
            ppvBits: *mut *mut ::std::os::raw::c_void,
            hSection: root::HANDLE,
            offset: u32,
        ) -> root::HBITMAP;
    }
    extern "C" {
        pub fn GetDIBColorTable(
            hdc: root::HDC,
            iStart: root::UINT,
            cEntries: root::UINT,
            prgbq: *mut root::RGBQUAD,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn SetDIBColorTable(
            hdc: root::HDC,
            iStart: root::UINT,
            cEntries: root::UINT,
            prgbq: *const root::RGBQUAD,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOLORADJUSTMENT {
        pub caSize: u16,
        pub caFlags: u16,
        pub caIlluminantIndex: u16,
        pub caRedGamma: u16,
        pub caGreenGamma: u16,
        pub caBlueGamma: u16,
        pub caReferenceBlack: u16,
        pub caReferenceWhite: u16,
        pub caContrast: i16,
        pub caBrightness: i16,
        pub caColorfulness: i16,
        pub caRedGreenTint: i16,
    }
    pub type COLORADJUSTMENT = root::tagCOLORADJUSTMENT;
    pub type PCOLORADJUSTMENT = *mut root::tagCOLORADJUSTMENT;
    pub type LPCOLORADJUSTMENT = *mut root::tagCOLORADJUSTMENT;
    extern "C" {
        pub fn SetColorAdjustment(hdc: root::HDC, lpca: *const root::COLORADJUSTMENT)
            -> root::BOOL;
    }
    extern "C" {
        pub fn GetColorAdjustment(hdc: root::HDC, lpca: root::LPCOLORADJUSTMENT) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateHalftonePalette(hdc: root::HDC) -> root::HPALETTE;
    }
    pub type ABORTPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::HDC, arg2: i32) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOCINFOA {
        pub cbSize: i32,
        pub lpszDocName: *const i8,
        pub lpszOutput: *const i8,
        pub lpszDatatype: *const i8,
        pub fwType: u32,
    }
    pub type DOCINFOA = root::_DOCINFOA;
    pub type LPDOCINFOA = *mut root::_DOCINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOCINFOW {
        pub cbSize: i32,
        pub lpszDocName: root::LPCWSTR,
        pub lpszOutput: root::LPCWSTR,
        pub lpszDatatype: root::LPCWSTR,
        pub fwType: u32,
    }
    pub type DOCINFOW = root::_DOCINFOW;
    pub type LPDOCINFOW = *mut root::_DOCINFOW;
    pub type DOCINFO = root::DOCINFOA;
    pub type LPDOCINFO = root::LPDOCINFOA;
    extern "C" {
        pub fn StartDocA(hdc: root::HDC, lpdi: *const root::DOCINFOA) -> i32;
    }
    extern "C" {
        pub fn StartDocW(hdc: root::HDC, lpdi: *const root::DOCINFOW) -> i32;
    }
    extern "C" {
        pub fn EndDoc(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn StartPage(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn EndPage(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn AbortDoc(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn SetAbortProc(hdc: root::HDC, proc_: root::ABORTPROC) -> i32;
    }
    extern "C" {
        pub fn AbortPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn ArcTo(
            hdc: root::HDC,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
            xr1: i32,
            yr1: i32,
            xr2: i32,
            yr2: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn BeginPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseFigure(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn EndPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn FillPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn FlattenPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPath(
            hdc: root::HDC,
            apt: root::LPPOINT,
            aj: root::LPBYTE,
            cpt: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn PathToRegion(hdc: root::HDC) -> root::HRGN;
    }
    extern "C" {
        pub fn PolyDraw(
            hdc: root::HDC,
            apt: *const root::POINT,
            aj: *const u8,
            cpt: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SelectClipPath(hdc: root::HDC, mode: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn SetArcDirection(hdc: root::HDC, dir: i32)
            -> i32;
    }
    extern "C" {
        pub fn SetMiterLimit(hdc: root::HDC, limit: root::FLOAT, old: root::PFLOAT) -> root::BOOL;
    }
    extern "C" {
        pub fn StrokeAndFillPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn StrokePath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn WidenPath(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn ExtCreatePen(
            iPenStyle: u32,
            cWidth: u32,
            plbrush: *const root::LOGBRUSH,
            cStyle: u32,
            pstyle: *const u32,
        ) -> root::HPEN;
    }
    extern "C" {
        pub fn GetMiterLimit(hdc: root::HDC, plimit: root::PFLOAT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetArcDirection(hdc: root::HDC) -> i32;
    }
    extern "C" {
        pub fn GetObjectA(
            h: root::HANDLE,
            c: i32,
            pv: root::LPVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn GetObjectW(
            h: root::HANDLE,
            c: i32,
            pv: root::LPVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn MoveToEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lppt: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TextOutA(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lpString: *const i8,
            c: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TextOutW(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lpString: root::LPCWSTR,
            c: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ExtTextOutA(
            hdc: root::HDC,
            x: i32,
            y: i32,
            options: root::UINT,
            lprect: *const root::RECT,
            lpString: *const i8,
            c: root::UINT,
            lpDx: *const root::INT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ExtTextOutW(
            hdc: root::HDC,
            x: i32,
            y: i32,
            options: root::UINT,
            lprect: *const root::RECT,
            lpString: root::LPCWSTR,
            c: root::UINT,
            lpDx: *const root::INT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PolyTextOutA(
            hdc: root::HDC,
            ppt: *const root::POLYTEXTA,
            nstrings: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PolyTextOutW(
            hdc: root::HDC,
            ppt: *const root::POLYTEXTW,
            nstrings: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePolygonRgn(
            pptl: *const root::POINT,
            cPoint: i32,
            iMode: i32,
        ) -> root::HRGN;
    }
    extern "C" {
        pub fn DPtoLP(hdc: root::HDC, lppt: root::LPPOINT, c: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn LPtoDP(hdc: root::HDC, lppt: root::LPPOINT, c: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn Polygon(
            hdc: root::HDC,
            apt: *const root::POINT,
            cpt: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Polyline(
            hdc: root::HDC,
            apt: *const root::POINT,
            cpt: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PolyBezier(hdc: root::HDC, apt: *const root::POINT, cpt: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn PolyBezierTo(
            hdc: root::HDC,
            apt: *const root::POINT,
            cpt: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PolylineTo(hdc: root::HDC, apt: *const root::POINT, cpt: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn SetViewportExtEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetViewportOrgEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lppt: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowExtEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowOrgEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lppt: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OffsetViewportOrgEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lppt: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OffsetWindowOrgEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lppt: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScaleViewportExtEx(
            hdc: root::HDC,
            xn: i32,
            dx: i32,
            yn: i32,
            yd: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScaleWindowExtEx(
            hdc: root::HDC,
            xn: i32,
            xd: i32,
            yn: i32,
            yd: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetBitmapDimensionEx(
            hbm: root::HBITMAP,
            w: i32,
            h: i32,
            lpsz: root::LPSIZE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetBrushOrgEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lppt: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetTextFaceA(
            hdc: root::HDC,
            c: i32,
            lpName: *mut i8,
        ) -> i32;
    }
    extern "C" {
        pub fn GetTextFaceW(
            hdc: root::HDC,
            c: i32,
            lpName: root::LPWSTR,
        ) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagKERNINGPAIR {
        pub wFirst: u16,
        pub wSecond: u16,
        pub iKernAmount: i32,
    }
    pub type KERNINGPAIR = root::tagKERNINGPAIR;
    pub type LPKERNINGPAIR = *mut root::tagKERNINGPAIR;
    extern "C" {
        pub fn GetKerningPairsA(
            hdc: root::HDC,
            nPairs: u32,
            lpKernPair: root::LPKERNINGPAIR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetKerningPairsW(
            hdc: root::HDC,
            nPairs: u32,
            lpKernPair: root::LPKERNINGPAIR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetDCOrgEx(hdc: root::HDC, lppt: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn FixBrushOrgEx(
            hdc: root::HDC,
            x: i32,
            y: i32,
            ptl: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnrealizeObject(h: root::HGDIOBJ) -> root::BOOL;
    }
    extern "C" {
        pub fn GdiFlush() -> root::BOOL;
    }
    extern "C" {
        pub fn GdiSetBatchLimit(dw: u32) -> u32;
    }
    extern "C" {
        pub fn GdiGetBatchLimit() -> u32;
    }
    pub type ICMENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut i8, arg2: root::LPARAM) -> i32,
    >;
    pub type ICMENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPWSTR, arg2: root::LPARAM) -> i32,
    >;
    extern "C" {
        pub fn SetICMMode(hdc: root::HDC, mode: i32) -> i32;
    }
    extern "C" {
        pub fn CheckColorsInGamut(
            hdc: root::HDC,
            lpRGBTriple: root::LPRGBTRIPLE,
            dlpBuffer: root::LPVOID,
            nCount: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetColorSpace(hdc: root::HDC) -> root::HCOLORSPACE;
    }
    extern "C" {
        pub fn GetLogColorSpaceA(
            hColorSpace: root::HCOLORSPACE,
            lpBuffer: root::LPLOGCOLORSPACEA,
            nSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLogColorSpaceW(
            hColorSpace: root::HCOLORSPACE,
            lpBuffer: root::LPLOGCOLORSPACEW,
            nSize: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateColorSpaceA(lplcs: root::LPLOGCOLORSPACEA) -> root::HCOLORSPACE;
    }
    extern "C" {
        pub fn CreateColorSpaceW(lplcs: root::LPLOGCOLORSPACEW) -> root::HCOLORSPACE;
    }
    extern "C" {
        pub fn SetColorSpace(hdc: root::HDC, hcs: root::HCOLORSPACE) -> root::HCOLORSPACE;
    }
    extern "C" {
        pub fn DeleteColorSpace(hcs: root::HCOLORSPACE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetICMProfileA(
            hdc: root::HDC,
            pBufSize: root::LPDWORD,
            pszFilename: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetICMProfileW(
            hdc: root::HDC,
            pBufSize: root::LPDWORD,
            pszFilename: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetICMProfileA(hdc: root::HDC, lpFileName: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetICMProfileW(hdc: root::HDC, lpFileName: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDeviceGammaRamp(hdc: root::HDC, lpRamp: root::LPVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDeviceGammaRamp(hdc: root::HDC, lpRamp: root::LPVOID) -> root::BOOL;
    }
    extern "C" {
        pub fn ColorMatchToTarget(
            hdc: root::HDC,
            hdcTarget: root::HDC,
            action: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumICMProfilesA(
            hdc: root::HDC,
            proc_: root::ICMENUMPROCA,
            param: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumICMProfilesW(
            hdc: root::HDC,
            proc_: root::ICMENUMPROCW,
            param: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn UpdateICMRegKeyA(
            reserved: u32,
            lpszCMID: *mut i8,
            lpszFileName: *mut i8,
            command: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UpdateICMRegKeyW(
            reserved: u32,
            lpszCMID: root::LPWSTR,
            lpszFileName: root::LPWSTR,
            command: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ColorCorrectPalette(
            hdc: root::HDC,
            hPal: root::HPALETTE,
            deFirst: u32,
            num: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMR {
        pub iType: u32,
        pub nSize: u32,
    }
    pub type EMR = root::tagEMR;
    pub type PEMR = *mut root::tagEMR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRTEXT {
        pub ptlReference: root::POINTL,
        pub nChars: u32,
        pub offString: u32,
        pub fOptions: u32,
        pub rcl: root::RECTL,
        pub offDx: u32,
    }
    pub type EMRTEXT = root::tagEMRTEXT;
    pub type PEMRTEXT = *mut root::tagEMRTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagABORTPATH {
        pub emr: root::EMR,
    }
    pub type EMRABORTPATH = root::tagABORTPATH;
    pub type PEMRABORTPATH = *mut root::tagABORTPATH;
    pub type EMRBEGINPATH = root::tagABORTPATH;
    pub type PEMRBEGINPATH = *mut root::tagABORTPATH;
    pub type EMRENDPATH = root::tagABORTPATH;
    pub type PEMRENDPATH = *mut root::tagABORTPATH;
    pub type EMRCLOSEFIGURE = root::tagABORTPATH;
    pub type PEMRCLOSEFIGURE = *mut root::tagABORTPATH;
    pub type EMRFLATTENPATH = root::tagABORTPATH;
    pub type PEMRFLATTENPATH = *mut root::tagABORTPATH;
    pub type EMRWIDENPATH = root::tagABORTPATH;
    pub type PEMRWIDENPATH = *mut root::tagABORTPATH;
    pub type EMRSETMETARGN = root::tagABORTPATH;
    pub type PEMRSETMETARGN = *mut root::tagABORTPATH;
    pub type EMRSAVEDC = root::tagABORTPATH;
    pub type PEMRSAVEDC = *mut root::tagABORTPATH;
    pub type EMRREALIZEPALETTE = root::tagABORTPATH;
    pub type PEMRREALIZEPALETTE = *mut root::tagABORTPATH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSELECTCLIPPATH {
        pub emr: root::EMR,
        pub iMode: u32,
    }
    pub type EMRSELECTCLIPPATH = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSELECTCLIPPATH = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETBKMODE = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETBKMODE = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETMAPMODE = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETMAPMODE = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETLAYOUT = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETLAYOUT = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETPOLYFILLMODE = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETPOLYFILLMODE = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETROP2 = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETROP2 = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETSTRETCHBLTMODE = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETSTRETCHBLTMODE = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETICMMODE = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETICMMODE = *mut root::tagEMRSELECTCLIPPATH;
    pub type EMRSETTEXTALIGN = root::tagEMRSELECTCLIPPATH;
    pub type PEMRSETTEXTALIGN = *mut root::tagEMRSELECTCLIPPATH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETMITERLIMIT {
        pub emr: root::EMR,
        pub eMiterLimit: root::FLOAT,
    }
    pub type EMRSETMITERLIMIT = root::tagEMRSETMITERLIMIT;
    pub type PEMRSETMITERLIMIT = *mut root::tagEMRSETMITERLIMIT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRRESTOREDC {
        pub emr: root::EMR,
        pub iRelative: i32,
    }
    pub type EMRRESTOREDC = root::tagEMRRESTOREDC;
    pub type PEMRRESTOREDC = *mut root::tagEMRRESTOREDC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETARCDIRECTION {
        pub emr: root::EMR,
        pub iArcDirection: u32,
    }
    pub type EMRSETARCDIRECTION = root::tagEMRSETARCDIRECTION;
    pub type PEMRSETARCDIRECTION = *mut root::tagEMRSETARCDIRECTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETMAPPERFLAGS {
        pub emr: root::EMR,
        pub dwFlags: u32,
    }
    pub type EMRSETMAPPERFLAGS = root::tagEMRSETMAPPERFLAGS;
    pub type PEMRSETMAPPERFLAGS = *mut root::tagEMRSETMAPPERFLAGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETTEXTCOLOR {
        pub emr: root::EMR,
        pub crColor: root::COLORREF,
    }
    pub type EMRSETBKCOLOR = root::tagEMRSETTEXTCOLOR;
    pub type PEMRSETBKCOLOR = *mut root::tagEMRSETTEXTCOLOR;
    pub type EMRSETTEXTCOLOR = root::tagEMRSETTEXTCOLOR;
    pub type PEMRSETTEXTCOLOR = *mut root::tagEMRSETTEXTCOLOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSELECTOBJECT {
        pub emr: root::EMR,
        pub ihObject: u32,
    }
    pub type EMRSELECTOBJECT = root::tagEMRSELECTOBJECT;
    pub type PEMRSELECTOBJECT = *mut root::tagEMRSELECTOBJECT;
    pub type EMRDELETEOBJECT = root::tagEMRSELECTOBJECT;
    pub type PEMRDELETEOBJECT = *mut root::tagEMRSELECTOBJECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSELECTPALETTE {
        pub emr: root::EMR,
        pub ihPal: u32,
    }
    pub type EMRSELECTPALETTE = root::tagEMRSELECTPALETTE;
    pub type PEMRSELECTPALETTE = *mut root::tagEMRSELECTPALETTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRRESIZEPALETTE {
        pub emr: root::EMR,
        pub ihPal: u32,
        pub cEntries: u32,
    }
    pub type EMRRESIZEPALETTE = root::tagEMRRESIZEPALETTE;
    pub type PEMRRESIZEPALETTE = *mut root::tagEMRRESIZEPALETTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETPALETTEENTRIES {
        pub emr: root::EMR,
        pub ihPal: u32,
        pub iStart: u32,
        pub cEntries: u32,
        pub aPalEntries: [root::PALETTEENTRY; 1usize],
    }
    pub type EMRSETPALETTEENTRIES = root::tagEMRSETPALETTEENTRIES;
    pub type PEMRSETPALETTEENTRIES = *mut root::tagEMRSETPALETTEENTRIES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETCOLORADJUSTMENT {
        pub emr: root::EMR,
        pub ColorAdjustment: root::COLORADJUSTMENT,
    }
    pub type EMRSETCOLORADJUSTMENT = root::tagEMRSETCOLORADJUSTMENT;
    pub type PEMRSETCOLORADJUSTMENT = *mut root::tagEMRSETCOLORADJUSTMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRGDICOMMENT {
        pub emr: root::EMR,
        pub cbData: u32,
        pub Data: [u8; 1usize],
    }
    pub type EMRGDICOMMENT = root::tagEMRGDICOMMENT;
    pub type PEMRGDICOMMENT = *mut root::tagEMRGDICOMMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREOF {
        pub emr: root::EMR,
        pub nPalEntries: u32,
        pub offPalEntries: u32,
        pub nSizeLast: u32,
    }
    pub type EMREOF = root::tagEMREOF;
    pub type PEMREOF = *mut root::tagEMREOF;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRLINETO {
        pub emr: root::EMR,
        pub ptl: root::POINTL,
    }
    pub type EMRLINETO = root::tagEMRLINETO;
    pub type PEMRLINETO = *mut root::tagEMRLINETO;
    pub type EMRMOVETOEX = root::tagEMRLINETO;
    pub type PEMRMOVETOEX = *mut root::tagEMRLINETO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMROFFSETCLIPRGN {
        pub emr: root::EMR,
        pub ptlOffset: root::POINTL,
    }
    pub type EMROFFSETCLIPRGN = root::tagEMROFFSETCLIPRGN;
    pub type PEMROFFSETCLIPRGN = *mut root::tagEMROFFSETCLIPRGN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRFILLPATH {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
    }
    pub type EMRFILLPATH = root::tagEMRFILLPATH;
    pub type PEMRFILLPATH = *mut root::tagEMRFILLPATH;
    pub type EMRSTROKEANDFILLPATH = root::tagEMRFILLPATH;
    pub type PEMRSTROKEANDFILLPATH = *mut root::tagEMRFILLPATH;
    pub type EMRSTROKEPATH = root::tagEMRFILLPATH;
    pub type PEMRSTROKEPATH = *mut root::tagEMRFILLPATH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXCLUDECLIPRECT {
        pub emr: root::EMR,
        pub rclClip: root::RECTL,
    }
    pub type EMREXCLUDECLIPRECT = root::tagEMREXCLUDECLIPRECT;
    pub type PEMREXCLUDECLIPRECT = *mut root::tagEMREXCLUDECLIPRECT;
    pub type EMRINTERSECTCLIPRECT = root::tagEMREXCLUDECLIPRECT;
    pub type PEMRINTERSECTCLIPRECT = *mut root::tagEMREXCLUDECLIPRECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETVIEWPORTORGEX {
        pub emr: root::EMR,
        pub ptlOrigin: root::POINTL,
    }
    pub type EMRSETVIEWPORTORGEX = root::tagEMRSETVIEWPORTORGEX;
    pub type PEMRSETVIEWPORTORGEX = *mut root::tagEMRSETVIEWPORTORGEX;
    pub type EMRSETWINDOWORGEX = root::tagEMRSETVIEWPORTORGEX;
    pub type PEMRSETWINDOWORGEX = *mut root::tagEMRSETVIEWPORTORGEX;
    pub type EMRSETBRUSHORGEX = root::tagEMRSETVIEWPORTORGEX;
    pub type PEMRSETBRUSHORGEX = *mut root::tagEMRSETVIEWPORTORGEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETVIEWPORTEXTEX {
        pub emr: root::EMR,
        pub szlExtent: root::SIZEL,
    }
    pub type EMRSETVIEWPORTEXTEX = root::tagEMRSETVIEWPORTEXTEX;
    pub type PEMRSETVIEWPORTEXTEX = *mut root::tagEMRSETVIEWPORTEXTEX;
    pub type EMRSETWINDOWEXTEX = root::tagEMRSETVIEWPORTEXTEX;
    pub type PEMRSETWINDOWEXTEX = *mut root::tagEMRSETVIEWPORTEXTEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSCALEVIEWPORTEXTEX {
        pub emr: root::EMR,
        pub xNum: i32,
        pub xDenom: i32,
        pub yNum: i32,
        pub yDenom: i32,
    }
    pub type EMRSCALEVIEWPORTEXTEX = root::tagEMRSCALEVIEWPORTEXTEX;
    pub type PEMRSCALEVIEWPORTEXTEX = *mut root::tagEMRSCALEVIEWPORTEXTEX;
    pub type EMRSCALEWINDOWEXTEX = root::tagEMRSCALEVIEWPORTEXTEX;
    pub type PEMRSCALEWINDOWEXTEX = *mut root::tagEMRSCALEVIEWPORTEXTEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETWORLDTRANSFORM {
        pub emr: root::EMR,
        pub xform: root::XFORM,
    }
    pub type EMRSETWORLDTRANSFORM = root::tagEMRSETWORLDTRANSFORM;
    pub type PEMRSETWORLDTRANSFORM = *mut root::tagEMRSETWORLDTRANSFORM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRMODIFYWORLDTRANSFORM {
        pub emr: root::EMR,
        pub xform: root::XFORM,
        pub iMode: u32,
    }
    pub type EMRMODIFYWORLDTRANSFORM = root::tagEMRMODIFYWORLDTRANSFORM;
    pub type PEMRMODIFYWORLDTRANSFORM = *mut root::tagEMRMODIFYWORLDTRANSFORM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETPIXELV {
        pub emr: root::EMR,
        pub ptlPixel: root::POINTL,
        pub crColor: root::COLORREF,
    }
    pub type EMRSETPIXELV = root::tagEMRSETPIXELV;
    pub type PEMRSETPIXELV = *mut root::tagEMRSETPIXELV;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXTFLOODFILL {
        pub emr: root::EMR,
        pub ptlStart: root::POINTL,
        pub crColor: root::COLORREF,
        pub iMode: u32,
    }
    pub type EMREXTFLOODFILL = root::tagEMREXTFLOODFILL;
    pub type PEMREXTFLOODFILL = *mut root::tagEMREXTFLOODFILL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRELLIPSE {
        pub emr: root::EMR,
        pub rclBox: root::RECTL,
    }
    pub type EMRELLIPSE = root::tagEMRELLIPSE;
    pub type PEMRELLIPSE = *mut root::tagEMRELLIPSE;
    pub type EMRRECTANGLE = root::tagEMRELLIPSE;
    pub type PEMRRECTANGLE = *mut root::tagEMRELLIPSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRROUNDRECT {
        pub emr: root::EMR,
        pub rclBox: root::RECTL,
        pub szlCorner: root::SIZEL,
    }
    pub type EMRROUNDRECT = root::tagEMRROUNDRECT;
    pub type PEMRROUNDRECT = *mut root::tagEMRROUNDRECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRARC {
        pub emr: root::EMR,
        pub rclBox: root::RECTL,
        pub ptlStart: root::POINTL,
        pub ptlEnd: root::POINTL,
    }
    pub type EMRARC = root::tagEMRARC;
    pub type PEMRARC = *mut root::tagEMRARC;
    pub type EMRARCTO = root::tagEMRARC;
    pub type PEMRARCTO = *mut root::tagEMRARC;
    pub type EMRCHORD = root::tagEMRARC;
    pub type PEMRCHORD = *mut root::tagEMRARC;
    pub type EMRPIE = root::tagEMRARC;
    pub type PEMRPIE = *mut root::tagEMRARC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRANGLEARC {
        pub emr: root::EMR,
        pub ptlCenter: root::POINTL,
        pub nRadius: u32,
        pub eStartAngle: root::FLOAT,
        pub eSweepAngle: root::FLOAT,
    }
    pub type EMRANGLEARC = root::tagEMRANGLEARC;
    pub type PEMRANGLEARC = *mut root::tagEMRANGLEARC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYLINE {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cptl: u32,
        pub aptl: [root::POINTL; 1usize],
    }
    pub type EMRPOLYLINE = root::tagEMRPOLYLINE;
    pub type PEMRPOLYLINE = *mut root::tagEMRPOLYLINE;
    pub type EMRPOLYBEZIER = root::tagEMRPOLYLINE;
    pub type PEMRPOLYBEZIER = *mut root::tagEMRPOLYLINE;
    pub type EMRPOLYGON = root::tagEMRPOLYLINE;
    pub type PEMRPOLYGON = *mut root::tagEMRPOLYLINE;
    pub type EMRPOLYBEZIERTO = root::tagEMRPOLYLINE;
    pub type PEMRPOLYBEZIERTO = *mut root::tagEMRPOLYLINE;
    pub type EMRPOLYLINETO = root::tagEMRPOLYLINE;
    pub type PEMRPOLYLINETO = *mut root::tagEMRPOLYLINE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYLINE16 {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cpts: u32,
        pub apts: [root::POINTS; 1usize],
    }
    pub type EMRPOLYLINE16 = root::tagEMRPOLYLINE16;
    pub type PEMRPOLYLINE16 = *mut root::tagEMRPOLYLINE16;
    pub type EMRPOLYBEZIER16 = root::tagEMRPOLYLINE16;
    pub type PEMRPOLYBEZIER16 = *mut root::tagEMRPOLYLINE16;
    pub type EMRPOLYGON16 = root::tagEMRPOLYLINE16;
    pub type PEMRPOLYGON16 = *mut root::tagEMRPOLYLINE16;
    pub type EMRPOLYBEZIERTO16 = root::tagEMRPOLYLINE16;
    pub type PEMRPOLYBEZIERTO16 = *mut root::tagEMRPOLYLINE16;
    pub type EMRPOLYLINETO16 = root::tagEMRPOLYLINE16;
    pub type PEMRPOLYLINETO16 = *mut root::tagEMRPOLYLINE16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYDRAW {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cptl: u32,
        pub aptl: [root::POINTL; 1usize],
        pub abTypes: [u8; 1usize],
    }
    pub type EMRPOLYDRAW = root::tagEMRPOLYDRAW;
    pub type PEMRPOLYDRAW = *mut root::tagEMRPOLYDRAW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYDRAW16 {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cpts: u32,
        pub apts: [root::POINTS; 1usize],
        pub abTypes: [u8; 1usize],
    }
    pub type EMRPOLYDRAW16 = root::tagEMRPOLYDRAW16;
    pub type PEMRPOLYDRAW16 = *mut root::tagEMRPOLYDRAW16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYPOLYLINE {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub nPolys: u32,
        pub cptl: u32,
        pub aPolyCounts: [u32; 1usize],
        pub aptl: [root::POINTL; 1usize],
    }
    pub type EMRPOLYPOLYLINE = root::tagEMRPOLYPOLYLINE;
    pub type PEMRPOLYPOLYLINE = *mut root::tagEMRPOLYPOLYLINE;
    pub type EMRPOLYPOLYGON = root::tagEMRPOLYPOLYLINE;
    pub type PEMRPOLYPOLYGON = *mut root::tagEMRPOLYPOLYLINE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYPOLYLINE16 {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub nPolys: u32,
        pub cpts: u32,
        pub aPolyCounts: [u32; 1usize],
        pub apts: [root::POINTS; 1usize],
    }
    pub type EMRPOLYPOLYLINE16 = root::tagEMRPOLYPOLYLINE16;
    pub type PEMRPOLYPOLYLINE16 = *mut root::tagEMRPOLYPOLYLINE16;
    pub type EMRPOLYPOLYGON16 = root::tagEMRPOLYPOLYLINE16;
    pub type PEMRPOLYPOLYGON16 = *mut root::tagEMRPOLYPOLYLINE16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRINVERTRGN {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cbRgnData: u32,
        pub RgnData: [u8; 1usize],
    }
    pub type EMRINVERTRGN = root::tagEMRINVERTRGN;
    pub type PEMRINVERTRGN = *mut root::tagEMRINVERTRGN;
    pub type EMRPAINTRGN = root::tagEMRINVERTRGN;
    pub type PEMRPAINTRGN = *mut root::tagEMRINVERTRGN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRFILLRGN {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cbRgnData: u32,
        pub ihBrush: u32,
        pub RgnData: [u8; 1usize],
    }
    pub type EMRFILLRGN = root::tagEMRFILLRGN;
    pub type PEMRFILLRGN = *mut root::tagEMRFILLRGN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRFRAMERGN {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cbRgnData: u32,
        pub ihBrush: u32,
        pub szlStroke: root::SIZEL,
        pub RgnData: [u8; 1usize],
    }
    pub type EMRFRAMERGN = root::tagEMRFRAMERGN;
    pub type PEMRFRAMERGN = *mut root::tagEMRFRAMERGN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXTSELECTCLIPRGN {
        pub emr: root::EMR,
        pub cbRgnData: u32,
        pub iMode: u32,
        pub RgnData: [u8; 1usize],
    }
    pub type EMREXTSELECTCLIPRGN = root::tagEMREXTSELECTCLIPRGN;
    pub type PEMREXTSELECTCLIPRGN = *mut root::tagEMREXTSELECTCLIPRGN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXTTEXTOUTA {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub iGraphicsMode: u32,
        pub exScale: root::FLOAT,
        pub eyScale: root::FLOAT,
        pub emrtext: root::EMRTEXT,
    }
    pub type EMREXTTEXTOUTA = root::tagEMREXTTEXTOUTA;
    pub type PEMREXTTEXTOUTA = *mut root::tagEMREXTTEXTOUTA;
    pub type EMREXTTEXTOUTW = root::tagEMREXTTEXTOUTA;
    pub type PEMREXTTEXTOUTW = *mut root::tagEMREXTTEXTOUTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPOLYTEXTOUTA {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub iGraphicsMode: u32,
        pub exScale: root::FLOAT,
        pub eyScale: root::FLOAT,
        pub cStrings: i32,
        pub aemrtext: [root::EMRTEXT; 1usize],
    }
    pub type EMRPOLYTEXTOUTA = root::tagEMRPOLYTEXTOUTA;
    pub type PEMRPOLYTEXTOUTA = *mut root::tagEMRPOLYTEXTOUTA;
    pub type EMRPOLYTEXTOUTW = root::tagEMRPOLYTEXTOUTA;
    pub type PEMRPOLYTEXTOUTW = *mut root::tagEMRPOLYTEXTOUTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRBITBLT {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub cxDest: i32,
        pub cyDest: i32,
        pub dwRop: u32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub xformSrc: root::XFORM,
        pub crBkColorSrc: root::COLORREF,
        pub iUsageSrc: u32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
    }
    pub type EMRBITBLT = root::tagEMRBITBLT;
    pub type PEMRBITBLT = *mut root::tagEMRBITBLT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSTRETCHBLT {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub cxDest: i32,
        pub cyDest: i32,
        pub dwRop: u32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub xformSrc: root::XFORM,
        pub crBkColorSrc: root::COLORREF,
        pub iUsageSrc: u32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub cxSrc: i32,
        pub cySrc: i32,
    }
    pub type EMRSTRETCHBLT = root::tagEMRSTRETCHBLT;
    pub type PEMRSTRETCHBLT = *mut root::tagEMRSTRETCHBLT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRMASKBLT {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub cxDest: i32,
        pub cyDest: i32,
        pub dwRop: u32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub xformSrc: root::XFORM,
        pub crBkColorSrc: root::COLORREF,
        pub iUsageSrc: u32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub xMask: i32,
        pub yMask: i32,
        pub iUsageMask: u32,
        pub offBmiMask: u32,
        pub cbBmiMask: u32,
        pub offBitsMask: u32,
        pub cbBitsMask: u32,
    }
    pub type EMRMASKBLT = root::tagEMRMASKBLT;
    pub type PEMRMASKBLT = *mut root::tagEMRMASKBLT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPLGBLT {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub aptlDest: [root::POINTL; 3usize],
        pub xSrc: i32,
        pub ySrc: i32,
        pub cxSrc: i32,
        pub cySrc: i32,
        pub xformSrc: root::XFORM,
        pub crBkColorSrc: root::COLORREF,
        pub iUsageSrc: u32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub xMask: i32,
        pub yMask: i32,
        pub iUsageMask: u32,
        pub offBmiMask: u32,
        pub cbBmiMask: u32,
        pub offBitsMask: u32,
        pub cbBitsMask: u32,
    }
    pub type EMRPLGBLT = root::tagEMRPLGBLT;
    pub type PEMRPLGBLT = *mut root::tagEMRPLGBLT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETDIBITSTODEVICE {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub cxSrc: i32,
        pub cySrc: i32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub iUsageSrc: u32,
        pub iStartScan: u32,
        pub cScans: u32,
    }
    pub type EMRSETDIBITSTODEVICE = root::tagEMRSETDIBITSTODEVICE;
    pub type PEMRSETDIBITSTODEVICE = *mut root::tagEMRSETDIBITSTODEVICE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSTRETCHDIBITS {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub cxSrc: i32,
        pub cySrc: i32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub iUsageSrc: u32,
        pub dwRop: u32,
        pub cxDest: i32,
        pub cyDest: i32,
    }
    pub type EMRSTRETCHDIBITS = root::tagEMRSTRETCHDIBITS;
    pub type PEMRSTRETCHDIBITS = *mut root::tagEMRSTRETCHDIBITS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXTCREATEFONTINDIRECTW {
        pub emr: root::EMR,
        pub ihFont: u32,
        pub elfw: root::EXTLOGFONTW,
    }
    pub type EMREXTCREATEFONTINDIRECTW = root::tagEMREXTCREATEFONTINDIRECTW;
    pub type PEMREXTCREATEFONTINDIRECTW = *mut root::tagEMREXTCREATEFONTINDIRECTW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATEPALETTE {
        pub emr: root::EMR,
        pub ihPal: u32,
        pub lgpl: root::LOGPALETTE,
    }
    pub type EMRCREATEPALETTE = root::tagEMRCREATEPALETTE;
    pub type PEMRCREATEPALETTE = *mut root::tagEMRCREATEPALETTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATEPEN {
        pub emr: root::EMR,
        pub ihPen: u32,
        pub lopn: root::LOGPEN,
    }
    pub type EMRCREATEPEN = root::tagEMRCREATEPEN;
    pub type PEMRCREATEPEN = *mut root::tagEMRCREATEPEN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXTCREATEPEN {
        pub emr: root::EMR,
        pub ihPen: u32,
        pub offBmi: u32,
        pub cbBmi: u32,
        pub offBits: u32,
        pub cbBits: u32,
        pub elp: root::EXTLOGPEN32,
    }
    pub type EMREXTCREATEPEN = root::tagEMREXTCREATEPEN;
    pub type PEMREXTCREATEPEN = *mut root::tagEMREXTCREATEPEN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATEBRUSHINDIRECT {
        pub emr: root::EMR,
        pub ihBrush: u32,
        pub lb: root::LOGBRUSH32,
    }
    pub type EMRCREATEBRUSHINDIRECT = root::tagEMRCREATEBRUSHINDIRECT;
    pub type PEMRCREATEBRUSHINDIRECT = *mut root::tagEMRCREATEBRUSHINDIRECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATEMONOBRUSH {
        pub emr: root::EMR,
        pub ihBrush: u32,
        pub iUsage: u32,
        pub offBmi: u32,
        pub cbBmi: u32,
        pub offBits: u32,
        pub cbBits: u32,
    }
    pub type EMRCREATEMONOBRUSH = root::tagEMRCREATEMONOBRUSH;
    pub type PEMRCREATEMONOBRUSH = *mut root::tagEMRCREATEMONOBRUSH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATEDIBPATTERNBRUSHPT {
        pub emr: root::EMR,
        pub ihBrush: u32,
        pub iUsage: u32,
        pub offBmi: u32,
        pub cbBmi: u32,
        pub offBits: u32,
        pub cbBits: u32,
    }
    pub type EMRCREATEDIBPATTERNBRUSHPT = root::tagEMRCREATEDIBPATTERNBRUSHPT;
    pub type PEMRCREATEDIBPATTERNBRUSHPT = *mut root::tagEMRCREATEDIBPATTERNBRUSHPT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRFORMAT {
        pub dSignature: u32,
        pub nVersion: u32,
        pub cbData: u32,
        pub offData: u32,
    }
    pub type EMRFORMAT = root::tagEMRFORMAT;
    pub type PEMRFORMAT = *mut root::tagEMRFORMAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRGLSRECORD {
        pub emr: root::EMR,
        pub cbData: u32,
        pub Data: [u8; 1usize],
    }
    pub type EMRGLSRECORD = root::tagEMRGLSRECORD;
    pub type PEMRGLSRECORD = *mut root::tagEMRGLSRECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRGLSBOUNDEDRECORD {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub cbData: u32,
        pub Data: [u8; 1usize],
    }
    pub type EMRGLSBOUNDEDRECORD = root::tagEMRGLSBOUNDEDRECORD;
    pub type PEMRGLSBOUNDEDRECORD = *mut root::tagEMRGLSBOUNDEDRECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRPIXELFORMAT {
        pub emr: root::EMR,
        pub pfd: root::PIXELFORMATDESCRIPTOR,
    }
    pub type EMRPIXELFORMAT = root::tagEMRPIXELFORMAT;
    pub type PEMRPIXELFORMAT = *mut root::tagEMRPIXELFORMAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATECOLORSPACE {
        pub emr: root::EMR,
        pub ihCS: u32,
        pub lcs: root::LOGCOLORSPACEA,
    }
    pub type EMRCREATECOLORSPACE = root::tagEMRCREATECOLORSPACE;
    pub type PEMRCREATECOLORSPACE = *mut root::tagEMRCREATECOLORSPACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETCOLORSPACE {
        pub emr: root::EMR,
        pub ihCS: u32,
    }
    pub type EMRSETCOLORSPACE = root::tagEMRSETCOLORSPACE;
    pub type PEMRSETCOLORSPACE = *mut root::tagEMRSETCOLORSPACE;
    pub type EMRSELECTCOLORSPACE = root::tagEMRSETCOLORSPACE;
    pub type PEMRSELECTCOLORSPACE = *mut root::tagEMRSETCOLORSPACE;
    pub type EMRDELETECOLORSPACE = root::tagEMRSETCOLORSPACE;
    pub type PEMRDELETECOLORSPACE = *mut root::tagEMRSETCOLORSPACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMREXTESCAPE {
        pub emr: root::EMR,
        pub iEscape: root::INT,
        pub cbEscData: root::INT,
        pub EscData: [u8; 1usize],
    }
    pub type EMREXTESCAPE = root::tagEMREXTESCAPE;
    pub type PEMREXTESCAPE = *mut root::tagEMREXTESCAPE;
    pub type EMRDRAWESCAPE = root::tagEMREXTESCAPE;
    pub type PEMRDRAWESCAPE = *mut root::tagEMREXTESCAPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRNAMEDESCAPE {
        pub emr: root::EMR,
        pub iEscape: root::INT,
        pub cbDriver: root::INT,
        pub cbEscData: root::INT,
        pub EscData: [u8; 1usize],
    }
    pub type EMRNAMEDESCAPE = root::tagEMRNAMEDESCAPE;
    pub type PEMRNAMEDESCAPE = *mut root::tagEMRNAMEDESCAPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRSETICMPROFILE {
        pub emr: root::EMR,
        pub dwFlags: u32,
        pub cbName: u32,
        pub cbData: u32,
        pub Data: [u8; 1usize],
    }
    pub type EMRSETICMPROFILE = root::tagEMRSETICMPROFILE;
    pub type PEMRSETICMPROFILE = *mut root::tagEMRSETICMPROFILE;
    pub type EMRSETICMPROFILEA = root::tagEMRSETICMPROFILE;
    pub type PEMRSETICMPROFILEA = *mut root::tagEMRSETICMPROFILE;
    pub type EMRSETICMPROFILEW = root::tagEMRSETICMPROFILE;
    pub type PEMRSETICMPROFILEW = *mut root::tagEMRSETICMPROFILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRCREATECOLORSPACEW {
        pub emr: root::EMR,
        pub ihCS: u32,
        pub lcs: root::LOGCOLORSPACEW,
        pub dwFlags: u32,
        pub cbData: u32,
        pub Data: [u8; 1usize],
    }
    pub type EMRCREATECOLORSPACEW = root::tagEMRCREATECOLORSPACEW;
    pub type PEMRCREATECOLORSPACEW = *mut root::tagEMRCREATECOLORSPACEW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOLORMATCHTOTARGET {
        pub emr: root::EMR,
        pub dwAction: u32,
        pub dwFlags: u32,
        pub cbName: u32,
        pub cbData: u32,
        pub Data: [u8; 1usize],
    }
    pub type EMRCOLORMATCHTOTARGET = root::tagCOLORMATCHTOTARGET;
    pub type PEMRCOLORMATCHTOTARGET = *mut root::tagCOLORMATCHTOTARGET;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOLORCORRECTPALETTE {
        pub emr: root::EMR,
        pub ihPalette: u32,
        pub nFirstEntry: u32,
        pub nPalEntries: u32,
        pub nReserved: u32,
    }
    pub type EMRCOLORCORRECTPALETTE = root::tagCOLORCORRECTPALETTE;
    pub type PEMRCOLORCORRECTPALETTE = *mut root::tagCOLORCORRECTPALETTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRALPHABLEND {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub cxDest: i32,
        pub cyDest: i32,
        pub dwRop: u32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub xformSrc: root::XFORM,
        pub crBkColorSrc: root::COLORREF,
        pub iUsageSrc: u32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub cxSrc: i32,
        pub cySrc: i32,
    }
    pub type EMRALPHABLEND = root::tagEMRALPHABLEND;
    pub type PEMRALPHABLEND = *mut root::tagEMRALPHABLEND;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRGRADIENTFILL {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub nVer: u32,
        pub nTri: u32,
        pub ulMode: root::ULONG,
        pub Ver: [root::TRIVERTEX; 1usize],
    }
    pub type EMRGRADIENTFILL = root::tagEMRGRADIENTFILL;
    pub type PEMRGRADIENTFILL = *mut root::tagEMRGRADIENTFILL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEMRTRANSPARENTBLT {
        pub emr: root::EMR,
        pub rclBounds: root::RECTL,
        pub xDest: i32,
        pub yDest: i32,
        pub cxDest: i32,
        pub cyDest: i32,
        pub dwRop: u32,
        pub xSrc: i32,
        pub ySrc: i32,
        pub xformSrc: root::XFORM,
        pub crBkColorSrc: root::COLORREF,
        pub iUsageSrc: u32,
        pub offBmiSrc: u32,
        pub cbBmiSrc: u32,
        pub offBitsSrc: u32,
        pub cbBitsSrc: u32,
        pub cxSrc: i32,
        pub cySrc: i32,
    }
    pub type EMRTRANSPARENTBLT = root::tagEMRTRANSPARENTBLT;
    pub type PEMRTRANSPARENTBLT = *mut root::tagEMRTRANSPARENTBLT;
    extern "C" {
        pub fn wglCopyContext(arg1: root::HGLRC, arg2: root::HGLRC, arg3: root::UINT)
            -> root::BOOL;
    }
    extern "C" {
        pub fn wglCreateContext(arg1: root::HDC) -> root::HGLRC;
    }
    extern "C" {
        pub fn wglCreateLayerContext(arg1: root::HDC, arg2: i32) -> root::HGLRC;
    }
    extern "C" {
        pub fn wglDeleteContext(arg1: root::HGLRC) -> root::BOOL;
    }
    extern "C" {
        pub fn wglGetCurrentContext() -> root::HGLRC;
    }
    extern "C" {
        pub fn wglGetCurrentDC() -> root::HDC;
    }
    extern "C" {
        pub fn wglGetProcAddress(arg1: *const i8) -> root::PROC;
    }
    extern "C" {
        pub fn wglMakeCurrent(arg1: root::HDC, arg2: root::HGLRC) -> root::BOOL;
    }
    extern "C" {
        pub fn wglShareLists(arg1: root::HGLRC, arg2: root::HGLRC) -> root::BOOL;
    }
    extern "C" {
        pub fn wglUseFontBitmapsA(
            arg1: root::HDC,
            arg2: u32,
            arg3: u32,
            arg4: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn wglUseFontBitmapsW(
            arg1: root::HDC,
            arg2: u32,
            arg3: u32,
            arg4: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SwapBuffers(arg1: root::HDC) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _POINTFLOAT {
        pub x: root::FLOAT,
        pub y: root::FLOAT,
    }
    pub type POINTFLOAT = root::_POINTFLOAT;
    pub type PPOINTFLOAT = *mut root::_POINTFLOAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GLYPHMETRICSFLOAT {
        pub gmfBlackBoxX: root::FLOAT,
        pub gmfBlackBoxY: root::FLOAT,
        pub gmfptGlyphOrigin: root::POINTFLOAT,
        pub gmfCellIncX: root::FLOAT,
        pub gmfCellIncY: root::FLOAT,
    }
    pub type GLYPHMETRICSFLOAT = root::_GLYPHMETRICSFLOAT;
    pub type PGLYPHMETRICSFLOAT = *mut root::_GLYPHMETRICSFLOAT;
    pub type LPGLYPHMETRICSFLOAT = *mut root::_GLYPHMETRICSFLOAT;
    extern "C" {
        pub fn wglUseFontOutlinesA(
            arg1: root::HDC,
            arg2: u32,
            arg3: u32,
            arg4: u32,
            arg5: root::FLOAT,
            arg6: root::FLOAT,
            arg7: i32,
            arg8: root::LPGLYPHMETRICSFLOAT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn wglUseFontOutlinesW(
            arg1: root::HDC,
            arg2: u32,
            arg3: u32,
            arg4: u32,
            arg5: root::FLOAT,
            arg6: root::FLOAT,
            arg7: i32,
            arg8: root::LPGLYPHMETRICSFLOAT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLAYERPLANEDESCRIPTOR {
        pub nSize: u16,
        pub nVersion: u16,
        pub dwFlags: u32,
        pub iPixelType: u8,
        pub cColorBits: u8,
        pub cRedBits: u8,
        pub cRedShift: u8,
        pub cGreenBits: u8,
        pub cGreenShift: u8,
        pub cBlueBits: u8,
        pub cBlueShift: u8,
        pub cAlphaBits: u8,
        pub cAlphaShift: u8,
        pub cAccumBits: u8,
        pub cAccumRedBits: u8,
        pub cAccumGreenBits: u8,
        pub cAccumBlueBits: u8,
        pub cAccumAlphaBits: u8,
        pub cDepthBits: u8,
        pub cStencilBits: u8,
        pub cAuxBuffers: u8,
        pub iLayerPlane: u8,
        pub bReserved: u8,
        pub crTransparent: root::COLORREF,
    }
    pub type LAYERPLANEDESCRIPTOR = root::tagLAYERPLANEDESCRIPTOR;
    pub type PLAYERPLANEDESCRIPTOR = *mut root::tagLAYERPLANEDESCRIPTOR;
    pub type LPLAYERPLANEDESCRIPTOR = *mut root::tagLAYERPLANEDESCRIPTOR;
    extern "C" {
        pub fn wglDescribeLayerPlane(
            arg1: root::HDC,
            arg2: i32,
            arg3: i32,
            arg4: root::UINT,
            arg5: root::LPLAYERPLANEDESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn wglSetLayerPaletteEntries(
            arg1: root::HDC,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: *const root::COLORREF,
        ) -> i32;
    }
    extern "C" {
        pub fn wglGetLayerPaletteEntries(
            arg1: root::HDC,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: *mut root::COLORREF,
        ) -> i32;
    }
    extern "C" {
        pub fn wglRealizeLayerPalette(
            arg1: root::HDC,
            arg2: i32,
            arg3: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn wglSwapLayerBuffers(arg1: root::HDC, arg2: root::UINT) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WGLSWAP {
        pub hdc: root::HDC,
        pub uiFlags: root::UINT,
    }
    pub type WGLSWAP = root::_WGLSWAP;
    pub type PWGLSWAP = *mut root::_WGLSWAP;
    pub type LPWGLSWAP = *mut root::_WGLSWAP;
    extern "C" {
        pub fn wglSwapMultipleBuffers(arg1: root::UINT, arg2: *const root::WGLSWAP) -> u32;
    }
    pub type HDWP = root::HANDLE;
    pub type MENUTEMPLATEA = ::std::os::raw::c_void;
    pub type MENUTEMPLATEW = ::std::os::raw::c_void;
    pub type MENUTEMPLATE = root::MENUTEMPLATEA;
    pub type LPMENUTEMPLATEA = root::PVOID;
    pub type LPMENUTEMPLATEW = root::PVOID;
    pub type LPMENUTEMPLATE = root::LPMENUTEMPLATEA;
    pub type WNDPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::LRESULT,
    >;
    pub type DLGPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::INT_PTR,
    >;
    pub type TIMERPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: u64,
            arg4: u32,
        ),
    >;
    pub type GRAYSTRINGPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HDC,
            arg2: root::LPARAM,
            arg3: i32,
        ) -> root::BOOL,
    >;
    pub type WNDENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::HWND, arg2: root::LPARAM) -> root::BOOL,
    >;
    pub type HOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            code: i32,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT,
    >;
    pub type SENDASYNCPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: u64,
            arg4: root::LRESULT,
        ),
    >;
    pub type PROPENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: *const i8,
            arg3: root::HANDLE,
        ) -> root::BOOL,
    >;
    pub type PROPENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::LPCWSTR,
            arg3: root::HANDLE,
        ) -> root::BOOL,
    >;
    pub type PROPENUMPROCEXA = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: *mut i8,
            arg3: root::HANDLE,
            arg4: u64,
        ) -> root::BOOL,
    >;
    pub type PROPENUMPROCEXW = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::LPWSTR,
            arg3: root::HANDLE,
            arg4: u64,
        ) -> root::BOOL,
    >;
    pub type EDITWORDBREAKPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            lpch: *mut i8,
            ichCurrent: i32,
            cch: i32,
            code: i32,
        ) -> i32,
    >;
    pub type EDITWORDBREAKPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            lpch: root::LPWSTR,
            ichCurrent: i32,
            cch: i32,
            code: i32,
        ) -> i32,
    >;
    pub type DRAWSTATEPROC = ::std::option::Option<
        unsafe extern "C" fn(
            hdc: root::HDC,
            lData: root::LPARAM,
            wData: root::WPARAM,
            cx: i32,
            cy: i32,
        ) -> root::BOOL,
    >;
    pub type PROPENUMPROC = root::PROPENUMPROCA;
    pub type PROPENUMPROCEX = root::PROPENUMPROCEXA;
    pub type EDITWORDBREAKPROC = root::EDITWORDBREAKPROCA;
    pub type NAMEENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut i8, arg2: root::LPARAM) -> root::BOOL,
    >;
    pub type NAMEENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPWSTR, arg2: root::LPARAM) -> root::BOOL,
    >;
    pub type WINSTAENUMPROCA = root::NAMEENUMPROCA;
    pub type DESKTOPENUMPROCA = root::NAMEENUMPROCA;
    pub type WINSTAENUMPROCW = root::NAMEENUMPROCW;
    pub type DESKTOPENUMPROCW = root::NAMEENUMPROCW;
    pub type WINSTAENUMPROC = root::WINSTAENUMPROCA;
    pub type DESKTOPENUMPROC = root::DESKTOPENUMPROCA;
    extern "C" {
        pub fn wvsprintfA(
            arg1: *mut i8,
            arg2: *const i8,
            arglist: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn wvsprintfW(
            arg1: root::LPWSTR,
            arg2: root::LPCWSTR,
            arglist: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn wsprintfA(arg1: *mut i8, arg2: *const i8, ...) -> i32;
    }
    extern "C" {
        pub fn wsprintfW(arg1: root::LPWSTR, arg2: root::LPCWSTR, ...) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCBT_CREATEWNDA {
        pub lpcs: *mut root::tagCREATESTRUCTA,
        pub hwndInsertAfter: root::HWND,
    }
    pub type CBT_CREATEWNDA = root::tagCBT_CREATEWNDA;
    pub type LPCBT_CREATEWNDA = *mut root::tagCBT_CREATEWNDA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCBT_CREATEWNDW {
        pub lpcs: *mut root::tagCREATESTRUCTW,
        pub hwndInsertAfter: root::HWND,
    }
    pub type CBT_CREATEWNDW = root::tagCBT_CREATEWNDW;
    pub type LPCBT_CREATEWNDW = *mut root::tagCBT_CREATEWNDW;
    pub type CBT_CREATEWND = root::CBT_CREATEWNDA;
    pub type LPCBT_CREATEWND = root::LPCBT_CREATEWNDA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCBTACTIVATESTRUCT {
        pub fMouse: root::BOOL,
        pub hWndActive: root::HWND,
    }
    pub type CBTACTIVATESTRUCT = root::tagCBTACTIVATESTRUCT;
    pub type LPCBTACTIVATESTRUCT = *mut root::tagCBTACTIVATESTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWTSSESSION_NOTIFICATION {
        pub cbSize: u32,
        pub dwSessionId: u32,
    }
    pub type WTSSESSION_NOTIFICATION = root::tagWTSSESSION_NOTIFICATION;
    pub type PWTSSESSION_NOTIFICATION = *mut root::tagWTSSESSION_NOTIFICATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SHELLHOOKINFO {
        pub hwnd: root::HWND,
        pub rc: root::RECT,
    }
    pub type LPSHELLHOOKINFO = *mut root::SHELLHOOKINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEVENTMSG {
        pub message: root::UINT,
        pub paramL: root::UINT,
        pub paramH: root::UINT,
        pub time: u32,
        pub hwnd: root::HWND,
    }
    pub type EVENTMSG = root::tagEVENTMSG;
    pub type PEVENTMSGMSG = *mut root::tagEVENTMSG;
    pub type NPEVENTMSGMSG = *mut root::tagEVENTMSG;
    pub type LPEVENTMSGMSG = *mut root::tagEVENTMSG;
    pub type PEVENTMSG = *mut root::tagEVENTMSG;
    pub type NPEVENTMSG = *mut root::tagEVENTMSG;
    pub type LPEVENTMSG = *mut root::tagEVENTMSG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCWPSTRUCT {
        pub lParam: root::LPARAM,
        pub wParam: root::WPARAM,
        pub message: root::UINT,
        pub hwnd: root::HWND,
    }
    pub type CWPSTRUCT = root::tagCWPSTRUCT;
    pub type PCWPSTRUCT = *mut root::tagCWPSTRUCT;
    pub type NPCWPSTRUCT = *mut root::tagCWPSTRUCT;
    pub type LPCWPSTRUCT = *mut root::tagCWPSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCWPRETSTRUCT {
        pub lResult: root::LRESULT,
        pub lParam: root::LPARAM,
        pub wParam: root::WPARAM,
        pub message: root::UINT,
        pub hwnd: root::HWND,
    }
    pub type CWPRETSTRUCT = root::tagCWPRETSTRUCT;
    pub type PCWPRETSTRUCT = *mut root::tagCWPRETSTRUCT;
    pub type NPCWPRETSTRUCT = *mut root::tagCWPRETSTRUCT;
    pub type LPCWPRETSTRUCT = *mut root::tagCWPRETSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagKBDLLHOOKSTRUCT {
        pub vkCode: u32,
        pub scanCode: u32,
        pub flags: u32,
        pub time: u32,
        pub dwExtraInfo: u64,
    }
    pub type KBDLLHOOKSTRUCT = root::tagKBDLLHOOKSTRUCT;
    pub type LPKBDLLHOOKSTRUCT = *mut root::tagKBDLLHOOKSTRUCT;
    pub type PKBDLLHOOKSTRUCT = *mut root::tagKBDLLHOOKSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMSLLHOOKSTRUCT {
        pub pt: root::POINT,
        pub mouseData: u32,
        pub flags: u32,
        pub time: u32,
        pub dwExtraInfo: u64,
    }
    pub type MSLLHOOKSTRUCT = root::tagMSLLHOOKSTRUCT;
    pub type LPMSLLHOOKSTRUCT = *mut root::tagMSLLHOOKSTRUCT;
    pub type PMSLLHOOKSTRUCT = *mut root::tagMSLLHOOKSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDEBUGHOOKINFO {
        pub idThread: u32,
        pub idThreadInstaller: u32,
        pub lParam: root::LPARAM,
        pub wParam: root::WPARAM,
        pub code: i32,
    }
    pub type DEBUGHOOKINFO = root::tagDEBUGHOOKINFO;
    pub type PDEBUGHOOKINFO = *mut root::tagDEBUGHOOKINFO;
    pub type NPDEBUGHOOKINFO = *mut root::tagDEBUGHOOKINFO;
    pub type LPDEBUGHOOKINFO = *mut root::tagDEBUGHOOKINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMOUSEHOOKSTRUCT {
        pub pt: root::POINT,
        pub hwnd: root::HWND,
        pub wHitTestCode: root::UINT,
        pub dwExtraInfo: u64,
    }
    pub type MOUSEHOOKSTRUCT = root::tagMOUSEHOOKSTRUCT;
    pub type LPMOUSEHOOKSTRUCT = *mut root::tagMOUSEHOOKSTRUCT;
    pub type PMOUSEHOOKSTRUCT = *mut root::tagMOUSEHOOKSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMOUSEHOOKSTRUCTEX {
        pub _base: root::tagMOUSEHOOKSTRUCT,
        pub mouseData: u32,
    }
    pub type MOUSEHOOKSTRUCTEX = root::tagMOUSEHOOKSTRUCTEX;
    pub type LPMOUSEHOOKSTRUCTEX = *mut root::tagMOUSEHOOKSTRUCTEX;
    pub type PMOUSEHOOKSTRUCTEX = *mut root::tagMOUSEHOOKSTRUCTEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHARDWAREHOOKSTRUCT {
        pub hwnd: root::HWND,
        pub message: root::UINT,
        pub wParam: root::WPARAM,
        pub lParam: root::LPARAM,
    }
    pub type HARDWAREHOOKSTRUCT = root::tagHARDWAREHOOKSTRUCT;
    pub type LPHARDWAREHOOKSTRUCT = *mut root::tagHARDWAREHOOKSTRUCT;
    pub type PHARDWAREHOOKSTRUCT = *mut root::tagHARDWAREHOOKSTRUCT;
    extern "C" {
        pub fn LoadKeyboardLayoutA(pwszKLID: *const i8, Flags: root::UINT) -> root::HKL;
    }
    extern "C" {
        pub fn LoadKeyboardLayoutW(pwszKLID: root::LPCWSTR, Flags: root::UINT) -> root::HKL;
    }
    extern "C" {
        pub fn ActivateKeyboardLayout(hkl: root::HKL, Flags: root::UINT) -> root::HKL;
    }
    extern "C" {
        pub fn ToUnicodeEx(
            wVirtKey: root::UINT,
            wScanCode: root::UINT,
            lpKeyState: *const u8,
            pwszBuff: root::LPWSTR,
            cchBuff: i32,
            wFlags: root::UINT,
            dwhkl: root::HKL,
        ) -> i32;
    }
    extern "C" {
        pub fn UnloadKeyboardLayout(hkl: root::HKL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetKeyboardLayoutNameA(pwszKLID: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn GetKeyboardLayoutNameW(pwszKLID: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetKeyboardLayoutList(
            nBuff: i32,
            lpList: *mut root::HKL,
        ) -> i32;
    }
    extern "C" {
        pub fn GetKeyboardLayout(idThread: u32) -> root::HKL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMOUSEMOVEPOINT {
        pub x: i32,
        pub y: i32,
        pub time: u32,
        pub dwExtraInfo: u64,
    }
    pub type MOUSEMOVEPOINT = root::tagMOUSEMOVEPOINT;
    pub type PMOUSEMOVEPOINT = *mut root::tagMOUSEMOVEPOINT;
    pub type LPMOUSEMOVEPOINT = *mut root::tagMOUSEMOVEPOINT;
    extern "C" {
        pub fn GetMouseMovePointsEx(
            cbSize: root::UINT,
            lppt: root::LPMOUSEMOVEPOINT,
            lpptBuf: root::LPMOUSEMOVEPOINT,
            nBufPoints: i32,
            resolution: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn CreateDesktopA(
            lpszDesktop: *const i8,
            lpszDevice: *const i8,
            pDevmode: *mut root::DEVMODEA,
            dwFlags: u32,
            dwDesiredAccess: root::ACCESS_MASK,
            lpsa: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn CreateDesktopW(
            lpszDesktop: root::LPCWSTR,
            lpszDevice: root::LPCWSTR,
            pDevmode: *mut root::DEVMODEW,
            dwFlags: u32,
            dwDesiredAccess: root::ACCESS_MASK,
            lpsa: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn CreateDesktopExA(
            lpszDesktop: *const i8,
            lpszDevice: *const i8,
            pDevmode: *mut root::DEVMODEA,
            dwFlags: u32,
            dwDesiredAccess: root::ACCESS_MASK,
            lpsa: root::LPSECURITY_ATTRIBUTES,
            ulHeapSize: root::ULONG,
            pvoid: root::PVOID,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn CreateDesktopExW(
            lpszDesktop: root::LPCWSTR,
            lpszDevice: root::LPCWSTR,
            pDevmode: *mut root::DEVMODEW,
            dwFlags: u32,
            dwDesiredAccess: root::ACCESS_MASK,
            lpsa: root::LPSECURITY_ATTRIBUTES,
            ulHeapSize: root::ULONG,
            pvoid: root::PVOID,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn OpenDesktopA(
            lpszDesktop: *const i8,
            dwFlags: u32,
            fInherit: root::BOOL,
            dwDesiredAccess: root::ACCESS_MASK,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn OpenDesktopW(
            lpszDesktop: root::LPCWSTR,
            dwFlags: u32,
            fInherit: root::BOOL,
            dwDesiredAccess: root::ACCESS_MASK,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn OpenInputDesktop(
            dwFlags: u32,
            fInherit: root::BOOL,
            dwDesiredAccess: root::ACCESS_MASK,
        ) -> root::HDESK;
    }
    extern "C" {
        pub fn EnumDesktopsA(
            hwinsta: root::HWINSTA,
            lpEnumFunc: root::DESKTOPENUMPROCA,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDesktopsW(
            hwinsta: root::HWINSTA,
            lpEnumFunc: root::DESKTOPENUMPROCW,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDesktopWindows(
            hDesktop: root::HDESK,
            lpfn: root::WNDENUMPROC,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SwitchDesktop(hDesktop: root::HDESK) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadDesktop(hDesktop: root::HDESK) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseDesktop(hDesktop: root::HDESK) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadDesktop(dwThreadId: u32) -> root::HDESK;
    }
    extern "C" {
        pub fn CreateWindowStationA(
            lpwinsta: *const i8,
            dwFlags: u32,
            dwDesiredAccess: root::ACCESS_MASK,
            lpsa: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HWINSTA;
    }
    extern "C" {
        pub fn CreateWindowStationW(
            lpwinsta: root::LPCWSTR,
            dwFlags: u32,
            dwDesiredAccess: root::ACCESS_MASK,
            lpsa: root::LPSECURITY_ATTRIBUTES,
        ) -> root::HWINSTA;
    }
    extern "C" {
        pub fn OpenWindowStationA(
            lpszWinSta: *const i8,
            fInherit: root::BOOL,
            dwDesiredAccess: root::ACCESS_MASK,
        ) -> root::HWINSTA;
    }
    extern "C" {
        pub fn OpenWindowStationW(
            lpszWinSta: root::LPCWSTR,
            fInherit: root::BOOL,
            dwDesiredAccess: root::ACCESS_MASK,
        ) -> root::HWINSTA;
    }
    extern "C" {
        pub fn EnumWindowStationsA(
            lpEnumFunc: root::WINSTAENUMPROCA,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumWindowStationsW(
            lpEnumFunc: root::WINSTAENUMPROCW,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseWindowStation(hWinSta: root::HWINSTA) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessWindowStation(hWinSta: root::HWINSTA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetProcessWindowStation() -> root::HWINSTA;
    }
    extern "C" {
        pub fn SetUserObjectSecurity(
            hObj: root::HANDLE,
            pSIRequested: root::PSECURITY_INFORMATION,
            pSID: root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserObjectSecurity(
            hObj: root::HANDLE,
            pSIRequested: root::PSECURITY_INFORMATION,
            pSID: root::PSECURITY_DESCRIPTOR,
            nLength: u32,
            lpnLengthNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagUSEROBJECTFLAGS {
        pub fInherit: root::BOOL,
        pub fReserved: root::BOOL,
        pub dwFlags: u32,
    }
    pub type USEROBJECTFLAGS = root::tagUSEROBJECTFLAGS;
    pub type PUSEROBJECTFLAGS = *mut root::tagUSEROBJECTFLAGS;
    extern "C" {
        pub fn GetUserObjectInformationA(
            hObj: root::HANDLE,
            nIndex: i32,
            pvInfo: root::PVOID,
            nLength: u32,
            lpnLengthNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserObjectInformationW(
            hObj: root::HANDLE,
            nIndex: i32,
            pvInfo: root::PVOID,
            nLength: u32,
            lpnLengthNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetUserObjectInformationA(
            hObj: root::HANDLE,
            nIndex: i32,
            pvInfo: root::PVOID,
            nLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetUserObjectInformationW(
            hObj: root::HANDLE,
            nIndex: i32,
            pvInfo: root::PVOID,
            nLength: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWNDCLASSEXA {
        pub cbSize: root::UINT,
        pub style: root::UINT,
        pub lpfnWndProc: root::WNDPROC,
        pub cbClsExtra: i32,
        pub cbWndExtra: i32,
        pub hInstance: root::HINSTANCE,
        pub hIcon: root::HICON,
        pub hCursor: root::HCURSOR,
        pub hbrBackground: root::HBRUSH,
        pub lpszMenuName: *const i8,
        pub lpszClassName: *const i8,
        pub hIconSm: root::HICON,
    }
    pub type WNDCLASSEXA = root::tagWNDCLASSEXA;
    pub type PWNDCLASSEXA = *mut root::tagWNDCLASSEXA;
    pub type NPWNDCLASSEXA = *mut root::tagWNDCLASSEXA;
    pub type LPWNDCLASSEXA = *mut root::tagWNDCLASSEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWNDCLASSEXW {
        pub cbSize: root::UINT,
        pub style: root::UINT,
        pub lpfnWndProc: root::WNDPROC,
        pub cbClsExtra: i32,
        pub cbWndExtra: i32,
        pub hInstance: root::HINSTANCE,
        pub hIcon: root::HICON,
        pub hCursor: root::HCURSOR,
        pub hbrBackground: root::HBRUSH,
        pub lpszMenuName: root::LPCWSTR,
        pub lpszClassName: root::LPCWSTR,
        pub hIconSm: root::HICON,
    }
    pub type WNDCLASSEXW = root::tagWNDCLASSEXW;
    pub type PWNDCLASSEXW = *mut root::tagWNDCLASSEXW;
    pub type NPWNDCLASSEXW = *mut root::tagWNDCLASSEXW;
    pub type LPWNDCLASSEXW = *mut root::tagWNDCLASSEXW;
    pub type WNDCLASSEX = root::WNDCLASSEXA;
    pub type PWNDCLASSEX = root::PWNDCLASSEXA;
    pub type NPWNDCLASSEX = root::NPWNDCLASSEXA;
    pub type LPWNDCLASSEX = root::LPWNDCLASSEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWNDCLASSA {
        pub style: root::UINT,
        pub lpfnWndProc: root::WNDPROC,
        pub cbClsExtra: i32,
        pub cbWndExtra: i32,
        pub hInstance: root::HINSTANCE,
        pub hIcon: root::HICON,
        pub hCursor: root::HCURSOR,
        pub hbrBackground: root::HBRUSH,
        pub lpszMenuName: *const i8,
        pub lpszClassName: *const i8,
    }
    pub type WNDCLASSA = root::tagWNDCLASSA;
    pub type PWNDCLASSA = *mut root::tagWNDCLASSA;
    pub type NPWNDCLASSA = *mut root::tagWNDCLASSA;
    pub type LPWNDCLASSA = *mut root::tagWNDCLASSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWNDCLASSW {
        pub style: root::UINT,
        pub lpfnWndProc: root::WNDPROC,
        pub cbClsExtra: i32,
        pub cbWndExtra: i32,
        pub hInstance: root::HINSTANCE,
        pub hIcon: root::HICON,
        pub hCursor: root::HCURSOR,
        pub hbrBackground: root::HBRUSH,
        pub lpszMenuName: root::LPCWSTR,
        pub lpszClassName: root::LPCWSTR,
    }
    pub type WNDCLASSW = root::tagWNDCLASSW;
    pub type PWNDCLASSW = *mut root::tagWNDCLASSW;
    pub type NPWNDCLASSW = *mut root::tagWNDCLASSW;
    pub type LPWNDCLASSW = *mut root::tagWNDCLASSW;
    pub type WNDCLASS = root::WNDCLASSA;
    pub type PWNDCLASS = root::PWNDCLASSA;
    pub type NPWNDCLASS = root::NPWNDCLASSA;
    pub type LPWNDCLASS = root::LPWNDCLASSA;
    extern "C" {
        pub fn IsHungAppWindow(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn DisableProcessWindowsGhosting();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMSG {
        pub hwnd: root::HWND,
        pub message: root::UINT,
        pub wParam: root::WPARAM,
        pub lParam: root::LPARAM,
        pub time: u32,
        pub pt: root::POINT,
    }
    pub type MSG = root::tagMSG;
    pub type PMSG = *mut root::tagMSG;
    pub type NPMSG = *mut root::tagMSG;
    pub type LPMSG = *mut root::tagMSG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMINMAXINFO {
        pub ptReserved: root::POINT,
        pub ptMaxSize: root::POINT,
        pub ptMaxPosition: root::POINT,
        pub ptMinTrackSize: root::POINT,
        pub ptMaxTrackSize: root::POINT,
    }
    pub type MINMAXINFO = root::tagMINMAXINFO;
    pub type PMINMAXINFO = *mut root::tagMINMAXINFO;
    pub type LPMINMAXINFO = *mut root::tagMINMAXINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOPYDATASTRUCT {
        pub dwData: u64,
        pub cbData: u32,
        pub lpData: root::PVOID,
    }
    pub type COPYDATASTRUCT = root::tagCOPYDATASTRUCT;
    pub type PCOPYDATASTRUCT = *mut root::tagCOPYDATASTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMDINEXTMENU {
        pub hmenuIn: root::HMENU,
        pub hmenuNext: root::HMENU,
        pub hwndNext: root::HWND,
    }
    pub type MDINEXTMENU = root::tagMDINEXTMENU;
    pub type PMDINEXTMENU = *mut root::tagMDINEXTMENU;
    pub type LPMDINEXTMENU = *mut root::tagMDINEXTMENU;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct POWERBROADCAST_SETTING {
        pub PowerSetting: root::GUID,
        pub DataLength: u32,
        pub Data: [root::UCHAR; 1usize],
    }
    pub type PPOWERBROADCAST_SETTING = *mut root::POWERBROADCAST_SETTING;
    extern "C" {
        pub fn RegisterWindowMessageA(lpString: *const i8) -> root::UINT;
    }
    extern "C" {
        pub fn RegisterWindowMessageW(lpString: root::LPCWSTR) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWINDOWPOS {
        pub hwnd: root::HWND,
        pub hwndInsertAfter: root::HWND,
        pub x: i32,
        pub y: i32,
        pub cx: i32,
        pub cy: i32,
        pub flags: root::UINT,
    }
    pub type WINDOWPOS = root::tagWINDOWPOS;
    pub type LPWINDOWPOS = *mut root::tagWINDOWPOS;
    pub type PWINDOWPOS = *mut root::tagWINDOWPOS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNCCALCSIZE_PARAMS {
        pub rgrc: [root::RECT; 3usize],
        pub lppos: root::PWINDOWPOS,
    }
    pub type NCCALCSIZE_PARAMS = root::tagNCCALCSIZE_PARAMS;
    pub type LPNCCALCSIZE_PARAMS = *mut root::tagNCCALCSIZE_PARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTRACKMOUSEEVENT {
        pub cbSize: u32,
        pub dwFlags: u32,
        pub hwndTrack: root::HWND,
        pub dwHoverTime: u32,
    }
    pub type TRACKMOUSEEVENT = root::tagTRACKMOUSEEVENT;
    pub type LPTRACKMOUSEEVENT = *mut root::tagTRACKMOUSEEVENT;
    extern "C" {
        pub fn TrackMouseEvent(lpEventTrack: root::LPTRACKMOUSEEVENT) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawEdge(
            hdc: root::HDC,
            qrc: root::LPRECT,
            edge: root::UINT,
            grfFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawFrameControl(
            arg1: root::HDC,
            arg2: root::LPRECT,
            arg3: root::UINT,
            arg4: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawCaption(
            hwnd: root::HWND,
            hdc: root::HDC,
            lprect: *const root::RECT,
            flags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawAnimatedRects(
            hwnd: root::HWND,
            idAni: i32,
            lprcFrom: *const root::RECT,
            lprcTo: *const root::RECT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACCEL {
        pub fVirt: u8,
        pub key: u16,
        pub cmd: u16,
    }
    pub type ACCEL = root::tagACCEL;
    pub type LPACCEL = *mut root::tagACCEL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPAINTSTRUCT {
        pub hdc: root::HDC,
        pub fErase: root::BOOL,
        pub rcPaint: root::RECT,
        pub fRestore: root::BOOL,
        pub fIncUpdate: root::BOOL,
        pub rgbReserved: [u8; 32usize],
    }
    pub type PAINTSTRUCT = root::tagPAINTSTRUCT;
    pub type PPAINTSTRUCT = *mut root::tagPAINTSTRUCT;
    pub type NPPAINTSTRUCT = *mut root::tagPAINTSTRUCT;
    pub type LPPAINTSTRUCT = *mut root::tagPAINTSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCREATESTRUCTA {
        pub lpCreateParams: root::LPVOID,
        pub hInstance: root::HINSTANCE,
        pub hMenu: root::HMENU,
        pub hwndParent: root::HWND,
        pub cy: i32,
        pub cx: i32,
        pub y: i32,
        pub x: i32,
        pub style: i32,
        pub lpszName: *const i8,
        pub lpszClass: *const i8,
        pub dwExStyle: u32,
    }
    pub type CREATESTRUCTA = root::tagCREATESTRUCTA;
    pub type LPCREATESTRUCTA = *mut root::tagCREATESTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCREATESTRUCTW {
        pub lpCreateParams: root::LPVOID,
        pub hInstance: root::HINSTANCE,
        pub hMenu: root::HMENU,
        pub hwndParent: root::HWND,
        pub cy: i32,
        pub cx: i32,
        pub y: i32,
        pub x: i32,
        pub style: i32,
        pub lpszName: root::LPCWSTR,
        pub lpszClass: root::LPCWSTR,
        pub dwExStyle: u32,
    }
    pub type CREATESTRUCTW = root::tagCREATESTRUCTW;
    pub type LPCREATESTRUCTW = *mut root::tagCREATESTRUCTW;
    pub type CREATESTRUCT = root::CREATESTRUCTA;
    pub type LPCREATESTRUCT = root::LPCREATESTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWINDOWPLACEMENT {
        pub length: root::UINT,
        pub flags: root::UINT,
        pub showCmd: root::UINT,
        pub ptMinPosition: root::POINT,
        pub ptMaxPosition: root::POINT,
        pub rcNormalPosition: root::RECT,
    }
    pub type WINDOWPLACEMENT = root::tagWINDOWPLACEMENT;
    pub type PWINDOWPLACEMENT = *mut root::WINDOWPLACEMENT;
    pub type LPWINDOWPLACEMENT = *mut root::WINDOWPLACEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNMHDR {
        pub hwndFrom: root::HWND,
        pub idFrom: u64,
        pub code: root::UINT,
    }
    pub type NMHDR = root::tagNMHDR;
    pub type LPNMHDR = *mut root::NMHDR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTYLESTRUCT {
        pub styleOld: u32,
        pub styleNew: u32,
    }
    pub type STYLESTRUCT = root::tagSTYLESTRUCT;
    pub type LPSTYLESTRUCT = *mut root::tagSTYLESTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMEASUREITEMSTRUCT {
        pub CtlType: root::UINT,
        pub CtlID: root::UINT,
        pub itemID: root::UINT,
        pub itemWidth: root::UINT,
        pub itemHeight: root::UINT,
        pub itemData: u64,
    }
    pub type MEASUREITEMSTRUCT = root::tagMEASUREITEMSTRUCT;
    pub type PMEASUREITEMSTRUCT = *mut root::tagMEASUREITEMSTRUCT;
    pub type LPMEASUREITEMSTRUCT = *mut root::tagMEASUREITEMSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDRAWITEMSTRUCT {
        pub CtlType: root::UINT,
        pub CtlID: root::UINT,
        pub itemID: root::UINT,
        pub itemAction: root::UINT,
        pub itemState: root::UINT,
        pub hwndItem: root::HWND,
        pub hDC: root::HDC,
        pub rcItem: root::RECT,
        pub itemData: u64,
    }
    pub type DRAWITEMSTRUCT = root::tagDRAWITEMSTRUCT;
    pub type PDRAWITEMSTRUCT = *mut root::tagDRAWITEMSTRUCT;
    pub type LPDRAWITEMSTRUCT = *mut root::tagDRAWITEMSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDELETEITEMSTRUCT {
        pub CtlType: root::UINT,
        pub CtlID: root::UINT,
        pub itemID: root::UINT,
        pub hwndItem: root::HWND,
        pub itemData: u64,
    }
    pub type DELETEITEMSTRUCT = root::tagDELETEITEMSTRUCT;
    pub type PDELETEITEMSTRUCT = *mut root::tagDELETEITEMSTRUCT;
    pub type LPDELETEITEMSTRUCT = *mut root::tagDELETEITEMSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOMPAREITEMSTRUCT {
        pub CtlType: root::UINT,
        pub CtlID: root::UINT,
        pub hwndItem: root::HWND,
        pub itemID1: root::UINT,
        pub itemData1: u64,
        pub itemID2: root::UINT,
        pub itemData2: u64,
        pub dwLocaleId: u32,
    }
    pub type COMPAREITEMSTRUCT = root::tagCOMPAREITEMSTRUCT;
    pub type PCOMPAREITEMSTRUCT = *mut root::tagCOMPAREITEMSTRUCT;
    pub type LPCOMPAREITEMSTRUCT = *mut root::tagCOMPAREITEMSTRUCT;
    extern "C" {
        pub fn GetMessageA(
            lpMsg: root::LPMSG,
            hWnd: root::HWND,
            wMsgFilterMin: root::UINT,
            wMsgFilterMax: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMessageW(
            lpMsg: root::LPMSG,
            hWnd: root::HWND,
            wMsgFilterMin: root::UINT,
            wMsgFilterMax: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TranslateMessage(lpMsg: *const root::MSG) -> root::BOOL;
    }
    extern "C" {
        pub fn DispatchMessageA(lpMsg: *const root::MSG) -> root::LRESULT;
    }
    extern "C" {
        pub fn DispatchMessageW(lpMsg: *const root::MSG) -> root::LRESULT;
    }
    extern "C" {
        pub fn SetMessageQueue(cMessagesMax: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn PeekMessageA(
            lpMsg: root::LPMSG,
            hWnd: root::HWND,
            wMsgFilterMin: root::UINT,
            wMsgFilterMax: root::UINT,
            wRemoveMsg: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PeekMessageW(
            lpMsg: root::LPMSG,
            hWnd: root::HWND,
            wMsgFilterMin: root::UINT,
            wMsgFilterMax: root::UINT,
            wRemoveMsg: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterHotKey(
            hWnd: root::HWND,
            id: i32,
            fsModifiers: root::UINT,
            vk: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterHotKey(hWnd: root::HWND, id: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn ExitWindowsEx(uFlags: root::UINT, dwReason: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn SwapMouseButton(fSwap: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMessagePos() -> u32;
    }
    extern "C" {
        pub fn GetMessageTime() -> i32;
    }
    extern "C" {
        pub fn GetMessageExtraInfo() -> root::LPARAM;
    }
    extern "C" {
        pub fn GetUnpredictedMessagePos() -> u32;
    }
    extern "C" {
        pub fn IsWow64Message() -> root::BOOL;
    }
    extern "C" {
        pub fn SetMessageExtraInfo(lParam: root::LPARAM) -> root::LPARAM;
    }
    extern "C" {
        pub fn SendMessageA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SendMessageW(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SendMessageTimeoutA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
            fuFlags: root::UINT,
            uTimeout: root::UINT,
            lpdwResult: root::PDWORD_PTR,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SendMessageTimeoutW(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
            fuFlags: root::UINT,
            uTimeout: root::UINT,
            lpdwResult: root::PDWORD_PTR,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SendNotifyMessageA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SendNotifyMessageW(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SendMessageCallbackA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
            lpResultCallBack: root::SENDASYNCPROC,
            dwData: u64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SendMessageCallbackW(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
            lpResultCallBack: root::SENDASYNCPROC,
            dwData: u64,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct BSMINFO {
        pub cbSize: root::UINT,
        pub hdesk: root::HDESK,
        pub hwnd: root::HWND,
        pub luid: root::LUID,
    }
    pub type PBSMINFO = *mut root::BSMINFO;
    extern "C" {
        pub fn BroadcastSystemMessageExA(
            flags: u32,
            lpInfo: root::LPDWORD,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
            pbsmInfo: root::PBSMINFO,
        ) -> i32;
    }
    extern "C" {
        pub fn BroadcastSystemMessageExW(
            flags: u32,
            lpInfo: root::LPDWORD,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
            pbsmInfo: root::PBSMINFO,
        ) -> i32;
    }
    extern "C" {
        pub fn BroadcastSystemMessageA(
            flags: u32,
            lpInfo: root::LPDWORD,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn BroadcastSystemMessageW(
            flags: u32,
            lpInfo: root::LPDWORD,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> i32;
    }
    pub type HDEVNOTIFY = root::PVOID;
    pub type PHDEVNOTIFY = *mut root::HDEVNOTIFY;
    extern "C" {
        pub fn RegisterDeviceNotificationA(
            hRecipient: root::HANDLE,
            NotificationFilter: root::LPVOID,
            Flags: u32,
        ) -> root::HDEVNOTIFY;
    }
    extern "C" {
        pub fn RegisterDeviceNotificationW(
            hRecipient: root::HANDLE,
            NotificationFilter: root::LPVOID,
            Flags: u32,
        ) -> root::HDEVNOTIFY;
    }
    extern "C" {
        pub fn UnregisterDeviceNotification(Handle: root::HDEVNOTIFY) -> root::BOOL;
    }
    pub type HPOWERNOTIFY = root::PVOID;
    pub type PHPOWERNOTIFY = *mut root::HPOWERNOTIFY;
    extern "C" {
        pub fn RegisterPowerSettingNotification(
            hRecipient: root::HANDLE,
            PowerSettingGuid: root::LPCGUID,
            Flags: u32,
        ) -> root::HPOWERNOTIFY;
    }
    extern "C" {
        pub fn UnregisterPowerSettingNotification(Handle: root::HPOWERNOTIFY) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterSuspendResumeNotification(
            hRecipient: root::HANDLE,
            Flags: u32,
        ) -> root::HPOWERNOTIFY;
    }
    extern "C" {
        pub fn UnregisterSuspendResumeNotification(Handle: root::HPOWERNOTIFY) -> root::BOOL;
    }
    extern "C" {
        pub fn PostMessageA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PostMessageW(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PostThreadMessageA(
            idThread: u32,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PostThreadMessageW(
            idThread: u32,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AttachThreadInput(
            idAttach: u32,
            idAttachTo: u32,
            fAttach: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReplyMessage(lResult: root::LRESULT) -> root::BOOL;
    }
    extern "C" {
        pub fn WaitMessage() -> root::BOOL;
    }
    extern "C" {
        pub fn WaitForInputIdle(hProcess: root::HANDLE, dwMilliseconds: u32)
            -> u32;
    }
    extern "C" {
        pub fn DefWindowProcA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DefWindowProcW(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn PostQuitMessage(nExitCode: i32);
    }
    extern "C" {
        pub fn CallWindowProcA(
            lpPrevWndFunc: root::WNDPROC,
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn CallWindowProcW(
            lpPrevWndFunc: root::WNDPROC,
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn InSendMessage() -> root::BOOL;
    }
    extern "C" {
        pub fn InSendMessageEx(lpReserved: root::LPVOID) -> u32;
    }
    extern "C" {
        pub fn GetDoubleClickTime() -> root::UINT;
    }
    extern "C" {
        pub fn SetDoubleClickTime(arg1: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterClassA(lpWndClass: *const root::WNDCLASSA) -> root::ATOM;
    }
    extern "C" {
        pub fn RegisterClassW(lpWndClass: *const root::WNDCLASSW) -> root::ATOM;
    }
    extern "C" {
        pub fn UnregisterClassA(
            lpClassName: *const i8,
            hInstance: root::HINSTANCE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterClassW(
            lpClassName: root::LPCWSTR,
            hInstance: root::HINSTANCE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetClassInfoA(
            hInstance: root::HINSTANCE,
            lpClassName: *const i8,
            lpWndClass: root::LPWNDCLASSA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetClassInfoW(
            hInstance: root::HINSTANCE,
            lpClassName: root::LPCWSTR,
            lpWndClass: root::LPWNDCLASSW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterClassExA(arg1: *const root::WNDCLASSEXA) -> root::ATOM;
    }
    extern "C" {
        pub fn RegisterClassExW(arg1: *const root::WNDCLASSEXW) -> root::ATOM;
    }
    extern "C" {
        pub fn GetClassInfoExA(
            hInstance: root::HINSTANCE,
            lpszClass: *const i8,
            lpwcx: root::LPWNDCLASSEXA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetClassInfoExW(
            hInstance: root::HINSTANCE,
            lpszClass: root::LPCWSTR,
            lpwcx: root::LPWNDCLASSEXW,
        ) -> root::BOOL;
    }
    pub type PREGISTERCLASSNAMEW =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::LPCWSTR) -> root::BOOLEAN>;
    extern "C" {
        pub fn CreateWindowExA(
            dwExStyle: u32,
            lpClassName: *const i8,
            lpWindowName: *const i8,
            dwStyle: u32,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
            hWndParent: root::HWND,
            hMenu: root::HMENU,
            hInstance: root::HINSTANCE,
            lpParam: root::LPVOID,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn CreateWindowExW(
            dwExStyle: u32,
            lpClassName: root::LPCWSTR,
            lpWindowName: root::LPCWSTR,
            dwStyle: u32,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
            hWndParent: root::HWND,
            hMenu: root::HMENU,
            hInstance: root::HINSTANCE,
            lpParam: root::LPVOID,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn IsWindow(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn IsMenu(hMenu: root::HMENU) -> root::BOOL;
    }
    extern "C" {
        pub fn IsChild(hWndParent: root::HWND, hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn DestroyWindow(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowWindow(hWnd: root::HWND, nCmdShow: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn AnimateWindow(
            hWnd: root::HWND,
            dwTime: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UpdateLayeredWindow(
            hWnd: root::HWND,
            hdcDst: root::HDC,
            pptDst: *mut root::POINT,
            psize: *mut root::SIZE,
            hdcSrc: root::HDC,
            pptSrc: *mut root::POINT,
            crKey: root::COLORREF,
            pblend: *mut root::BLENDFUNCTION,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagUPDATELAYEREDWINDOWINFO {
        pub cbSize: u32,
        pub hdcDst: root::HDC,
        pub pptDst: *const root::POINT,
        pub psize: *const root::SIZE,
        pub hdcSrc: root::HDC,
        pub pptSrc: *const root::POINT,
        pub crKey: root::COLORREF,
        pub pblend: *const root::BLENDFUNCTION,
        pub dwFlags: u32,
        pub prcDirty: *const root::RECT,
    }
    pub type UPDATELAYEREDWINDOWINFO = root::tagUPDATELAYEREDWINDOWINFO;
    pub type PUPDATELAYEREDWINDOWINFO = *mut root::tagUPDATELAYEREDWINDOWINFO;
    extern "C" {
        pub fn UpdateLayeredWindowIndirect(
            hWnd: root::HWND,
            pULWInfo: *const root::UPDATELAYEREDWINDOWINFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLayeredWindowAttributes(
            hwnd: root::HWND,
            pcrKey: *mut root::COLORREF,
            pbAlpha: *mut u8,
            pdwFlags: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PrintWindow(hwnd: root::HWND, hdcBlt: root::HDC, nFlags: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn SetLayeredWindowAttributes(
            hwnd: root::HWND,
            crKey: root::COLORREF,
            bAlpha: u8,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowWindowAsync(hWnd: root::HWND, nCmdShow: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn FlashWindow(hWnd: root::HWND, bInvert: root::BOOL) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FLASHWINFO {
        pub cbSize: root::UINT,
        pub hwnd: root::HWND,
        pub dwFlags: u32,
        pub uCount: root::UINT,
        pub dwTimeout: u32,
    }
    pub type PFLASHWINFO = *mut root::FLASHWINFO;
    extern "C" {
        pub fn FlashWindowEx(pfwi: root::PFLASHWINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowOwnedPopups(hWnd: root::HWND, fShow: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenIcon(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseWindow(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn MoveWindow(
            hWnd: root::HWND,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
            bRepaint: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowPos(
            hWnd: root::HWND,
            hWndInsertAfter: root::HWND,
            X: i32,
            Y: i32,
            cx: i32,
            cy: i32,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowPlacement(
            hWnd: root::HWND,
            lpwndpl: *mut root::WINDOWPLACEMENT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowPlacement(
            hWnd: root::HWND,
            lpwndpl: *const root::WINDOWPLACEMENT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowDisplayAffinity(
            hWnd: root::HWND,
            pdwAffinity: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowDisplayAffinity(hWnd: root::HWND, dwAffinity: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn BeginDeferWindowPos(nNumWindows: i32) -> root::HDWP;
    }
    extern "C" {
        pub fn DeferWindowPos(
            hWinPosInfo: root::HDWP,
            hWnd: root::HWND,
            hWndInsertAfter: root::HWND,
            x: i32,
            y: i32,
            cx: i32,
            cy: i32,
            uFlags: root::UINT,
        ) -> root::HDWP;
    }
    extern "C" {
        pub fn EndDeferWindowPos(hWinPosInfo: root::HDWP) -> root::BOOL;
    }
    extern "C" {
        pub fn IsWindowVisible(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn IsIconic(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn AnyPopup() -> root::BOOL;
    }
    extern "C" {
        pub fn BringWindowToTop(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn IsZoomed(hWnd: root::HWND) -> root::BOOL;
    }
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct DLGTEMPLATE {
        pub style: u32,
        pub dwExtendedStyle: u32,
        pub cdit: u16,
        pub x: i16,
        pub y: i16,
        pub cx: i16,
        pub cy: i16,
    }
    pub type LPDLGTEMPLATEA = *mut root::DLGTEMPLATE;
    pub type LPDLGTEMPLATEW = *mut root::DLGTEMPLATE;
    pub type LPDLGTEMPLATE = root::LPDLGTEMPLATEA;
    pub type LPCDLGTEMPLATEA = *const root::DLGTEMPLATE;
    pub type LPCDLGTEMPLATEW = *const root::DLGTEMPLATE;
    pub type LPCDLGTEMPLATE = root::LPCDLGTEMPLATEA;
    #[repr(C, packed(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct DLGITEMTEMPLATE {
        pub style: u32,
        pub dwExtendedStyle: u32,
        pub x: i16,
        pub y: i16,
        pub cx: i16,
        pub cy: i16,
        pub id: u16,
    }
    pub type PDLGITEMTEMPLATEA = *mut root::DLGITEMTEMPLATE;
    pub type PDLGITEMTEMPLATEW = *mut root::DLGITEMTEMPLATE;
    pub type PDLGITEMTEMPLATE = root::PDLGITEMTEMPLATEA;
    pub type LPDLGITEMTEMPLATEA = *mut root::DLGITEMTEMPLATE;
    pub type LPDLGITEMTEMPLATEW = *mut root::DLGITEMTEMPLATE;
    pub type LPDLGITEMTEMPLATE = root::LPDLGITEMTEMPLATEA;
    extern "C" {
        pub fn CreateDialogParamA(
            hInstance: root::HINSTANCE,
            lpTemplateName: *const i8,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn CreateDialogParamW(
            hInstance: root::HINSTANCE,
            lpTemplateName: root::LPCWSTR,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn CreateDialogIndirectParamA(
            hInstance: root::HINSTANCE,
            lpTemplate: root::LPCDLGTEMPLATEA,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn CreateDialogIndirectParamW(
            hInstance: root::HINSTANCE,
            lpTemplate: root::LPCDLGTEMPLATEW,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn DialogBoxParamA(
            hInstance: root::HINSTANCE,
            lpTemplateName: *const i8,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::INT_PTR;
    }
    extern "C" {
        pub fn DialogBoxParamW(
            hInstance: root::HINSTANCE,
            lpTemplateName: root::LPCWSTR,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::INT_PTR;
    }
    extern "C" {
        pub fn DialogBoxIndirectParamA(
            hInstance: root::HINSTANCE,
            hDialogTemplate: root::LPCDLGTEMPLATEA,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::INT_PTR;
    }
    extern "C" {
        pub fn DialogBoxIndirectParamW(
            hInstance: root::HINSTANCE,
            hDialogTemplate: root::LPCDLGTEMPLATEW,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::INT_PTR;
    }
    extern "C" {
        pub fn EndDialog(hDlg: root::HWND, nResult: root::INT_PTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDlgItem(hDlg: root::HWND, nIDDlgItem: i32) -> root::HWND;
    }
    extern "C" {
        pub fn SetDlgItemInt(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            uValue: root::UINT,
            bSigned: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDlgItemInt(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            lpTranslated: *mut root::BOOL,
            bSigned: root::BOOL,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn SetDlgItemTextA(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            lpString: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDlgItemTextW(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            lpString: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDlgItemTextA(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            lpString: *mut i8,
            cchMax: i32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetDlgItemTextW(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            lpString: root::LPWSTR,
            cchMax: i32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn CheckDlgButton(
            hDlg: root::HWND,
            nIDButton: i32,
            uCheck: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckRadioButton(
            hDlg: root::HWND,
            nIDFirstButton: i32,
            nIDLastButton: i32,
            nIDCheckButton: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsDlgButtonChecked(hDlg: root::HWND, nIDButton: i32)
            -> root::UINT;
    }
    extern "C" {
        pub fn SendDlgItemMessageA(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SendDlgItemMessageW(
            hDlg: root::HWND,
            nIDDlgItem: i32,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn GetNextDlgGroupItem(
            hDlg: root::HWND,
            hCtl: root::HWND,
            bPrevious: root::BOOL,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn GetNextDlgTabItem(
            hDlg: root::HWND,
            hCtl: root::HWND,
            bPrevious: root::BOOL,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn GetDlgCtrlID(hWnd: root::HWND) -> i32;
    }
    extern "C" {
        pub fn GetDialogBaseUnits() -> i32;
    }
    extern "C" {
        pub fn DefDlgProcA(
            hDlg: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DefDlgProcW(
            hDlg: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS_DCDC_DEFAULT:
        root::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = 0;
    pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS_DCDC_DISABLE_FONT_UPDATE:
        root::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = 1;
    pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS_DCDC_DISABLE_RELAYOUT:
        root::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = 2;
    pub type DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = i32;
    extern "C" {
        pub fn SetDialogControlDpiChangeBehavior(
            hWnd: root::HWND,
            mask: root::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS,
            values: root::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDialogControlDpiChangeBehavior(
            hWnd: root::HWND,
        ) -> root::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
    }
    pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DEFAULT: root::DIALOG_DPI_CHANGE_BEHAVIORS = 0;
    pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DISABLE_ALL: root::DIALOG_DPI_CHANGE_BEHAVIORS = 1;
    pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DISABLE_RESIZE: root::DIALOG_DPI_CHANGE_BEHAVIORS = 2;
    pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DISABLE_CONTROL_RELAYOUT:
        root::DIALOG_DPI_CHANGE_BEHAVIORS = 4;
    pub type DIALOG_DPI_CHANGE_BEHAVIORS = i32;
    extern "C" {
        pub fn SetDialogDpiChangeBehavior(
            hDlg: root::HWND,
            mask: root::DIALOG_DPI_CHANGE_BEHAVIORS,
            values: root::DIALOG_DPI_CHANGE_BEHAVIORS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDialogDpiChangeBehavior(hDlg: root::HWND) -> root::DIALOG_DPI_CHANGE_BEHAVIORS;
    }
    extern "C" {
        pub fn CallMsgFilterA(lpMsg: root::LPMSG, nCode: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn CallMsgFilterW(lpMsg: root::LPMSG, nCode: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenClipboard(hWndNewOwner: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseClipboard() -> root::BOOL;
    }
    extern "C" {
        pub fn GetClipboardSequenceNumber() -> u32;
    }
    extern "C" {
        pub fn GetClipboardOwner() -> root::HWND;
    }
    extern "C" {
        pub fn SetClipboardViewer(hWndNewViewer: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn GetClipboardViewer() -> root::HWND;
    }
    extern "C" {
        pub fn ChangeClipboardChain(hWndRemove: root::HWND, hWndNewNext: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn SetClipboardData(uFormat: root::UINT, hMem: root::HANDLE) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetClipboardData(uFormat: root::UINT) -> root::HANDLE;
    }
    extern "C" {
        pub fn RegisterClipboardFormatA(lpszFormat: *const i8) -> root::UINT;
    }
    extern "C" {
        pub fn RegisterClipboardFormatW(lpszFormat: root::LPCWSTR) -> root::UINT;
    }
    extern "C" {
        pub fn CountClipboardFormats() -> i32;
    }
    extern "C" {
        pub fn EnumClipboardFormats(format: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn GetClipboardFormatNameA(
            format: root::UINT,
            lpszFormatName: *mut i8,
            cchMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetClipboardFormatNameW(
            format: root::UINT,
            lpszFormatName: root::LPWSTR,
            cchMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn EmptyClipboard() -> root::BOOL;
    }
    extern "C" {
        pub fn IsClipboardFormatAvailable(format: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPriorityClipboardFormat(
            paFormatPriorityList: *mut root::UINT,
            cFormats: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetOpenClipboardWindow() -> root::HWND;
    }
    extern "C" {
        pub fn AddClipboardFormatListener(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveClipboardFormatListener(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUpdatedClipboardFormats(
            lpuiFormats: root::PUINT,
            cFormats: root::UINT,
            pcFormatsOut: root::PUINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CharToOemA(pSrc: *const i8, pDst: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn CharToOemW(pSrc: root::LPCWSTR, pDst: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn OemToCharA(pSrc: *const i8, pDst: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn OemToCharW(pSrc: *const i8, pDst: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn CharToOemBuffA(
            lpszSrc: *const i8,
            lpszDst: *mut i8,
            cchDstLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CharToOemBuffW(
            lpszSrc: root::LPCWSTR,
            lpszDst: *mut i8,
            cchDstLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OemToCharBuffA(
            lpszSrc: *const i8,
            lpszDst: *mut i8,
            cchDstLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OemToCharBuffW(
            lpszSrc: *const i8,
            lpszDst: root::LPWSTR,
            cchDstLength: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CharUpperA(lpsz: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn CharUpperW(lpsz: root::LPWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn CharUpperBuffA(lpsz: *mut i8, cchLength: u32) -> u32;
    }
    extern "C" {
        pub fn CharUpperBuffW(lpsz: root::LPWSTR, cchLength: u32) -> u32;
    }
    extern "C" {
        pub fn CharLowerA(lpsz: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn CharLowerW(lpsz: root::LPWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn CharLowerBuffA(lpsz: *mut i8, cchLength: u32) -> u32;
    }
    extern "C" {
        pub fn CharLowerBuffW(lpsz: root::LPWSTR, cchLength: u32) -> u32;
    }
    extern "C" {
        pub fn CharNextA(lpsz: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn CharNextW(lpsz: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn CharPrevA(lpszStart: *const i8, lpszCurrent: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn CharPrevW(lpszStart: root::LPCWSTR, lpszCurrent: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn CharNextExA(
            CodePage: u16,
            lpCurrentChar: *const i8,
            dwFlags: u32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn CharPrevExA(
            CodePage: u16,
            lpStart: *const i8,
            lpCurrentChar: *const i8,
            dwFlags: u32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn IsCharAlphaA(ch: i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharAlphaW(ch: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharAlphaNumericA(ch: i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharAlphaNumericW(ch: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharUpperA(ch: i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharUpperW(ch: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharLowerA(ch: i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharLowerW(ch: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFocus(hWnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn GetActiveWindow() -> root::HWND;
    }
    extern "C" {
        pub fn GetFocus() -> root::HWND;
    }
    extern "C" {
        pub fn GetKBCodePage() -> root::UINT;
    }
    extern "C" {
        pub fn GetKeyState(nVirtKey: i32) -> i16;
    }
    extern "C" {
        pub fn GetAsyncKeyState(vKey: i32) -> i16;
    }
    extern "C" {
        pub fn GetKeyboardState(lpKeyState: root::PBYTE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetKeyboardState(lpKeyState: root::LPBYTE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetKeyNameTextA(
            lParam: i32,
            lpString: *mut i8,
            cchSize: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetKeyNameTextW(
            lParam: i32,
            lpString: root::LPWSTR,
            cchSize: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetKeyboardType(nTypeFlag: i32) -> i32;
    }
    extern "C" {
        pub fn ToAscii(
            uVirtKey: root::UINT,
            uScanCode: root::UINT,
            lpKeyState: *const u8,
            lpChar: root::LPWORD,
            uFlags: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn ToAsciiEx(
            uVirtKey: root::UINT,
            uScanCode: root::UINT,
            lpKeyState: *const u8,
            lpChar: root::LPWORD,
            uFlags: root::UINT,
            dwhkl: root::HKL,
        ) -> i32;
    }
    extern "C" {
        pub fn ToUnicode(
            wVirtKey: root::UINT,
            wScanCode: root::UINT,
            lpKeyState: *const u8,
            pwszBuff: root::LPWSTR,
            cchBuff: i32,
            wFlags: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn OemKeyScan(wOemChar: u16) -> u32;
    }
    extern "C" {
        pub fn VkKeyScanA(ch: i8) -> i16;
    }
    extern "C" {
        pub fn VkKeyScanW(ch: u16) -> i16;
    }
    extern "C" {
        pub fn VkKeyScanExA(ch: i8, dwhkl: root::HKL) -> i16;
    }
    extern "C" {
        pub fn VkKeyScanExW(ch: u16, dwhkl: root::HKL) -> i16;
    }
    extern "C" {
        pub fn keybd_event(
            bVk: u8,
            bScan: u8,
            dwFlags: u32,
            dwExtraInfo: u64,
        );
    }
    extern "C" {
        pub fn mouse_event(
            dwFlags: u32,
            dx: u32,
            dy: u32,
            dwData: u32,
            dwExtraInfo: u64,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMOUSEINPUT {
        pub dx: i32,
        pub dy: i32,
        pub mouseData: u32,
        pub dwFlags: u32,
        pub time: u32,
        pub dwExtraInfo: u64,
    }
    pub type MOUSEINPUT = root::tagMOUSEINPUT;
    pub type PMOUSEINPUT = *mut root::tagMOUSEINPUT;
    pub type LPMOUSEINPUT = *mut root::tagMOUSEINPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagKEYBDINPUT {
        pub wVk: u16,
        pub wScan: u16,
        pub dwFlags: u32,
        pub time: u32,
        pub dwExtraInfo: u64,
    }
    pub type KEYBDINPUT = root::tagKEYBDINPUT;
    pub type PKEYBDINPUT = *mut root::tagKEYBDINPUT;
    pub type LPKEYBDINPUT = *mut root::tagKEYBDINPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHARDWAREINPUT {
        pub uMsg: u32,
        pub wParamL: u16,
        pub wParamH: u16,
    }
    pub type HARDWAREINPUT = root::tagHARDWAREINPUT;
    pub type PHARDWAREINPUT = *mut root::tagHARDWAREINPUT;
    pub type LPHARDWAREINPUT = *mut root::tagHARDWAREINPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagINPUT {
        pub type_: u32,
        pub __bindgen_anon_1: root::tagINPUT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagINPUT__bindgen_ty_1 {
        pub mi: root::MOUSEINPUT,
        pub ki: root::KEYBDINPUT,
        pub hi: root::HARDWAREINPUT,
    }
    pub type INPUT = root::tagINPUT;
    pub type PINPUT = *mut root::tagINPUT;
    pub type LPINPUT = *mut root::tagINPUT;
    extern "C" {
        pub fn SendInput(
            cInputs: root::UINT,
            pInputs: root::LPINPUT,
            cbSize: i32,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HTOUCHINPUT__ {
        pub unused: i32,
    }
    pub type HTOUCHINPUT = *mut root::HTOUCHINPUT__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTOUCHINPUT {
        pub x: i32,
        pub y: i32,
        pub hSource: root::HANDLE,
        pub dwID: u32,
        pub dwFlags: u32,
        pub dwMask: u32,
        pub dwTime: u32,
        pub dwExtraInfo: u64,
        pub cxContact: u32,
        pub cyContact: u32,
    }
    pub type TOUCHINPUT = root::tagTOUCHINPUT;
    pub type PTOUCHINPUT = *mut root::tagTOUCHINPUT;
    pub type PCTOUCHINPUT = *const root::TOUCHINPUT;
    extern "C" {
        pub fn GetTouchInputInfo(
            hTouchInput: root::HTOUCHINPUT,
            cInputs: root::UINT,
            pInputs: root::PTOUCHINPUT,
            cbSize: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseTouchInputHandle(hTouchInput: root::HTOUCHINPUT) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterTouchWindow(hwnd: root::HWND, ulFlags: root::ULONG) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterTouchWindow(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn IsTouchWindow(hwnd: root::HWND, pulFlags: root::PULONG) -> root::BOOL;
    }
    pub const tagPOINTER_INPUT_TYPE_PT_POINTER: root::tagPOINTER_INPUT_TYPE = 1;
    pub const tagPOINTER_INPUT_TYPE_PT_TOUCH: root::tagPOINTER_INPUT_TYPE = 2;
    pub const tagPOINTER_INPUT_TYPE_PT_PEN: root::tagPOINTER_INPUT_TYPE = 3;
    pub const tagPOINTER_INPUT_TYPE_PT_MOUSE: root::tagPOINTER_INPUT_TYPE = 4;
    pub const tagPOINTER_INPUT_TYPE_PT_TOUCHPAD: root::tagPOINTER_INPUT_TYPE = 5;
    pub type tagPOINTER_INPUT_TYPE = i32;
    pub type POINTER_INPUT_TYPE = u32;
    pub type POINTER_FLAGS = root::UINT32;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_NONE:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 0;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIRSTBUTTON_DOWN:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 1;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIRSTBUTTON_UP:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 2;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_SECONDBUTTON_DOWN:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 3;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_SECONDBUTTON_UP:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 4;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_THIRDBUTTON_DOWN:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 5;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_THIRDBUTTON_UP:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 6;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FOURTHBUTTON_DOWN:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 7;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FOURTHBUTTON_UP:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 8;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIFTHBUTTON_DOWN:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 9;
    pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIFTHBUTTON_UP:
        root::tagPOINTER_BUTTON_CHANGE_TYPE = 10;
    pub type tagPOINTER_BUTTON_CHANGE_TYPE = i32;
    pub use self::super::root::tagPOINTER_BUTTON_CHANGE_TYPE as POINTER_BUTTON_CHANGE_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTER_INFO {
        pub pointerType: root::POINTER_INPUT_TYPE,
        pub pointerId: root::UINT32,
        pub frameId: root::UINT32,
        pub pointerFlags: root::POINTER_FLAGS,
        pub sourceDevice: root::HANDLE,
        pub hwndTarget: root::HWND,
        pub ptPixelLocation: root::POINT,
        pub ptHimetricLocation: root::POINT,
        pub ptPixelLocationRaw: root::POINT,
        pub ptHimetricLocationRaw: root::POINT,
        pub dwTime: u32,
        pub historyCount: root::UINT32,
        pub InputData: root::INT32,
        pub dwKeyStates: u32,
        pub PerformanceCount: root::UINT64,
        pub ButtonChangeType: root::POINTER_BUTTON_CHANGE_TYPE,
    }
    pub type POINTER_INFO = root::tagPOINTER_INFO;
    pub type TOUCH_FLAGS = root::UINT32;
    pub type TOUCH_MASK = root::UINT32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTER_TOUCH_INFO {
        pub pointerInfo: root::POINTER_INFO,
        pub touchFlags: root::TOUCH_FLAGS,
        pub touchMask: root::TOUCH_MASK,
        pub rcContact: root::RECT,
        pub rcContactRaw: root::RECT,
        pub orientation: root::UINT32,
        pub pressure: root::UINT32,
    }
    pub type POINTER_TOUCH_INFO = root::tagPOINTER_TOUCH_INFO;
    pub type PEN_FLAGS = root::UINT32;
    pub type PEN_MASK = root::UINT32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTER_PEN_INFO {
        pub pointerInfo: root::POINTER_INFO,
        pub penFlags: root::PEN_FLAGS,
        pub penMask: root::PEN_MASK,
        pub pressure: root::UINT32,
        pub rotation: root::UINT32,
        pub tiltX: root::INT32,
        pub tiltY: root::INT32,
    }
    pub type POINTER_PEN_INFO = root::tagPOINTER_PEN_INFO;
    pub const POINTER_FEEDBACK_MODE_POINTER_FEEDBACK_DEFAULT: root::POINTER_FEEDBACK_MODE = 1;
    pub const POINTER_FEEDBACK_MODE_POINTER_FEEDBACK_INDIRECT: root::POINTER_FEEDBACK_MODE = 2;
    pub const POINTER_FEEDBACK_MODE_POINTER_FEEDBACK_NONE: root::POINTER_FEEDBACK_MODE = 3;
    pub type POINTER_FEEDBACK_MODE = i32;
    extern "C" {
        pub fn InitializeTouchInjection(maxCount: root::UINT32, dwMode: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn InjectTouchInput(
            count: root::UINT32,
            contacts: *const root::POINTER_TOUCH_INFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagUSAGE_PROPERTIES {
        pub level: root::USHORT,
        pub page: root::USHORT,
        pub usage: root::USHORT,
        pub logicalMinimum: root::INT32,
        pub logicalMaximum: root::INT32,
        pub unit: root::USHORT,
        pub exponent: root::USHORT,
        pub count: u8,
        pub physicalMinimum: root::INT32,
        pub physicalMaximum: root::INT32,
    }
    pub type USAGE_PROPERTIES = root::tagUSAGE_PROPERTIES;
    pub type PUSAGE_PROPERTIES = *mut root::tagUSAGE_PROPERTIES;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagPOINTER_TYPE_INFO {
        pub type_: root::POINTER_INPUT_TYPE,
        pub __bindgen_anon_1: root::tagPOINTER_TYPE_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagPOINTER_TYPE_INFO__bindgen_ty_1 {
        pub touchInfo: root::POINTER_TOUCH_INFO,
        pub penInfo: root::POINTER_PEN_INFO,
    }
    pub type POINTER_TYPE_INFO = root::tagPOINTER_TYPE_INFO;
    pub type PPOINTER_TYPE_INFO = *mut root::tagPOINTER_TYPE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagINPUT_INJECTION_VALUE {
        pub page: root::USHORT,
        pub usage: root::USHORT,
        pub value: root::INT32,
        pub index: root::USHORT,
    }
    pub type INPUT_INJECTION_VALUE = root::tagINPUT_INJECTION_VALUE;
    pub type PINPUT_INJECTION_VALUE = *mut root::tagINPUT_INJECTION_VALUE;
    extern "C" {
        pub fn GetPointerType(
            pointerId: root::UINT32,
            pointerType: *mut root::POINTER_INPUT_TYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerCursorId(
            pointerId: root::UINT32,
            cursorId: *mut root::UINT32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerInfo(
            pointerId: root::UINT32,
            pointerInfo: *mut root::POINTER_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerInfoHistory(
            pointerId: root::UINT32,
            entriesCount: *mut root::UINT32,
            pointerInfo: *mut root::POINTER_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerFrameInfo(
            pointerId: root::UINT32,
            pointerCount: *mut root::UINT32,
            pointerInfo: *mut root::POINTER_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerFrameInfoHistory(
            pointerId: root::UINT32,
            entriesCount: *mut root::UINT32,
            pointerCount: *mut root::UINT32,
            pointerInfo: *mut root::POINTER_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerTouchInfo(
            pointerId: root::UINT32,
            touchInfo: *mut root::POINTER_TOUCH_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerTouchInfoHistory(
            pointerId: root::UINT32,
            entriesCount: *mut root::UINT32,
            touchInfo: *mut root::POINTER_TOUCH_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerFrameTouchInfo(
            pointerId: root::UINT32,
            pointerCount: *mut root::UINT32,
            touchInfo: *mut root::POINTER_TOUCH_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerFrameTouchInfoHistory(
            pointerId: root::UINT32,
            entriesCount: *mut root::UINT32,
            pointerCount: *mut root::UINT32,
            touchInfo: *mut root::POINTER_TOUCH_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerPenInfo(
            pointerId: root::UINT32,
            penInfo: *mut root::POINTER_PEN_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerPenInfoHistory(
            pointerId: root::UINT32,
            entriesCount: *mut root::UINT32,
            penInfo: *mut root::POINTER_PEN_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerFramePenInfo(
            pointerId: root::UINT32,
            pointerCount: *mut root::UINT32,
            penInfo: *mut root::POINTER_PEN_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerFramePenInfoHistory(
            pointerId: root::UINT32,
            entriesCount: *mut root::UINT32,
            pointerCount: *mut root::UINT32,
            penInfo: *mut root::POINTER_PEN_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SkipPointerFrameMessages(pointerId: root::UINT32) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterPointerInputTarget(
            hwnd: root::HWND,
            pointerType: root::POINTER_INPUT_TYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterPointerInputTarget(
            hwnd: root::HWND,
            pointerType: root::POINTER_INPUT_TYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterPointerInputTargetEx(
            hwnd: root::HWND,
            pointerType: root::POINTER_INPUT_TYPE,
            fObserve: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnregisterPointerInputTargetEx(
            hwnd: root::HWND,
            pointerType: root::POINTER_INPUT_TYPE,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HSYNTHETICPOINTERDEVICE__ {
        pub unused: i32,
    }
    pub type HSYNTHETICPOINTERDEVICE = *mut root::HSYNTHETICPOINTERDEVICE__;
    extern "C" {
        pub fn CreateSyntheticPointerDevice(
            pointerType: root::POINTER_INPUT_TYPE,
            maxCount: root::ULONG,
            mode: root::POINTER_FEEDBACK_MODE,
        ) -> root::HSYNTHETICPOINTERDEVICE;
    }
    extern "C" {
        pub fn InjectSyntheticPointerInput(
            device: root::HSYNTHETICPOINTERDEVICE,
            pointerInfo: *const root::POINTER_TYPE_INFO,
            count: root::UINT32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DestroySyntheticPointerDevice(device: root::HSYNTHETICPOINTERDEVICE);
    }
    extern "C" {
        pub fn EnableMouseInPointer(fEnable: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn IsMouseInPointerEnabled() -> root::BOOL;
    }
    extern "C" {
        pub fn EnableMouseInPointerForThread() -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterTouchHitTestingWindow(hwnd: root::HWND, value: root::ULONG) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION {
        pub score: root::UINT16,
        pub adjustedPoint: root::POINT,
    }
    pub type TOUCH_HIT_TESTING_PROXIMITY_EVALUATION =
        root::tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
    pub type PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION =
        *mut root::tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTOUCH_HIT_TESTING_INPUT {
        pub pointerId: root::UINT32,
        pub point: root::POINT,
        pub boundingBox: root::RECT,
        pub nonOccludedBoundingBox: root::RECT,
        pub orientation: root::UINT32,
    }
    pub type TOUCH_HIT_TESTING_INPUT = root::tagTOUCH_HIT_TESTING_INPUT;
    pub type PTOUCH_HIT_TESTING_INPUT = *mut root::tagTOUCH_HIT_TESTING_INPUT;
    extern "C" {
        pub fn EvaluateProximityToRect(
            controlBoundingBox: *const root::RECT,
            pHitTestingInput: *const root::TOUCH_HIT_TESTING_INPUT,
            pProximityEval: *mut root::TOUCH_HIT_TESTING_PROXIMITY_EVALUATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EvaluateProximityToPolygon(
            numVertices: root::UINT32,
            controlPolygon: *const root::POINT,
            pHitTestingInput: *const root::TOUCH_HIT_TESTING_INPUT,
            pProximityEval: *mut root::TOUCH_HIT_TESTING_PROXIMITY_EVALUATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PackTouchHitTestingProximityEvaluation(
            pHitTestingInput: *const root::TOUCH_HIT_TESTING_INPUT,
            pProximityEval: *const root::TOUCH_HIT_TESTING_PROXIMITY_EVALUATION,
        ) -> root::LRESULT;
    }
    pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_CONTACTVISUALIZATION: root::tagFEEDBACK_TYPE = 1;
    pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_BARRELVISUALIZATION: root::tagFEEDBACK_TYPE = 2;
    pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_TAP: root::tagFEEDBACK_TYPE = 3;
    pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_DOUBLETAP: root::tagFEEDBACK_TYPE = 4;
    pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_PRESSANDHOLD: root::tagFEEDBACK_TYPE = 5;
    pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_RIGHTTAP: root::tagFEEDBACK_TYPE = 6;
    pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_TAP: root::tagFEEDBACK_TYPE = 7;
    pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_DOUBLETAP: root::tagFEEDBACK_TYPE = 8;
    pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_PRESSANDHOLD: root::tagFEEDBACK_TYPE = 9;
    pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_RIGHTTAP: root::tagFEEDBACK_TYPE = 10;
    pub const tagFEEDBACK_TYPE_FEEDBACK_GESTURE_PRESSANDTAP: root::tagFEEDBACK_TYPE = 11;
    pub const tagFEEDBACK_TYPE_FEEDBACK_MAX: root::tagFEEDBACK_TYPE = -1;
    pub type tagFEEDBACK_TYPE = i32;
    pub use self::super::root::tagFEEDBACK_TYPE as FEEDBACK_TYPE;
    extern "C" {
        pub fn GetWindowFeedbackSetting(
            hwnd: root::HWND,
            feedback: root::FEEDBACK_TYPE,
            dwFlags: u32,
            pSize: *mut root::UINT32,
            config: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowFeedbackSetting(
            hwnd: root::HWND,
            feedback: root::FEEDBACK_TYPE,
            dwFlags: u32,
            size: root::UINT32,
            configuration: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagINPUT_TRANSFORM {
        pub __bindgen_anon_1: root::tagINPUT_TRANSFORM__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagINPUT_TRANSFORM__bindgen_ty_1 {
        pub __bindgen_anon_1: root::tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1,
        pub m: [[f32; 4usize]; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1 {
        pub _11: f32,
        pub _12: f32,
        pub _13: f32,
        pub _14: f32,
        pub _21: f32,
        pub _22: f32,
        pub _23: f32,
        pub _24: f32,
        pub _31: f32,
        pub _32: f32,
        pub _33: f32,
        pub _34: f32,
        pub _41: f32,
        pub _42: f32,
        pub _43: f32,
        pub _44: f32,
    }
    pub type INPUT_TRANSFORM = root::tagINPUT_TRANSFORM;
    extern "C" {
        pub fn GetPointerInputTransform(
            pointerId: root::UINT32,
            historyCount: root::UINT32,
            inputTransform: *mut root::INPUT_TRANSFORM,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagLASTINPUTINFO {
        pub cbSize: root::UINT,
        pub dwTime: u32,
    }
    pub type LASTINPUTINFO = root::tagLASTINPUTINFO;
    pub type PLASTINPUTINFO = *mut root::tagLASTINPUTINFO;
    extern "C" {
        pub fn GetLastInputInfo(plii: root::PLASTINPUTINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn MapVirtualKeyA(uCode: root::UINT, uMapType: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn MapVirtualKeyW(uCode: root::UINT, uMapType: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn MapVirtualKeyExA(
            uCode: root::UINT,
            uMapType: root::UINT,
            dwhkl: root::HKL,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn MapVirtualKeyExW(
            uCode: root::UINT,
            uMapType: root::UINT,
            dwhkl: root::HKL,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetInputState() -> root::BOOL;
    }
    extern "C" {
        pub fn GetQueueStatus(flags: root::UINT) -> u32;
    }
    extern "C" {
        pub fn GetCapture() -> root::HWND;
    }
    extern "C" {
        pub fn SetCapture(hWnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn ReleaseCapture() -> root::BOOL;
    }
    extern "C" {
        pub fn MsgWaitForMultipleObjects(
            nCount: u32,
            pHandles: *const root::HANDLE,
            fWaitAll: root::BOOL,
            dwMilliseconds: u32,
            dwWakeMask: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn MsgWaitForMultipleObjectsEx(
            nCount: u32,
            pHandles: *const root::HANDLE,
            dwMilliseconds: u32,
            dwWakeMask: u32,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetTimer(
            hWnd: root::HWND,
            nIDEvent: u64,
            uElapse: root::UINT,
            lpTimerFunc: root::TIMERPROC,
        ) -> u64;
    }
    extern "C" {
        pub fn SetCoalescableTimer(
            hWnd: root::HWND,
            nIDEvent: u64,
            uElapse: root::UINT,
            lpTimerFunc: root::TIMERPROC,
            uToleranceDelay: root::ULONG,
        ) -> u64;
    }
    extern "C" {
        pub fn KillTimer(hWnd: root::HWND, uIDEvent: u64) -> root::BOOL;
    }
    extern "C" {
        pub fn IsWindowUnicode(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn EnableWindow(hWnd: root::HWND, bEnable: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn IsWindowEnabled(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn LoadAcceleratorsA(
            hInstance: root::HINSTANCE,
            lpTableName: *const i8,
        ) -> root::HACCEL;
    }
    extern "C" {
        pub fn LoadAcceleratorsW(
            hInstance: root::HINSTANCE,
            lpTableName: root::LPCWSTR,
        ) -> root::HACCEL;
    }
    extern "C" {
        pub fn CreateAcceleratorTableA(
            paccel: root::LPACCEL,
            cAccel: i32,
        ) -> root::HACCEL;
    }
    extern "C" {
        pub fn CreateAcceleratorTableW(
            paccel: root::LPACCEL,
            cAccel: i32,
        ) -> root::HACCEL;
    }
    extern "C" {
        pub fn DestroyAcceleratorTable(hAccel: root::HACCEL) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyAcceleratorTableA(
            hAccelSrc: root::HACCEL,
            lpAccelDst: root::LPACCEL,
            cAccelEntries: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn CopyAcceleratorTableW(
            hAccelSrc: root::HACCEL,
            lpAccelDst: root::LPACCEL,
            cAccelEntries: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn TranslateAcceleratorA(
            hWnd: root::HWND,
            hAccTable: root::HACCEL,
            lpMsg: root::LPMSG,
        ) -> i32;
    }
    extern "C" {
        pub fn TranslateAcceleratorW(
            hWnd: root::HWND,
            hAccTable: root::HACCEL,
            lpMsg: root::LPMSG,
        ) -> i32;
    }
    extern "C" {
        pub fn GetSystemMetrics(nIndex: i32) -> i32;
    }
    extern "C" {
        pub fn GetSystemMetricsForDpi(
            nIndex: i32,
            dpi: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn LoadMenuA(hInstance: root::HINSTANCE, lpMenuName: *const i8) -> root::HMENU;
    }
    extern "C" {
        pub fn LoadMenuW(hInstance: root::HINSTANCE, lpMenuName: root::LPCWSTR) -> root::HMENU;
    }
    extern "C" {
        pub fn LoadMenuIndirectA(lpMenuTemplate: *const root::MENUTEMPLATEA) -> root::HMENU;
    }
    extern "C" {
        pub fn LoadMenuIndirectW(lpMenuTemplate: *const root::MENUTEMPLATEW) -> root::HMENU;
    }
    extern "C" {
        pub fn GetMenu(hWnd: root::HWND) -> root::HMENU;
    }
    extern "C" {
        pub fn SetMenu(hWnd: root::HWND, hMenu: root::HMENU) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeMenuA(
            hMenu: root::HMENU,
            cmd: root::UINT,
            lpszNewItem: *const i8,
            cmdInsert: root::UINT,
            flags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeMenuW(
            hMenu: root::HMENU,
            cmd: root::UINT,
            lpszNewItem: root::LPCWSTR,
            cmdInsert: root::UINT,
            flags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn HiliteMenuItem(
            hWnd: root::HWND,
            hMenu: root::HMENU,
            uIDHiliteItem: root::UINT,
            uHilite: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuStringA(
            hMenu: root::HMENU,
            uIDItem: root::UINT,
            lpString: *mut i8,
            cchMax: i32,
            flags: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn GetMenuStringW(
            hMenu: root::HMENU,
            uIDItem: root::UINT,
            lpString: root::LPWSTR,
            cchMax: i32,
            flags: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn GetMenuState(hMenu: root::HMENU, uId: root::UINT, uFlags: root::UINT) -> root::UINT;
    }
    extern "C" {
        pub fn DrawMenuBar(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemMenu(hWnd: root::HWND, bRevert: root::BOOL) -> root::HMENU;
    }
    extern "C" {
        pub fn CreateMenu() -> root::HMENU;
    }
    extern "C" {
        pub fn CreatePopupMenu() -> root::HMENU;
    }
    extern "C" {
        pub fn DestroyMenu(hMenu: root::HMENU) -> root::BOOL;
    }
    extern "C" {
        pub fn CheckMenuItem(
            hMenu: root::HMENU,
            uIDCheckItem: root::UINT,
            uCheck: root::UINT,
        ) -> u32;
    }
    extern "C" {
        pub fn EnableMenuItem(
            hMenu: root::HMENU,
            uIDEnableItem: root::UINT,
            uEnable: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSubMenu(hMenu: root::HMENU, nPos: i32) -> root::HMENU;
    }
    extern "C" {
        pub fn GetMenuItemID(hMenu: root::HMENU, nPos: i32) -> root::UINT;
    }
    extern "C" {
        pub fn GetMenuItemCount(hMenu: root::HMENU) -> i32;
    }
    extern "C" {
        pub fn InsertMenuA(
            hMenu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
            uIDNewItem: u64,
            lpNewItem: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InsertMenuW(
            hMenu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
            uIDNewItem: u64,
            lpNewItem: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AppendMenuA(
            hMenu: root::HMENU,
            uFlags: root::UINT,
            uIDNewItem: u64,
            lpNewItem: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AppendMenuW(
            hMenu: root::HMENU,
            uFlags: root::UINT,
            uIDNewItem: u64,
            lpNewItem: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ModifyMenuA(
            hMnu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
            uIDNewItem: u64,
            lpNewItem: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ModifyMenuW(
            hMnu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
            uIDNewItem: u64,
            lpNewItem: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RemoveMenu(
            hMenu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteMenu(
            hMenu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetMenuItemBitmaps(
            hMenu: root::HMENU,
            uPosition: root::UINT,
            uFlags: root::UINT,
            hBitmapUnchecked: root::HBITMAP,
            hBitmapChecked: root::HBITMAP,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuCheckMarkDimensions() -> i32;
    }
    extern "C" {
        pub fn TrackPopupMenu(
            hMenu: root::HMENU,
            uFlags: root::UINT,
            x: i32,
            y: i32,
            nReserved: i32,
            hWnd: root::HWND,
            prcRect: *const root::RECT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTPMPARAMS {
        pub cbSize: root::UINT,
        pub rcExclude: root::RECT,
    }
    pub type TPMPARAMS = root::tagTPMPARAMS;
    pub type LPTPMPARAMS = *mut root::TPMPARAMS;
    extern "C" {
        pub fn TrackPopupMenuEx(
            hMenu: root::HMENU,
            uFlags: root::UINT,
            x: i32,
            y: i32,
            hwnd: root::HWND,
            lptpm: root::LPTPMPARAMS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CalculatePopupWindowPosition(
            anchorPoint: *const root::POINT,
            windowSize: *const root::SIZE,
            flags: root::UINT,
            excludeRect: *mut root::RECT,
            popupWindowPosition: *mut root::RECT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMENUINFO {
        pub cbSize: u32,
        pub fMask: u32,
        pub dwStyle: u32,
        pub cyMax: root::UINT,
        pub hbrBack: root::HBRUSH,
        pub dwContextHelpID: u32,
        pub dwMenuData: u64,
    }
    pub type MENUINFO = root::tagMENUINFO;
    pub type LPMENUINFO = *mut root::tagMENUINFO;
    pub type LPCMENUINFO = *const root::MENUINFO;
    extern "C" {
        pub fn GetMenuInfo(arg1: root::HMENU, arg2: root::LPMENUINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn SetMenuInfo(arg1: root::HMENU, arg2: root::LPCMENUINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn EndMenu() -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMENUGETOBJECTINFO {
        pub dwFlags: u32,
        pub uPos: root::UINT,
        pub hmenu: root::HMENU,
        pub riid: root::PVOID,
        pub pvObj: root::PVOID,
    }
    pub type MENUGETOBJECTINFO = root::tagMENUGETOBJECTINFO;
    pub type PMENUGETOBJECTINFO = *mut root::tagMENUGETOBJECTINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMENUITEMINFOA {
        pub cbSize: root::UINT,
        pub fMask: root::UINT,
        pub fType: root::UINT,
        pub fState: root::UINT,
        pub wID: root::UINT,
        pub hSubMenu: root::HMENU,
        pub hbmpChecked: root::HBITMAP,
        pub hbmpUnchecked: root::HBITMAP,
        pub dwItemData: u64,
        pub dwTypeData: *mut i8,
        pub cch: root::UINT,
        pub hbmpItem: root::HBITMAP,
    }
    pub type MENUITEMINFOA = root::tagMENUITEMINFOA;
    pub type LPMENUITEMINFOA = *mut root::tagMENUITEMINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMENUITEMINFOW {
        pub cbSize: root::UINT,
        pub fMask: root::UINT,
        pub fType: root::UINT,
        pub fState: root::UINT,
        pub wID: root::UINT,
        pub hSubMenu: root::HMENU,
        pub hbmpChecked: root::HBITMAP,
        pub hbmpUnchecked: root::HBITMAP,
        pub dwItemData: u64,
        pub dwTypeData: root::LPWSTR,
        pub cch: root::UINT,
        pub hbmpItem: root::HBITMAP,
    }
    pub type MENUITEMINFOW = root::tagMENUITEMINFOW;
    pub type LPMENUITEMINFOW = *mut root::tagMENUITEMINFOW;
    pub type MENUITEMINFO = root::MENUITEMINFOA;
    pub type LPMENUITEMINFO = root::LPMENUITEMINFOA;
    pub type LPCMENUITEMINFOA = *const root::MENUITEMINFOA;
    pub type LPCMENUITEMINFOW = *const root::MENUITEMINFOW;
    pub type LPCMENUITEMINFO = root::LPCMENUITEMINFOA;
    extern "C" {
        pub fn InsertMenuItemA(
            hmenu: root::HMENU,
            item: root::UINT,
            fByPosition: root::BOOL,
            lpmi: root::LPCMENUITEMINFOA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InsertMenuItemW(
            hmenu: root::HMENU,
            item: root::UINT,
            fByPosition: root::BOOL,
            lpmi: root::LPCMENUITEMINFOW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuItemInfoA(
            hmenu: root::HMENU,
            item: root::UINT,
            fByPosition: root::BOOL,
            lpmii: root::LPMENUITEMINFOA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuItemInfoW(
            hmenu: root::HMENU,
            item: root::UINT,
            fByPosition: root::BOOL,
            lpmii: root::LPMENUITEMINFOW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetMenuItemInfoA(
            hmenu: root::HMENU,
            item: root::UINT,
            fByPositon: root::BOOL,
            lpmii: root::LPCMENUITEMINFOA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetMenuItemInfoW(
            hmenu: root::HMENU,
            item: root::UINT,
            fByPositon: root::BOOL,
            lpmii: root::LPCMENUITEMINFOW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuDefaultItem(
            hMenu: root::HMENU,
            fByPos: root::UINT,
            gmdiFlags: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn SetMenuDefaultItem(
            hMenu: root::HMENU,
            uItem: root::UINT,
            fByPos: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuItemRect(
            hWnd: root::HWND,
            hMenu: root::HMENU,
            uItem: root::UINT,
            lprcItem: root::LPRECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MenuItemFromPoint(
            hWnd: root::HWND,
            hMenu: root::HMENU,
            ptScreen: root::POINT,
        ) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDROPSTRUCT {
        pub hwndSource: root::HWND,
        pub hwndSink: root::HWND,
        pub wFmt: u32,
        pub dwData: u64,
        pub ptDrop: root::POINT,
        pub dwControlData: u32,
    }
    pub type DROPSTRUCT = root::tagDROPSTRUCT;
    pub type PDROPSTRUCT = *mut root::tagDROPSTRUCT;
    pub type LPDROPSTRUCT = *mut root::tagDROPSTRUCT;
    extern "C" {
        pub fn DragObject(
            hwndParent: root::HWND,
            hwndFrom: root::HWND,
            fmt: root::UINT,
            data: u64,
            hcur: root::HCURSOR,
        ) -> u32;
    }
    extern "C" {
        pub fn DragDetect(hwnd: root::HWND, pt: root::POINT) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawIcon(
            hDC: root::HDC,
            X: i32,
            Y: i32,
            hIcon: root::HICON,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDRAWTEXTPARAMS {
        pub cbSize: root::UINT,
        pub iTabLength: i32,
        pub iLeftMargin: i32,
        pub iRightMargin: i32,
        pub uiLengthDrawn: root::UINT,
    }
    pub type DRAWTEXTPARAMS = root::tagDRAWTEXTPARAMS;
    pub type LPDRAWTEXTPARAMS = *mut root::tagDRAWTEXTPARAMS;
    extern "C" {
        pub fn DrawTextA(
            hdc: root::HDC,
            lpchText: *const i8,
            cchText: i32,
            lprc: root::LPRECT,
            format: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn DrawTextW(
            hdc: root::HDC,
            lpchText: root::LPCWSTR,
            cchText: i32,
            lprc: root::LPRECT,
            format: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn DrawTextExA(
            hdc: root::HDC,
            lpchText: *mut i8,
            cchText: i32,
            lprc: root::LPRECT,
            format: root::UINT,
            lpdtp: root::LPDRAWTEXTPARAMS,
        ) -> i32;
    }
    extern "C" {
        pub fn DrawTextExW(
            hdc: root::HDC,
            lpchText: root::LPWSTR,
            cchText: i32,
            lprc: root::LPRECT,
            format: root::UINT,
            lpdtp: root::LPDRAWTEXTPARAMS,
        ) -> i32;
    }
    extern "C" {
        pub fn GrayStringA(
            hDC: root::HDC,
            hBrush: root::HBRUSH,
            lpOutputFunc: root::GRAYSTRINGPROC,
            lpData: root::LPARAM,
            nCount: i32,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GrayStringW(
            hDC: root::HDC,
            hBrush: root::HBRUSH,
            lpOutputFunc: root::GRAYSTRINGPROC,
            lpData: root::LPARAM,
            nCount: i32,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawStateA(
            hdc: root::HDC,
            hbrFore: root::HBRUSH,
            qfnCallBack: root::DRAWSTATEPROC,
            lData: root::LPARAM,
            wData: root::WPARAM,
            x: i32,
            y: i32,
            cx: i32,
            cy: i32,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawStateW(
            hdc: root::HDC,
            hbrFore: root::HBRUSH,
            qfnCallBack: root::DRAWSTATEPROC,
            lData: root::LPARAM,
            wData: root::WPARAM,
            x: i32,
            y: i32,
            cx: i32,
            cy: i32,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn TabbedTextOutA(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lpString: *const i8,
            chCount: i32,
            nTabPositions: i32,
            lpnTabStopPositions: *const root::INT,
            nTabOrigin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn TabbedTextOutW(
            hdc: root::HDC,
            x: i32,
            y: i32,
            lpString: root::LPCWSTR,
            chCount: i32,
            nTabPositions: i32,
            lpnTabStopPositions: *const root::INT,
            nTabOrigin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetTabbedTextExtentA(
            hdc: root::HDC,
            lpString: *const i8,
            chCount: i32,
            nTabPositions: i32,
            lpnTabStopPositions: *const root::INT,
        ) -> u32;
    }
    extern "C" {
        pub fn GetTabbedTextExtentW(
            hdc: root::HDC,
            lpString: root::LPCWSTR,
            chCount: i32,
            nTabPositions: i32,
            lpnTabStopPositions: *const root::INT,
        ) -> u32;
    }
    extern "C" {
        pub fn UpdateWindow(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn SetActiveWindow(hWnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn GetForegroundWindow() -> root::HWND;
    }
    extern "C" {
        pub fn PaintDesktop(hdc: root::HDC) -> root::BOOL;
    }
    extern "C" {
        pub fn SwitchToThisWindow(hwnd: root::HWND, fUnknown: root::BOOL);
    }
    extern "C" {
        pub fn SetForegroundWindow(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn AllowSetForegroundWindow(dwProcessId: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn LockSetForegroundWindow(uLockCode: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn WindowFromDC(hDC: root::HDC) -> root::HWND;
    }
    extern "C" {
        pub fn GetDC(hWnd: root::HWND) -> root::HDC;
    }
    extern "C" {
        pub fn GetDCEx(hWnd: root::HWND, hrgnClip: root::HRGN, flags: u32) -> root::HDC;
    }
    extern "C" {
        pub fn GetWindowDC(hWnd: root::HWND) -> root::HDC;
    }
    extern "C" {
        pub fn ReleaseDC(hWnd: root::HWND, hDC: root::HDC) -> i32;
    }
    extern "C" {
        pub fn BeginPaint(hWnd: root::HWND, lpPaint: root::LPPAINTSTRUCT) -> root::HDC;
    }
    extern "C" {
        pub fn EndPaint(hWnd: root::HWND, lpPaint: *const root::PAINTSTRUCT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUpdateRect(
            hWnd: root::HWND,
            lpRect: root::LPRECT,
            bErase: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUpdateRgn(
            hWnd: root::HWND,
            hRgn: root::HRGN,
            bErase: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn SetWindowRgn(
            hWnd: root::HWND,
            hRgn: root::HRGN,
            bRedraw: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn GetWindowRgn(hWnd: root::HWND, hRgn: root::HRGN) -> i32;
    }
    extern "C" {
        pub fn GetWindowRgnBox(hWnd: root::HWND, lprc: root::LPRECT) -> i32;
    }
    extern "C" {
        pub fn ExcludeUpdateRgn(hDC: root::HDC, hWnd: root::HWND) -> i32;
    }
    extern "C" {
        pub fn InvalidateRect(
            hWnd: root::HWND,
            lpRect: *const root::RECT,
            bErase: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ValidateRect(hWnd: root::HWND, lpRect: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn InvalidateRgn(hWnd: root::HWND, hRgn: root::HRGN, bErase: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn ValidateRgn(hWnd: root::HWND, hRgn: root::HRGN) -> root::BOOL;
    }
    extern "C" {
        pub fn RedrawWindow(
            hWnd: root::HWND,
            lprcUpdate: *const root::RECT,
            hrgnUpdate: root::HRGN,
            flags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LockWindowUpdate(hWndLock: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn ScrollWindow(
            hWnd: root::HWND,
            XAmount: i32,
            YAmount: i32,
            lpRect: *const root::RECT,
            lpClipRect: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScrollDC(
            hDC: root::HDC,
            dx: i32,
            dy: i32,
            lprcScroll: *const root::RECT,
            lprcClip: *const root::RECT,
            hrgnUpdate: root::HRGN,
            lprcUpdate: root::LPRECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScrollWindowEx(
            hWnd: root::HWND,
            dx: i32,
            dy: i32,
            prcScroll: *const root::RECT,
            prcClip: *const root::RECT,
            hrgnUpdate: root::HRGN,
            prcUpdate: root::LPRECT,
            flags: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn SetScrollPos(
            hWnd: root::HWND,
            nBar: i32,
            nPos: i32,
            bRedraw: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn GetScrollPos(hWnd: root::HWND, nBar: i32)
            -> i32;
    }
    extern "C" {
        pub fn SetScrollRange(
            hWnd: root::HWND,
            nBar: i32,
            nMinPos: i32,
            nMaxPos: i32,
            bRedraw: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetScrollRange(
            hWnd: root::HWND,
            nBar: i32,
            lpMinPos: root::LPINT,
            lpMaxPos: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowScrollBar(
            hWnd: root::HWND,
            wBar: i32,
            bShow: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnableScrollBar(
            hWnd: root::HWND,
            wSBflags: root::UINT,
            wArrows: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPropA(
            hWnd: root::HWND,
            lpString: *const i8,
            hData: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPropW(
            hWnd: root::HWND,
            lpString: root::LPCWSTR,
            hData: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPropA(hWnd: root::HWND, lpString: *const i8) -> root::HANDLE;
    }
    extern "C" {
        pub fn GetPropW(hWnd: root::HWND, lpString: root::LPCWSTR) -> root::HANDLE;
    }
    extern "C" {
        pub fn RemovePropA(hWnd: root::HWND, lpString: *const i8) -> root::HANDLE;
    }
    extern "C" {
        pub fn RemovePropW(hWnd: root::HWND, lpString: root::LPCWSTR) -> root::HANDLE;
    }
    extern "C" {
        pub fn EnumPropsExA(
            hWnd: root::HWND,
            lpEnumFunc: root::PROPENUMPROCEXA,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumPropsExW(
            hWnd: root::HWND,
            lpEnumFunc: root::PROPENUMPROCEXW,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumPropsA(
            hWnd: root::HWND,
            lpEnumFunc: root::PROPENUMPROCA,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumPropsW(
            hWnd: root::HWND,
            lpEnumFunc: root::PROPENUMPROCW,
        ) -> i32;
    }
    extern "C" {
        pub fn SetWindowTextA(hWnd: root::HWND, lpString: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowTextW(hWnd: root::HWND, lpString: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowTextA(
            hWnd: root::HWND,
            lpString: *mut i8,
            nMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetWindowTextW(
            hWnd: root::HWND,
            lpString: root::LPWSTR,
            nMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetWindowTextLengthA(hWnd: root::HWND) -> i32;
    }
    extern "C" {
        pub fn GetWindowTextLengthW(hWnd: root::HWND) -> i32;
    }
    extern "C" {
        pub fn GetClientRect(hWnd: root::HWND, lpRect: root::LPRECT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowRect(hWnd: root::HWND, lpRect: root::LPRECT) -> root::BOOL;
    }
    extern "C" {
        pub fn AdjustWindowRect(
            lpRect: root::LPRECT,
            dwStyle: u32,
            bMenu: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AdjustWindowRectEx(
            lpRect: root::LPRECT,
            dwStyle: u32,
            bMenu: root::BOOL,
            dwExStyle: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AdjustWindowRectExForDpi(
            lpRect: root::LPRECT,
            dwStyle: u32,
            bMenu: root::BOOL,
            dwExStyle: u32,
            dpi: root::UINT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHELPINFO {
        pub cbSize: root::UINT,
        pub iContextType: i32,
        pub iCtrlId: i32,
        pub hItemHandle: root::HANDLE,
        pub dwContextId: root::DWORD_PTR,
        pub MousePos: root::POINT,
    }
    pub type HELPINFO = root::tagHELPINFO;
    pub type LPHELPINFO = *mut root::tagHELPINFO;
    extern "C" {
        pub fn SetWindowContextHelpId(arg1: root::HWND, arg2: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowContextHelpId(arg1: root::HWND) -> u32;
    }
    extern "C" {
        pub fn SetMenuContextHelpId(arg1: root::HMENU, arg2: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuContextHelpId(arg1: root::HMENU) -> u32;
    }
    extern "C" {
        pub fn MessageBoxA(
            hWnd: root::HWND,
            lpText: *const i8,
            lpCaption: *const i8,
            uType: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn MessageBoxW(
            hWnd: root::HWND,
            lpText: root::LPCWSTR,
            lpCaption: root::LPCWSTR,
            uType: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn MessageBoxExA(
            hWnd: root::HWND,
            lpText: *const i8,
            lpCaption: *const i8,
            uType: root::UINT,
            wLanguageId: u16,
        ) -> i32;
    }
    extern "C" {
        pub fn MessageBoxExW(
            hWnd: root::HWND,
            lpText: root::LPCWSTR,
            lpCaption: root::LPCWSTR,
            uType: root::UINT,
            wLanguageId: u16,
        ) -> i32;
    }
    pub type MSGBOXCALLBACK =
        ::std::option::Option<unsafe extern "C" fn(lpHelpInfo: root::LPHELPINFO)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMSGBOXPARAMSA {
        pub cbSize: root::UINT,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub lpszText: *const i8,
        pub lpszCaption: *const i8,
        pub dwStyle: u32,
        pub lpszIcon: *const i8,
        pub dwContextHelpId: root::DWORD_PTR,
        pub lpfnMsgBoxCallback: root::MSGBOXCALLBACK,
        pub dwLanguageId: u32,
    }
    pub type MSGBOXPARAMSA = root::tagMSGBOXPARAMSA;
    pub type PMSGBOXPARAMSA = *mut root::tagMSGBOXPARAMSA;
    pub type LPMSGBOXPARAMSA = *mut root::tagMSGBOXPARAMSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMSGBOXPARAMSW {
        pub cbSize: root::UINT,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub lpszText: root::LPCWSTR,
        pub lpszCaption: root::LPCWSTR,
        pub dwStyle: u32,
        pub lpszIcon: root::LPCWSTR,
        pub dwContextHelpId: root::DWORD_PTR,
        pub lpfnMsgBoxCallback: root::MSGBOXCALLBACK,
        pub dwLanguageId: u32,
    }
    pub type MSGBOXPARAMSW = root::tagMSGBOXPARAMSW;
    pub type PMSGBOXPARAMSW = *mut root::tagMSGBOXPARAMSW;
    pub type LPMSGBOXPARAMSW = *mut root::tagMSGBOXPARAMSW;
    pub type MSGBOXPARAMS = root::MSGBOXPARAMSA;
    pub type PMSGBOXPARAMS = root::PMSGBOXPARAMSA;
    pub type LPMSGBOXPARAMS = root::LPMSGBOXPARAMSA;
    extern "C" {
        pub fn MessageBoxIndirectA(lpmbp: *const root::MSGBOXPARAMSA) -> i32;
    }
    extern "C" {
        pub fn MessageBoxIndirectW(lpmbp: *const root::MSGBOXPARAMSW) -> i32;
    }
    extern "C" {
        pub fn MessageBeep(uType: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowCursor(bShow: root::BOOL) -> i32;
    }
    extern "C" {
        pub fn SetCursorPos(X: i32, Y: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPhysicalCursorPos(
            X: i32,
            Y: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCursor(hCursor: root::HCURSOR) -> root::HCURSOR;
    }
    extern "C" {
        pub fn GetCursorPos(lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPhysicalCursorPos(lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetClipCursor(lpRect: root::LPRECT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCursor() -> root::HCURSOR;
    }
    extern "C" {
        pub fn CreateCaret(
            hWnd: root::HWND,
            hBitmap: root::HBITMAP,
            nWidth: i32,
            nHeight: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCaretBlinkTime() -> root::UINT;
    }
    extern "C" {
        pub fn SetCaretBlinkTime(uMSeconds: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn DestroyCaret() -> root::BOOL;
    }
    extern "C" {
        pub fn HideCaret(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowCaret(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCaretPos(X: i32, Y: i32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCaretPos(lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn ClientToScreen(hWnd: root::HWND, lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn ScreenToClient(hWnd: root::HWND, lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn LogicalToPhysicalPoint(hWnd: root::HWND, lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn PhysicalToLogicalPoint(hWnd: root::HWND, lpPoint: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn LogicalToPhysicalPointForPerMonitorDPI(
            hWnd: root::HWND,
            lpPoint: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PhysicalToLogicalPointForPerMonitorDPI(
            hWnd: root::HWND,
            lpPoint: root::LPPOINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MapWindowPoints(
            hWndFrom: root::HWND,
            hWndTo: root::HWND,
            lpPoints: root::LPPOINT,
            cPoints: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn WindowFromPoint(Point: root::POINT) -> root::HWND;
    }
    extern "C" {
        pub fn WindowFromPhysicalPoint(Point: root::POINT) -> root::HWND;
    }
    extern "C" {
        pub fn ChildWindowFromPoint(hWndParent: root::HWND, Point: root::POINT) -> root::HWND;
    }
    extern "C" {
        pub fn ClipCursor(lpRect: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn ChildWindowFromPointEx(
            hwnd: root::HWND,
            pt: root::POINT,
            flags: root::UINT,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn GetSysColor(nIndex: i32) -> u32;
    }
    extern "C" {
        pub fn GetSysColorBrush(nIndex: i32) -> root::HBRUSH;
    }
    extern "C" {
        pub fn SetSysColors(
            cElements: i32,
            lpaElements: *const root::INT,
            lpaRgbValues: *const root::COLORREF,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DrawFocusRect(hDC: root::HDC, lprc: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn FillRect(
            hDC: root::HDC,
            lprc: *const root::RECT,
            hbr: root::HBRUSH,
        ) -> i32;
    }
    extern "C" {
        pub fn FrameRect(
            hDC: root::HDC,
            lprc: *const root::RECT,
            hbr: root::HBRUSH,
        ) -> i32;
    }
    extern "C" {
        pub fn InvertRect(hDC: root::HDC, lprc: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn SetRect(
            lprc: root::LPRECT,
            xLeft: i32,
            yTop: i32,
            xRight: i32,
            yBottom: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetRectEmpty(lprc: root::LPRECT) -> root::BOOL;
    }
    extern "C" {
        pub fn CopyRect(lprcDst: root::LPRECT, lprcSrc: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn InflateRect(
            lprc: root::LPRECT,
            dx: i32,
            dy: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IntersectRect(
            lprcDst: root::LPRECT,
            lprcSrc1: *const root::RECT,
            lprcSrc2: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnionRect(
            lprcDst: root::LPRECT,
            lprcSrc1: *const root::RECT,
            lprcSrc2: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SubtractRect(
            lprcDst: root::LPRECT,
            lprcSrc1: *const root::RECT,
            lprcSrc2: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OffsetRect(
            lprc: root::LPRECT,
            dx: i32,
            dy: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsRectEmpty(lprc: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn EqualRect(lprc1: *const root::RECT, lprc2: *const root::RECT) -> root::BOOL;
    }
    extern "C" {
        pub fn PtInRect(lprc: *const root::RECT, pt: root::POINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetWindowWord(hWnd: root::HWND, nIndex: i32) -> u16;
    }
    extern "C" {
        pub fn SetWindowWord(
            hWnd: root::HWND,
            nIndex: i32,
            wNewWord: u16,
        ) -> u16;
    }
    extern "C" {
        pub fn GetWindowLongA(hWnd: root::HWND, nIndex: i32) -> i32;
    }
    extern "C" {
        pub fn GetWindowLongW(hWnd: root::HWND, nIndex: i32) -> i32;
    }
    extern "C" {
        pub fn SetWindowLongA(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetWindowLongW(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetWindowLongPtrA(hWnd: root::HWND, nIndex: i32)
            -> i64;
    }
    extern "C" {
        pub fn GetWindowLongPtrW(hWnd: root::HWND, nIndex: i32)
            -> i64;
    }
    extern "C" {
        pub fn SetWindowLongPtrA(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i64,
        ) -> i64;
    }
    extern "C" {
        pub fn SetWindowLongPtrW(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i64,
        ) -> i64;
    }
    extern "C" {
        pub fn GetClassWord(hWnd: root::HWND, nIndex: i32) -> u16;
    }
    extern "C" {
        pub fn SetClassWord(
            hWnd: root::HWND,
            nIndex: i32,
            wNewWord: u16,
        ) -> u16;
    }
    extern "C" {
        pub fn GetClassLongA(hWnd: root::HWND, nIndex: i32) -> u32;
    }
    extern "C" {
        pub fn GetClassLongW(hWnd: root::HWND, nIndex: i32) -> u32;
    }
    extern "C" {
        pub fn SetClassLongA(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetClassLongW(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetClassLongPtrA(hWnd: root::HWND, nIndex: i32)
            -> u64;
    }
    extern "C" {
        pub fn GetClassLongPtrW(hWnd: root::HWND, nIndex: i32)
            -> u64;
    }
    extern "C" {
        pub fn SetClassLongPtrA(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i64,
        ) -> u64;
    }
    extern "C" {
        pub fn SetClassLongPtrW(
            hWnd: root::HWND,
            nIndex: i32,
            dwNewLong: i64,
        ) -> u64;
    }
    extern "C" {
        pub fn GetProcessDefaultLayout(pdwDefaultLayout: *mut u32) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessDefaultLayout(dwDefaultLayout: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDesktopWindow() -> root::HWND;
    }
    extern "C" {
        pub fn GetParent(hWnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn SetParent(hWndChild: root::HWND, hWndNewParent: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn EnumChildWindows(
            hWndParent: root::HWND,
            lpEnumFunc: root::WNDENUMPROC,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FindWindowA(lpClassName: *const i8, lpWindowName: *const i8) -> root::HWND;
    }
    extern "C" {
        pub fn FindWindowW(lpClassName: root::LPCWSTR, lpWindowName: root::LPCWSTR) -> root::HWND;
    }
    extern "C" {
        pub fn FindWindowExA(
            hWndParent: root::HWND,
            hWndChildAfter: root::HWND,
            lpszClass: *const i8,
            lpszWindow: *const i8,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn FindWindowExW(
            hWndParent: root::HWND,
            hWndChildAfter: root::HWND,
            lpszClass: root::LPCWSTR,
            lpszWindow: root::LPCWSTR,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn GetShellWindow() -> root::HWND;
    }
    extern "C" {
        pub fn RegisterShellHookWindow(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn DeregisterShellHookWindow(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumWindows(lpEnumFunc: root::WNDENUMPROC, lParam: root::LPARAM) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumThreadWindows(
            dwThreadId: u32,
            lpfn: root::WNDENUMPROC,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetClassNameA(
            hWnd: root::HWND,
            lpClassName: *mut i8,
            nMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetClassNameW(
            hWnd: root::HWND,
            lpClassName: root::LPWSTR,
            nMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetTopWindow(hWnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn GetWindowThreadProcessId(
            hWnd: root::HWND,
            lpdwProcessId: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn IsGUIThread(bConvert: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLastActivePopup(hWnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn GetWindow(hWnd: root::HWND, uCmd: root::UINT) -> root::HWND;
    }
    extern "C" {
        pub fn SetWindowsHookA(
            nFilterType: i32,
            pfnFilterProc: root::HOOKPROC,
        ) -> root::HHOOK;
    }
    extern "C" {
        pub fn SetWindowsHookW(
            nFilterType: i32,
            pfnFilterProc: root::HOOKPROC,
        ) -> root::HHOOK;
    }
    extern "C" {
        pub fn UnhookWindowsHook(
            nCode: i32,
            pfnFilterProc: root::HOOKPROC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetWindowsHookExA(
            idHook: i32,
            lpfn: root::HOOKPROC,
            hmod: root::HINSTANCE,
            dwThreadId: u32,
        ) -> root::HHOOK;
    }
    extern "C" {
        pub fn SetWindowsHookExW(
            idHook: i32,
            lpfn: root::HOOKPROC,
            hmod: root::HINSTANCE,
            dwThreadId: u32,
        ) -> root::HHOOK;
    }
    extern "C" {
        pub fn UnhookWindowsHookEx(hhk: root::HHOOK) -> root::BOOL;
    }
    extern "C" {
        pub fn CallNextHookEx(
            hhk: root::HHOOK,
            nCode: i32,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn CheckMenuRadioItem(
            hmenu: root::HMENU,
            first: root::UINT,
            last: root::UINT,
            check: root::UINT,
            flags: root::UINT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MENUITEMTEMPLATEHEADER {
        pub versionNumber: u16,
        pub offset: u16,
    }
    pub type PMENUITEMTEMPLATEHEADER = *mut root::MENUITEMTEMPLATEHEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MENUITEMTEMPLATE {
        pub mtOption: u16,
        pub mtID: u16,
        pub mtString: [u16; 1usize],
    }
    pub type PMENUITEMTEMPLATE = *mut root::MENUITEMTEMPLATE;
    extern "C" {
        pub fn LoadBitmapA(hInstance: root::HINSTANCE, lpBitmapName: *const i8)
            -> root::HBITMAP;
    }
    extern "C" {
        pub fn LoadBitmapW(
            hInstance: root::HINSTANCE,
            lpBitmapName: root::LPCWSTR,
        ) -> root::HBITMAP;
    }
    extern "C" {
        pub fn LoadCursorA(hInstance: root::HINSTANCE, lpCursorName: *const i8)
            -> root::HCURSOR;
    }
    extern "C" {
        pub fn LoadCursorW(
            hInstance: root::HINSTANCE,
            lpCursorName: root::LPCWSTR,
        ) -> root::HCURSOR;
    }
    extern "C" {
        pub fn LoadCursorFromFileA(lpFileName: *const i8) -> root::HCURSOR;
    }
    extern "C" {
        pub fn LoadCursorFromFileW(lpFileName: root::LPCWSTR) -> root::HCURSOR;
    }
    extern "C" {
        pub fn CreateCursor(
            hInst: root::HINSTANCE,
            xHotSpot: i32,
            yHotSpot: i32,
            nWidth: i32,
            nHeight: i32,
            pvANDPlane: *const ::std::os::raw::c_void,
            pvXORPlane: *const ::std::os::raw::c_void,
        ) -> root::HCURSOR;
    }
    extern "C" {
        pub fn DestroyCursor(hCursor: root::HCURSOR) -> root::BOOL;
    }
    extern "C" {
        pub fn SetSystemCursor(hcur: root::HCURSOR, id: u32) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ICONINFO {
        pub fIcon: root::BOOL,
        pub xHotspot: u32,
        pub yHotspot: u32,
        pub hbmMask: root::HBITMAP,
        pub hbmColor: root::HBITMAP,
    }
    pub type ICONINFO = root::_ICONINFO;
    pub type PICONINFO = *mut root::ICONINFO;
    extern "C" {
        pub fn LoadIconA(hInstance: root::HINSTANCE, lpIconName: *const i8) -> root::HICON;
    }
    extern "C" {
        pub fn LoadIconW(hInstance: root::HINSTANCE, lpIconName: root::LPCWSTR) -> root::HICON;
    }
    extern "C" {
        pub fn PrivateExtractIconsA(
            szFileName: *const i8,
            nIconIndex: i32,
            cxIcon: i32,
            cyIcon: i32,
            phicon: *mut root::HICON,
            piconid: *mut root::UINT,
            nIcons: root::UINT,
            flags: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn PrivateExtractIconsW(
            szFileName: root::LPCWSTR,
            nIconIndex: i32,
            cxIcon: i32,
            cyIcon: i32,
            phicon: *mut root::HICON,
            piconid: *mut root::UINT,
            nIcons: root::UINT,
            flags: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn CreateIcon(
            hInstance: root::HINSTANCE,
            nWidth: i32,
            nHeight: i32,
            cPlanes: u8,
            cBitsPixel: u8,
            lpbANDbits: *const u8,
            lpbXORbits: *const u8,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn DestroyIcon(hIcon: root::HICON) -> root::BOOL;
    }
    extern "C" {
        pub fn LookupIconIdFromDirectory(
            presbits: root::PBYTE,
            fIcon: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn LookupIconIdFromDirectoryEx(
            presbits: root::PBYTE,
            fIcon: root::BOOL,
            cxDesired: i32,
            cyDesired: i32,
            Flags: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn CreateIconFromResource(
            presbits: root::PBYTE,
            dwResSize: u32,
            fIcon: root::BOOL,
            dwVer: u32,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn CreateIconFromResourceEx(
            presbits: root::PBYTE,
            dwResSize: u32,
            fIcon: root::BOOL,
            dwVer: u32,
            cxDesired: i32,
            cyDesired: i32,
            Flags: root::UINT,
        ) -> root::HICON;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCURSORSHAPE {
        pub xHotSpot: i32,
        pub yHotSpot: i32,
        pub cx: i32,
        pub cy: i32,
        pub cbWidth: i32,
        pub Planes: u8,
        pub BitsPixel: u8,
    }
    pub type CURSORSHAPE = root::tagCURSORSHAPE;
    pub type LPCURSORSHAPE = *mut root::tagCURSORSHAPE;
    extern "C" {
        pub fn LoadImageA(
            hInst: root::HINSTANCE,
            name: *const i8,
            type_: root::UINT,
            cx: i32,
            cy: i32,
            fuLoad: root::UINT,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn LoadImageW(
            hInst: root::HINSTANCE,
            name: root::LPCWSTR,
            type_: root::UINT,
            cx: i32,
            cy: i32,
            fuLoad: root::UINT,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CopyImage(
            h: root::HANDLE,
            type_: root::UINT,
            cx: i32,
            cy: i32,
            flags: root::UINT,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn DrawIconEx(
            hdc: root::HDC,
            xLeft: i32,
            yTop: i32,
            hIcon: root::HICON,
            cxWidth: i32,
            cyWidth: i32,
            istepIfAniCur: root::UINT,
            hbrFlickerFreeDraw: root::HBRUSH,
            diFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateIconIndirect(piconinfo: root::PICONINFO) -> root::HICON;
    }
    extern "C" {
        pub fn CopyIcon(hIcon: root::HICON) -> root::HICON;
    }
    extern "C" {
        pub fn GetIconInfo(hIcon: root::HICON, piconinfo: root::PICONINFO) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ICONINFOEXA {
        pub cbSize: u32,
        pub fIcon: root::BOOL,
        pub xHotspot: u32,
        pub yHotspot: u32,
        pub hbmMask: root::HBITMAP,
        pub hbmColor: root::HBITMAP,
        pub wResID: u16,
        pub szModName: [i8; 260usize],
        pub szResName: [i8; 260usize],
    }
    pub type ICONINFOEXA = root::_ICONINFOEXA;
    pub type PICONINFOEXA = *mut root::_ICONINFOEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ICONINFOEXW {
        pub cbSize: u32,
        pub fIcon: root::BOOL,
        pub xHotspot: u32,
        pub yHotspot: u32,
        pub hbmMask: root::HBITMAP,
        pub hbmColor: root::HBITMAP,
        pub wResID: u16,
        pub szModName: [u16; 260usize],
        pub szResName: [u16; 260usize],
    }
    pub type ICONINFOEXW = root::_ICONINFOEXW;
    pub type PICONINFOEXW = *mut root::_ICONINFOEXW;
    pub type ICONINFOEX = root::ICONINFOEXA;
    pub type PICONINFOEX = root::PICONINFOEXA;
    extern "C" {
        pub fn GetIconInfoExA(hicon: root::HICON, piconinfo: root::PICONINFOEXA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetIconInfoExW(hicon: root::HICON, piconinfo: root::PICONINFOEXW) -> root::BOOL;
    }
    pub const EDIT_CONTROL_FEATURE_EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT:
        root::EDIT_CONTROL_FEATURE = 0;
    pub const EDIT_CONTROL_FEATURE_EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS:
        root::EDIT_CONTROL_FEATURE = 1;
    pub type EDIT_CONTROL_FEATURE = i32;
    extern "C" {
        pub fn IsDialogMessageA(hDlg: root::HWND, lpMsg: root::LPMSG) -> root::BOOL;
    }
    extern "C" {
        pub fn IsDialogMessageW(hDlg: root::HWND, lpMsg: root::LPMSG) -> root::BOOL;
    }
    extern "C" {
        pub fn MapDialogRect(hDlg: root::HWND, lpRect: root::LPRECT) -> root::BOOL;
    }
    extern "C" {
        pub fn DlgDirListA(
            hDlg: root::HWND,
            lpPathSpec: *mut i8,
            nIDListBox: i32,
            nIDStaticPath: i32,
            uFileType: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn DlgDirListW(
            hDlg: root::HWND,
            lpPathSpec: root::LPWSTR,
            nIDListBox: i32,
            nIDStaticPath: i32,
            uFileType: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn DlgDirSelectExA(
            hwndDlg: root::HWND,
            lpString: *mut i8,
            chCount: i32,
            idListBox: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DlgDirSelectExW(
            hwndDlg: root::HWND,
            lpString: root::LPWSTR,
            chCount: i32,
            idListBox: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DlgDirListComboBoxA(
            hDlg: root::HWND,
            lpPathSpec: *mut i8,
            nIDComboBox: i32,
            nIDStaticPath: i32,
            uFiletype: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn DlgDirListComboBoxW(
            hDlg: root::HWND,
            lpPathSpec: root::LPWSTR,
            nIDComboBox: i32,
            nIDStaticPath: i32,
            uFiletype: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn DlgDirSelectComboBoxExA(
            hwndDlg: root::HWND,
            lpString: *mut i8,
            cchOut: i32,
            idComboBox: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DlgDirSelectComboBoxExW(
            hwndDlg: root::HWND,
            lpString: root::LPWSTR,
            cchOut: i32,
            idComboBox: i32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSCROLLINFO {
        pub cbSize: root::UINT,
        pub fMask: root::UINT,
        pub nMin: i32,
        pub nMax: i32,
        pub nPage: root::UINT,
        pub nPos: i32,
        pub nTrackPos: i32,
    }
    pub type SCROLLINFO = root::tagSCROLLINFO;
    pub type LPSCROLLINFO = *mut root::tagSCROLLINFO;
    pub type LPCSCROLLINFO = *const root::SCROLLINFO;
    extern "C" {
        pub fn SetScrollInfo(
            hwnd: root::HWND,
            nBar: i32,
            lpsi: root::LPCSCROLLINFO,
            redraw: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn GetScrollInfo(
            hwnd: root::HWND,
            nBar: i32,
            lpsi: root::LPSCROLLINFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMDICREATESTRUCTA {
        pub szClass: *const i8,
        pub szTitle: *const i8,
        pub hOwner: root::HANDLE,
        pub x: i32,
        pub y: i32,
        pub cx: i32,
        pub cy: i32,
        pub style: u32,
        pub lParam: root::LPARAM,
    }
    pub type MDICREATESTRUCTA = root::tagMDICREATESTRUCTA;
    pub type LPMDICREATESTRUCTA = *mut root::tagMDICREATESTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMDICREATESTRUCTW {
        pub szClass: root::LPCWSTR,
        pub szTitle: root::LPCWSTR,
        pub hOwner: root::HANDLE,
        pub x: i32,
        pub y: i32,
        pub cx: i32,
        pub cy: i32,
        pub style: u32,
        pub lParam: root::LPARAM,
    }
    pub type MDICREATESTRUCTW = root::tagMDICREATESTRUCTW;
    pub type LPMDICREATESTRUCTW = *mut root::tagMDICREATESTRUCTW;
    pub type MDICREATESTRUCT = root::MDICREATESTRUCTA;
    pub type LPMDICREATESTRUCT = root::LPMDICREATESTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCLIENTCREATESTRUCT {
        pub hWindowMenu: root::HANDLE,
        pub idFirstChild: root::UINT,
    }
    pub type CLIENTCREATESTRUCT = root::tagCLIENTCREATESTRUCT;
    pub type LPCLIENTCREATESTRUCT = *mut root::tagCLIENTCREATESTRUCT;
    extern "C" {
        pub fn DefFrameProcA(
            hWnd: root::HWND,
            hWndMDIClient: root::HWND,
            uMsg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DefFrameProcW(
            hWnd: root::HWND,
            hWndMDIClient: root::HWND,
            uMsg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DefMDIChildProcA(
            hWnd: root::HWND,
            uMsg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DefMDIChildProcW(
            hWnd: root::HWND,
            uMsg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn TranslateMDISysAccel(hWndClient: root::HWND, lpMsg: root::LPMSG) -> root::BOOL;
    }
    extern "C" {
        pub fn ArrangeIconicWindows(hWnd: root::HWND) -> root::UINT;
    }
    extern "C" {
        pub fn CreateMDIWindowA(
            lpClassName: *const i8,
            lpWindowName: *const i8,
            dwStyle: u32,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
            hWndParent: root::HWND,
            hInstance: root::HINSTANCE,
            lParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn CreateMDIWindowW(
            lpClassName: root::LPCWSTR,
            lpWindowName: root::LPCWSTR,
            dwStyle: u32,
            X: i32,
            Y: i32,
            nWidth: i32,
            nHeight: i32,
            hWndParent: root::HWND,
            hInstance: root::HINSTANCE,
            lParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn TileWindows(
            hwndParent: root::HWND,
            wHow: root::UINT,
            lpRect: *const root::RECT,
            cKids: root::UINT,
            lpKids: *const root::HWND,
        ) -> u16;
    }
    extern "C" {
        pub fn CascadeWindows(
            hwndParent: root::HWND,
            wHow: root::UINT,
            lpRect: *const root::RECT,
            cKids: root::UINT,
            lpKids: *const root::HWND,
        ) -> u16;
    }
    pub type HELPPOLY = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMULTIKEYHELPA {
        pub mkSize: u32,
        pub mkKeylist: i8,
        pub szKeyphrase: [i8; 1usize],
    }
    pub type MULTIKEYHELPA = root::tagMULTIKEYHELPA;
    pub type PMULTIKEYHELPA = *mut root::tagMULTIKEYHELPA;
    pub type LPMULTIKEYHELPA = *mut root::tagMULTIKEYHELPA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMULTIKEYHELPW {
        pub mkSize: u32,
        pub mkKeylist: u16,
        pub szKeyphrase: [u16; 1usize],
    }
    pub type MULTIKEYHELPW = root::tagMULTIKEYHELPW;
    pub type PMULTIKEYHELPW = *mut root::tagMULTIKEYHELPW;
    pub type LPMULTIKEYHELPW = *mut root::tagMULTIKEYHELPW;
    pub type MULTIKEYHELP = root::MULTIKEYHELPA;
    pub type PMULTIKEYHELP = root::PMULTIKEYHELPA;
    pub type LPMULTIKEYHELP = root::LPMULTIKEYHELPA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHELPWININFOA {
        pub wStructSize: i32,
        pub x: i32,
        pub y: i32,
        pub dx: i32,
        pub dy: i32,
        pub wMax: i32,
        pub rgchMember: [i8; 2usize],
    }
    pub type HELPWININFOA = root::tagHELPWININFOA;
    pub type PHELPWININFOA = *mut root::tagHELPWININFOA;
    pub type LPHELPWININFOA = *mut root::tagHELPWININFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHELPWININFOW {
        pub wStructSize: i32,
        pub x: i32,
        pub y: i32,
        pub dx: i32,
        pub dy: i32,
        pub wMax: i32,
        pub rgchMember: [u16; 2usize],
    }
    pub type HELPWININFOW = root::tagHELPWININFOW;
    pub type PHELPWININFOW = *mut root::tagHELPWININFOW;
    pub type LPHELPWININFOW = *mut root::tagHELPWININFOW;
    pub type HELPWININFO = root::HELPWININFOA;
    pub type PHELPWININFO = root::PHELPWININFOA;
    pub type LPHELPWININFO = root::LPHELPWININFOA;
    extern "C" {
        pub fn WinHelpA(
            hWndMain: root::HWND,
            lpszHelp: *const i8,
            uCommand: root::UINT,
            dwData: u64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WinHelpW(
            hWndMain: root::HWND,
            lpszHelp: root::LPCWSTR,
            uCommand: root::UINT,
            dwData: u64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetGuiResources(hProcess: root::HANDLE, uiFlags: u32) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTouchPredictionParameters {
        pub cbSize: root::UINT,
        pub dwLatency: root::UINT,
        pub dwSampleTime: root::UINT,
        pub bUseHWTimeStamp: root::UINT,
    }
    pub type TOUCHPREDICTIONPARAMETERS = root::tagTouchPredictionParameters;
    pub type PTOUCHPREDICTIONPARAMETERS = *mut root::tagTouchPredictionParameters;
    pub const tagHANDEDNESS_HANDEDNESS_LEFT: root::tagHANDEDNESS = 0;
    pub const tagHANDEDNESS_HANDEDNESS_RIGHT: root::tagHANDEDNESS = 1;
    pub type tagHANDEDNESS = i32;
    pub use self::super::root::tagHANDEDNESS as HANDEDNESS;
    pub type PHANDEDNESS = *mut root::tagHANDEDNESS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNONCLIENTMETRICSA {
        pub cbSize: root::UINT,
        pub iBorderWidth: i32,
        pub iScrollWidth: i32,
        pub iScrollHeight: i32,
        pub iCaptionWidth: i32,
        pub iCaptionHeight: i32,
        pub lfCaptionFont: root::LOGFONTA,
        pub iSmCaptionWidth: i32,
        pub iSmCaptionHeight: i32,
        pub lfSmCaptionFont: root::LOGFONTA,
        pub iMenuWidth: i32,
        pub iMenuHeight: i32,
        pub lfMenuFont: root::LOGFONTA,
        pub lfStatusFont: root::LOGFONTA,
        pub lfMessageFont: root::LOGFONTA,
        pub iPaddedBorderWidth: i32,
    }
    pub type NONCLIENTMETRICSA = root::tagNONCLIENTMETRICSA;
    pub type PNONCLIENTMETRICSA = *mut root::tagNONCLIENTMETRICSA;
    pub type LPNONCLIENTMETRICSA = *mut root::tagNONCLIENTMETRICSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNONCLIENTMETRICSW {
        pub cbSize: root::UINT,
        pub iBorderWidth: i32,
        pub iScrollWidth: i32,
        pub iScrollHeight: i32,
        pub iCaptionWidth: i32,
        pub iCaptionHeight: i32,
        pub lfCaptionFont: root::LOGFONTW,
        pub iSmCaptionWidth: i32,
        pub iSmCaptionHeight: i32,
        pub lfSmCaptionFont: root::LOGFONTW,
        pub iMenuWidth: i32,
        pub iMenuHeight: i32,
        pub lfMenuFont: root::LOGFONTW,
        pub lfStatusFont: root::LOGFONTW,
        pub lfMessageFont: root::LOGFONTW,
        pub iPaddedBorderWidth: i32,
    }
    pub type NONCLIENTMETRICSW = root::tagNONCLIENTMETRICSW;
    pub type PNONCLIENTMETRICSW = *mut root::tagNONCLIENTMETRICSW;
    pub type LPNONCLIENTMETRICSW = *mut root::tagNONCLIENTMETRICSW;
    pub type NONCLIENTMETRICS = root::NONCLIENTMETRICSA;
    pub type PNONCLIENTMETRICS = root::PNONCLIENTMETRICSA;
    pub type LPNONCLIENTMETRICS = root::LPNONCLIENTMETRICSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMINIMIZEDMETRICS {
        pub cbSize: root::UINT,
        pub iWidth: i32,
        pub iHorzGap: i32,
        pub iVertGap: i32,
        pub iArrange: i32,
    }
    pub type MINIMIZEDMETRICS = root::tagMINIMIZEDMETRICS;
    pub type PMINIMIZEDMETRICS = *mut root::tagMINIMIZEDMETRICS;
    pub type LPMINIMIZEDMETRICS = *mut root::tagMINIMIZEDMETRICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagICONMETRICSA {
        pub cbSize: root::UINT,
        pub iHorzSpacing: i32,
        pub iVertSpacing: i32,
        pub iTitleWrap: i32,
        pub lfFont: root::LOGFONTA,
    }
    pub type ICONMETRICSA = root::tagICONMETRICSA;
    pub type PICONMETRICSA = *mut root::tagICONMETRICSA;
    pub type LPICONMETRICSA = *mut root::tagICONMETRICSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagICONMETRICSW {
        pub cbSize: root::UINT,
        pub iHorzSpacing: i32,
        pub iVertSpacing: i32,
        pub iTitleWrap: i32,
        pub lfFont: root::LOGFONTW,
    }
    pub type ICONMETRICSW = root::tagICONMETRICSW;
    pub type PICONMETRICSW = *mut root::tagICONMETRICSW;
    pub type LPICONMETRICSW = *mut root::tagICONMETRICSW;
    pub type ICONMETRICS = root::ICONMETRICSA;
    pub type PICONMETRICS = root::PICONMETRICSA;
    pub type LPICONMETRICS = root::LPICONMETRICSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagANIMATIONINFO {
        pub cbSize: root::UINT,
        pub iMinAnimate: i32,
    }
    pub type ANIMATIONINFO = root::tagANIMATIONINFO;
    pub type LPANIMATIONINFO = *mut root::tagANIMATIONINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSERIALKEYSA {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub lpszActivePort: *mut i8,
        pub lpszPort: *mut i8,
        pub iBaudRate: root::UINT,
        pub iPortState: root::UINT,
        pub iActive: root::UINT,
    }
    pub type SERIALKEYSA = root::tagSERIALKEYSA;
    pub type LPSERIALKEYSA = *mut root::tagSERIALKEYSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSERIALKEYSW {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub lpszActivePort: root::LPWSTR,
        pub lpszPort: root::LPWSTR,
        pub iBaudRate: root::UINT,
        pub iPortState: root::UINT,
        pub iActive: root::UINT,
    }
    pub type SERIALKEYSW = root::tagSERIALKEYSW;
    pub type LPSERIALKEYSW = *mut root::tagSERIALKEYSW;
    pub type SERIALKEYS = root::SERIALKEYSA;
    pub type LPSERIALKEYS = root::LPSERIALKEYSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHIGHCONTRASTA {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub lpszDefaultScheme: *mut i8,
    }
    pub type HIGHCONTRASTA = root::tagHIGHCONTRASTA;
    pub type LPHIGHCONTRASTA = *mut root::tagHIGHCONTRASTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHIGHCONTRASTW {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub lpszDefaultScheme: root::LPWSTR,
    }
    pub type HIGHCONTRASTW = root::tagHIGHCONTRASTW;
    pub type LPHIGHCONTRASTW = *mut root::tagHIGHCONTRASTW;
    pub type HIGHCONTRAST = root::HIGHCONTRASTA;
    pub type LPHIGHCONTRAST = root::LPHIGHCONTRASTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VIDEOPARAMETERS {
        pub Guid: root::GUID,
        pub dwOffset: root::ULONG,
        pub dwCommand: root::ULONG,
        pub dwFlags: root::ULONG,
        pub dwMode: root::ULONG,
        pub dwTVStandard: root::ULONG,
        pub dwAvailableModes: root::ULONG,
        pub dwAvailableTVStandard: root::ULONG,
        pub dwFlickerFilter: root::ULONG,
        pub dwOverScanX: root::ULONG,
        pub dwOverScanY: root::ULONG,
        pub dwMaxUnscaledX: root::ULONG,
        pub dwMaxUnscaledY: root::ULONG,
        pub dwPositionX: root::ULONG,
        pub dwPositionY: root::ULONG,
        pub dwBrightness: root::ULONG,
        pub dwContrast: root::ULONG,
        pub dwCPType: root::ULONG,
        pub dwCPCommand: root::ULONG,
        pub dwCPStandard: root::ULONG,
        pub dwCPKey: root::ULONG,
        pub bCP_APSTriggerBits: root::ULONG,
        pub bOEMCopyProtection: [root::UCHAR; 256usize],
    }
    pub type VIDEOPARAMETERS = root::_VIDEOPARAMETERS;
    pub type PVIDEOPARAMETERS = *mut root::_VIDEOPARAMETERS;
    pub type LPVIDEOPARAMETERS = *mut root::_VIDEOPARAMETERS;
    extern "C" {
        pub fn ChangeDisplaySettingsA(
            lpDevMode: *mut root::DEVMODEA,
            dwFlags: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn ChangeDisplaySettingsW(
            lpDevMode: *mut root::DEVMODEW,
            dwFlags: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn ChangeDisplaySettingsExA(
            lpszDeviceName: *const i8,
            lpDevMode: *mut root::DEVMODEA,
            hwnd: root::HWND,
            dwflags: u32,
            lParam: root::LPVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn ChangeDisplaySettingsExW(
            lpszDeviceName: root::LPCWSTR,
            lpDevMode: *mut root::DEVMODEW,
            hwnd: root::HWND,
            dwflags: u32,
            lParam: root::LPVOID,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumDisplaySettingsA(
            lpszDeviceName: *const i8,
            iModeNum: u32,
            lpDevMode: *mut root::DEVMODEA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDisplaySettingsW(
            lpszDeviceName: root::LPCWSTR,
            iModeNum: u32,
            lpDevMode: *mut root::DEVMODEW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDisplaySettingsExA(
            lpszDeviceName: *const i8,
            iModeNum: u32,
            lpDevMode: *mut root::DEVMODEA,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDisplaySettingsExW(
            lpszDeviceName: root::LPCWSTR,
            iModeNum: u32,
            lpDevMode: *mut root::DEVMODEW,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDisplayDevicesA(
            lpDevice: *const i8,
            iDevNum: u32,
            lpDisplayDevice: root::PDISPLAY_DEVICEA,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDisplayDevicesW(
            lpDevice: root::LPCWSTR,
            iDevNum: u32,
            lpDisplayDevice: root::PDISPLAY_DEVICEW,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDisplayConfigBufferSizes(
            flags: root::UINT32,
            numPathArrayElements: *mut root::UINT32,
            numModeInfoArrayElements: *mut root::UINT32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetDisplayConfig(
            numPathArrayElements: root::UINT32,
            pathArray: *mut root::DISPLAYCONFIG_PATH_INFO,
            numModeInfoArrayElements: root::UINT32,
            modeInfoArray: *mut root::DISPLAYCONFIG_MODE_INFO,
            flags: root::UINT32,
        ) -> i32;
    }
    extern "C" {
        pub fn QueryDisplayConfig(
            flags: root::UINT32,
            numPathArrayElements: *mut root::UINT32,
            pathArray: *mut root::DISPLAYCONFIG_PATH_INFO,
            numModeInfoArrayElements: *mut root::UINT32,
            modeInfoArray: *mut root::DISPLAYCONFIG_MODE_INFO,
            currentTopologyId: *mut root::DISPLAYCONFIG_TOPOLOGY_ID,
        ) -> i32;
    }
    extern "C" {
        pub fn DisplayConfigGetDeviceInfo(
            requestPacket: *mut root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        ) -> i32;
    }
    extern "C" {
        pub fn DisplayConfigSetDeviceInfo(
            setPacket: *mut root::DISPLAYCONFIG_DEVICE_INFO_HEADER,
        ) -> i32;
    }
    extern "C" {
        pub fn SystemParametersInfoA(
            uiAction: root::UINT,
            uiParam: root::UINT,
            pvParam: root::PVOID,
            fWinIni: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SystemParametersInfoW(
            uiAction: root::UINT,
            uiParam: root::UINT,
            pvParam: root::PVOID,
            fWinIni: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SystemParametersInfoForDpi(
            uiAction: root::UINT,
            uiParam: root::UINT,
            pvParam: root::PVOID,
            fWinIni: root::UINT,
            dpi: root::UINT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagFILTERKEYS {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub iWaitMSec: u32,
        pub iDelayMSec: u32,
        pub iRepeatMSec: u32,
        pub iBounceMSec: u32,
    }
    pub type FILTERKEYS = root::tagFILTERKEYS;
    pub type LPFILTERKEYS = *mut root::tagFILTERKEYS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTICKYKEYS {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
    }
    pub type STICKYKEYS = root::tagSTICKYKEYS;
    pub type LPSTICKYKEYS = *mut root::tagSTICKYKEYS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMOUSEKEYS {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub iMaxSpeed: u32,
        pub iTimeToMaxSpeed: u32,
        pub iCtrlSpeed: u32,
        pub dwReserved1: u32,
        pub dwReserved2: u32,
    }
    pub type MOUSEKEYS = root::tagMOUSEKEYS;
    pub type LPMOUSEKEYS = *mut root::tagMOUSEKEYS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagACCESSTIMEOUT {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub iTimeOutMSec: u32,
    }
    pub type ACCESSTIMEOUT = root::tagACCESSTIMEOUT;
    pub type LPACCESSTIMEOUT = *mut root::tagACCESSTIMEOUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSOUNDSENTRYA {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub iFSTextEffect: u32,
        pub iFSTextEffectMSec: u32,
        pub iFSTextEffectColorBits: u32,
        pub iFSGrafEffect: u32,
        pub iFSGrafEffectMSec: u32,
        pub iFSGrafEffectColor: u32,
        pub iWindowsEffect: u32,
        pub iWindowsEffectMSec: u32,
        pub lpszWindowsEffectDLL: *mut i8,
        pub iWindowsEffectOrdinal: u32,
    }
    pub type SOUNDSENTRYA = root::tagSOUNDSENTRYA;
    pub type LPSOUNDSENTRYA = *mut root::tagSOUNDSENTRYA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSOUNDSENTRYW {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub iFSTextEffect: u32,
        pub iFSTextEffectMSec: u32,
        pub iFSTextEffectColorBits: u32,
        pub iFSGrafEffect: u32,
        pub iFSGrafEffectMSec: u32,
        pub iFSGrafEffectColor: u32,
        pub iWindowsEffect: u32,
        pub iWindowsEffectMSec: u32,
        pub lpszWindowsEffectDLL: root::LPWSTR,
        pub iWindowsEffectOrdinal: u32,
    }
    pub type SOUNDSENTRYW = root::tagSOUNDSENTRYW;
    pub type LPSOUNDSENTRYW = *mut root::tagSOUNDSENTRYW;
    pub type SOUNDSENTRY = root::SOUNDSENTRYA;
    pub type LPSOUNDSENTRY = root::LPSOUNDSENTRYA;
    extern "C" {
        pub fn SoundSentry() -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTOGGLEKEYS {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
    }
    pub type TOGGLEKEYS = root::tagTOGGLEKEYS;
    pub type LPTOGGLEKEYS = *mut root::tagTOGGLEKEYS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAUDIODESCRIPTION {
        pub cbSize: root::UINT,
        pub Enabled: root::BOOL,
        pub Locale: root::LCID,
    }
    pub type AUDIODESCRIPTION = root::tagAUDIODESCRIPTION;
    pub type LPAUDIODESCRIPTION = *mut root::tagAUDIODESCRIPTION;
    extern "C" {
        pub fn SetDebugErrorLevel(dwLevel: u32);
    }
    extern "C" {
        pub fn SetLastErrorEx(dwErrCode: u32, dwType: u32);
    }
    extern "C" {
        pub fn InternalGetWindowText(
            hWnd: root::HWND,
            pString: root::LPWSTR,
            cchMaxCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn CancelShutdown() -> root::BOOL;
    }
    extern "C" {
        pub fn MonitorFromPoint(pt: root::POINT, dwFlags: u32) -> root::HMONITOR;
    }
    extern "C" {
        pub fn MonitorFromRect(lprc: root::LPCRECT, dwFlags: u32) -> root::HMONITOR;
    }
    extern "C" {
        pub fn MonitorFromWindow(hwnd: root::HWND, dwFlags: u32) -> root::HMONITOR;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONITORINFO {
        pub cbSize: u32,
        pub rcMonitor: root::RECT,
        pub rcWork: root::RECT,
        pub dwFlags: u32,
    }
    pub type MONITORINFO = root::tagMONITORINFO;
    pub type LPMONITORINFO = *mut root::tagMONITORINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONITORINFOEXA {
        pub _base: root::tagMONITORINFO,
        pub szDevice: [i8; 32usize],
    }
    pub type MONITORINFOEXA = root::tagMONITORINFOEXA;
    pub type LPMONITORINFOEXA = *mut root::tagMONITORINFOEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONITORINFOEXW {
        pub _base: root::tagMONITORINFO,
        pub szDevice: [u16; 32usize],
    }
    pub type MONITORINFOEXW = root::tagMONITORINFOEXW;
    pub type LPMONITORINFOEXW = *mut root::tagMONITORINFOEXW;
    pub type MONITORINFOEX = root::MONITORINFOEXA;
    pub type LPMONITORINFOEX = root::LPMONITORINFOEXA;
    extern "C" {
        pub fn GetMonitorInfoA(hMonitor: root::HMONITOR, lpmi: root::LPMONITORINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMonitorInfoW(hMonitor: root::HMONITOR, lpmi: root::LPMONITORINFO) -> root::BOOL;
    }
    pub type MONITORENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HMONITOR,
            arg2: root::HDC,
            arg3: root::LPRECT,
            arg4: root::LPARAM,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn EnumDisplayMonitors(
            hdc: root::HDC,
            lprcClip: root::LPCRECT,
            lpfnEnum: root::MONITORENUMPROC,
            dwData: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn NotifyWinEvent(
            event: u32,
            hwnd: root::HWND,
            idObject: i32,
            idChild: i32,
        );
    }
    pub type WINEVENTPROC = ::std::option::Option<
        unsafe extern "C" fn(
            hWinEventHook: root::HWINEVENTHOOK,
            event: u32,
            hwnd: root::HWND,
            idObject: i32,
            idChild: i32,
            idEventThread: u32,
            dwmsEventTime: u32,
        ),
    >;
    extern "C" {
        pub fn SetWinEventHook(
            eventMin: u32,
            eventMax: u32,
            hmodWinEventProc: root::HMODULE,
            pfnWinEventProc: root::WINEVENTPROC,
            idProcess: u32,
            idThread: u32,
            dwFlags: u32,
        ) -> root::HWINEVENTHOOK;
    }
    extern "C" {
        pub fn IsWinEventHookInstalled(event: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn UnhookWinEvent(hWinEventHook: root::HWINEVENTHOOK) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGUITHREADINFO {
        pub cbSize: u32,
        pub flags: u32,
        pub hwndActive: root::HWND,
        pub hwndFocus: root::HWND,
        pub hwndCapture: root::HWND,
        pub hwndMenuOwner: root::HWND,
        pub hwndMoveSize: root::HWND,
        pub hwndCaret: root::HWND,
        pub rcCaret: root::RECT,
    }
    pub type GUITHREADINFO = root::tagGUITHREADINFO;
    pub type PGUITHREADINFO = *mut root::tagGUITHREADINFO;
    pub type LPGUITHREADINFO = *mut root::tagGUITHREADINFO;
    extern "C" {
        pub fn GetGUIThreadInfo(idThread: u32, pgui: root::PGUITHREADINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn BlockInput(fBlockIt: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessDPIAware() -> root::BOOL;
    }
    extern "C" {
        pub fn IsProcessDPIAware() -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadDpiAwarenessContext(
            dpiContext: root::DPI_AWARENESS_CONTEXT,
        ) -> root::DPI_AWARENESS_CONTEXT;
    }
    extern "C" {
        pub fn GetThreadDpiAwarenessContext() -> root::DPI_AWARENESS_CONTEXT;
    }
    extern "C" {
        pub fn GetWindowDpiAwarenessContext(hwnd: root::HWND) -> root::DPI_AWARENESS_CONTEXT;
    }
    extern "C" {
        pub fn GetAwarenessFromDpiAwarenessContext(
            value: root::DPI_AWARENESS_CONTEXT,
        ) -> root::DPI_AWARENESS;
    }
    extern "C" {
        pub fn GetDpiFromDpiAwarenessContext(value: root::DPI_AWARENESS_CONTEXT) -> root::UINT;
    }
    extern "C" {
        pub fn AreDpiAwarenessContextsEqual(
            dpiContextA: root::DPI_AWARENESS_CONTEXT,
            dpiContextB: root::DPI_AWARENESS_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidDpiAwarenessContext(value: root::DPI_AWARENESS_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDpiForWindow(hwnd: root::HWND) -> root::UINT;
    }
    extern "C" {
        pub fn GetDpiForSystem() -> root::UINT;
    }
    extern "C" {
        pub fn GetSystemDpiForProcess(hProcess: root::HANDLE) -> root::UINT;
    }
    extern "C" {
        pub fn EnableNonClientDpiScaling(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn InheritWindowMonitor(hwnd: root::HWND, hwndInherit: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessDpiAwarenessContext(value: root::DPI_AWARENESS_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDpiAwarenessContextForProcess(
            hProcess: root::HANDLE,
        ) -> root::DPI_AWARENESS_CONTEXT;
    }
    extern "C" {
        pub fn SetThreadDpiHostingBehavior(
            value: root::DPI_HOSTING_BEHAVIOR,
        ) -> root::DPI_HOSTING_BEHAVIOR;
    }
    extern "C" {
        pub fn GetThreadDpiHostingBehavior() -> root::DPI_HOSTING_BEHAVIOR;
    }
    extern "C" {
        pub fn GetWindowDpiHostingBehavior(hwnd: root::HWND) -> root::DPI_HOSTING_BEHAVIOR;
    }
    extern "C" {
        pub fn GetWindowModuleFileNameA(
            hwnd: root::HWND,
            pszFileName: *mut i8,
            cchFileNameMax: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetWindowModuleFileNameW(
            hwnd: root::HWND,
            pszFileName: root::LPWSTR,
            cchFileNameMax: root::UINT,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCURSORINFO {
        pub cbSize: u32,
        pub flags: u32,
        pub hCursor: root::HCURSOR,
        pub ptScreenPos: root::POINT,
    }
    pub type CURSORINFO = root::tagCURSORINFO;
    pub type PCURSORINFO = *mut root::tagCURSORINFO;
    pub type LPCURSORINFO = *mut root::tagCURSORINFO;
    extern "C" {
        pub fn GetCursorInfo(pci: root::PCURSORINFO) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWINDOWINFO {
        pub cbSize: u32,
        pub rcWindow: root::RECT,
        pub rcClient: root::RECT,
        pub dwStyle: u32,
        pub dwExStyle: u32,
        pub dwWindowStatus: u32,
        pub cxWindowBorders: root::UINT,
        pub cyWindowBorders: root::UINT,
        pub atomWindowType: root::ATOM,
        pub wCreatorVersion: u16,
    }
    pub type WINDOWINFO = root::tagWINDOWINFO;
    pub type PWINDOWINFO = *mut root::tagWINDOWINFO;
    pub type LPWINDOWINFO = *mut root::tagWINDOWINFO;
    extern "C" {
        pub fn GetWindowInfo(hwnd: root::HWND, pwi: root::PWINDOWINFO) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTITLEBARINFO {
        pub cbSize: u32,
        pub rcTitleBar: root::RECT,
        pub rgstate: [u32; 6usize],
    }
    pub type TITLEBARINFO = root::tagTITLEBARINFO;
    pub type PTITLEBARINFO = *mut root::tagTITLEBARINFO;
    pub type LPTITLEBARINFO = *mut root::tagTITLEBARINFO;
    extern "C" {
        pub fn GetTitleBarInfo(hwnd: root::HWND, pti: root::PTITLEBARINFO) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTITLEBARINFOEX {
        pub cbSize: u32,
        pub rcTitleBar: root::RECT,
        pub rgstate: [u32; 6usize],
        pub rgrect: [root::RECT; 6usize],
    }
    pub type TITLEBARINFOEX = root::tagTITLEBARINFOEX;
    pub type PTITLEBARINFOEX = *mut root::tagTITLEBARINFOEX;
    pub type LPTITLEBARINFOEX = *mut root::tagTITLEBARINFOEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMENUBARINFO {
        pub cbSize: u32,
        pub rcBar: root::RECT,
        pub hMenu: root::HMENU,
        pub hwndMenu: root::HWND,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub __bindgen_padding_0: u32,
    }
    impl tagMENUBARINFO {
        #[inline]
        pub fn fBarFocused(&self) -> root::BOOL {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fBarFocused(&mut self, val: root::BOOL) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fFocused(&self) -> root::BOOL {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fFocused(&mut self, val: root::BOOL) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fUnused(&self) -> root::BOOL {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_fUnused(&mut self, val: root::BOOL) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            fBarFocused: root::BOOL,
            fFocused: root::BOOL,
            fUnused: root::BOOL,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let fBarFocused: u32 = unsafe { ::std::mem::transmute(fBarFocused) };
                fBarFocused as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let fFocused: u32 = unsafe { ::std::mem::transmute(fFocused) };
                fFocused as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let fUnused: u32 = unsafe { ::std::mem::transmute(fUnused) };
                fUnused as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type MENUBARINFO = root::tagMENUBARINFO;
    pub type PMENUBARINFO = *mut root::tagMENUBARINFO;
    pub type LPMENUBARINFO = *mut root::tagMENUBARINFO;
    extern "C" {
        pub fn GetMenuBarInfo(
            hwnd: root::HWND,
            idObject: i32,
            idItem: i32,
            pmbi: root::PMENUBARINFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSCROLLBARINFO {
        pub cbSize: u32,
        pub rcScrollBar: root::RECT,
        pub dxyLineButton: i32,
        pub xyThumbTop: i32,
        pub xyThumbBottom: i32,
        pub reserved: i32,
        pub rgstate: [u32; 6usize],
    }
    pub type SCROLLBARINFO = root::tagSCROLLBARINFO;
    pub type PSCROLLBARINFO = *mut root::tagSCROLLBARINFO;
    pub type LPSCROLLBARINFO = *mut root::tagSCROLLBARINFO;
    extern "C" {
        pub fn GetScrollBarInfo(
            hwnd: root::HWND,
            idObject: i32,
            psbi: root::PSCROLLBARINFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOMBOBOXINFO {
        pub cbSize: u32,
        pub rcItem: root::RECT,
        pub rcButton: root::RECT,
        pub stateButton: u32,
        pub hwndCombo: root::HWND,
        pub hwndItem: root::HWND,
        pub hwndList: root::HWND,
    }
    pub type COMBOBOXINFO = root::tagCOMBOBOXINFO;
    pub type PCOMBOBOXINFO = *mut root::tagCOMBOBOXINFO;
    pub type LPCOMBOBOXINFO = *mut root::tagCOMBOBOXINFO;
    extern "C" {
        pub fn GetComboBoxInfo(hwndCombo: root::HWND, pcbi: root::PCOMBOBOXINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn GetAncestor(hwnd: root::HWND, gaFlags: root::UINT) -> root::HWND;
    }
    extern "C" {
        pub fn RealChildWindowFromPoint(
            hwndParent: root::HWND,
            ptParentClientCoords: root::POINT,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn RealGetWindowClassA(
            hwnd: root::HWND,
            ptszClassName: *mut i8,
            cchClassNameMax: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn RealGetWindowClassW(
            hwnd: root::HWND,
            ptszClassName: root::LPWSTR,
            cchClassNameMax: root::UINT,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagALTTABINFO {
        pub cbSize: u32,
        pub cItems: i32,
        pub cColumns: i32,
        pub cRows: i32,
        pub iColFocus: i32,
        pub iRowFocus: i32,
        pub cxItem: i32,
        pub cyItem: i32,
        pub ptStart: root::POINT,
    }
    pub type ALTTABINFO = root::tagALTTABINFO;
    pub type PALTTABINFO = *mut root::tagALTTABINFO;
    pub type LPALTTABINFO = *mut root::tagALTTABINFO;
    extern "C" {
        pub fn GetAltTabInfoA(
            hwnd: root::HWND,
            iItem: i32,
            pati: root::PALTTABINFO,
            pszItemText: *mut i8,
            cchItemText: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetAltTabInfoW(
            hwnd: root::HWND,
            iItem: i32,
            pati: root::PALTTABINFO,
            pszItemText: root::LPWSTR,
            cchItemText: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetListBoxInfo(hwnd: root::HWND) -> u32;
    }
    extern "C" {
        pub fn LockWorkStation() -> root::BOOL;
    }
    extern "C" {
        pub fn UserHandleGrantAccess(
            hUserHandle: root::HANDLE,
            hJob: root::HANDLE,
            bGrant: root::BOOL,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HRAWINPUT__ {
        pub unused: i32,
    }
    pub type HRAWINPUT = *mut root::HRAWINPUT__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRAWINPUTHEADER {
        pub dwType: u32,
        pub dwSize: u32,
        pub hDevice: root::HANDLE,
        pub wParam: root::WPARAM,
    }
    pub type RAWINPUTHEADER = root::tagRAWINPUTHEADER;
    pub type PRAWINPUTHEADER = *mut root::tagRAWINPUTHEADER;
    pub type LPRAWINPUTHEADER = *mut root::tagRAWINPUTHEADER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagRAWMOUSE {
        pub usFlags: root::USHORT,
        pub __bindgen_anon_1: root::tagRAWMOUSE__bindgen_ty_1,
        pub ulRawButtons: root::ULONG,
        pub lLastX: i32,
        pub lLastY: i32,
        pub ulExtraInformation: root::ULONG,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagRAWMOUSE__bindgen_ty_1 {
        pub ulButtons: root::ULONG,
        pub __bindgen_anon_1: root::tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1 {
        pub usButtonFlags: root::USHORT,
        pub usButtonData: root::USHORT,
    }
    pub type RAWMOUSE = root::tagRAWMOUSE;
    pub type PRAWMOUSE = *mut root::tagRAWMOUSE;
    pub type LPRAWMOUSE = *mut root::tagRAWMOUSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRAWKEYBOARD {
        pub MakeCode: root::USHORT,
        pub Flags: root::USHORT,
        pub Reserved: root::USHORT,
        pub VKey: root::USHORT,
        pub Message: root::UINT,
        pub ExtraInformation: root::ULONG,
    }
    pub type RAWKEYBOARD = root::tagRAWKEYBOARD;
    pub type PRAWKEYBOARD = *mut root::tagRAWKEYBOARD;
    pub type LPRAWKEYBOARD = *mut root::tagRAWKEYBOARD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRAWHID {
        pub dwSizeHid: u32,
        pub dwCount: u32,
        pub bRawData: [u8; 1usize],
    }
    pub type RAWHID = root::tagRAWHID;
    pub type PRAWHID = *mut root::tagRAWHID;
    pub type LPRAWHID = *mut root::tagRAWHID;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagRAWINPUT {
        pub header: root::RAWINPUTHEADER,
        pub data: root::tagRAWINPUT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagRAWINPUT__bindgen_ty_1 {
        pub mouse: root::RAWMOUSE,
        pub keyboard: root::RAWKEYBOARD,
        pub hid: root::RAWHID,
    }
    pub type RAWINPUT = root::tagRAWINPUT;
    pub type PRAWINPUT = *mut root::tagRAWINPUT;
    pub type LPRAWINPUT = *mut root::tagRAWINPUT;
    extern "C" {
        pub fn GetRawInputData(
            hRawInput: root::HRAWINPUT,
            uiCommand: root::UINT,
            pData: root::LPVOID,
            pcbSize: root::PUINT,
            cbSizeHeader: root::UINT,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRID_DEVICE_INFO_MOUSE {
        pub dwId: u32,
        pub dwNumberOfButtons: u32,
        pub dwSampleRate: u32,
        pub fHasHorizontalWheel: root::BOOL,
    }
    pub type RID_DEVICE_INFO_MOUSE = root::tagRID_DEVICE_INFO_MOUSE;
    pub type PRID_DEVICE_INFO_MOUSE = *mut root::tagRID_DEVICE_INFO_MOUSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRID_DEVICE_INFO_KEYBOARD {
        pub dwType: u32,
        pub dwSubType: u32,
        pub dwKeyboardMode: u32,
        pub dwNumberOfFunctionKeys: u32,
        pub dwNumberOfIndicators: u32,
        pub dwNumberOfKeysTotal: u32,
    }
    pub type RID_DEVICE_INFO_KEYBOARD = root::tagRID_DEVICE_INFO_KEYBOARD;
    pub type PRID_DEVICE_INFO_KEYBOARD = *mut root::tagRID_DEVICE_INFO_KEYBOARD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRID_DEVICE_INFO_HID {
        pub dwVendorId: u32,
        pub dwProductId: u32,
        pub dwVersionNumber: u32,
        pub usUsagePage: root::USHORT,
        pub usUsage: root::USHORT,
    }
    pub type RID_DEVICE_INFO_HID = root::tagRID_DEVICE_INFO_HID;
    pub type PRID_DEVICE_INFO_HID = *mut root::tagRID_DEVICE_INFO_HID;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagRID_DEVICE_INFO {
        pub cbSize: u32,
        pub dwType: u32,
        pub __bindgen_anon_1: root::tagRID_DEVICE_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagRID_DEVICE_INFO__bindgen_ty_1 {
        pub mouse: root::RID_DEVICE_INFO_MOUSE,
        pub keyboard: root::RID_DEVICE_INFO_KEYBOARD,
        pub hid: root::RID_DEVICE_INFO_HID,
    }
    pub type RID_DEVICE_INFO = root::tagRID_DEVICE_INFO;
    pub type PRID_DEVICE_INFO = *mut root::tagRID_DEVICE_INFO;
    pub type LPRID_DEVICE_INFO = *mut root::tagRID_DEVICE_INFO;
    extern "C" {
        pub fn GetRawInputDeviceInfoA(
            hDevice: root::HANDLE,
            uiCommand: root::UINT,
            pData: root::LPVOID,
            pcbSize: root::PUINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetRawInputDeviceInfoW(
            hDevice: root::HANDLE,
            uiCommand: root::UINT,
            pData: root::LPVOID,
            pcbSize: root::PUINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn GetRawInputBuffer(
            pData: root::PRAWINPUT,
            pcbSize: root::PUINT,
            cbSizeHeader: root::UINT,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRAWINPUTDEVICE {
        pub usUsagePage: root::USHORT,
        pub usUsage: root::USHORT,
        pub dwFlags: u32,
        pub hwndTarget: root::HWND,
    }
    pub type RAWINPUTDEVICE = root::tagRAWINPUTDEVICE;
    pub type PRAWINPUTDEVICE = *mut root::tagRAWINPUTDEVICE;
    pub type LPRAWINPUTDEVICE = *mut root::tagRAWINPUTDEVICE;
    pub type PCRAWINPUTDEVICE = *const root::RAWINPUTDEVICE;
    extern "C" {
        pub fn RegisterRawInputDevices(
            pRawInputDevices: root::PCRAWINPUTDEVICE,
            uiNumDevices: root::UINT,
            cbSize: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetRegisteredRawInputDevices(
            pRawInputDevices: root::PRAWINPUTDEVICE,
            puiNumDevices: root::PUINT,
            cbSize: root::UINT,
        ) -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRAWINPUTDEVICELIST {
        pub hDevice: root::HANDLE,
        pub dwType: u32,
    }
    pub type RAWINPUTDEVICELIST = root::tagRAWINPUTDEVICELIST;
    pub type PRAWINPUTDEVICELIST = *mut root::tagRAWINPUTDEVICELIST;
    extern "C" {
        pub fn GetRawInputDeviceList(
            pRawInputDeviceList: root::PRAWINPUTDEVICELIST,
            puiNumDevices: root::PUINT,
            cbSize: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DefRawInputProc(
            paRawInput: *mut root::PRAWINPUT,
            nInput: root::INT,
            cbSizeHeader: root::UINT,
        ) -> root::LRESULT;
    }
    pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_INTEGRATED_PEN:
        root::tagPOINTER_DEVICE_TYPE = 1;
    pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_EXTERNAL_PEN:
        root::tagPOINTER_DEVICE_TYPE = 2;
    pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_TOUCH: root::tagPOINTER_DEVICE_TYPE = 3;
    pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_TOUCH_PAD: root::tagPOINTER_DEVICE_TYPE =
        4;
    pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_MAX: root::tagPOINTER_DEVICE_TYPE = -1;
    pub type tagPOINTER_DEVICE_TYPE = i32;
    pub use self::super::root::tagPOINTER_DEVICE_TYPE as POINTER_DEVICE_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTER_DEVICE_INFO {
        pub displayOrientation: u32,
        pub device: root::HANDLE,
        pub pointerDeviceType: root::POINTER_DEVICE_TYPE,
        pub monitor: root::HMONITOR,
        pub startingCursorId: root::ULONG,
        pub maxActiveContacts: root::USHORT,
        pub productString: [u16; 520usize],
    }
    pub type POINTER_DEVICE_INFO = root::tagPOINTER_DEVICE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTER_DEVICE_PROPERTY {
        pub logicalMin: root::INT32,
        pub logicalMax: root::INT32,
        pub physicalMin: root::INT32,
        pub physicalMax: root::INT32,
        pub unit: root::UINT32,
        pub unitExponent: root::UINT32,
        pub usagePageId: root::USHORT,
        pub usageId: root::USHORT,
    }
    pub type POINTER_DEVICE_PROPERTY = root::tagPOINTER_DEVICE_PROPERTY;
    pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_UNKNOWN:
        root::tagPOINTER_DEVICE_CURSOR_TYPE = 0;
    pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_TIP:
        root::tagPOINTER_DEVICE_CURSOR_TYPE = 1;
    pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_ERASER:
        root::tagPOINTER_DEVICE_CURSOR_TYPE = 2;
    pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_MAX:
        root::tagPOINTER_DEVICE_CURSOR_TYPE = -1;
    pub type tagPOINTER_DEVICE_CURSOR_TYPE = i32;
    pub use self::super::root::tagPOINTER_DEVICE_CURSOR_TYPE as POINTER_DEVICE_CURSOR_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPOINTER_DEVICE_CURSOR_INFO {
        pub cursorId: root::UINT32,
        pub cursor: root::POINTER_DEVICE_CURSOR_TYPE,
    }
    pub type POINTER_DEVICE_CURSOR_INFO = root::tagPOINTER_DEVICE_CURSOR_INFO;
    extern "C" {
        pub fn GetPointerDevices(
            deviceCount: *mut root::UINT32,
            pointerDevices: *mut root::POINTER_DEVICE_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerDevice(
            device: root::HANDLE,
            pointerDevice: *mut root::POINTER_DEVICE_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerDeviceProperties(
            device: root::HANDLE,
            propertyCount: *mut root::UINT32,
            pointerProperties: *mut root::POINTER_DEVICE_PROPERTY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterPointerDeviceNotifications(
            window: root::HWND,
            notifyRange: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerDeviceRects(
            device: root::HANDLE,
            pointerDeviceRect: *mut root::RECT,
            displayRect: *mut root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPointerDeviceCursors(
            device: root::HANDLE,
            cursorCount: *mut root::UINT32,
            deviceCursors: *mut root::POINTER_DEVICE_CURSOR_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetRawPointerDeviceData(
            pointerId: root::UINT32,
            historyCount: root::UINT32,
            propertiesCount: root::UINT32,
            pProperties: *mut root::POINTER_DEVICE_PROPERTY,
            pValues: *mut i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeWindowMessageFilter(message: root::UINT, dwFlag: u32) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCHANGEFILTERSTRUCT {
        pub cbSize: u32,
        pub ExtStatus: u32,
    }
    pub type CHANGEFILTERSTRUCT = root::tagCHANGEFILTERSTRUCT;
    pub type PCHANGEFILTERSTRUCT = *mut root::tagCHANGEFILTERSTRUCT;
    extern "C" {
        pub fn ChangeWindowMessageFilterEx(
            hwnd: root::HWND,
            message: root::UINT,
            action: u32,
            pChangeFilterStruct: root::PCHANGEFILTERSTRUCT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HGESTUREINFO__ {
        pub unused: i32,
    }
    pub type HGESTUREINFO = *mut root::HGESTUREINFO__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGESTUREINFO {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub dwID: u32,
        pub hwndTarget: root::HWND,
        pub ptsLocation: root::POINTS,
        pub dwInstanceID: u32,
        pub dwSequenceID: u32,
        pub ullArguments: root::ULONGLONG,
        pub cbExtraArgs: root::UINT,
    }
    pub type GESTUREINFO = root::tagGESTUREINFO;
    pub type PGESTUREINFO = *mut root::tagGESTUREINFO;
    pub type PCGESTUREINFO = *const root::GESTUREINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGESTURENOTIFYSTRUCT {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
        pub hwndTarget: root::HWND,
        pub ptsLocation: root::POINTS,
        pub dwInstanceID: u32,
    }
    pub type GESTURENOTIFYSTRUCT = root::tagGESTURENOTIFYSTRUCT;
    pub type PGESTURENOTIFYSTRUCT = *mut root::tagGESTURENOTIFYSTRUCT;
    extern "C" {
        pub fn GetGestureInfo(
            hGestureInfo: root::HGESTUREINFO,
            pGestureInfo: root::PGESTUREINFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetGestureExtraArgs(
            hGestureInfo: root::HGESTUREINFO,
            cbExtraArgs: root::UINT,
            pExtraArgs: root::PBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseGestureInfoHandle(hGestureInfo: root::HGESTUREINFO) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGESTURECONFIG {
        pub dwID: u32,
        pub dwWant: u32,
        pub dwBlock: u32,
    }
    pub type GESTURECONFIG = root::tagGESTURECONFIG;
    pub type PGESTURECONFIG = *mut root::tagGESTURECONFIG;
    extern "C" {
        pub fn SetGestureConfig(
            hwnd: root::HWND,
            dwReserved: u32,
            cIDs: root::UINT,
            pGestureConfig: root::PGESTURECONFIG,
            cbSize: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetGestureConfig(
            hwnd: root::HWND,
            dwReserved: u32,
            dwFlags: u32,
            pcIDs: root::PUINT,
            pGestureConfig: root::PGESTURECONFIG,
            cbSize: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ShutdownBlockReasonCreate(hWnd: root::HWND, pwszReason: root::LPCWSTR)
            -> root::BOOL;
    }
    extern "C" {
        pub fn ShutdownBlockReasonQuery(
            hWnd: root::HWND,
            pwszBuff: root::LPWSTR,
            pcchBuff: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ShutdownBlockReasonDestroy(hWnd: root::HWND) -> root::BOOL;
    }
    pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_UNAVAILABLE: root::tagINPUT_MESSAGE_DEVICE_TYPE = 0;
    pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_KEYBOARD: root::tagINPUT_MESSAGE_DEVICE_TYPE = 1;
    pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_MOUSE: root::tagINPUT_MESSAGE_DEVICE_TYPE = 2;
    pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_TOUCH: root::tagINPUT_MESSAGE_DEVICE_TYPE = 4;
    pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_PEN: root::tagINPUT_MESSAGE_DEVICE_TYPE = 8;
    pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_TOUCHPAD: root::tagINPUT_MESSAGE_DEVICE_TYPE = 16;
    pub type tagINPUT_MESSAGE_DEVICE_TYPE = i32;
    pub use self::super::root::tagINPUT_MESSAGE_DEVICE_TYPE as INPUT_MESSAGE_DEVICE_TYPE;
    pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_UNAVAILABLE: root::tagINPUT_MESSAGE_ORIGIN_ID = 0;
    pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_HARDWARE: root::tagINPUT_MESSAGE_ORIGIN_ID = 1;
    pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_INJECTED: root::tagINPUT_MESSAGE_ORIGIN_ID = 2;
    pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_SYSTEM: root::tagINPUT_MESSAGE_ORIGIN_ID = 4;
    pub type tagINPUT_MESSAGE_ORIGIN_ID = i32;
    pub use self::super::root::tagINPUT_MESSAGE_ORIGIN_ID as INPUT_MESSAGE_ORIGIN_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagINPUT_MESSAGE_SOURCE {
        pub deviceType: root::INPUT_MESSAGE_DEVICE_TYPE,
        pub originId: root::INPUT_MESSAGE_ORIGIN_ID,
    }
    pub type INPUT_MESSAGE_SOURCE = root::tagINPUT_MESSAGE_SOURCE;
    extern "C" {
        pub fn GetCurrentInputMessageSource(
            inputMessageSource: *mut root::INPUT_MESSAGE_SOURCE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCIMSSM(inputMessageSource: *mut root::INPUT_MESSAGE_SOURCE) -> root::BOOL;
    }
    pub const tagAR_STATE_AR_ENABLED: root::tagAR_STATE = 0;
    pub const tagAR_STATE_AR_DISABLED: root::tagAR_STATE = 1;
    pub const tagAR_STATE_AR_SUPPRESSED: root::tagAR_STATE = 2;
    pub const tagAR_STATE_AR_REMOTESESSION: root::tagAR_STATE = 4;
    pub const tagAR_STATE_AR_MULTIMON: root::tagAR_STATE = 8;
    pub const tagAR_STATE_AR_NOSENSOR: root::tagAR_STATE = 16;
    pub const tagAR_STATE_AR_NOT_SUPPORTED: root::tagAR_STATE = 32;
    pub const tagAR_STATE_AR_DOCKED: root::tagAR_STATE = 64;
    pub const tagAR_STATE_AR_LAPTOP: root::tagAR_STATE = 128;
    pub type tagAR_STATE = i32;
    pub use self::super::root::tagAR_STATE as AR_STATE;
    pub type PAR_STATE = *mut root::tagAR_STATE;
    pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_NONE: root::ORIENTATION_PREFERENCE = 0;
    pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_LANDSCAPE:
        root::ORIENTATION_PREFERENCE = 1;
    pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_PORTRAIT: root::ORIENTATION_PREFERENCE =
        2;
    pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED:
        root::ORIENTATION_PREFERENCE = 4;
    pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED:
        root::ORIENTATION_PREFERENCE = 8;
    pub type ORIENTATION_PREFERENCE = i32;
    extern "C" {
        pub fn GetAutoRotationState(pState: root::PAR_STATE) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDisplayAutoRotationPreferences(
            pOrientation: *mut root::ORIENTATION_PREFERENCE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDisplayAutoRotationPreferencesByProcessId(
            dwProcessId: u32,
            pOrientation: *mut root::ORIENTATION_PREFERENCE,
            fRotateScreen: *mut root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDisplayAutoRotationPreferences(
            orientation: root::ORIENTATION_PREFERENCE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsImmersiveProcess(hProcess: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessRestrictionExemption(fEnableExemption: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDateFormatA(
            Locale: root::LCID,
            dwFlags: u32,
            lpDate: *const root::SYSTEMTIME,
            lpFormat: *const i8,
            lpDateStr: *mut i8,
            cchDate: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetDateFormatW(
            Locale: root::LCID,
            dwFlags: u32,
            lpDate: *const root::SYSTEMTIME,
            lpFormat: root::LPCWSTR,
            lpDateStr: root::LPWSTR,
            cchDate: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetTimeFormatA(
            Locale: root::LCID,
            dwFlags: u32,
            lpTime: *const root::SYSTEMTIME,
            lpFormat: *const i8,
            lpTimeStr: *mut i8,
            cchTime: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetTimeFormatW(
            Locale: root::LCID,
            dwFlags: u32,
            lpTime: *const root::SYSTEMTIME,
            lpFormat: root::LPCWSTR,
            lpTimeStr: root::LPWSTR,
            cchTime: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetTimeFormatEx(
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lpTime: *const root::SYSTEMTIME,
            lpFormat: root::LPCWSTR,
            lpTimeStr: root::LPWSTR,
            cchTime: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetDateFormatEx(
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lpDate: *const root::SYSTEMTIME,
            lpFormat: root::LPCWSTR,
            lpDateStr: root::LPWSTR,
            cchDate: i32,
            lpCalendar: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn GetDurationFormatEx(
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lpDuration: *const root::SYSTEMTIME,
            ullDuration: root::ULONGLONG,
            lpFormat: root::LPCWSTR,
            lpDurationStr: root::LPWSTR,
            cchDuration: i32,
        ) -> i32;
    }
    pub type LGRPID = u32;
    pub type LCTYPE = u32;
    pub type CALTYPE = u32;
    pub type CALID = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _cpinfo {
        pub MaxCharSize: root::UINT,
        pub DefaultChar: [u8; 2usize],
        pub LeadByte: [u8; 12usize],
    }
    pub type CPINFO = root::_cpinfo;
    pub type LPCPINFO = *mut root::_cpinfo;
    pub type GEOTYPE = u32;
    pub type GEOCLASS = u32;
    pub type GEOID = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _cpinfoexA {
        pub MaxCharSize: root::UINT,
        pub DefaultChar: [u8; 2usize],
        pub LeadByte: [u8; 12usize],
        pub UnicodeDefaultChar: u16,
        pub CodePage: root::UINT,
        pub CodePageName: [i8; 260usize],
    }
    pub type CPINFOEXA = root::_cpinfoexA;
    pub type LPCPINFOEXA = *mut root::_cpinfoexA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _cpinfoexW {
        pub MaxCharSize: root::UINT,
        pub DefaultChar: [u8; 2usize],
        pub LeadByte: [u8; 12usize],
        pub UnicodeDefaultChar: u16,
        pub CodePage: root::UINT,
        pub CodePageName: [u16; 260usize],
    }
    pub type CPINFOEXW = root::_cpinfoexW;
    pub type LPCPINFOEXW = *mut root::_cpinfoexW;
    pub type CPINFOEX = root::CPINFOEXA;
    pub type LPCPINFOEX = root::LPCPINFOEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _numberfmtA {
        pub NumDigits: root::UINT,
        pub LeadingZero: root::UINT,
        pub Grouping: root::UINT,
        pub lpDecimalSep: *mut i8,
        pub lpThousandSep: *mut i8,
        pub NegativeOrder: root::UINT,
    }
    pub type NUMBERFMTA = root::_numberfmtA;
    pub type LPNUMBERFMTA = *mut root::_numberfmtA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _numberfmtW {
        pub NumDigits: root::UINT,
        pub LeadingZero: root::UINT,
        pub Grouping: root::UINT,
        pub lpDecimalSep: root::LPWSTR,
        pub lpThousandSep: root::LPWSTR,
        pub NegativeOrder: root::UINT,
    }
    pub type NUMBERFMTW = root::_numberfmtW;
    pub type LPNUMBERFMTW = *mut root::_numberfmtW;
    pub type NUMBERFMT = root::NUMBERFMTA;
    pub type LPNUMBERFMT = root::LPNUMBERFMTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _currencyfmtA {
        pub NumDigits: root::UINT,
        pub LeadingZero: root::UINT,
        pub Grouping: root::UINT,
        pub lpDecimalSep: *mut i8,
        pub lpThousandSep: *mut i8,
        pub NegativeOrder: root::UINT,
        pub PositiveOrder: root::UINT,
        pub lpCurrencySymbol: *mut i8,
    }
    pub type CURRENCYFMTA = root::_currencyfmtA;
    pub type LPCURRENCYFMTA = *mut root::_currencyfmtA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _currencyfmtW {
        pub NumDigits: root::UINT,
        pub LeadingZero: root::UINT,
        pub Grouping: root::UINT,
        pub lpDecimalSep: root::LPWSTR,
        pub lpThousandSep: root::LPWSTR,
        pub NegativeOrder: root::UINT,
        pub PositiveOrder: root::UINT,
        pub lpCurrencySymbol: root::LPWSTR,
    }
    pub type CURRENCYFMTW = root::_currencyfmtW;
    pub type LPCURRENCYFMTW = *mut root::_currencyfmtW;
    pub type CURRENCYFMT = root::CURRENCYFMTA;
    pub type LPCURRENCYFMT = root::LPCURRENCYFMTA;
    pub const SYSNLS_FUNCTION_COMPARE_STRING: root::SYSNLS_FUNCTION = 1;
    pub type SYSNLS_FUNCTION = i32;
    pub type NLS_FUNCTION = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _nlsversioninfo {
        pub dwNLSVersionInfoSize: u32,
        pub dwNLSVersion: u32,
        pub dwDefinedVersion: u32,
        pub dwEffectiveId: u32,
        pub guidCustomVersion: root::GUID,
    }
    pub type NLSVERSIONINFO = root::_nlsversioninfo;
    pub type LPNLSVERSIONINFO = *mut root::_nlsversioninfo;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _nlsversioninfoex {
        pub dwNLSVersionInfoSize: u32,
        pub dwNLSVersion: u32,
        pub dwDefinedVersion: u32,
        pub dwEffectiveId: u32,
        pub guidCustomVersion: root::GUID,
    }
    pub type NLSVERSIONINFOEX = root::_nlsversioninfoex;
    pub type LPNLSVERSIONINFOEX = *mut root::_nlsversioninfoex;
    pub const SYSGEOTYPE_GEO_NATION: root::SYSGEOTYPE = 1;
    pub const SYSGEOTYPE_GEO_LATITUDE: root::SYSGEOTYPE = 2;
    pub const SYSGEOTYPE_GEO_LONGITUDE: root::SYSGEOTYPE = 3;
    pub const SYSGEOTYPE_GEO_ISO2: root::SYSGEOTYPE = 4;
    pub const SYSGEOTYPE_GEO_ISO3: root::SYSGEOTYPE = 5;
    pub const SYSGEOTYPE_GEO_RFC1766: root::SYSGEOTYPE = 6;
    pub const SYSGEOTYPE_GEO_LCID: root::SYSGEOTYPE = 7;
    pub const SYSGEOTYPE_GEO_FRIENDLYNAME: root::SYSGEOTYPE = 8;
    pub const SYSGEOTYPE_GEO_OFFICIALNAME: root::SYSGEOTYPE = 9;
    pub const SYSGEOTYPE_GEO_TIMEZONES: root::SYSGEOTYPE = 10;
    pub const SYSGEOTYPE_GEO_OFFICIALLANGUAGES: root::SYSGEOTYPE = 11;
    pub const SYSGEOTYPE_GEO_ISO_UN_NUMBER: root::SYSGEOTYPE = 12;
    pub const SYSGEOTYPE_GEO_PARENT: root::SYSGEOTYPE = 13;
    pub const SYSGEOTYPE_GEO_DIALINGCODE: root::SYSGEOTYPE = 14;
    pub const SYSGEOTYPE_GEO_CURRENCYCODE: root::SYSGEOTYPE = 15;
    pub const SYSGEOTYPE_GEO_CURRENCYSYMBOL: root::SYSGEOTYPE = 16;
    pub const SYSGEOTYPE_GEO_NAME: root::SYSGEOTYPE = 17;
    pub const SYSGEOTYPE_GEO_ID: root::SYSGEOTYPE = 18;
    pub type SYSGEOTYPE = i32;
    pub const SYSGEOCLASS_GEOCLASS_NATION: root::SYSGEOCLASS = 16;
    pub const SYSGEOCLASS_GEOCLASS_REGION: root::SYSGEOCLASS = 14;
    pub const SYSGEOCLASS_GEOCLASS_ALL: root::SYSGEOCLASS = 0;
    pub type SYSGEOCLASS = i32;
    pub type LOCALE_ENUMPROCA =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut i8) -> root::BOOL>;
    pub type LOCALE_ENUMPROCW =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::LPWSTR) -> root::BOOL>;
    pub const _NORM_FORM_NormalizationOther: root::_NORM_FORM = 0;
    pub const _NORM_FORM_NormalizationC: root::_NORM_FORM = 1;
    pub const _NORM_FORM_NormalizationD: root::_NORM_FORM = 2;
    pub const _NORM_FORM_NormalizationKC: root::_NORM_FORM = 5;
    pub const _NORM_FORM_NormalizationKD: root::_NORM_FORM = 6;
    pub type _NORM_FORM = i32;
    pub use self::super::root::_NORM_FORM as NORM_FORM;
    pub type LANGUAGEGROUP_ENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LGRPID,
            arg2: *mut i8,
            arg3: *mut i8,
            arg4: u32,
            arg5: i64,
        ) -> root::BOOL,
    >;
    pub type LANGGROUPLOCALE_ENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LGRPID,
            arg2: root::LCID,
            arg3: *mut i8,
            arg4: i64,
        ) -> root::BOOL,
    >;
    pub type UILANGUAGE_ENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut i8, arg2: i64) -> root::BOOL,
    >;
    pub type CODEPAGE_ENUMPROCA =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut i8) -> root::BOOL>;
    pub type DATEFMT_ENUMPROCA =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut i8) -> root::BOOL>;
    pub type DATEFMT_ENUMPROCEXA = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut i8, arg2: root::CALID) -> root::BOOL,
    >;
    pub type TIMEFMT_ENUMPROCA =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut i8) -> root::BOOL>;
    pub type CALINFO_ENUMPROCA =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut i8) -> root::BOOL>;
    pub type CALINFO_ENUMPROCEXA = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut i8, arg2: root::CALID) -> root::BOOL,
    >;
    pub type LANGUAGEGROUP_ENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LGRPID,
            arg2: root::LPWSTR,
            arg3: root::LPWSTR,
            arg4: u32,
            arg5: i64,
        ) -> root::BOOL,
    >;
    pub type LANGGROUPLOCALE_ENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LGRPID,
            arg2: root::LCID,
            arg3: root::LPWSTR,
            arg4: i64,
        ) -> root::BOOL,
    >;
    pub type UILANGUAGE_ENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPWSTR, arg2: i64) -> root::BOOL,
    >;
    pub type CODEPAGE_ENUMPROCW =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::LPWSTR) -> root::BOOL>;
    pub type DATEFMT_ENUMPROCW =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::LPWSTR) -> root::BOOL>;
    pub type DATEFMT_ENUMPROCEXW = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPWSTR, arg2: root::CALID) -> root::BOOL,
    >;
    pub type TIMEFMT_ENUMPROCW =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::LPWSTR) -> root::BOOL>;
    pub type CALINFO_ENUMPROCW =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::LPWSTR) -> root::BOOL>;
    pub type CALINFO_ENUMPROCEXW = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPWSTR, arg2: root::CALID) -> root::BOOL,
    >;
    pub type GEO_ENUMPROC =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::GEOID) -> root::BOOL>;
    pub type GEO_ENUMNAMEPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut u16, arg2: root::LPARAM) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILEMUIINFO {
        pub dwSize: u32,
        pub dwVersion: u32,
        pub dwFileType: u32,
        pub pChecksum: [u8; 16usize],
        pub pServiceChecksum: [u8; 16usize],
        pub dwLanguageNameOffset: u32,
        pub dwTypeIDMainSize: u32,
        pub dwTypeIDMainOffset: u32,
        pub dwTypeNameMainOffset: u32,
        pub dwTypeIDMUISize: u32,
        pub dwTypeIDMUIOffset: u32,
        pub dwTypeNameMUIOffset: u32,
        pub abBuffer: [u8; 8usize],
    }
    pub type FILEMUIINFO = root::_FILEMUIINFO;
    pub type PFILEMUIINFO = *mut root::_FILEMUIINFO;
    extern "C" {
        pub fn CompareStringEx(
            lpLocaleName: root::LPCWSTR,
            dwCmpFlags: u32,
            lpString1: root::LPCWCH,
            cchCount1: i32,
            lpString2: root::LPCWCH,
            cchCount2: i32,
            lpVersionInformation: root::LPNLSVERSIONINFO,
            lpReserved: root::LPVOID,
            lParam: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn CompareStringOrdinal(
            lpString1: root::LPCWCH,
            cchCount1: i32,
            lpString2: root::LPCWCH,
            cchCount2: i32,
            bIgnoreCase: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn CompareStringW(
            Locale: root::LCID,
            dwCmpFlags: u32,
            lpString1: root::PCNZWCH,
            cchCount1: i32,
            lpString2: root::PCNZWCH,
            cchCount2: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn FoldStringW(
            dwMapFlags: u32,
            lpSrcStr: root::LPCWCH,
            cchSrc: i32,
            lpDestStr: root::LPWSTR,
            cchDest: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetStringTypeExW(
            Locale: root::LCID,
            dwInfoType: u32,
            lpSrcStr: root::LPCWCH,
            cchSrc: i32,
            lpCharType: root::LPWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetStringTypeW(
            dwInfoType: u32,
            lpSrcStr: root::LPCWCH,
            cchSrc: i32,
            lpCharType: root::LPWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn MultiByteToWideChar(
            CodePage: root::UINT,
            dwFlags: u32,
            lpMultiByteStr: *const i8,
            cbMultiByte: i32,
            lpWideCharStr: root::LPWSTR,
            cchWideChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn WideCharToMultiByte(
            CodePage: root::UINT,
            dwFlags: u32,
            lpWideCharStr: root::LPCWCH,
            cchWideChar: i32,
            lpMultiByteStr: *mut i8,
            cbMultiByte: i32,
            lpDefaultChar: *const i8,
            lpUsedDefaultChar: root::LPBOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn IsValidCodePage(CodePage: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn GetACP() -> root::UINT;
    }
    extern "C" {
        pub fn GetOEMCP() -> root::UINT;
    }
    extern "C" {
        pub fn GetCPInfo(CodePage: root::UINT, lpCPInfo: root::LPCPINFO) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCPInfoExA(
            CodePage: root::UINT,
            dwFlags: u32,
            lpCPInfoEx: root::LPCPINFOEXA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCPInfoExW(
            CodePage: root::UINT,
            dwFlags: u32,
            lpCPInfoEx: root::LPCPINFOEXW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CompareStringA(
            Locale: root::LCID,
            dwCmpFlags: u32,
            lpString1: *const i8,
            cchCount1: i32,
            lpString2: *const i8,
            cchCount2: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn FindNLSString(
            Locale: root::LCID,
            dwFindNLSStringFlags: u32,
            lpStringSource: root::LPCWSTR,
            cchSource: i32,
            lpStringValue: root::LPCWSTR,
            cchValue: i32,
            pcchFound: root::LPINT,
        ) -> i32;
    }
    extern "C" {
        pub fn LCMapStringW(
            Locale: root::LCID,
            dwMapFlags: u32,
            lpSrcStr: root::LPCWSTR,
            cchSrc: i32,
            lpDestStr: root::LPWSTR,
            cchDest: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn LCMapStringA(
            Locale: root::LCID,
            dwMapFlags: u32,
            lpSrcStr: *const i8,
            cchSrc: i32,
            lpDestStr: *mut i8,
            cchDest: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetLocaleInfoW(
            Locale: root::LCID,
            LCType: root::LCTYPE,
            lpLCData: root::LPWSTR,
            cchData: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetLocaleInfoA(
            Locale: root::LCID,
            LCType: root::LCTYPE,
            lpLCData: *mut i8,
            cchData: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetLocaleInfoA(
            Locale: root::LCID,
            LCType: root::LCTYPE,
            lpLCData: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetLocaleInfoW(
            Locale: root::LCID,
            LCType: root::LCTYPE,
            lpLCData: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetCalendarInfoA(
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
            lpCalData: *mut i8,
            cchData: i32,
            lpValue: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn GetCalendarInfoW(
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
            lpCalData: root::LPWSTR,
            cchData: i32,
            lpValue: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SetCalendarInfoA(
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
            lpCalData: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCalendarInfoW(
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
            lpCalData: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LoadStringByReference(
            Flags: u32,
            Language: *const u16,
            SourceString: *const u16,
            Buffer: *mut u16,
            cchBuffer: root::ULONG,
            Directory: *const u16,
            pcchBufferOut: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsDBCSLeadByte(TestChar: u8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsDBCSLeadByteEx(CodePage: root::UINT, TestChar: u8) -> root::BOOL;
    }
    extern "C" {
        pub fn LocaleNameToLCID(lpName: root::LPCWSTR, dwFlags: u32) -> root::LCID;
    }
    extern "C" {
        pub fn LCIDToLocaleName(
            Locale: root::LCID,
            lpName: root::LPWSTR,
            cchName: i32,
            dwFlags: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetDurationFormat(
            Locale: root::LCID,
            dwFlags: u32,
            lpDuration: *const root::SYSTEMTIME,
            ullDuration: root::ULONGLONG,
            lpFormat: root::LPCWSTR,
            lpDurationStr: root::LPWSTR,
            cchDuration: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetNumberFormatA(
            Locale: root::LCID,
            dwFlags: u32,
            lpValue: *const i8,
            lpFormat: *const root::NUMBERFMTA,
            lpNumberStr: *mut i8,
            cchNumber: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetNumberFormatW(
            Locale: root::LCID,
            dwFlags: u32,
            lpValue: root::LPCWSTR,
            lpFormat: *const root::NUMBERFMTW,
            lpNumberStr: root::LPWSTR,
            cchNumber: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetCurrencyFormatA(
            Locale: root::LCID,
            dwFlags: u32,
            lpValue: *const i8,
            lpFormat: *const root::CURRENCYFMTA,
            lpCurrencyStr: *mut i8,
            cchCurrency: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetCurrencyFormatW(
            Locale: root::LCID,
            dwFlags: u32,
            lpValue: root::LPCWSTR,
            lpFormat: *const root::CURRENCYFMTW,
            lpCurrencyStr: root::LPWSTR,
            cchCurrency: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumCalendarInfoA(
            lpCalInfoEnumProc: root::CALINFO_ENUMPROCA,
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumCalendarInfoW(
            lpCalInfoEnumProc: root::CALINFO_ENUMPROCW,
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumCalendarInfoExA(
            lpCalInfoEnumProcEx: root::CALINFO_ENUMPROCEXA,
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumCalendarInfoExW(
            lpCalInfoEnumProcEx: root::CALINFO_ENUMPROCEXW,
            Locale: root::LCID,
            Calendar: root::CALID,
            CalType: root::CALTYPE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumTimeFormatsA(
            lpTimeFmtEnumProc: root::TIMEFMT_ENUMPROCA,
            Locale: root::LCID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumTimeFormatsW(
            lpTimeFmtEnumProc: root::TIMEFMT_ENUMPROCW,
            Locale: root::LCID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDateFormatsA(
            lpDateFmtEnumProc: root::DATEFMT_ENUMPROCA,
            Locale: root::LCID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDateFormatsW(
            lpDateFmtEnumProc: root::DATEFMT_ENUMPROCW,
            Locale: root::LCID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDateFormatsExA(
            lpDateFmtEnumProcEx: root::DATEFMT_ENUMPROCEXA,
            Locale: root::LCID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDateFormatsExW(
            lpDateFmtEnumProcEx: root::DATEFMT_ENUMPROCEXW,
            Locale: root::LCID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidLanguageGroup(
            LanguageGroup: root::LGRPID,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNLSVersion(
            Function: root::NLS_FUNCTION,
            Locale: root::LCID,
            lpVersionInformation: root::LPNLSVERSIONINFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidLocale(Locale: root::LCID, dwFlags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetGeoInfoA(
            Location: root::GEOID,
            GeoType: root::GEOTYPE,
            lpGeoData: *mut i8,
            cchData: i32,
            LangId: root::LANGID,
        ) -> i32;
    }
    extern "C" {
        pub fn GetGeoInfoW(
            Location: root::GEOID,
            GeoType: root::GEOTYPE,
            lpGeoData: root::LPWSTR,
            cchData: i32,
            LangId: root::LANGID,
        ) -> i32;
    }
    extern "C" {
        pub fn GetGeoInfoEx(
            location: *mut u16,
            geoType: root::GEOTYPE,
            geoData: *mut u16,
            geoDataCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumSystemGeoID(
            GeoClass: root::GEOCLASS,
            ParentGeoId: root::GEOID,
            lpGeoEnumProc: root::GEO_ENUMPROC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemGeoNames(
            geoClass: root::GEOCLASS,
            geoEnumProc: root::GEO_ENUMNAMEPROC,
            data: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserGeoID(GeoClass: root::GEOCLASS) -> root::GEOID;
    }
    extern "C" {
        pub fn GetUserDefaultGeoName(
            geoName: root::LPWSTR,
            geoNameCount: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SetUserGeoID(GeoId: root::GEOID) -> root::BOOL;
    }
    extern "C" {
        pub fn SetUserGeoName(geoName: *mut u16) -> root::BOOL;
    }
    extern "C" {
        pub fn ConvertDefaultLocale(Locale: root::LCID) -> root::LCID;
    }
    extern "C" {
        pub fn GetSystemDefaultUILanguage() -> root::LANGID;
    }
    extern "C" {
        pub fn GetThreadLocale() -> root::LCID;
    }
    extern "C" {
        pub fn SetThreadLocale(Locale: root::LCID) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserDefaultUILanguage() -> root::LANGID;
    }
    extern "C" {
        pub fn GetUserDefaultLangID() -> root::LANGID;
    }
    extern "C" {
        pub fn GetSystemDefaultLangID() -> root::LANGID;
    }
    extern "C" {
        pub fn GetSystemDefaultLCID() -> root::LCID;
    }
    extern "C" {
        pub fn GetUserDefaultLCID() -> root::LCID;
    }
    extern "C" {
        pub fn SetThreadUILanguage(LangId: root::LANGID) -> root::LANGID;
    }
    extern "C" {
        pub fn GetThreadUILanguage() -> root::LANGID;
    }
    extern "C" {
        pub fn GetProcessPreferredUILanguages(
            dwFlags: u32,
            pulNumLanguages: root::PULONG,
            pwszLanguagesBuffer: root::PZZWSTR,
            pcchLanguagesBuffer: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessPreferredUILanguages(
            dwFlags: u32,
            pwszLanguagesBuffer: root::PCZZWSTR,
            pulNumLanguages: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUserPreferredUILanguages(
            dwFlags: u32,
            pulNumLanguages: root::PULONG,
            pwszLanguagesBuffer: root::PZZWSTR,
            pcchLanguagesBuffer: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSystemPreferredUILanguages(
            dwFlags: u32,
            pulNumLanguages: root::PULONG,
            pwszLanguagesBuffer: root::PZZWSTR,
            pcchLanguagesBuffer: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadPreferredUILanguages(
            dwFlags: u32,
            pulNumLanguages: root::PULONG,
            pwszLanguagesBuffer: root::PZZWSTR,
            pcchLanguagesBuffer: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadPreferredUILanguages(
            dwFlags: u32,
            pwszLanguagesBuffer: root::PCZZWSTR,
            pulNumLanguages: root::PULONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileMUIInfo(
            dwFlags: u32,
            pcwszFilePath: *const u16,
            pFileMUIInfo: root::PFILEMUIINFO,
            pcbFileMUIInfo: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileMUIPath(
            dwFlags: u32,
            pcwszFilePath: *const u16,
            pwszLanguage: *mut u16,
            pcchLanguage: root::PULONG,
            pwszFileMUIPath: *mut u16,
            pcchFileMUIPath: root::PULONG,
            pululEnumerator: root::PULONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetUILanguageInfo(
            dwFlags: u32,
            pwmszLanguage: root::PCZZWSTR,
            pwszFallbackLanguages: root::PZZWSTR,
            pcchFallbackLanguages: root::PDWORD,
            pAttributes: root::PDWORD,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HSAVEDUILANGUAGES__ {
        pub unused: i32,
    }
    pub type HSAVEDUILANGUAGES = *mut root::HSAVEDUILANGUAGES__;
    extern "C" {
        pub fn SetThreadPreferredUILanguages2(
            flags: root::ULONG,
            languages: root::PCZZWSTR,
            numLanguagesSet: root::PULONG,
            snapshot: *mut root::HSAVEDUILANGUAGES,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RestoreThreadPreferredUILanguages(snapshot: root::HSAVEDUILANGUAGES);
    }
    extern "C" {
        pub fn NotifyUILanguageChange(
            dwFlags: u32,
            pcwstrNewLanguage: *const u16,
            pcwstrPreviousLanguage: *const u16,
            dwReserved: u32,
            pdwStatusRtrn: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetStringTypeExA(
            Locale: root::LCID,
            dwInfoType: u32,
            lpSrcStr: *const i8,
            cchSrc: i32,
            lpCharType: root::LPWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetStringTypeA(
            Locale: root::LCID,
            dwInfoType: u32,
            lpSrcStr: *const i8,
            cchSrc: i32,
            lpCharType: root::LPWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FoldStringA(
            dwMapFlags: u32,
            lpSrcStr: *const i8,
            cchSrc: i32,
            lpDestStr: *mut i8,
            cchDest: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn EnumSystemLocalesA(
            lpLocaleEnumProc: root::LOCALE_ENUMPROCA,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemLocalesW(
            lpLocaleEnumProc: root::LOCALE_ENUMPROCW,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemLanguageGroupsA(
            lpLanguageGroupEnumProc: root::LANGUAGEGROUP_ENUMPROCA,
            dwFlags: u32,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemLanguageGroupsW(
            lpLanguageGroupEnumProc: root::LANGUAGEGROUP_ENUMPROCW,
            dwFlags: u32,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumLanguageGroupLocalesA(
            lpLangGroupLocaleEnumProc: root::LANGGROUPLOCALE_ENUMPROCA,
            LanguageGroup: root::LGRPID,
            dwFlags: u32,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumLanguageGroupLocalesW(
            lpLangGroupLocaleEnumProc: root::LANGGROUPLOCALE_ENUMPROCW,
            LanguageGroup: root::LGRPID,
            dwFlags: u32,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumUILanguagesA(
            lpUILanguageEnumProc: root::UILANGUAGE_ENUMPROCA,
            dwFlags: u32,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumUILanguagesW(
            lpUILanguageEnumProc: root::UILANGUAGE_ENUMPROCW,
            dwFlags: u32,
            lParam: i64,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemCodePagesA(
            lpCodePageEnumProc: root::CODEPAGE_ENUMPROCA,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumSystemCodePagesW(
            lpCodePageEnumProc: root::CODEPAGE_ENUMPROCW,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IdnToAscii(
            dwFlags: u32,
            lpUnicodeCharStr: root::LPCWSTR,
            cchUnicodeChar: i32,
            lpASCIICharStr: root::LPWSTR,
            cchASCIIChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn IdnToUnicode(
            dwFlags: u32,
            lpASCIICharStr: root::LPCWSTR,
            cchASCIIChar: i32,
            lpUnicodeCharStr: root::LPWSTR,
            cchUnicodeChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn IdnToNameprepUnicode(
            dwFlags: u32,
            lpUnicodeCharStr: root::LPCWSTR,
            cchUnicodeChar: i32,
            lpNameprepCharStr: root::LPWSTR,
            cchNameprepChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn NormalizeString(
            NormForm: root::NORM_FORM,
            lpSrcString: root::LPCWSTR,
            cwSrcLength: i32,
            lpDstString: root::LPWSTR,
            cwDstLength: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn IsNormalizedString(
            NormForm: root::NORM_FORM,
            lpString: root::LPCWSTR,
            cwLength: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VerifyScripts(
            dwFlags: u32,
            lpLocaleScripts: root::LPCWSTR,
            cchLocaleScripts: i32,
            lpTestScripts: root::LPCWSTR,
            cchTestScripts: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetStringScripts(
            dwFlags: u32,
            lpString: root::LPCWSTR,
            cchString: i32,
            lpScripts: root::LPWSTR,
            cchScripts: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetLocaleInfoEx(
            lpLocaleName: root::LPCWSTR,
            LCType: root::LCTYPE,
            lpLCData: root::LPWSTR,
            cchData: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetCalendarInfoEx(
            lpLocaleName: root::LPCWSTR,
            Calendar: root::CALID,
            lpReserved: root::LPCWSTR,
            CalType: root::CALTYPE,
            lpCalData: root::LPWSTR,
            cchData: i32,
            lpValue: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn GetNumberFormatEx(
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lpValue: root::LPCWSTR,
            lpFormat: *const root::NUMBERFMTW,
            lpNumberStr: root::LPWSTR,
            cchNumber: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetCurrencyFormatEx(
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lpValue: root::LPCWSTR,
            lpFormat: *const root::CURRENCYFMTW,
            lpCurrencyStr: root::LPWSTR,
            cchCurrency: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetUserDefaultLocaleName(
            lpLocaleName: root::LPWSTR,
            cchLocaleName: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetSystemDefaultLocaleName(
            lpLocaleName: root::LPWSTR,
            cchLocaleName: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn IsNLSDefinedString(
            Function: root::NLS_FUNCTION,
            dwFlags: u32,
            lpVersionInformation: root::LPNLSVERSIONINFO,
            lpString: root::LPCWSTR,
            cchStr: root::INT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNLSVersionEx(
            function: root::NLS_FUNCTION,
            lpLocaleName: root::LPCWSTR,
            lpVersionInformation: root::LPNLSVERSIONINFOEX,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidNLSVersion(
            function: root::NLS_FUNCTION,
            lpLocaleName: root::LPCWSTR,
            lpVersionInformation: root::LPNLSVERSIONINFOEX,
        ) -> u32;
    }
    extern "C" {
        pub fn FindNLSStringEx(
            lpLocaleName: root::LPCWSTR,
            dwFindNLSStringFlags: u32,
            lpStringSource: root::LPCWSTR,
            cchSource: i32,
            lpStringValue: root::LPCWSTR,
            cchValue: i32,
            pcchFound: root::LPINT,
            lpVersionInformation: root::LPNLSVERSIONINFO,
            lpReserved: root::LPVOID,
            sortHandle: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn LCMapStringEx(
            lpLocaleName: root::LPCWSTR,
            dwMapFlags: u32,
            lpSrcStr: root::LPCWSTR,
            cchSrc: i32,
            lpDestStr: root::LPWSTR,
            cchDest: i32,
            lpVersionInformation: root::LPNLSVERSIONINFO,
            lpReserved: root::LPVOID,
            sortHandle: root::LPARAM,
        ) -> i32;
    }
    extern "C" {
        pub fn IsValidLocaleName(lpLocaleName: root::LPCWSTR) -> root::BOOL;
    }
    pub type CALINFO_ENUMPROCEXEX = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPWSTR,
            arg2: root::CALID,
            arg3: root::LPWSTR,
            arg4: root::LPARAM,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn EnumCalendarInfoExEx(
            pCalInfoEnumProcExEx: root::CALINFO_ENUMPROCEXEX,
            lpLocaleName: root::LPCWSTR,
            Calendar: root::CALID,
            lpReserved: root::LPCWSTR,
            CalType: root::CALTYPE,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    pub type DATEFMT_ENUMPROCEXEX = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPWSTR,
            arg2: root::CALID,
            arg3: root::LPARAM,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn EnumDateFormatsExEx(
            lpDateFmtEnumProcExEx: root::DATEFMT_ENUMPROCEXEX,
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    pub type TIMEFMT_ENUMPROCEX = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::LPWSTR, arg2: root::LPARAM) -> root::BOOL,
    >;
    extern "C" {
        pub fn EnumTimeFormatsEx(
            lpTimeFmtEnumProcEx: root::TIMEFMT_ENUMPROCEX,
            lpLocaleName: root::LPCWSTR,
            dwFlags: u32,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    pub type LOCALE_ENUMPROCEX = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPWSTR,
            arg2: u32,
            arg3: root::LPARAM,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn EnumSystemLocalesEx(
            lpLocaleEnumProcEx: root::LOCALE_ENUMPROCEX,
            dwFlags: u32,
            lParam: root::LPARAM,
            lpReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ResolveLocaleName(
            lpNameToResolve: root::LPCWSTR,
            lpLocaleName: root::LPWSTR,
            cchLocaleName: i32,
        ) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COORD {
        pub X: i16,
        pub Y: i16,
    }
    pub type COORD = root::_COORD;
    pub type PCOORD = *mut root::_COORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SMALL_RECT {
        pub Left: i16,
        pub Top: i16,
        pub Right: i16,
        pub Bottom: i16,
    }
    pub type SMALL_RECT = root::_SMALL_RECT;
    pub type PSMALL_RECT = *mut root::_SMALL_RECT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _KEY_EVENT_RECORD {
        pub bKeyDown: root::BOOL,
        pub wRepeatCount: u16,
        pub wVirtualKeyCode: u16,
        pub wVirtualScanCode: u16,
        pub uChar: root::_KEY_EVENT_RECORD__bindgen_ty_1,
        pub dwControlKeyState: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _KEY_EVENT_RECORD__bindgen_ty_1 {
        pub UnicodeChar: u16,
        pub AsciiChar: i8,
    }
    pub type KEY_EVENT_RECORD = root::_KEY_EVENT_RECORD;
    pub type PKEY_EVENT_RECORD = *mut root::_KEY_EVENT_RECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MOUSE_EVENT_RECORD {
        pub dwMousePosition: root::COORD,
        pub dwButtonState: u32,
        pub dwControlKeyState: u32,
        pub dwEventFlags: u32,
    }
    pub type MOUSE_EVENT_RECORD = root::_MOUSE_EVENT_RECORD;
    pub type PMOUSE_EVENT_RECORD = *mut root::_MOUSE_EVENT_RECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WINDOW_BUFFER_SIZE_RECORD {
        pub dwSize: root::COORD,
    }
    pub type WINDOW_BUFFER_SIZE_RECORD = root::_WINDOW_BUFFER_SIZE_RECORD;
    pub type PWINDOW_BUFFER_SIZE_RECORD = *mut root::_WINDOW_BUFFER_SIZE_RECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MENU_EVENT_RECORD {
        pub dwCommandId: root::UINT,
    }
    pub type MENU_EVENT_RECORD = root::_MENU_EVENT_RECORD;
    pub type PMENU_EVENT_RECORD = *mut root::_MENU_EVENT_RECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FOCUS_EVENT_RECORD {
        pub bSetFocus: root::BOOL,
    }
    pub type FOCUS_EVENT_RECORD = root::_FOCUS_EVENT_RECORD;
    pub type PFOCUS_EVENT_RECORD = *mut root::_FOCUS_EVENT_RECORD;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _INPUT_RECORD {
        pub EventType: u16,
        pub Event: root::_INPUT_RECORD__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _INPUT_RECORD__bindgen_ty_1 {
        pub KeyEvent: root::KEY_EVENT_RECORD,
        pub MouseEvent: root::MOUSE_EVENT_RECORD,
        pub WindowBufferSizeEvent: root::WINDOW_BUFFER_SIZE_RECORD,
        pub MenuEvent: root::MENU_EVENT_RECORD,
        pub FocusEvent: root::FOCUS_EVENT_RECORD,
    }
    pub type INPUT_RECORD = root::_INPUT_RECORD;
    pub type PINPUT_RECORD = *mut root::_INPUT_RECORD;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CHAR_INFO {
        pub Char: root::_CHAR_INFO__bindgen_ty_1,
        pub Attributes: u16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CHAR_INFO__bindgen_ty_1 {
        pub UnicodeChar: u16,
        pub AsciiChar: i8,
    }
    pub type CHAR_INFO = root::_CHAR_INFO;
    pub type PCHAR_INFO = *mut root::_CHAR_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_FONT_INFO {
        pub nFont: u32,
        pub dwFontSize: root::COORD,
    }
    pub type CONSOLE_FONT_INFO = root::_CONSOLE_FONT_INFO;
    pub type PCONSOLE_FONT_INFO = *mut root::_CONSOLE_FONT_INFO;
    pub type HPCON = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn AllocConsole() -> root::BOOL;
    }
    extern "C" {
        pub fn FreeConsole() -> root::BOOL;
    }
    extern "C" {
        pub fn AttachConsole(dwProcessId: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleCP() -> root::UINT;
    }
    extern "C" {
        pub fn GetConsoleOutputCP() -> root::UINT;
    }
    extern "C" {
        pub fn GetConsoleMode(hConsoleHandle: root::HANDLE, lpMode: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleMode(hConsoleHandle: root::HANDLE, dwMode: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumberOfConsoleInputEvents(
            hConsoleInput: root::HANDLE,
            lpNumberOfEvents: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleInputA(
            hConsoleInput: root::HANDLE,
            lpBuffer: root::PINPUT_RECORD,
            nLength: u32,
            lpNumberOfEventsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleInputW(
            hConsoleInput: root::HANDLE,
            lpBuffer: root::PINPUT_RECORD,
            nLength: u32,
            lpNumberOfEventsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PeekConsoleInputA(
            hConsoleInput: root::HANDLE,
            lpBuffer: root::PINPUT_RECORD,
            nLength: u32,
            lpNumberOfEventsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PeekConsoleInputW(
            hConsoleInput: root::HANDLE,
            lpBuffer: root::PINPUT_RECORD,
            nLength: u32,
            lpNumberOfEventsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_READCONSOLE_CONTROL {
        pub nLength: root::ULONG,
        pub nInitialChars: root::ULONG,
        pub dwCtrlWakeupMask: root::ULONG,
        pub dwControlKeyState: root::ULONG,
    }
    pub type CONSOLE_READCONSOLE_CONTROL = root::_CONSOLE_READCONSOLE_CONTROL;
    pub type PCONSOLE_READCONSOLE_CONTROL = *mut root::_CONSOLE_READCONSOLE_CONTROL;
    extern "C" {
        pub fn ReadConsoleA(
            hConsoleInput: root::HANDLE,
            lpBuffer: root::LPVOID,
            nNumberOfCharsToRead: u32,
            lpNumberOfCharsRead: root::LPDWORD,
            pInputControl: root::PCONSOLE_READCONSOLE_CONTROL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleW(
            hConsoleInput: root::HANDLE,
            lpBuffer: root::LPVOID,
            nNumberOfCharsToRead: u32,
            lpNumberOfCharsRead: root::LPDWORD,
            pInputControl: root::PCONSOLE_READCONSOLE_CONTROL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleA(
            hConsoleOutput: root::HANDLE,
            lpBuffer: *const ::std::os::raw::c_void,
            nNumberOfCharsToWrite: u32,
            lpNumberOfCharsWritten: root::LPDWORD,
            lpReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleW(
            hConsoleOutput: root::HANDLE,
            lpBuffer: *const ::std::os::raw::c_void,
            nNumberOfCharsToWrite: u32,
            lpNumberOfCharsWritten: root::LPDWORD,
            lpReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    pub type PHANDLER_ROUTINE =
        ::std::option::Option<unsafe extern "C" fn(CtrlType: u32) -> root::BOOL>;
    extern "C" {
        pub fn SetConsoleCtrlHandler(
            HandlerRoutine: root::PHANDLER_ROUTINE,
            Add: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreatePseudoConsole(
            size: root::COORD,
            hInput: root::HANDLE,
            hOutput: root::HANDLE,
            dwFlags: u32,
            phPC: *mut root::HPCON,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ResizePseudoConsole(hPC: root::HPCON, size: root::COORD) -> root::HRESULT;
    }
    extern "C" {
        pub fn ClosePseudoConsole(hPC: root::HPCON);
    }
    extern "C" {
        pub fn FillConsoleOutputCharacterA(
            hConsoleOutput: root::HANDLE,
            cCharacter: i8,
            nLength: u32,
            dwWriteCoord: root::COORD,
            lpNumberOfCharsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FillConsoleOutputCharacterW(
            hConsoleOutput: root::HANDLE,
            cCharacter: u16,
            nLength: u32,
            dwWriteCoord: root::COORD,
            lpNumberOfCharsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FillConsoleOutputAttribute(
            hConsoleOutput: root::HANDLE,
            wAttribute: u16,
            nLength: u32,
            dwWriteCoord: root::COORD,
            lpNumberOfAttrsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GenerateConsoleCtrlEvent(
            dwCtrlEvent: u32,
            dwProcessGroupId: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateConsoleScreenBuffer(
            dwDesiredAccess: u32,
            dwShareMode: u32,
            lpSecurityAttributes: *const root::SECURITY_ATTRIBUTES,
            dwFlags: u32,
            lpScreenBufferData: root::LPVOID,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn SetConsoleActiveScreenBuffer(hConsoleOutput: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn FlushConsoleInputBuffer(hConsoleInput: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleCP(wCodePageID: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleOutputCP(wCodePageID: root::UINT) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_CURSOR_INFO {
        pub dwSize: u32,
        pub bVisible: root::BOOL,
    }
    pub type CONSOLE_CURSOR_INFO = root::_CONSOLE_CURSOR_INFO;
    pub type PCONSOLE_CURSOR_INFO = *mut root::_CONSOLE_CURSOR_INFO;
    extern "C" {
        pub fn GetConsoleCursorInfo(
            hConsoleOutput: root::HANDLE,
            lpConsoleCursorInfo: root::PCONSOLE_CURSOR_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleCursorInfo(
            hConsoleOutput: root::HANDLE,
            lpConsoleCursorInfo: *const root::CONSOLE_CURSOR_INFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_SCREEN_BUFFER_INFO {
        pub dwSize: root::COORD,
        pub dwCursorPosition: root::COORD,
        pub wAttributes: u16,
        pub srWindow: root::SMALL_RECT,
        pub dwMaximumWindowSize: root::COORD,
    }
    pub type CONSOLE_SCREEN_BUFFER_INFO = root::_CONSOLE_SCREEN_BUFFER_INFO;
    pub type PCONSOLE_SCREEN_BUFFER_INFO = *mut root::_CONSOLE_SCREEN_BUFFER_INFO;
    extern "C" {
        pub fn GetConsoleScreenBufferInfo(
            hConsoleOutput: root::HANDLE,
            lpConsoleScreenBufferInfo: root::PCONSOLE_SCREEN_BUFFER_INFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_SCREEN_BUFFER_INFOEX {
        pub cbSize: root::ULONG,
        pub dwSize: root::COORD,
        pub dwCursorPosition: root::COORD,
        pub wAttributes: u16,
        pub srWindow: root::SMALL_RECT,
        pub dwMaximumWindowSize: root::COORD,
        pub wPopupAttributes: u16,
        pub bFullscreenSupported: root::BOOL,
        pub ColorTable: [root::COLORREF; 16usize],
    }
    pub type CONSOLE_SCREEN_BUFFER_INFOEX = root::_CONSOLE_SCREEN_BUFFER_INFOEX;
    pub type PCONSOLE_SCREEN_BUFFER_INFOEX = *mut root::_CONSOLE_SCREEN_BUFFER_INFOEX;
    extern "C" {
        pub fn GetConsoleScreenBufferInfoEx(
            hConsoleOutput: root::HANDLE,
            lpConsoleScreenBufferInfoEx: root::PCONSOLE_SCREEN_BUFFER_INFOEX,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleScreenBufferInfoEx(
            hConsoleOutput: root::HANDLE,
            lpConsoleScreenBufferInfoEx: root::PCONSOLE_SCREEN_BUFFER_INFOEX,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleScreenBufferSize(
            hConsoleOutput: root::HANDLE,
            dwSize: root::COORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleCursorPosition(
            hConsoleOutput: root::HANDLE,
            dwCursorPosition: root::COORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetLargestConsoleWindowSize(hConsoleOutput: root::HANDLE) -> root::COORD;
    }
    extern "C" {
        pub fn SetConsoleTextAttribute(
            hConsoleOutput: root::HANDLE,
            wAttributes: u16,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleWindowInfo(
            hConsoleOutput: root::HANDLE,
            bAbsolute: root::BOOL,
            lpConsoleWindow: *const root::SMALL_RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleOutputCharacterA(
            hConsoleOutput: root::HANDLE,
            lpCharacter: *const i8,
            nLength: u32,
            dwWriteCoord: root::COORD,
            lpNumberOfCharsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleOutputCharacterW(
            hConsoleOutput: root::HANDLE,
            lpCharacter: root::LPCWSTR,
            nLength: u32,
            dwWriteCoord: root::COORD,
            lpNumberOfCharsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleOutputAttribute(
            hConsoleOutput: root::HANDLE,
            lpAttribute: *const u16,
            nLength: u32,
            dwWriteCoord: root::COORD,
            lpNumberOfAttrsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleOutputCharacterA(
            hConsoleOutput: root::HANDLE,
            lpCharacter: *mut i8,
            nLength: u32,
            dwReadCoord: root::COORD,
            lpNumberOfCharsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleOutputCharacterW(
            hConsoleOutput: root::HANDLE,
            lpCharacter: root::LPWSTR,
            nLength: u32,
            dwReadCoord: root::COORD,
            lpNumberOfCharsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleOutputAttribute(
            hConsoleOutput: root::HANDLE,
            lpAttribute: root::LPWORD,
            nLength: u32,
            dwReadCoord: root::COORD,
            lpNumberOfAttrsRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleInputA(
            hConsoleInput: root::HANDLE,
            lpBuffer: *const root::INPUT_RECORD,
            nLength: u32,
            lpNumberOfEventsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleInputW(
            hConsoleInput: root::HANDLE,
            lpBuffer: *const root::INPUT_RECORD,
            nLength: u32,
            lpNumberOfEventsWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScrollConsoleScreenBufferA(
            hConsoleOutput: root::HANDLE,
            lpScrollRectangle: *const root::SMALL_RECT,
            lpClipRectangle: *const root::SMALL_RECT,
            dwDestinationOrigin: root::COORD,
            lpFill: *const root::CHAR_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScrollConsoleScreenBufferW(
            hConsoleOutput: root::HANDLE,
            lpScrollRectangle: *const root::SMALL_RECT,
            lpClipRectangle: *const root::SMALL_RECT,
            dwDestinationOrigin: root::COORD,
            lpFill: *const root::CHAR_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleOutputA(
            hConsoleOutput: root::HANDLE,
            lpBuffer: *const root::CHAR_INFO,
            dwBufferSize: root::COORD,
            dwBufferCoord: root::COORD,
            lpWriteRegion: root::PSMALL_RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteConsoleOutputW(
            hConsoleOutput: root::HANDLE,
            lpBuffer: *const root::CHAR_INFO,
            dwBufferSize: root::COORD,
            dwBufferCoord: root::COORD,
            lpWriteRegion: root::PSMALL_RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleOutputA(
            hConsoleOutput: root::HANDLE,
            lpBuffer: root::PCHAR_INFO,
            dwBufferSize: root::COORD,
            dwBufferCoord: root::COORD,
            lpReadRegion: root::PSMALL_RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadConsoleOutputW(
            hConsoleOutput: root::HANDLE,
            lpBuffer: root::PCHAR_INFO,
            dwBufferSize: root::COORD,
            dwBufferCoord: root::COORD,
            lpReadRegion: root::PSMALL_RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleTitleA(lpConsoleTitle: *mut i8, nSize: u32) -> u32;
    }
    extern "C" {
        pub fn GetConsoleTitleW(lpConsoleTitle: root::LPWSTR, nSize: u32) -> u32;
    }
    extern "C" {
        pub fn GetConsoleOriginalTitleA(
            lpConsoleTitle: *mut i8,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleOriginalTitleW(
            lpConsoleTitle: root::LPWSTR,
            nSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetConsoleTitleA(lpConsoleTitle: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleTitleW(lpConsoleTitle: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleFontSize(hConsoleOutput: root::HANDLE, nFont: u32) -> root::COORD;
    }
    extern "C" {
        pub fn GetCurrentConsoleFont(
            hConsoleOutput: root::HANDLE,
            bMaximumWindow: root::BOOL,
            lpConsoleCurrentFont: root::PCONSOLE_FONT_INFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_FONT_INFOEX {
        pub cbSize: root::ULONG,
        pub nFont: u32,
        pub dwFontSize: root::COORD,
        pub FontFamily: root::UINT,
        pub FontWeight: root::UINT,
        pub FaceName: [u16; 32usize],
    }
    pub type CONSOLE_FONT_INFOEX = root::_CONSOLE_FONT_INFOEX;
    pub type PCONSOLE_FONT_INFOEX = *mut root::_CONSOLE_FONT_INFOEX;
    extern "C" {
        pub fn GetCurrentConsoleFontEx(
            hConsoleOutput: root::HANDLE,
            bMaximumWindow: root::BOOL,
            lpConsoleCurrentFontEx: root::PCONSOLE_FONT_INFOEX,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetCurrentConsoleFontEx(
            hConsoleOutput: root::HANDLE,
            bMaximumWindow: root::BOOL,
            lpConsoleCurrentFontEx: root::PCONSOLE_FONT_INFOEX,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_SELECTION_INFO {
        pub dwFlags: u32,
        pub dwSelectionAnchor: root::COORD,
        pub srSelection: root::SMALL_RECT,
    }
    pub type CONSOLE_SELECTION_INFO = root::_CONSOLE_SELECTION_INFO;
    pub type PCONSOLE_SELECTION_INFO = *mut root::_CONSOLE_SELECTION_INFO;
    extern "C" {
        pub fn GetConsoleSelectionInfo(
            lpConsoleSelectionInfo: root::PCONSOLE_SELECTION_INFO,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONSOLE_HISTORY_INFO {
        pub cbSize: root::UINT,
        pub HistoryBufferSize: root::UINT,
        pub NumberOfHistoryBuffers: root::UINT,
        pub dwFlags: u32,
    }
    pub type CONSOLE_HISTORY_INFO = root::_CONSOLE_HISTORY_INFO;
    pub type PCONSOLE_HISTORY_INFO = *mut root::_CONSOLE_HISTORY_INFO;
    extern "C" {
        pub fn GetConsoleHistoryInfo(
            lpConsoleHistoryInfo: root::PCONSOLE_HISTORY_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleHistoryInfo(
            lpConsoleHistoryInfo: root::PCONSOLE_HISTORY_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleDisplayMode(lpModeFlags: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleDisplayMode(
            hConsoleOutput: root::HANDLE,
            dwFlags: u32,
            lpNewScreenBufferDimensions: root::PCOORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleWindow() -> root::HWND;
    }
    extern "C" {
        pub fn AddConsoleAliasA(
            Source: *mut i8,
            Target: *mut i8,
            ExeName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddConsoleAliasW(
            Source: root::LPWSTR,
            Target: root::LPWSTR,
            ExeName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleAliasA(
            Source: *mut i8,
            TargetBuffer: *mut i8,
            TargetBufferLength: u32,
            ExeName: *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasW(
            Source: root::LPWSTR,
            TargetBuffer: root::LPWSTR,
            TargetBufferLength: u32,
            ExeName: root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasesLengthA(ExeName: *mut i8) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasesLengthW(ExeName: root::LPWSTR) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasExesLengthA() -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasExesLengthW() -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasesA(
            AliasBuffer: *mut i8,
            AliasBufferLength: u32,
            ExeName: *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasesW(
            AliasBuffer: root::LPWSTR,
            AliasBufferLength: u32,
            ExeName: root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasExesA(
            ExeNameBuffer: *mut i8,
            ExeNameBufferLength: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleAliasExesW(
            ExeNameBuffer: root::LPWSTR,
            ExeNameBufferLength: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ExpungeConsoleCommandHistoryA(ExeName: *mut i8);
    }
    extern "C" {
        pub fn ExpungeConsoleCommandHistoryW(ExeName: root::LPWSTR);
    }
    extern "C" {
        pub fn SetConsoleNumberOfCommandsA(Number: u32, ExeName: *mut i8)
            -> root::BOOL;
    }
    extern "C" {
        pub fn SetConsoleNumberOfCommandsW(
            Number: u32,
            ExeName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetConsoleCommandHistoryLengthA(ExeName: *mut i8) -> u32;
    }
    extern "C" {
        pub fn GetConsoleCommandHistoryLengthW(ExeName: root::LPWSTR) -> u32;
    }
    extern "C" {
        pub fn GetConsoleCommandHistoryA(
            Commands: *mut i8,
            CommandBufferLength: u32,
            ExeName: *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleCommandHistoryW(
            Commands: root::LPWSTR,
            CommandBufferLength: u32,
            ExeName: root::LPWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn GetConsoleProcessList(
            lpdwProcessList: root::LPDWORD,
            dwProcessCount: u32,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagVS_FIXEDFILEINFO {
        pub dwSignature: u32,
        pub dwStrucVersion: u32,
        pub dwFileVersionMS: u32,
        pub dwFileVersionLS: u32,
        pub dwProductVersionMS: u32,
        pub dwProductVersionLS: u32,
        pub dwFileFlagsMask: u32,
        pub dwFileFlags: u32,
        pub dwFileOS: u32,
        pub dwFileType: u32,
        pub dwFileSubtype: u32,
        pub dwFileDateMS: u32,
        pub dwFileDateLS: u32,
    }
    pub type VS_FIXEDFILEINFO = root::tagVS_FIXEDFILEINFO;
    extern "C" {
        pub fn VerFindFileA(
            uFlags: u32,
            szFileName: *const i8,
            szWinDir: *const i8,
            szAppDir: *const i8,
            szCurDir: *mut i8,
            puCurDirLen: root::PUINT,
            szDestDir: *mut i8,
            puDestDirLen: root::PUINT,
        ) -> u32;
    }
    extern "C" {
        pub fn VerFindFileW(
            uFlags: u32,
            szFileName: root::LPCWSTR,
            szWinDir: root::LPCWSTR,
            szAppDir: root::LPCWSTR,
            szCurDir: root::LPWSTR,
            puCurDirLen: root::PUINT,
            szDestDir: root::LPWSTR,
            puDestDirLen: root::PUINT,
        ) -> u32;
    }
    extern "C" {
        pub fn VerInstallFileA(
            uFlags: u32,
            szSrcFileName: *const i8,
            szDestFileName: *const i8,
            szSrcDir: *const i8,
            szDestDir: *const i8,
            szCurDir: *const i8,
            szTmpFile: *mut i8,
            puTmpFileLen: root::PUINT,
        ) -> u32;
    }
    extern "C" {
        pub fn VerInstallFileW(
            uFlags: u32,
            szSrcFileName: root::LPCWSTR,
            szDestFileName: root::LPCWSTR,
            szSrcDir: root::LPCWSTR,
            szDestDir: root::LPCWSTR,
            szCurDir: root::LPCWSTR,
            szTmpFile: root::LPWSTR,
            puTmpFileLen: root::PUINT,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFileVersionInfoSizeA(
            lptstrFilename: *const i8,
            lpdwHandle: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFileVersionInfoSizeW(
            lptstrFilename: root::LPCWSTR,
            lpdwHandle: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFileVersionInfoA(
            lptstrFilename: *const i8,
            dwHandle: u32,
            dwLen: u32,
            lpData: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileVersionInfoW(
            lptstrFilename: root::LPCWSTR,
            dwHandle: u32,
            dwLen: u32,
            lpData: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileVersionInfoSizeExA(
            dwFlags: u32,
            lpwstrFilename: *const i8,
            lpdwHandle: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFileVersionInfoSizeExW(
            dwFlags: u32,
            lpwstrFilename: root::LPCWSTR,
            lpdwHandle: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetFileVersionInfoExA(
            dwFlags: u32,
            lpwstrFilename: *const i8,
            dwHandle: u32,
            dwLen: u32,
            lpData: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileVersionInfoExW(
            dwFlags: u32,
            lpwstrFilename: root::LPCWSTR,
            dwHandle: u32,
            dwLen: u32,
            lpData: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VerLanguageNameA(
            wLang: u32,
            szLang: *mut i8,
            cchLang: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn VerLanguageNameW(
            wLang: u32,
            szLang: root::LPWSTR,
            cchLang: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn VerQueryValueA(
            pBlock: root::LPCVOID,
            lpSubBlock: *const i8,
            lplpBuffer: *mut root::LPVOID,
            puLen: root::PUINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VerQueryValueW(
            pBlock: root::LPCVOID,
            lpSubBlock: root::LPCWSTR,
            lplpBuffer: *mut root::LPVOID,
            puLen: root::PUINT,
        ) -> root::BOOL;
    }
    pub type LSTATUS = i32;
    pub type REGSAM = root::ACCESS_MASK;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct val_context {
        pub valuelen: i32,
        pub value_context: root::LPVOID,
        pub val_buff_ptr: root::LPVOID,
    }
    pub type PVALCONTEXT = *mut root::val_context;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pvalueA {
        pub pv_valuename: *mut i8,
        pub pv_valuelen: i32,
        pub pv_value_context: root::LPVOID,
        pub pv_type: u32,
    }
    pub type PVALUEA = root::pvalueA;
    pub type PPVALUEA = *mut root::pvalueA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pvalueW {
        pub pv_valuename: root::LPWSTR,
        pub pv_valuelen: i32,
        pub pv_value_context: root::LPVOID,
        pub pv_type: u32,
    }
    pub type PVALUEW = root::pvalueW;
    pub type PPVALUEW = *mut root::pvalueW;
    pub type PVALUE = root::PVALUEA;
    pub type PPVALUE = root::PPVALUEA;
    pub type PQUERYHANDLER = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPVOID,
            arg2: root::PVALCONTEXT,
            arg3: u32,
            arg4: root::LPVOID,
            arg5: *mut u32,
            arg6: u32,
        ) -> u32,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct provider_info {
        pub pi_R0_1val: root::PQUERYHANDLER,
        pub pi_R0_allvals: root::PQUERYHANDLER,
        pub pi_R3_1val: root::PQUERYHANDLER,
        pub pi_R3_allvals: root::PQUERYHANDLER,
        pub pi_flags: u32,
        pub pi_key_context: root::LPVOID,
    }
    pub type REG_PROVIDER = root::provider_info;
    pub type PPROVIDER = *mut root::provider_info;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct value_entA {
        pub ve_valuename: *mut i8,
        pub ve_valuelen: u32,
        pub ve_valueptr: root::DWORD_PTR,
        pub ve_type: u32,
    }
    pub type VALENTA = root::value_entA;
    pub type PVALENTA = *mut root::value_entA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct value_entW {
        pub ve_valuename: root::LPWSTR,
        pub ve_valuelen: u32,
        pub ve_valueptr: root::DWORD_PTR,
        pub ve_type: u32,
    }
    pub type VALENTW = root::value_entW;
    pub type PVALENTW = *mut root::value_entW;
    pub type VALENT = root::VALENTA;
    pub type PVALENT = root::PVALENTA;
    extern "C" {
        pub fn RegCloseKey(hKey: root::HKEY) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOverridePredefKey(hKey: root::HKEY, hNewHKey: root::HKEY) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenUserClassesRoot(
            hToken: root::HANDLE,
            dwOptions: u32,
            samDesired: root::REGSAM,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenCurrentUser(
            samDesired: root::REGSAM,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDisablePredefinedCache() -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDisablePredefinedCacheEx() -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegConnectRegistryA(
            lpMachineName: *const i8,
            hKey: root::HKEY,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegConnectRegistryW(
            lpMachineName: root::LPCWSTR,
            hKey: root::HKEY,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegConnectRegistryExA(
            lpMachineName: *const i8,
            hKey: root::HKEY,
            Flags: root::ULONG,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegConnectRegistryExW(
            lpMachineName: root::LPCWSTR,
            hKey: root::HKEY,
            Flags: root::ULONG,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCreateKeyA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCreateKeyW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCreateKeyExA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            Reserved: u32,
            lpClass: *mut i8,
            dwOptions: u32,
            samDesired: root::REGSAM,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            phkResult: root::PHKEY,
            lpdwDisposition: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCreateKeyExW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            Reserved: u32,
            lpClass: root::LPWSTR,
            dwOptions: u32,
            samDesired: root::REGSAM,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            phkResult: root::PHKEY,
            lpdwDisposition: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCreateKeyTransactedA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            Reserved: u32,
            lpClass: *mut i8,
            dwOptions: u32,
            samDesired: root::REGSAM,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            phkResult: root::PHKEY,
            lpdwDisposition: root::LPDWORD,
            hTransaction: root::HANDLE,
            pExtendedParemeter: root::PVOID,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCreateKeyTransactedW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            Reserved: u32,
            lpClass: root::LPWSTR,
            dwOptions: u32,
            samDesired: root::REGSAM,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            phkResult: root::PHKEY,
            lpdwDisposition: root::LPDWORD,
            hTransaction: root::HANDLE,
            pExtendedParemeter: root::PVOID,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyA(hKey: root::HKEY, lpSubKey: *const i8) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyW(hKey: root::HKEY, lpSubKey: root::LPCWSTR) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyExA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            samDesired: root::REGSAM,
            Reserved: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyExW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            samDesired: root::REGSAM,
            Reserved: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyTransactedA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            samDesired: root::REGSAM,
            Reserved: u32,
            hTransaction: root::HANDLE,
            pExtendedParameter: root::PVOID,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyTransactedW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            samDesired: root::REGSAM,
            Reserved: u32,
            hTransaction: root::HANDLE,
            pExtendedParameter: root::PVOID,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDisableReflectionKey(hBase: root::HKEY) -> i32;
    }
    extern "C" {
        pub fn RegEnableReflectionKey(hBase: root::HKEY) -> i32;
    }
    extern "C" {
        pub fn RegQueryReflectionKey(
            hBase: root::HKEY,
            bIsReflectionDisabled: *mut root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn RegDeleteValueA(hKey: root::HKEY, lpValueName: *const i8) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteValueW(hKey: root::HKEY, lpValueName: root::LPCWSTR) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegEnumKeyA(
            hKey: root::HKEY,
            dwIndex: u32,
            lpName: *mut i8,
            cchName: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegEnumKeyW(
            hKey: root::HKEY,
            dwIndex: u32,
            lpName: root::LPWSTR,
            cchName: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegEnumKeyExA(
            hKey: root::HKEY,
            dwIndex: u32,
            lpName: *mut i8,
            lpcchName: root::LPDWORD,
            lpReserved: root::LPDWORD,
            lpClass: *mut i8,
            lpcchClass: root::LPDWORD,
            lpftLastWriteTime: root::PFILETIME,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegEnumKeyExW(
            hKey: root::HKEY,
            dwIndex: u32,
            lpName: root::LPWSTR,
            lpcchName: root::LPDWORD,
            lpReserved: root::LPDWORD,
            lpClass: root::LPWSTR,
            lpcchClass: root::LPDWORD,
            lpftLastWriteTime: root::PFILETIME,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegEnumValueA(
            hKey: root::HKEY,
            dwIndex: u32,
            lpValueName: *mut i8,
            lpcchValueName: root::LPDWORD,
            lpReserved: root::LPDWORD,
            lpType: root::LPDWORD,
            lpData: root::LPBYTE,
            lpcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegEnumValueW(
            hKey: root::HKEY,
            dwIndex: u32,
            lpValueName: root::LPWSTR,
            lpcchValueName: root::LPDWORD,
            lpReserved: root::LPDWORD,
            lpType: root::LPDWORD,
            lpData: root::LPBYTE,
            lpcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegFlushKey(hKey: root::HKEY) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegGetKeySecurity(
            hKey: root::HKEY,
            SecurityInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            lpcbSecurityDescriptor: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegLoadKeyA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            lpFile: *const i8,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegLoadKeyW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            lpFile: root::LPCWSTR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegNotifyChangeKeyValue(
            hKey: root::HKEY,
            bWatchSubtree: root::BOOL,
            dwNotifyFilter: u32,
            hEvent: root::HANDLE,
            fAsynchronous: root::BOOL,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenKeyA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenKeyW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenKeyExA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            ulOptions: u32,
            samDesired: root::REGSAM,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenKeyExW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            ulOptions: u32,
            samDesired: root::REGSAM,
            phkResult: root::PHKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenKeyTransactedA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            ulOptions: u32,
            samDesired: root::REGSAM,
            phkResult: root::PHKEY,
            hTransaction: root::HANDLE,
            pExtendedParemeter: root::PVOID,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegOpenKeyTransactedW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            ulOptions: u32,
            samDesired: root::REGSAM,
            phkResult: root::PHKEY,
            hTransaction: root::HANDLE,
            pExtendedParemeter: root::PVOID,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryInfoKeyA(
            hKey: root::HKEY,
            lpClass: *mut i8,
            lpcchClass: root::LPDWORD,
            lpReserved: root::LPDWORD,
            lpcSubKeys: root::LPDWORD,
            lpcbMaxSubKeyLen: root::LPDWORD,
            lpcbMaxClassLen: root::LPDWORD,
            lpcValues: root::LPDWORD,
            lpcbMaxValueNameLen: root::LPDWORD,
            lpcbMaxValueLen: root::LPDWORD,
            lpcbSecurityDescriptor: root::LPDWORD,
            lpftLastWriteTime: root::PFILETIME,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryInfoKeyW(
            hKey: root::HKEY,
            lpClass: root::LPWSTR,
            lpcchClass: root::LPDWORD,
            lpReserved: root::LPDWORD,
            lpcSubKeys: root::LPDWORD,
            lpcbMaxSubKeyLen: root::LPDWORD,
            lpcbMaxClassLen: root::LPDWORD,
            lpcValues: root::LPDWORD,
            lpcbMaxValueNameLen: root::LPDWORD,
            lpcbMaxValueLen: root::LPDWORD,
            lpcbSecurityDescriptor: root::LPDWORD,
            lpftLastWriteTime: root::PFILETIME,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryValueA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            lpData: *mut i8,
            lpcbData: root::PLONG,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryValueW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            lpData: root::LPWSTR,
            lpcbData: root::PLONG,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryMultipleValuesA(
            hKey: root::HKEY,
            val_list: root::PVALENTA,
            num_vals: u32,
            lpValueBuf: *mut i8,
            ldwTotsize: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryMultipleValuesW(
            hKey: root::HKEY,
            val_list: root::PVALENTW,
            num_vals: u32,
            lpValueBuf: root::LPWSTR,
            ldwTotsize: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryValueExA(
            hKey: root::HKEY,
            lpValueName: *const i8,
            lpReserved: root::LPDWORD,
            lpType: root::LPDWORD,
            lpData: root::LPBYTE,
            lpcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegQueryValueExW(
            hKey: root::HKEY,
            lpValueName: root::LPCWSTR,
            lpReserved: root::LPDWORD,
            lpType: root::LPDWORD,
            lpData: root::LPBYTE,
            lpcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegReplaceKeyA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            lpNewFile: *const i8,
            lpOldFile: *const i8,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegReplaceKeyW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            lpNewFile: root::LPCWSTR,
            lpOldFile: root::LPCWSTR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegRestoreKeyA(
            hKey: root::HKEY,
            lpFile: *const i8,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegRestoreKeyW(
            hKey: root::HKEY,
            lpFile: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegRenameKey(
            hKey: root::HKEY,
            lpSubKeyName: root::LPCWSTR,
            lpNewKeyName: root::LPCWSTR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSaveKeyA(
            hKey: root::HKEY,
            lpFile: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSaveKeyW(
            hKey: root::HKEY,
            lpFile: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetKeySecurity(
            hKey: root::HKEY,
            SecurityInformation: root::SECURITY_INFORMATION,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetValueA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            dwType: u32,
            lpData: *const i8,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetValueW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            dwType: u32,
            lpData: root::LPCWSTR,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetValueExA(
            hKey: root::HKEY,
            lpValueName: *const i8,
            Reserved: u32,
            dwType: u32,
            lpData: *const u8,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetValueExW(
            hKey: root::HKEY,
            lpValueName: root::LPCWSTR,
            Reserved: u32,
            dwType: u32,
            lpData: *const u8,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegUnLoadKeyA(hKey: root::HKEY, lpSubKey: *const i8) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegUnLoadKeyW(hKey: root::HKEY, lpSubKey: root::LPCWSTR) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyValueA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            lpValueName: *const i8,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteKeyValueW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            lpValueName: root::LPCWSTR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetKeyValueA(
            hKey: root::HKEY,
            lpSubKey: *const i8,
            lpValueName: *const i8,
            dwType: u32,
            lpData: root::LPCVOID,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSetKeyValueW(
            hKey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            lpValueName: root::LPCWSTR,
            dwType: u32,
            lpData: root::LPCVOID,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteTreeA(hKey: root::HKEY, lpSubKey: *const i8) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegDeleteTreeW(hKey: root::HKEY, lpSubKey: root::LPCWSTR) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCopyTreeA(
            hKeySrc: root::HKEY,
            lpSubKey: *const i8,
            hKeyDest: root::HKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegGetValueA(
            hkey: root::HKEY,
            lpSubKey: *const i8,
            lpValue: *const i8,
            dwFlags: u32,
            pdwType: root::LPDWORD,
            pvData: root::PVOID,
            pcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegGetValueW(
            hkey: root::HKEY,
            lpSubKey: root::LPCWSTR,
            lpValue: root::LPCWSTR,
            dwFlags: u32,
            pdwType: root::LPDWORD,
            pvData: root::PVOID,
            pcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegCopyTreeW(
            hKeySrc: root::HKEY,
            lpSubKey: root::LPCWSTR,
            hKeyDest: root::HKEY,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegLoadMUIStringA(
            hKey: root::HKEY,
            pszValue: *const i8,
            pszOutBuf: *mut i8,
            cbOutBuf: u32,
            pcbData: root::LPDWORD,
            Flags: u32,
            pszDirectory: *const i8,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegLoadMUIStringW(
            hKey: root::HKEY,
            pszValue: root::LPCWSTR,
            pszOutBuf: root::LPWSTR,
            cbOutBuf: u32,
            pcbData: root::LPDWORD,
            Flags: u32,
            pszDirectory: root::LPCWSTR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegLoadAppKeyA(
            lpFile: *const i8,
            phkResult: root::PHKEY,
            samDesired: root::REGSAM,
            dwOptions: u32,
            Reserved: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegLoadAppKeyW(
            lpFile: root::LPCWSTR,
            phkResult: root::PHKEY,
            samDesired: root::REGSAM,
            dwOptions: u32,
            Reserved: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn InitiateSystemShutdownA(
            lpMachineName: *mut i8,
            lpMessage: *mut i8,
            dwTimeout: u32,
            bForceAppsClosed: root::BOOL,
            bRebootAfterShutdown: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitiateSystemShutdownW(
            lpMachineName: root::LPWSTR,
            lpMessage: root::LPWSTR,
            dwTimeout: u32,
            bForceAppsClosed: root::BOOL,
            bRebootAfterShutdown: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AbortSystemShutdownA(lpMachineName: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn AbortSystemShutdownW(lpMachineName: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn InitiateSystemShutdownExA(
            lpMachineName: *mut i8,
            lpMessage: *mut i8,
            dwTimeout: u32,
            bForceAppsClosed: root::BOOL,
            bRebootAfterShutdown: root::BOOL,
            dwReason: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitiateSystemShutdownExW(
            lpMachineName: root::LPWSTR,
            lpMessage: root::LPWSTR,
            dwTimeout: u32,
            bForceAppsClosed: root::BOOL,
            bRebootAfterShutdown: root::BOOL,
            dwReason: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InitiateShutdownA(
            lpMachineName: *mut i8,
            lpMessage: *mut i8,
            dwGracePeriod: u32,
            dwShutdownFlags: u32,
            dwReason: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn InitiateShutdownW(
            lpMachineName: root::LPWSTR,
            lpMessage: root::LPWSTR,
            dwGracePeriod: u32,
            dwShutdownFlags: u32,
            dwReason: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CheckForHiberboot(
            pHiberboot: root::PBOOLEAN,
            bClearFlag: root::BOOLEAN,
        ) -> u32;
    }
    extern "C" {
        pub fn RegSaveKeyExA(
            hKey: root::HKEY,
            lpFile: *const i8,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            Flags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn RegSaveKeyExW(
            hKey: root::HKEY,
            lpFile: root::LPCWSTR,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
            Flags: u32,
        ) -> root::LSTATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NETRESOURCEA {
        pub dwScope: u32,
        pub dwType: u32,
        pub dwDisplayType: u32,
        pub dwUsage: u32,
        pub lpLocalName: *mut i8,
        pub lpRemoteName: *mut i8,
        pub lpComment: *mut i8,
        pub lpProvider: *mut i8,
    }
    pub type NETRESOURCEA = root::_NETRESOURCEA;
    pub type LPNETRESOURCEA = *mut root::_NETRESOURCEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NETRESOURCEW {
        pub dwScope: u32,
        pub dwType: u32,
        pub dwDisplayType: u32,
        pub dwUsage: u32,
        pub lpLocalName: root::LPWSTR,
        pub lpRemoteName: root::LPWSTR,
        pub lpComment: root::LPWSTR,
        pub lpProvider: root::LPWSTR,
    }
    pub type NETRESOURCEW = root::_NETRESOURCEW;
    pub type LPNETRESOURCEW = *mut root::_NETRESOURCEW;
    pub type NETRESOURCE = root::NETRESOURCEA;
    pub type LPNETRESOURCE = root::LPNETRESOURCEA;
    extern "C" {
        pub fn WNetAddConnectionA(
            lpRemoteName: *const i8,
            lpPassword: *const i8,
            lpLocalName: *const i8,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnectionW(
            lpRemoteName: root::LPCWSTR,
            lpPassword: root::LPCWSTR,
            lpLocalName: root::LPCWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnection2A(
            lpNetResource: root::LPNETRESOURCEA,
            lpPassword: *const i8,
            lpUserName: *const i8,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnection2W(
            lpNetResource: root::LPNETRESOURCEW,
            lpPassword: root::LPCWSTR,
            lpUserName: root::LPCWSTR,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnection3A(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEA,
            lpPassword: *const i8,
            lpUserName: *const i8,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnection3W(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEW,
            lpPassword: root::LPCWSTR,
            lpUserName: root::LPCWSTR,
            dwFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnection4A(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEA,
            pAuthBuffer: root::PVOID,
            cbAuthBuffer: u32,
            dwFlags: u32,
            lpUseOptions: root::PBYTE,
            cbUseOptions: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetAddConnection4W(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEW,
            pAuthBuffer: root::PVOID,
            cbAuthBuffer: u32,
            dwFlags: u32,
            lpUseOptions: root::PBYTE,
            cbUseOptions: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetCancelConnectionA(lpName: *const i8, fForce: root::BOOL) -> u32;
    }
    extern "C" {
        pub fn WNetCancelConnectionW(lpName: root::LPCWSTR, fForce: root::BOOL) -> u32;
    }
    extern "C" {
        pub fn WNetCancelConnection2A(
            lpName: *const i8,
            dwFlags: u32,
            fForce: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetCancelConnection2W(
            lpName: root::LPCWSTR,
            dwFlags: u32,
            fForce: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetConnectionA(
            lpLocalName: *const i8,
            lpRemoteName: *mut i8,
            lpnLength: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetConnectionW(
            lpLocalName: root::LPCWSTR,
            lpRemoteName: root::LPWSTR,
            lpnLength: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetRestoreSingleConnectionW(
            hwndParent: root::HWND,
            lpDevice: root::LPCWSTR,
            fUseUI: root::BOOL,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetUseConnectionA(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEA,
            lpPassword: *const i8,
            lpUserId: *const i8,
            dwFlags: u32,
            lpAccessName: *mut i8,
            lpBufferSize: root::LPDWORD,
            lpResult: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetUseConnectionW(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEW,
            lpPassword: root::LPCWSTR,
            lpUserId: root::LPCWSTR,
            dwFlags: u32,
            lpAccessName: root::LPWSTR,
            lpBufferSize: root::LPDWORD,
            lpResult: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetUseConnection4A(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEA,
            pAuthBuffer: root::PVOID,
            cbAuthBuffer: u32,
            dwFlags: u32,
            lpUseOptions: root::PBYTE,
            cbUseOptions: u32,
            lpAccessName: *mut i8,
            lpBufferSize: root::LPDWORD,
            lpResult: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetUseConnection4W(
            hwndOwner: root::HWND,
            lpNetResource: root::LPNETRESOURCEW,
            pAuthBuffer: root::PVOID,
            cbAuthBuffer: u32,
            dwFlags: u32,
            lpUseOptions: root::PBYTE,
            cbUseOptions: u32,
            lpAccessName: root::LPWSTR,
            lpBufferSize: root::LPDWORD,
            lpResult: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetConnectionDialog(hwnd: root::HWND, dwType: u32) -> u32;
    }
    extern "C" {
        pub fn WNetDisconnectDialog(hwnd: root::HWND, dwType: u32) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONNECTDLGSTRUCTA {
        pub cbStructure: u32,
        pub hwndOwner: root::HWND,
        pub lpConnRes: root::LPNETRESOURCEA,
        pub dwFlags: u32,
        pub dwDevNum: u32,
    }
    pub type CONNECTDLGSTRUCTA = root::_CONNECTDLGSTRUCTA;
    pub type LPCONNECTDLGSTRUCTA = *mut root::_CONNECTDLGSTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONNECTDLGSTRUCTW {
        pub cbStructure: u32,
        pub hwndOwner: root::HWND,
        pub lpConnRes: root::LPNETRESOURCEW,
        pub dwFlags: u32,
        pub dwDevNum: u32,
    }
    pub type CONNECTDLGSTRUCTW = root::_CONNECTDLGSTRUCTW;
    pub type LPCONNECTDLGSTRUCTW = *mut root::_CONNECTDLGSTRUCTW;
    pub type CONNECTDLGSTRUCT = root::CONNECTDLGSTRUCTA;
    pub type LPCONNECTDLGSTRUCT = root::LPCONNECTDLGSTRUCTA;
    extern "C" {
        pub fn WNetConnectionDialog1A(lpConnDlgStruct: root::LPCONNECTDLGSTRUCTA) -> u32;
    }
    extern "C" {
        pub fn WNetConnectionDialog1W(lpConnDlgStruct: root::LPCONNECTDLGSTRUCTW) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISCDLGSTRUCTA {
        pub cbStructure: u32,
        pub hwndOwner: root::HWND,
        pub lpLocalName: *mut i8,
        pub lpRemoteName: *mut i8,
        pub dwFlags: u32,
    }
    pub type DISCDLGSTRUCTA = root::_DISCDLGSTRUCTA;
    pub type LPDISCDLGSTRUCTA = *mut root::_DISCDLGSTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISCDLGSTRUCTW {
        pub cbStructure: u32,
        pub hwndOwner: root::HWND,
        pub lpLocalName: root::LPWSTR,
        pub lpRemoteName: root::LPWSTR,
        pub dwFlags: u32,
    }
    pub type DISCDLGSTRUCTW = root::_DISCDLGSTRUCTW;
    pub type LPDISCDLGSTRUCTW = *mut root::_DISCDLGSTRUCTW;
    pub type DISCDLGSTRUCT = root::DISCDLGSTRUCTA;
    pub type LPDISCDLGSTRUCT = root::LPDISCDLGSTRUCTA;
    extern "C" {
        pub fn WNetDisconnectDialog1A(lpConnDlgStruct: root::LPDISCDLGSTRUCTA) -> u32;
    }
    extern "C" {
        pub fn WNetDisconnectDialog1W(lpConnDlgStruct: root::LPDISCDLGSTRUCTW) -> u32;
    }
    extern "C" {
        pub fn WNetOpenEnumA(
            dwScope: u32,
            dwType: u32,
            dwUsage: u32,
            lpNetResource: root::LPNETRESOURCEA,
            lphEnum: root::LPHANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetOpenEnumW(
            dwScope: u32,
            dwType: u32,
            dwUsage: u32,
            lpNetResource: root::LPNETRESOURCEW,
            lphEnum: root::LPHANDLE,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetEnumResourceA(
            hEnum: root::HANDLE,
            lpcCount: root::LPDWORD,
            lpBuffer: root::LPVOID,
            lpBufferSize: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetEnumResourceW(
            hEnum: root::HANDLE,
            lpcCount: root::LPDWORD,
            lpBuffer: root::LPVOID,
            lpBufferSize: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetCloseEnum(hEnum: root::HANDLE) -> u32;
    }
    extern "C" {
        pub fn WNetGetResourceParentA(
            lpNetResource: root::LPNETRESOURCEA,
            lpBuffer: root::LPVOID,
            lpcbBuffer: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetResourceParentW(
            lpNetResource: root::LPNETRESOURCEW,
            lpBuffer: root::LPVOID,
            lpcbBuffer: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetResourceInformationA(
            lpNetResource: root::LPNETRESOURCEA,
            lpBuffer: root::LPVOID,
            lpcbBuffer: root::LPDWORD,
            lplpSystem: *mut *mut i8,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetResourceInformationW(
            lpNetResource: root::LPNETRESOURCEW,
            lpBuffer: root::LPVOID,
            lpcbBuffer: root::LPDWORD,
            lplpSystem: *mut root::LPWSTR,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UNIVERSAL_NAME_INFOA {
        pub lpUniversalName: *mut i8,
    }
    pub type UNIVERSAL_NAME_INFOA = root::_UNIVERSAL_NAME_INFOA;
    pub type LPUNIVERSAL_NAME_INFOA = *mut root::_UNIVERSAL_NAME_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UNIVERSAL_NAME_INFOW {
        pub lpUniversalName: root::LPWSTR,
    }
    pub type UNIVERSAL_NAME_INFOW = root::_UNIVERSAL_NAME_INFOW;
    pub type LPUNIVERSAL_NAME_INFOW = *mut root::_UNIVERSAL_NAME_INFOW;
    pub type UNIVERSAL_NAME_INFO = root::UNIVERSAL_NAME_INFOA;
    pub type LPUNIVERSAL_NAME_INFO = root::LPUNIVERSAL_NAME_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REMOTE_NAME_INFOA {
        pub lpUniversalName: *mut i8,
        pub lpConnectionName: *mut i8,
        pub lpRemainingPath: *mut i8,
    }
    pub type REMOTE_NAME_INFOA = root::_REMOTE_NAME_INFOA;
    pub type LPREMOTE_NAME_INFOA = *mut root::_REMOTE_NAME_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REMOTE_NAME_INFOW {
        pub lpUniversalName: root::LPWSTR,
        pub lpConnectionName: root::LPWSTR,
        pub lpRemainingPath: root::LPWSTR,
    }
    pub type REMOTE_NAME_INFOW = root::_REMOTE_NAME_INFOW;
    pub type LPREMOTE_NAME_INFOW = *mut root::_REMOTE_NAME_INFOW;
    pub type REMOTE_NAME_INFO = root::REMOTE_NAME_INFOA;
    pub type LPREMOTE_NAME_INFO = root::LPREMOTE_NAME_INFOA;
    extern "C" {
        pub fn WNetGetUniversalNameA(
            lpLocalPath: *const i8,
            dwInfoLevel: u32,
            lpBuffer: root::LPVOID,
            lpBufferSize: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetUniversalNameW(
            lpLocalPath: root::LPCWSTR,
            dwInfoLevel: u32,
            lpBuffer: root::LPVOID,
            lpBufferSize: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetUserA(
            lpName: *const i8,
            lpUserName: *mut i8,
            lpnLength: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetUserW(
            lpName: root::LPCWSTR,
            lpUserName: root::LPWSTR,
            lpnLength: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetProviderNameA(
            dwNetType: u32,
            lpProviderName: *mut i8,
            lpBufferSize: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetProviderNameW(
            dwNetType: u32,
            lpProviderName: root::LPWSTR,
            lpBufferSize: root::LPDWORD,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NETINFOSTRUCT {
        pub cbStructure: u32,
        pub dwProviderVersion: u32,
        pub dwStatus: u32,
        pub dwCharacteristics: u32,
        pub dwHandle: u64,
        pub wNetType: u16,
        pub dwPrinters: u32,
        pub dwDrives: u32,
    }
    pub type NETINFOSTRUCT = root::_NETINFOSTRUCT;
    pub type LPNETINFOSTRUCT = *mut root::_NETINFOSTRUCT;
    extern "C" {
        pub fn WNetGetNetworkInformationA(
            lpProvider: *const i8,
            lpNetInfoStruct: root::LPNETINFOSTRUCT,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetNetworkInformationW(
            lpProvider: root::LPCWSTR,
            lpNetInfoStruct: root::LPNETINFOSTRUCT,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetLastErrorA(
            lpError: root::LPDWORD,
            lpErrorBuf: *mut i8,
            nErrorBufSize: u32,
            lpNameBuf: *mut i8,
            nNameBufSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn WNetGetLastErrorW(
            lpError: root::LPDWORD,
            lpErrorBuf: root::LPWSTR,
            nErrorBufSize: u32,
            lpNameBuf: root::LPWSTR,
            nNameBufSize: u32,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NETCONNECTINFOSTRUCT {
        pub cbStructure: u32,
        pub dwFlags: u32,
        pub dwSpeed: u32,
        pub dwDelay: u32,
        pub dwOptDataSize: u32,
    }
    pub type NETCONNECTINFOSTRUCT = root::_NETCONNECTINFOSTRUCT;
    pub type LPNETCONNECTINFOSTRUCT = *mut root::_NETCONNECTINFOSTRUCT;
    extern "C" {
        pub fn MultinetGetConnectionPerformanceA(
            lpNetResource: root::LPNETRESOURCEA,
            lpNetConnectInfoStruct: root::LPNETCONNECTINFOSTRUCT,
        ) -> u32;
    }
    extern "C" {
        pub fn MultinetGetConnectionPerformanceW(
            lpNetResource: root::LPNETRESOURCEW,
            lpNetConnectInfoStruct: root::LPNETCONNECTINFOSTRUCT,
        ) -> u32;
    }
    #[repr(C)]
    #[repr(align(2))]
    #[derive(Debug, Copy, Clone)]
    pub struct DDEACK {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
    }
    impl DDEACK {
        #[inline]
        pub fn bAppReturnCode(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
        }
        #[inline]
        pub fn set_bAppReturnCode(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u16) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 6u8, val as u64)
            }
        }
        #[inline]
        pub fn fBusy(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fBusy(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fAck(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fAck(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            bAppReturnCode: u16,
            reserved: u16,
            fBusy: u16,
            fAck: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let bAppReturnCode: u16 = unsafe { ::std::mem::transmute(bAppReturnCode) };
                bAppReturnCode as u64
            });
            __bindgen_bitfield_unit.set(8usize, 6u8, {
                let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let fBusy: u16 = unsafe { ::std::mem::transmute(fBusy) };
                fBusy as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let fAck: u16 = unsafe { ::std::mem::transmute(fAck) };
                fAck as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DDEADVISE {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
        pub cfFormat: i16,
    }
    impl DDEADVISE {
        #[inline]
        pub fn reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 14u8) as u16) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 14u8, val as u64)
            }
        }
        #[inline]
        pub fn fDeferUpd(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fDeferUpd(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fAckReq(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fAckReq(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            reserved: u16,
            fDeferUpd: u16,
            fAckReq: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 14u8, {
                let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let fDeferUpd: u16 = unsafe { ::std::mem::transmute(fDeferUpd) };
                fDeferUpd as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let fAckReq: u16 = unsafe { ::std::mem::transmute(fAckReq) };
                fAckReq as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DDEDATA {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
        pub cfFormat: i16,
        pub Value: [u8; 1usize],
    }
    impl DDEDATA {
        #[inline]
        pub fn unused(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
        }
        #[inline]
        pub fn set_unused(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 12u8, val as u64)
            }
        }
        #[inline]
        pub fn fResponse(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fResponse(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fRelease(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fRelease(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fAckReq(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fAckReq(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            unused: u16,
            fResponse: u16,
            fRelease: u16,
            reserved: u16,
            fAckReq: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 12u8, {
                let unused: u16 = unsafe { ::std::mem::transmute(unused) };
                unused as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let fResponse: u16 = unsafe { ::std::mem::transmute(fResponse) };
                fResponse as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let fRelease: u16 = unsafe { ::std::mem::transmute(fRelease) };
                fRelease as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let fAckReq: u16 = unsafe { ::std::mem::transmute(fAckReq) };
                fAckReq as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DDEPOKE {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
        pub cfFormat: i16,
        pub Value: [u8; 1usize],
    }
    impl DDEPOKE {
        #[inline]
        pub fn unused(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 13u8) as u16) }
        }
        #[inline]
        pub fn set_unused(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 13u8, val as u64)
            }
        }
        #[inline]
        pub fn fRelease(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fRelease(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fReserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
        }
        #[inline]
        pub fn set_fReserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            unused: u16,
            fRelease: u16,
            fReserved: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 13u8, {
                let unused: u16 = unsafe { ::std::mem::transmute(unused) };
                unused as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let fRelease: u16 = unsafe { ::std::mem::transmute(fRelease) };
                fRelease as u64
            });
            __bindgen_bitfield_unit.set(14usize, 2u8, {
                let fReserved: u16 = unsafe { ::std::mem::transmute(fReserved) };
                fReserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DDELN {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
        pub cfFormat: i16,
    }
    impl DDELN {
        #[inline]
        pub fn unused(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 13u8) as u16) }
        }
        #[inline]
        pub fn set_unused(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 13u8, val as u64)
            }
        }
        #[inline]
        pub fn fRelease(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fRelease(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fDeferUpd(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fDeferUpd(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fAckReq(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fAckReq(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            unused: u16,
            fRelease: u16,
            fDeferUpd: u16,
            fAckReq: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 13u8, {
                let unused: u16 = unsafe { ::std::mem::transmute(unused) };
                unused as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let fRelease: u16 = unsafe { ::std::mem::transmute(fRelease) };
                fRelease as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let fDeferUpd: u16 = unsafe { ::std::mem::transmute(fDeferUpd) };
                fDeferUpd as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let fAckReq: u16 = unsafe { ::std::mem::transmute(fAckReq) };
                fAckReq as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DDEUP {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
        pub cfFormat: i16,
        pub rgb: [u8; 1usize],
    }
    impl DDEUP {
        #[inline]
        pub fn unused(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
        }
        #[inline]
        pub fn set_unused(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 12u8, val as u64)
            }
        }
        #[inline]
        pub fn fAck(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fAck(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fRelease(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fRelease(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fReserved(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fReserved(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fAckReq(&self) -> u16 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
        }
        #[inline]
        pub fn set_fAckReq(&mut self, val: u16) {
            unsafe {
                let val: u16 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            unused: u16,
            fAck: u16,
            fRelease: u16,
            fReserved: u16,
            fAckReq: u16,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 12u8, {
                let unused: u16 = unsafe { ::std::mem::transmute(unused) };
                unused as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let fAck: u16 = unsafe { ::std::mem::transmute(fAck) };
                fAck as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let fRelease: u16 = unsafe { ::std::mem::transmute(fRelease) };
                fRelease as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let fReserved: u16 = unsafe { ::std::mem::transmute(fReserved) };
                fReserved as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let fAckReq: u16 = unsafe { ::std::mem::transmute(fAckReq) };
                fAckReq as u64
            });
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        pub fn DdeSetQualityOfService(
            hwndClient: root::HWND,
            pqosNew: *const root::SECURITY_QUALITY_OF_SERVICE,
            pqosPrev: root::PSECURITY_QUALITY_OF_SERVICE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImpersonateDdeClientWindow(
            hWndClient: root::HWND,
            hWndServer: root::HWND,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PackDDElParam(
            msg: root::UINT,
            uiLo: u64,
            uiHi: u64,
        ) -> root::LPARAM;
    }
    extern "C" {
        pub fn UnpackDDElParam(
            msg: root::UINT,
            lParam: root::LPARAM,
            puiLo: root::PUINT_PTR,
            puiHi: root::PUINT_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FreeDDElParam(msg: root::UINT, lParam: root::LPARAM) -> root::BOOL;
    }
    extern "C" {
        pub fn ReuseDDElParam(
            lParam: root::LPARAM,
            msgIn: root::UINT,
            msgOut: root::UINT,
            uiLo: u64,
            uiHi: u64,
        ) -> root::LPARAM;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HCONVLIST__ {
        pub unused: i32,
    }
    pub type HCONVLIST = *mut root::HCONVLIST__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HCONV__ {
        pub unused: i32,
    }
    pub type HCONV = *mut root::HCONV__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HSZ__ {
        pub unused: i32,
    }
    pub type HSZ = *mut root::HSZ__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDDEDATA__ {
        pub unused: i32,
    }
    pub type HDDEDATA = *mut root::HDDEDATA__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagHSZPAIR {
        pub hszSvc: root::HSZ,
        pub hszTopic: root::HSZ,
    }
    pub type HSZPAIR = root::tagHSZPAIR;
    pub type PHSZPAIR = *mut root::tagHSZPAIR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCONVCONTEXT {
        pub cb: root::UINT,
        pub wFlags: root::UINT,
        pub wCountryID: root::UINT,
        pub iCodePage: i32,
        pub dwLangID: u32,
        pub dwSecurity: u32,
        pub qos: root::SECURITY_QUALITY_OF_SERVICE,
    }
    pub type CONVCONTEXT = root::tagCONVCONTEXT;
    pub type PCONVCONTEXT = *mut root::tagCONVCONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCONVINFO {
        pub cb: u32,
        pub hUser: root::DWORD_PTR,
        pub hConvPartner: root::HCONV,
        pub hszSvcPartner: root::HSZ,
        pub hszServiceReq: root::HSZ,
        pub hszTopic: root::HSZ,
        pub hszItem: root::HSZ,
        pub wFmt: root::UINT,
        pub wType: root::UINT,
        pub wStatus: root::UINT,
        pub wConvst: root::UINT,
        pub wLastError: root::UINT,
        pub hConvList: root::HCONVLIST,
        pub ConvCtxt: root::CONVCONTEXT,
        pub hwnd: root::HWND,
        pub hwndPartner: root::HWND,
    }
    pub type CONVINFO = root::tagCONVINFO;
    pub type PCONVINFO = *mut root::tagCONVINFO;
    pub type PFNCALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            wType: root::UINT,
            wFmt: root::UINT,
            hConv: root::HCONV,
            hsz1: root::HSZ,
            hsz2: root::HSZ,
            hData: root::HDDEDATA,
            dwData1: u64,
            dwData2: u64,
        ) -> root::HDDEDATA,
    >;
    extern "C" {
        pub fn DdeInitializeA(
            pidInst: root::LPDWORD,
            pfnCallback: root::PFNCALLBACK,
            afCmd: u32,
            ulRes: u32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DdeInitializeW(
            pidInst: root::LPDWORD,
            pfnCallback: root::PFNCALLBACK,
            afCmd: u32,
            ulRes: u32,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DdeUninitialize(idInst: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeConnectList(
            idInst: u32,
            hszService: root::HSZ,
            hszTopic: root::HSZ,
            hConvList: root::HCONVLIST,
            pCC: root::PCONVCONTEXT,
        ) -> root::HCONVLIST;
    }
    extern "C" {
        pub fn DdeQueryNextServer(
            hConvList: root::HCONVLIST,
            hConvPrev: root::HCONV,
        ) -> root::HCONV;
    }
    extern "C" {
        pub fn DdeDisconnectList(hConvList: root::HCONVLIST) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeConnect(
            idInst: u32,
            hszService: root::HSZ,
            hszTopic: root::HSZ,
            pCC: root::PCONVCONTEXT,
        ) -> root::HCONV;
    }
    extern "C" {
        pub fn DdeDisconnect(hConv: root::HCONV) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeReconnect(hConv: root::HCONV) -> root::HCONV;
    }
    extern "C" {
        pub fn DdeQueryConvInfo(
            hConv: root::HCONV,
            idTransaction: u32,
            pConvInfo: root::PCONVINFO,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DdeSetUserHandle(
            hConv: root::HCONV,
            id: u32,
            hUser: root::DWORD_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeAbandonTransaction(
            idInst: u32,
            hConv: root::HCONV,
            idTransaction: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DdePostAdvise(
            idInst: u32,
            hszTopic: root::HSZ,
            hszItem: root::HSZ,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeEnableCallback(
            idInst: u32,
            hConv: root::HCONV,
            wCmd: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeImpersonateClient(hConv: root::HCONV) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeNameService(
            idInst: u32,
            hsz1: root::HSZ,
            hsz2: root::HSZ,
            afCmd: root::UINT,
        ) -> root::HDDEDATA;
    }
    extern "C" {
        pub fn DdeClientTransaction(
            pData: root::LPBYTE,
            cbData: u32,
            hConv: root::HCONV,
            hszItem: root::HSZ,
            wFmt: root::UINT,
            wType: root::UINT,
            dwTimeout: u32,
            pdwResult: root::LPDWORD,
        ) -> root::HDDEDATA;
    }
    extern "C" {
        pub fn DdeCreateDataHandle(
            idInst: u32,
            pSrc: root::LPBYTE,
            cb: u32,
            cbOff: u32,
            hszItem: root::HSZ,
            wFmt: root::UINT,
            afCmd: root::UINT,
        ) -> root::HDDEDATA;
    }
    extern "C" {
        pub fn DdeAddData(
            hData: root::HDDEDATA,
            pSrc: root::LPBYTE,
            cb: u32,
            cbOff: u32,
        ) -> root::HDDEDATA;
    }
    extern "C" {
        pub fn DdeGetData(
            hData: root::HDDEDATA,
            pDst: root::LPBYTE,
            cbMax: u32,
            cbOff: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn DdeAccessData(hData: root::HDDEDATA, pcbDataSize: root::LPDWORD) -> root::LPBYTE;
    }
    extern "C" {
        pub fn DdeUnaccessData(hData: root::HDDEDATA) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeFreeDataHandle(hData: root::HDDEDATA) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeGetLastError(idInst: u32) -> root::UINT;
    }
    extern "C" {
        pub fn DdeCreateStringHandleA(
            idInst: u32,
            psz: *const i8,
            iCodePage: i32,
        ) -> root::HSZ;
    }
    extern "C" {
        pub fn DdeCreateStringHandleW(
            idInst: u32,
            psz: root::LPCWSTR,
            iCodePage: i32,
        ) -> root::HSZ;
    }
    extern "C" {
        pub fn DdeQueryStringA(
            idInst: u32,
            hsz: root::HSZ,
            psz: *mut i8,
            cchMax: u32,
            iCodePage: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn DdeQueryStringW(
            idInst: u32,
            hsz: root::HSZ,
            psz: root::LPWSTR,
            cchMax: u32,
            iCodePage: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn DdeFreeStringHandle(idInst: u32, hsz: root::HSZ) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeKeepStringHandle(idInst: u32, hsz: root::HSZ) -> root::BOOL;
    }
    extern "C" {
        pub fn DdeCmpStringHandles(hsz1: root::HSZ, hsz2: root::HSZ) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDDEML_MSG_HOOK_DATA {
        pub uiLo: u64,
        pub uiHi: u64,
        pub cbData: u32,
        pub Data: [u32; 8usize],
    }
    pub type DDEML_MSG_HOOK_DATA = root::tagDDEML_MSG_HOOK_DATA;
    pub type PDDEML_MSG_HOOK_DATA = *mut root::tagDDEML_MSG_HOOK_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONMSGSTRUCT {
        pub cb: root::UINT,
        pub hwndTo: root::HWND,
        pub dwTime: u32,
        pub hTask: root::HANDLE,
        pub wMsg: root::UINT,
        pub wParam: root::WPARAM,
        pub lParam: root::LPARAM,
        pub dmhd: root::DDEML_MSG_HOOK_DATA,
    }
    pub type MONMSGSTRUCT = root::tagMONMSGSTRUCT;
    pub type PMONMSGSTRUCT = *mut root::tagMONMSGSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONCBSTRUCT {
        pub cb: root::UINT,
        pub dwTime: u32,
        pub hTask: root::HANDLE,
        pub dwRet: u32,
        pub wType: root::UINT,
        pub wFmt: root::UINT,
        pub hConv: root::HCONV,
        pub hsz1: root::HSZ,
        pub hsz2: root::HSZ,
        pub hData: root::HDDEDATA,
        pub dwData1: u64,
        pub dwData2: u64,
        pub cc: root::CONVCONTEXT,
        pub cbData: u32,
        pub Data: [u32; 8usize],
    }
    pub type MONCBSTRUCT = root::tagMONCBSTRUCT;
    pub type PMONCBSTRUCT = *mut root::tagMONCBSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONHSZSTRUCTA {
        pub cb: root::UINT,
        pub fsAction: root::BOOL,
        pub dwTime: u32,
        pub hsz: root::HSZ,
        pub hTask: root::HANDLE,
        pub str_: [i8; 1usize],
    }
    pub type MONHSZSTRUCTA = root::tagMONHSZSTRUCTA;
    pub type PMONHSZSTRUCTA = *mut root::tagMONHSZSTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONHSZSTRUCTW {
        pub cb: root::UINT,
        pub fsAction: root::BOOL,
        pub dwTime: u32,
        pub hsz: root::HSZ,
        pub hTask: root::HANDLE,
        pub str_: [u16; 1usize],
    }
    pub type MONHSZSTRUCTW = root::tagMONHSZSTRUCTW;
    pub type PMONHSZSTRUCTW = *mut root::tagMONHSZSTRUCTW;
    pub type MONHSZSTRUCT = root::MONHSZSTRUCTA;
    pub type PMONHSZSTRUCT = root::PMONHSZSTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONERRSTRUCT {
        pub cb: root::UINT,
        pub wLastError: root::UINT,
        pub dwTime: u32,
        pub hTask: root::HANDLE,
    }
    pub type MONERRSTRUCT = root::tagMONERRSTRUCT;
    pub type PMONERRSTRUCT = *mut root::tagMONERRSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONLINKSTRUCT {
        pub cb: root::UINT,
        pub dwTime: u32,
        pub hTask: root::HANDLE,
        pub fEstablished: root::BOOL,
        pub fNoData: root::BOOL,
        pub hszSvc: root::HSZ,
        pub hszTopic: root::HSZ,
        pub hszItem: root::HSZ,
        pub wFmt: root::UINT,
        pub fServer: root::BOOL,
        pub hConvServer: root::HCONV,
        pub hConvClient: root::HCONV,
    }
    pub type MONLINKSTRUCT = root::tagMONLINKSTRUCT;
    pub type PMONLINKSTRUCT = *mut root::tagMONLINKSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMONCONVSTRUCT {
        pub cb: root::UINT,
        pub fConnect: root::BOOL,
        pub dwTime: u32,
        pub hTask: root::HANDLE,
        pub hszSvc: root::HSZ,
        pub hszTopic: root::HSZ,
        pub hConvClient: root::HCONV,
        pub hConvServer: root::HCONV,
    }
    pub type MONCONVSTRUCT = root::tagMONCONVSTRUCT;
    pub type PMONCONVSTRUCT = *mut root::tagMONCONVSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCRGB {
        pub bRed: u8,
        pub bGreen: u8,
        pub bBlue: u8,
        pub bExtra: u8,
    }
    pub type CRGB = root::tagCRGB;
    extern "C" {
        pub fn LZStart() -> root::INT;
    }
    extern "C" {
        pub fn LZDone();
    }
    extern "C" {
        pub fn CopyLZFile(hfSource: root::INT, hfDest: root::INT) -> i32;
    }
    extern "C" {
        pub fn LZCopy(hfSource: root::INT, hfDest: root::INT) -> i32;
    }
    extern "C" {
        pub fn LZInit(hfSource: root::INT) -> root::INT;
    }
    extern "C" {
        pub fn GetExpandedNameA(lpszSource: *mut i8, lpszBuffer: *mut i8) -> root::INT;
    }
    extern "C" {
        pub fn GetExpandedNameW(lpszSource: root::LPWSTR, lpszBuffer: root::LPWSTR) -> root::INT;
    }
    extern "C" {
        pub fn LZOpenFileA(
            lpFileName: *mut i8,
            lpReOpenBuf: root::LPOFSTRUCT,
            wStyle: u16,
        ) -> root::INT;
    }
    extern "C" {
        pub fn LZOpenFileW(
            lpFileName: root::LPWSTR,
            lpReOpenBuf: root::LPOFSTRUCT,
            wStyle: u16,
        ) -> root::INT;
    }
    extern "C" {
        pub fn LZSeek(hFile: root::INT, lOffset: i32, iOrigin: root::INT) -> i32;
    }
    extern "C" {
        pub fn LZRead(hFile: root::INT, lpBuffer: *mut i8, cbRead: root::INT) -> root::INT;
    }
    extern "C" {
        pub fn LZClose(hFile: root::INT);
    }
    pub type MMVERSION = root::UINT;
    pub type MMRESULT = root::UINT;
    pub type LPUINT = *mut root::UINT;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct mmtime_tag {
        pub wType: root::UINT,
        pub u: root::mmtime_tag__bindgen_ty_1,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union mmtime_tag__bindgen_ty_1 {
        pub ms: u32,
        pub sample: u32,
        pub cb: u32,
        pub ticks: u32,
        pub smpte: root::mmtime_tag__bindgen_ty_1__bindgen_ty_1,
        pub midi: root::mmtime_tag__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct mmtime_tag__bindgen_ty_1__bindgen_ty_1 {
        pub hour: u8,
        pub min: u8,
        pub sec: u8,
        pub frame: u8,
        pub fps: u8,
        pub dummy: u8,
        pub pad: [u8; 2usize],
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct mmtime_tag__bindgen_ty_1__bindgen_ty_2 {
        pub songptrpos: u32,
    }
    pub type MMTIME = root::mmtime_tag;
    pub type PMMTIME = *mut root::mmtime_tag;
    pub type NPMMTIME = *mut root::mmtime_tag;
    pub type LPMMTIME = *mut root::mmtime_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDRVR__ {
        pub unused: i32,
    }
    pub type HDRVR = *mut root::HDRVR__;
    pub type LPDRVCALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HDRVR,
            arg2: root::UINT,
            arg3: root::DWORD_PTR,
            arg4: root::DWORD_PTR,
            arg5: root::DWORD_PTR,
        ),
    >;
    pub type PDRVCALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HDRVR,
            arg2: root::UINT,
            arg3: root::DWORD_PTR,
            arg4: root::DWORD_PTR,
            arg5: root::DWORD_PTR,
        ),
    >;
    pub type MCIERROR = u32;
    pub type MCIDEVICEID = root::UINT;
    pub type YIELDPROC = ::std::option::Option<
        unsafe extern "C" fn(mciId: root::MCIDEVICEID, dwYieldData: u32) -> root::UINT,
    >;
    extern "C" {
        pub fn mciSendCommandA(
            mciId: root::MCIDEVICEID,
            uMsg: root::UINT,
            dwParam1: root::DWORD_PTR,
            dwParam2: root::DWORD_PTR,
        ) -> root::MCIERROR;
    }
    extern "C" {
        pub fn mciSendCommandW(
            mciId: root::MCIDEVICEID,
            uMsg: root::UINT,
            dwParam1: root::DWORD_PTR,
            dwParam2: root::DWORD_PTR,
        ) -> root::MCIERROR;
    }
    extern "C" {
        pub fn mciSendStringA(
            lpstrCommand: *const i8,
            lpstrReturnString: *mut i8,
            uReturnLength: root::UINT,
            hwndCallback: root::HWND,
        ) -> root::MCIERROR;
    }
    extern "C" {
        pub fn mciSendStringW(
            lpstrCommand: root::LPCWSTR,
            lpstrReturnString: root::LPWSTR,
            uReturnLength: root::UINT,
            hwndCallback: root::HWND,
        ) -> root::MCIERROR;
    }
    extern "C" {
        pub fn mciGetDeviceIDA(pszDevice: *const i8) -> root::MCIDEVICEID;
    }
    extern "C" {
        pub fn mciGetDeviceIDW(pszDevice: root::LPCWSTR) -> root::MCIDEVICEID;
    }
    extern "C" {
        pub fn mciGetDeviceIDFromElementIDA(
            dwElementID: u32,
            lpstrType: *const i8,
        ) -> root::MCIDEVICEID;
    }
    extern "C" {
        pub fn mciGetDeviceIDFromElementIDW(
            dwElementID: u32,
            lpstrType: root::LPCWSTR,
        ) -> root::MCIDEVICEID;
    }
    extern "C" {
        pub fn mciGetErrorStringA(
            mcierr: root::MCIERROR,
            pszText: *mut i8,
            cchText: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn mciGetErrorStringW(
            mcierr: root::MCIERROR,
            pszText: root::LPWSTR,
            cchText: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn mciSetYieldProc(
            mciId: root::MCIDEVICEID,
            fpYieldProc: root::YIELDPROC,
            dwYieldData: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn mciGetCreatorTask(mciId: root::MCIDEVICEID) -> root::HTASK;
    }
    extern "C" {
        pub fn mciGetYieldProc(
            mciId: root::MCIDEVICEID,
            pdwYieldData: root::LPDWORD,
        ) -> root::YIELDPROC;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_GENERIC_PARMS {
        pub dwCallback: root::DWORD_PTR,
    }
    pub type MCI_GENERIC_PARMS = root::tagMCI_GENERIC_PARMS;
    pub type PMCI_GENERIC_PARMS = *mut root::tagMCI_GENERIC_PARMS;
    pub type LPMCI_GENERIC_PARMS = *mut root::tagMCI_GENERIC_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OPEN_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: *const i8,
        pub lpstrElementName: *const i8,
        pub lpstrAlias: *const i8,
    }
    pub type MCI_OPEN_PARMSA = root::tagMCI_OPEN_PARMSA;
    pub type PMCI_OPEN_PARMSA = *mut root::tagMCI_OPEN_PARMSA;
    pub type LPMCI_OPEN_PARMSA = *mut root::tagMCI_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OPEN_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: root::LPCWSTR,
        pub lpstrElementName: root::LPCWSTR,
        pub lpstrAlias: root::LPCWSTR,
    }
    pub type MCI_OPEN_PARMSW = root::tagMCI_OPEN_PARMSW;
    pub type PMCI_OPEN_PARMSW = *mut root::tagMCI_OPEN_PARMSW;
    pub type LPMCI_OPEN_PARMSW = *mut root::tagMCI_OPEN_PARMSW;
    pub type MCI_OPEN_PARMS = root::MCI_OPEN_PARMSA;
    pub type PMCI_OPEN_PARMS = root::PMCI_OPEN_PARMSA;
    pub type LPMCI_OPEN_PARMS = root::LPMCI_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_PLAY_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrom: u32,
        pub dwTo: u32,
    }
    pub type MCI_PLAY_PARMS = root::tagMCI_PLAY_PARMS;
    pub type PMCI_PLAY_PARMS = *mut root::tagMCI_PLAY_PARMS;
    pub type LPMCI_PLAY_PARMS = *mut root::tagMCI_PLAY_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SEEK_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwTo: u32,
    }
    pub type MCI_SEEK_PARMS = root::tagMCI_SEEK_PARMS;
    pub type PMCI_SEEK_PARMS = *mut root::tagMCI_SEEK_PARMS;
    pub type LPMCI_SEEK_PARMS = *mut root::tagMCI_SEEK_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_STATUS_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwReturn: root::DWORD_PTR,
        pub dwItem: u32,
        pub dwTrack: u32,
    }
    pub type MCI_STATUS_PARMS = root::tagMCI_STATUS_PARMS;
    pub type PMCI_STATUS_PARMS = *mut root::tagMCI_STATUS_PARMS;
    pub type LPMCI_STATUS_PARMS = *mut root::tagMCI_STATUS_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_INFO_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpstrReturn: *mut i8,
        pub dwRetSize: u32,
    }
    pub type MCI_INFO_PARMSA = root::tagMCI_INFO_PARMSA;
    pub type LPMCI_INFO_PARMSA = *mut root::tagMCI_INFO_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_INFO_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpstrReturn: root::LPWSTR,
        pub dwRetSize: u32,
    }
    pub type MCI_INFO_PARMSW = root::tagMCI_INFO_PARMSW;
    pub type LPMCI_INFO_PARMSW = *mut root::tagMCI_INFO_PARMSW;
    pub type MCI_INFO_PARMS = root::MCI_INFO_PARMSA;
    pub type LPMCI_INFO_PARMS = root::LPMCI_INFO_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_GETDEVCAPS_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwReturn: u32,
        pub dwItem: u32,
    }
    pub type MCI_GETDEVCAPS_PARMS = root::tagMCI_GETDEVCAPS_PARMS;
    pub type PMCI_GETDEVCAPS_PARMS = *mut root::tagMCI_GETDEVCAPS_PARMS;
    pub type LPMCI_GETDEVCAPS_PARMS = *mut root::tagMCI_GETDEVCAPS_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SYSINFO_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpstrReturn: *mut i8,
        pub dwRetSize: u32,
        pub dwNumber: u32,
        pub wDeviceType: root::UINT,
    }
    pub type MCI_SYSINFO_PARMSA = root::tagMCI_SYSINFO_PARMSA;
    pub type PMCI_SYSINFO_PARMSA = *mut root::tagMCI_SYSINFO_PARMSA;
    pub type LPMCI_SYSINFO_PARMSA = *mut root::tagMCI_SYSINFO_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SYSINFO_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpstrReturn: root::LPWSTR,
        pub dwRetSize: u32,
        pub dwNumber: u32,
        pub wDeviceType: root::UINT,
    }
    pub type MCI_SYSINFO_PARMSW = root::tagMCI_SYSINFO_PARMSW;
    pub type PMCI_SYSINFO_PARMSW = *mut root::tagMCI_SYSINFO_PARMSW;
    pub type LPMCI_SYSINFO_PARMSW = *mut root::tagMCI_SYSINFO_PARMSW;
    pub type MCI_SYSINFO_PARMS = root::MCI_SYSINFO_PARMSA;
    pub type PMCI_SYSINFO_PARMS = root::PMCI_SYSINFO_PARMSA;
    pub type LPMCI_SYSINFO_PARMS = root::LPMCI_SYSINFO_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SET_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwTimeFormat: u32,
        pub dwAudio: u32,
    }
    pub type MCI_SET_PARMS = root::tagMCI_SET_PARMS;
    pub type PMCI_SET_PARMS = *mut root::tagMCI_SET_PARMS;
    pub type LPMCI_SET_PARMS = *mut root::tagMCI_SET_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_BREAK_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub nVirtKey: i32,
        pub hwndBreak: root::HWND,
    }
    pub type MCI_BREAK_PARMS = root::tagMCI_BREAK_PARMS;
    pub type PMCI_BREAK_PARMS = *mut root::tagMCI_BREAK_PARMS;
    pub type LPMCI_BREAK_PARMS = *mut root::tagMCI_BREAK_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SAVE_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: *const i8,
    }
    pub type MCI_SAVE_PARMSA = root::tagMCI_SAVE_PARMSA;
    pub type PMCI_SAVE_PARMSA = *mut root::tagMCI_SAVE_PARMSA;
    pub type LPMCI_SAVE_PARMSA = *mut root::tagMCI_SAVE_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SAVE_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: root::LPCWSTR,
    }
    pub type MCI_SAVE_PARMSW = root::tagMCI_SAVE_PARMSW;
    pub type PMCI_SAVE_PARMSW = *mut root::tagMCI_SAVE_PARMSW;
    pub type LPMCI_SAVE_PARMSW = *mut root::tagMCI_SAVE_PARMSW;
    pub type MCI_SAVE_PARMS = root::MCI_SAVE_PARMSA;
    pub type PMCI_SAVE_PARMS = root::PMCI_SAVE_PARMSA;
    pub type LPMCI_SAVE_PARMS = root::LPMCI_SAVE_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_LOAD_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: *const i8,
    }
    pub type MCI_LOAD_PARMSA = root::tagMCI_LOAD_PARMSA;
    pub type PMCI_LOAD_PARMSA = *mut root::tagMCI_LOAD_PARMSA;
    pub type LPMCI_LOAD_PARMSA = *mut root::tagMCI_LOAD_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_LOAD_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: root::LPCWSTR,
    }
    pub type MCI_LOAD_PARMSW = root::tagMCI_LOAD_PARMSW;
    pub type PMCI_LOAD_PARMSW = *mut root::tagMCI_LOAD_PARMSW;
    pub type LPMCI_LOAD_PARMSW = *mut root::tagMCI_LOAD_PARMSW;
    pub type MCI_LOAD_PARMS = root::MCI_LOAD_PARMSA;
    pub type PMCI_LOAD_PARMS = root::PMCI_LOAD_PARMSA;
    pub type LPMCI_LOAD_PARMS = root::LPMCI_LOAD_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_RECORD_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrom: u32,
        pub dwTo: u32,
    }
    pub type MCI_RECORD_PARMS = root::tagMCI_RECORD_PARMS;
    pub type LPMCI_RECORD_PARMS = *mut root::tagMCI_RECORD_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_VD_PLAY_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrom: u32,
        pub dwTo: u32,
        pub dwSpeed: u32,
    }
    pub type MCI_VD_PLAY_PARMS = root::tagMCI_VD_PLAY_PARMS;
    pub type PMCI_VD_PLAY_PARMS = *mut root::tagMCI_VD_PLAY_PARMS;
    pub type LPMCI_VD_PLAY_PARMS = *mut root::tagMCI_VD_PLAY_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_VD_STEP_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrames: u32,
    }
    pub type MCI_VD_STEP_PARMS = root::tagMCI_VD_STEP_PARMS;
    pub type PMCI_VD_STEP_PARMS = *mut root::tagMCI_VD_STEP_PARMS;
    pub type LPMCI_VD_STEP_PARMS = *mut root::tagMCI_VD_STEP_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_VD_ESCAPE_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpstrCommand: *const i8,
    }
    pub type MCI_VD_ESCAPE_PARMSA = root::tagMCI_VD_ESCAPE_PARMSA;
    pub type PMCI_VD_ESCAPE_PARMSA = *mut root::tagMCI_VD_ESCAPE_PARMSA;
    pub type LPMCI_VD_ESCAPE_PARMSA = *mut root::tagMCI_VD_ESCAPE_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_VD_ESCAPE_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpstrCommand: root::LPCWSTR,
    }
    pub type MCI_VD_ESCAPE_PARMSW = root::tagMCI_VD_ESCAPE_PARMSW;
    pub type PMCI_VD_ESCAPE_PARMSW = *mut root::tagMCI_VD_ESCAPE_PARMSW;
    pub type LPMCI_VD_ESCAPE_PARMSW = *mut root::tagMCI_VD_ESCAPE_PARMSW;
    pub type MCI_VD_ESCAPE_PARMS = root::MCI_VD_ESCAPE_PARMSA;
    pub type PMCI_VD_ESCAPE_PARMS = root::PMCI_VD_ESCAPE_PARMSA;
    pub type LPMCI_VD_ESCAPE_PARMS = root::LPMCI_VD_ESCAPE_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_WAVE_OPEN_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: *const i8,
        pub lpstrElementName: *const i8,
        pub lpstrAlias: *const i8,
        pub dwBufferSeconds: u32,
    }
    pub type MCI_WAVE_OPEN_PARMSA = root::tagMCI_WAVE_OPEN_PARMSA;
    pub type PMCI_WAVE_OPEN_PARMSA = *mut root::tagMCI_WAVE_OPEN_PARMSA;
    pub type LPMCI_WAVE_OPEN_PARMSA = *mut root::tagMCI_WAVE_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_WAVE_OPEN_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: root::LPCWSTR,
        pub lpstrElementName: root::LPCWSTR,
        pub lpstrAlias: root::LPCWSTR,
        pub dwBufferSeconds: u32,
    }
    pub type MCI_WAVE_OPEN_PARMSW = root::tagMCI_WAVE_OPEN_PARMSW;
    pub type PMCI_WAVE_OPEN_PARMSW = *mut root::tagMCI_WAVE_OPEN_PARMSW;
    pub type LPMCI_WAVE_OPEN_PARMSW = *mut root::tagMCI_WAVE_OPEN_PARMSW;
    pub type MCI_WAVE_OPEN_PARMS = root::MCI_WAVE_OPEN_PARMSA;
    pub type PMCI_WAVE_OPEN_PARMS = root::PMCI_WAVE_OPEN_PARMSA;
    pub type LPMCI_WAVE_OPEN_PARMS = root::LPMCI_WAVE_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_WAVE_DELETE_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrom: u32,
        pub dwTo: u32,
    }
    pub type MCI_WAVE_DELETE_PARMS = root::tagMCI_WAVE_DELETE_PARMS;
    pub type PMCI_WAVE_DELETE_PARMS = *mut root::tagMCI_WAVE_DELETE_PARMS;
    pub type LPMCI_WAVE_DELETE_PARMS = *mut root::tagMCI_WAVE_DELETE_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_WAVE_SET_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwTimeFormat: u32,
        pub dwAudio: u32,
        pub wInput: root::UINT,
        pub wOutput: root::UINT,
        pub wFormatTag: u16,
        pub wReserved2: u16,
        pub nChannels: u16,
        pub wReserved3: u16,
        pub nSamplesPerSec: u32,
        pub nAvgBytesPerSec: u32,
        pub nBlockAlign: u16,
        pub wReserved4: u16,
        pub wBitsPerSample: u16,
        pub wReserved5: u16,
    }
    pub type MCI_WAVE_SET_PARMS = root::tagMCI_WAVE_SET_PARMS;
    pub type PMCI_WAVE_SET_PARMS = *mut root::tagMCI_WAVE_SET_PARMS;
    pub type LPMCI_WAVE_SET_PARMS = *mut root::tagMCI_WAVE_SET_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_SEQ_SET_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwTimeFormat: u32,
        pub dwAudio: u32,
        pub dwTempo: u32,
        pub dwPort: u32,
        pub dwSlave: u32,
        pub dwMaster: u32,
        pub dwOffset: u32,
    }
    pub type MCI_SEQ_SET_PARMS = root::tagMCI_SEQ_SET_PARMS;
    pub type PMCI_SEQ_SET_PARMS = *mut root::tagMCI_SEQ_SET_PARMS;
    pub type LPMCI_SEQ_SET_PARMS = *mut root::tagMCI_SEQ_SET_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_OPEN_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: *const i8,
        pub lpstrElementName: *const i8,
        pub lpstrAlias: *const i8,
        pub dwStyle: u32,
        pub hWndParent: root::HWND,
    }
    pub type MCI_ANIM_OPEN_PARMSA = root::tagMCI_ANIM_OPEN_PARMSA;
    pub type PMCI_ANIM_OPEN_PARMSA = *mut root::tagMCI_ANIM_OPEN_PARMSA;
    pub type LPMCI_ANIM_OPEN_PARMSA = *mut root::tagMCI_ANIM_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_OPEN_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: root::LPCWSTR,
        pub lpstrElementName: root::LPCWSTR,
        pub lpstrAlias: root::LPCWSTR,
        pub dwStyle: u32,
        pub hWndParent: root::HWND,
    }
    pub type MCI_ANIM_OPEN_PARMSW = root::tagMCI_ANIM_OPEN_PARMSW;
    pub type PMCI_ANIM_OPEN_PARMSW = *mut root::tagMCI_ANIM_OPEN_PARMSW;
    pub type LPMCI_ANIM_OPEN_PARMSW = *mut root::tagMCI_ANIM_OPEN_PARMSW;
    pub type MCI_ANIM_OPEN_PARMS = root::MCI_ANIM_OPEN_PARMSA;
    pub type PMCI_ANIM_OPEN_PARMS = root::PMCI_ANIM_OPEN_PARMSA;
    pub type LPMCI_ANIM_OPEN_PARMS = root::LPMCI_ANIM_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_PLAY_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrom: u32,
        pub dwTo: u32,
        pub dwSpeed: u32,
    }
    pub type MCI_ANIM_PLAY_PARMS = root::tagMCI_ANIM_PLAY_PARMS;
    pub type PMCI_ANIM_PLAY_PARMS = *mut root::tagMCI_ANIM_PLAY_PARMS;
    pub type LPMCI_ANIM_PLAY_PARMS = *mut root::tagMCI_ANIM_PLAY_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_STEP_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub dwFrames: u32,
    }
    pub type MCI_ANIM_STEP_PARMS = root::tagMCI_ANIM_STEP_PARMS;
    pub type PMCI_ANIM_STEP_PARMS = *mut root::tagMCI_ANIM_STEP_PARMS;
    pub type LPMCI_ANIM_STEP_PARMS = *mut root::tagMCI_ANIM_STEP_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_WINDOW_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub hWnd: root::HWND,
        pub nCmdShow: root::UINT,
        pub lpstrText: *const i8,
    }
    pub type MCI_ANIM_WINDOW_PARMSA = root::tagMCI_ANIM_WINDOW_PARMSA;
    pub type PMCI_ANIM_WINDOW_PARMSA = *mut root::tagMCI_ANIM_WINDOW_PARMSA;
    pub type LPMCI_ANIM_WINDOW_PARMSA = *mut root::tagMCI_ANIM_WINDOW_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_WINDOW_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub hWnd: root::HWND,
        pub nCmdShow: root::UINT,
        pub lpstrText: root::LPCWSTR,
    }
    pub type MCI_ANIM_WINDOW_PARMSW = root::tagMCI_ANIM_WINDOW_PARMSW;
    pub type PMCI_ANIM_WINDOW_PARMSW = *mut root::tagMCI_ANIM_WINDOW_PARMSW;
    pub type LPMCI_ANIM_WINDOW_PARMSW = *mut root::tagMCI_ANIM_WINDOW_PARMSW;
    pub type MCI_ANIM_WINDOW_PARMS = root::MCI_ANIM_WINDOW_PARMSA;
    pub type PMCI_ANIM_WINDOW_PARMS = root::PMCI_ANIM_WINDOW_PARMSA;
    pub type LPMCI_ANIM_WINDOW_PARMS = root::LPMCI_ANIM_WINDOW_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_RECT_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub rc: root::RECT,
    }
    pub type MCI_ANIM_RECT_PARMS = root::tagMCI_ANIM_RECT_PARMS;
    pub type PMCI_ANIM_RECT_PARMS = *mut root::MCI_ANIM_RECT_PARMS;
    pub type LPMCI_ANIM_RECT_PARMS = *mut root::MCI_ANIM_RECT_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_ANIM_UPDATE_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub rc: root::RECT,
        pub hDC: root::HDC,
    }
    pub type MCI_ANIM_UPDATE_PARMS = root::tagMCI_ANIM_UPDATE_PARMS;
    pub type PMCI_ANIM_UPDATE_PARMS = *mut root::tagMCI_ANIM_UPDATE_PARMS;
    pub type LPMCI_ANIM_UPDATE_PARMS = *mut root::tagMCI_ANIM_UPDATE_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_OPEN_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: *const i8,
        pub lpstrElementName: *const i8,
        pub lpstrAlias: *const i8,
        pub dwStyle: u32,
        pub hWndParent: root::HWND,
    }
    pub type MCI_OVLY_OPEN_PARMSA = root::tagMCI_OVLY_OPEN_PARMSA;
    pub type PMCI_OVLY_OPEN_PARMSA = *mut root::tagMCI_OVLY_OPEN_PARMSA;
    pub type LPMCI_OVLY_OPEN_PARMSA = *mut root::tagMCI_OVLY_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_OPEN_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub wDeviceID: root::MCIDEVICEID,
        pub lpstrDeviceType: root::LPCWSTR,
        pub lpstrElementName: root::LPCWSTR,
        pub lpstrAlias: root::LPCWSTR,
        pub dwStyle: u32,
        pub hWndParent: root::HWND,
    }
    pub type MCI_OVLY_OPEN_PARMSW = root::tagMCI_OVLY_OPEN_PARMSW;
    pub type PMCI_OVLY_OPEN_PARMSW = *mut root::tagMCI_OVLY_OPEN_PARMSW;
    pub type LPMCI_OVLY_OPEN_PARMSW = *mut root::tagMCI_OVLY_OPEN_PARMSW;
    pub type MCI_OVLY_OPEN_PARMS = root::MCI_OVLY_OPEN_PARMSA;
    pub type PMCI_OVLY_OPEN_PARMS = root::PMCI_OVLY_OPEN_PARMSA;
    pub type LPMCI_OVLY_OPEN_PARMS = root::LPMCI_OVLY_OPEN_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_WINDOW_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub hWnd: root::HWND,
        pub nCmdShow: root::UINT,
        pub lpstrText: *const i8,
    }
    pub type MCI_OVLY_WINDOW_PARMSA = root::tagMCI_OVLY_WINDOW_PARMSA;
    pub type PMCI_OVLY_WINDOW_PARMSA = *mut root::tagMCI_OVLY_WINDOW_PARMSA;
    pub type LPMCI_OVLY_WINDOW_PARMSA = *mut root::tagMCI_OVLY_WINDOW_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_WINDOW_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub hWnd: root::HWND,
        pub nCmdShow: root::UINT,
        pub lpstrText: root::LPCWSTR,
    }
    pub type MCI_OVLY_WINDOW_PARMSW = root::tagMCI_OVLY_WINDOW_PARMSW;
    pub type PMCI_OVLY_WINDOW_PARMSW = *mut root::tagMCI_OVLY_WINDOW_PARMSW;
    pub type LPMCI_OVLY_WINDOW_PARMSW = *mut root::tagMCI_OVLY_WINDOW_PARMSW;
    pub type MCI_OVLY_WINDOW_PARMS = root::MCI_OVLY_WINDOW_PARMSA;
    pub type PMCI_OVLY_WINDOW_PARMS = root::PMCI_OVLY_WINDOW_PARMSA;
    pub type LPMCI_OVLY_WINDOW_PARMS = root::LPMCI_OVLY_WINDOW_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_RECT_PARMS {
        pub dwCallback: root::DWORD_PTR,
        pub rc: root::RECT,
    }
    pub type MCI_OVLY_RECT_PARMS = root::tagMCI_OVLY_RECT_PARMS;
    pub type PMCI_OVLY_RECT_PARMS = *mut root::tagMCI_OVLY_RECT_PARMS;
    pub type LPMCI_OVLY_RECT_PARMS = *mut root::tagMCI_OVLY_RECT_PARMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_SAVE_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: *const i8,
        pub rc: root::RECT,
    }
    pub type MCI_OVLY_SAVE_PARMSA = root::tagMCI_OVLY_SAVE_PARMSA;
    pub type PMCI_OVLY_SAVE_PARMSA = *mut root::tagMCI_OVLY_SAVE_PARMSA;
    pub type LPMCI_OVLY_SAVE_PARMSA = *mut root::tagMCI_OVLY_SAVE_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_SAVE_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: root::LPCWSTR,
        pub rc: root::RECT,
    }
    pub type MCI_OVLY_SAVE_PARMSW = root::tagMCI_OVLY_SAVE_PARMSW;
    pub type PMCI_OVLY_SAVE_PARMSW = *mut root::tagMCI_OVLY_SAVE_PARMSW;
    pub type LPMCI_OVLY_SAVE_PARMSW = *mut root::tagMCI_OVLY_SAVE_PARMSW;
    pub type MCI_OVLY_SAVE_PARMS = root::MCI_OVLY_SAVE_PARMSA;
    pub type PMCI_OVLY_SAVE_PARMS = root::PMCI_OVLY_SAVE_PARMSA;
    pub type LPMCI_OVLY_SAVE_PARMS = root::LPMCI_OVLY_SAVE_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_LOAD_PARMSA {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: *const i8,
        pub rc: root::RECT,
    }
    pub type MCI_OVLY_LOAD_PARMSA = root::tagMCI_OVLY_LOAD_PARMSA;
    pub type PMCI_OVLY_LOAD_PARMSA = *mut root::tagMCI_OVLY_LOAD_PARMSA;
    pub type LPMCI_OVLY_LOAD_PARMSA = *mut root::tagMCI_OVLY_LOAD_PARMSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMCI_OVLY_LOAD_PARMSW {
        pub dwCallback: root::DWORD_PTR,
        pub lpfilename: root::LPCWSTR,
        pub rc: root::RECT,
    }
    pub type MCI_OVLY_LOAD_PARMSW = root::tagMCI_OVLY_LOAD_PARMSW;
    pub type PMCI_OVLY_LOAD_PARMSW = *mut root::tagMCI_OVLY_LOAD_PARMSW;
    pub type LPMCI_OVLY_LOAD_PARMSW = *mut root::tagMCI_OVLY_LOAD_PARMSW;
    pub type MCI_OVLY_LOAD_PARMS = root::MCI_OVLY_LOAD_PARMSA;
    pub type PMCI_OVLY_LOAD_PARMS = root::PMCI_OVLY_LOAD_PARMSA;
    pub type LPMCI_OVLY_LOAD_PARMS = root::LPMCI_OVLY_LOAD_PARMSA;
    extern "C" {
        pub fn mciGetDriverData(wDeviceID: root::MCIDEVICEID) -> root::DWORD_PTR;
    }
    extern "C" {
        pub fn mciLoadCommandResource(
            hInstance: root::HANDLE,
            lpResName: root::LPCWSTR,
            wType: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn mciSetDriverData(
            wDeviceID: root::MCIDEVICEID,
            dwData: root::DWORD_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn mciDriverYield(wDeviceID: root::MCIDEVICEID) -> root::UINT;
    }
    extern "C" {
        pub fn mciDriverNotify(
            hwndCallback: root::HANDLE,
            wDeviceID: root::MCIDEVICEID,
            uStatus: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn mciFreeCommandResource(wTable: root::UINT) -> root::BOOL;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct DRVCONFIGINFOEX {
        pub dwDCISize: u32,
        pub lpszDCISectionName: root::LPCWSTR,
        pub lpszDCIAliasName: root::LPCWSTR,
        pub dnDevNode: u32,
    }
    pub type PDRVCONFIGINFOEX = *mut root::DRVCONFIGINFOEX;
    pub type NPDRVCONFIGINFOEX = *mut root::DRVCONFIGINFOEX;
    pub type LPDRVCONFIGINFOEX = *mut root::DRVCONFIGINFOEX;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDRVCONFIGINFO {
        pub dwDCISize: u32,
        pub lpszDCISectionName: root::LPCWSTR,
        pub lpszDCIAliasName: root::LPCWSTR,
    }
    pub type DRVCONFIGINFO = root::tagDRVCONFIGINFO;
    pub type PDRVCONFIGINFO = *mut root::tagDRVCONFIGINFO;
    pub type NPDRVCONFIGINFO = *mut root::tagDRVCONFIGINFO;
    pub type LPDRVCONFIGINFO = *mut root::tagDRVCONFIGINFO;
    pub type DRIVERPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::DWORD_PTR,
            arg2: root::HDRVR,
            arg3: root::UINT,
            arg4: root::LPARAM,
            arg5: root::LPARAM,
        ) -> root::LRESULT,
    >;
    extern "C" {
        pub fn CloseDriver(
            hDriver: root::HDRVR,
            lParam1: root::LPARAM,
            lParam2: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn OpenDriver(
            szDriverName: root::LPCWSTR,
            szSectionName: root::LPCWSTR,
            lParam2: root::LPARAM,
        ) -> root::HDRVR;
    }
    extern "C" {
        pub fn SendDriverMessage(
            hDriver: root::HDRVR,
            message: root::UINT,
            lParam1: root::LPARAM,
            lParam2: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DrvGetModuleHandle(hDriver: root::HDRVR) -> root::HMODULE;
    }
    extern "C" {
        pub fn GetDriverModuleHandle(hDriver: root::HDRVR) -> root::HMODULE;
    }
    extern "C" {
        pub fn DefDriverProc(
            dwDriverIdentifier: root::DWORD_PTR,
            hdrvr: root::HDRVR,
            uMsg: root::UINT,
            lParam1: root::LPARAM,
            lParam2: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DriverCallback(
            dwCallback: root::DWORD_PTR,
            dwFlags: u32,
            hDevice: root::HDRVR,
            dwMsg: u32,
            dwUser: root::DWORD_PTR,
            dwParam1: root::DWORD_PTR,
            dwParam2: root::DWORD_PTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn sndOpenSound(
            EventName: root::LPCWSTR,
            AppName: root::LPCWSTR,
            Flags: root::INT32,
            FileHandle: root::PHANDLE,
        ) -> i32;
    }
    pub type DRIVERMSGPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: u32,
            arg2: u32,
            arg3: root::DWORD_PTR,
            arg4: root::DWORD_PTR,
            arg5: root::DWORD_PTR,
        ) -> u32,
    >;
    extern "C" {
        pub fn mmDrvInstall(
            hDriver: root::HDRVR,
            wszDrvEntry: root::LPCWSTR,
            drvMessage: root::DRIVERMSGPROC,
            wFlags: root::UINT,
        ) -> root::UINT;
    }
    pub type FOURCC = u32;
    pub type HPSTR = *mut i8;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMMIO__ {
        pub unused: i32,
    }
    pub type HMMIO = *mut root::HMMIO__;
    pub type LPMMIOPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut i8,
            arg2: root::UINT,
            arg3: root::LPARAM,
            arg4: root::LPARAM,
        ) -> root::LRESULT,
    >;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MMIOINFO {
        pub dwFlags: u32,
        pub fccIOProc: root::FOURCC,
        pub pIOProc: root::LPMMIOPROC,
        pub wErrorRet: root::UINT,
        pub htask: root::HTASK,
        pub cchBuffer: i32,
        pub pchBuffer: root::HPSTR,
        pub pchNext: root::HPSTR,
        pub pchEndRead: root::HPSTR,
        pub pchEndWrite: root::HPSTR,
        pub lBufOffset: i32,
        pub lDiskOffset: i32,
        pub adwInfo: [u32; 3usize],
        pub dwReserved1: u32,
        pub dwReserved2: u32,
        pub hmmio: root::HMMIO,
    }
    pub type MMIOINFO = root::_MMIOINFO;
    pub type PMMIOINFO = *mut root::_MMIOINFO;
    pub type NPMMIOINFO = *mut root::_MMIOINFO;
    pub type LPMMIOINFO = *mut root::_MMIOINFO;
    pub type LPCMMIOINFO = *const root::MMIOINFO;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MMCKINFO {
        pub ckid: root::FOURCC,
        pub cksize: u32,
        pub fccType: root::FOURCC,
        pub dwDataOffset: u32,
        pub dwFlags: u32,
    }
    pub type MMCKINFO = root::_MMCKINFO;
    pub type PMMCKINFO = *mut root::_MMCKINFO;
    pub type NPMMCKINFO = *mut root::_MMCKINFO;
    pub type LPMMCKINFO = *mut root::_MMCKINFO;
    pub type LPCMMCKINFO = *const root::MMCKINFO;
    extern "C" {
        pub fn mmioStringToFOURCCA(sz: *const i8, uFlags: root::UINT) -> root::FOURCC;
    }
    extern "C" {
        pub fn mmioStringToFOURCCW(sz: root::LPCWSTR, uFlags: root::UINT) -> root::FOURCC;
    }
    extern "C" {
        pub fn mmioInstallIOProcA(
            fccIOProc: root::FOURCC,
            pIOProc: root::LPMMIOPROC,
            dwFlags: u32,
        ) -> root::LPMMIOPROC;
    }
    extern "C" {
        pub fn mmioInstallIOProcW(
            fccIOProc: root::FOURCC,
            pIOProc: root::LPMMIOPROC,
            dwFlags: u32,
        ) -> root::LPMMIOPROC;
    }
    extern "C" {
        pub fn mmioOpenA(
            pszFileName: *mut i8,
            pmmioinfo: root::LPMMIOINFO,
            fdwOpen: u32,
        ) -> root::HMMIO;
    }
    extern "C" {
        pub fn mmioOpenW(
            pszFileName: root::LPWSTR,
            pmmioinfo: root::LPMMIOINFO,
            fdwOpen: u32,
        ) -> root::HMMIO;
    }
    extern "C" {
        pub fn mmioRenameA(
            pszFileName: *const i8,
            pszNewFileName: *const i8,
            pmmioinfo: root::LPCMMIOINFO,
            fdwRename: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioRenameW(
            pszFileName: root::LPCWSTR,
            pszNewFileName: root::LPCWSTR,
            pmmioinfo: root::LPCMMIOINFO,
            fdwRename: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioClose(hmmio: root::HMMIO, fuClose: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioRead(hmmio: root::HMMIO, pch: root::HPSTR, cch: i32) -> i32;
    }
    extern "C" {
        pub fn mmioWrite(
            hmmio: root::HMMIO,
            pch: *const i8,
            cch: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn mmioSeek(
            hmmio: root::HMMIO,
            lOffset: i32,
            iOrigin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn mmioGetInfo(
            hmmio: root::HMMIO,
            pmmioinfo: root::LPMMIOINFO,
            fuInfo: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioSetInfo(
            hmmio: root::HMMIO,
            pmmioinfo: root::LPCMMIOINFO,
            fuInfo: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioSetBuffer(
            hmmio: root::HMMIO,
            pchBuffer: *mut i8,
            cchBuffer: i32,
            fuBuffer: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioFlush(hmmio: root::HMMIO, fuFlush: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioAdvance(
            hmmio: root::HMMIO,
            pmmioinfo: root::LPMMIOINFO,
            fuAdvance: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioSendMessage(
            hmmio: root::HMMIO,
            uMsg: root::UINT,
            lParam1: root::LPARAM,
            lParam2: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn mmioDescend(
            hmmio: root::HMMIO,
            pmmcki: root::LPMMCKINFO,
            pmmckiParent: *const root::MMCKINFO,
            fuDescend: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioAscend(
            hmmio: root::HMMIO,
            pmmcki: root::LPMMCKINFO,
            fuAscend: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mmioCreateChunk(
            hmmio: root::HMMIO,
            pmmcki: root::LPMMCKINFO,
            fuCreate: root::UINT,
        ) -> root::MMRESULT;
    }
    pub type LPTIMECALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::UINT,
            arg2: root::UINT,
            arg3: root::DWORD_PTR,
            arg4: root::DWORD_PTR,
            arg5: root::DWORD_PTR,
        ),
    >;
    extern "C" {
        pub fn timeSetEvent(
            uDelay: root::UINT,
            uResolution: root::UINT,
            fptc: root::LPTIMECALLBACK,
            dwUser: root::DWORD_PTR,
            fuEvent: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn timeKillEvent(uTimerID: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn sndPlaySoundA(pszSound: *const i8, fuSound: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn sndPlaySoundW(pszSound: root::LPCWSTR, fuSound: root::UINT) -> root::BOOL;
    }
    extern "C" {
        pub fn PlaySoundA(
            pszSound: *const i8,
            hmod: root::HMODULE,
            fdwSound: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PlaySoundW(
            pszSound: root::LPCWSTR,
            hmod: root::HMODULE,
            fdwSound: u32,
        ) -> root::BOOL;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWAVE__ {
        pub unused: i32,
    }
    pub type HWAVE = *mut root::HWAVE__;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWAVEIN__ {
        pub unused: i32,
    }
    pub type HWAVEIN = *mut root::HWAVEIN__;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWAVEOUT__ {
        pub unused: i32,
    }
    pub type HWAVEOUT = *mut root::HWAVEOUT__;
    pub type LPHWAVEIN = *mut root::HWAVEIN;
    pub type LPHWAVEOUT = *mut root::HWAVEOUT;
    pub type LPWAVECALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HDRVR,
            arg2: root::UINT,
            arg3: root::DWORD_PTR,
            arg4: root::DWORD_PTR,
            arg5: root::DWORD_PTR,
        ),
    >;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct wavehdr_tag {
        pub lpData: *mut i8,
        pub dwBufferLength: u32,
        pub dwBytesRecorded: u32,
        pub dwUser: root::DWORD_PTR,
        pub dwFlags: u32,
        pub dwLoops: u32,
        pub lpNext: *mut root::wavehdr_tag,
        pub reserved: root::DWORD_PTR,
    }
    pub type WAVEHDR = root::wavehdr_tag;
    pub type PWAVEHDR = *mut root::wavehdr_tag;
    pub type NPWAVEHDR = *mut root::wavehdr_tag;
    pub type LPWAVEHDR = *mut root::wavehdr_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEOUTCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
    }
    pub type WAVEOUTCAPSA = root::tagWAVEOUTCAPSA;
    pub type PWAVEOUTCAPSA = *mut root::tagWAVEOUTCAPSA;
    pub type NPWAVEOUTCAPSA = *mut root::tagWAVEOUTCAPSA;
    pub type LPWAVEOUTCAPSA = *mut root::tagWAVEOUTCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEOUTCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
    }
    pub type WAVEOUTCAPSW = root::tagWAVEOUTCAPSW;
    pub type PWAVEOUTCAPSW = *mut root::tagWAVEOUTCAPSW;
    pub type NPWAVEOUTCAPSW = *mut root::tagWAVEOUTCAPSW;
    pub type LPWAVEOUTCAPSW = *mut root::tagWAVEOUTCAPSW;
    pub type WAVEOUTCAPS = root::WAVEOUTCAPSA;
    pub type PWAVEOUTCAPS = root::PWAVEOUTCAPSA;
    pub type NPWAVEOUTCAPS = root::NPWAVEOUTCAPSA;
    pub type LPWAVEOUTCAPS = root::LPWAVEOUTCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEOUTCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type WAVEOUTCAPS2A = root::tagWAVEOUTCAPS2A;
    pub type PWAVEOUTCAPS2A = *mut root::tagWAVEOUTCAPS2A;
    pub type NPWAVEOUTCAPS2A = *mut root::tagWAVEOUTCAPS2A;
    pub type LPWAVEOUTCAPS2A = *mut root::tagWAVEOUTCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEOUTCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type WAVEOUTCAPS2W = root::tagWAVEOUTCAPS2W;
    pub type PWAVEOUTCAPS2W = *mut root::tagWAVEOUTCAPS2W;
    pub type NPWAVEOUTCAPS2W = *mut root::tagWAVEOUTCAPS2W;
    pub type LPWAVEOUTCAPS2W = *mut root::tagWAVEOUTCAPS2W;
    pub type WAVEOUTCAPS2 = root::WAVEOUTCAPS2A;
    pub type PWAVEOUTCAPS2 = root::PWAVEOUTCAPS2A;
    pub type NPWAVEOUTCAPS2 = root::NPWAVEOUTCAPS2A;
    pub type LPWAVEOUTCAPS2 = root::LPWAVEOUTCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEINCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
    }
    pub type WAVEINCAPSA = root::tagWAVEINCAPSA;
    pub type PWAVEINCAPSA = *mut root::tagWAVEINCAPSA;
    pub type NPWAVEINCAPSA = *mut root::tagWAVEINCAPSA;
    pub type LPWAVEINCAPSA = *mut root::tagWAVEINCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEINCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
    }
    pub type WAVEINCAPSW = root::tagWAVEINCAPSW;
    pub type PWAVEINCAPSW = *mut root::tagWAVEINCAPSW;
    pub type NPWAVEINCAPSW = *mut root::tagWAVEINCAPSW;
    pub type LPWAVEINCAPSW = *mut root::tagWAVEINCAPSW;
    pub type WAVEINCAPS = root::WAVEINCAPSA;
    pub type PWAVEINCAPS = root::PWAVEINCAPSA;
    pub type NPWAVEINCAPS = root::NPWAVEINCAPSA;
    pub type LPWAVEINCAPS = root::LPWAVEINCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEINCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type WAVEINCAPS2A = root::tagWAVEINCAPS2A;
    pub type PWAVEINCAPS2A = *mut root::tagWAVEINCAPS2A;
    pub type NPWAVEINCAPS2A = *mut root::tagWAVEINCAPS2A;
    pub type LPWAVEINCAPS2A = *mut root::tagWAVEINCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagWAVEINCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub dwFormats: u32,
        pub wChannels: u16,
        pub wReserved1: u16,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type WAVEINCAPS2W = root::tagWAVEINCAPS2W;
    pub type PWAVEINCAPS2W = *mut root::tagWAVEINCAPS2W;
    pub type NPWAVEINCAPS2W = *mut root::tagWAVEINCAPS2W;
    pub type LPWAVEINCAPS2W = *mut root::tagWAVEINCAPS2W;
    pub type WAVEINCAPS2 = root::WAVEINCAPS2A;
    pub type PWAVEINCAPS2 = root::PWAVEINCAPS2A;
    pub type NPWAVEINCAPS2 = root::NPWAVEINCAPS2A;
    pub type LPWAVEINCAPS2 = root::LPWAVEINCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct waveformat_tag {
        pub wFormatTag: u16,
        pub nChannels: u16,
        pub nSamplesPerSec: u32,
        pub nAvgBytesPerSec: u32,
        pub nBlockAlign: u16,
    }
    pub type WAVEFORMAT = root::waveformat_tag;
    pub type PWAVEFORMAT = *mut root::waveformat_tag;
    pub type NPWAVEFORMAT = *mut root::waveformat_tag;
    pub type LPWAVEFORMAT = *mut root::waveformat_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct pcmwaveformat_tag {
        pub wf: root::WAVEFORMAT,
        pub wBitsPerSample: u16,
    }
    pub type PCMWAVEFORMAT = root::pcmwaveformat_tag;
    pub type PPCMWAVEFORMAT = *mut root::pcmwaveformat_tag;
    pub type NPPCMWAVEFORMAT = *mut root::pcmwaveformat_tag;
    pub type LPPCMWAVEFORMAT = *mut root::pcmwaveformat_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tWAVEFORMATEX {
        pub wFormatTag: u16,
        pub nChannels: u16,
        pub nSamplesPerSec: u32,
        pub nAvgBytesPerSec: u32,
        pub nBlockAlign: u16,
        pub wBitsPerSample: u16,
        pub cbSize: u16,
    }
    pub type WAVEFORMATEX = root::tWAVEFORMATEX;
    pub type PWAVEFORMATEX = *mut root::tWAVEFORMATEX;
    pub type NPWAVEFORMATEX = *mut root::tWAVEFORMATEX;
    pub type LPWAVEFORMATEX = *mut root::tWAVEFORMATEX;
    pub type LPCWAVEFORMATEX = *const root::WAVEFORMATEX;
    extern "C" {
        pub fn waveOutGetNumDevs() -> root::UINT;
    }
    extern "C" {
        pub fn waveOutGetDevCapsA(
            uDeviceID: u64,
            pwoc: root::LPWAVEOUTCAPSA,
            cbwoc: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetDevCapsW(
            uDeviceID: u64,
            pwoc: root::LPWAVEOUTCAPSW,
            cbwoc: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetVolume(hwo: root::HWAVEOUT, pdwVolume: root::LPDWORD) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutSetVolume(hwo: root::HWAVEOUT, dwVolume: u32) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetErrorTextA(
            mmrError: root::MMRESULT,
            pszText: *mut i8,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetErrorTextW(
            mmrError: root::MMRESULT,
            pszText: root::LPWSTR,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutOpen(
            phwo: root::LPHWAVEOUT,
            uDeviceID: root::UINT,
            pwfx: root::LPCWAVEFORMATEX,
            dwCallback: root::DWORD_PTR,
            dwInstance: root::DWORD_PTR,
            fdwOpen: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutClose(hwo: root::HWAVEOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutPrepareHeader(
            hwo: root::HWAVEOUT,
            pwh: root::LPWAVEHDR,
            cbwh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutUnprepareHeader(
            hwo: root::HWAVEOUT,
            pwh: root::LPWAVEHDR,
            cbwh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutWrite(
            hwo: root::HWAVEOUT,
            pwh: root::LPWAVEHDR,
            cbwh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutPause(hwo: root::HWAVEOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutRestart(hwo: root::HWAVEOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutReset(hwo: root::HWAVEOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutBreakLoop(hwo: root::HWAVEOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetPosition(
            hwo: root::HWAVEOUT,
            pmmt: root::LPMMTIME,
            cbmmt: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetPitch(hwo: root::HWAVEOUT, pdwPitch: root::LPDWORD) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutSetPitch(hwo: root::HWAVEOUT, dwPitch: u32) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetPlaybackRate(
            hwo: root::HWAVEOUT,
            pdwRate: root::LPDWORD,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutSetPlaybackRate(hwo: root::HWAVEOUT, dwRate: u32) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutGetID(hwo: root::HWAVEOUT, puDeviceID: root::LPUINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveOutMessage(
            hwo: root::HWAVEOUT,
            uMsg: root::UINT,
            dw1: root::DWORD_PTR,
            dw2: root::DWORD_PTR,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInGetNumDevs() -> root::UINT;
    }
    extern "C" {
        pub fn waveInGetDevCapsA(
            uDeviceID: u64,
            pwic: root::LPWAVEINCAPSA,
            cbwic: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInGetDevCapsW(
            uDeviceID: u64,
            pwic: root::LPWAVEINCAPSW,
            cbwic: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInGetErrorTextA(
            mmrError: root::MMRESULT,
            pszText: *mut i8,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInGetErrorTextW(
            mmrError: root::MMRESULT,
            pszText: root::LPWSTR,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInOpen(
            phwi: root::LPHWAVEIN,
            uDeviceID: root::UINT,
            pwfx: root::LPCWAVEFORMATEX,
            dwCallback: root::DWORD_PTR,
            dwInstance: root::DWORD_PTR,
            fdwOpen: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInClose(hwi: root::HWAVEIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInPrepareHeader(
            hwi: root::HWAVEIN,
            pwh: root::LPWAVEHDR,
            cbwh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInUnprepareHeader(
            hwi: root::HWAVEIN,
            pwh: root::LPWAVEHDR,
            cbwh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInAddBuffer(
            hwi: root::HWAVEIN,
            pwh: root::LPWAVEHDR,
            cbwh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInStart(hwi: root::HWAVEIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInStop(hwi: root::HWAVEIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInReset(hwi: root::HWAVEIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInGetPosition(
            hwi: root::HWAVEIN,
            pmmt: root::LPMMTIME,
            cbmmt: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInGetID(hwi: root::HWAVEIN, puDeviceID: root::LPUINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn waveInMessage(
            hwi: root::HWAVEIN,
            uMsg: root::UINT,
            dw1: root::DWORD_PTR,
            dw2: root::DWORD_PTR,
        ) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMIDI__ {
        pub unused: i32,
    }
    pub type HMIDI = *mut root::HMIDI__;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMIDIIN__ {
        pub unused: i32,
    }
    pub type HMIDIIN = *mut root::HMIDIIN__;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMIDIOUT__ {
        pub unused: i32,
    }
    pub type HMIDIOUT = *mut root::HMIDIOUT__;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMIDISTRM__ {
        pub unused: i32,
    }
    pub type HMIDISTRM = *mut root::HMIDISTRM__;
    pub type LPHMIDI = *mut root::HMIDI;
    pub type LPHMIDIIN = *mut root::HMIDIIN;
    pub type LPHMIDIOUT = *mut root::HMIDIOUT;
    pub type LPHMIDISTRM = *mut root::HMIDISTRM;
    pub type LPMIDICALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HDRVR,
            arg2: root::UINT,
            arg3: root::DWORD_PTR,
            arg4: root::DWORD_PTR,
            arg5: root::DWORD_PTR,
        ),
    >;
    pub type PATCHARRAY = [u16; 128usize];
    pub type LPPATCHARRAY = *mut u16;
    pub type KEYARRAY = [u16; 128usize];
    pub type LPKEYARRAY = *mut u16;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIOUTCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub wTechnology: u16,
        pub wVoices: u16,
        pub wNotes: u16,
        pub wChannelMask: u16,
        pub dwSupport: u32,
    }
    pub type MIDIOUTCAPSA = root::tagMIDIOUTCAPSA;
    pub type PMIDIOUTCAPSA = *mut root::tagMIDIOUTCAPSA;
    pub type NPMIDIOUTCAPSA = *mut root::tagMIDIOUTCAPSA;
    pub type LPMIDIOUTCAPSA = *mut root::tagMIDIOUTCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIOUTCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub wTechnology: u16,
        pub wVoices: u16,
        pub wNotes: u16,
        pub wChannelMask: u16,
        pub dwSupport: u32,
    }
    pub type MIDIOUTCAPSW = root::tagMIDIOUTCAPSW;
    pub type PMIDIOUTCAPSW = *mut root::tagMIDIOUTCAPSW;
    pub type NPMIDIOUTCAPSW = *mut root::tagMIDIOUTCAPSW;
    pub type LPMIDIOUTCAPSW = *mut root::tagMIDIOUTCAPSW;
    pub type MIDIOUTCAPS = root::MIDIOUTCAPSA;
    pub type PMIDIOUTCAPS = root::PMIDIOUTCAPSA;
    pub type NPMIDIOUTCAPS = root::NPMIDIOUTCAPSA;
    pub type LPMIDIOUTCAPS = root::LPMIDIOUTCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIOUTCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub wTechnology: u16,
        pub wVoices: u16,
        pub wNotes: u16,
        pub wChannelMask: u16,
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type MIDIOUTCAPS2A = root::tagMIDIOUTCAPS2A;
    pub type PMIDIOUTCAPS2A = *mut root::tagMIDIOUTCAPS2A;
    pub type NPMIDIOUTCAPS2A = *mut root::tagMIDIOUTCAPS2A;
    pub type LPMIDIOUTCAPS2A = *mut root::tagMIDIOUTCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIOUTCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub wTechnology: u16,
        pub wVoices: u16,
        pub wNotes: u16,
        pub wChannelMask: u16,
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type MIDIOUTCAPS2W = root::tagMIDIOUTCAPS2W;
    pub type PMIDIOUTCAPS2W = *mut root::tagMIDIOUTCAPS2W;
    pub type NPMIDIOUTCAPS2W = *mut root::tagMIDIOUTCAPS2W;
    pub type LPMIDIOUTCAPS2W = *mut root::tagMIDIOUTCAPS2W;
    pub type MIDIOUTCAPS2 = root::MIDIOUTCAPS2A;
    pub type PMIDIOUTCAPS2 = root::PMIDIOUTCAPS2A;
    pub type NPMIDIOUTCAPS2 = root::NPMIDIOUTCAPS2A;
    pub type LPMIDIOUTCAPS2 = root::LPMIDIOUTCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIINCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub dwSupport: u32,
    }
    pub type MIDIINCAPSA = root::tagMIDIINCAPSA;
    pub type PMIDIINCAPSA = *mut root::tagMIDIINCAPSA;
    pub type NPMIDIINCAPSA = *mut root::tagMIDIINCAPSA;
    pub type LPMIDIINCAPSA = *mut root::tagMIDIINCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIINCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub dwSupport: u32,
    }
    pub type MIDIINCAPSW = root::tagMIDIINCAPSW;
    pub type PMIDIINCAPSW = *mut root::tagMIDIINCAPSW;
    pub type NPMIDIINCAPSW = *mut root::tagMIDIINCAPSW;
    pub type LPMIDIINCAPSW = *mut root::tagMIDIINCAPSW;
    pub type MIDIINCAPS = root::MIDIINCAPSA;
    pub type PMIDIINCAPS = root::PMIDIINCAPSA;
    pub type NPMIDIINCAPS = root::NPMIDIINCAPSA;
    pub type LPMIDIINCAPS = root::LPMIDIINCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIINCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type MIDIINCAPS2A = root::tagMIDIINCAPS2A;
    pub type PMIDIINCAPS2A = *mut root::tagMIDIINCAPS2A;
    pub type NPMIDIINCAPS2A = *mut root::tagMIDIINCAPS2A;
    pub type LPMIDIINCAPS2A = *mut root::tagMIDIINCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIDIINCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type MIDIINCAPS2W = root::tagMIDIINCAPS2W;
    pub type PMIDIINCAPS2W = *mut root::tagMIDIINCAPS2W;
    pub type NPMIDIINCAPS2W = *mut root::tagMIDIINCAPS2W;
    pub type LPMIDIINCAPS2W = *mut root::tagMIDIINCAPS2W;
    pub type MIDIINCAPS2 = root::MIDIINCAPS2A;
    pub type PMIDIINCAPS2 = root::PMIDIINCAPS2A;
    pub type NPMIDIINCAPS2 = root::NPMIDIINCAPS2A;
    pub type LPMIDIINCAPS2 = root::LPMIDIINCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct midihdr_tag {
        pub lpData: *mut i8,
        pub dwBufferLength: u32,
        pub dwBytesRecorded: u32,
        pub dwUser: root::DWORD_PTR,
        pub dwFlags: u32,
        pub lpNext: *mut root::midihdr_tag,
        pub reserved: root::DWORD_PTR,
        pub dwOffset: u32,
        pub dwReserved: [root::DWORD_PTR; 8usize],
    }
    pub type MIDIHDR = root::midihdr_tag;
    pub type PMIDIHDR = *mut root::midihdr_tag;
    pub type NPMIDIHDR = *mut root::midihdr_tag;
    pub type LPMIDIHDR = *mut root::midihdr_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct midievent_tag {
        pub dwDeltaTime: u32,
        pub dwStreamID: u32,
        pub dwEvent: u32,
        pub dwParms: [u32; 1usize],
    }
    pub type MIDIEVENT = root::midievent_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct midistrmbuffver_tag {
        pub dwVersion: u32,
        pub dwMid: u32,
        pub dwOEMVersion: u32,
    }
    pub type MIDISTRMBUFFVER = root::midistrmbuffver_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct midiproptimediv_tag {
        pub cbStruct: u32,
        pub dwTimeDiv: u32,
    }
    pub type MIDIPROPTIMEDIV = root::midiproptimediv_tag;
    pub type LPMIDIPROPTIMEDIV = *mut root::midiproptimediv_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct midiproptempo_tag {
        pub cbStruct: u32,
        pub dwTempo: u32,
    }
    pub type MIDIPROPTEMPO = root::midiproptempo_tag;
    pub type LPMIDIPROPTEMPO = *mut root::midiproptempo_tag;
    extern "C" {
        pub fn midiOutGetNumDevs() -> root::UINT;
    }
    extern "C" {
        pub fn midiStreamOpen(
            phms: root::LPHMIDISTRM,
            puDeviceID: root::LPUINT,
            cMidi: u32,
            dwCallback: root::DWORD_PTR,
            dwInstance: root::DWORD_PTR,
            fdwOpen: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamClose(hms: root::HMIDISTRM) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamProperty(
            hms: root::HMIDISTRM,
            lppropdata: root::LPBYTE,
            dwProperty: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamPosition(
            hms: root::HMIDISTRM,
            lpmmt: root::LPMMTIME,
            cbmmt: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamOut(
            hms: root::HMIDISTRM,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamPause(hms: root::HMIDISTRM) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamRestart(hms: root::HMIDISTRM) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiStreamStop(hms: root::HMIDISTRM) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiConnect(
            hmi: root::HMIDI,
            hmo: root::HMIDIOUT,
            pReserved: root::LPVOID,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiDisconnect(
            hmi: root::HMIDI,
            hmo: root::HMIDIOUT,
            pReserved: root::LPVOID,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutGetDevCapsA(
            uDeviceID: u64,
            pmoc: root::LPMIDIOUTCAPSA,
            cbmoc: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutGetDevCapsW(
            uDeviceID: u64,
            pmoc: root::LPMIDIOUTCAPSW,
            cbmoc: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutGetVolume(hmo: root::HMIDIOUT, pdwVolume: root::LPDWORD) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutSetVolume(hmo: root::HMIDIOUT, dwVolume: u32) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutGetErrorTextA(
            mmrError: root::MMRESULT,
            pszText: *mut i8,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutGetErrorTextW(
            mmrError: root::MMRESULT,
            pszText: root::LPWSTR,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutOpen(
            phmo: root::LPHMIDIOUT,
            uDeviceID: root::UINT,
            dwCallback: root::DWORD_PTR,
            dwInstance: root::DWORD_PTR,
            fdwOpen: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutClose(hmo: root::HMIDIOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutPrepareHeader(
            hmo: root::HMIDIOUT,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutUnprepareHeader(
            hmo: root::HMIDIOUT,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutShortMsg(hmo: root::HMIDIOUT, dwMsg: u32) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutLongMsg(
            hmo: root::HMIDIOUT,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutReset(hmo: root::HMIDIOUT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutCachePatches(
            hmo: root::HMIDIOUT,
            uBank: root::UINT,
            pwpa: root::LPWORD,
            fuCache: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutCacheDrumPatches(
            hmo: root::HMIDIOUT,
            uPatch: root::UINT,
            pwkya: root::LPWORD,
            fuCache: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutGetID(hmo: root::HMIDIOUT, puDeviceID: root::LPUINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiOutMessage(
            hmo: root::HMIDIOUT,
            uMsg: root::UINT,
            dw1: root::DWORD_PTR,
            dw2: root::DWORD_PTR,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInGetNumDevs() -> root::UINT;
    }
    extern "C" {
        pub fn midiInGetDevCapsA(
            uDeviceID: u64,
            pmic: root::LPMIDIINCAPSA,
            cbmic: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInGetDevCapsW(
            uDeviceID: u64,
            pmic: root::LPMIDIINCAPSW,
            cbmic: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInGetErrorTextA(
            mmrError: root::MMRESULT,
            pszText: *mut i8,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInGetErrorTextW(
            mmrError: root::MMRESULT,
            pszText: root::LPWSTR,
            cchText: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInOpen(
            phmi: root::LPHMIDIIN,
            uDeviceID: root::UINT,
            dwCallback: root::DWORD_PTR,
            dwInstance: root::DWORD_PTR,
            fdwOpen: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInClose(hmi: root::HMIDIIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInPrepareHeader(
            hmi: root::HMIDIIN,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInUnprepareHeader(
            hmi: root::HMIDIIN,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInAddBuffer(
            hmi: root::HMIDIIN,
            pmh: root::LPMIDIHDR,
            cbmh: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInStart(hmi: root::HMIDIIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInStop(hmi: root::HMIDIIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInReset(hmi: root::HMIDIIN) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInGetID(hmi: root::HMIDIIN, puDeviceID: root::LPUINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn midiInMessage(
            hmi: root::HMIDIIN,
            uMsg: root::UINT,
            dw1: root::DWORD_PTR,
            dw2: root::DWORD_PTR,
        ) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAUXCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub wTechnology: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
    }
    pub type AUXCAPSA = root::tagAUXCAPSA;
    pub type PAUXCAPSA = *mut root::tagAUXCAPSA;
    pub type NPAUXCAPSA = *mut root::tagAUXCAPSA;
    pub type LPAUXCAPSA = *mut root::tagAUXCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAUXCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub wTechnology: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
    }
    pub type AUXCAPSW = root::tagAUXCAPSW;
    pub type PAUXCAPSW = *mut root::tagAUXCAPSW;
    pub type NPAUXCAPSW = *mut root::tagAUXCAPSW;
    pub type LPAUXCAPSW = *mut root::tagAUXCAPSW;
    pub type AUXCAPS = root::AUXCAPSA;
    pub type PAUXCAPS = root::PAUXCAPSA;
    pub type NPAUXCAPS = root::NPAUXCAPSA;
    pub type LPAUXCAPS = root::LPAUXCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAUXCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub wTechnology: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type AUXCAPS2A = root::tagAUXCAPS2A;
    pub type PAUXCAPS2A = *mut root::tagAUXCAPS2A;
    pub type NPAUXCAPS2A = *mut root::tagAUXCAPS2A;
    pub type LPAUXCAPS2A = *mut root::tagAUXCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagAUXCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub wTechnology: u16,
        pub wReserved1: u16,
        pub dwSupport: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type AUXCAPS2W = root::tagAUXCAPS2W;
    pub type PAUXCAPS2W = *mut root::tagAUXCAPS2W;
    pub type NPAUXCAPS2W = *mut root::tagAUXCAPS2W;
    pub type LPAUXCAPS2W = *mut root::tagAUXCAPS2W;
    pub type AUXCAPS2 = root::AUXCAPS2A;
    pub type PAUXCAPS2 = root::PAUXCAPS2A;
    pub type NPAUXCAPS2 = root::NPAUXCAPS2A;
    pub type LPAUXCAPS2 = root::LPAUXCAPS2A;
    extern "C" {
        pub fn auxGetNumDevs() -> root::UINT;
    }
    extern "C" {
        pub fn auxGetDevCapsA(
            uDeviceID: u64,
            pac: root::LPAUXCAPSA,
            cbac: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn auxGetDevCapsW(
            uDeviceID: u64,
            pac: root::LPAUXCAPSW,
            cbac: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn auxSetVolume(uDeviceID: root::UINT, dwVolume: u32) -> root::MMRESULT;
    }
    extern "C" {
        pub fn auxGetVolume(uDeviceID: root::UINT, pdwVolume: root::LPDWORD) -> root::MMRESULT;
    }
    extern "C" {
        pub fn auxOutMessage(
            uDeviceID: root::UINT,
            uMsg: root::UINT,
            dw1: root::DWORD_PTR,
            dw2: root::DWORD_PTR,
        ) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMIXEROBJ__ {
        pub unused: i32,
    }
    pub type HMIXEROBJ = *mut root::HMIXEROBJ__;
    pub type LPHMIXEROBJ = *mut root::HMIXEROBJ;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMIXER__ {
        pub unused: i32,
    }
    pub type HMIXER = *mut root::HMIXER__;
    pub type LPHMIXER = *mut root::HMIXER;
    extern "C" {
        pub fn mixerGetNumDevs() -> root::UINT;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub fdwSupport: u32,
        pub cDestinations: u32,
    }
    pub type MIXERCAPSA = root::tagMIXERCAPSA;
    pub type PMIXERCAPSA = *mut root::tagMIXERCAPSA;
    pub type LPMIXERCAPSA = *mut root::tagMIXERCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub fdwSupport: u32,
        pub cDestinations: u32,
    }
    pub type MIXERCAPSW = root::tagMIXERCAPSW;
    pub type PMIXERCAPSW = *mut root::tagMIXERCAPSW;
    pub type LPMIXERCAPSW = *mut root::tagMIXERCAPSW;
    pub type MIXERCAPS = root::MIXERCAPSA;
    pub type PMIXERCAPS = root::PMIXERCAPSA;
    pub type LPMIXERCAPS = root::LPMIXERCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
        pub fdwSupport: u32,
        pub cDestinations: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type MIXERCAPS2A = root::tagMIXERCAPS2A;
    pub type PMIXERCAPS2A = *mut root::tagMIXERCAPS2A;
    pub type LPMIXERCAPS2A = *mut root::tagMIXERCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
        pub fdwSupport: u32,
        pub cDestinations: u32,
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type MIXERCAPS2W = root::tagMIXERCAPS2W;
    pub type PMIXERCAPS2W = *mut root::tagMIXERCAPS2W;
    pub type LPMIXERCAPS2W = *mut root::tagMIXERCAPS2W;
    pub type MIXERCAPS2 = root::MIXERCAPS2A;
    pub type PMIXERCAPS2 = root::PMIXERCAPS2A;
    pub type LPMIXERCAPS2 = root::LPMIXERCAPS2A;
    extern "C" {
        pub fn mixerGetDevCapsA(
            uMxId: u64,
            pmxcaps: root::LPMIXERCAPSA,
            cbmxcaps: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerGetDevCapsW(
            uMxId: u64,
            pmxcaps: root::LPMIXERCAPSW,
            cbmxcaps: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerOpen(
            phmx: root::LPHMIXER,
            uMxId: root::UINT,
            dwCallback: root::DWORD_PTR,
            dwInstance: root::DWORD_PTR,
            fdwOpen: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerClose(hmx: root::HMIXER) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerMessage(
            hmx: root::HMIXER,
            uMsg: root::UINT,
            dwParam1: root::DWORD_PTR,
            dwParam2: root::DWORD_PTR,
        ) -> u32;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERLINEA {
        pub cbStruct: u32,
        pub dwDestination: u32,
        pub dwSource: u32,
        pub dwLineID: u32,
        pub fdwLine: u32,
        pub dwUser: root::DWORD_PTR,
        pub dwComponentType: u32,
        pub cChannels: u32,
        pub cConnections: u32,
        pub cControls: u32,
        pub szShortName: [i8; 16usize],
        pub szName: [i8; 64usize],
        pub Target: root::tagMIXERLINEA__bindgen_ty_1,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERLINEA__bindgen_ty_1 {
        pub dwType: u32,
        pub dwDeviceID: u32,
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [i8; 32usize],
    }
    pub type MIXERLINEA = root::tagMIXERLINEA;
    pub type PMIXERLINEA = *mut root::tagMIXERLINEA;
    pub type LPMIXERLINEA = *mut root::tagMIXERLINEA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERLINEW {
        pub cbStruct: u32,
        pub dwDestination: u32,
        pub dwSource: u32,
        pub dwLineID: u32,
        pub fdwLine: u32,
        pub dwUser: root::DWORD_PTR,
        pub dwComponentType: u32,
        pub cChannels: u32,
        pub cConnections: u32,
        pub cControls: u32,
        pub szShortName: [u16; 16usize],
        pub szName: [u16; 64usize],
        pub Target: root::tagMIXERLINEW__bindgen_ty_1,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERLINEW__bindgen_ty_1 {
        pub dwType: u32,
        pub dwDeviceID: u32,
        pub wMid: u16,
        pub wPid: u16,
        pub vDriverVersion: root::MMVERSION,
        pub szPname: [u16; 32usize],
    }
    pub type MIXERLINEW = root::tagMIXERLINEW;
    pub type PMIXERLINEW = *mut root::tagMIXERLINEW;
    pub type LPMIXERLINEW = *mut root::tagMIXERLINEW;
    pub type MIXERLINE = root::MIXERLINEA;
    pub type PMIXERLINE = root::PMIXERLINEA;
    pub type LPMIXERLINE = root::LPMIXERLINEA;
    extern "C" {
        pub fn mixerGetLineInfoA(
            hmxobj: root::HMIXEROBJ,
            pmxl: root::LPMIXERLINEA,
            fdwInfo: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerGetLineInfoW(
            hmxobj: root::HMIXEROBJ,
            pmxl: root::LPMIXERLINEW,
            fdwInfo: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerGetID(
            hmxobj: root::HMIXEROBJ,
            puMxId: *mut root::UINT,
            fdwId: u32,
        ) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct tagMIXERCONTROLA {
        pub cbStruct: u32,
        pub dwControlID: u32,
        pub dwControlType: u32,
        pub fdwControl: u32,
        pub cMultipleItems: u32,
        pub szShortName: [i8; 16usize],
        pub szName: [i8; 64usize],
        pub Bounds: root::tagMIXERCONTROLA__bindgen_ty_1,
        pub Metrics: root::tagMIXERCONTROLA__bindgen_ty_2,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tagMIXERCONTROLA__bindgen_ty_1 {
        pub __bindgen_anon_1: root::tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2: root::tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_2,
        pub dwReserved: [u32; 6usize],
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_1 {
        pub lMinimum: i32,
        pub lMaximum: i32,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_2 {
        pub dwMinimum: u32,
        pub dwMaximum: u32,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tagMIXERCONTROLA__bindgen_ty_2 {
        pub cSteps: u32,
        pub cbCustomData: u32,
        pub dwReserved: [u32; 6usize],
    }
    pub type MIXERCONTROLA = root::tagMIXERCONTROLA;
    pub type PMIXERCONTROLA = *mut root::tagMIXERCONTROLA;
    pub type LPMIXERCONTROLA = *mut root::tagMIXERCONTROLA;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct tagMIXERCONTROLW {
        pub cbStruct: u32,
        pub dwControlID: u32,
        pub dwControlType: u32,
        pub fdwControl: u32,
        pub cMultipleItems: u32,
        pub szShortName: [u16; 16usize],
        pub szName: [u16; 64usize],
        pub Bounds: root::tagMIXERCONTROLW__bindgen_ty_1,
        pub Metrics: root::tagMIXERCONTROLW__bindgen_ty_2,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tagMIXERCONTROLW__bindgen_ty_1 {
        pub __bindgen_anon_1: root::tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2: root::tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_2,
        pub dwReserved: [u32; 6usize],
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_1 {
        pub lMinimum: i32,
        pub lMaximum: i32,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_2 {
        pub dwMinimum: u32,
        pub dwMaximum: u32,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tagMIXERCONTROLW__bindgen_ty_2 {
        pub cSteps: u32,
        pub cbCustomData: u32,
        pub dwReserved: [u32; 6usize],
    }
    pub type MIXERCONTROLW = root::tagMIXERCONTROLW;
    pub type PMIXERCONTROLW = *mut root::tagMIXERCONTROLW;
    pub type LPMIXERCONTROLW = *mut root::tagMIXERCONTROLW;
    pub type MIXERCONTROL = root::MIXERCONTROLA;
    pub type PMIXERCONTROL = root::PMIXERCONTROLA;
    pub type LPMIXERCONTROL = root::LPMIXERCONTROLA;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct tagMIXERLINECONTROLSA {
        pub cbStruct: u32,
        pub dwLineID: u32,
        pub __bindgen_anon_1: root::tagMIXERLINECONTROLSA__bindgen_ty_1,
        pub cControls: u32,
        pub cbmxctrl: u32,
        pub pamxctrl: root::LPMIXERCONTROLA,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tagMIXERLINECONTROLSA__bindgen_ty_1 {
        pub dwControlID: u32,
        pub dwControlType: u32,
    }
    pub type MIXERLINECONTROLSA = root::tagMIXERLINECONTROLSA;
    pub type PMIXERLINECONTROLSA = *mut root::tagMIXERLINECONTROLSA;
    pub type LPMIXERLINECONTROLSA = *mut root::tagMIXERLINECONTROLSA;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct tagMIXERLINECONTROLSW {
        pub cbStruct: u32,
        pub dwLineID: u32,
        pub __bindgen_anon_1: root::tagMIXERLINECONTROLSW__bindgen_ty_1,
        pub cControls: u32,
        pub cbmxctrl: u32,
        pub pamxctrl: root::LPMIXERCONTROLW,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tagMIXERLINECONTROLSW__bindgen_ty_1 {
        pub dwControlID: u32,
        pub dwControlType: u32,
    }
    pub type MIXERLINECONTROLSW = root::tagMIXERLINECONTROLSW;
    pub type PMIXERLINECONTROLSW = *mut root::tagMIXERLINECONTROLSW;
    pub type LPMIXERLINECONTROLSW = *mut root::tagMIXERLINECONTROLSW;
    pub type MIXERLINECONTROLS = root::MIXERLINECONTROLSA;
    pub type PMIXERLINECONTROLS = root::PMIXERLINECONTROLSA;
    pub type LPMIXERLINECONTROLS = root::LPMIXERLINECONTROLSA;
    extern "C" {
        pub fn mixerGetLineControlsA(
            hmxobj: root::HMIXEROBJ,
            pmxlc: root::LPMIXERLINECONTROLSA,
            fdwControls: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerGetLineControlsW(
            hmxobj: root::HMIXEROBJ,
            pmxlc: root::LPMIXERLINECONTROLSW,
            fdwControls: u32,
        ) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct tMIXERCONTROLDETAILS {
        pub cbStruct: u32,
        pub dwControlID: u32,
        pub cChannels: u32,
        pub __bindgen_anon_1: root::tMIXERCONTROLDETAILS__bindgen_ty_1,
        pub cbDetails: u32,
        pub paDetails: root::LPVOID,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union tMIXERCONTROLDETAILS__bindgen_ty_1 {
        pub hwndOwner: root::HWND,
        pub cMultipleItems: u32,
    }
    pub type MIXERCONTROLDETAILS = root::tMIXERCONTROLDETAILS;
    pub type PMIXERCONTROLDETAILS = *mut root::tMIXERCONTROLDETAILS;
    pub type LPMIXERCONTROLDETAILS = *mut root::tMIXERCONTROLDETAILS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCONTROLDETAILS_LISTTEXTA {
        pub dwParam1: u32,
        pub dwParam2: u32,
        pub szName: [i8; 64usize],
    }
    pub type MIXERCONTROLDETAILS_LISTTEXTA = root::tagMIXERCONTROLDETAILS_LISTTEXTA;
    pub type PMIXERCONTROLDETAILS_LISTTEXTA = *mut root::tagMIXERCONTROLDETAILS_LISTTEXTA;
    pub type LPMIXERCONTROLDETAILS_LISTTEXTA = *mut root::tagMIXERCONTROLDETAILS_LISTTEXTA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMIXERCONTROLDETAILS_LISTTEXTW {
        pub dwParam1: u32,
        pub dwParam2: u32,
        pub szName: [u16; 64usize],
    }
    pub type MIXERCONTROLDETAILS_LISTTEXTW = root::tagMIXERCONTROLDETAILS_LISTTEXTW;
    pub type PMIXERCONTROLDETAILS_LISTTEXTW = *mut root::tagMIXERCONTROLDETAILS_LISTTEXTW;
    pub type LPMIXERCONTROLDETAILS_LISTTEXTW = *mut root::tagMIXERCONTROLDETAILS_LISTTEXTW;
    pub type MIXERCONTROLDETAILS_LISTTEXT = root::MIXERCONTROLDETAILS_LISTTEXTA;
    pub type PMIXERCONTROLDETAILS_LISTTEXT = root::PMIXERCONTROLDETAILS_LISTTEXTA;
    pub type LPMIXERCONTROLDETAILS_LISTTEXT = root::LPMIXERCONTROLDETAILS_LISTTEXTA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tMIXERCONTROLDETAILS_BOOLEAN {
        pub fValue: i32,
    }
    pub type MIXERCONTROLDETAILS_BOOLEAN = root::tMIXERCONTROLDETAILS_BOOLEAN;
    pub type PMIXERCONTROLDETAILS_BOOLEAN = *mut root::tMIXERCONTROLDETAILS_BOOLEAN;
    pub type LPMIXERCONTROLDETAILS_BOOLEAN = *mut root::tMIXERCONTROLDETAILS_BOOLEAN;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tMIXERCONTROLDETAILS_SIGNED {
        pub lValue: i32,
    }
    pub type MIXERCONTROLDETAILS_SIGNED = root::tMIXERCONTROLDETAILS_SIGNED;
    pub type PMIXERCONTROLDETAILS_SIGNED = *mut root::tMIXERCONTROLDETAILS_SIGNED;
    pub type LPMIXERCONTROLDETAILS_SIGNED = *mut root::tMIXERCONTROLDETAILS_SIGNED;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tMIXERCONTROLDETAILS_UNSIGNED {
        pub dwValue: u32,
    }
    pub type MIXERCONTROLDETAILS_UNSIGNED = root::tMIXERCONTROLDETAILS_UNSIGNED;
    pub type PMIXERCONTROLDETAILS_UNSIGNED = *mut root::tMIXERCONTROLDETAILS_UNSIGNED;
    pub type LPMIXERCONTROLDETAILS_UNSIGNED = *mut root::tMIXERCONTROLDETAILS_UNSIGNED;
    extern "C" {
        pub fn mixerGetControlDetailsA(
            hmxobj: root::HMIXEROBJ,
            pmxcd: root::LPMIXERCONTROLDETAILS,
            fdwDetails: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerGetControlDetailsW(
            hmxobj: root::HMIXEROBJ,
            pmxcd: root::LPMIXERCONTROLDETAILS,
            fdwDetails: u32,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn mixerSetControlDetails(
            hmxobj: root::HMIXEROBJ,
            pmxcd: root::LPMIXERCONTROLDETAILS,
            fdwDetails: u32,
        ) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct timecaps_tag {
        pub wPeriodMin: root::UINT,
        pub wPeriodMax: root::UINT,
    }
    pub type TIMECAPS = root::timecaps_tag;
    pub type PTIMECAPS = *mut root::timecaps_tag;
    pub type NPTIMECAPS = *mut root::timecaps_tag;
    pub type LPTIMECAPS = *mut root::timecaps_tag;
    extern "C" {
        pub fn timeGetSystemTime(pmmt: root::LPMMTIME, cbmmt: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn timeGetTime() -> u32;
    }
    extern "C" {
        pub fn timeGetDevCaps(ptc: root::LPTIMECAPS, cbtc: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn timeBeginPeriod(uPeriod: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn timeEndPeriod(uPeriod: root::UINT) -> root::MMRESULT;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagJOYCAPSA {
        pub wMid: u16,
        pub wPid: u16,
        pub szPname: [i8; 32usize],
        pub wXmin: root::UINT,
        pub wXmax: root::UINT,
        pub wYmin: root::UINT,
        pub wYmax: root::UINT,
        pub wZmin: root::UINT,
        pub wZmax: root::UINT,
        pub wNumButtons: root::UINT,
        pub wPeriodMin: root::UINT,
        pub wPeriodMax: root::UINT,
        pub wRmin: root::UINT,
        pub wRmax: root::UINT,
        pub wUmin: root::UINT,
        pub wUmax: root::UINT,
        pub wVmin: root::UINT,
        pub wVmax: root::UINT,
        pub wCaps: root::UINT,
        pub wMaxAxes: root::UINT,
        pub wNumAxes: root::UINT,
        pub wMaxButtons: root::UINT,
        pub szRegKey: [i8; 32usize],
        pub szOEMVxD: [i8; 260usize],
    }
    pub type JOYCAPSA = root::tagJOYCAPSA;
    pub type PJOYCAPSA = *mut root::tagJOYCAPSA;
    pub type NPJOYCAPSA = *mut root::tagJOYCAPSA;
    pub type LPJOYCAPSA = *mut root::tagJOYCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagJOYCAPSW {
        pub wMid: u16,
        pub wPid: u16,
        pub szPname: [u16; 32usize],
        pub wXmin: root::UINT,
        pub wXmax: root::UINT,
        pub wYmin: root::UINT,
        pub wYmax: root::UINT,
        pub wZmin: root::UINT,
        pub wZmax: root::UINT,
        pub wNumButtons: root::UINT,
        pub wPeriodMin: root::UINT,
        pub wPeriodMax: root::UINT,
        pub wRmin: root::UINT,
        pub wRmax: root::UINT,
        pub wUmin: root::UINT,
        pub wUmax: root::UINT,
        pub wVmin: root::UINT,
        pub wVmax: root::UINT,
        pub wCaps: root::UINT,
        pub wMaxAxes: root::UINT,
        pub wNumAxes: root::UINT,
        pub wMaxButtons: root::UINT,
        pub szRegKey: [u16; 32usize],
        pub szOEMVxD: [u16; 260usize],
    }
    pub type JOYCAPSW = root::tagJOYCAPSW;
    pub type PJOYCAPSW = *mut root::tagJOYCAPSW;
    pub type NPJOYCAPSW = *mut root::tagJOYCAPSW;
    pub type LPJOYCAPSW = *mut root::tagJOYCAPSW;
    pub type JOYCAPS = root::JOYCAPSA;
    pub type PJOYCAPS = root::PJOYCAPSA;
    pub type NPJOYCAPS = root::NPJOYCAPSA;
    pub type LPJOYCAPS = root::LPJOYCAPSA;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagJOYCAPS2A {
        pub wMid: u16,
        pub wPid: u16,
        pub szPname: [i8; 32usize],
        pub wXmin: root::UINT,
        pub wXmax: root::UINT,
        pub wYmin: root::UINT,
        pub wYmax: root::UINT,
        pub wZmin: root::UINT,
        pub wZmax: root::UINT,
        pub wNumButtons: root::UINT,
        pub wPeriodMin: root::UINT,
        pub wPeriodMax: root::UINT,
        pub wRmin: root::UINT,
        pub wRmax: root::UINT,
        pub wUmin: root::UINT,
        pub wUmax: root::UINT,
        pub wVmin: root::UINT,
        pub wVmax: root::UINT,
        pub wCaps: root::UINT,
        pub wMaxAxes: root::UINT,
        pub wNumAxes: root::UINT,
        pub wMaxButtons: root::UINT,
        pub szRegKey: [i8; 32usize],
        pub szOEMVxD: [i8; 260usize],
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type JOYCAPS2A = root::tagJOYCAPS2A;
    pub type PJOYCAPS2A = *mut root::tagJOYCAPS2A;
    pub type NPJOYCAPS2A = *mut root::tagJOYCAPS2A;
    pub type LPJOYCAPS2A = *mut root::tagJOYCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagJOYCAPS2W {
        pub wMid: u16,
        pub wPid: u16,
        pub szPname: [u16; 32usize],
        pub wXmin: root::UINT,
        pub wXmax: root::UINT,
        pub wYmin: root::UINT,
        pub wYmax: root::UINT,
        pub wZmin: root::UINT,
        pub wZmax: root::UINT,
        pub wNumButtons: root::UINT,
        pub wPeriodMin: root::UINT,
        pub wPeriodMax: root::UINT,
        pub wRmin: root::UINT,
        pub wRmax: root::UINT,
        pub wUmin: root::UINT,
        pub wUmax: root::UINT,
        pub wVmin: root::UINT,
        pub wVmax: root::UINT,
        pub wCaps: root::UINT,
        pub wMaxAxes: root::UINT,
        pub wNumAxes: root::UINT,
        pub wMaxButtons: root::UINT,
        pub szRegKey: [u16; 32usize],
        pub szOEMVxD: [u16; 260usize],
        pub ManufacturerGuid: root::GUID,
        pub ProductGuid: root::GUID,
        pub NameGuid: root::GUID,
    }
    pub type JOYCAPS2W = root::tagJOYCAPS2W;
    pub type PJOYCAPS2W = *mut root::tagJOYCAPS2W;
    pub type NPJOYCAPS2W = *mut root::tagJOYCAPS2W;
    pub type LPJOYCAPS2W = *mut root::tagJOYCAPS2W;
    pub type JOYCAPS2 = root::JOYCAPS2A;
    pub type PJOYCAPS2 = root::PJOYCAPS2A;
    pub type NPJOYCAPS2 = root::NPJOYCAPS2A;
    pub type LPJOYCAPS2 = root::LPJOYCAPS2A;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct joyinfo_tag {
        pub wXpos: root::UINT,
        pub wYpos: root::UINT,
        pub wZpos: root::UINT,
        pub wButtons: root::UINT,
    }
    pub type JOYINFO = root::joyinfo_tag;
    pub type PJOYINFO = *mut root::joyinfo_tag;
    pub type NPJOYINFO = *mut root::joyinfo_tag;
    pub type LPJOYINFO = *mut root::joyinfo_tag;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct joyinfoex_tag {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub dwXpos: u32,
        pub dwYpos: u32,
        pub dwZpos: u32,
        pub dwRpos: u32,
        pub dwUpos: u32,
        pub dwVpos: u32,
        pub dwButtons: u32,
        pub dwButtonNumber: u32,
        pub dwPOV: u32,
        pub dwReserved1: u32,
        pub dwReserved2: u32,
    }
    pub type JOYINFOEX = root::joyinfoex_tag;
    pub type PJOYINFOEX = *mut root::joyinfoex_tag;
    pub type NPJOYINFOEX = *mut root::joyinfoex_tag;
    pub type LPJOYINFOEX = *mut root::joyinfoex_tag;
    extern "C" {
        pub fn joyGetPosEx(uJoyID: root::UINT, pji: root::LPJOYINFOEX) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joyGetNumDevs() -> root::UINT;
    }
    extern "C" {
        pub fn joyGetDevCapsA(
            uJoyID: u64,
            pjc: root::LPJOYCAPSA,
            cbjc: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joyGetDevCapsW(
            uJoyID: u64,
            pjc: root::LPJOYCAPSW,
            cbjc: root::UINT,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joyGetPos(uJoyID: root::UINT, pji: root::LPJOYINFO) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joyGetThreshold(uJoyID: root::UINT, puThreshold: root::LPUINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joyReleaseCapture(uJoyID: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joySetCapture(
            hwnd: root::HWND,
            uJoyID: root::UINT,
            uPeriod: root::UINT,
            fChanged: root::BOOL,
        ) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joySetThreshold(uJoyID: root::UINT, uThreshold: root::UINT) -> root::MMRESULT;
    }
    extern "C" {
        pub fn joyConfigChanged(dwFlags: u32) -> root::MMRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCB {
        pub ncb_command: root::UCHAR,
        pub ncb_retcode: root::UCHAR,
        pub ncb_lsn: root::UCHAR,
        pub ncb_num: root::UCHAR,
        pub ncb_buffer: root::PUCHAR,
        pub ncb_length: u16,
        pub ncb_callname: [root::UCHAR; 16usize],
        pub ncb_name: [root::UCHAR; 16usize],
        pub ncb_rto: root::UCHAR,
        pub ncb_sto: root::UCHAR,
        pub ncb_post: ::std::option::Option<unsafe extern "C" fn(arg1: *mut root::_NCB)>,
        pub ncb_lana_num: root::UCHAR,
        pub ncb_cmd_cplt: root::UCHAR,
        pub ncb_reserve: [root::UCHAR; 18usize],
        pub ncb_event: root::HANDLE,
    }
    pub type NCB = root::_NCB;
    pub type PNCB = *mut root::_NCB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ADAPTER_STATUS {
        pub adapter_address: [root::UCHAR; 6usize],
        pub rev_major: root::UCHAR,
        pub reserved0: root::UCHAR,
        pub adapter_type: root::UCHAR,
        pub rev_minor: root::UCHAR,
        pub duration: u16,
        pub frmr_recv: u16,
        pub frmr_xmit: u16,
        pub iframe_recv_err: u16,
        pub xmit_aborts: u16,
        pub xmit_success: u32,
        pub recv_success: u32,
        pub iframe_xmit_err: u16,
        pub recv_buff_unavail: u16,
        pub t1_timeouts: u16,
        pub ti_timeouts: u16,
        pub reserved1: u32,
        pub free_ncbs: u16,
        pub max_cfg_ncbs: u16,
        pub max_ncbs: u16,
        pub xmit_buf_unavail: u16,
        pub max_dgram_size: u16,
        pub pending_sess: u16,
        pub max_cfg_sess: u16,
        pub max_sess: u16,
        pub max_sess_pkt_size: u16,
        pub name_count: u16,
    }
    pub type ADAPTER_STATUS = root::_ADAPTER_STATUS;
    pub type PADAPTER_STATUS = *mut root::_ADAPTER_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NAME_BUFFER {
        pub name: [root::UCHAR; 16usize],
        pub name_num: root::UCHAR,
        pub name_flags: root::UCHAR,
    }
    pub type NAME_BUFFER = root::_NAME_BUFFER;
    pub type PNAME_BUFFER = *mut root::_NAME_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SESSION_HEADER {
        pub sess_name: root::UCHAR,
        pub num_sess: root::UCHAR,
        pub rcv_dg_outstanding: root::UCHAR,
        pub rcv_any_outstanding: root::UCHAR,
    }
    pub type SESSION_HEADER = root::_SESSION_HEADER;
    pub type PSESSION_HEADER = *mut root::_SESSION_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SESSION_BUFFER {
        pub lsn: root::UCHAR,
        pub state: root::UCHAR,
        pub local_name: [root::UCHAR; 16usize],
        pub remote_name: [root::UCHAR; 16usize],
        pub rcvs_outstanding: root::UCHAR,
        pub sends_outstanding: root::UCHAR,
    }
    pub type SESSION_BUFFER = root::_SESSION_BUFFER;
    pub type PSESSION_BUFFER = *mut root::_SESSION_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LANA_ENUM {
        pub length: root::UCHAR,
        pub lana: [root::UCHAR; 255usize],
    }
    pub type LANA_ENUM = root::_LANA_ENUM;
    pub type PLANA_ENUM = *mut root::_LANA_ENUM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FIND_NAME_HEADER {
        pub node_count: u16,
        pub reserved: root::UCHAR,
        pub unique_group: root::UCHAR,
    }
    pub type FIND_NAME_HEADER = root::_FIND_NAME_HEADER;
    pub type PFIND_NAME_HEADER = *mut root::_FIND_NAME_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FIND_NAME_BUFFER {
        pub length: root::UCHAR,
        pub access_control: root::UCHAR,
        pub frame_control: root::UCHAR,
        pub destination_addr: [root::UCHAR; 6usize],
        pub source_addr: [root::UCHAR; 6usize],
        pub routing_info: [root::UCHAR; 18usize],
    }
    pub type FIND_NAME_BUFFER = root::_FIND_NAME_BUFFER;
    pub type PFIND_NAME_BUFFER = *mut root::_FIND_NAME_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACTION_HEADER {
        pub transport_id: root::ULONG,
        pub action_code: root::USHORT,
        pub reserved: root::USHORT,
    }
    pub type ACTION_HEADER = root::_ACTION_HEADER;
    pub type PACTION_HEADER = *mut root::_ACTION_HEADER;
    extern "C" {
        pub fn Netbios(pncb: root::PNCB) -> root::UCHAR;
    }
    pub type I_RPC_HANDLE = *mut ::std::os::raw::c_void;
    pub type RPC_STATUS = i32;
    pub type RPC_CSTR = *mut u8;
    pub type RPC_WSTR = *mut u16;
    pub type RPC_CWSTR = *const u16;
    pub type RPC_BINDING_HANDLE = root::I_RPC_HANDLE;
    pub type handle_t = root::RPC_BINDING_HANDLE;
    pub type UUID = root::GUID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_BINDING_VECTOR {
        pub Count: u32,
        pub BindingH: [root::RPC_BINDING_HANDLE; 1usize],
    }
    pub type RPC_BINDING_VECTOR = root::_RPC_BINDING_VECTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _UUID_VECTOR {
        pub Count: u32,
        pub Uuid: [*mut root::UUID; 1usize],
    }
    pub type UUID_VECTOR = root::_UUID_VECTOR;
    pub type RPC_IF_HANDLE = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_IF_ID {
        pub Uuid: root::UUID,
        pub VersMajor: u16,
        pub VersMinor: u16,
    }
    pub type RPC_IF_ID = root::_RPC_IF_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_PROTSEQ_VECTORA {
        pub Count: u32,
        pub Protseq: [*mut u8; 1usize],
    }
    pub type RPC_PROTSEQ_VECTORA = root::_RPC_PROTSEQ_VECTORA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_PROTSEQ_VECTORW {
        pub Count: u32,
        pub Protseq: [*mut u16; 1usize],
    }
    pub type RPC_PROTSEQ_VECTORW = root::_RPC_PROTSEQ_VECTORW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_POLICY {
        pub Length: u32,
        pub EndpointFlags: u32,
        pub NICFlags: u32,
    }
    pub type RPC_POLICY = root::_RPC_POLICY;
    pub type PRPC_POLICY = *mut root::_RPC_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_STATS_VECTOR {
        pub Count: u32,
        pub Stats: [u32; 1usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_IF_ID_VECTOR {
        pub Count: u32,
        pub IfId: [*mut root::RPC_IF_ID; 1usize],
    }
    extern "C" {
        pub fn RpcBindingCopy(
            SourceBinding: root::RPC_BINDING_HANDLE,
            DestinationBinding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingFree(Binding: *mut root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingSetOption(
            hBinding: root::RPC_BINDING_HANDLE,
            option: u32,
            optionValue: u64,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqOption(
            hBinding: root::RPC_BINDING_HANDLE,
            option: u32,
            pOptionValue: *mut u64,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingFromStringBindingA(
            StringBinding: root::RPC_CSTR,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingFromStringBindingW(
            StringBinding: root::RPC_WSTR,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSsGetContextBinding(
            ContextHandle: *mut ::std::os::raw::c_void,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqObject(
            Binding: root::RPC_BINDING_HANDLE,
            ObjectUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingReset(Binding: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingSetObject(
            Binding: root::RPC_BINDING_HANDLE,
            ObjectUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtInqDefaultProtectLevel(
            AuthnSvc: u32,
            AuthnLevel: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingToStringBindingA(
            Binding: root::RPC_BINDING_HANDLE,
            StringBinding: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingToStringBindingW(
            Binding: root::RPC_BINDING_HANDLE,
            StringBinding: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingVectorFree(
            BindingVector: *mut *mut root::RPC_BINDING_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcStringBindingComposeA(
            ObjUuid: root::RPC_CSTR,
            ProtSeq: root::RPC_CSTR,
            NetworkAddr: root::RPC_CSTR,
            Endpoint: root::RPC_CSTR,
            Options: root::RPC_CSTR,
            StringBinding: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcStringBindingComposeW(
            ObjUuid: root::RPC_WSTR,
            ProtSeq: root::RPC_WSTR,
            NetworkAddr: root::RPC_WSTR,
            Endpoint: root::RPC_WSTR,
            Options: root::RPC_WSTR,
            StringBinding: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcStringBindingParseA(
            StringBinding: root::RPC_CSTR,
            ObjUuid: *mut root::RPC_CSTR,
            Protseq: *mut root::RPC_CSTR,
            NetworkAddr: *mut root::RPC_CSTR,
            Endpoint: *mut root::RPC_CSTR,
            NetworkOptions: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcStringBindingParseW(
            StringBinding: root::RPC_WSTR,
            ObjUuid: *mut root::RPC_WSTR,
            Protseq: *mut root::RPC_WSTR,
            NetworkAddr: *mut root::RPC_WSTR,
            Endpoint: *mut root::RPC_WSTR,
            NetworkOptions: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcStringFreeA(String: *mut root::RPC_CSTR) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcStringFreeW(String: *mut root::RPC_WSTR) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcIfInqId(
            RpcIfHandle: root::RPC_IF_HANDLE,
            RpcIfId: *mut root::RPC_IF_ID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNetworkIsProtseqValidA(Protseq: root::RPC_CSTR) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNetworkIsProtseqValidW(Protseq: root::RPC_WSTR) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtInqComTimeout(
            Binding: root::RPC_BINDING_HANDLE,
            Timeout: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtSetComTimeout(
            Binding: root::RPC_BINDING_HANDLE,
            Timeout: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtSetCancelTimeout(Timeout: i32) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNetworkInqProtseqsA(
            ProtseqVector: *mut *mut root::RPC_PROTSEQ_VECTORA,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNetworkInqProtseqsW(
            ProtseqVector: *mut *mut root::RPC_PROTSEQ_VECTORW,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcObjectInqType(
            ObjUuid: *mut root::UUID,
            TypeUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcObjectSetInqFn(
            InquiryFn: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut root::UUID,
                    arg2: *mut root::UUID,
                    arg3: *mut root::RPC_STATUS,
                ),
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcObjectSetType(
            ObjUuid: *mut root::UUID,
            TypeUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcProtseqVectorFreeA(
            ProtseqVector: *mut *mut root::RPC_PROTSEQ_VECTORA,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcProtseqVectorFreeW(
            ProtseqVector: *mut *mut root::RPC_PROTSEQ_VECTORW,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqBindings(
            BindingVector: *mut *mut root::RPC_BINDING_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqBindingsEx(
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            BindingVector: *mut *mut root::RPC_BINDING_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqIf(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            MgrEpv: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerListen(
            MinimumCallThreads: u32,
            MaxCalls: u32,
            DontWait: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerRegisterIf(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            MgrEpv: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerRegisterIfEx(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            MgrEpv: *mut ::std::os::raw::c_void,
            Flags: u32,
            MaxCalls: u32,
            IfCallback: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::RPC_IF_HANDLE,
                    arg2: *mut ::std::os::raw::c_void,
                ) -> root::RPC_STATUS,
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerRegisterIf2(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            MgrEpv: *mut ::std::os::raw::c_void,
            Flags: u32,
            MaxCalls: u32,
            MaxRpcSize: u32,
            IfCallbackFn: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::RPC_IF_HANDLE,
                    arg2: *mut ::std::os::raw::c_void,
                ) -> root::RPC_STATUS,
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerRegisterIf3(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            MgrEpv: *mut ::std::os::raw::c_void,
            Flags: u32,
            MaxCalls: u32,
            MaxRpcSize: u32,
            IfCallback: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::RPC_IF_HANDLE,
                    arg2: *mut ::std::os::raw::c_void,
                ) -> root::RPC_STATUS,
            >,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUnregisterIf(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            WaitForCallsToComplete: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUnregisterIfEx(
            IfSpec: root::RPC_IF_HANDLE,
            MgrTypeUuid: *mut root::UUID,
            RundownContextHandles: i32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseAllProtseqs(
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseAllProtseqsEx(
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseAllProtseqsIf(
            MaxCalls: u32,
            IfSpec: root::RPC_IF_HANDLE,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseAllProtseqsIfEx(
            MaxCalls: u32,
            IfSpec: root::RPC_IF_HANDLE,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqA(
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqExA(
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqW(
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqExW(
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqEpA(
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            Endpoint: root::RPC_CSTR,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqEpExA(
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            Endpoint: root::RPC_CSTR,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqEpW(
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            Endpoint: root::RPC_WSTR,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqEpExW(
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            Endpoint: root::RPC_WSTR,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqIfA(
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            IfSpec: root::RPC_IF_HANDLE,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqIfExA(
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            IfSpec: root::RPC_IF_HANDLE,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqIfW(
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            IfSpec: root::RPC_IF_HANDLE,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUseProtseqIfExW(
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            IfSpec: root::RPC_IF_HANDLE,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: root::PRPC_POLICY,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerYield();
    }
    extern "C" {
        pub fn RpcMgmtStatsVectorFree(
            StatsVector: *mut *mut root::RPC_STATS_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtInqStats(
            Binding: root::RPC_BINDING_HANDLE,
            Statistics: *mut *mut root::RPC_STATS_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtIsServerListening(Binding: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtStopServerListening(Binding: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtWaitServerListen() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtSetServerStackSize(
            ThreadStackSize: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSsDontSerializeContext();
    }
    extern "C" {
        pub fn RpcMgmtEnableIdleCleanup() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtInqIfIds(
            Binding: root::RPC_BINDING_HANDLE,
            IfIdVector: *mut *mut root::RPC_IF_ID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcIfIdVectorFree(IfIdVector: *mut *mut root::RPC_IF_ID_VECTOR) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtInqServerPrincNameA(
            Binding: root::RPC_BINDING_HANDLE,
            AuthnSvc: u32,
            ServerPrincName: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtInqServerPrincNameW(
            Binding: root::RPC_BINDING_HANDLE,
            AuthnSvc: u32,
            ServerPrincName: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqDefaultPrincNameA(
            AuthnSvc: u32,
            PrincName: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqDefaultPrincNameW(
            AuthnSvc: u32,
            PrincName: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcEpResolveBinding(
            Binding: root::RPC_BINDING_HANDLE,
            IfSpec: root::RPC_IF_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingInqEntryNameA(
            Binding: root::RPC_BINDING_HANDLE,
            EntryNameSyntax: u32,
            EntryName: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingInqEntryNameW(
            Binding: root::RPC_BINDING_HANDLE,
            EntryNameSyntax: u32,
            EntryName: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_AUTH_IDENTITY_HANDLE = *mut ::std::os::raw::c_void;
    pub type RPC_AUTHZ_HANDLE = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_SECURITY_QOS {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
    }
    pub type RPC_SECURITY_QOS = root::_RPC_SECURITY_QOS;
    pub type PRPC_SECURITY_QOS = *mut root::_RPC_SECURITY_QOS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SEC_WINNT_AUTH_IDENTITY_W {
        pub User: *mut u16,
        pub UserLength: u32,
        pub Domain: *mut u16,
        pub DomainLength: u32,
        pub Password: *mut u16,
        pub PasswordLength: u32,
        pub Flags: u32,
    }
    pub type SEC_WINNT_AUTH_IDENTITY_W = root::_SEC_WINNT_AUTH_IDENTITY_W;
    pub type PSEC_WINNT_AUTH_IDENTITY_W = *mut root::_SEC_WINNT_AUTH_IDENTITY_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SEC_WINNT_AUTH_IDENTITY_A {
        pub User: *mut u8,
        pub UserLength: u32,
        pub Domain: *mut u8,
        pub DomainLength: u32,
        pub Password: *mut u8,
        pub PasswordLength: u32,
        pub Flags: u32,
    }
    pub type SEC_WINNT_AUTH_IDENTITY_A = root::_SEC_WINNT_AUTH_IDENTITY_A;
    pub type PSEC_WINNT_AUTH_IDENTITY_A = *mut root::_SEC_WINNT_AUTH_IDENTITY_A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
        pub TransportCredentials: *mut root::SEC_WINNT_AUTH_IDENTITY_W,
        pub Flags: u32,
        pub AuthenticationTarget: u32,
        pub NumberOfAuthnSchemes: u32,
        pub AuthnSchemes: *mut u32,
        pub ServerCertificateSubject: *mut u16,
    }
    pub type RPC_HTTP_TRANSPORT_CREDENTIALS_W = root::_RPC_HTTP_TRANSPORT_CREDENTIALS_W;
    pub type PRPC_HTTP_TRANSPORT_CREDENTIALS_W = *mut root::_RPC_HTTP_TRANSPORT_CREDENTIALS_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
        pub TransportCredentials: *mut root::SEC_WINNT_AUTH_IDENTITY_A,
        pub Flags: u32,
        pub AuthenticationTarget: u32,
        pub NumberOfAuthnSchemes: u32,
        pub AuthnSchemes: *mut u32,
        pub ServerCertificateSubject: *mut u8,
    }
    pub type RPC_HTTP_TRANSPORT_CREDENTIALS_A = root::_RPC_HTTP_TRANSPORT_CREDENTIALS_A;
    pub type PRPC_HTTP_TRANSPORT_CREDENTIALS_A = *mut root::_RPC_HTTP_TRANSPORT_CREDENTIALS_A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
        pub TransportCredentials: *mut root::SEC_WINNT_AUTH_IDENTITY_W,
        pub Flags: u32,
        pub AuthenticationTarget: u32,
        pub NumberOfAuthnSchemes: u32,
        pub AuthnSchemes: *mut u32,
        pub ServerCertificateSubject: *mut u16,
        pub ProxyCredentials: *mut root::SEC_WINNT_AUTH_IDENTITY_W,
        pub NumberOfProxyAuthnSchemes: u32,
        pub ProxyAuthnSchemes: *mut u32,
    }
    pub type RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
    pub type PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = *mut root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
        pub TransportCredentials: *mut root::SEC_WINNT_AUTH_IDENTITY_A,
        pub Flags: u32,
        pub AuthenticationTarget: u32,
        pub NumberOfAuthnSchemes: u32,
        pub AuthnSchemes: *mut u32,
        pub ServerCertificateSubject: *mut u8,
        pub ProxyCredentials: *mut root::SEC_WINNT_AUTH_IDENTITY_A,
        pub NumberOfProxyAuthnSchemes: u32,
        pub ProxyAuthnSchemes: *mut u32,
    }
    pub type RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
    pub type PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = *mut root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
        pub TransportCredentials: root::RPC_AUTH_IDENTITY_HANDLE,
        pub Flags: u32,
        pub AuthenticationTarget: u32,
        pub NumberOfAuthnSchemes: u32,
        pub AuthnSchemes: *mut u32,
        pub ServerCertificateSubject: *mut u16,
        pub ProxyCredentials: root::RPC_AUTH_IDENTITY_HANDLE,
        pub NumberOfProxyAuthnSchemes: u32,
        pub ProxyAuthnSchemes: *mut u32,
    }
    pub type RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
    pub type PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = *mut root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
        pub TransportCredentials: root::RPC_AUTH_IDENTITY_HANDLE,
        pub Flags: u32,
        pub AuthenticationTarget: u32,
        pub NumberOfAuthnSchemes: u32,
        pub AuthnSchemes: *mut u32,
        pub ServerCertificateSubject: *mut u8,
        pub ProxyCredentials: root::RPC_AUTH_IDENTITY_HANDLE,
        pub NumberOfProxyAuthnSchemes: u32,
        pub ProxyAuthnSchemes: *mut u32,
    }
    pub type RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
    pub type PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = *mut root::_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V2_W {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V2_W__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V2_W__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_W,
    }
    pub type RPC_SECURITY_QOS_V2_W = root::_RPC_SECURITY_QOS_V2_W;
    pub type PRPC_SECURITY_QOS_V2_W = *mut root::_RPC_SECURITY_QOS_V2_W;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V2_A {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V2_A__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V2_A__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_A,
    }
    pub type RPC_SECURITY_QOS_V2_A = root::_RPC_SECURITY_QOS_V2_A;
    pub type PRPC_SECURITY_QOS_V2_A = *mut root::_RPC_SECURITY_QOS_V2_A;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V3_W {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V3_W__bindgen_ty_1,
        pub Sid: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V3_W__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_W,
    }
    pub type RPC_SECURITY_QOS_V3_W = root::_RPC_SECURITY_QOS_V3_W;
    pub type PRPC_SECURITY_QOS_V3_W = *mut root::_RPC_SECURITY_QOS_V3_W;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V3_A {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V3_A__bindgen_ty_1,
        pub Sid: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V3_A__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_A,
    }
    pub type RPC_SECURITY_QOS_V3_A = root::_RPC_SECURITY_QOS_V3_A;
    pub type PRPC_SECURITY_QOS_V3_A = *mut root::_RPC_SECURITY_QOS_V3_A;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V4_W {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V4_W__bindgen_ty_1,
        pub Sid: *mut ::std::os::raw::c_void,
        pub EffectiveOnly: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V4_W__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_W,
    }
    pub type RPC_SECURITY_QOS_V4_W = root::_RPC_SECURITY_QOS_V4_W;
    pub type PRPC_SECURITY_QOS_V4_W = *mut root::_RPC_SECURITY_QOS_V4_W;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V4_A {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V4_A__bindgen_ty_1,
        pub Sid: *mut ::std::os::raw::c_void,
        pub EffectiveOnly: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V4_A__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_A,
    }
    pub type RPC_SECURITY_QOS_V4_A = root::_RPC_SECURITY_QOS_V4_A;
    pub type PRPC_SECURITY_QOS_V4_A = *mut root::_RPC_SECURITY_QOS_V4_A;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V5_W {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V5_W__bindgen_ty_1,
        pub Sid: *mut ::std::os::raw::c_void,
        pub EffectiveOnly: u32,
        pub ServerSecurityDescriptor: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V5_W__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_W,
    }
    pub type RPC_SECURITY_QOS_V5_W = root::_RPC_SECURITY_QOS_V5_W;
    pub type PRPC_SECURITY_QOS_V5_W = *mut root::_RPC_SECURITY_QOS_V5_W;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_SECURITY_QOS_V5_A {
        pub Version: u32,
        pub Capabilities: u32,
        pub IdentityTracking: u32,
        pub ImpersonationType: u32,
        pub AdditionalSecurityInfoType: u32,
        pub u: root::_RPC_SECURITY_QOS_V5_A__bindgen_ty_1,
        pub Sid: *mut ::std::os::raw::c_void,
        pub EffectiveOnly: u32,
        pub ServerSecurityDescriptor: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_SECURITY_QOS_V5_A__bindgen_ty_1 {
        pub HttpCredentials: *mut root::RPC_HTTP_TRANSPORT_CREDENTIALS_A,
    }
    pub type RPC_SECURITY_QOS_V5_A = root::_RPC_SECURITY_QOS_V5_A;
    pub type PRPC_SECURITY_QOS_V5_A = *mut root::_RPC_SECURITY_QOS_V5_A;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
        pub Version: u32,
        pub Flags: u32,
        pub ProtocolSequence: u32,
        pub NetworkAddress: *mut u16,
        pub StringEndpoint: *mut u16,
        pub u1: root::_RPC_BINDING_HANDLE_TEMPLATE_V1_W__bindgen_ty_1,
        pub ObjectUuid: root::UUID,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_BINDING_HANDLE_TEMPLATE_V1_W__bindgen_ty_1 {
        pub Reserved: *mut u16,
    }
    pub type RPC_BINDING_HANDLE_TEMPLATE_V1_W = root::_RPC_BINDING_HANDLE_TEMPLATE_V1_W;
    pub type PRPC_BINDING_HANDLE_TEMPLATE_V1_W = *mut root::_RPC_BINDING_HANDLE_TEMPLATE_V1_W;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
        pub Version: u32,
        pub Flags: u32,
        pub ProtocolSequence: u32,
        pub NetworkAddress: *mut u8,
        pub StringEndpoint: *mut u8,
        pub u1: root::_RPC_BINDING_HANDLE_TEMPLATE_V1_A__bindgen_ty_1,
        pub ObjectUuid: root::UUID,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_BINDING_HANDLE_TEMPLATE_V1_A__bindgen_ty_1 {
        pub Reserved: *mut u8,
    }
    pub type RPC_BINDING_HANDLE_TEMPLATE_V1_A = root::_RPC_BINDING_HANDLE_TEMPLATE_V1_A;
    pub type PRPC_BINDING_HANDLE_TEMPLATE_V1_A = *mut root::_RPC_BINDING_HANDLE_TEMPLATE_V1_A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
        pub Version: u32,
        pub ServerPrincName: *mut u16,
        pub AuthnLevel: u32,
        pub AuthnSvc: u32,
        pub AuthIdentity: *mut root::SEC_WINNT_AUTH_IDENTITY_W,
        pub SecurityQos: *mut root::RPC_SECURITY_QOS,
    }
    pub type RPC_BINDING_HANDLE_SECURITY_V1_W = root::_RPC_BINDING_HANDLE_SECURITY_V1_W;
    pub type PRPC_BINDING_HANDLE_SECURITY_V1_W = *mut root::_RPC_BINDING_HANDLE_SECURITY_V1_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
        pub Version: u32,
        pub ServerPrincName: *mut u8,
        pub AuthnLevel: u32,
        pub AuthnSvc: u32,
        pub AuthIdentity: *mut root::SEC_WINNT_AUTH_IDENTITY_A,
        pub SecurityQos: *mut root::RPC_SECURITY_QOS,
    }
    pub type RPC_BINDING_HANDLE_SECURITY_V1_A = root::_RPC_BINDING_HANDLE_SECURITY_V1_A;
    pub type PRPC_BINDING_HANDLE_SECURITY_V1_A = *mut root::_RPC_BINDING_HANDLE_SECURITY_V1_A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
        pub Version: u32,
        pub Flags: u32,
        pub ComTimeout: u32,
        pub CallTimeout: u32,
    }
    pub type RPC_BINDING_HANDLE_OPTIONS_V1 = root::_RPC_BINDING_HANDLE_OPTIONS_V1;
    pub type PRPC_BINDING_HANDLE_OPTIONS_V1 = *mut root::_RPC_BINDING_HANDLE_OPTIONS_V1;
    extern "C" {
        pub fn RpcBindingCreateA(
            Template: *mut root::RPC_BINDING_HANDLE_TEMPLATE_V1_A,
            Security: *mut root::RPC_BINDING_HANDLE_SECURITY_V1_A,
            Options: *mut root::RPC_BINDING_HANDLE_OPTIONS_V1,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingCreateW(
            Template: *mut root::RPC_BINDING_HANDLE_TEMPLATE_V1_W,
            Security: *mut root::RPC_BINDING_HANDLE_SECURITY_V1_W,
            Options: *mut root::RPC_BINDING_HANDLE_OPTIONS_V1,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingGetTrainingContextHandle(
            Binding: root::RPC_BINDING_HANDLE,
            ContextHandle: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqBindingHandle(
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    pub const _RPC_HTTP_REDIRECTOR_STAGE_RPCHTTP_RS_REDIRECT: root::_RPC_HTTP_REDIRECTOR_STAGE = 1;
    pub const _RPC_HTTP_REDIRECTOR_STAGE_RPCHTTP_RS_ACCESS_1: root::_RPC_HTTP_REDIRECTOR_STAGE = 2;
    pub const _RPC_HTTP_REDIRECTOR_STAGE_RPCHTTP_RS_SESSION: root::_RPC_HTTP_REDIRECTOR_STAGE = 3;
    pub const _RPC_HTTP_REDIRECTOR_STAGE_RPCHTTP_RS_ACCESS_2: root::_RPC_HTTP_REDIRECTOR_STAGE = 4;
    pub const _RPC_HTTP_REDIRECTOR_STAGE_RPCHTTP_RS_INTERFACE: root::_RPC_HTTP_REDIRECTOR_STAGE = 5;
    pub type _RPC_HTTP_REDIRECTOR_STAGE = i32;
    pub use self::super::root::_RPC_HTTP_REDIRECTOR_STAGE as RPC_HTTP_REDIRECTOR_STAGE;
    pub type RPC_NEW_HTTP_PROXY_CHANNEL = ::std::option::Option<
        unsafe extern "C" fn(
            RedirectorStage: root::RPC_HTTP_REDIRECTOR_STAGE,
            ServerName: root::RPC_WSTR,
            ServerPort: root::RPC_WSTR,
            RemoteUser: root::RPC_WSTR,
            AuthType: root::RPC_WSTR,
            ResourceUuid: *mut ::std::os::raw::c_void,
            SessionId: *mut ::std::os::raw::c_void,
            Interface: *mut ::std::os::raw::c_void,
            Reserved: *mut ::std::os::raw::c_void,
            Flags: u32,
            NewServerName: *mut root::RPC_WSTR,
            NewServerPort: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS,
    >;
    pub type RPC_HTTP_PROXY_FREE_STRING =
        ::std::option::Option<unsafe extern "C" fn(String: root::RPC_WSTR)>;
    extern "C" {
        pub fn RpcImpersonateClient(BindingHandle: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcImpersonateClient2(BindingHandle: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcRevertToSelfEx(BindingHandle: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcRevertToSelf() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcImpersonateClientContainer(
            BindingHandle: root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcRevertContainerImpersonation() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthClientA(
            ClientBinding: root::RPC_BINDING_HANDLE,
            Privs: *mut root::RPC_AUTHZ_HANDLE,
            ServerPrincName: *mut root::RPC_CSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthzSvc: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthClientW(
            ClientBinding: root::RPC_BINDING_HANDLE,
            Privs: *mut root::RPC_AUTHZ_HANDLE,
            ServerPrincName: *mut root::RPC_WSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthzSvc: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthClientExA(
            ClientBinding: root::RPC_BINDING_HANDLE,
            Privs: *mut root::RPC_AUTHZ_HANDLE,
            ServerPrincName: *mut root::RPC_CSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthzSvc: *mut u32,
            Flags: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthClientExW(
            ClientBinding: root::RPC_BINDING_HANDLE,
            Privs: *mut root::RPC_AUTHZ_HANDLE,
            ServerPrincName: *mut root::RPC_WSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthzSvc: *mut u32,
            Flags: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthInfoA(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: *mut root::RPC_CSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthIdentity: *mut root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthInfoW(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: *mut root::RPC_WSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthIdentity: *mut root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingSetAuthInfoA(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: root::RPC_CSTR,
            AuthnLevel: u32,
            AuthnSvc: u32,
            AuthIdentity: root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingSetAuthInfoExA(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: root::RPC_CSTR,
            AuthnLevel: u32,
            AuthnSvc: u32,
            AuthIdentity: root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: u32,
            SecurityQos: *mut root::RPC_SECURITY_QOS,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingSetAuthInfoW(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: root::RPC_WSTR,
            AuthnLevel: u32,
            AuthnSvc: u32,
            AuthIdentity: root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingSetAuthInfoExW(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: root::RPC_WSTR,
            AuthnLevel: u32,
            AuthnSvc: u32,
            AuthIdentity: root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: u32,
            SecurityQOS: *mut root::RPC_SECURITY_QOS,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthInfoExA(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: *mut root::RPC_CSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthIdentity: *mut root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: *mut u32,
            RpcQosVersion: u32,
            SecurityQOS: *mut root::RPC_SECURITY_QOS,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingInqAuthInfoExW(
            Binding: root::RPC_BINDING_HANDLE,
            ServerPrincName: *mut root::RPC_WSTR,
            AuthnLevel: *mut u32,
            AuthnSvc: *mut u32,
            AuthIdentity: *mut root::RPC_AUTH_IDENTITY_HANDLE,
            AuthzSvc: *mut u32,
            RpcQosVersion: u32,
            SecurityQOS: *mut root::RPC_SECURITY_QOS,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_AUTH_KEY_RETRIEVAL_FN = ::std::option::Option<
        unsafe extern "C" fn(
            Arg: *mut ::std::os::raw::c_void,
            ServerPrincName: root::RPC_WSTR,
            KeyVer: u32,
            Key: *mut *mut ::std::os::raw::c_void,
            Status: *mut root::RPC_STATUS,
        ),
    >;
    extern "C" {
        pub fn RpcServerCompleteSecurityCallback(
            BindingHandle: root::RPC_BINDING_HANDLE,
            Status: root::RPC_STATUS,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerRegisterAuthInfoA(
            ServerPrincName: root::RPC_CSTR,
            AuthnSvc: u32,
            GetKeyFn: root::RPC_AUTH_KEY_RETRIEVAL_FN,
            Arg: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerRegisterAuthInfoW(
            ServerPrincName: root::RPC_WSTR,
            AuthnSvc: u32,
            GetKeyFn: root::RPC_AUTH_KEY_RETRIEVAL_FN,
            Arg: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_CLIENT_INFORMATION1 {
        pub UserName: *mut u8,
        pub ComputerName: *mut u8,
        pub Privilege: u16,
        pub AuthFlags: u32,
    }
    pub type PRPC_CLIENT_INFORMATION1 = *mut root::RPC_CLIENT_INFORMATION1;
    extern "C" {
        pub fn RpcBindingServerFromClient(
            ClientBinding: root::RPC_BINDING_HANDLE,
            ServerBinding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcRaiseException(exception: root::RPC_STATUS);
    }
    extern "C" {
        pub fn RpcTestCancel() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerTestCancel(BindingHandle: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcCancelThread(Thread: *mut ::std::os::raw::c_void) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcCancelThreadEx(
            Thread: *mut ::std::os::raw::c_void,
            Timeout: i32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidCreate(Uuid: *mut root::UUID) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidCreateSequential(Uuid: *mut root::UUID) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidToStringA(
            Uuid: *const root::UUID,
            StringUuid: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidFromStringA(
            StringUuid: root::RPC_CSTR,
            Uuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidToStringW(
            Uuid: *const root::UUID,
            StringUuid: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidFromStringW(
            StringUuid: root::RPC_WSTR,
            Uuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidCompare(
            Uuid1: *mut root::UUID,
            Uuid2: *mut root::UUID,
            Status: *mut root::RPC_STATUS,
        ) -> i32;
    }
    extern "C" {
        pub fn UuidCreateNil(NilUuid: *mut root::UUID) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn UuidEqual(
            Uuid1: *mut root::UUID,
            Uuid2: *mut root::UUID,
            Status: *mut root::RPC_STATUS,
        ) -> i32;
    }
    extern "C" {
        pub fn UuidHash(
            Uuid: *mut root::UUID,
            Status: *mut root::RPC_STATUS,
        ) -> u16;
    }
    extern "C" {
        pub fn UuidIsNil(
            Uuid: *mut root::UUID,
            Status: *mut root::RPC_STATUS,
        ) -> i32;
    }
    extern "C" {
        pub fn RpcEpRegisterNoReplaceA(
            IfSpec: root::RPC_IF_HANDLE,
            BindingVector: *mut root::RPC_BINDING_VECTOR,
            UuidVector: *mut root::UUID_VECTOR,
            Annotation: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcEpRegisterNoReplaceW(
            IfSpec: root::RPC_IF_HANDLE,
            BindingVector: *mut root::RPC_BINDING_VECTOR,
            UuidVector: *mut root::UUID_VECTOR,
            Annotation: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcEpRegisterA(
            IfSpec: root::RPC_IF_HANDLE,
            BindingVector: *mut root::RPC_BINDING_VECTOR,
            UuidVector: *mut root::UUID_VECTOR,
            Annotation: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcEpRegisterW(
            IfSpec: root::RPC_IF_HANDLE,
            BindingVector: *mut root::RPC_BINDING_VECTOR,
            UuidVector: *mut root::UUID_VECTOR,
            Annotation: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcEpUnregister(
            IfSpec: root::RPC_IF_HANDLE,
            BindingVector: *mut root::RPC_BINDING_VECTOR,
            UuidVector: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn DceErrorInqTextA(
            RpcStatus: root::RPC_STATUS,
            ErrorText: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn DceErrorInqTextW(
            RpcStatus: root::RPC_STATUS,
            ErrorText: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_EP_INQ_HANDLE = *mut root::I_RPC_HANDLE;
    extern "C" {
        pub fn RpcMgmtEpEltInqBegin(
            EpBinding: root::RPC_BINDING_HANDLE,
            InquiryType: u32,
            IfId: *mut root::RPC_IF_ID,
            VersOption: u32,
            ObjectUuid: *mut root::UUID,
            InquiryContext: *mut root::RPC_EP_INQ_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtEpEltInqDone(
            InquiryContext: *mut root::RPC_EP_INQ_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtEpEltInqNextA(
            InquiryContext: root::RPC_EP_INQ_HANDLE,
            IfId: *mut root::RPC_IF_ID,
            Binding: *mut root::RPC_BINDING_HANDLE,
            ObjectUuid: *mut root::UUID,
            Annotation: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtEpEltInqNextW(
            InquiryContext: root::RPC_EP_INQ_HANDLE,
            IfId: *mut root::RPC_IF_ID,
            Binding: *mut root::RPC_BINDING_HANDLE,
            ObjectUuid: *mut root::UUID,
            Annotation: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcMgmtEpUnregister(
            EpBinding: root::RPC_BINDING_HANDLE,
            IfId: *mut root::RPC_IF_ID,
            Binding: root::RPC_BINDING_HANDLE,
            ObjectUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_MGMT_AUTHORIZATION_FN = ::std::option::Option<
        unsafe extern "C" fn(
            ClientBinding: root::RPC_BINDING_HANDLE,
            RequestedMgmtOperation: u32,
            Status: *mut root::RPC_STATUS,
        ) -> i32,
    >;
    extern "C" {
        pub fn RpcMgmtSetAuthorizationFn(
            AuthorizationFn: root::RPC_MGMT_AUTHORIZATION_FN,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcExceptionFilter(ExceptionCode: u32) -> i32;
    }
    pub type RPC_INTERFACE_GROUP = *mut ::std::os::raw::c_void;
    pub type PRPC_INTERFACE_GROUP = *mut *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_ENDPOINT_TEMPLATEW {
        pub Version: u32,
        pub ProtSeq: root::RPC_WSTR,
        pub Endpoint: root::RPC_WSTR,
        pub SecurityDescriptor: *mut ::std::os::raw::c_void,
        pub Backlog: u32,
    }
    pub type PRPC_ENDPOINT_TEMPLATEW = *mut root::RPC_ENDPOINT_TEMPLATEW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_ENDPOINT_TEMPLATEA {
        pub Version: u32,
        pub ProtSeq: root::RPC_CSTR,
        pub Endpoint: root::RPC_CSTR,
        pub SecurityDescriptor: *mut ::std::os::raw::c_void,
        pub Backlog: u32,
    }
    pub type PRPC_ENDPOINT_TEMPLATEA = *mut root::RPC_ENDPOINT_TEMPLATEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_INTERFACE_TEMPLATEA {
        pub Version: u32,
        pub IfSpec: root::RPC_IF_HANDLE,
        pub MgrTypeUuid: *mut root::UUID,
        pub MgrEpv: *mut ::std::os::raw::c_void,
        pub Flags: u32,
        pub MaxCalls: u32,
        pub MaxRpcSize: u32,
        pub IfCallback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: root::RPC_IF_HANDLE,
                arg2: *mut ::std::os::raw::c_void,
            ) -> root::RPC_STATUS,
        >,
        pub UuidVector: *mut root::UUID_VECTOR,
        pub Annotation: root::RPC_CSTR,
        pub SecurityDescriptor: *mut ::std::os::raw::c_void,
    }
    pub type PRPC_INTERFACE_TEMPLATEA = *mut root::RPC_INTERFACE_TEMPLATEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_INTERFACE_TEMPLATEW {
        pub Version: u32,
        pub IfSpec: root::RPC_IF_HANDLE,
        pub MgrTypeUuid: *mut root::UUID,
        pub MgrEpv: *mut ::std::os::raw::c_void,
        pub Flags: u32,
        pub MaxCalls: u32,
        pub MaxRpcSize: u32,
        pub IfCallback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: root::RPC_IF_HANDLE,
                arg2: *mut ::std::os::raw::c_void,
            ) -> root::RPC_STATUS,
        >,
        pub UuidVector: *mut root::UUID_VECTOR,
        pub Annotation: root::RPC_WSTR,
        pub SecurityDescriptor: *mut ::std::os::raw::c_void,
    }
    pub type PRPC_INTERFACE_TEMPLATEW = *mut root::RPC_INTERFACE_TEMPLATEW;
    extern "C" {
        pub fn RpcServerInterfaceGroupCreateW(
            Interfaces: *mut root::RPC_INTERFACE_TEMPLATEW,
            NumIfs: u32,
            Endpoints: *mut root::RPC_ENDPOINT_TEMPLATEW,
            NumEndpoints: u32,
            IdlePeriod: u32,
            IdleCallbackFn: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::RPC_INTERFACE_GROUP,
                    arg2: *mut ::std::os::raw::c_void,
                    arg3: u32,
                ),
            >,
            IdleCallbackContext: *mut ::std::os::raw::c_void,
            IfGroup: root::PRPC_INTERFACE_GROUP,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInterfaceGroupCreateA(
            Interfaces: *mut root::RPC_INTERFACE_TEMPLATEA,
            NumIfs: u32,
            Endpoints: *mut root::RPC_ENDPOINT_TEMPLATEA,
            NumEndpoints: u32,
            IdlePeriod: u32,
            IdleCallbackFn: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::RPC_INTERFACE_GROUP,
                    arg2: *mut ::std::os::raw::c_void,
                    arg3: u32,
                ),
            >,
            IdleCallbackContext: *mut ::std::os::raw::c_void,
            IfGroup: root::PRPC_INTERFACE_GROUP,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInterfaceGroupClose(IfGroup: root::RPC_INTERFACE_GROUP)
            -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInterfaceGroupActivate(
            IfGroup: root::RPC_INTERFACE_GROUP,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInterfaceGroupDeactivate(
            IfGroup: root::RPC_INTERFACE_GROUP,
            ForceDeactivation: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInterfaceGroupInqBindings(
            IfGroup: root::RPC_INTERFACE_GROUP,
            BindingVector: *mut *mut root::RPC_BINDING_VECTOR,
        ) -> root::RPC_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_VERSION {
        pub MajorVersion: u16,
        pub MinorVersion: u16,
    }
    pub type RPC_VERSION = root::_RPC_VERSION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_SYNTAX_IDENTIFIER {
        pub SyntaxGUID: root::GUID,
        pub SyntaxVersion: root::RPC_VERSION,
    }
    pub type RPC_SYNTAX_IDENTIFIER = root::_RPC_SYNTAX_IDENTIFIER;
    pub type PRPC_SYNTAX_IDENTIFIER = *mut root::_RPC_SYNTAX_IDENTIFIER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_MESSAGE {
        pub Handle: root::RPC_BINDING_HANDLE,
        pub DataRepresentation: u32,
        pub Buffer: *mut ::std::os::raw::c_void,
        pub BufferLength: u32,
        pub ProcNum: u32,
        pub TransferSyntax: root::PRPC_SYNTAX_IDENTIFIER,
        pub RpcInterfaceInformation: *mut ::std::os::raw::c_void,
        pub ReservedForRuntime: *mut ::std::os::raw::c_void,
        pub ManagerEpv: *mut ::std::os::raw::c_void,
        pub ImportContext: *mut ::std::os::raw::c_void,
        pub RpcFlags: u32,
    }
    pub type RPC_MESSAGE = root::_RPC_MESSAGE;
    pub type PRPC_MESSAGE = *mut root::_RPC_MESSAGE;
    pub const RPC_ADDRESS_CHANGE_TYPE_PROTOCOL_NOT_LOADED: root::RPC_ADDRESS_CHANGE_TYPE = 1;
    pub const RPC_ADDRESS_CHANGE_TYPE_PROTOCOL_LOADED: root::RPC_ADDRESS_CHANGE_TYPE = 2;
    pub const RPC_ADDRESS_CHANGE_TYPE_PROTOCOL_ADDRESS_CHANGE: root::RPC_ADDRESS_CHANGE_TYPE = 3;
    pub type RPC_ADDRESS_CHANGE_TYPE = i32;
    pub type RPC_DISPATCH_FUNCTION =
        ::std::option::Option<unsafe extern "C" fn(Message: root::PRPC_MESSAGE)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_DISPATCH_TABLE {
        pub DispatchTableCount: u32,
        pub DispatchTable: *mut root::RPC_DISPATCH_FUNCTION,
        pub Reserved: i64,
    }
    pub type PRPC_DISPATCH_TABLE = *mut root::RPC_DISPATCH_TABLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_PROTSEQ_ENDPOINT {
        pub RpcProtocolSequence: *mut u8,
        pub Endpoint: *mut u8,
    }
    pub type RPC_PROTSEQ_ENDPOINT = root::_RPC_PROTSEQ_ENDPOINT;
    pub type PRPC_PROTSEQ_ENDPOINT = *mut root::_RPC_PROTSEQ_ENDPOINT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_SERVER_INTERFACE {
        pub Length: u32,
        pub InterfaceId: root::RPC_SYNTAX_IDENTIFIER,
        pub TransferSyntax: root::RPC_SYNTAX_IDENTIFIER,
        pub DispatchTable: root::PRPC_DISPATCH_TABLE,
        pub RpcProtseqEndpointCount: u32,
        pub RpcProtseqEndpoint: root::PRPC_PROTSEQ_ENDPOINT,
        pub DefaultManagerEpv: *mut ::std::os::raw::c_void,
        pub InterpreterInfo: *const ::std::os::raw::c_void,
        pub Flags: u32,
    }
    pub type RPC_SERVER_INTERFACE = root::_RPC_SERVER_INTERFACE;
    pub type PRPC_SERVER_INTERFACE = *mut root::_RPC_SERVER_INTERFACE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_CLIENT_INTERFACE {
        pub Length: u32,
        pub InterfaceId: root::RPC_SYNTAX_IDENTIFIER,
        pub TransferSyntax: root::RPC_SYNTAX_IDENTIFIER,
        pub DispatchTable: root::PRPC_DISPATCH_TABLE,
        pub RpcProtseqEndpointCount: u32,
        pub RpcProtseqEndpoint: root::PRPC_PROTSEQ_ENDPOINT,
        pub Reserved: u64,
        pub InterpreterInfo: *const ::std::os::raw::c_void,
        pub Flags: u32,
    }
    pub type RPC_CLIENT_INTERFACE = root::_RPC_CLIENT_INTERFACE;
    pub type PRPC_CLIENT_INTERFACE = *mut root::_RPC_CLIENT_INTERFACE;
    extern "C" {
        pub fn I_RpcNegotiateTransferSyntax(Message: *mut root::RPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcGetBuffer(Message: *mut root::RPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcGetBufferWithObject(
            Message: *mut root::RPC_MESSAGE,
            ObjectUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcSendReceive(Message: *mut root::RPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcFreeBuffer(Message: *mut root::RPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcSend(Message: root::PRPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcReceive(
            Message: root::PRPC_MESSAGE,
            Size: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcFreePipeBuffer(Message: *mut root::RPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcReallocPipeBuffer(
            Message: root::PRPC_MESSAGE,
            NewSize: u32,
        ) -> root::RPC_STATUS;
    }
    pub type I_RPC_MUTEX = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn I_RpcRequestMutex(Mutex: *mut root::I_RPC_MUTEX);
    }
    extern "C" {
        pub fn I_RpcClearMutex(Mutex: root::I_RPC_MUTEX);
    }
    extern "C" {
        pub fn I_RpcDeleteMutex(Mutex: root::I_RPC_MUTEX);
    }
    extern "C" {
        pub fn I_RpcAllocate(Size: u32) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn I_RpcFree(Object: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn I_RpcFreeSystemHandleCollection(
            CallObj: *mut ::std::os::raw::c_void,
            FreeFlags: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn I_RpcSetSystemHandle(
            Handle: *mut ::std::os::raw::c_void,
            Type: u8,
            AccessMask: u32,
            CallObj: *mut ::std::os::raw::c_void,
            HandleIndex: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcGetSystemHandle(
            pMemory: *mut u8,
            Type: u8,
            AccessMask: u32,
            HandleIndex: u32,
            CallObj: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcFreeSystemHandle(
            Type: u8,
            Handle: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn I_RpcPauseExecution(Milliseconds: u32);
    }
    extern "C" {
        pub fn I_RpcGetExtendedError() -> root::RPC_STATUS;
    }
    pub const _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION_MarshalDirectionMarshal:
        root::_LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = 0;
    pub const _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION_MarshalDirectionUnmarshal:
        root::_LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = 1;
    pub type _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = i32;
    pub use self::super::root::_LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION as LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION;
    extern "C" {
        pub fn I_RpcSystemHandleTypeSpecificWork(
            Handle: *mut ::std::os::raw::c_void,
            ActualType: u8,
            IdlType: u8,
            MarshalDirection: root::LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION,
        ) -> root::RPC_STATUS;
    }
    pub type PRPC_RUNDOWN = ::std::option::Option<
        unsafe extern "C" fn(AssociationContext: *mut ::std::os::raw::c_void),
    >;
    extern "C" {
        pub fn I_RpcMonitorAssociation(
            Handle: root::RPC_BINDING_HANDLE,
            RundownRoutine: root::PRPC_RUNDOWN,
            Context: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcStopMonitorAssociation(Handle: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcGetCurrentCallHandle() -> root::RPC_BINDING_HANDLE;
    }
    extern "C" {
        pub fn I_RpcGetAssociationContext(
            BindingHandle: root::RPC_BINDING_HANDLE,
            AssociationContext: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcGetServerContextList(
            BindingHandle: root::RPC_BINDING_HANDLE,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn I_RpcSetServerContextList(
            BindingHandle: root::RPC_BINDING_HANDLE,
            ServerContextList: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn I_RpcNsInterfaceExported(
            EntryNameSyntax: u32,
            EntryName: *mut u16,
            RpcInterfaceInformation: *mut root::RPC_SERVER_INTERFACE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcNsInterfaceUnexported(
            EntryNameSyntax: u32,
            EntryName: *mut u16,
            RpcInterfaceInformation: *mut root::RPC_SERVER_INTERFACE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingToStaticStringBindingW(
            Binding: root::RPC_BINDING_HANDLE,
            StringBinding: *mut *mut u16,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqSecurityContext(
            Binding: root::RPC_BINDING_HANDLE,
            SecurityContextHandle: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_SEC_CONTEXT_KEY_INFO {
        pub EncryptAlgorithm: u32,
        pub KeySize: u32,
        pub SignatureAlgorithm: u32,
    }
    pub type RPC_SEC_CONTEXT_KEY_INFO = root::_RPC_SEC_CONTEXT_KEY_INFO;
    pub type PRPC_SEC_CONTEXT_KEY_INFO = *mut root::_RPC_SEC_CONTEXT_KEY_INFO;
    extern "C" {
        pub fn I_RpcBindingInqSecurityContextKeyInfo(
            Binding: root::RPC_BINDING_HANDLE,
            KeyInfo: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqWireIdForSnego(
            Binding: root::RPC_BINDING_HANDLE,
            WireId: *mut u8,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqMarshalledTargetInfo(
            Binding: root::RPC_BINDING_HANDLE,
            MarshalledTargetInfoSize: *mut u32,
            MarshalledTargetInfo: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqLocalClientPID(
            Binding: root::RPC_BINDING_HANDLE,
            Pid: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingHandleToAsyncHandle(
            Binding: root::RPC_BINDING_HANDLE,
            AsyncHandle: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcNsBindingSetEntryNameW(
            Binding: root::RPC_BINDING_HANDLE,
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcNsBindingSetEntryNameA(
            Binding: root::RPC_BINDING_HANDLE,
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerUseProtseqEp2A(
            NetworkAddress: root::RPC_CSTR,
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            Endpoint: root::RPC_CSTR,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerUseProtseqEp2W(
            NetworkAddress: root::RPC_WSTR,
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            Endpoint: root::RPC_WSTR,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerUseProtseq2W(
            NetworkAddress: root::RPC_WSTR,
            Protseq: root::RPC_WSTR,
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerUseProtseq2A(
            NetworkAddress: root::RPC_CSTR,
            Protseq: root::RPC_CSTR,
            MaxCalls: u32,
            SecurityDescriptor: *mut ::std::os::raw::c_void,
            Policy: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerStartService(
            Protseq: root::RPC_WSTR,
            Endpoint: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqDynamicEndpointW(
            Binding: root::RPC_BINDING_HANDLE,
            DynamicEndpoint: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqDynamicEndpointA(
            Binding: root::RPC_BINDING_HANDLE,
            DynamicEndpoint: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerCheckClientRestriction(
            Context: root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqTransportType(
            Binding: root::RPC_BINDING_HANDLE,
            Type: *mut u32,
        ) -> root::RPC_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_TRANSFER_SYNTAX {
        pub Uuid: root::UUID,
        pub VersMajor: u16,
        pub VersMinor: u16,
    }
    pub type RPC_TRANSFER_SYNTAX = root::_RPC_TRANSFER_SYNTAX;
    extern "C" {
        pub fn I_RpcIfInqTransferSyntaxes(
            RpcIfHandle: root::RPC_IF_HANDLE,
            TransferSyntaxes: *mut root::RPC_TRANSFER_SYNTAX,
            TransferSyntaxSize: u32,
            TransferSyntaxCount: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_UuidCreate(Uuid: *mut root::UUID) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcUninitializeNdrOle();
    }
    extern "C" {
        pub fn I_RpcBindingCopy(
            SourceBinding: root::RPC_BINDING_HANDLE,
            DestinationBinding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingIsClientLocal(
            BindingHandle: root::RPC_BINDING_HANDLE,
            ClientLocalFlag: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingInqConnId(
            Binding: root::RPC_BINDING_HANDLE,
            ConnId: *mut *mut ::std::os::raw::c_void,
            pfFirstCall: *mut i32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingCreateNP(
            ServerName: root::RPC_WSTR,
            ServiceName: root::RPC_WSTR,
            NetworkOptions: root::RPC_WSTR,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcSsDontSerializeContext();
    }
    extern "C" {
        pub fn I_RpcLaunchDatagramReceiveThread(
            pAddress: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerRegisterForwardFunction(
            pForwardFunction: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut root::UUID,
                    arg2: *mut root::RPC_VERSION,
                    arg3: *mut root::UUID,
                    arg4: *mut u8,
                    arg5: *mut *mut ::std::os::raw::c_void,
                ) -> root::RPC_STATUS,
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerInqAddressChangeFn(
        ) -> ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
    }
    extern "C" {
        pub fn I_RpcServerSetAddressChangeFn(
            pAddressChangeFn: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerInqLocalConnAddress(
            Binding: root::RPC_BINDING_HANDLE,
            Buffer: *mut ::std::os::raw::c_void,
            BufferSize: *mut u32,
            AddressFormat: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerInqRemoteConnAddress(
            Binding: root::RPC_BINDING_HANDLE,
            Buffer: *mut ::std::os::raw::c_void,
            BufferSize: *mut u32,
            AddressFormat: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcSessionStrictContextHandle();
    }
    extern "C" {
        pub fn I_RpcTurnOnEEInfoPropagation() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcConnectionInqSockBuffSize(
            RecvBuffSize: *mut u32,
            SendBuffSize: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcConnectionSetSockBuffSize(
            RecvBuffSize: u32,
            SendBuffSize: u32,
        ) -> root::RPC_STATUS;
    }
    pub type RPCLT_PDU_FILTER_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            Buffer: *mut ::std::os::raw::c_void,
            BufferLength: u32,
            fDatagram: i32,
        ),
    >;
    pub type RPC_SETFILTER_FUNC =
        ::std::option::Option<unsafe extern "C" fn(pfnFilter: root::RPCLT_PDU_FILTER_FUNC)>;
    extern "C" {
        pub fn I_RpcServerStartListening(hWnd: *mut ::std::os::raw::c_void) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerStopListening() -> root::RPC_STATUS;
    }
    pub type RPC_BLOCKING_FN = ::std::option::Option<
        unsafe extern "C" fn(
            hWnd: *mut ::std::os::raw::c_void,
            Context: *mut ::std::os::raw::c_void,
            hSyncEvent: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS,
    >;
    extern "C" {
        pub fn I_RpcBindingSetAsync(
            Binding: root::RPC_BINDING_HANDLE,
            BlockingFn: root::RPC_BLOCKING_FN,
            ServerTid: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcSetThreadParams(
            fClientFree: i32,
            Context: *mut ::std::os::raw::c_void,
            hWndClient: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcWindowProc(
            hWnd: *mut ::std::os::raw::c_void,
            Message: u32,
            wParam: u32,
            lParam: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn I_RpcServerUnregisterEndpointA(
            Protseq: root::RPC_CSTR,
            Endpoint: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerUnregisterEndpointW(
            Protseq: root::RPC_WSTR,
            Endpoint: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerInqTransportType(Type: *mut u32) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcMapWin32Status(Status: root::RPC_STATUS) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR {
        pub BufferSize: u32,
        pub Buffer: *mut i8,
    }
    pub type RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = root::_RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RDR_CALLOUT_STATE {
        pub LastError: root::RPC_STATUS,
        pub LastEEInfo: *mut ::std::os::raw::c_void,
        pub LastCalledStage: root::RPC_HTTP_REDIRECTOR_STAGE,
        pub ServerName: *mut u16,
        pub ServerPort: *mut u16,
        pub RemoteUser: *mut u16,
        pub AuthType: *mut u16,
        pub ResourceTypePresent: u8,
        pub SessionIdPresent: u8,
        pub InterfacePresent: u8,
        pub ResourceType: root::UUID,
        pub SessionId: root::UUID,
        pub Interface: root::RPC_SYNTAX_IDENTIFIER,
        pub CertContext: *mut ::std::os::raw::c_void,
    }
    pub type RDR_CALLOUT_STATE = root::_RDR_CALLOUT_STATE;
    pub type I_RpcProxyIsValidMachineFn = ::std::option::Option<
        unsafe extern "C" fn(
            Machine: root::RPC_WSTR,
            DotMachine: root::RPC_WSTR,
            PortNumber: u32,
        ) -> root::RPC_STATUS,
    >;
    pub type I_RpcProxyGetClientAddressFn = ::std::option::Option<
        unsafe extern "C" fn(
            Context: *mut ::std::os::raw::c_void,
            Buffer: *mut i8,
            BufferLength: *mut u32,
        ) -> root::RPC_STATUS,
    >;
    pub type I_RpcProxyGetConnectionTimeoutFn = ::std::option::Option<
        unsafe extern "C" fn(ConnectionTimeout: *mut u32) -> root::RPC_STATUS,
    >;
    pub type I_RpcPerformCalloutFn = ::std::option::Option<
        unsafe extern "C" fn(
            Context: *mut ::std::os::raw::c_void,
            CallOutState: *mut root::RDR_CALLOUT_STATE,
            Stage: root::RPC_HTTP_REDIRECTOR_STAGE,
        ) -> root::RPC_STATUS,
    >;
    pub type I_RpcFreeCalloutStateFn =
        ::std::option::Option<unsafe extern "C" fn(CallOutState: *mut root::RDR_CALLOUT_STATE)>;
    pub type I_RpcProxyGetClientSessionAndResourceUUID = ::std::option::Option<
        unsafe extern "C" fn(
            Context: *mut ::std::os::raw::c_void,
            SessionIdPresent: *mut i32,
            SessionId: *mut root::UUID,
            ResourceIdPresent: *mut i32,
            ResourceId: *mut root::UUID,
        ) -> root::RPC_STATUS,
    >;
    pub type I_RpcProxyFilterIfFn = ::std::option::Option<
        unsafe extern "C" fn(
            Context: *mut ::std::os::raw::c_void,
            IfUuid: *mut root::UUID,
            IfMajorVersion: u16,
            fAllow: *mut i32,
        ) -> root::RPC_STATUS,
    >;
    pub const RpcProxyPerfCounters_RpcCurrentUniqueUser: root::RpcProxyPerfCounters = 1;
    pub const RpcProxyPerfCounters_RpcBackEndConnectionAttempts: root::RpcProxyPerfCounters = 2;
    pub const RpcProxyPerfCounters_RpcBackEndConnectionFailed: root::RpcProxyPerfCounters = 3;
    pub const RpcProxyPerfCounters_RpcRequestsPerSecond: root::RpcProxyPerfCounters = 4;
    pub const RpcProxyPerfCounters_RpcIncomingConnections: root::RpcProxyPerfCounters = 5;
    pub const RpcProxyPerfCounters_RpcIncomingBandwidth: root::RpcProxyPerfCounters = 6;
    pub const RpcProxyPerfCounters_RpcOutgoingBandwidth: root::RpcProxyPerfCounters = 7;
    pub const RpcProxyPerfCounters_RpcAttemptedLbsDecisions: root::RpcProxyPerfCounters = 8;
    pub const RpcProxyPerfCounters_RpcFailedLbsDecisions: root::RpcProxyPerfCounters = 9;
    pub const RpcProxyPerfCounters_RpcAttemptedLbsMessages: root::RpcProxyPerfCounters = 10;
    pub const RpcProxyPerfCounters_RpcFailedLbsMessages: root::RpcProxyPerfCounters = 11;
    pub const RpcProxyPerfCounters_RpcLastCounter: root::RpcProxyPerfCounters = 12;
    pub type RpcProxyPerfCounters = i32;
    pub use self::super::root::RpcProxyPerfCounters as RpcPerfCounters;
    pub type I_RpcProxyUpdatePerfCounterFn = ::std::option::Option<
        unsafe extern "C" fn(
            Counter: root::RpcPerfCounters,
            ModifyTrend: i32,
            Size: u32,
        ),
    >;
    pub type I_RpcProxyUpdatePerfCounterBackendServerFn = ::std::option::Option<
        unsafe extern "C" fn(
            MachineName: *mut u16,
            IsConnectEvent: i32,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagI_RpcProxyCallbackInterface {
        pub IsValidMachineFn: root::I_RpcProxyIsValidMachineFn,
        pub GetClientAddressFn: root::I_RpcProxyGetClientAddressFn,
        pub GetConnectionTimeoutFn: root::I_RpcProxyGetConnectionTimeoutFn,
        pub PerformCalloutFn: root::I_RpcPerformCalloutFn,
        pub FreeCalloutStateFn: root::I_RpcFreeCalloutStateFn,
        pub GetClientSessionAndResourceUUIDFn: root::I_RpcProxyGetClientSessionAndResourceUUID,
        pub ProxyFilterIfFn: root::I_RpcProxyFilterIfFn,
        pub RpcProxyUpdatePerfCounterFn: root::I_RpcProxyUpdatePerfCounterFn,
        pub RpcProxyUpdatePerfCounterBackendServerFn:
            root::I_RpcProxyUpdatePerfCounterBackendServerFn,
    }
    pub type I_RpcProxyCallbackInterface = root::tagI_RpcProxyCallbackInterface;
    extern "C" {
        pub fn I_RpcProxyNewConnection(
            ConnectionType: u32,
            ServerAddress: *mut u16,
            ServerPort: *mut u16,
            MinConnTimeout: *mut u16,
            ConnectionParameter: *mut ::std::os::raw::c_void,
            CallOutState: *mut root::RDR_CALLOUT_STATE,
            ProxyCallbackInterface: *mut root::I_RpcProxyCallbackInterface,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcReplyToClientWithStatus(
            ConnectionParameter: *mut ::std::os::raw::c_void,
            RpcStatus: root::RPC_STATUS,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcRecordCalloutFailure(
            RpcStatus: root::RPC_STATUS,
            CallOutState: *mut root::RDR_CALLOUT_STATE,
            DllName: *mut u16,
        );
    }
    extern "C" {
        pub fn I_RpcMgmtEnableDedicatedThreadPool() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcGetDefaultSD(
            ppSecurityDescriptor: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcOpenClientProcess(
            Binding: root::RPC_BINDING_HANDLE,
            DesiredAccess: u32,
            ClientProcess: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingIsServerLocal(
            Binding: root::RPC_BINDING_HANDLE,
            ServerLocalFlag: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcBindingSetPrivateOption(
            hBinding: root::RPC_BINDING_HANDLE,
            option: u32,
            optionValue: u64,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerSubscribeForDisconnectNotification(
            Binding: root::RPC_BINDING_HANDLE,
            hEvent: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerGetAssociationID(
            Binding: root::RPC_BINDING_HANDLE,
            AssociationID: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerDisableExceptionFilter() -> i32;
    }
    extern "C" {
        pub fn I_RpcServerSubscribeForDisconnectNotification2(
            Binding: root::RPC_BINDING_HANDLE,
            hEvent: *mut ::std::os::raw::c_void,
            SubscriptionId: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcServerUnsubscribeForDisconnectNotification(
            Binding: root::RPC_BINDING_HANDLE,
            SubscriptionId: root::UUID,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_NS_HANDLE = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn RpcNsBindingExportA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfSpec: root::RPC_IF_HANDLE,
            BindingVec: *mut root::RPC_BINDING_VECTOR,
            ObjectUuidVec: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingUnexportA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjectUuidVec: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingExportW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
            BindingVec: *mut root::RPC_BINDING_VECTOR,
            ObjectUuidVec: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingUnexportW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjectUuidVec: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingExportPnPA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjectVector: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingUnexportPnPA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjectVector: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingExportPnPW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjectVector: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingUnexportPnPW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjectVector: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingLookupBeginA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjUuid: *mut root::UUID,
            BindingMaxCount: u32,
            LookupContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingLookupBeginW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjUuid: *mut root::UUID,
            BindingMaxCount: u32,
            LookupContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingLookupNext(
            LookupContext: root::RPC_NS_HANDLE,
            BindingVec: *mut *mut root::RPC_BINDING_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingLookupDone(LookupContext: *mut root::RPC_NS_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupDeleteA(
            GroupNameSyntax: u32,
            GroupName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrAddA(
            GroupNameSyntax: u32,
            GroupName: root::RPC_CSTR,
            MemberNameSyntax: u32,
            MemberName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrRemoveA(
            GroupNameSyntax: u32,
            GroupName: root::RPC_CSTR,
            MemberNameSyntax: u32,
            MemberName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrInqBeginA(
            GroupNameSyntax: u32,
            GroupName: root::RPC_CSTR,
            MemberNameSyntax: u32,
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrInqNextA(
            InquiryContext: root::RPC_NS_HANDLE,
            MemberName: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupDeleteW(
            GroupNameSyntax: u32,
            GroupName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrAddW(
            GroupNameSyntax: u32,
            GroupName: root::RPC_WSTR,
            MemberNameSyntax: u32,
            MemberName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrRemoveW(
            GroupNameSyntax: u32,
            GroupName: root::RPC_WSTR,
            MemberNameSyntax: u32,
            MemberName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrInqBeginW(
            GroupNameSyntax: u32,
            GroupName: root::RPC_WSTR,
            MemberNameSyntax: u32,
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrInqNextW(
            InquiryContext: root::RPC_NS_HANDLE,
            MemberName: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsGroupMbrInqDone(InquiryContext: *mut root::RPC_NS_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileDeleteA(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltAddA(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_CSTR,
            IfId: *mut root::RPC_IF_ID,
            MemberNameSyntax: u32,
            MemberName: root::RPC_CSTR,
            Priority: u32,
            Annotation: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltRemoveA(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_CSTR,
            IfId: *mut root::RPC_IF_ID,
            MemberNameSyntax: u32,
            MemberName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltInqBeginA(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_CSTR,
            InquiryType: u32,
            IfId: *mut root::RPC_IF_ID,
            VersOption: u32,
            MemberNameSyntax: u32,
            MemberName: root::RPC_CSTR,
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltInqNextA(
            InquiryContext: root::RPC_NS_HANDLE,
            IfId: *mut root::RPC_IF_ID,
            MemberName: *mut root::RPC_CSTR,
            Priority: *mut u32,
            Annotation: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileDeleteW(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltAddW(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_WSTR,
            IfId: *mut root::RPC_IF_ID,
            MemberNameSyntax: u32,
            MemberName: root::RPC_WSTR,
            Priority: u32,
            Annotation: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltRemoveW(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_WSTR,
            IfId: *mut root::RPC_IF_ID,
            MemberNameSyntax: u32,
            MemberName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltInqBeginW(
            ProfileNameSyntax: u32,
            ProfileName: root::RPC_WSTR,
            InquiryType: u32,
            IfId: *mut root::RPC_IF_ID,
            VersOption: u32,
            MemberNameSyntax: u32,
            MemberName: root::RPC_WSTR,
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltInqNextW(
            InquiryContext: root::RPC_NS_HANDLE,
            IfId: *mut root::RPC_IF_ID,
            MemberName: *mut root::RPC_WSTR,
            Priority: *mut u32,
            Annotation: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsProfileEltInqDone(InquiryContext: *mut root::RPC_NS_HANDLE)
            -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsEntryObjectInqBeginA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsEntryObjectInqBeginW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsEntryObjectInqNext(
            InquiryContext: root::RPC_NS_HANDLE,
            ObjUuid: *mut root::UUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsEntryObjectInqDone(
            InquiryContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsEntryExpandNameA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            ExpandedName: *mut root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtBindingUnexportA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfId: *mut root::RPC_IF_ID,
            VersOption: u32,
            ObjectUuidVec: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtEntryCreateA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtEntryDeleteA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtEntryInqIfIdsA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfIdVec: *mut *mut root::RPC_IF_ID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtHandleSetExpAge(
            NsHandle: root::RPC_NS_HANDLE,
            ExpirationAge: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtInqExpAge(ExpirationAge: *mut u32) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtSetExpAge(ExpirationAge: u32) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsEntryExpandNameW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            ExpandedName: *mut root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtBindingUnexportW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfId: *mut root::RPC_IF_ID,
            VersOption: u32,
            ObjectUuidVec: *mut root::UUID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtEntryCreateW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtEntryDeleteW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsMgmtEntryInqIfIdsW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfIdVec: *mut *mut root::RPC_IF_ID_VECTOR,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingImportBeginA(
            EntryNameSyntax: u32,
            EntryName: root::RPC_CSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjUuid: *mut root::UUID,
            ImportContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingImportBeginW(
            EntryNameSyntax: u32,
            EntryName: root::RPC_WSTR,
            IfSpec: root::RPC_IF_HANDLE,
            ObjUuid: *mut root::UUID,
            ImportContext: *mut root::RPC_NS_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingImportNext(
            ImportContext: root::RPC_NS_HANDLE,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingImportDone(ImportContext: *mut root::RPC_NS_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcNsBindingSelect(
            BindingVec: *mut root::RPC_BINDING_VECTOR,
            Binding: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    pub const _RPC_NOTIFICATION_TYPES_RpcNotificationTypeNone: root::_RPC_NOTIFICATION_TYPES = 0;
    pub const _RPC_NOTIFICATION_TYPES_RpcNotificationTypeEvent: root::_RPC_NOTIFICATION_TYPES = 1;
    pub const _RPC_NOTIFICATION_TYPES_RpcNotificationTypeApc: root::_RPC_NOTIFICATION_TYPES = 2;
    pub const _RPC_NOTIFICATION_TYPES_RpcNotificationTypeIoc: root::_RPC_NOTIFICATION_TYPES = 3;
    pub const _RPC_NOTIFICATION_TYPES_RpcNotificationTypeHwnd: root::_RPC_NOTIFICATION_TYPES = 4;
    pub const _RPC_NOTIFICATION_TYPES_RpcNotificationTypeCallback: root::_RPC_NOTIFICATION_TYPES =
        5;
    pub type _RPC_NOTIFICATION_TYPES = i32;
    pub use self::super::root::_RPC_NOTIFICATION_TYPES as RPC_NOTIFICATION_TYPES;
    pub const _RPC_ASYNC_EVENT_RpcCallComplete: root::_RPC_ASYNC_EVENT = 0;
    pub const _RPC_ASYNC_EVENT_RpcSendComplete: root::_RPC_ASYNC_EVENT = 1;
    pub const _RPC_ASYNC_EVENT_RpcReceiveComplete: root::_RPC_ASYNC_EVENT = 2;
    pub const _RPC_ASYNC_EVENT_RpcClientDisconnect: root::_RPC_ASYNC_EVENT = 3;
    pub const _RPC_ASYNC_EVENT_RpcClientCancel: root::_RPC_ASYNC_EVENT = 4;
    pub type _RPC_ASYNC_EVENT = i32;
    pub use self::super::root::_RPC_ASYNC_EVENT as RPC_ASYNC_EVENT;
    pub type PFN_RPCNOTIFICATION_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut root::_RPC_ASYNC_STATE,
            arg2: *mut ::std::os::raw::c_void,
            arg3: root::RPC_ASYNC_EVENT,
        ),
    >;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RPC_ASYNC_NOTIFICATION_INFO {
        pub APC: root::_RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_1,
        pub IOC: root::_RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_2,
        pub HWND: root::_RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_3,
        pub hEvent: root::HANDLE,
        pub NotificationRoutine: root::PFN_RPCNOTIFICATION_ROUTINE,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_1 {
        pub NotificationRoutine: root::PFN_RPCNOTIFICATION_ROUTINE,
        pub hThread: root::HANDLE,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_2 {
        pub hIOPort: root::HANDLE,
        pub dwNumberOfBytesTransferred: u32,
        pub dwCompletionKey: root::DWORD_PTR,
        pub lpOverlapped: root::LPOVERLAPPED,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_3 {
        pub hWnd: root::HWND,
        pub Msg: root::UINT,
    }
    pub type RPC_ASYNC_NOTIFICATION_INFO = root::_RPC_ASYNC_NOTIFICATION_INFO;
    pub type PRPC_ASYNC_NOTIFICATION_INFO = *mut root::_RPC_ASYNC_NOTIFICATION_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RPC_ASYNC_STATE {
        pub Size: u32,
        pub Signature: u32,
        pub Lock: i32,
        pub Flags: u32,
        pub StubInfo: *mut ::std::os::raw::c_void,
        pub UserInfo: *mut ::std::os::raw::c_void,
        pub RuntimeInfo: *mut ::std::os::raw::c_void,
        pub Event: root::RPC_ASYNC_EVENT,
        pub NotificationType: root::RPC_NOTIFICATION_TYPES,
        pub u: root::RPC_ASYNC_NOTIFICATION_INFO,
        pub Reserved: [i64; 4usize],
    }
    pub type RPC_ASYNC_STATE = root::_RPC_ASYNC_STATE;
    pub type PRPC_ASYNC_STATE = *mut root::_RPC_ASYNC_STATE;
    extern "C" {
        pub fn RpcAsyncRegisterInfo(pAsync: root::PRPC_ASYNC_STATE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcAsyncInitializeHandle(
            pAsync: root::PRPC_ASYNC_STATE,
            Size: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcAsyncGetCallStatus(pAsync: root::PRPC_ASYNC_STATE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcAsyncCompleteCall(
            pAsync: root::PRPC_ASYNC_STATE,
            Reply: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcAsyncAbortCall(
            pAsync: root::PRPC_ASYNC_STATE,
            ExceptionCode: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcAsyncCancelCall(
            pAsync: root::PRPC_ASYNC_STATE,
            fAbort: root::BOOL,
        ) -> root::RPC_STATUS;
    }
    pub const tagExtendedErrorParamTypes_eeptAnsiString: root::tagExtendedErrorParamTypes = 1;
    pub const tagExtendedErrorParamTypes_eeptUnicodeString: root::tagExtendedErrorParamTypes = 2;
    pub const tagExtendedErrorParamTypes_eeptLongVal: root::tagExtendedErrorParamTypes = 3;
    pub const tagExtendedErrorParamTypes_eeptShortVal: root::tagExtendedErrorParamTypes = 4;
    pub const tagExtendedErrorParamTypes_eeptPointerVal: root::tagExtendedErrorParamTypes = 5;
    pub const tagExtendedErrorParamTypes_eeptNone: root::tagExtendedErrorParamTypes = 6;
    pub const tagExtendedErrorParamTypes_eeptBinary: root::tagExtendedErrorParamTypes = 7;
    pub type tagExtendedErrorParamTypes = i32;
    pub use self::super::root::tagExtendedErrorParamTypes as ExtendedErrorParamTypes;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBinaryParam {
        pub Buffer: *mut ::std::os::raw::c_void,
        pub Size: i16,
    }
    pub type BinaryParam = root::tagBinaryParam;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagRPC_EE_INFO_PARAM {
        pub ParameterType: root::ExtendedErrorParamTypes,
        pub u: root::tagRPC_EE_INFO_PARAM__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagRPC_EE_INFO_PARAM__bindgen_ty_1 {
        pub AnsiString: *mut i8,
        pub UnicodeString: root::LPWSTR,
        pub LVal: i32,
        pub SVal: i16,
        pub PVal: root::ULONGLONG,
        pub BVal: root::BinaryParam,
    }
    pub type RPC_EE_INFO_PARAM = root::tagRPC_EE_INFO_PARAM;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagRPC_EXTENDED_ERROR_INFO {
        pub Version: root::ULONG,
        pub ComputerName: root::LPWSTR,
        pub ProcessID: root::ULONG,
        pub u: root::tagRPC_EXTENDED_ERROR_INFO__bindgen_ty_1,
        pub GeneratingComponent: root::ULONG,
        pub Status: root::ULONG,
        pub DetectionLocation: root::USHORT,
        pub Flags: root::USHORT,
        pub NumberOfParameters: i32,
        pub Parameters: [root::RPC_EE_INFO_PARAM; 4usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagRPC_EXTENDED_ERROR_INFO__bindgen_ty_1 {
        pub SystemTime: root::SYSTEMTIME,
        pub FileTime: root::FILETIME,
    }
    pub type RPC_EXTENDED_ERROR_INFO = root::tagRPC_EXTENDED_ERROR_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_ERROR_ENUM_HANDLE {
        pub Signature: root::ULONG,
        pub CurrentPos: *mut ::std::os::raw::c_void,
        pub Head: *mut ::std::os::raw::c_void,
    }
    pub type RPC_ERROR_ENUM_HANDLE = root::tagRPC_ERROR_ENUM_HANDLE;
    extern "C" {
        pub fn RpcErrorStartEnumeration(
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorGetNextRecord(
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
            CopyStrings: root::BOOL,
            ErrorInfo: *mut root::RPC_EXTENDED_ERROR_INFO,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorEndEnumeration(
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorResetEnumeration(
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorGetNumberOfRecords(
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
            Records: *mut i32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorSaveErrorInfo(
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
            ErrorBlob: *mut root::PVOID,
            BlobSize: *mut root::size_t,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorLoadErrorInfo(
            ErrorBlob: root::PVOID,
            BlobSize: root::size_t,
            EnumHandle: *mut root::RPC_ERROR_ENUM_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorAddRecord(ErrorInfo: *mut root::RPC_EXTENDED_ERROR_INFO)
            -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcErrorClearInformation();
    }
    extern "C" {
        pub fn RpcAsyncCleanupThread(dwTimeout: u32) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcGetAuthorizationContextForClient(
            ClientBinding: root::RPC_BINDING_HANDLE,
            ImpersonateOnReturn: root::BOOL,
            Reserved1: root::PVOID,
            pExpirationTime: root::PLARGE_INTEGER,
            Reserved2: root::LUID,
            Reserved3: u32,
            Reserved4: root::PVOID,
            pAuthzClientContext: *mut root::PVOID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcFreeAuthorizationContext(
            pAuthzClientContext: *mut root::PVOID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSsContextLockExclusive(
            ServerBindingHandle: root::RPC_BINDING_HANDLE,
            UserContext: root::PVOID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSsContextLockShared(
            ServerBindingHandle: root::RPC_BINDING_HANDLE,
            UserContext: root::PVOID,
        ) -> root::RPC_STATUS;
    }
    pub const tagRpcLocalAddressFormat_rlafInvalid: root::tagRpcLocalAddressFormat = 0;
    pub const tagRpcLocalAddressFormat_rlafIPv4: root::tagRpcLocalAddressFormat = 1;
    pub const tagRpcLocalAddressFormat_rlafIPv6: root::tagRpcLocalAddressFormat = 2;
    pub type tagRpcLocalAddressFormat = i32;
    pub use self::super::root::tagRpcLocalAddressFormat as RpcLocalAddressFormat;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RPC_CALL_LOCAL_ADDRESS_V1 {
        pub Version: u32,
        pub Buffer: *mut ::std::os::raw::c_void,
        pub BufferSize: u32,
        pub AddressFormat: root::RpcLocalAddressFormat,
    }
    pub type RPC_CALL_LOCAL_ADDRESS_V1 = root::_RPC_CALL_LOCAL_ADDRESS_V1;
    pub type PRPC_CALL_LOCAL_ADDRESS_V1 = *mut root::_RPC_CALL_LOCAL_ADDRESS_V1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_CALL_ATTRIBUTES_V1_W {
        pub Version: u32,
        pub Flags: u32,
        pub ServerPrincipalNameBufferLength: u32,
        pub ServerPrincipalName: *mut u16,
        pub ClientPrincipalNameBufferLength: u32,
        pub ClientPrincipalName: *mut u16,
        pub AuthenticationLevel: u32,
        pub AuthenticationService: u32,
        pub NullSession: root::BOOL,
    }
    pub type RPC_CALL_ATTRIBUTES_V1_W = root::tagRPC_CALL_ATTRIBUTES_V1_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_CALL_ATTRIBUTES_V1_A {
        pub Version: u32,
        pub Flags: u32,
        pub ServerPrincipalNameBufferLength: u32,
        pub ServerPrincipalName: *mut u8,
        pub ClientPrincipalNameBufferLength: u32,
        pub ClientPrincipalName: *mut u8,
        pub AuthenticationLevel: u32,
        pub AuthenticationService: u32,
        pub NullSession: root::BOOL,
    }
    pub type RPC_CALL_ATTRIBUTES_V1_A = root::tagRPC_CALL_ATTRIBUTES_V1_A;
    pub const tagRpcCallType_rctInvalid: root::tagRpcCallType = 0;
    pub const tagRpcCallType_rctNormal: root::tagRpcCallType = 1;
    pub const tagRpcCallType_rctTraining: root::tagRpcCallType = 2;
    pub const tagRpcCallType_rctGuaranteed: root::tagRpcCallType = 3;
    pub type tagRpcCallType = i32;
    pub use self::super::root::tagRpcCallType as RpcCallType;
    pub const tagRpcCallClientLocality_rcclInvalid: root::tagRpcCallClientLocality = 0;
    pub const tagRpcCallClientLocality_rcclLocal: root::tagRpcCallClientLocality = 1;
    pub const tagRpcCallClientLocality_rcclRemote: root::tagRpcCallClientLocality = 2;
    pub const tagRpcCallClientLocality_rcclClientUnknownLocality: root::tagRpcCallClientLocality =
        3;
    pub type tagRpcCallClientLocality = i32;
    pub use self::super::root::tagRpcCallClientLocality as RpcCallClientLocality;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_CALL_ATTRIBUTES_V2_W {
        pub Version: u32,
        pub Flags: u32,
        pub ServerPrincipalNameBufferLength: u32,
        pub ServerPrincipalName: *mut u16,
        pub ClientPrincipalNameBufferLength: u32,
        pub ClientPrincipalName: *mut u16,
        pub AuthenticationLevel: u32,
        pub AuthenticationService: u32,
        pub NullSession: root::BOOL,
        pub KernelModeCaller: root::BOOL,
        pub ProtocolSequence: u32,
        pub IsClientLocal: root::RpcCallClientLocality,
        pub ClientPID: root::HANDLE,
        pub CallStatus: u32,
        pub CallType: root::RpcCallType,
        pub CallLocalAddress: *mut root::RPC_CALL_LOCAL_ADDRESS_V1,
        pub OpNum: u16,
        pub InterfaceUuid: root::UUID,
    }
    pub type RPC_CALL_ATTRIBUTES_V2_W = root::tagRPC_CALL_ATTRIBUTES_V2_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_CALL_ATTRIBUTES_V2_A {
        pub Version: u32,
        pub Flags: u32,
        pub ServerPrincipalNameBufferLength: u32,
        pub ServerPrincipalName: *mut u8,
        pub ClientPrincipalNameBufferLength: u32,
        pub ClientPrincipalName: *mut u8,
        pub AuthenticationLevel: u32,
        pub AuthenticationService: u32,
        pub NullSession: root::BOOL,
        pub KernelModeCaller: root::BOOL,
        pub ProtocolSequence: u32,
        pub IsClientLocal: u32,
        pub ClientPID: root::HANDLE,
        pub CallStatus: u32,
        pub CallType: root::RpcCallType,
        pub CallLocalAddress: *mut root::RPC_CALL_LOCAL_ADDRESS_V1,
        pub OpNum: u16,
        pub InterfaceUuid: root::UUID,
    }
    pub type RPC_CALL_ATTRIBUTES_V2_A = root::tagRPC_CALL_ATTRIBUTES_V2_A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_CALL_ATTRIBUTES_V3_W {
        pub Version: u32,
        pub Flags: u32,
        pub ServerPrincipalNameBufferLength: u32,
        pub ServerPrincipalName: *mut u16,
        pub ClientPrincipalNameBufferLength: u32,
        pub ClientPrincipalName: *mut u16,
        pub AuthenticationLevel: u32,
        pub AuthenticationService: u32,
        pub NullSession: root::BOOL,
        pub KernelModeCaller: root::BOOL,
        pub ProtocolSequence: u32,
        pub IsClientLocal: root::RpcCallClientLocality,
        pub ClientPID: root::HANDLE,
        pub CallStatus: u32,
        pub CallType: root::RpcCallType,
        pub CallLocalAddress: *mut root::RPC_CALL_LOCAL_ADDRESS_V1,
        pub OpNum: u16,
        pub InterfaceUuid: root::UUID,
        pub ClientIdentifierBufferLength: u32,
        pub ClientIdentifier: *mut u8,
    }
    pub type RPC_CALL_ATTRIBUTES_V3_W = root::tagRPC_CALL_ATTRIBUTES_V3_W;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPC_CALL_ATTRIBUTES_V3_A {
        pub Version: u32,
        pub Flags: u32,
        pub ServerPrincipalNameBufferLength: u32,
        pub ServerPrincipalName: *mut u8,
        pub ClientPrincipalNameBufferLength: u32,
        pub ClientPrincipalName: *mut u8,
        pub AuthenticationLevel: u32,
        pub AuthenticationService: u32,
        pub NullSession: root::BOOL,
        pub KernelModeCaller: root::BOOL,
        pub ProtocolSequence: u32,
        pub IsClientLocal: u32,
        pub ClientPID: root::HANDLE,
        pub CallStatus: u32,
        pub CallType: root::RpcCallType,
        pub CallLocalAddress: *mut root::RPC_CALL_LOCAL_ADDRESS_V1,
        pub OpNum: u16,
        pub InterfaceUuid: root::UUID,
        pub ClientIdentifierBufferLength: u32,
        pub ClientIdentifier: *mut u8,
    }
    pub type RPC_CALL_ATTRIBUTES_V3_A = root::tagRPC_CALL_ATTRIBUTES_V3_A;
    extern "C" {
        pub fn RpcServerInqCallAttributesW(
            ClientBinding: root::RPC_BINDING_HANDLE,
            RpcCallAttributes: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerInqCallAttributesA(
            ClientBinding: root::RPC_BINDING_HANDLE,
            RpcCallAttributes: *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_CALL_ATTRIBUTES = root::RPC_CALL_ATTRIBUTES_V3_A;
    pub const _RPC_NOTIFICATIONS_RpcNotificationCallNone: root::_RPC_NOTIFICATIONS = 0;
    pub const _RPC_NOTIFICATIONS_RpcNotificationClientDisconnect: root::_RPC_NOTIFICATIONS = 1;
    pub const _RPC_NOTIFICATIONS_RpcNotificationCallCancel: root::_RPC_NOTIFICATIONS = 2;
    pub type _RPC_NOTIFICATIONS = i32;
    pub use self::super::root::_RPC_NOTIFICATIONS as RPC_NOTIFICATIONS;
    extern "C" {
        pub fn RpcServerSubscribeForNotification(
            Binding: root::RPC_BINDING_HANDLE,
            Notification: root::RPC_NOTIFICATIONS,
            NotificationType: root::RPC_NOTIFICATION_TYPES,
            NotificationInfo: *mut root::RPC_ASYNC_NOTIFICATION_INFO,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcServerUnsubscribeForNotification(
            Binding: root::RPC_BINDING_HANDLE,
            Notification: root::RPC_NOTIFICATIONS,
            NotificationsQueued: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingBind(
            pAsync: root::PRPC_ASYNC_STATE,
            Binding: root::RPC_BINDING_HANDLE,
            IfSpec: root::RPC_IF_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcBindingUnbind(Binding: root::RPC_BINDING_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcAsyncSetHandle(
            Message: root::PRPC_MESSAGE,
            pAsync: root::PRPC_ASYNC_STATE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcAsyncAbortCall(
            pAsync: root::PRPC_ASYNC_STATE,
            ExceptionCode: u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcExceptionFilter(
            ExceptionCode: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn I_RpcBindingInqClientTokenAttributes(
            Binding: root::RPC_BINDING_HANDLE,
            TokenId: *mut root::LUID,
            AuthenticationId: *mut root::LUID,
            ModifiedId: *mut root::LUID,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn CommandLineToArgvW(
            lpCmdLine: root::LPCWSTR,
            pNumArgs: *mut i32,
        ) -> *mut root::LPWSTR;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDROP__ {
        pub unused: i32,
    }
    pub type HDROP = *mut root::HDROP__;
    extern "C" {
        pub fn DragQueryFileA(
            hDrop: root::HDROP,
            iFile: root::UINT,
            lpszFile: *mut i8,
            cch: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DragQueryFileW(
            hDrop: root::HDROP,
            iFile: root::UINT,
            lpszFile: root::LPWSTR,
            cch: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn DragQueryPoint(hDrop: root::HDROP, ppt: *mut root::POINT) -> root::BOOL;
    }
    extern "C" {
        pub fn DragFinish(hDrop: root::HDROP);
    }
    extern "C" {
        pub fn DragAcceptFiles(hWnd: root::HWND, fAccept: root::BOOL);
    }
    extern "C" {
        pub fn ShellExecuteA(
            hwnd: root::HWND,
            lpOperation: *const i8,
            lpFile: *const i8,
            lpParameters: *const i8,
            lpDirectory: *const i8,
            nShowCmd: root::INT,
        ) -> root::HINSTANCE;
    }
    extern "C" {
        pub fn ShellExecuteW(
            hwnd: root::HWND,
            lpOperation: root::LPCWSTR,
            lpFile: root::LPCWSTR,
            lpParameters: root::LPCWSTR,
            lpDirectory: root::LPCWSTR,
            nShowCmd: root::INT,
        ) -> root::HINSTANCE;
    }
    extern "C" {
        pub fn FindExecutableA(
            lpFile: *const i8,
            lpDirectory: *const i8,
            lpResult: *mut i8,
        ) -> root::HINSTANCE;
    }
    extern "C" {
        pub fn FindExecutableW(
            lpFile: root::LPCWSTR,
            lpDirectory: root::LPCWSTR,
            lpResult: root::LPWSTR,
        ) -> root::HINSTANCE;
    }
    extern "C" {
        pub fn ShellAboutA(
            hWnd: root::HWND,
            szApp: *const i8,
            szOtherStuff: *const i8,
            hIcon: root::HICON,
        ) -> root::INT;
    }
    extern "C" {
        pub fn ShellAboutW(
            hWnd: root::HWND,
            szApp: root::LPCWSTR,
            szOtherStuff: root::LPCWSTR,
            hIcon: root::HICON,
        ) -> root::INT;
    }
    extern "C" {
        pub fn DuplicateIcon(hInst: root::HINSTANCE, hIcon: root::HICON) -> root::HICON;
    }
    extern "C" {
        pub fn ExtractAssociatedIconA(
            hInst: root::HINSTANCE,
            pszIconPath: *mut i8,
            piIcon: *mut u16,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn ExtractAssociatedIconW(
            hInst: root::HINSTANCE,
            pszIconPath: root::LPWSTR,
            piIcon: *mut u16,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn ExtractAssociatedIconExA(
            hInst: root::HINSTANCE,
            pszIconPath: *mut i8,
            piIconIndex: *mut u16,
            piIconId: *mut u16,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn ExtractAssociatedIconExW(
            hInst: root::HINSTANCE,
            pszIconPath: root::LPWSTR,
            piIconIndex: *mut u16,
            piIconId: *mut u16,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn ExtractIconA(
            hInst: root::HINSTANCE,
            pszExeFileName: *const i8,
            nIconIndex: root::UINT,
        ) -> root::HICON;
    }
    extern "C" {
        pub fn ExtractIconW(
            hInst: root::HINSTANCE,
            pszExeFileName: root::LPCWSTR,
            nIconIndex: root::UINT,
        ) -> root::HICON;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRAGINFOA {
        pub uSize: root::UINT,
        pub pt: root::POINT,
        pub fNC: root::BOOL,
        pub lpFileList: *mut i8,
        pub grfKeyState: u32,
    }
    pub type DRAGINFOA = root::_DRAGINFOA;
    pub type LPDRAGINFOA = *mut root::_DRAGINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRAGINFOW {
        pub uSize: root::UINT,
        pub pt: root::POINT,
        pub fNC: root::BOOL,
        pub lpFileList: root::PZZWSTR,
        pub grfKeyState: u32,
    }
    pub type DRAGINFOW = root::_DRAGINFOW;
    pub type LPDRAGINFOW = *mut root::_DRAGINFOW;
    pub type DRAGINFO = root::DRAGINFOA;
    pub type LPDRAGINFO = root::LPDRAGINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _AppBarData {
        pub cbSize: u32,
        pub hWnd: root::HWND,
        pub uCallbackMessage: root::UINT,
        pub uEdge: root::UINT,
        pub rc: root::RECT,
        pub lParam: root::LPARAM,
    }
    pub type APPBARDATA = root::_AppBarData;
    pub type PAPPBARDATA = *mut root::_AppBarData;
    extern "C" {
        pub fn SHAppBarMessage(dwMessage: u32, pData: root::PAPPBARDATA) -> u64;
    }
    extern "C" {
        pub fn DoEnvironmentSubstA(pszSrc: *mut i8, cchSrc: root::UINT) -> u32;
    }
    extern "C" {
        pub fn DoEnvironmentSubstW(pszSrc: root::LPWSTR, cchSrc: root::UINT) -> u32;
    }
    extern "C" {
        pub fn ExtractIconExA(
            lpszFile: *const i8,
            nIconIndex: i32,
            phiconLarge: *mut root::HICON,
            phiconSmall: *mut root::HICON,
            nIcons: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ExtractIconExW(
            lpszFile: root::LPCWSTR,
            nIconIndex: i32,
            phiconLarge: *mut root::HICON,
            phiconSmall: *mut root::HICON,
            nIcons: root::UINT,
        ) -> root::UINT;
    }
    pub type FILEOP_FLAGS = u16;
    pub type PRINTEROP_FLAGS = u16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHFILEOPSTRUCTA {
        pub hwnd: root::HWND,
        pub wFunc: root::UINT,
        pub pFrom: *const i8,
        pub pTo: *const i8,
        pub fFlags: root::FILEOP_FLAGS,
        pub fAnyOperationsAborted: root::BOOL,
        pub hNameMappings: root::LPVOID,
        pub lpszProgressTitle: *const i8,
    }
    pub type SHFILEOPSTRUCTA = root::_SHFILEOPSTRUCTA;
    pub type LPSHFILEOPSTRUCTA = *mut root::_SHFILEOPSTRUCTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHFILEOPSTRUCTW {
        pub hwnd: root::HWND,
        pub wFunc: root::UINT,
        pub pFrom: root::PCZZWSTR,
        pub pTo: root::PCZZWSTR,
        pub fFlags: root::FILEOP_FLAGS,
        pub fAnyOperationsAborted: root::BOOL,
        pub hNameMappings: root::LPVOID,
        pub lpszProgressTitle: *const u16,
    }
    pub type SHFILEOPSTRUCTW = root::_SHFILEOPSTRUCTW;
    pub type LPSHFILEOPSTRUCTW = *mut root::_SHFILEOPSTRUCTW;
    pub type SHFILEOPSTRUCT = root::SHFILEOPSTRUCTA;
    pub type LPSHFILEOPSTRUCT = root::LPSHFILEOPSTRUCTA;
    extern "C" {
        pub fn SHFileOperationA(lpFileOp: root::LPSHFILEOPSTRUCTA) -> i32;
    }
    extern "C" {
        pub fn SHFileOperationW(lpFileOp: root::LPSHFILEOPSTRUCTW) -> i32;
    }
    extern "C" {
        pub fn SHFreeNameMappings(hNameMappings: root::HANDLE);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHNAMEMAPPINGA {
        pub pszOldPath: *mut i8,
        pub pszNewPath: *mut i8,
        pub cchOldPath: i32,
        pub cchNewPath: i32,
    }
    pub type SHNAMEMAPPINGA = root::_SHNAMEMAPPINGA;
    pub type LPSHNAMEMAPPINGA = *mut root::_SHNAMEMAPPINGA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHNAMEMAPPINGW {
        pub pszOldPath: root::LPWSTR,
        pub pszNewPath: root::LPWSTR,
        pub cchOldPath: i32,
        pub cchNewPath: i32,
    }
    pub type SHNAMEMAPPINGW = root::_SHNAMEMAPPINGW;
    pub type LPSHNAMEMAPPINGW = *mut root::_SHNAMEMAPPINGW;
    pub type SHNAMEMAPPING = root::SHNAMEMAPPINGA;
    pub type LPSHNAMEMAPPING = root::LPSHNAMEMAPPINGA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SHELLEXECUTEINFOA {
        pub cbSize: u32,
        pub fMask: root::ULONG,
        pub hwnd: root::HWND,
        pub lpVerb: *const i8,
        pub lpFile: *const i8,
        pub lpParameters: *const i8,
        pub lpDirectory: *const i8,
        pub nShow: i32,
        pub hInstApp: root::HINSTANCE,
        pub lpIDList: *mut ::std::os::raw::c_void,
        pub lpClass: *const i8,
        pub hkeyClass: root::HKEY,
        pub dwHotKey: u32,
        pub __bindgen_anon_1: root::_SHELLEXECUTEINFOA__bindgen_ty_1,
        pub hProcess: root::HANDLE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SHELLEXECUTEINFOA__bindgen_ty_1 {
        pub hIcon: root::HANDLE,
        pub hMonitor: root::HANDLE,
    }
    pub type SHELLEXECUTEINFOA = root::_SHELLEXECUTEINFOA;
    pub type LPSHELLEXECUTEINFOA = *mut root::_SHELLEXECUTEINFOA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SHELLEXECUTEINFOW {
        pub cbSize: u32,
        pub fMask: root::ULONG,
        pub hwnd: root::HWND,
        pub lpVerb: root::LPCWSTR,
        pub lpFile: root::LPCWSTR,
        pub lpParameters: root::LPCWSTR,
        pub lpDirectory: root::LPCWSTR,
        pub nShow: i32,
        pub hInstApp: root::HINSTANCE,
        pub lpIDList: *mut ::std::os::raw::c_void,
        pub lpClass: root::LPCWSTR,
        pub hkeyClass: root::HKEY,
        pub dwHotKey: u32,
        pub __bindgen_anon_1: root::_SHELLEXECUTEINFOW__bindgen_ty_1,
        pub hProcess: root::HANDLE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SHELLEXECUTEINFOW__bindgen_ty_1 {
        pub hIcon: root::HANDLE,
        pub hMonitor: root::HANDLE,
    }
    pub type SHELLEXECUTEINFOW = root::_SHELLEXECUTEINFOW;
    pub type LPSHELLEXECUTEINFOW = *mut root::_SHELLEXECUTEINFOW;
    pub type SHELLEXECUTEINFO = root::SHELLEXECUTEINFOA;
    pub type LPSHELLEXECUTEINFO = root::LPSHELLEXECUTEINFOA;
    extern "C" {
        pub fn ShellExecuteExA(pExecInfo: *mut root::SHELLEXECUTEINFOA) -> root::BOOL;
    }
    extern "C" {
        pub fn ShellExecuteExW(pExecInfo: *mut root::SHELLEXECUTEINFOW) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHCREATEPROCESSINFOW {
        pub cbSize: u32,
        pub fMask: root::ULONG,
        pub hwnd: root::HWND,
        pub pszFile: root::LPCWSTR,
        pub pszParameters: root::LPCWSTR,
        pub pszCurrentDirectory: root::LPCWSTR,
        pub hUserToken: root::HANDLE,
        pub lpProcessAttributes: root::LPSECURITY_ATTRIBUTES,
        pub lpThreadAttributes: root::LPSECURITY_ATTRIBUTES,
        pub bInheritHandles: root::BOOL,
        pub dwCreationFlags: u32,
        pub lpStartupInfo: root::LPSTARTUPINFOW,
        pub lpProcessInformation: root::LPPROCESS_INFORMATION,
    }
    pub type SHCREATEPROCESSINFOW = root::_SHCREATEPROCESSINFOW;
    pub type PSHCREATEPROCESSINFOW = *mut root::_SHCREATEPROCESSINFOW;
    extern "C" {
        pub fn SHCreateProcessAsUserW(pscpi: root::PSHCREATEPROCESSINFOW) -> root::BOOL;
    }
    extern "C" {
        pub fn SHEvaluateSystemCommandTemplate(
            pszCmdTemplate: *const u16,
            ppszApplication: *mut *mut u16,
            ppszCommandLine: *mut *mut u16,
            ppszParameters: *mut *mut u16,
        ) -> root::HRESULT;
    }
    pub const ASSOCCLASS_ASSOCCLASS_SHELL_KEY: root::ASSOCCLASS = 0;
    pub const ASSOCCLASS_ASSOCCLASS_PROGID_KEY: root::ASSOCCLASS = 1;
    pub const ASSOCCLASS_ASSOCCLASS_PROGID_STR: root::ASSOCCLASS = 2;
    pub const ASSOCCLASS_ASSOCCLASS_CLSID_KEY: root::ASSOCCLASS = 3;
    pub const ASSOCCLASS_ASSOCCLASS_CLSID_STR: root::ASSOCCLASS = 4;
    pub const ASSOCCLASS_ASSOCCLASS_APP_KEY: root::ASSOCCLASS = 5;
    pub const ASSOCCLASS_ASSOCCLASS_APP_STR: root::ASSOCCLASS = 6;
    pub const ASSOCCLASS_ASSOCCLASS_SYSTEM_STR: root::ASSOCCLASS = 7;
    pub const ASSOCCLASS_ASSOCCLASS_FOLDER: root::ASSOCCLASS = 8;
    pub const ASSOCCLASS_ASSOCCLASS_STAR: root::ASSOCCLASS = 9;
    pub const ASSOCCLASS_ASSOCCLASS_FIXED_PROGID_STR: root::ASSOCCLASS = 10;
    pub const ASSOCCLASS_ASSOCCLASS_PROTOCOL_STR: root::ASSOCCLASS = 11;
    pub type ASSOCCLASS = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ASSOCIATIONELEMENT {
        pub ac: root::ASSOCCLASS,
        pub hkClass: root::HKEY,
        pub pszClass: *const u16,
    }
    extern "C" {
        pub fn AssocCreateForClasses(
            rgClasses: *const root::ASSOCIATIONELEMENT,
            cClasses: root::ULONG,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHQUERYRBINFO {
        pub cbSize: u32,
        pub i64Size: i64,
        pub i64NumItems: i64,
    }
    pub type SHQUERYRBINFO = root::_SHQUERYRBINFO;
    pub type LPSHQUERYRBINFO = *mut root::_SHQUERYRBINFO;
    extern "C" {
        pub fn SHQueryRecycleBinA(
            pszRootPath: *const i8,
            pSHQueryRBInfo: root::LPSHQUERYRBINFO,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHQueryRecycleBinW(
            pszRootPath: root::LPCWSTR,
            pSHQueryRBInfo: root::LPSHQUERYRBINFO,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHEmptyRecycleBinA(
            hwnd: root::HWND,
            pszRootPath: *const i8,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHEmptyRecycleBinW(
            hwnd: root::HWND,
            pszRootPath: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_NOT_PRESENT: root::QUERY_USER_NOTIFICATION_STATE =
        1;
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_BUSY: root::QUERY_USER_NOTIFICATION_STATE = 2;
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_RUNNING_D3D_FULL_SCREEN:
        root::QUERY_USER_NOTIFICATION_STATE = 3;
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_PRESENTATION_MODE:
        root::QUERY_USER_NOTIFICATION_STATE = 4;
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_ACCEPTS_NOTIFICATIONS:
        root::QUERY_USER_NOTIFICATION_STATE = 5;
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_QUIET_TIME: root::QUERY_USER_NOTIFICATION_STATE =
        6;
    pub const QUERY_USER_NOTIFICATION_STATE_QUNS_APP: root::QUERY_USER_NOTIFICATION_STATE = 7;
    pub type QUERY_USER_NOTIFICATION_STATE = i32;
    extern "C" {
        pub fn SHQueryUserNotificationState(
            pquns: *mut root::QUERY_USER_NOTIFICATION_STATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetPropertyStoreForWindow(
            hwnd: root::HWND,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _NOTIFYICONDATAA {
        pub cbSize: u32,
        pub hWnd: root::HWND,
        pub uID: root::UINT,
        pub uFlags: root::UINT,
        pub uCallbackMessage: root::UINT,
        pub hIcon: root::HICON,
        pub szTip: [i8; 128usize],
        pub dwState: u32,
        pub dwStateMask: u32,
        pub szInfo: [i8; 256usize],
        pub __bindgen_anon_1: root::_NOTIFYICONDATAA__bindgen_ty_1,
        pub szInfoTitle: [i8; 64usize],
        pub dwInfoFlags: u32,
        pub guidItem: root::GUID,
        pub hBalloonIcon: root::HICON,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _NOTIFYICONDATAA__bindgen_ty_1 {
        pub uTimeout: root::UINT,
        pub uVersion: root::UINT,
    }
    pub type NOTIFYICONDATAA = root::_NOTIFYICONDATAA;
    pub type PNOTIFYICONDATAA = *mut root::_NOTIFYICONDATAA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _NOTIFYICONDATAW {
        pub cbSize: u32,
        pub hWnd: root::HWND,
        pub uID: root::UINT,
        pub uFlags: root::UINT,
        pub uCallbackMessage: root::UINT,
        pub hIcon: root::HICON,
        pub szTip: [u16; 128usize],
        pub dwState: u32,
        pub dwStateMask: u32,
        pub szInfo: [u16; 256usize],
        pub __bindgen_anon_1: root::_NOTIFYICONDATAW__bindgen_ty_1,
        pub szInfoTitle: [u16; 64usize],
        pub dwInfoFlags: u32,
        pub guidItem: root::GUID,
        pub hBalloonIcon: root::HICON,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _NOTIFYICONDATAW__bindgen_ty_1 {
        pub uTimeout: root::UINT,
        pub uVersion: root::UINT,
    }
    pub type NOTIFYICONDATAW = root::_NOTIFYICONDATAW;
    pub type PNOTIFYICONDATAW = *mut root::_NOTIFYICONDATAW;
    pub type NOTIFYICONDATA = root::NOTIFYICONDATAA;
    pub type PNOTIFYICONDATA = root::PNOTIFYICONDATAA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NOTIFYICONIDENTIFIER {
        pub cbSize: u32,
        pub hWnd: root::HWND,
        pub uID: root::UINT,
        pub guidItem: root::GUID,
    }
    pub type NOTIFYICONIDENTIFIER = root::_NOTIFYICONIDENTIFIER;
    pub type PNOTIFYICONIDENTIFIER = *mut root::_NOTIFYICONIDENTIFIER;
    extern "C" {
        pub fn Shell_NotifyIconA(
            dwMessage: u32,
            lpData: root::PNOTIFYICONDATAA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Shell_NotifyIconW(
            dwMessage: u32,
            lpData: root::PNOTIFYICONDATAW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn Shell_NotifyIconGetRect(
            identifier: *const root::NOTIFYICONIDENTIFIER,
            iconLocation: *mut root::RECT,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHFILEINFOA {
        pub hIcon: root::HICON,
        pub iIcon: i32,
        pub dwAttributes: u32,
        pub szDisplayName: [i8; 260usize],
        pub szTypeName: [i8; 80usize],
    }
    pub type SHFILEINFOA = root::_SHFILEINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHFILEINFOW {
        pub hIcon: root::HICON,
        pub iIcon: i32,
        pub dwAttributes: u32,
        pub szDisplayName: [u16; 260usize],
        pub szTypeName: [u16; 80usize],
    }
    pub type SHFILEINFOW = root::_SHFILEINFOW;
    pub type SHFILEINFO = root::SHFILEINFOA;
    extern "C" {
        pub fn SHGetFileInfoA(
            pszPath: *const i8,
            dwFileAttributes: u32,
            psfi: *mut root::SHFILEINFOA,
            cbFileInfo: root::UINT,
            uFlags: root::UINT,
        ) -> root::DWORD_PTR;
    }
    extern "C" {
        pub fn SHGetFileInfoW(
            pszPath: root::LPCWSTR,
            dwFileAttributes: u32,
            psfi: *mut root::SHFILEINFOW,
            cbFileInfo: root::UINT,
            uFlags: root::UINT,
        ) -> root::DWORD_PTR;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHSTOCKICONINFO {
        pub cbSize: u32,
        pub hIcon: root::HICON,
        pub iSysImageIndex: i32,
        pub iIcon: i32,
        pub szPath: [u16; 260usize],
    }
    pub type SHSTOCKICONINFO = root::_SHSTOCKICONINFO;
    pub const SHSTOCKICONID_SIID_DOCNOASSOC: root::SHSTOCKICONID = 0;
    pub const SHSTOCKICONID_SIID_DOCASSOC: root::SHSTOCKICONID = 1;
    pub const SHSTOCKICONID_SIID_APPLICATION: root::SHSTOCKICONID = 2;
    pub const SHSTOCKICONID_SIID_FOLDER: root::SHSTOCKICONID = 3;
    pub const SHSTOCKICONID_SIID_FOLDEROPEN: root::SHSTOCKICONID = 4;
    pub const SHSTOCKICONID_SIID_DRIVE525: root::SHSTOCKICONID = 5;
    pub const SHSTOCKICONID_SIID_DRIVE35: root::SHSTOCKICONID = 6;
    pub const SHSTOCKICONID_SIID_DRIVEREMOVE: root::SHSTOCKICONID = 7;
    pub const SHSTOCKICONID_SIID_DRIVEFIXED: root::SHSTOCKICONID = 8;
    pub const SHSTOCKICONID_SIID_DRIVENET: root::SHSTOCKICONID = 9;
    pub const SHSTOCKICONID_SIID_DRIVENETDISABLED: root::SHSTOCKICONID = 10;
    pub const SHSTOCKICONID_SIID_DRIVECD: root::SHSTOCKICONID = 11;
    pub const SHSTOCKICONID_SIID_DRIVERAM: root::SHSTOCKICONID = 12;
    pub const SHSTOCKICONID_SIID_WORLD: root::SHSTOCKICONID = 13;
    pub const SHSTOCKICONID_SIID_SERVER: root::SHSTOCKICONID = 15;
    pub const SHSTOCKICONID_SIID_PRINTER: root::SHSTOCKICONID = 16;
    pub const SHSTOCKICONID_SIID_MYNETWORK: root::SHSTOCKICONID = 17;
    pub const SHSTOCKICONID_SIID_FIND: root::SHSTOCKICONID = 22;
    pub const SHSTOCKICONID_SIID_HELP: root::SHSTOCKICONID = 23;
    pub const SHSTOCKICONID_SIID_SHARE: root::SHSTOCKICONID = 28;
    pub const SHSTOCKICONID_SIID_LINK: root::SHSTOCKICONID = 29;
    pub const SHSTOCKICONID_SIID_SLOWFILE: root::SHSTOCKICONID = 30;
    pub const SHSTOCKICONID_SIID_RECYCLER: root::SHSTOCKICONID = 31;
    pub const SHSTOCKICONID_SIID_RECYCLERFULL: root::SHSTOCKICONID = 32;
    pub const SHSTOCKICONID_SIID_MEDIACDAUDIO: root::SHSTOCKICONID = 40;
    pub const SHSTOCKICONID_SIID_LOCK: root::SHSTOCKICONID = 47;
    pub const SHSTOCKICONID_SIID_AUTOLIST: root::SHSTOCKICONID = 49;
    pub const SHSTOCKICONID_SIID_PRINTERNET: root::SHSTOCKICONID = 50;
    pub const SHSTOCKICONID_SIID_SERVERSHARE: root::SHSTOCKICONID = 51;
    pub const SHSTOCKICONID_SIID_PRINTERFAX: root::SHSTOCKICONID = 52;
    pub const SHSTOCKICONID_SIID_PRINTERFAXNET: root::SHSTOCKICONID = 53;
    pub const SHSTOCKICONID_SIID_PRINTERFILE: root::SHSTOCKICONID = 54;
    pub const SHSTOCKICONID_SIID_STACK: root::SHSTOCKICONID = 55;
    pub const SHSTOCKICONID_SIID_MEDIASVCD: root::SHSTOCKICONID = 56;
    pub const SHSTOCKICONID_SIID_STUFFEDFOLDER: root::SHSTOCKICONID = 57;
    pub const SHSTOCKICONID_SIID_DRIVEUNKNOWN: root::SHSTOCKICONID = 58;
    pub const SHSTOCKICONID_SIID_DRIVEDVD: root::SHSTOCKICONID = 59;
    pub const SHSTOCKICONID_SIID_MEDIADVD: root::SHSTOCKICONID = 60;
    pub const SHSTOCKICONID_SIID_MEDIADVDRAM: root::SHSTOCKICONID = 61;
    pub const SHSTOCKICONID_SIID_MEDIADVDRW: root::SHSTOCKICONID = 62;
    pub const SHSTOCKICONID_SIID_MEDIADVDR: root::SHSTOCKICONID = 63;
    pub const SHSTOCKICONID_SIID_MEDIADVDROM: root::SHSTOCKICONID = 64;
    pub const SHSTOCKICONID_SIID_MEDIACDAUDIOPLUS: root::SHSTOCKICONID = 65;
    pub const SHSTOCKICONID_SIID_MEDIACDRW: root::SHSTOCKICONID = 66;
    pub const SHSTOCKICONID_SIID_MEDIACDR: root::SHSTOCKICONID = 67;
    pub const SHSTOCKICONID_SIID_MEDIACDBURN: root::SHSTOCKICONID = 68;
    pub const SHSTOCKICONID_SIID_MEDIABLANKCD: root::SHSTOCKICONID = 69;
    pub const SHSTOCKICONID_SIID_MEDIACDROM: root::SHSTOCKICONID = 70;
    pub const SHSTOCKICONID_SIID_AUDIOFILES: root::SHSTOCKICONID = 71;
    pub const SHSTOCKICONID_SIID_IMAGEFILES: root::SHSTOCKICONID = 72;
    pub const SHSTOCKICONID_SIID_VIDEOFILES: root::SHSTOCKICONID = 73;
    pub const SHSTOCKICONID_SIID_MIXEDFILES: root::SHSTOCKICONID = 74;
    pub const SHSTOCKICONID_SIID_FOLDERBACK: root::SHSTOCKICONID = 75;
    pub const SHSTOCKICONID_SIID_FOLDERFRONT: root::SHSTOCKICONID = 76;
    pub const SHSTOCKICONID_SIID_SHIELD: root::SHSTOCKICONID = 77;
    pub const SHSTOCKICONID_SIID_WARNING: root::SHSTOCKICONID = 78;
    pub const SHSTOCKICONID_SIID_INFO: root::SHSTOCKICONID = 79;
    pub const SHSTOCKICONID_SIID_ERROR: root::SHSTOCKICONID = 80;
    pub const SHSTOCKICONID_SIID_KEY: root::SHSTOCKICONID = 81;
    pub const SHSTOCKICONID_SIID_SOFTWARE: root::SHSTOCKICONID = 82;
    pub const SHSTOCKICONID_SIID_RENAME: root::SHSTOCKICONID = 83;
    pub const SHSTOCKICONID_SIID_DELETE: root::SHSTOCKICONID = 84;
    pub const SHSTOCKICONID_SIID_MEDIAAUDIODVD: root::SHSTOCKICONID = 85;
    pub const SHSTOCKICONID_SIID_MEDIAMOVIEDVD: root::SHSTOCKICONID = 86;
    pub const SHSTOCKICONID_SIID_MEDIAENHANCEDCD: root::SHSTOCKICONID = 87;
    pub const SHSTOCKICONID_SIID_MEDIAENHANCEDDVD: root::SHSTOCKICONID = 88;
    pub const SHSTOCKICONID_SIID_MEDIAHDDVD: root::SHSTOCKICONID = 89;
    pub const SHSTOCKICONID_SIID_MEDIABLURAY: root::SHSTOCKICONID = 90;
    pub const SHSTOCKICONID_SIID_MEDIAVCD: root::SHSTOCKICONID = 91;
    pub const SHSTOCKICONID_SIID_MEDIADVDPLUSR: root::SHSTOCKICONID = 92;
    pub const SHSTOCKICONID_SIID_MEDIADVDPLUSRW: root::SHSTOCKICONID = 93;
    pub const SHSTOCKICONID_SIID_DESKTOPPC: root::SHSTOCKICONID = 94;
    pub const SHSTOCKICONID_SIID_MOBILEPC: root::SHSTOCKICONID = 95;
    pub const SHSTOCKICONID_SIID_USERS: root::SHSTOCKICONID = 96;
    pub const SHSTOCKICONID_SIID_MEDIASMARTMEDIA: root::SHSTOCKICONID = 97;
    pub const SHSTOCKICONID_SIID_MEDIACOMPACTFLASH: root::SHSTOCKICONID = 98;
    pub const SHSTOCKICONID_SIID_DEVICECELLPHONE: root::SHSTOCKICONID = 99;
    pub const SHSTOCKICONID_SIID_DEVICECAMERA: root::SHSTOCKICONID = 100;
    pub const SHSTOCKICONID_SIID_DEVICEVIDEOCAMERA: root::SHSTOCKICONID = 101;
    pub const SHSTOCKICONID_SIID_DEVICEAUDIOPLAYER: root::SHSTOCKICONID = 102;
    pub const SHSTOCKICONID_SIID_NETWORKCONNECT: root::SHSTOCKICONID = 103;
    pub const SHSTOCKICONID_SIID_INTERNET: root::SHSTOCKICONID = 104;
    pub const SHSTOCKICONID_SIID_ZIPFILE: root::SHSTOCKICONID = 105;
    pub const SHSTOCKICONID_SIID_SETTINGS: root::SHSTOCKICONID = 106;
    pub const SHSTOCKICONID_SIID_DRIVEHDDVD: root::SHSTOCKICONID = 132;
    pub const SHSTOCKICONID_SIID_DRIVEBD: root::SHSTOCKICONID = 133;
    pub const SHSTOCKICONID_SIID_MEDIAHDDVDROM: root::SHSTOCKICONID = 134;
    pub const SHSTOCKICONID_SIID_MEDIAHDDVDR: root::SHSTOCKICONID = 135;
    pub const SHSTOCKICONID_SIID_MEDIAHDDVDRAM: root::SHSTOCKICONID = 136;
    pub const SHSTOCKICONID_SIID_MEDIABDROM: root::SHSTOCKICONID = 137;
    pub const SHSTOCKICONID_SIID_MEDIABDR: root::SHSTOCKICONID = 138;
    pub const SHSTOCKICONID_SIID_MEDIABDRE: root::SHSTOCKICONID = 139;
    pub const SHSTOCKICONID_SIID_CLUSTEREDDRIVE: root::SHSTOCKICONID = 140;
    pub const SHSTOCKICONID_SIID_MAX_ICONS: root::SHSTOCKICONID = 181;
    pub type SHSTOCKICONID = i32;
    extern "C" {
        pub fn SHGetStockIconInfo(
            siid: root::SHSTOCKICONID,
            uFlags: root::UINT,
            psii: *mut root::SHSTOCKICONINFO,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetDiskFreeSpaceExA(
            pszDirectoryName: *const i8,
            pulFreeBytesAvailableToCaller: *mut root::ULARGE_INTEGER,
            pulTotalNumberOfBytes: *mut root::ULARGE_INTEGER,
            pulTotalNumberOfFreeBytes: *mut root::ULARGE_INTEGER,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHGetDiskFreeSpaceExW(
            pszDirectoryName: root::LPCWSTR,
            pulFreeBytesAvailableToCaller: *mut root::ULARGE_INTEGER,
            pulTotalNumberOfBytes: *mut root::ULARGE_INTEGER,
            pulTotalNumberOfFreeBytes: *mut root::ULARGE_INTEGER,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHGetNewLinkInfoA(
            pszLinkTo: *const i8,
            pszDir: *const i8,
            pszName: *mut i8,
            pfMustCopy: *mut root::BOOL,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHGetNewLinkInfoW(
            pszLinkTo: root::LPCWSTR,
            pszDir: root::LPCWSTR,
            pszName: root::LPWSTR,
            pfMustCopy: *mut root::BOOL,
            uFlags: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHInvokePrinterCommandA(
            hwnd: root::HWND,
            uAction: root::UINT,
            lpBuf1: *const i8,
            lpBuf2: *const i8,
            fModal: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHInvokePrinterCommandW(
            hwnd: root::HWND,
            uAction: root::UINT,
            lpBuf1: root::LPCWSTR,
            lpBuf2: root::LPCWSTR,
            fModal: root::BOOL,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OPEN_PRINTER_PROPS_INFOA {
        pub dwSize: u32,
        pub pszSheetName: *mut i8,
        pub uSheetIndex: root::UINT,
        pub dwFlags: u32,
        pub bModal: root::BOOL,
    }
    pub type OPEN_PRINTER_PROPS_INFOA = root::_OPEN_PRINTER_PROPS_INFOA;
    pub type POPEN_PRINTER_PROPS_INFOA = *mut root::_OPEN_PRINTER_PROPS_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OPEN_PRINTER_PROPS_INFOW {
        pub dwSize: u32,
        pub pszSheetName: root::LPWSTR,
        pub uSheetIndex: root::UINT,
        pub dwFlags: u32,
        pub bModal: root::BOOL,
    }
    pub type OPEN_PRINTER_PROPS_INFOW = root::_OPEN_PRINTER_PROPS_INFOW;
    pub type POPEN_PRINTER_PROPS_INFOW = *mut root::_OPEN_PRINTER_PROPS_INFOW;
    pub type OPEN_PRINTER_PROPS_INFO = root::OPEN_PRINTER_PROPS_INFOA;
    pub type POPEN_PRINTER_PROPS_INFO = root::POPEN_PRINTER_PROPS_INFOA;
    extern "C" {
        pub fn SHLoadNonloadedIconOverlayIdentifiers() -> root::HRESULT;
    }
    extern "C" {
        pub fn SHIsFileAvailableOffline(
            pwszPath: *const u16,
            pdwStatus: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHSetLocalizedName(
            pszPath: *const u16,
            pszResModule: *const u16,
            idsRes: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHRemoveLocalizedName(pszPath: *const u16) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetLocalizedName(
            pszPath: *const u16,
            pszResModule: *mut u16,
            cch: root::UINT,
            pidsRes: *mut i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ShellMessageBoxA(
            hAppInst: root::HINSTANCE,
            hWnd: root::HWND,
            lpcText: *const i8,
            lpcTitle: *const i8,
            fuStyle: root::UINT,
            ...
        ) -> i32;
    }
    extern "C" {
        pub fn ShellMessageBoxW(
            hAppInst: root::HINSTANCE,
            hWnd: root::HWND,
            lpcText: root::LPCWSTR,
            lpcTitle: root::LPCWSTR,
            fuStyle: root::UINT,
            ...
        ) -> i32;
    }
    extern "C" {
        pub fn IsLFNDriveA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsLFNDriveW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn SHEnumerateUnreadMailAccountsA(
            hKeyUser: root::HKEY,
            dwIndex: u32,
            pszMailAddress: *mut i8,
            cchMailAddress: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHEnumerateUnreadMailAccountsW(
            hKeyUser: root::HKEY,
            dwIndex: u32,
            pszMailAddress: root::LPWSTR,
            cchMailAddress: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetUnreadMailCountA(
            hKeyUser: root::HKEY,
            pszMailAddress: *const i8,
            pdwCount: *mut u32,
            pFileTime: *mut root::FILETIME,
            pszShellExecuteCommand: *mut i8,
            cchShellExecuteCommand: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetUnreadMailCountW(
            hKeyUser: root::HKEY,
            pszMailAddress: root::LPCWSTR,
            pdwCount: *mut u32,
            pFileTime: *mut root::FILETIME,
            pszShellExecuteCommand: root::LPWSTR,
            cchShellExecuteCommand: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHSetUnreadMailCountA(
            pszMailAddress: *const i8,
            dwCount: u32,
            pszShellExecuteCommand: *const i8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHSetUnreadMailCountW(
            pszMailAddress: root::LPCWSTR,
            dwCount: u32,
            pszShellExecuteCommand: root::LPCWSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHTestTokenMembership(hToken: root::HANDLE, ulRID: root::ULONG) -> root::BOOL;
    }
    extern "C" {
        pub fn SHGetImageList(
            iImageList: i32,
            riid: *const root::IID,
            ppvObj: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    pub type PFNCANSHAREFOLDERW =
        ::std::option::Option<unsafe extern "C" fn(pszPath: *const u16) -> root::HRESULT>;
    pub type PFNSHOWSHAREFOLDERUIW = ::std::option::Option<
        unsafe extern "C" fn(hwndParent: root::HWND, pszPath: *const u16) -> root::HRESULT,
    >;
    extern "C" {
        pub fn InitNetworkAddressControl() -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagNC_ADDRESS {
        pub pAddrInfo: *mut root::NET_ADDRESS_INFO_,
        pub PortNumber: root::USHORT,
        pub PrefixLength: u8,
    }
    pub type NC_ADDRESS = root::tagNC_ADDRESS;
    pub type PNC_ADDRESS = *mut root::tagNC_ADDRESS;
    extern "C" {
        pub fn SHGetDriveMedia(
            pszDrive: *const u16,
            pdwMediaContent: *mut u32,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PERF_DATA_BLOCK {
        pub Signature: [u16; 4usize],
        pub LittleEndian: u32,
        pub Version: u32,
        pub Revision: u32,
        pub TotalByteLength: u32,
        pub HeaderLength: u32,
        pub NumObjectTypes: u32,
        pub DefaultObject: i32,
        pub SystemTime: root::SYSTEMTIME,
        pub PerfTime: root::LARGE_INTEGER,
        pub PerfFreq: root::LARGE_INTEGER,
        pub PerfTime100nSec: root::LARGE_INTEGER,
        pub SystemNameLength: u32,
        pub SystemNameOffset: u32,
    }
    pub type PERF_DATA_BLOCK = root::_PERF_DATA_BLOCK;
    pub type PPERF_DATA_BLOCK = *mut root::_PERF_DATA_BLOCK;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PERF_OBJECT_TYPE {
        pub TotalByteLength: u32,
        pub DefinitionLength: u32,
        pub HeaderLength: u32,
        pub ObjectNameTitleIndex: u32,
        pub ObjectNameTitle: u32,
        pub ObjectHelpTitleIndex: u32,
        pub ObjectHelpTitle: u32,
        pub DetailLevel: u32,
        pub NumCounters: u32,
        pub DefaultCounter: i32,
        pub NumInstances: i32,
        pub CodePage: u32,
        pub PerfTime: root::LARGE_INTEGER,
        pub PerfFreq: root::LARGE_INTEGER,
    }
    pub type PERF_OBJECT_TYPE = root::_PERF_OBJECT_TYPE;
    pub type PPERF_OBJECT_TYPE = *mut root::_PERF_OBJECT_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PERF_COUNTER_DEFINITION {
        pub ByteLength: u32,
        pub CounterNameTitleIndex: u32,
        pub CounterNameTitle: u32,
        pub CounterHelpTitleIndex: u32,
        pub CounterHelpTitle: u32,
        pub DefaultScale: i32,
        pub DetailLevel: u32,
        pub CounterType: u32,
        pub CounterSize: u32,
        pub CounterOffset: u32,
    }
    pub type PERF_COUNTER_DEFINITION = root::_PERF_COUNTER_DEFINITION;
    pub type PPERF_COUNTER_DEFINITION = *mut root::_PERF_COUNTER_DEFINITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PERF_INSTANCE_DEFINITION {
        pub ByteLength: u32,
        pub ParentObjectTitleIndex: u32,
        pub ParentObjectInstance: u32,
        pub UniqueID: i32,
        pub NameOffset: u32,
        pub NameLength: u32,
    }
    pub type PERF_INSTANCE_DEFINITION = root::_PERF_INSTANCE_DEFINITION;
    pub type PPERF_INSTANCE_DEFINITION = *mut root::_PERF_INSTANCE_DEFINITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PERF_COUNTER_BLOCK {
        pub ByteLength: u32,
    }
    pub type PERF_COUNTER_BLOCK = root::_PERF_COUNTER_BLOCK;
    pub type PPERF_COUNTER_BLOCK = *mut root::_PERF_COUNTER_BLOCK;
    pub type u_char = u8;
    pub type u_short = u16;
    pub type u_int = u32;
    pub type u_long = u32;
    pub type SOCKET = u64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fd_count: root::u_int,
        pub fd_array: [root::SOCKET; 64usize],
    }
    extern "C" {
        pub fn __WSAFDIsSet(arg1: root::SOCKET, arg2: *mut root::fd_set) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: i32,
        pub tv_usec: i32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct hostent {
        pub h_name: *mut i8,
        pub h_aliases: *mut *mut i8,
        pub h_addrtype: i16,
        pub h_length: i16,
        pub h_addr_list: *mut *mut i8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct netent {
        pub n_name: *mut i8,
        pub n_aliases: *mut *mut i8,
        pub n_addrtype: i16,
        pub n_net: root::u_long,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct servent {
        pub s_name: *mut i8,
        pub s_aliases: *mut *mut i8,
        pub s_proto: *mut i8,
        pub s_port: i16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct protoent {
        pub p_name: *mut i8,
        pub p_aliases: *mut *mut i8,
        pub p_proto: i16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in_addr {
        pub S_un: root::in_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union in_addr__bindgen_ty_1 {
        pub S_un_b: root::in_addr__bindgen_ty_1__bindgen_ty_1,
        pub S_un_w: root::in_addr__bindgen_ty_1__bindgen_ty_2,
        pub S_addr: root::ULONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct in_addr__bindgen_ty_1__bindgen_ty_1 {
        pub s_b1: root::UCHAR,
        pub s_b2: root::UCHAR,
        pub s_b3: root::UCHAR,
        pub s_b4: root::UCHAR,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct in_addr__bindgen_ty_1__bindgen_ty_2 {
        pub s_w1: root::USHORT,
        pub s_w2: root::USHORT,
    }
    pub type IN_ADDR = root::in_addr;
    pub type PIN_ADDR = *mut root::in_addr;
    pub type LPIN_ADDR = *mut root::in_addr;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_in {
        pub sin_family: i16,
        pub sin_port: root::u_short,
        pub sin_addr: root::in_addr,
        pub sin_zero: [i8; 8usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct WSAData {
        pub wVersion: u16,
        pub wHighVersion: u16,
        pub iMaxSockets: u16,
        pub iMaxUdpDg: u16,
        pub lpVendorInfo: *mut i8,
        pub szDescription: [i8; 257usize],
        pub szSystemStatus: [i8; 129usize],
    }
    pub type WSADATA = root::WSAData;
    pub type LPWSADATA = *mut root::WSADATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ip_mreq {
        pub imr_multiaddr: root::in_addr,
        pub imr_interface: root::in_addr,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sockaddr {
        pub sa_family: root::u_short,
        pub sa_data: [i8; 14usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sockproto {
        pub sp_family: root::u_short,
        pub sp_protocol: root::u_short,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct linger {
        pub l_onoff: root::u_short,
        pub l_linger: root::u_short,
    }
    extern "C" {
        pub fn accept(
            s: root::SOCKET,
            addr: *mut root::sockaddr,
            addrlen: *mut i32,
        ) -> root::SOCKET;
    }
    extern "C" {
        pub fn bind(
            s: root::SOCKET,
            addr: *const root::sockaddr,
            namelen: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn closesocket(s: root::SOCKET) -> i32;
    }
    extern "C" {
        pub fn connect(
            s: root::SOCKET,
            name: *const root::sockaddr,
            namelen: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn ioctlsocket(
            s: root::SOCKET,
            cmd: i32,
            argp: *mut root::u_long,
        ) -> i32;
    }
    extern "C" {
        pub fn getpeername(
            s: root::SOCKET,
            name: *mut root::sockaddr,
            namelen: *mut i32,
        ) -> i32;
    }
    extern "C" {
        pub fn getsockname(
            s: root::SOCKET,
            name: *mut root::sockaddr,
            namelen: *mut i32,
        ) -> i32;
    }
    extern "C" {
        pub fn getsockopt(
            s: root::SOCKET,
            level: i32,
            optname: i32,
            optval: *mut i8,
            optlen: *mut i32,
        ) -> i32;
    }
    extern "C" {
        pub fn htonl(hostlong: root::u_long) -> root::u_long;
    }
    extern "C" {
        pub fn htons(hostshort: root::u_short) -> root::u_short;
    }
    extern "C" {
        pub fn inet_addr(cp: *const i8) -> u32;
    }
    extern "C" {
        pub fn inet_ntoa(in_: root::in_addr) -> *mut i8;
    }
    extern "C" {
        pub fn listen(s: root::SOCKET, backlog: i32) -> i32;
    }
    extern "C" {
        pub fn ntohl(netlong: root::u_long) -> root::u_long;
    }
    extern "C" {
        pub fn ntohs(netshort: root::u_short) -> root::u_short;
    }
    extern "C" {
        pub fn recv(
            s: root::SOCKET,
            buf: *mut i8,
            len: i32,
            flags: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn recvfrom(
            s: root::SOCKET,
            buf: *mut i8,
            len: i32,
            flags: i32,
            from: *mut root::sockaddr,
            fromlen: *mut i32,
        ) -> i32;
    }
    extern "C" {
        pub fn select(
            nfds: i32,
            readfds: *mut root::fd_set,
            writefds: *mut root::fd_set,
            exceptfds: *mut root::fd_set,
            timeout: *const root::timeval,
        ) -> i32;
    }
    extern "C" {
        pub fn send(
            s: root::SOCKET,
            buf: *const i8,
            len: i32,
            flags: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn sendto(
            s: root::SOCKET,
            buf: *const i8,
            len: i32,
            flags: i32,
            to: *const root::sockaddr,
            tolen: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn setsockopt(
            s: root::SOCKET,
            level: i32,
            optname: i32,
            optval: *const i8,
            optlen: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn shutdown(s: root::SOCKET, how: i32) -> i32;
    }
    extern "C" {
        pub fn socket(
            af: i32,
            type_: i32,
            protocol: i32,
        ) -> root::SOCKET;
    }
    extern "C" {
        pub fn gethostbyaddr(
            addr: *const i8,
            len: i32,
            type_: i32,
        ) -> *mut root::hostent;
    }
    extern "C" {
        pub fn gethostbyname(name: *const i8) -> *mut root::hostent;
    }
    extern "C" {
        pub fn gethostname(
            name: *mut i8,
            namelen: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn getservbyport(
            port: i32,
            proto: *const i8,
        ) -> *mut root::servent;
    }
    extern "C" {
        pub fn getservbyname(
            name: *const i8,
            proto: *const i8,
        ) -> *mut root::servent;
    }
    extern "C" {
        pub fn getprotobynumber(proto: i32) -> *mut root::protoent;
    }
    extern "C" {
        pub fn getprotobyname(name: *const i8) -> *mut root::protoent;
    }
    extern "C" {
        pub fn WSAStartup(
            wVersionRequired: u16,
            lpWSAData: root::LPWSADATA,
        ) -> i32;
    }
    extern "C" {
        pub fn WSACleanup() -> i32;
    }
    extern "C" {
        pub fn WSASetLastError(iError: i32);
    }
    extern "C" {
        pub fn WSAGetLastError() -> i32;
    }
    extern "C" {
        pub fn WSAIsBlocking() -> root::BOOL;
    }
    extern "C" {
        pub fn WSAUnhookBlockingHook() -> i32;
    }
    extern "C" {
        pub fn WSASetBlockingHook(lpBlockFunc: root::FARPROC) -> root::FARPROC;
    }
    extern "C" {
        pub fn WSACancelBlockingCall() -> i32;
    }
    extern "C" {
        pub fn WSAAsyncGetServByName(
            hWnd: root::HWND,
            wMsg: root::u_int,
            name: *const i8,
            proto: *const i8,
            buf: *mut i8,
            buflen: i32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WSAAsyncGetServByPort(
            hWnd: root::HWND,
            wMsg: root::u_int,
            port: i32,
            proto: *const i8,
            buf: *mut i8,
            buflen: i32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WSAAsyncGetProtoByName(
            hWnd: root::HWND,
            wMsg: root::u_int,
            name: *const i8,
            buf: *mut i8,
            buflen: i32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WSAAsyncGetProtoByNumber(
            hWnd: root::HWND,
            wMsg: root::u_int,
            number: i32,
            buf: *mut i8,
            buflen: i32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WSAAsyncGetHostByName(
            hWnd: root::HWND,
            wMsg: root::u_int,
            name: *const i8,
            buf: *mut i8,
            buflen: i32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WSAAsyncGetHostByAddr(
            hWnd: root::HWND,
            wMsg: root::u_int,
            addr: *const i8,
            len: i32,
            type_: i32,
            buf: *mut i8,
            buflen: i32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn WSACancelAsyncRequest(hAsyncTaskHandle: root::HANDLE) -> i32;
    }
    extern "C" {
        pub fn WSAAsyncSelect(
            s: root::SOCKET,
            hWnd: root::HWND,
            wMsg: root::u_int,
            lEvent: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn WSARecvEx(
            s: root::SOCKET,
            buf: *mut i8,
            len: i32,
            flags: *mut i32,
        ) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TRANSMIT_FILE_BUFFERS {
        pub Head: root::PVOID,
        pub HeadLength: u32,
        pub Tail: root::PVOID,
        pub TailLength: u32,
    }
    pub type TRANSMIT_FILE_BUFFERS = root::_TRANSMIT_FILE_BUFFERS;
    pub type PTRANSMIT_FILE_BUFFERS = *mut root::_TRANSMIT_FILE_BUFFERS;
    pub type LPTRANSMIT_FILE_BUFFERS = *mut root::_TRANSMIT_FILE_BUFFERS;
    extern "C" {
        pub fn TransmitFile(
            hSocket: root::SOCKET,
            hFile: root::HANDLE,
            nNumberOfBytesToWrite: u32,
            nNumberOfBytesPerSend: u32,
            lpOverlapped: root::LPOVERLAPPED,
            lpTransmitBuffers: root::LPTRANSMIT_FILE_BUFFERS,
            dwReserved: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AcceptEx(
            sListenSocket: root::SOCKET,
            sAcceptSocket: root::SOCKET,
            lpOutputBuffer: root::PVOID,
            dwReceiveDataLength: u32,
            dwLocalAddressLength: u32,
            dwRemoteAddressLength: u32,
            lpdwBytesReceived: root::LPDWORD,
            lpOverlapped: root::LPOVERLAPPED,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetAcceptExSockaddrs(
            lpOutputBuffer: root::PVOID,
            dwReceiveDataLength: u32,
            dwLocalAddressLength: u32,
            dwRemoteAddressLength: u32,
            LocalSockaddr: *mut *mut root::sockaddr,
            LocalSockaddrLength: root::LPINT,
            RemoteSockaddr: *mut *mut root::sockaddr,
            RemoteSockaddrLength: root::LPINT,
        );
    }
    pub type SOCKADDR = root::sockaddr;
    pub type PSOCKADDR = *mut root::sockaddr;
    pub type LPSOCKADDR = *mut root::sockaddr;
    pub type SOCKADDR_IN = root::sockaddr_in;
    pub type PSOCKADDR_IN = *mut root::sockaddr_in;
    pub type LPSOCKADDR_IN = *mut root::sockaddr_in;
    pub type LINGER = root::linger;
    pub type PLINGER = *mut root::linger;
    pub type LPLINGER = *mut root::linger;
    pub type FD_SET = root::fd_set;
    pub type PFD_SET = *mut root::fd_set;
    pub type LPFD_SET = *mut root::fd_set;
    pub type HOSTENT = root::hostent;
    pub type PHOSTENT = *mut root::hostent;
    pub type LPHOSTENT = *mut root::hostent;
    pub type SERVENT = root::servent;
    pub type PSERVENT = *mut root::servent;
    pub type LPSERVENT = *mut root::servent;
    pub type PROTOENT = root::protoent;
    pub type PPROTOENT = *mut root::protoent;
    pub type LPPROTOENT = *mut root::protoent;
    pub type TIMEVAL = root::timeval;
    pub type PTIMEVAL = *mut root::timeval;
    pub type LPTIMEVAL = *mut root::timeval;
    pub type ALG_ID = u32;
    pub type HCRYPTPROV = u64;
    pub type HCRYPTKEY = u64;
    pub type HCRYPTHASH = u64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMS_KEY_INFO {
        pub dwVersion: u32,
        pub Algid: root::ALG_ID,
        pub pbOID: *mut u8,
        pub cbOID: u32,
    }
    pub type CMS_KEY_INFO = root::_CMS_KEY_INFO;
    pub type PCMS_KEY_INFO = *mut root::_CMS_KEY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HMAC_Info {
        pub HashAlgid: root::ALG_ID,
        pub pbInnerString: *mut u8,
        pub cbInnerString: u32,
        pub pbOuterString: *mut u8,
        pub cbOuterString: u32,
    }
    pub type HMAC_INFO = root::_HMAC_Info;
    pub type PHMAC_INFO = *mut root::_HMAC_Info;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCHANNEL_ALG {
        pub dwUse: u32,
        pub Algid: root::ALG_ID,
        pub cBits: u32,
        pub dwFlags: u32,
        pub dwReserved: u32,
    }
    pub type SCHANNEL_ALG = root::_SCHANNEL_ALG;
    pub type PSCHANNEL_ALG = *mut root::_SCHANNEL_ALG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROV_ENUMALGS {
        pub aiAlgid: root::ALG_ID,
        pub dwBitLen: u32,
        pub dwNameLen: u32,
        pub szName: [i8; 20usize],
    }
    pub type PROV_ENUMALGS = root::_PROV_ENUMALGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROV_ENUMALGS_EX {
        pub aiAlgid: root::ALG_ID,
        pub dwDefaultLen: u32,
        pub dwMinLen: u32,
        pub dwMaxLen: u32,
        pub dwProtocols: u32,
        pub dwNameLen: u32,
        pub szName: [i8; 20usize],
        pub dwLongNameLen: u32,
        pub szLongName: [i8; 40usize],
    }
    pub type PROV_ENUMALGS_EX = root::_PROV_ENUMALGS_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PUBLICKEYSTRUC {
        pub bType: u8,
        pub bVersion: u8,
        pub reserved: u16,
        pub aiKeyAlg: root::ALG_ID,
    }
    pub type BLOBHEADER = root::_PUBLICKEYSTRUC;
    pub type PUBLICKEYSTRUC = root::_PUBLICKEYSTRUC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _RSAPUBKEY {
        pub magic: u32,
        pub bitlen: u32,
        pub pubexp: u32,
    }
    pub type RSAPUBKEY = root::_RSAPUBKEY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PUBKEY {
        pub magic: u32,
        pub bitlen: u32,
    }
    pub type DHPUBKEY = root::_PUBKEY;
    pub type DSSPUBKEY = root::_PUBKEY;
    pub type KEAPUBKEY = root::_PUBKEY;
    pub type TEKPUBKEY = root::_PUBKEY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DSSSEED {
        pub counter: u32,
        pub seed: [u8; 20usize],
    }
    pub type DSSSEED = root::_DSSSEED;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PUBKEYVER3 {
        pub magic: u32,
        pub bitlenP: u32,
        pub bitlenQ: u32,
        pub bitlenJ: u32,
        pub DSSSeed: root::DSSSEED,
    }
    pub type DHPUBKEY_VER3 = root::_PUBKEYVER3;
    pub type DSSPUBKEY_VER3 = root::_PUBKEYVER3;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRIVKEYVER3 {
        pub magic: u32,
        pub bitlenP: u32,
        pub bitlenQ: u32,
        pub bitlenJ: u32,
        pub bitlenX: u32,
        pub DSSSeed: root::DSSSEED,
    }
    pub type DHPRIVKEY_VER3 = root::_PRIVKEYVER3;
    pub type DSSPRIVKEY_VER3 = root::_PRIVKEYVER3;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _KEY_TYPE_SUBTYPE {
        pub dwKeySpec: u32,
        pub Type: root::GUID,
        pub Subtype: root::GUID,
    }
    pub type KEY_TYPE_SUBTYPE = root::_KEY_TYPE_SUBTYPE;
    pub type PKEY_TYPE_SUBTYPE = *mut root::_KEY_TYPE_SUBTYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_FORTEZZA_DATA_PROP {
        pub SerialNumber: [u8; 8usize],
        pub CertIndex: i32,
        pub CertLabel: [u8; 36usize],
    }
    pub type CERT_FORTEZZA_DATA_PROP = root::_CERT_FORTEZZA_DATA_PROP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_RC4_KEY_STATE {
        pub Key: [u8; 16usize],
        pub SBox: [u8; 256usize],
        pub i: u8,
        pub j: u8,
    }
    pub type CRYPT_RC4_KEY_STATE = root::_CRYPT_RC4_KEY_STATE;
    pub type PCRYPT_RC4_KEY_STATE = *mut root::_CRYPT_RC4_KEY_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_DES_KEY_STATE {
        pub Key: [u8; 8usize],
        pub IV: [u8; 8usize],
        pub Feedback: [u8; 8usize],
    }
    pub type CRYPT_DES_KEY_STATE = root::_CRYPT_DES_KEY_STATE;
    pub type PCRYPT_DES_KEY_STATE = *mut root::_CRYPT_DES_KEY_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_3DES_KEY_STATE {
        pub Key: [u8; 24usize],
        pub IV: [u8; 8usize],
        pub Feedback: [u8; 8usize],
    }
    pub type CRYPT_3DES_KEY_STATE = root::_CRYPT_3DES_KEY_STATE;
    pub type PCRYPT_3DES_KEY_STATE = *mut root::_CRYPT_3DES_KEY_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_AES_128_KEY_STATE {
        pub Key: [u8; 16usize],
        pub IV: [u8; 16usize],
        pub EncryptionState: [[u8; 16usize]; 11usize],
        pub DecryptionState: [[u8; 16usize]; 11usize],
        pub Feedback: [u8; 16usize],
    }
    pub type CRYPT_AES_128_KEY_STATE = root::_CRYPT_AES_128_KEY_STATE;
    pub type PCRYPT_AES_128_KEY_STATE = *mut root::_CRYPT_AES_128_KEY_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_AES_256_KEY_STATE {
        pub Key: [u8; 32usize],
        pub IV: [u8; 16usize],
        pub EncryptionState: [[u8; 16usize]; 15usize],
        pub DecryptionState: [[u8; 16usize]; 15usize],
        pub Feedback: [u8; 16usize],
    }
    pub type CRYPT_AES_256_KEY_STATE = root::_CRYPT_AES_256_KEY_STATE;
    pub type PCRYPT_AES_256_KEY_STATE = *mut root::_CRYPT_AES_256_KEY_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPTOAPI_BLOB {
        pub cbData: u32,
        pub pbData: *mut u8,
    }
    pub type CRYPT_INTEGER_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_INTEGER_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_UINT_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_UINT_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_OBJID_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_OBJID_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CERT_NAME_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCERT_NAME_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CERT_RDN_VALUE_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCERT_RDN_VALUE_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CERT_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCERT_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRL_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRL_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type DATA_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PDATA_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_DATA_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_DATA_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_HASH_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_HASH_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_DIGEST_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_DIGEST_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_DER_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_DER_BLOB = *mut root::_CRYPTOAPI_BLOB;
    pub type CRYPT_ATTR_BLOB = root::_CRYPTOAPI_BLOB;
    pub type PCRYPT_ATTR_BLOB = *mut root::_CRYPTOAPI_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMS_DH_KEY_INFO {
        pub dwVersion: u32,
        pub Algid: root::ALG_ID,
        pub pszContentEncObjId: *mut i8,
        pub PubInfo: root::CRYPT_DATA_BLOB,
        pub pReserved: *mut ::std::os::raw::c_void,
    }
    pub type CMS_DH_KEY_INFO = root::_CMS_DH_KEY_INFO;
    pub type PCMS_DH_KEY_INFO = *mut root::_CMS_DH_KEY_INFO;
    extern "C" {
        pub fn CryptAcquireContextA(
            phProv: *mut root::HCRYPTPROV,
            szContainer: *const i8,
            szProvider: *const i8,
            dwProvType: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptAcquireContextW(
            phProv: *mut root::HCRYPTPROV,
            szContainer: root::LPCWSTR,
            szProvider: root::LPCWSTR,
            dwProvType: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptReleaseContext(hProv: root::HCRYPTPROV, dwFlags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGenKey(
            hProv: root::HCRYPTPROV,
            Algid: root::ALG_ID,
            dwFlags: u32,
            phKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDeriveKey(
            hProv: root::HCRYPTPROV,
            Algid: root::ALG_ID,
            hBaseData: root::HCRYPTHASH,
            dwFlags: u32,
            phKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDestroyKey(hKey: root::HCRYPTKEY) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetKeyParam(
            hKey: root::HCRYPTKEY,
            dwParam: u32,
            pbData: *const u8,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetKeyParam(
            hKey: root::HCRYPTKEY,
            dwParam: u32,
            pbData: *mut u8,
            pdwDataLen: *mut u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetHashParam(
            hHash: root::HCRYPTHASH,
            dwParam: u32,
            pbData: *const u8,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetHashParam(
            hHash: root::HCRYPTHASH,
            dwParam: u32,
            pbData: *mut u8,
            pdwDataLen: *mut u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetProvParam(
            hProv: root::HCRYPTPROV,
            dwParam: u32,
            pbData: *const u8,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetProvParam(
            hProv: root::HCRYPTPROV,
            dwParam: u32,
            pbData: *mut u8,
            pdwDataLen: *mut u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGenRandom(
            hProv: root::HCRYPTPROV,
            dwLen: u32,
            pbBuffer: *mut u8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetUserKey(
            hProv: root::HCRYPTPROV,
            dwKeySpec: u32,
            phUserKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptExportKey(
            hKey: root::HCRYPTKEY,
            hExpKey: root::HCRYPTKEY,
            dwBlobType: u32,
            dwFlags: u32,
            pbData: *mut u8,
            pdwDataLen: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptImportKey(
            hProv: root::HCRYPTPROV,
            pbData: *const u8,
            dwDataLen: u32,
            hPubKey: root::HCRYPTKEY,
            dwFlags: u32,
            phKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEncrypt(
            hKey: root::HCRYPTKEY,
            hHash: root::HCRYPTHASH,
            Final: root::BOOL,
            dwFlags: u32,
            pbData: *mut u8,
            pdwDataLen: *mut u32,
            dwBufLen: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDecrypt(
            hKey: root::HCRYPTKEY,
            hHash: root::HCRYPTHASH,
            Final: root::BOOL,
            dwFlags: u32,
            pbData: *mut u8,
            pdwDataLen: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptCreateHash(
            hProv: root::HCRYPTPROV,
            Algid: root::ALG_ID,
            hKey: root::HCRYPTKEY,
            dwFlags: u32,
            phHash: *mut root::HCRYPTHASH,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashData(
            hHash: root::HCRYPTHASH,
            pbData: *const u8,
            dwDataLen: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashSessionKey(
            hHash: root::HCRYPTHASH,
            hKey: root::HCRYPTKEY,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDestroyHash(hHash: root::HCRYPTHASH) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSignHashA(
            hHash: root::HCRYPTHASH,
            dwKeySpec: u32,
            szDescription: *const i8,
            dwFlags: u32,
            pbSignature: *mut u8,
            pdwSigLen: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSignHashW(
            hHash: root::HCRYPTHASH,
            dwKeySpec: u32,
            szDescription: root::LPCWSTR,
            dwFlags: u32,
            pbSignature: *mut u8,
            pdwSigLen: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifySignatureA(
            hHash: root::HCRYPTHASH,
            pbSignature: *const u8,
            dwSigLen: u32,
            hPubKey: root::HCRYPTKEY,
            szDescription: *const i8,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifySignatureW(
            hHash: root::HCRYPTHASH,
            pbSignature: *const u8,
            dwSigLen: u32,
            hPubKey: root::HCRYPTKEY,
            szDescription: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetProviderA(pszProvName: *const i8, dwProvType: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetProviderW(pszProvName: root::LPCWSTR, dwProvType: u32)
            -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetProviderExA(
            pszProvName: *const i8,
            dwProvType: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetProviderExW(
            pszProvName: root::LPCWSTR,
            dwProvType: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetDefaultProviderA(
            dwProvType: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
            pszProvName: *mut i8,
            pcbProvName: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetDefaultProviderW(
            dwProvType: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
            pszProvName: root::LPWSTR,
            pcbProvName: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEnumProviderTypesA(
            dwIndex: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
            pdwProvType: *mut u32,
            szTypeName: *mut i8,
            pcbTypeName: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEnumProviderTypesW(
            dwIndex: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
            pdwProvType: *mut u32,
            szTypeName: root::LPWSTR,
            pcbTypeName: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEnumProvidersA(
            dwIndex: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
            pdwProvType: *mut u32,
            szProvName: *mut i8,
            pcbProvName: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEnumProvidersW(
            dwIndex: u32,
            pdwReserved: *mut u32,
            dwFlags: u32,
            pdwProvType: *mut u32,
            szProvName: root::LPWSTR,
            pcbProvName: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptContextAddRef(
            hProv: root::HCRYPTPROV,
            pdwReserved: *mut u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDuplicateKey(
            hKey: root::HCRYPTKEY,
            pdwReserved: *mut u32,
            dwFlags: u32,
            phKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDuplicateHash(
            hHash: root::HCRYPTHASH,
            pdwReserved: *mut u32,
            dwFlags: u32,
            phHash: *mut root::HCRYPTHASH,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetEncSChannel(
            pData: *mut *mut u8,
            dwDecSize: *mut u32,
        ) -> root::BOOL;
    }
    pub type NTSTATUS = i32;
    pub type PNTSTATUS = *mut root::NTSTATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __BCRYPT_KEY_LENGTHS_STRUCT {
        pub dwMinLength: root::ULONG,
        pub dwMaxLength: root::ULONG,
        pub dwIncrement: root::ULONG,
    }
    pub type BCRYPT_KEY_LENGTHS_STRUCT = root::__BCRYPT_KEY_LENGTHS_STRUCT;
    pub type BCRYPT_AUTH_TAG_LENGTHS_STRUCT = root::BCRYPT_KEY_LENGTHS_STRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_OID {
        pub cbOID: root::ULONG,
        pub pbOID: root::PUCHAR,
    }
    pub type BCRYPT_OID = root::_BCRYPT_OID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_OID_LIST {
        pub dwOIDCount: root::ULONG,
        pub pOIDs: *mut root::BCRYPT_OID,
    }
    pub type BCRYPT_OID_LIST = root::_BCRYPT_OID_LIST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_PKCS1_PADDING_INFO {
        pub pszAlgId: root::LPCWSTR,
    }
    pub type BCRYPT_PKCS1_PADDING_INFO = root::_BCRYPT_PKCS1_PADDING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_PSS_PADDING_INFO {
        pub pszAlgId: root::LPCWSTR,
        pub cbSalt: root::ULONG,
    }
    pub type BCRYPT_PSS_PADDING_INFO = root::_BCRYPT_PSS_PADDING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_OAEP_PADDING_INFO {
        pub pszAlgId: root::LPCWSTR,
        pub pbLabel: root::PUCHAR,
        pub cbLabel: root::ULONG,
    }
    pub type BCRYPT_OAEP_PADDING_INFO = root::_BCRYPT_OAEP_PADDING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
        pub cbSize: root::ULONG,
        pub dwInfoVersion: root::ULONG,
        pub pbNonce: root::PUCHAR,
        pub cbNonce: root::ULONG,
        pub pbAuthData: root::PUCHAR,
        pub cbAuthData: root::ULONG,
        pub pbTag: root::PUCHAR,
        pub cbTag: root::ULONG,
        pub pbMacContext: root::PUCHAR,
        pub cbMacContext: root::ULONG,
        pub cbAAD: root::ULONG,
        pub cbData: root::ULONGLONG,
        pub dwFlags: root::ULONG,
    }
    pub type BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = root::_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
    pub type PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO =
        *mut root::_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCryptBuffer {
        pub cbBuffer: root::ULONG,
        pub BufferType: root::ULONG,
        pub pvBuffer: root::PVOID,
    }
    pub type BCryptBuffer = root::_BCryptBuffer;
    pub type PBCryptBuffer = *mut root::_BCryptBuffer;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCryptBufferDesc {
        pub ulVersion: root::ULONG,
        pub cBuffers: root::ULONG,
        pub pBuffers: root::PBCryptBuffer,
    }
    pub type BCryptBufferDesc = root::_BCryptBufferDesc;
    pub type PBCryptBufferDesc = *mut root::_BCryptBufferDesc;
    pub type BCRYPT_HANDLE = root::PVOID;
    pub type BCRYPT_ALG_HANDLE = root::PVOID;
    pub type BCRYPT_KEY_HANDLE = root::PVOID;
    pub type BCRYPT_HASH_HANDLE = root::PVOID;
    pub type BCRYPT_SECRET_HANDLE = root::PVOID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_KEY_BLOB {
        pub Magic: root::ULONG,
    }
    pub type BCRYPT_KEY_BLOB = root::_BCRYPT_KEY_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_RSAKEY_BLOB {
        pub Magic: root::ULONG,
        pub BitLength: root::ULONG,
        pub cbPublicExp: root::ULONG,
        pub cbModulus: root::ULONG,
        pub cbPrime1: root::ULONG,
        pub cbPrime2: root::ULONG,
    }
    pub type BCRYPT_RSAKEY_BLOB = root::_BCRYPT_RSAKEY_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_ECCKEY_BLOB {
        pub dwMagic: root::ULONG,
        pub cbKey: root::ULONG,
    }
    pub type BCRYPT_ECCKEY_BLOB = root::_BCRYPT_ECCKEY_BLOB;
    pub type PBCRYPT_ECCKEY_BLOB = *mut root::_BCRYPT_ECCKEY_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SSL_ECCKEY_BLOB {
        pub dwCurveType: root::ULONG,
        pub cbKey: root::ULONG,
    }
    pub type SSL_ECCKEY_BLOB = root::_SSL_ECCKEY_BLOB;
    pub type PSSL_ECCKEY_BLOB = *mut root::_SSL_ECCKEY_BLOB;
    pub const ECC_CURVE_TYPE_ENUM_BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE:
        root::ECC_CURVE_TYPE_ENUM = 1;
    pub const ECC_CURVE_TYPE_ENUM_BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE:
        root::ECC_CURVE_TYPE_ENUM = 2;
    pub const ECC_CURVE_TYPE_ENUM_BCRYPT_ECC_PRIME_MONTGOMERY_CURVE: root::ECC_CURVE_TYPE_ENUM = 3;
    pub type ECC_CURVE_TYPE_ENUM = i32;
    pub const ECC_CURVE_ALG_ID_ENUM_BCRYPT_NO_CURVE_GENERATION_ALG_ID: root::ECC_CURVE_ALG_ID_ENUM =
        0;
    pub type ECC_CURVE_ALG_ID_ENUM = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_ECCFULLKEY_BLOB {
        pub dwMagic: root::ULONG,
        pub dwVersion: root::ULONG,
        pub dwCurveType: root::ECC_CURVE_TYPE_ENUM,
        pub dwCurveGenerationAlgId: root::ECC_CURVE_ALG_ID_ENUM,
        pub cbFieldLength: root::ULONG,
        pub cbSubgroupOrder: root::ULONG,
        pub cbCofactor: root::ULONG,
        pub cbSeed: root::ULONG,
    }
    pub type BCRYPT_ECCFULLKEY_BLOB = root::_BCRYPT_ECCFULLKEY_BLOB;
    pub type PBCRYPT_ECCFULLKEY_BLOB = *mut root::_BCRYPT_ECCFULLKEY_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_DH_KEY_BLOB {
        pub dwMagic: root::ULONG,
        pub cbKey: root::ULONG,
    }
    pub type BCRYPT_DH_KEY_BLOB = root::_BCRYPT_DH_KEY_BLOB;
    pub type PBCRYPT_DH_KEY_BLOB = *mut root::_BCRYPT_DH_KEY_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_DH_PARAMETER_HEADER {
        pub cbLength: root::ULONG,
        pub dwMagic: root::ULONG,
        pub cbKeyLength: root::ULONG,
    }
    pub type BCRYPT_DH_PARAMETER_HEADER = root::_BCRYPT_DH_PARAMETER_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_DSA_KEY_BLOB {
        pub dwMagic: root::ULONG,
        pub cbKey: root::ULONG,
        pub Count: [root::UCHAR; 4usize],
        pub Seed: [root::UCHAR; 20usize],
        pub q: [root::UCHAR; 20usize],
    }
    pub type BCRYPT_DSA_KEY_BLOB = root::_BCRYPT_DSA_KEY_BLOB;
    pub type PBCRYPT_DSA_KEY_BLOB = *mut root::_BCRYPT_DSA_KEY_BLOB;
    pub const HASHALGORITHM_ENUM_DSA_HASH_ALGORITHM_SHA1: root::HASHALGORITHM_ENUM = 0;
    pub const HASHALGORITHM_ENUM_DSA_HASH_ALGORITHM_SHA256: root::HASHALGORITHM_ENUM = 1;
    pub const HASHALGORITHM_ENUM_DSA_HASH_ALGORITHM_SHA512: root::HASHALGORITHM_ENUM = 2;
    pub type HASHALGORITHM_ENUM = i32;
    pub const DSAFIPSVERSION_ENUM_DSA_FIPS186_2: root::DSAFIPSVERSION_ENUM = 0;
    pub const DSAFIPSVERSION_ENUM_DSA_FIPS186_3: root::DSAFIPSVERSION_ENUM = 1;
    pub type DSAFIPSVERSION_ENUM = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_DSA_KEY_BLOB_V2 {
        pub dwMagic: root::ULONG,
        pub cbKey: root::ULONG,
        pub hashAlgorithm: root::HASHALGORITHM_ENUM,
        pub standardVersion: root::DSAFIPSVERSION_ENUM,
        pub cbSeedLength: root::ULONG,
        pub cbGroupSize: root::ULONG,
        pub Count: [root::UCHAR; 4usize],
    }
    pub type BCRYPT_DSA_KEY_BLOB_V2 = root::_BCRYPT_DSA_KEY_BLOB_V2;
    pub type PBCRYPT_DSA_KEY_BLOB_V2 = *mut root::_BCRYPT_DSA_KEY_BLOB_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_KEY_DATA_BLOB_HEADER {
        pub dwMagic: root::ULONG,
        pub dwVersion: root::ULONG,
        pub cbKeyData: root::ULONG,
    }
    pub type BCRYPT_KEY_DATA_BLOB_HEADER = root::_BCRYPT_KEY_DATA_BLOB_HEADER;
    pub type PBCRYPT_KEY_DATA_BLOB_HEADER = *mut root::_BCRYPT_KEY_DATA_BLOB_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_DSA_PARAMETER_HEADER {
        pub cbLength: root::ULONG,
        pub dwMagic: root::ULONG,
        pub cbKeyLength: root::ULONG,
        pub Count: [root::UCHAR; 4usize],
        pub Seed: [root::UCHAR; 20usize],
        pub q: [root::UCHAR; 20usize],
    }
    pub type BCRYPT_DSA_PARAMETER_HEADER = root::_BCRYPT_DSA_PARAMETER_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_DSA_PARAMETER_HEADER_V2 {
        pub cbLength: root::ULONG,
        pub dwMagic: root::ULONG,
        pub cbKeyLength: root::ULONG,
        pub hashAlgorithm: root::HASHALGORITHM_ENUM,
        pub standardVersion: root::DSAFIPSVERSION_ENUM,
        pub cbSeedLength: root::ULONG,
        pub cbGroupSize: root::ULONG,
        pub Count: [root::UCHAR; 4usize],
    }
    pub type BCRYPT_DSA_PARAMETER_HEADER_V2 = root::_BCRYPT_DSA_PARAMETER_HEADER_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_ECC_CURVE_NAMES {
        pub dwEccCurveNames: root::ULONG,
        pub pEccCurveNames: *mut root::LPWSTR,
    }
    pub type BCRYPT_ECC_CURVE_NAMES = root::_BCRYPT_ECC_CURVE_NAMES;
    pub const BCRYPT_HASH_OPERATION_TYPE_BCRYPT_HASH_OPERATION_HASH_DATA:
        root::BCRYPT_HASH_OPERATION_TYPE = 1;
    pub const BCRYPT_HASH_OPERATION_TYPE_BCRYPT_HASH_OPERATION_FINISH_HASH:
        root::BCRYPT_HASH_OPERATION_TYPE = 2;
    pub type BCRYPT_HASH_OPERATION_TYPE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_MULTI_HASH_OPERATION {
        pub iHash: root::ULONG,
        pub hashOperation: root::BCRYPT_HASH_OPERATION_TYPE,
        pub pbBuffer: root::PUCHAR,
        pub cbBuffer: root::ULONG,
    }
    pub type BCRYPT_MULTI_HASH_OPERATION = root::_BCRYPT_MULTI_HASH_OPERATION;
    pub const BCRYPT_MULTI_OPERATION_TYPE_BCRYPT_OPERATION_TYPE_HASH:
        root::BCRYPT_MULTI_OPERATION_TYPE = 1;
    pub type BCRYPT_MULTI_OPERATION_TYPE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT {
        pub cbPerObject: root::ULONG,
        pub cbPerElement: root::ULONG,
    }
    pub type BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = root::_BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;
    extern "C" {
        pub fn BCryptOpenAlgorithmProvider(
            phAlgorithm: *mut root::BCRYPT_ALG_HANDLE,
            pszAlgId: root::LPCWSTR,
            pszImplementation: root::LPCWSTR,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_ALGORITHM_IDENTIFIER {
        pub pszName: root::LPWSTR,
        pub dwClass: root::ULONG,
        pub dwFlags: root::ULONG,
    }
    pub type BCRYPT_ALGORITHM_IDENTIFIER = root::_BCRYPT_ALGORITHM_IDENTIFIER;
    extern "C" {
        pub fn BCryptEnumAlgorithms(
            dwAlgOperations: root::ULONG,
            pAlgCount: *mut root::ULONG,
            ppAlgList: *mut *mut root::BCRYPT_ALGORITHM_IDENTIFIER,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_PROVIDER_NAME {
        pub pszProviderName: root::LPWSTR,
    }
    pub type BCRYPT_PROVIDER_NAME = root::_BCRYPT_PROVIDER_NAME;
    extern "C" {
        pub fn BCryptEnumProviders(
            pszAlgId: root::LPCWSTR,
            pImplCount: *mut root::ULONG,
            ppImplList: *mut *mut root::BCRYPT_PROVIDER_NAME,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptGetProperty(
            hObject: root::BCRYPT_HANDLE,
            pszProperty: root::LPCWSTR,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptSetProperty(
            hObject: root::BCRYPT_HANDLE,
            pszProperty: root::LPCWSTR,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptCloseAlgorithmProvider(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptFreeBuffer(pvBuffer: root::PVOID);
    }
    extern "C" {
        pub fn BCryptGenerateSymmetricKey(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            phKey: *mut root::BCRYPT_KEY_HANDLE,
            pbKeyObject: root::PUCHAR,
            cbKeyObject: root::ULONG,
            pbSecret: root::PUCHAR,
            cbSecret: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptGenerateKeyPair(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            phKey: *mut root::BCRYPT_KEY_HANDLE,
            dwLength: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptEncrypt(
            hKey: root::BCRYPT_KEY_HANDLE,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbIV: root::PUCHAR,
            cbIV: root::ULONG,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDecrypt(
            hKey: root::BCRYPT_KEY_HANDLE,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbIV: root::PUCHAR,
            cbIV: root::ULONG,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptExportKey(
            hKey: root::BCRYPT_KEY_HANDLE,
            hExportKey: root::BCRYPT_KEY_HANDLE,
            pszBlobType: root::LPCWSTR,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptImportKey(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            hImportKey: root::BCRYPT_KEY_HANDLE,
            pszBlobType: root::LPCWSTR,
            phKey: *mut root::BCRYPT_KEY_HANDLE,
            pbKeyObject: root::PUCHAR,
            cbKeyObject: root::ULONG,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptImportKeyPair(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            hImportKey: root::BCRYPT_KEY_HANDLE,
            pszBlobType: root::LPCWSTR,
            phKey: *mut root::BCRYPT_KEY_HANDLE,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDuplicateKey(
            hKey: root::BCRYPT_KEY_HANDLE,
            phNewKey: *mut root::BCRYPT_KEY_HANDLE,
            pbKeyObject: root::PUCHAR,
            cbKeyObject: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptFinalizeKeyPair(
            hKey: root::BCRYPT_KEY_HANDLE,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDestroyKey(hKey: root::BCRYPT_KEY_HANDLE) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDestroySecret(hSecret: root::BCRYPT_SECRET_HANDLE) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptSignHash(
            hKey: root::BCRYPT_KEY_HANDLE,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptVerifySignature(
            hKey: root::BCRYPT_KEY_HANDLE,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbHash: root::PUCHAR,
            cbHash: root::ULONG,
            pbSignature: root::PUCHAR,
            cbSignature: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptSecretAgreement(
            hPrivKey: root::BCRYPT_KEY_HANDLE,
            hPubKey: root::BCRYPT_KEY_HANDLE,
            phAgreedSecret: *mut root::BCRYPT_SECRET_HANDLE,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDeriveKey(
            hSharedSecret: root::BCRYPT_SECRET_HANDLE,
            pwszKDF: root::LPCWSTR,
            pParameterList: *mut root::BCryptBufferDesc,
            pbDerivedKey: root::PUCHAR,
            cbDerivedKey: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptKeyDerivation(
            hKey: root::BCRYPT_KEY_HANDLE,
            pParameterList: *mut root::BCryptBufferDesc,
            pbDerivedKey: root::PUCHAR,
            cbDerivedKey: root::ULONG,
            pcbResult: *mut root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptCreateHash(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            phHash: *mut root::BCRYPT_HASH_HANDLE,
            pbHashObject: root::PUCHAR,
            cbHashObject: root::ULONG,
            pbSecret: root::PUCHAR,
            cbSecret: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptHashData(
            hHash: root::BCRYPT_HASH_HANDLE,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptFinishHash(
            hHash: root::BCRYPT_HASH_HANDLE,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptCreateMultiHash(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            phHash: *mut root::BCRYPT_HASH_HANDLE,
            nHashes: root::ULONG,
            pbHashObject: root::PUCHAR,
            cbHashObject: root::ULONG,
            pbSecret: root::PUCHAR,
            cbSecret: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptProcessMultiOperations(
            hObject: root::BCRYPT_HANDLE,
            operationType: root::BCRYPT_MULTI_OPERATION_TYPE,
            pOperations: root::PVOID,
            cbOperations: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDuplicateHash(
            hHash: root::BCRYPT_HASH_HANDLE,
            phNewHash: *mut root::BCRYPT_HASH_HANDLE,
            pbHashObject: root::PUCHAR,
            cbHashObject: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDestroyHash(hHash: root::BCRYPT_HASH_HANDLE) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptHash(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            pbSecret: root::PUCHAR,
            cbSecret: root::ULONG,
            pbInput: root::PUCHAR,
            cbInput: root::ULONG,
            pbOutput: root::PUCHAR,
            cbOutput: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptGenRandom(
            hAlgorithm: root::BCRYPT_ALG_HANDLE,
            pbBuffer: root::PUCHAR,
            cbBuffer: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDeriveKeyCapi(
            hHash: root::BCRYPT_HASH_HANDLE,
            hTargetAlg: root::BCRYPT_ALG_HANDLE,
            pbDerivedKey: root::PUCHAR,
            cbDerivedKey: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDeriveKeyPBKDF2(
            hPrf: root::BCRYPT_ALG_HANDLE,
            pbPassword: root::PUCHAR,
            cbPassword: root::ULONG,
            pbSalt: root::PUCHAR,
            cbSalt: root::ULONG,
            cIterations: root::ULONGLONG,
            pbDerivedKey: root::PUCHAR,
            cbDerivedKey: root::ULONG,
            dwFlags: root::ULONG,
        ) -> root::NTSTATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BCRYPT_INTERFACE_VERSION {
        pub MajorVersion: root::USHORT,
        pub MinorVersion: root::USHORT,
    }
    pub type BCRYPT_INTERFACE_VERSION = root::_BCRYPT_INTERFACE_VERSION;
    pub type PBCRYPT_INTERFACE_VERSION = *mut root::_BCRYPT_INTERFACE_VERSION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_INTERFACE_REG {
        pub dwInterface: root::ULONG,
        pub dwFlags: root::ULONG,
        pub cFunctions: root::ULONG,
        pub rgpszFunctions: *mut *mut u16,
    }
    pub type CRYPT_INTERFACE_REG = root::_CRYPT_INTERFACE_REG;
    pub type PCRYPT_INTERFACE_REG = *mut root::_CRYPT_INTERFACE_REG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_IMAGE_REG {
        pub pszImage: *mut u16,
        pub cInterfaces: root::ULONG,
        pub rgpInterfaces: *mut root::PCRYPT_INTERFACE_REG,
    }
    pub type CRYPT_IMAGE_REG = root::_CRYPT_IMAGE_REG;
    pub type PCRYPT_IMAGE_REG = *mut root::_CRYPT_IMAGE_REG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PROVIDER_REG {
        pub cAliases: root::ULONG,
        pub rgpszAliases: *mut *mut u16,
        pub pUM: root::PCRYPT_IMAGE_REG,
        pub pKM: root::PCRYPT_IMAGE_REG,
    }
    pub type CRYPT_PROVIDER_REG = root::_CRYPT_PROVIDER_REG;
    pub type PCRYPT_PROVIDER_REG = *mut root::_CRYPT_PROVIDER_REG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PROVIDERS {
        pub cProviders: root::ULONG,
        pub rgpszProviders: *mut *mut u16,
    }
    pub type CRYPT_PROVIDERS = root::_CRYPT_PROVIDERS;
    pub type PCRYPT_PROVIDERS = *mut root::_CRYPT_PROVIDERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTEXT_CONFIG {
        pub dwFlags: root::ULONG,
        pub dwReserved: root::ULONG,
    }
    pub type CRYPT_CONTEXT_CONFIG = root::_CRYPT_CONTEXT_CONFIG;
    pub type PCRYPT_CONTEXT_CONFIG = *mut root::_CRYPT_CONTEXT_CONFIG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTEXT_FUNCTION_CONFIG {
        pub dwFlags: root::ULONG,
        pub dwReserved: root::ULONG,
    }
    pub type CRYPT_CONTEXT_FUNCTION_CONFIG = root::_CRYPT_CONTEXT_FUNCTION_CONFIG;
    pub type PCRYPT_CONTEXT_FUNCTION_CONFIG = *mut root::_CRYPT_CONTEXT_FUNCTION_CONFIG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTEXTS {
        pub cContexts: root::ULONG,
        pub rgpszContexts: *mut *mut u16,
    }
    pub type CRYPT_CONTEXTS = root::_CRYPT_CONTEXTS;
    pub type PCRYPT_CONTEXTS = *mut root::_CRYPT_CONTEXTS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTEXT_FUNCTIONS {
        pub cFunctions: root::ULONG,
        pub rgpszFunctions: *mut *mut u16,
    }
    pub type CRYPT_CONTEXT_FUNCTIONS = root::_CRYPT_CONTEXT_FUNCTIONS;
    pub type PCRYPT_CONTEXT_FUNCTIONS = *mut root::_CRYPT_CONTEXT_FUNCTIONS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS {
        pub cProviders: root::ULONG,
        pub rgpszProviders: *mut *mut u16,
    }
    pub type CRYPT_CONTEXT_FUNCTION_PROVIDERS = root::_CRYPT_CONTEXT_FUNCTION_PROVIDERS;
    pub type PCRYPT_CONTEXT_FUNCTION_PROVIDERS = *mut root::_CRYPT_CONTEXT_FUNCTION_PROVIDERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PROPERTY_REF {
        pub pszProperty: *mut u16,
        pub cbValue: root::ULONG,
        pub pbValue: root::PUCHAR,
    }
    pub type CRYPT_PROPERTY_REF = root::_CRYPT_PROPERTY_REF;
    pub type PCRYPT_PROPERTY_REF = *mut root::_CRYPT_PROPERTY_REF;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_IMAGE_REF {
        pub pszImage: *mut u16,
        pub dwFlags: root::ULONG,
    }
    pub type CRYPT_IMAGE_REF = root::_CRYPT_IMAGE_REF;
    pub type PCRYPT_IMAGE_REF = *mut root::_CRYPT_IMAGE_REF;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PROVIDER_REF {
        pub dwInterface: root::ULONG,
        pub pszFunction: *mut u16,
        pub pszProvider: *mut u16,
        pub cProperties: root::ULONG,
        pub rgpProperties: *mut root::PCRYPT_PROPERTY_REF,
        pub pUM: root::PCRYPT_IMAGE_REF,
        pub pKM: root::PCRYPT_IMAGE_REF,
    }
    pub type CRYPT_PROVIDER_REF = root::_CRYPT_PROVIDER_REF;
    pub type PCRYPT_PROVIDER_REF = *mut root::_CRYPT_PROVIDER_REF;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PROVIDER_REFS {
        pub cProviders: root::ULONG,
        pub rgpProviders: *mut root::PCRYPT_PROVIDER_REF,
    }
    pub type CRYPT_PROVIDER_REFS = root::_CRYPT_PROVIDER_REFS;
    pub type PCRYPT_PROVIDER_REFS = *mut root::_CRYPT_PROVIDER_REFS;
    extern "C" {
        pub fn BCryptQueryProviderRegistration(
            pszProvider: root::LPCWSTR,
            dwMode: root::ULONG,
            dwInterface: root::ULONG,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_PROVIDER_REG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptEnumRegisteredProviders(
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_PROVIDERS,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptCreateContext(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            pConfig: root::PCRYPT_CONTEXT_CONFIG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptDeleteContext(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptEnumContexts(
            dwTable: root::ULONG,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_CONTEXTS,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptConfigureContext(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            pConfig: root::PCRYPT_CONTEXT_CONFIG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptQueryContextConfiguration(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_CONTEXT_CONFIG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptAddContextFunction(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            dwPosition: root::ULONG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptRemoveContextFunction(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptEnumContextFunctions(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_CONTEXT_FUNCTIONS,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptConfigureContextFunction(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            pConfig: root::PCRYPT_CONTEXT_FUNCTION_CONFIG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptQueryContextFunctionConfiguration(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_CONTEXT_FUNCTION_CONFIG,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptEnumContextFunctionProviders(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_CONTEXT_FUNCTION_PROVIDERS,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptSetContextFunctionProperty(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            pszProperty: root::LPCWSTR,
            cbValue: root::ULONG,
            pbValue: root::PUCHAR,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptQueryContextFunctionProperty(
            dwTable: root::ULONG,
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            pszProperty: root::LPCWSTR,
            pcbValue: *mut root::ULONG,
            ppbValue: *mut root::PUCHAR,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptRegisterConfigChangeNotify(phEvent: *mut root::HANDLE) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptUnregisterConfigChangeNotify(hEvent: root::HANDLE) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptResolveProviders(
            pszContext: root::LPCWSTR,
            dwInterface: root::ULONG,
            pszFunction: root::LPCWSTR,
            pszProvider: root::LPCWSTR,
            dwMode: root::ULONG,
            dwFlags: root::ULONG,
            pcbBuffer: *mut root::ULONG,
            ppBuffer: *mut root::PCRYPT_PROVIDER_REFS,
        ) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn BCryptGetFipsAlgorithmMode(pfEnabled: *mut root::BOOLEAN) -> root::NTSTATUS;
    }
    extern "C" {
        pub fn CngGetFipsAlgorithmMode() -> root::BOOLEAN;
    }
    pub type SECURITY_STATUS = i32;
    pub type PFN_NCRYPT_ALLOC =
        ::std::option::Option<unsafe extern "C" fn(cbSize: root::SIZE_T) -> root::LPVOID>;
    pub type PFN_NCRYPT_FREE = ::std::option::Option<unsafe extern "C" fn(pv: root::LPVOID)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NCRYPT_ALLOC_PARA {
        pub cbSize: u32,
        pub pfnAlloc: root::PFN_NCRYPT_ALLOC,
        pub pfnFree: root::PFN_NCRYPT_FREE,
    }
    pub type NCryptBuffer = root::BCryptBuffer;
    pub type PNCryptBuffer = *mut root::BCryptBuffer;
    pub type NCryptBufferDesc = root::BCryptBufferDesc;
    pub type PNCryptBufferDesc = *mut root::BCryptBufferDesc;
    pub type NCRYPT_HANDLE = u64;
    pub type NCRYPT_PROV_HANDLE = u64;
    pub type NCRYPT_KEY_HANDLE = u64;
    pub type NCRYPT_HASH_HANDLE = u64;
    pub type NCRYPT_SECRET_HANDLE = u64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_CIPHER_PADDING_INFO {
        pub cbSize: root::ULONG,
        pub dwFlags: u32,
        pub pbIV: root::PUCHAR,
        pub cbIV: root::ULONG,
        pub pbOtherInfo: root::PUCHAR,
        pub cbOtherInfo: root::ULONG,
    }
    pub type NCRYPT_CIPHER_PADDING_INFO = root::_NCRYPT_CIPHER_PADDING_INFO;
    pub type PNCRYPT_CIPHER_PADDING_INFO = *mut root::_NCRYPT_CIPHER_PADDING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_PLATFORM_ATTEST_PADDING_INFO {
        pub magic: root::ULONG,
        pub pcrMask: root::ULONG,
    }
    pub type NCRYPT_PLATFORM_ATTEST_PADDING_INFO = root::_NCRYPT_PLATFORM_ATTEST_PADDING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_KEY_ATTEST_PADDING_INFO {
        pub magic: root::ULONG,
        pub pbKeyBlob: root::PUCHAR,
        pub cbKeyBlob: root::ULONG,
        pub pbKeyAuth: root::PUCHAR,
        pub cbKeyAuth: root::ULONG,
    }
    pub type NCRYPT_KEY_ATTEST_PADDING_INFO = root::_NCRYPT_KEY_ATTEST_PADDING_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES {
        pub Version: root::ULONG,
        pub Flags: root::ULONG,
        pub cbPublicKeyBlob: root::ULONG,
    }
    pub type NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES =
        root::_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
    pub type PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES =
        *mut root::_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT {
        pub Magic: root::ULONG,
        pub Version: root::ULONG,
        pub cbSignature: root::ULONG,
        pub cbReport: root::ULONG,
        pub cbAttributes: root::ULONG,
    }
    pub type NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = root::_NCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
    pub type PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT =
        *mut root::_NCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS {
        pub Version: root::ULONG,
        pub TrustletId: root::ULONGLONG,
        pub MinSvn: root::ULONG,
        pub FlagsMask: root::ULONG,
        pub FlagsExpected: root::ULONG,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS {
        #[inline]
        pub fn AllowDebugging(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_AllowDebugging(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            AllowDebugging: root::ULONG,
            Reserved: root::ULONG,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let AllowDebugging: u32 = unsafe { ::std::mem::transmute(AllowDebugging) };
                AllowDebugging as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS =
        root::_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
    pub type PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS =
        *mut root::_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER {
        pub Version: root::ULONG,
        pub KeyUsage: root::ULONG,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub cbAlgName: root::ULONG,
        pub cbNonce: root::ULONG,
        pub cbAuthTag: root::ULONG,
        pub cbWrappingKey: root::ULONG,
        pub cbIsolatedKey: root::ULONG,
    }
    impl _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER {
        #[inline]
        pub fn PerBootKey(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_PerBootKey(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> root::ULONG {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: root::ULONG) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            PerBootKey: root::ULONG,
            Reserved: root::ULONG,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let PerBootKey: u32 = unsafe { ::std::mem::transmute(PerBootKey) };
                PerBootKey as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = root::_NCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
    pub type PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER = *mut root::_NCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE {
        pub Header: root::NCRYPT_EXPORTED_ISOLATED_KEY_HEADER,
    }
    pub type NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = root::_NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
    pub type PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE =
        *mut root::_NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT {
        pub Magic: root::UINT32,
        pub Version: root::UINT32,
        pub HeaderSize: root::UINT32,
        pub cbCertifyInfo: root::UINT32,
        pub cbSignature: root::UINT32,
        pub cbTpmPublic: root::UINT32,
    }
    pub type NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT =
        root::__NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
    pub type PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT =
        *mut root::__NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT {
        pub Magic: root::ULONG,
        pub Version: root::ULONG,
        pub pcrAlg: root::ULONG,
        pub cbSignature: root::ULONG,
        pub cbQuote: root::ULONG,
        pub cbPcrs: root::ULONG,
    }
    pub type NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT =
        root::_NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
    pub type PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT =
        *mut root::_NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
    extern "C" {
        pub fn NCryptOpenStorageProvider(
            phProvider: *mut root::NCRYPT_PROV_HANDLE,
            pszProviderName: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCryptAlgorithmName {
        pub pszName: root::LPWSTR,
        pub dwClass: u32,
        pub dwAlgOperations: u32,
        pub dwFlags: u32,
    }
    pub type NCryptAlgorithmName = root::_NCryptAlgorithmName;
    extern "C" {
        pub fn NCryptEnumAlgorithms(
            hProvider: root::NCRYPT_PROV_HANDLE,
            dwAlgOperations: u32,
            pdwAlgCount: *mut u32,
            ppAlgList: *mut *mut root::NCryptAlgorithmName,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptIsAlgSupported(
            hProvider: root::NCRYPT_PROV_HANDLE,
            pszAlgId: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NCryptKeyName {
        pub pszName: root::LPWSTR,
        pub pszAlgid: root::LPWSTR,
        pub dwLegacyKeySpec: u32,
        pub dwFlags: u32,
    }
    extern "C" {
        pub fn NCryptEnumKeys(
            hProvider: root::NCRYPT_PROV_HANDLE,
            pszScope: root::LPCWSTR,
            ppKeyName: *mut *mut root::NCryptKeyName,
            ppEnumState: *mut root::PVOID,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NCryptProviderName {
        pub pszName: root::LPWSTR,
        pub pszComment: root::LPWSTR,
    }
    extern "C" {
        pub fn NCryptEnumStorageProviders(
            pdwProviderCount: *mut u32,
            ppProviderList: *mut *mut root::NCryptProviderName,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptFreeBuffer(pvInput: root::PVOID) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptOpenKey(
            hProvider: root::NCRYPT_PROV_HANDLE,
            phKey: *mut root::NCRYPT_KEY_HANDLE,
            pszKeyName: root::LPCWSTR,
            dwLegacyKeySpec: u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptCreatePersistedKey(
            hProvider: root::NCRYPT_PROV_HANDLE,
            phKey: *mut root::NCRYPT_KEY_HANDLE,
            pszAlgId: root::LPCWSTR,
            pszKeyName: root::LPCWSTR,
            dwLegacyKeySpec: u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_UI_POLICY {
        pub dwVersion: u32,
        pub dwFlags: u32,
        pub pszCreationTitle: root::LPCWSTR,
        pub pszFriendlyName: root::LPCWSTR,
        pub pszDescription: root::LPCWSTR,
    }
    pub type NCRYPT_UI_POLICY = root::__NCRYPT_UI_POLICY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_KEY_ACCESS_POLICY_BLOB {
        pub dwVersion: u32,
        pub dwPolicyFlags: u32,
        pub cbUserSid: u32,
        pub cbApplicationSid: u32,
    }
    pub type NCRYPT_KEY_ACCESS_POLICY_BLOB = root::__NCRYPT_KEY_ACCESS_POLICY_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_SUPPORTED_LENGTHS {
        pub dwMinLength: u32,
        pub dwMaxLength: u32,
        pub dwIncrement: u32,
        pub dwDefaultLength: u32,
    }
    pub type NCRYPT_SUPPORTED_LENGTHS = root::__NCRYPT_SUPPORTED_LENGTHS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO {
        pub dwVersion: u32,
        pub iExpiration: root::INT32,
        pub pabNonce: [u8; 32usize],
        pub pabPolicyRef: [u8; 32usize],
        pub pabHMAC: [u8; 32usize],
    }
    pub type NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = root::__NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_PCP_TPM_FW_VERSION_INFO {
        pub major1: root::UINT16,
        pub major2: root::UINT16,
        pub minor1: root::UINT16,
        pub minor2: root::UINT16,
    }
    pub type NCRYPT_PCP_TPM_FW_VERSION_INFO = root::__NCRYPT_PCP_TPM_FW_VERSION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __NCRYPT_PCP_RAW_POLICYDIGEST {
        pub dwVersion: u32,
        pub cbDigest: u32,
    }
    pub type NCRYPT_PCP_RAW_POLICYDIGEST_INFO = root::__NCRYPT_PCP_RAW_POLICYDIGEST;
    extern "C" {
        pub fn NCryptGetProperty(
            hObject: root::NCRYPT_HANDLE,
            pszProperty: root::LPCWSTR,
            pbOutput: root::PBYTE,
            cbOutput: u32,
            pcbResult: *mut u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptSetProperty(
            hObject: root::NCRYPT_HANDLE,
            pszProperty: root::LPCWSTR,
            pbInput: root::PBYTE,
            cbInput: u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptFinalizeKey(
            hKey: root::NCRYPT_KEY_HANDLE,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptEncrypt(
            hKey: root::NCRYPT_KEY_HANDLE,
            pbInput: root::PBYTE,
            cbInput: u32,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbOutput: root::PBYTE,
            cbOutput: u32,
            pcbResult: *mut u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptDecrypt(
            hKey: root::NCRYPT_KEY_HANDLE,
            pbInput: root::PBYTE,
            cbInput: u32,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbOutput: root::PBYTE,
            cbOutput: u32,
            pcbResult: *mut u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NCRYPT_KEY_BLOB_HEADER {
        pub cbSize: root::ULONG,
        pub dwMagic: root::ULONG,
        pub cbAlgName: root::ULONG,
        pub cbKeyData: root::ULONG,
    }
    pub type NCRYPT_KEY_BLOB_HEADER = root::_NCRYPT_KEY_BLOB_HEADER;
    pub type PNCRYPT_KEY_BLOB_HEADER = *mut root::_NCRYPT_KEY_BLOB_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER {
        pub magic: u32,
        pub cbHeader: u32,
        pub cbPublic: u32,
        pub cbPrivate: u32,
        pub cbName: u32,
    }
    pub type PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = *mut root::NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
    extern "C" {
        pub fn NCryptImportKey(
            hProvider: root::NCRYPT_PROV_HANDLE,
            hImportKey: root::NCRYPT_KEY_HANDLE,
            pszBlobType: root::LPCWSTR,
            pParameterList: *mut root::NCryptBufferDesc,
            phKey: *mut root::NCRYPT_KEY_HANDLE,
            pbData: root::PBYTE,
            cbData: u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptExportKey(
            hKey: root::NCRYPT_KEY_HANDLE,
            hExportKey: root::NCRYPT_KEY_HANDLE,
            pszBlobType: root::LPCWSTR,
            pParameterList: *mut root::NCryptBufferDesc,
            pbOutput: root::PBYTE,
            cbOutput: u32,
            pcbResult: *mut u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptSignHash(
            hKey: root::NCRYPT_KEY_HANDLE,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbHashValue: root::PBYTE,
            cbHashValue: u32,
            pbSignature: root::PBYTE,
            cbSignature: u32,
            pcbResult: *mut u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptVerifySignature(
            hKey: root::NCRYPT_KEY_HANDLE,
            pPaddingInfo: *mut ::std::os::raw::c_void,
            pbHashValue: root::PBYTE,
            cbHashValue: u32,
            pbSignature: root::PBYTE,
            cbSignature: u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptDeleteKey(
            hKey: root::NCRYPT_KEY_HANDLE,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptFreeObject(hObject: root::NCRYPT_HANDLE) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptIsKeyHandle(hKey: root::NCRYPT_KEY_HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn NCryptTranslateHandle(
            phProvider: *mut root::NCRYPT_PROV_HANDLE,
            phKey: *mut root::NCRYPT_KEY_HANDLE,
            hLegacyProv: root::HCRYPTPROV,
            hLegacyKey: root::HCRYPTKEY,
            dwLegacyKeySpec: u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptNotifyChangeKey(
            hProvider: root::NCRYPT_PROV_HANDLE,
            phEvent: *mut root::HANDLE,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptSecretAgreement(
            hPrivKey: root::NCRYPT_KEY_HANDLE,
            hPubKey: root::NCRYPT_KEY_HANDLE,
            phAgreedSecret: *mut root::NCRYPT_SECRET_HANDLE,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptDeriveKey(
            hSharedSecret: root::NCRYPT_SECRET_HANDLE,
            pwszKDF: root::LPCWSTR,
            pParameterList: *mut root::NCryptBufferDesc,
            pbDerivedKey: root::PBYTE,
            cbDerivedKey: u32,
            pcbResult: *mut u32,
            dwFlags: root::ULONG,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptKeyDerivation(
            hKey: root::NCRYPT_KEY_HANDLE,
            pParameterList: *mut root::NCryptBufferDesc,
            pbDerivedKey: root::PUCHAR,
            cbDerivedKey: u32,
            pcbResult: *mut u32,
            dwFlags: root::ULONG,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptCreateClaim(
            hSubjectKey: root::NCRYPT_KEY_HANDLE,
            hAuthorityKey: root::NCRYPT_KEY_HANDLE,
            dwClaimType: u32,
            pParameterList: *mut root::NCryptBufferDesc,
            pbClaimBlob: root::PBYTE,
            cbClaimBlob: u32,
            pcbResult: *mut u32,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    extern "C" {
        pub fn NCryptVerifyClaim(
            hSubjectKey: root::NCRYPT_KEY_HANDLE,
            hAuthorityKey: root::NCRYPT_KEY_HANDLE,
            dwClaimType: u32,
            pParameterList: *mut root::NCryptBufferDesc,
            pbClaimBlob: root::PBYTE,
            cbClaimBlob: u32,
            pOutput: *mut root::NCryptBufferDesc,
            dwFlags: u32,
        ) -> root::SECURITY_STATUS;
    }
    pub type HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = u64;
    pub type HCRYPTPROV_LEGACY = u64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_BIT_BLOB {
        pub cbData: u32,
        pub pbData: *mut u8,
        pub cUnusedBits: u32,
    }
    pub type CRYPT_BIT_BLOB = root::_CRYPT_BIT_BLOB;
    pub type PCRYPT_BIT_BLOB = *mut root::_CRYPT_BIT_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ALGORITHM_IDENTIFIER {
        pub pszObjId: *mut i8,
        pub Parameters: root::CRYPT_OBJID_BLOB,
    }
    pub type CRYPT_ALGORITHM_IDENTIFIER = root::_CRYPT_ALGORITHM_IDENTIFIER;
    pub type PCRYPT_ALGORITHM_IDENTIFIER = *mut root::_CRYPT_ALGORITHM_IDENTIFIER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_OBJID_TABLE {
        pub dwAlgId: u32,
        pub pszObjId: *const i8,
    }
    pub type CRYPT_OBJID_TABLE = root::_CRYPT_OBJID_TABLE;
    pub type PCRYPT_OBJID_TABLE = *mut root::_CRYPT_OBJID_TABLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_HASH_INFO {
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub Hash: root::CRYPT_HASH_BLOB,
    }
    pub type CRYPT_HASH_INFO = root::_CRYPT_HASH_INFO;
    pub type PCRYPT_HASH_INFO = *mut root::_CRYPT_HASH_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_EXTENSION {
        pub pszObjId: *mut i8,
        pub fCritical: root::BOOL,
        pub Value: root::CRYPT_OBJID_BLOB,
    }
    pub type CERT_EXTENSION = root::_CERT_EXTENSION;
    pub type PCERT_EXTENSION = *mut root::_CERT_EXTENSION;
    pub type PCCERT_EXTENSION = *const root::CERT_EXTENSION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
        pub pszObjId: *mut i8,
        pub Value: root::CRYPT_OBJID_BLOB,
    }
    pub type CRYPT_ATTRIBUTE_TYPE_VALUE = root::_CRYPT_ATTRIBUTE_TYPE_VALUE;
    pub type PCRYPT_ATTRIBUTE_TYPE_VALUE = *mut root::_CRYPT_ATTRIBUTE_TYPE_VALUE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ATTRIBUTE {
        pub pszObjId: *mut i8,
        pub cValue: u32,
        pub rgValue: root::PCRYPT_ATTR_BLOB,
    }
    pub type CRYPT_ATTRIBUTE = root::_CRYPT_ATTRIBUTE;
    pub type PCRYPT_ATTRIBUTE = *mut root::_CRYPT_ATTRIBUTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ATTRIBUTES {
        pub cAttr: u32,
        pub rgAttr: root::PCRYPT_ATTRIBUTE,
    }
    pub type CRYPT_ATTRIBUTES = root::_CRYPT_ATTRIBUTES;
    pub type PCRYPT_ATTRIBUTES = *mut root::_CRYPT_ATTRIBUTES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_RDN_ATTR {
        pub pszObjId: *mut i8,
        pub dwValueType: u32,
        pub Value: root::CERT_RDN_VALUE_BLOB,
    }
    pub type CERT_RDN_ATTR = root::_CERT_RDN_ATTR;
    pub type PCERT_RDN_ATTR = *mut root::_CERT_RDN_ATTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_RDN {
        pub cRDNAttr: u32,
        pub rgRDNAttr: root::PCERT_RDN_ATTR,
    }
    pub type CERT_RDN = root::_CERT_RDN;
    pub type PCERT_RDN = *mut root::_CERT_RDN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_NAME_INFO {
        pub cRDN: u32,
        pub rgRDN: root::PCERT_RDN,
    }
    pub type CERT_NAME_INFO = root::_CERT_NAME_INFO;
    pub type PCERT_NAME_INFO = *mut root::_CERT_NAME_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_NAME_VALUE {
        pub dwValueType: u32,
        pub Value: root::CERT_RDN_VALUE_BLOB,
    }
    pub type CERT_NAME_VALUE = root::_CERT_NAME_VALUE;
    pub type PCERT_NAME_VALUE = *mut root::_CERT_NAME_VALUE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_PUBLIC_KEY_INFO {
        pub Algorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub PublicKey: root::CRYPT_BIT_BLOB,
    }
    pub type CERT_PUBLIC_KEY_INFO = root::_CERT_PUBLIC_KEY_INFO;
    pub type PCERT_PUBLIC_KEY_INFO = *mut root::_CERT_PUBLIC_KEY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ECC_PRIVATE_KEY_INFO {
        pub dwVersion: u32,
        pub PrivateKey: root::CRYPT_DER_BLOB,
        pub szCurveOid: *mut i8,
        pub PublicKey: root::CRYPT_BIT_BLOB,
    }
    pub type CRYPT_ECC_PRIVATE_KEY_INFO = root::_CRYPT_ECC_PRIVATE_KEY_INFO;
    pub type PCRYPT_ECC_PRIVATE_KEY_INFO = *mut root::_CRYPT_ECC_PRIVATE_KEY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PRIVATE_KEY_INFO {
        pub Version: u32,
        pub Algorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub PrivateKey: root::CRYPT_DER_BLOB,
        pub pAttributes: root::PCRYPT_ATTRIBUTES,
    }
    pub type CRYPT_PRIVATE_KEY_INFO = root::_CRYPT_PRIVATE_KEY_INFO;
    pub type PCRYPT_PRIVATE_KEY_INFO = *mut root::_CRYPT_PRIVATE_KEY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {
        pub EncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedPrivateKey: root::CRYPT_DATA_BLOB,
    }
    pub type CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = root::_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
    pub type PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = *mut root::_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
    pub type PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            Algorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
            EncryptedPrivateKey: root::CRYPT_DATA_BLOB,
            pbClearTextKey: *mut u8,
            pcbClearTextKey: *mut u32,
            pVoidDecryptFunc: root::LPVOID,
        ) -> root::BOOL,
    >;
    pub type PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            pAlgorithm: *mut root::CRYPT_ALGORITHM_IDENTIFIER,
            pClearTextPrivateKey: *mut root::CRYPT_DATA_BLOB,
            pbEncryptedKey: *mut u8,
            pcbEncryptedKey: *mut u32,
            pVoidEncryptFunc: root::LPVOID,
        ) -> root::BOOL,
    >;
    pub type PCRYPT_RESOLVE_HCRYPTPROV_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            pPrivateKeyInfo: *mut root::CRYPT_PRIVATE_KEY_INFO,
            phCryptProv: *mut root::HCRYPTPROV,
            pVoidResolveFunc: root::LPVOID,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PKCS8_IMPORT_PARAMS {
        pub PrivateKey: root::CRYPT_DIGEST_BLOB,
        pub pResolvehCryptProvFunc: root::PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
        pub pVoidResolveFunc: root::LPVOID,
        pub pDecryptPrivateKeyFunc: root::PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
        pub pVoidDecryptFunc: root::LPVOID,
    }
    pub type CRYPT_PKCS8_IMPORT_PARAMS = root::_CRYPT_PKCS8_IMPORT_PARAMS;
    pub type PCRYPT_PKCS8_IMPORT_PARAMS = *mut root::_CRYPT_PKCS8_IMPORT_PARAMS;
    pub type CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = root::_CRYPT_PKCS8_IMPORT_PARAMS;
    pub type PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = *mut root::_CRYPT_PKCS8_IMPORT_PARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PKCS8_EXPORT_PARAMS {
        pub hCryptProv: root::HCRYPTPROV,
        pub dwKeySpec: u32,
        pub pszPrivateKeyObjId: *mut i8,
        pub pEncryptPrivateKeyFunc: root::PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
        pub pVoidEncryptFunc: root::LPVOID,
    }
    pub type CRYPT_PKCS8_EXPORT_PARAMS = root::_CRYPT_PKCS8_EXPORT_PARAMS;
    pub type PCRYPT_PKCS8_EXPORT_PARAMS = *mut root::_CRYPT_PKCS8_EXPORT_PARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_INFO {
        pub dwVersion: u32,
        pub SerialNumber: root::CRYPT_INTEGER_BLOB,
        pub SignatureAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub Issuer: root::CERT_NAME_BLOB,
        pub NotBefore: root::FILETIME,
        pub NotAfter: root::FILETIME,
        pub Subject: root::CERT_NAME_BLOB,
        pub SubjectPublicKeyInfo: root::CERT_PUBLIC_KEY_INFO,
        pub IssuerUniqueId: root::CRYPT_BIT_BLOB,
        pub SubjectUniqueId: root::CRYPT_BIT_BLOB,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CERT_INFO = root::_CERT_INFO;
    pub type PCERT_INFO = *mut root::_CERT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRL_ENTRY {
        pub SerialNumber: root::CRYPT_INTEGER_BLOB,
        pub RevocationDate: root::FILETIME,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CRL_ENTRY = root::_CRL_ENTRY;
    pub type PCRL_ENTRY = *mut root::_CRL_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRL_INFO {
        pub dwVersion: u32,
        pub SignatureAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub Issuer: root::CERT_NAME_BLOB,
        pub ThisUpdate: root::FILETIME,
        pub NextUpdate: root::FILETIME,
        pub cCRLEntry: u32,
        pub rgCRLEntry: root::PCRL_ENTRY,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CRL_INFO = root::_CRL_INFO;
    pub type PCRL_INFO = *mut root::_CRL_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_OR_CRL_BLOB {
        pub dwChoice: u32,
        pub cbEncoded: u32,
        pub pbEncoded: *mut u8,
    }
    pub type CERT_OR_CRL_BLOB = root::_CERT_OR_CRL_BLOB;
    pub type PCERT_OR_CRL_BLOB = *mut root::_CERT_OR_CRL_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_OR_CRL_BUNDLE {
        pub cItem: u32,
        pub rgItem: root::PCERT_OR_CRL_BLOB,
    }
    pub type CERT_OR_CRL_BUNDLE = root::_CERT_OR_CRL_BUNDLE;
    pub type PCERT_OR_CRL_BUNDLE = *mut root::_CERT_OR_CRL_BUNDLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REQUEST_INFO {
        pub dwVersion: u32,
        pub Subject: root::CERT_NAME_BLOB,
        pub SubjectPublicKeyInfo: root::CERT_PUBLIC_KEY_INFO,
        pub cAttribute: u32,
        pub rgAttribute: root::PCRYPT_ATTRIBUTE,
    }
    pub type CERT_REQUEST_INFO = root::_CERT_REQUEST_INFO;
    pub type PCERT_REQUEST_INFO = *mut root::_CERT_REQUEST_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_KEYGEN_REQUEST_INFO {
        pub dwVersion: u32,
        pub SubjectPublicKeyInfo: root::CERT_PUBLIC_KEY_INFO,
        pub pwszChallengeString: root::LPWSTR,
    }
    pub type CERT_KEYGEN_REQUEST_INFO = root::_CERT_KEYGEN_REQUEST_INFO;
    pub type PCERT_KEYGEN_REQUEST_INFO = *mut root::_CERT_KEYGEN_REQUEST_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SIGNED_CONTENT_INFO {
        pub ToBeSigned: root::CRYPT_DER_BLOB,
        pub SignatureAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub Signature: root::CRYPT_BIT_BLOB,
    }
    pub type CERT_SIGNED_CONTENT_INFO = root::_CERT_SIGNED_CONTENT_INFO;
    pub type PCERT_SIGNED_CONTENT_INFO = *mut root::_CERT_SIGNED_CONTENT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_USAGE {
        pub cUsageIdentifier: u32,
        pub rgpszUsageIdentifier: *mut *mut i8,
    }
    pub type CTL_USAGE = root::_CTL_USAGE;
    pub type PCTL_USAGE = *mut root::_CTL_USAGE;
    pub type CERT_ENHKEY_USAGE = root::_CTL_USAGE;
    pub type PCERT_ENHKEY_USAGE = *mut root::_CTL_USAGE;
    pub type PCCTL_USAGE = *const root::CTL_USAGE;
    pub type PCCERT_ENHKEY_USAGE = *const root::CERT_ENHKEY_USAGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_ENTRY {
        pub SubjectIdentifier: root::CRYPT_DATA_BLOB,
        pub cAttribute: u32,
        pub rgAttribute: root::PCRYPT_ATTRIBUTE,
    }
    pub type CTL_ENTRY = root::_CTL_ENTRY;
    pub type PCTL_ENTRY = *mut root::_CTL_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_INFO {
        pub dwVersion: u32,
        pub SubjectUsage: root::CTL_USAGE,
        pub ListIdentifier: root::CRYPT_DATA_BLOB,
        pub SequenceNumber: root::CRYPT_INTEGER_BLOB,
        pub ThisUpdate: root::FILETIME,
        pub NextUpdate: root::FILETIME,
        pub SubjectAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub cCTLEntry: u32,
        pub rgCTLEntry: root::PCTL_ENTRY,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CTL_INFO = root::_CTL_INFO;
    pub type PCTL_INFO = *mut root::_CTL_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIME_STAMP_REQUEST_INFO {
        pub pszTimeStampAlgorithm: *mut i8,
        pub pszContentType: *mut i8,
        pub Content: root::CRYPT_OBJID_BLOB,
        pub cAttribute: u32,
        pub rgAttribute: root::PCRYPT_ATTRIBUTE,
    }
    pub type CRYPT_TIME_STAMP_REQUEST_INFO = root::_CRYPT_TIME_STAMP_REQUEST_INFO;
    pub type PCRYPT_TIME_STAMP_REQUEST_INFO = *mut root::_CRYPT_TIME_STAMP_REQUEST_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
        pub pwszName: root::LPWSTR,
        pub pwszValue: root::LPWSTR,
    }
    pub type CRYPT_ENROLLMENT_NAME_VALUE_PAIR = root::_CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
    pub type PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = *mut root::_CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CSP_PROVIDER {
        pub dwKeySpec: u32,
        pub pwszProviderName: root::LPWSTR,
        pub Signature: root::CRYPT_BIT_BLOB,
    }
    pub type CRYPT_CSP_PROVIDER = root::_CRYPT_CSP_PROVIDER;
    pub type PCRYPT_CSP_PROVIDER = *mut root::_CRYPT_CSP_PROVIDER;
    extern "C" {
        pub fn CryptFormatObject(
            dwCertEncodingType: u32,
            dwFormatType: u32,
            dwFormatStrType: u32,
            pFormatStruct: *mut ::std::os::raw::c_void,
            lpszStructType: *const i8,
            pbEncoded: *const u8,
            cbEncoded: u32,
            pbFormat: *mut ::std::os::raw::c_void,
            pcbFormat: *mut u32,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_ALLOC =
        ::std::option::Option<unsafe extern "C" fn(cbSize: root::size_t) -> root::LPVOID>;
    pub type PFN_CRYPT_FREE = ::std::option::Option<unsafe extern "C" fn(pv: root::LPVOID)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ENCODE_PARA {
        pub cbSize: u32,
        pub pfnAlloc: root::PFN_CRYPT_ALLOC,
        pub pfnFree: root::PFN_CRYPT_FREE,
    }
    pub type CRYPT_ENCODE_PARA = root::_CRYPT_ENCODE_PARA;
    pub type PCRYPT_ENCODE_PARA = *mut root::_CRYPT_ENCODE_PARA;
    extern "C" {
        pub fn CryptEncodeObjectEx(
            dwCertEncodingType: u32,
            lpszStructType: *const i8,
            pvStructInfo: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pEncodePara: root::PCRYPT_ENCODE_PARA,
            pvEncoded: *mut ::std::os::raw::c_void,
            pcbEncoded: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEncodeObject(
            dwCertEncodingType: u32,
            lpszStructType: *const i8,
            pvStructInfo: *const ::std::os::raw::c_void,
            pbEncoded: *mut u8,
            pcbEncoded: *mut u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_DECODE_PARA {
        pub cbSize: u32,
        pub pfnAlloc: root::PFN_CRYPT_ALLOC,
        pub pfnFree: root::PFN_CRYPT_FREE,
    }
    pub type CRYPT_DECODE_PARA = root::_CRYPT_DECODE_PARA;
    pub type PCRYPT_DECODE_PARA = *mut root::_CRYPT_DECODE_PARA;
    extern "C" {
        pub fn CryptDecodeObjectEx(
            dwCertEncodingType: u32,
            lpszStructType: *const i8,
            pbEncoded: *const u8,
            cbEncoded: u32,
            dwFlags: u32,
            pDecodePara: root::PCRYPT_DECODE_PARA,
            pvStructInfo: *mut ::std::os::raw::c_void,
            pcbStructInfo: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDecodeObject(
            dwCertEncodingType: u32,
            lpszStructType: *const i8,
            pbEncoded: *const u8,
            cbEncoded: u32,
            dwFlags: u32,
            pvStructInfo: *mut ::std::os::raw::c_void,
            pcbStructInfo: *mut u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_EXTENSIONS {
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CERT_EXTENSIONS = root::_CERT_EXTENSIONS;
    pub type PCERT_EXTENSIONS = *mut root::_CERT_EXTENSIONS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_AUTHORITY_KEY_ID_INFO {
        pub KeyId: root::CRYPT_DATA_BLOB,
        pub CertIssuer: root::CERT_NAME_BLOB,
        pub CertSerialNumber: root::CRYPT_INTEGER_BLOB,
    }
    pub type CERT_AUTHORITY_KEY_ID_INFO = root::_CERT_AUTHORITY_KEY_ID_INFO;
    pub type PCERT_AUTHORITY_KEY_ID_INFO = *mut root::_CERT_AUTHORITY_KEY_ID_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_PRIVATE_KEY_VALIDITY {
        pub NotBefore: root::FILETIME,
        pub NotAfter: root::FILETIME,
    }
    pub type CERT_PRIVATE_KEY_VALIDITY = root::_CERT_PRIVATE_KEY_VALIDITY;
    pub type PCERT_PRIVATE_KEY_VALIDITY = *mut root::_CERT_PRIVATE_KEY_VALIDITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_KEY_ATTRIBUTES_INFO {
        pub KeyId: root::CRYPT_DATA_BLOB,
        pub IntendedKeyUsage: root::CRYPT_BIT_BLOB,
        pub pPrivateKeyUsagePeriod: root::PCERT_PRIVATE_KEY_VALIDITY,
    }
    pub type CERT_KEY_ATTRIBUTES_INFO = root::_CERT_KEY_ATTRIBUTES_INFO;
    pub type PCERT_KEY_ATTRIBUTES_INFO = *mut root::_CERT_KEY_ATTRIBUTES_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_ID {
        pub cCertPolicyElementId: u32,
        pub rgpszCertPolicyElementId: *mut *mut i8,
    }
    pub type CERT_POLICY_ID = root::_CERT_POLICY_ID;
    pub type PCERT_POLICY_ID = *mut root::_CERT_POLICY_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_KEY_USAGE_RESTRICTION_INFO {
        pub cCertPolicyId: u32,
        pub rgCertPolicyId: root::PCERT_POLICY_ID,
        pub RestrictedKeyUsage: root::CRYPT_BIT_BLOB,
    }
    pub type CERT_KEY_USAGE_RESTRICTION_INFO = root::_CERT_KEY_USAGE_RESTRICTION_INFO;
    pub type PCERT_KEY_USAGE_RESTRICTION_INFO = *mut root::_CERT_KEY_USAGE_RESTRICTION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_OTHER_NAME {
        pub pszObjId: *mut i8,
        pub Value: root::CRYPT_OBJID_BLOB,
    }
    pub type CERT_OTHER_NAME = root::_CERT_OTHER_NAME;
    pub type PCERT_OTHER_NAME = *mut root::_CERT_OTHER_NAME;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_ALT_NAME_ENTRY {
        pub dwAltNameChoice: u32,
        pub __bindgen_anon_1: root::_CERT_ALT_NAME_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_ALT_NAME_ENTRY__bindgen_ty_1 {
        pub pOtherName: root::PCERT_OTHER_NAME,
        pub pwszRfc822Name: root::LPWSTR,
        pub pwszDNSName: root::LPWSTR,
        pub DirectoryName: root::CERT_NAME_BLOB,
        pub pwszURL: root::LPWSTR,
        pub IPAddress: root::CRYPT_DATA_BLOB,
        pub pszRegisteredID: *mut i8,
    }
    pub type CERT_ALT_NAME_ENTRY = root::_CERT_ALT_NAME_ENTRY;
    pub type PCERT_ALT_NAME_ENTRY = *mut root::_CERT_ALT_NAME_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_ALT_NAME_INFO {
        pub cAltEntry: u32,
        pub rgAltEntry: root::PCERT_ALT_NAME_ENTRY,
    }
    pub type CERT_ALT_NAME_INFO = root::_CERT_ALT_NAME_INFO;
    pub type PCERT_ALT_NAME_INFO = *mut root::_CERT_ALT_NAME_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_BASIC_CONSTRAINTS_INFO {
        pub SubjectType: root::CRYPT_BIT_BLOB,
        pub fPathLenConstraint: root::BOOL,
        pub dwPathLenConstraint: u32,
        pub cSubtreesConstraint: u32,
        pub rgSubtreesConstraint: *mut root::CERT_NAME_BLOB,
    }
    pub type CERT_BASIC_CONSTRAINTS_INFO = root::_CERT_BASIC_CONSTRAINTS_INFO;
    pub type PCERT_BASIC_CONSTRAINTS_INFO = *mut root::_CERT_BASIC_CONSTRAINTS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_BASIC_CONSTRAINTS2_INFO {
        pub fCA: root::BOOL,
        pub fPathLenConstraint: root::BOOL,
        pub dwPathLenConstraint: u32,
    }
    pub type CERT_BASIC_CONSTRAINTS2_INFO = root::_CERT_BASIC_CONSTRAINTS2_INFO;
    pub type PCERT_BASIC_CONSTRAINTS2_INFO = *mut root::_CERT_BASIC_CONSTRAINTS2_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_QUALIFIER_INFO {
        pub pszPolicyQualifierId: *mut i8,
        pub Qualifier: root::CRYPT_OBJID_BLOB,
    }
    pub type CERT_POLICY_QUALIFIER_INFO = root::_CERT_POLICY_QUALIFIER_INFO;
    pub type PCERT_POLICY_QUALIFIER_INFO = *mut root::_CERT_POLICY_QUALIFIER_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_INFO {
        pub pszPolicyIdentifier: *mut i8,
        pub cPolicyQualifier: u32,
        pub rgPolicyQualifier: *mut root::CERT_POLICY_QUALIFIER_INFO,
    }
    pub type CERT_POLICY_INFO = root::_CERT_POLICY_INFO;
    pub type PCERT_POLICY_INFO = *mut root::_CERT_POLICY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICIES_INFO {
        pub cPolicyInfo: u32,
        pub rgPolicyInfo: *mut root::CERT_POLICY_INFO,
    }
    pub type CERT_POLICIES_INFO = root::_CERT_POLICIES_INFO;
    pub type PCERT_POLICIES_INFO = *mut root::_CERT_POLICIES_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
        pub pszOrganization: *mut i8,
        pub cNoticeNumbers: u32,
        pub rgNoticeNumbers: *mut i32,
    }
    pub type CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = root::_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
    pub type PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE =
        *mut root::_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
        pub pNoticeReference: *mut root::CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,
        pub pszDisplayText: root::LPWSTR,
    }
    pub type CERT_POLICY_QUALIFIER_USER_NOTICE = root::_CERT_POLICY_QUALIFIER_USER_NOTICE;
    pub type PCERT_POLICY_QUALIFIER_USER_NOTICE = *mut root::_CERT_POLICY_QUALIFIER_USER_NOTICE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CPS_URLS {
        pub pszURL: root::LPWSTR,
        pub pAlgorithm: *mut root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pDigest: *mut root::CRYPT_DATA_BLOB,
    }
    pub type CPS_URLS = root::_CPS_URLS;
    pub type PCPS_URLS = *mut root::_CPS_URLS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY95_QUALIFIER1 {
        pub pszPracticesReference: root::LPWSTR,
        pub pszNoticeIdentifier: *mut i8,
        pub pszNSINoticeIdentifier: *mut i8,
        pub cCPSURLs: u32,
        pub rgCPSURLs: *mut root::CPS_URLS,
    }
    pub type CERT_POLICY95_QUALIFIER1 = root::_CERT_POLICY95_QUALIFIER1;
    pub type PCERT_POLICY95_QUALIFIER1 = *mut root::_CERT_POLICY95_QUALIFIER1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_MAPPING {
        pub pszIssuerDomainPolicy: *mut i8,
        pub pszSubjectDomainPolicy: *mut i8,
    }
    pub type CERT_POLICY_MAPPING = root::_CERT_POLICY_MAPPING;
    pub type PCERT_POLICY_MAPPING = *mut root::_CERT_POLICY_MAPPING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_MAPPINGS_INFO {
        pub cPolicyMapping: u32,
        pub rgPolicyMapping: root::PCERT_POLICY_MAPPING,
    }
    pub type CERT_POLICY_MAPPINGS_INFO = root::_CERT_POLICY_MAPPINGS_INFO;
    pub type PCERT_POLICY_MAPPINGS_INFO = *mut root::_CERT_POLICY_MAPPINGS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_POLICY_CONSTRAINTS_INFO {
        pub fRequireExplicitPolicy: root::BOOL,
        pub dwRequireExplicitPolicySkipCerts: u32,
        pub fInhibitPolicyMapping: root::BOOL,
        pub dwInhibitPolicyMappingSkipCerts: u32,
    }
    pub type CERT_POLICY_CONSTRAINTS_INFO = root::_CERT_POLICY_CONSTRAINTS_INFO;
    pub type PCERT_POLICY_CONSTRAINTS_INFO = *mut root::_CERT_POLICY_CONSTRAINTS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
        pub pszObjId: *mut i8,
        pub cValue: u32,
        pub rgValue: root::PCRYPT_DER_BLOB,
    }
    pub type CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = root::_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
    pub type PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = *mut root::_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CONTENT_INFO {
        pub pszObjId: *mut i8,
        pub Content: root::CRYPT_DER_BLOB,
    }
    pub type CRYPT_CONTENT_INFO = root::_CRYPT_CONTENT_INFO;
    pub type PCRYPT_CONTENT_INFO = *mut root::_CRYPT_CONTENT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_SEQUENCE_OF_ANY {
        pub cValue: u32,
        pub rgValue: root::PCRYPT_DER_BLOB,
    }
    pub type CRYPT_SEQUENCE_OF_ANY = root::_CRYPT_SEQUENCE_OF_ANY;
    pub type PCRYPT_SEQUENCE_OF_ANY = *mut root::_CRYPT_SEQUENCE_OF_ANY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_AUTHORITY_KEY_ID2_INFO {
        pub KeyId: root::CRYPT_DATA_BLOB,
        pub AuthorityCertIssuer: root::CERT_ALT_NAME_INFO,
        pub AuthorityCertSerialNumber: root::CRYPT_INTEGER_BLOB,
    }
    pub type CERT_AUTHORITY_KEY_ID2_INFO = root::_CERT_AUTHORITY_KEY_ID2_INFO;
    pub type PCERT_AUTHORITY_KEY_ID2_INFO = *mut root::_CERT_AUTHORITY_KEY_ID2_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_ACCESS_DESCRIPTION {
        pub pszAccessMethod: *mut i8,
        pub AccessLocation: root::CERT_ALT_NAME_ENTRY,
    }
    pub type CERT_ACCESS_DESCRIPTION = root::_CERT_ACCESS_DESCRIPTION;
    pub type PCERT_ACCESS_DESCRIPTION = *mut root::_CERT_ACCESS_DESCRIPTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_AUTHORITY_INFO_ACCESS {
        pub cAccDescr: u32,
        pub rgAccDescr: root::PCERT_ACCESS_DESCRIPTION,
    }
    pub type CERT_AUTHORITY_INFO_ACCESS = root::_CERT_AUTHORITY_INFO_ACCESS;
    pub type PCERT_AUTHORITY_INFO_ACCESS = *mut root::_CERT_AUTHORITY_INFO_ACCESS;
    pub type CERT_SUBJECT_INFO_ACCESS = root::_CERT_AUTHORITY_INFO_ACCESS;
    pub type PCERT_SUBJECT_INFO_ACCESS = *mut root::_CERT_AUTHORITY_INFO_ACCESS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CRL_DIST_POINT_NAME {
        pub dwDistPointNameChoice: u32,
        pub __bindgen_anon_1: root::_CRL_DIST_POINT_NAME__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CRL_DIST_POINT_NAME__bindgen_ty_1 {
        pub FullName: root::CERT_ALT_NAME_INFO,
    }
    pub type CRL_DIST_POINT_NAME = root::_CRL_DIST_POINT_NAME;
    pub type PCRL_DIST_POINT_NAME = *mut root::_CRL_DIST_POINT_NAME;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CRL_DIST_POINT {
        pub DistPointName: root::CRL_DIST_POINT_NAME,
        pub ReasonFlags: root::CRYPT_BIT_BLOB,
        pub CRLIssuer: root::CERT_ALT_NAME_INFO,
    }
    pub type CRL_DIST_POINT = root::_CRL_DIST_POINT;
    pub type PCRL_DIST_POINT = *mut root::_CRL_DIST_POINT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRL_DIST_POINTS_INFO {
        pub cDistPoint: u32,
        pub rgDistPoint: root::PCRL_DIST_POINT,
    }
    pub type CRL_DIST_POINTS_INFO = root::_CRL_DIST_POINTS_INFO;
    pub type PCRL_DIST_POINTS_INFO = *mut root::_CRL_DIST_POINTS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CROSS_CERT_DIST_POINTS_INFO {
        pub dwSyncDeltaTime: u32,
        pub cDistPoint: u32,
        pub rgDistPoint: root::PCERT_ALT_NAME_INFO,
    }
    pub type CROSS_CERT_DIST_POINTS_INFO = root::_CROSS_CERT_DIST_POINTS_INFO;
    pub type PCROSS_CERT_DIST_POINTS_INFO = *mut root::_CROSS_CERT_DIST_POINTS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_PAIR {
        pub Forward: root::CERT_BLOB,
        pub Reverse: root::CERT_BLOB,
    }
    pub type CERT_PAIR = root::_CERT_PAIR;
    pub type PCERT_PAIR = *mut root::_CERT_PAIR;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CRL_ISSUING_DIST_POINT {
        pub DistPointName: root::CRL_DIST_POINT_NAME,
        pub fOnlyContainsUserCerts: root::BOOL,
        pub fOnlyContainsCACerts: root::BOOL,
        pub OnlySomeReasonFlags: root::CRYPT_BIT_BLOB,
        pub fIndirectCRL: root::BOOL,
    }
    pub type CRL_ISSUING_DIST_POINT = root::_CRL_ISSUING_DIST_POINT;
    pub type PCRL_ISSUING_DIST_POINT = *mut root::_CRL_ISSUING_DIST_POINT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_GENERAL_SUBTREE {
        pub Base: root::CERT_ALT_NAME_ENTRY,
        pub dwMinimum: u32,
        pub fMaximum: root::BOOL,
        pub dwMaximum: u32,
    }
    pub type CERT_GENERAL_SUBTREE = root::_CERT_GENERAL_SUBTREE;
    pub type PCERT_GENERAL_SUBTREE = *mut root::_CERT_GENERAL_SUBTREE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_NAME_CONSTRAINTS_INFO {
        pub cPermittedSubtree: u32,
        pub rgPermittedSubtree: root::PCERT_GENERAL_SUBTREE,
        pub cExcludedSubtree: u32,
        pub rgExcludedSubtree: root::PCERT_GENERAL_SUBTREE,
    }
    pub type CERT_NAME_CONSTRAINTS_INFO = root::_CERT_NAME_CONSTRAINTS_INFO;
    pub type PCERT_NAME_CONSTRAINTS_INFO = *mut root::_CERT_NAME_CONSTRAINTS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_DSS_PARAMETERS {
        pub p: root::CRYPT_UINT_BLOB,
        pub q: root::CRYPT_UINT_BLOB,
        pub g: root::CRYPT_UINT_BLOB,
    }
    pub type CERT_DSS_PARAMETERS = root::_CERT_DSS_PARAMETERS;
    pub type PCERT_DSS_PARAMETERS = *mut root::_CERT_DSS_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_DH_PARAMETERS {
        pub p: root::CRYPT_UINT_BLOB,
        pub g: root::CRYPT_UINT_BLOB,
    }
    pub type CERT_DH_PARAMETERS = root::_CERT_DH_PARAMETERS;
    pub type PCERT_DH_PARAMETERS = *mut root::_CERT_DH_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_ECC_SIGNATURE {
        pub r: root::CRYPT_UINT_BLOB,
        pub s: root::CRYPT_UINT_BLOB,
    }
    pub type CERT_ECC_SIGNATURE = root::_CERT_ECC_SIGNATURE;
    pub type PCERT_ECC_SIGNATURE = *mut root::_CERT_ECC_SIGNATURE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_X942_DH_VALIDATION_PARAMS {
        pub seed: root::CRYPT_BIT_BLOB,
        pub pgenCounter: u32,
    }
    pub type CERT_X942_DH_VALIDATION_PARAMS = root::_CERT_X942_DH_VALIDATION_PARAMS;
    pub type PCERT_X942_DH_VALIDATION_PARAMS = *mut root::_CERT_X942_DH_VALIDATION_PARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_X942_DH_PARAMETERS {
        pub p: root::CRYPT_UINT_BLOB,
        pub g: root::CRYPT_UINT_BLOB,
        pub q: root::CRYPT_UINT_BLOB,
        pub j: root::CRYPT_UINT_BLOB,
        pub pValidationParams: root::PCERT_X942_DH_VALIDATION_PARAMS,
    }
    pub type CERT_X942_DH_PARAMETERS = root::_CERT_X942_DH_PARAMETERS;
    pub type PCERT_X942_DH_PARAMETERS = *mut root::_CERT_X942_DH_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_X942_OTHER_INFO {
        pub pszContentEncryptionObjId: *mut i8,
        pub rgbCounter: [u8; 4usize],
        pub rgbKeyLength: [u8; 4usize],
        pub PubInfo: root::CRYPT_DATA_BLOB,
    }
    pub type CRYPT_X942_OTHER_INFO = root::_CRYPT_X942_OTHER_INFO;
    pub type PCRYPT_X942_OTHER_INFO = *mut root::_CRYPT_X942_OTHER_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ECC_CMS_SHARED_INFO {
        pub Algorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EntityUInfo: root::CRYPT_DATA_BLOB,
        pub rgbSuppPubInfo: [u8; 4usize],
    }
    pub type CRYPT_ECC_CMS_SHARED_INFO = root::_CRYPT_ECC_CMS_SHARED_INFO;
    pub type PCRYPT_ECC_CMS_SHARED_INFO = *mut root::_CRYPT_ECC_CMS_SHARED_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_RC2_CBC_PARAMETERS {
        pub dwVersion: u32,
        pub fIV: root::BOOL,
        pub rgbIV: [u8; 8usize],
    }
    pub type CRYPT_RC2_CBC_PARAMETERS = root::_CRYPT_RC2_CBC_PARAMETERS;
    pub type PCRYPT_RC2_CBC_PARAMETERS = *mut root::_CRYPT_RC2_CBC_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_SMIME_CAPABILITY {
        pub pszObjId: *mut i8,
        pub Parameters: root::CRYPT_OBJID_BLOB,
    }
    pub type CRYPT_SMIME_CAPABILITY = root::_CRYPT_SMIME_CAPABILITY;
    pub type PCRYPT_SMIME_CAPABILITY = *mut root::_CRYPT_SMIME_CAPABILITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_SMIME_CAPABILITIES {
        pub cCapability: u32,
        pub rgCapability: root::PCRYPT_SMIME_CAPABILITY,
    }
    pub type CRYPT_SMIME_CAPABILITIES = root::_CRYPT_SMIME_CAPABILITIES;
    pub type PCRYPT_SMIME_CAPABILITIES = *mut root::_CRYPT_SMIME_CAPABILITIES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_QC_STATEMENT {
        pub pszStatementId: *mut i8,
        pub StatementInfo: root::CRYPT_OBJID_BLOB,
    }
    pub type CERT_QC_STATEMENT = root::_CERT_QC_STATEMENT;
    pub type PCERT_QC_STATEMENT = *mut root::_CERT_QC_STATEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_QC_STATEMENTS_EXT_INFO {
        pub cStatement: u32,
        pub rgStatement: root::PCERT_QC_STATEMENT,
    }
    pub type CERT_QC_STATEMENTS_EXT_INFO = root::_CERT_QC_STATEMENTS_EXT_INFO;
    pub type PCERT_QC_STATEMENTS_EXT_INFO = *mut root::_CERT_QC_STATEMENTS_EXT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_MASK_GEN_ALGORITHM {
        pub pszObjId: *mut i8,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
    }
    pub type CRYPT_MASK_GEN_ALGORITHM = root::_CRYPT_MASK_GEN_ALGORITHM;
    pub type PCRYPT_MASK_GEN_ALGORITHM = *mut root::_CRYPT_MASK_GEN_ALGORITHM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub MaskGenAlgorithm: root::CRYPT_MASK_GEN_ALGORITHM,
        pub dwSaltLength: u32,
        pub dwTrailerField: u32,
    }
    pub type CRYPT_RSA_SSA_PSS_PARAMETERS = root::_CRYPT_RSA_SSA_PSS_PARAMETERS;
    pub type PCRYPT_RSA_SSA_PSS_PARAMETERS = *mut root::_CRYPT_RSA_SSA_PSS_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PSOURCE_ALGORITHM {
        pub pszObjId: *mut i8,
        pub EncodingParameters: root::CRYPT_DATA_BLOB,
    }
    pub type CRYPT_PSOURCE_ALGORITHM = root::_CRYPT_PSOURCE_ALGORITHM;
    pub type PCRYPT_PSOURCE_ALGORITHM = *mut root::_CRYPT_PSOURCE_ALGORITHM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_RSAES_OAEP_PARAMETERS {
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub MaskGenAlgorithm: root::CRYPT_MASK_GEN_ALGORITHM,
        pub PSourceAlgorithm: root::CRYPT_PSOURCE_ALGORITHM,
    }
    pub type CRYPT_RSAES_OAEP_PARAMETERS = root::_CRYPT_RSAES_OAEP_PARAMETERS;
    pub type PCRYPT_RSAES_OAEP_PARAMETERS = *mut root::_CRYPT_RSAES_OAEP_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_TAGGED_ATTRIBUTE {
        pub dwBodyPartID: u32,
        pub Attribute: root::CRYPT_ATTRIBUTE,
    }
    pub type CMC_TAGGED_ATTRIBUTE = root::_CMC_TAGGED_ATTRIBUTE;
    pub type PCMC_TAGGED_ATTRIBUTE = *mut root::_CMC_TAGGED_ATTRIBUTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_TAGGED_CERT_REQUEST {
        pub dwBodyPartID: u32,
        pub SignedCertRequest: root::CRYPT_DER_BLOB,
    }
    pub type CMC_TAGGED_CERT_REQUEST = root::_CMC_TAGGED_CERT_REQUEST;
    pub type PCMC_TAGGED_CERT_REQUEST = *mut root::_CMC_TAGGED_CERT_REQUEST;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMC_TAGGED_REQUEST {
        pub dwTaggedRequestChoice: u32,
        pub __bindgen_anon_1: root::_CMC_TAGGED_REQUEST__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMC_TAGGED_REQUEST__bindgen_ty_1 {
        pub pTaggedCertRequest: root::PCMC_TAGGED_CERT_REQUEST,
    }
    pub type CMC_TAGGED_REQUEST = root::_CMC_TAGGED_REQUEST;
    pub type PCMC_TAGGED_REQUEST = *mut root::_CMC_TAGGED_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_TAGGED_CONTENT_INFO {
        pub dwBodyPartID: u32,
        pub EncodedContentInfo: root::CRYPT_DER_BLOB,
    }
    pub type CMC_TAGGED_CONTENT_INFO = root::_CMC_TAGGED_CONTENT_INFO;
    pub type PCMC_TAGGED_CONTENT_INFO = *mut root::_CMC_TAGGED_CONTENT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_TAGGED_OTHER_MSG {
        pub dwBodyPartID: u32,
        pub pszObjId: *mut i8,
        pub Value: root::CRYPT_OBJID_BLOB,
    }
    pub type CMC_TAGGED_OTHER_MSG = root::_CMC_TAGGED_OTHER_MSG;
    pub type PCMC_TAGGED_OTHER_MSG = *mut root::_CMC_TAGGED_OTHER_MSG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_DATA_INFO {
        pub cTaggedAttribute: u32,
        pub rgTaggedAttribute: root::PCMC_TAGGED_ATTRIBUTE,
        pub cTaggedRequest: u32,
        pub rgTaggedRequest: root::PCMC_TAGGED_REQUEST,
        pub cTaggedContentInfo: u32,
        pub rgTaggedContentInfo: root::PCMC_TAGGED_CONTENT_INFO,
        pub cTaggedOtherMsg: u32,
        pub rgTaggedOtherMsg: root::PCMC_TAGGED_OTHER_MSG,
    }
    pub type CMC_DATA_INFO = root::_CMC_DATA_INFO;
    pub type PCMC_DATA_INFO = *mut root::_CMC_DATA_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_RESPONSE_INFO {
        pub cTaggedAttribute: u32,
        pub rgTaggedAttribute: root::PCMC_TAGGED_ATTRIBUTE,
        pub cTaggedContentInfo: u32,
        pub rgTaggedContentInfo: root::PCMC_TAGGED_CONTENT_INFO,
        pub cTaggedOtherMsg: u32,
        pub rgTaggedOtherMsg: root::PCMC_TAGGED_OTHER_MSG,
    }
    pub type CMC_RESPONSE_INFO = root::_CMC_RESPONSE_INFO;
    pub type PCMC_RESPONSE_INFO = *mut root::_CMC_RESPONSE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_PEND_INFO {
        pub PendToken: root::CRYPT_DATA_BLOB,
        pub PendTime: root::FILETIME,
    }
    pub type CMC_PEND_INFO = root::_CMC_PEND_INFO;
    pub type PCMC_PEND_INFO = *mut root::_CMC_PEND_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMC_STATUS_INFO {
        pub dwStatus: u32,
        pub cBodyList: u32,
        pub rgdwBodyList: *mut u32,
        pub pwszStatusString: root::LPWSTR,
        pub dwOtherInfoChoice: u32,
        pub __bindgen_anon_1: root::_CMC_STATUS_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMC_STATUS_INFO__bindgen_ty_1 {
        pub dwFailInfo: u32,
        pub pPendInfo: root::PCMC_PEND_INFO,
    }
    pub type CMC_STATUS_INFO = root::_CMC_STATUS_INFO;
    pub type PCMC_STATUS_INFO = *mut root::_CMC_STATUS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_ADD_EXTENSIONS_INFO {
        pub dwCmcDataReference: u32,
        pub cCertReference: u32,
        pub rgdwCertReference: *mut u32,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CMC_ADD_EXTENSIONS_INFO = root::_CMC_ADD_EXTENSIONS_INFO;
    pub type PCMC_ADD_EXTENSIONS_INFO = *mut root::_CMC_ADD_EXTENSIONS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMC_ADD_ATTRIBUTES_INFO {
        pub dwCmcDataReference: u32,
        pub cCertReference: u32,
        pub rgdwCertReference: *mut u32,
        pub cAttribute: u32,
        pub rgAttribute: root::PCRYPT_ATTRIBUTE,
    }
    pub type CMC_ADD_ATTRIBUTES_INFO = root::_CMC_ADD_ATTRIBUTES_INFO;
    pub type PCMC_ADD_ATTRIBUTES_INFO = *mut root::_CMC_ADD_ATTRIBUTES_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_TEMPLATE_EXT {
        pub pszObjId: *mut i8,
        pub dwMajorVersion: u32,
        pub fMinorVersion: root::BOOL,
        pub dwMinorVersion: u32,
    }
    pub type CERT_TEMPLATE_EXT = root::_CERT_TEMPLATE_EXT;
    pub type PCERT_TEMPLATE_EXT = *mut root::_CERT_TEMPLATE_EXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_HASHED_URL {
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub Hash: root::CRYPT_HASH_BLOB,
        pub pwszUrl: root::LPWSTR,
    }
    pub type CERT_HASHED_URL = root::_CERT_HASHED_URL;
    pub type PCERT_HASHED_URL = *mut root::_CERT_HASHED_URL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_DETAILS {
        pub pwszMimeType: root::LPWSTR,
        pub cHashedUrl: u32,
        pub rgHashedUrl: root::PCERT_HASHED_URL,
    }
    pub type CERT_LOGOTYPE_DETAILS = root::_CERT_LOGOTYPE_DETAILS;
    pub type PCERT_LOGOTYPE_DETAILS = *mut root::_CERT_LOGOTYPE_DETAILS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_REFERENCE {
        pub cHashedUrl: u32,
        pub rgHashedUrl: root::PCERT_HASHED_URL,
    }
    pub type CERT_LOGOTYPE_REFERENCE = root::_CERT_LOGOTYPE_REFERENCE;
    pub type PCERT_LOGOTYPE_REFERENCE = *mut root::_CERT_LOGOTYPE_REFERENCE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_LOGOTYPE_IMAGE_INFO {
        pub dwLogotypeImageInfoChoice: u32,
        pub dwFileSize: u32,
        pub dwXSize: u32,
        pub dwYSize: u32,
        pub dwLogotypeImageResolutionChoice: u32,
        pub __bindgen_anon_1: root::_CERT_LOGOTYPE_IMAGE_INFO__bindgen_ty_1,
        pub pwszLanguage: root::LPWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_LOGOTYPE_IMAGE_INFO__bindgen_ty_1 {
        pub dwNumBits: u32,
        pub dwTableSize: u32,
    }
    pub type CERT_LOGOTYPE_IMAGE_INFO = root::_CERT_LOGOTYPE_IMAGE_INFO;
    pub type PCERT_LOGOTYPE_IMAGE_INFO = *mut root::_CERT_LOGOTYPE_IMAGE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_IMAGE {
        pub LogotypeDetails: root::CERT_LOGOTYPE_DETAILS,
        pub pLogotypeImageInfo: root::PCERT_LOGOTYPE_IMAGE_INFO,
    }
    pub type CERT_LOGOTYPE_IMAGE = root::_CERT_LOGOTYPE_IMAGE;
    pub type PCERT_LOGOTYPE_IMAGE = *mut root::_CERT_LOGOTYPE_IMAGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_AUDIO_INFO {
        pub dwFileSize: u32,
        pub dwPlayTime: u32,
        pub dwChannels: u32,
        pub dwSampleRate: u32,
        pub pwszLanguage: root::LPWSTR,
    }
    pub type CERT_LOGOTYPE_AUDIO_INFO = root::_CERT_LOGOTYPE_AUDIO_INFO;
    pub type PCERT_LOGOTYPE_AUDIO_INFO = *mut root::_CERT_LOGOTYPE_AUDIO_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_AUDIO {
        pub LogotypeDetails: root::CERT_LOGOTYPE_DETAILS,
        pub pLogotypeAudioInfo: root::PCERT_LOGOTYPE_AUDIO_INFO,
    }
    pub type CERT_LOGOTYPE_AUDIO = root::_CERT_LOGOTYPE_AUDIO;
    pub type PCERT_LOGOTYPE_AUDIO = *mut root::_CERT_LOGOTYPE_AUDIO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_DATA {
        pub cLogotypeImage: u32,
        pub rgLogotypeImage: root::PCERT_LOGOTYPE_IMAGE,
        pub cLogotypeAudio: u32,
        pub rgLogotypeAudio: root::PCERT_LOGOTYPE_AUDIO,
    }
    pub type CERT_LOGOTYPE_DATA = root::_CERT_LOGOTYPE_DATA;
    pub type PCERT_LOGOTYPE_DATA = *mut root::_CERT_LOGOTYPE_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_LOGOTYPE_INFO {
        pub dwLogotypeInfoChoice: u32,
        pub __bindgen_anon_1: root::_CERT_LOGOTYPE_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_LOGOTYPE_INFO__bindgen_ty_1 {
        pub pLogotypeDirectInfo: root::PCERT_LOGOTYPE_DATA,
        pub pLogotypeIndirectInfo: root::PCERT_LOGOTYPE_REFERENCE,
    }
    pub type CERT_LOGOTYPE_INFO = root::_CERT_LOGOTYPE_INFO;
    pub type PCERT_LOGOTYPE_INFO = *mut root::_CERT_LOGOTYPE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_OTHER_LOGOTYPE_INFO {
        pub pszObjId: *mut i8,
        pub LogotypeInfo: root::CERT_LOGOTYPE_INFO,
    }
    pub type CERT_OTHER_LOGOTYPE_INFO = root::_CERT_OTHER_LOGOTYPE_INFO;
    pub type PCERT_OTHER_LOGOTYPE_INFO = *mut root::_CERT_OTHER_LOGOTYPE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LOGOTYPE_EXT_INFO {
        pub cCommunityLogo: u32,
        pub rgCommunityLogo: root::PCERT_LOGOTYPE_INFO,
        pub pIssuerLogo: root::PCERT_LOGOTYPE_INFO,
        pub pSubjectLogo: root::PCERT_LOGOTYPE_INFO,
        pub cOtherLogo: u32,
        pub rgOtherLogo: root::PCERT_OTHER_LOGOTYPE_INFO,
    }
    pub type CERT_LOGOTYPE_EXT_INFO = root::_CERT_LOGOTYPE_EXT_INFO;
    pub type PCERT_LOGOTYPE_EXT_INFO = *mut root::_CERT_LOGOTYPE_EXT_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_BIOMETRIC_DATA {
        pub dwTypeOfBiometricDataChoice: u32,
        pub __bindgen_anon_1: root::_CERT_BIOMETRIC_DATA__bindgen_ty_1,
        pub HashedUrl: root::CERT_HASHED_URL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_BIOMETRIC_DATA__bindgen_ty_1 {
        pub dwPredefined: u32,
        pub pszObjId: *mut i8,
    }
    pub type CERT_BIOMETRIC_DATA = root::_CERT_BIOMETRIC_DATA;
    pub type PCERT_BIOMETRIC_DATA = *mut root::_CERT_BIOMETRIC_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_BIOMETRIC_EXT_INFO {
        pub cBiometricData: u32,
        pub rgBiometricData: root::PCERT_BIOMETRIC_DATA,
    }
    pub type CERT_BIOMETRIC_EXT_INFO = root::_CERT_BIOMETRIC_EXT_INFO;
    pub type PCERT_BIOMETRIC_EXT_INFO = *mut root::_CERT_BIOMETRIC_EXT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_SIGNATURE_INFO {
        pub SignatureAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub Signature: root::CRYPT_BIT_BLOB,
        pub cCertEncoded: u32,
        pub rgCertEncoded: root::PCERT_BLOB,
    }
    pub type OCSP_SIGNATURE_INFO = root::_OCSP_SIGNATURE_INFO;
    pub type POCSP_SIGNATURE_INFO = *mut root::_OCSP_SIGNATURE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_SIGNED_REQUEST_INFO {
        pub ToBeSigned: root::CRYPT_DER_BLOB,
        pub pOptionalSignatureInfo: root::POCSP_SIGNATURE_INFO,
    }
    pub type OCSP_SIGNED_REQUEST_INFO = root::_OCSP_SIGNED_REQUEST_INFO;
    pub type POCSP_SIGNED_REQUEST_INFO = *mut root::_OCSP_SIGNED_REQUEST_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_CERT_ID {
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub IssuerNameHash: root::CRYPT_HASH_BLOB,
        pub IssuerKeyHash: root::CRYPT_HASH_BLOB,
        pub SerialNumber: root::CRYPT_INTEGER_BLOB,
    }
    pub type OCSP_CERT_ID = root::_OCSP_CERT_ID;
    pub type POCSP_CERT_ID = *mut root::_OCSP_CERT_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_REQUEST_ENTRY {
        pub CertId: root::OCSP_CERT_ID,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type OCSP_REQUEST_ENTRY = root::_OCSP_REQUEST_ENTRY;
    pub type POCSP_REQUEST_ENTRY = *mut root::_OCSP_REQUEST_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_REQUEST_INFO {
        pub dwVersion: u32,
        pub pRequestorName: root::PCERT_ALT_NAME_ENTRY,
        pub cRequestEntry: u32,
        pub rgRequestEntry: root::POCSP_REQUEST_ENTRY,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type OCSP_REQUEST_INFO = root::_OCSP_REQUEST_INFO;
    pub type POCSP_REQUEST_INFO = *mut root::_OCSP_REQUEST_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_RESPONSE_INFO {
        pub dwStatus: u32,
        pub pszObjId: *mut i8,
        pub Value: root::CRYPT_OBJID_BLOB,
    }
    pub type OCSP_RESPONSE_INFO = root::_OCSP_RESPONSE_INFO;
    pub type POCSP_RESPONSE_INFO = *mut root::_OCSP_RESPONSE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
        pub ToBeSigned: root::CRYPT_DER_BLOB,
        pub SignatureInfo: root::OCSP_SIGNATURE_INFO,
    }
    pub type OCSP_BASIC_SIGNED_RESPONSE_INFO = root::_OCSP_BASIC_SIGNED_RESPONSE_INFO;
    pub type POCSP_BASIC_SIGNED_RESPONSE_INFO = *mut root::_OCSP_BASIC_SIGNED_RESPONSE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OCSP_BASIC_REVOKED_INFO {
        pub RevocationDate: root::FILETIME,
        pub dwCrlReasonCode: u32,
    }
    pub type OCSP_BASIC_REVOKED_INFO = root::_OCSP_BASIC_REVOKED_INFO;
    pub type POCSP_BASIC_REVOKED_INFO = *mut root::_OCSP_BASIC_REVOKED_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _OCSP_BASIC_RESPONSE_ENTRY {
        pub CertId: root::OCSP_CERT_ID,
        pub dwCertStatus: u32,
        pub __bindgen_anon_1: root::_OCSP_BASIC_RESPONSE_ENTRY__bindgen_ty_1,
        pub ThisUpdate: root::FILETIME,
        pub NextUpdate: root::FILETIME,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _OCSP_BASIC_RESPONSE_ENTRY__bindgen_ty_1 {
        pub pRevokedInfo: root::POCSP_BASIC_REVOKED_INFO,
    }
    pub type OCSP_BASIC_RESPONSE_ENTRY = root::_OCSP_BASIC_RESPONSE_ENTRY;
    pub type POCSP_BASIC_RESPONSE_ENTRY = *mut root::_OCSP_BASIC_RESPONSE_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _OCSP_BASIC_RESPONSE_INFO {
        pub dwVersion: u32,
        pub dwResponderIdChoice: u32,
        pub __bindgen_anon_1: root::_OCSP_BASIC_RESPONSE_INFO__bindgen_ty_1,
        pub ProducedAt: root::FILETIME,
        pub cResponseEntry: u32,
        pub rgResponseEntry: root::POCSP_BASIC_RESPONSE_ENTRY,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _OCSP_BASIC_RESPONSE_INFO__bindgen_ty_1 {
        pub ByNameResponderId: root::CERT_NAME_BLOB,
        pub ByKeyResponderId: root::CRYPT_HASH_BLOB,
    }
    pub type OCSP_BASIC_RESPONSE_INFO = root::_OCSP_BASIC_RESPONSE_INFO;
    pub type POCSP_BASIC_RESPONSE_INFO = *mut root::_OCSP_BASIC_RESPONSE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SUPPORTED_ALGORITHM_INFO {
        pub Algorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub IntendedKeyUsage: root::CRYPT_BIT_BLOB,
        pub IntendedCertPolicies: root::CERT_POLICIES_INFO,
    }
    pub type CERT_SUPPORTED_ALGORITHM_INFO = root::_CERT_SUPPORTED_ALGORITHM_INFO;
    pub type PCERT_SUPPORTED_ALGORITHM_INFO = *mut root::_CERT_SUPPORTED_ALGORITHM_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_TPM_SPECIFICATION_INFO {
        pub pwszFamily: root::LPWSTR,
        pub dwLevel: u32,
        pub dwRevision: u32,
    }
    pub type CERT_TPM_SPECIFICATION_INFO = root::_CERT_TPM_SPECIFICATION_INFO;
    pub type PCERT_TPM_SPECIFICATION_INFO = *mut root::_CERT_TPM_SPECIFICATION_INFO;
    pub type HCRYPTOIDFUNCSET = *mut ::std::os::raw::c_void;
    pub type HCRYPTOIDFUNCADDR = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_OID_FUNC_ENTRY {
        pub pszOID: *const i8,
        pub pvFuncAddr: *mut ::std::os::raw::c_void,
    }
    pub type CRYPT_OID_FUNC_ENTRY = root::_CRYPT_OID_FUNC_ENTRY;
    pub type PCRYPT_OID_FUNC_ENTRY = *mut root::_CRYPT_OID_FUNC_ENTRY;
    extern "C" {
        pub fn CryptInstallOIDFunctionAddress(
            hModule: root::HMODULE,
            dwEncodingType: u32,
            pszFuncName: *const i8,
            cFuncEntry: u32,
            rgFuncEntry: *const root::CRYPT_OID_FUNC_ENTRY,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptInitOIDFunctionSet(
            pszFuncName: *const i8,
            dwFlags: u32,
        ) -> root::HCRYPTOIDFUNCSET;
    }
    extern "C" {
        pub fn CryptGetOIDFunctionAddress(
            hFuncSet: root::HCRYPTOIDFUNCSET,
            dwEncodingType: u32,
            pszOID: *const i8,
            dwFlags: u32,
            ppvFuncAddr: *mut *mut ::std::os::raw::c_void,
            phFuncAddr: *mut root::HCRYPTOIDFUNCADDR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetDefaultOIDDllList(
            hFuncSet: root::HCRYPTOIDFUNCSET,
            dwEncodingType: u32,
            pwszDllList: *mut u16,
            pcchDllList: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetDefaultOIDFunctionAddress(
            hFuncSet: root::HCRYPTOIDFUNCSET,
            dwEncodingType: u32,
            pwszDll: root::LPCWSTR,
            dwFlags: u32,
            ppvFuncAddr: *mut *mut ::std::os::raw::c_void,
            phFuncAddr: *mut root::HCRYPTOIDFUNCADDR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptFreeOIDFunctionAddress(
            hFuncAddr: root::HCRYPTOIDFUNCADDR,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptRegisterOIDFunction(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pszOID: *const i8,
            pwszDll: root::LPCWSTR,
            pszOverrideFuncName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUnregisterOIDFunction(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pszOID: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptRegisterDefaultOIDFunction(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            dwIndex: u32,
            pwszDll: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUnregisterDefaultOIDFunction(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pwszDll: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetOIDFunctionValue(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pszOID: *const i8,
            pwszValueName: root::LPCWSTR,
            dwValueType: u32,
            pbValueData: *const u8,
            cbValueData: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetOIDFunctionValue(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pszOID: *const i8,
            pwszValueName: root::LPCWSTR,
            pdwValueType: *mut u32,
            pbValueData: *mut u8,
            pcbValueData: *mut u32,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_ENUM_OID_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pszOID: *const i8,
            cValue: u32,
            rgdwValueType: *const u32,
            rgpwszValueName: *const root::LPCWSTR,
            rgpbValueData: *const *const u8,
            rgcbValueData: *const u32,
            pvArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptEnumOIDFunction(
            dwEncodingType: u32,
            pszFuncName: *const i8,
            pszOID: *const i8,
            dwFlags: u32,
            pvArg: *mut ::std::os::raw::c_void,
            pfnEnumOIDFunc: root::PFN_CRYPT_ENUM_OID_FUNC,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CRYPT_OID_INFO {
        pub cbSize: u32,
        pub pszOID: *const i8,
        pub pwszName: root::LPCWSTR,
        pub dwGroupId: u32,
        pub __bindgen_anon_1: root::_CRYPT_OID_INFO__bindgen_ty_1,
        pub ExtraInfo: root::CRYPT_DATA_BLOB,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CRYPT_OID_INFO__bindgen_ty_1 {
        pub dwValue: u32,
        pub Algid: root::ALG_ID,
        pub dwLength: u32,
    }
    pub type CRYPT_OID_INFO = root::_CRYPT_OID_INFO;
    pub type PCRYPT_OID_INFO = *mut root::_CRYPT_OID_INFO;
    pub type CCRYPT_OID_INFO = root::CRYPT_OID_INFO;
    pub type PCCRYPT_OID_INFO = *const root::CRYPT_OID_INFO;
    extern "C" {
        pub fn CryptFindOIDInfo(
            dwKeyType: u32,
            pvKey: *mut ::std::os::raw::c_void,
            dwGroupId: u32,
        ) -> root::PCCRYPT_OID_INFO;
    }
    extern "C" {
        pub fn CryptRegisterOIDInfo(
            pInfo: root::PCCRYPT_OID_INFO,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUnregisterOIDInfo(pInfo: root::PCCRYPT_OID_INFO) -> root::BOOL;
    }
    pub type PFN_CRYPT_ENUM_OID_INFO = ::std::option::Option<
        unsafe extern "C" fn(
            pInfo: root::PCCRYPT_OID_INFO,
            pvArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptEnumOIDInfo(
            dwGroupId: u32,
            dwFlags: u32,
            pvArg: *mut ::std::os::raw::c_void,
            pfnEnumOIDInfo: root::PFN_CRYPT_ENUM_OID_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptFindLocalizedName(pwszCryptName: root::LPCWSTR) -> root::LPCWSTR;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_STRONG_SIGN_SERIALIZED_INFO {
        pub dwFlags: u32,
        pub pwszCNGSignHashAlgids: root::LPWSTR,
        pub pwszCNGPubKeyMinBitLengths: root::LPWSTR,
    }
    pub type CERT_STRONG_SIGN_SERIALIZED_INFO = root::_CERT_STRONG_SIGN_SERIALIZED_INFO;
    pub type PCERT_STRONG_SIGN_SERIALIZED_INFO = *mut root::_CERT_STRONG_SIGN_SERIALIZED_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_STRONG_SIGN_PARA {
        pub cbSize: u32,
        pub dwInfoChoice: u32,
        pub __bindgen_anon_1: root::_CERT_STRONG_SIGN_PARA__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_STRONG_SIGN_PARA__bindgen_ty_1 {
        pub pvInfo: *mut ::std::os::raw::c_void,
        pub pSerializedInfo: root::PCERT_STRONG_SIGN_SERIALIZED_INFO,
        pub pszOID: *mut i8,
    }
    pub type CERT_STRONG_SIGN_PARA = root::_CERT_STRONG_SIGN_PARA;
    pub type PCERT_STRONG_SIGN_PARA = *mut root::_CERT_STRONG_SIGN_PARA;
    pub type PCCERT_STRONG_SIGN_PARA = *const root::CERT_STRONG_SIGN_PARA;
    pub type HCRYPTMSG = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_ISSUER_SERIAL_NUMBER {
        pub Issuer: root::CERT_NAME_BLOB,
        pub SerialNumber: root::CRYPT_INTEGER_BLOB,
    }
    pub type CERT_ISSUER_SERIAL_NUMBER = root::_CERT_ISSUER_SERIAL_NUMBER;
    pub type PCERT_ISSUER_SERIAL_NUMBER = *mut root::_CERT_ISSUER_SERIAL_NUMBER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_ID {
        pub dwIdChoice: u32,
        pub __bindgen_anon_1: root::_CERT_ID__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_ID__bindgen_ty_1 {
        pub IssuerSerialNumber: root::CERT_ISSUER_SERIAL_NUMBER,
        pub KeyId: root::CRYPT_HASH_BLOB,
        pub HashId: root::CRYPT_HASH_BLOB,
    }
    pub type CERT_ID = root::_CERT_ID;
    pub type PCERT_ID = *mut root::_CERT_ID;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_SIGNER_ENCODE_INFO {
        pub cbSize: u32,
        pub pCertInfo: root::PCERT_INFO,
        pub __bindgen_anon_1: root::_CMSG_SIGNER_ENCODE_INFO__bindgen_ty_1,
        pub dwKeySpec: u32,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvHashAuxInfo: *mut ::std::os::raw::c_void,
        pub cAuthAttr: u32,
        pub rgAuthAttr: root::PCRYPT_ATTRIBUTE,
        pub cUnauthAttr: u32,
        pub rgUnauthAttr: root::PCRYPT_ATTRIBUTE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_SIGNER_ENCODE_INFO__bindgen_ty_1 {
        pub hCryptProv: root::HCRYPTPROV,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
    }
    pub type CMSG_SIGNER_ENCODE_INFO = root::_CMSG_SIGNER_ENCODE_INFO;
    pub type PCMSG_SIGNER_ENCODE_INFO = *mut root::_CMSG_SIGNER_ENCODE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_SIGNED_ENCODE_INFO {
        pub cbSize: u32,
        pub cSigners: u32,
        pub rgSigners: root::PCMSG_SIGNER_ENCODE_INFO,
        pub cCertEncoded: u32,
        pub rgCertEncoded: root::PCERT_BLOB,
        pub cCrlEncoded: u32,
        pub rgCrlEncoded: root::PCRL_BLOB,
    }
    pub type CMSG_SIGNED_ENCODE_INFO = root::_CMSG_SIGNED_ENCODE_INFO;
    pub type PCMSG_SIGNED_ENCODE_INFO = *mut root::_CMSG_SIGNED_ENCODE_INFO;
    pub type CMSG_RECIPIENT_ENCODE_INFO = root::_CMSG_RECIPIENT_ENCODE_INFO;
    pub type PCMSG_RECIPIENT_ENCODE_INFO = *mut root::_CMSG_RECIPIENT_ENCODE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_ENVELOPED_ENCODE_INFO {
        pub cbSize: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub ContentEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvEncryptionAuxInfo: *mut ::std::os::raw::c_void,
        pub cRecipients: u32,
        pub rgpRecipients: *mut root::PCERT_INFO,
    }
    pub type CMSG_ENVELOPED_ENCODE_INFO = root::_CMSG_ENVELOPED_ENCODE_INFO;
    pub type PCMSG_ENVELOPED_ENCODE_INFO = *mut root::_CMSG_ENVELOPED_ENCODE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
        pub cbSize: u32,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvKeyEncryptionAuxInfo: *mut ::std::os::raw::c_void,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub RecipientPublicKey: root::CRYPT_BIT_BLOB,
        pub RecipientId: root::CERT_ID,
    }
    pub type CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = root::_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
    pub type PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO =
        *mut root::_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
        pub cbSize: u32,
        pub RecipientPublicKey: root::CRYPT_BIT_BLOB,
        pub RecipientId: root::CERT_ID,
        pub Date: root::FILETIME,
        pub pOtherAttr: root::PCRYPT_ATTRIBUTE_TYPE_VALUE,
    }
    pub type CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO =
        root::_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
    pub type PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO =
        *mut root::_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
        pub cbSize: u32,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvKeyEncryptionAuxInfo: *mut ::std::os::raw::c_void,
        pub KeyWrapAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvKeyWrapAuxInfo: *mut ::std::os::raw::c_void,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub dwKeySpec: u32,
        pub dwKeyChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__bindgen_ty_1,
        pub UserKeyingMaterial: root::CRYPT_DATA_BLOB,
        pub cRecipientEncryptedKeys: u32,
        pub rgpRecipientEncryptedKeys: *mut root::PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__bindgen_ty_1 {
        pub pEphemeralAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
        pub pSenderId: root::PCERT_ID,
    }
    pub type CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = root::_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
    pub type PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO =
        *mut root::_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
        pub cbSize: u32,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvKeyEncryptionAuxInfo: *mut ::std::os::raw::c_void,
        pub hCryptProv: root::HCRYPTPROV,
        pub dwKeyChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__bindgen_ty_1,
        pub KeyId: root::CRYPT_DATA_BLOB,
        pub Date: root::FILETIME,
        pub pOtherAttr: root::PCRYPT_ATTRIBUTE_TYPE_VALUE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__bindgen_ty_1 {
        pub hKeyEncryptionKey: root::HCRYPTKEY,
        pub pvKeyEncryptionKey: *mut ::std::os::raw::c_void,
    }
    pub type CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = root::_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
    pub type PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO =
        *mut root::_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_RECIPIENT_ENCODE_INFO {
        pub dwRecipientChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_RECIPIENT_ENCODE_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_RECIPIENT_ENCODE_INFO__bindgen_ty_1 {
        pub pKeyTrans: root::PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
        pub pKeyAgree: root::PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
        pub pMailList: root::PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_RC2_AUX_INFO {
        pub cbSize: u32,
        pub dwBitLen: u32,
    }
    pub type CMSG_RC2_AUX_INFO = root::_CMSG_RC2_AUX_INFO;
    pub type PCMSG_RC2_AUX_INFO = *mut root::_CMSG_RC2_AUX_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
        pub cbSize: u32,
        pub dwFlags: u32,
    }
    pub type CMSG_SP3_COMPATIBLE_AUX_INFO = root::_CMSG_SP3_COMPATIBLE_AUX_INFO;
    pub type PCMSG_SP3_COMPATIBLE_AUX_INFO = *mut root::_CMSG_SP3_COMPATIBLE_AUX_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_RC4_AUX_INFO {
        pub cbSize: u32,
        pub dwBitLen: u32,
    }
    pub type CMSG_RC4_AUX_INFO = root::_CMSG_RC4_AUX_INFO;
    pub type PCMSG_RC4_AUX_INFO = *mut root::_CMSG_RC4_AUX_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
        pub cbSize: u32,
        pub SignedInfo: root::CMSG_SIGNED_ENCODE_INFO,
        pub EnvelopedInfo: root::CMSG_ENVELOPED_ENCODE_INFO,
    }
    pub type CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = root::_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
    pub type PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO =
        *mut root::_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_HASHED_ENCODE_INFO {
        pub cbSize: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvHashAuxInfo: *mut ::std::os::raw::c_void,
    }
    pub type CMSG_HASHED_ENCODE_INFO = root::_CMSG_HASHED_ENCODE_INFO;
    pub type PCMSG_HASHED_ENCODE_INFO = *mut root::_CMSG_HASHED_ENCODE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_ENCRYPTED_ENCODE_INFO {
        pub cbSize: u32,
        pub ContentEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvEncryptionAuxInfo: *mut ::std::os::raw::c_void,
    }
    pub type CMSG_ENCRYPTED_ENCODE_INFO = root::_CMSG_ENCRYPTED_ENCODE_INFO;
    pub type PCMSG_ENCRYPTED_ENCODE_INFO = *mut root::_CMSG_ENCRYPTED_ENCODE_INFO;
    pub type PFN_CMSG_STREAM_OUTPUT = ::std::option::Option<
        unsafe extern "C" fn(
            pvArg: *const ::std::os::raw::c_void,
            pbData: *mut u8,
            cbData: u32,
            fFinal: root::BOOL,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_STREAM_INFO {
        pub cbContent: u32,
        pub pfnStreamOutput: root::PFN_CMSG_STREAM_OUTPUT,
        pub pvArg: *mut ::std::os::raw::c_void,
    }
    pub type CMSG_STREAM_INFO = root::_CMSG_STREAM_INFO;
    pub type PCMSG_STREAM_INFO = *mut root::_CMSG_STREAM_INFO;
    extern "C" {
        pub fn CryptMsgOpenToEncode(
            dwMsgEncodingType: u32,
            dwFlags: u32,
            dwMsgType: u32,
            pvMsgEncodeInfo: *const ::std::os::raw::c_void,
            pszInnerContentObjID: *mut i8,
            pStreamInfo: root::PCMSG_STREAM_INFO,
        ) -> root::HCRYPTMSG;
    }
    extern "C" {
        pub fn CryptMsgCalculateEncodedLength(
            dwMsgEncodingType: u32,
            dwFlags: u32,
            dwMsgType: u32,
            pvMsgEncodeInfo: *const ::std::os::raw::c_void,
            pszInnerContentObjID: *mut i8,
            cbData: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CryptMsgOpenToDecode(
            dwMsgEncodingType: u32,
            dwFlags: u32,
            dwMsgType: u32,
            hCryptProv: root::HCRYPTPROV_LEGACY,
            pRecipientInfo: root::PCERT_INFO,
            pStreamInfo: root::PCMSG_STREAM_INFO,
        ) -> root::HCRYPTMSG;
    }
    extern "C" {
        pub fn CryptMsgDuplicate(hCryptMsg: root::HCRYPTMSG) -> root::HCRYPTMSG;
    }
    extern "C" {
        pub fn CryptMsgClose(hCryptMsg: root::HCRYPTMSG) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgUpdate(
            hCryptMsg: root::HCRYPTMSG,
            pbData: *const u8,
            cbData: u32,
            fFinal: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgGetParam(
            hCryptMsg: root::HCRYPTMSG,
            dwParamType: u32,
            dwIndex: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_SIGNER_INFO {
        pub dwVersion: u32,
        pub Issuer: root::CERT_NAME_BLOB,
        pub SerialNumber: root::CRYPT_INTEGER_BLOB,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub HashEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedHash: root::CRYPT_DATA_BLOB,
        pub AuthAttrs: root::CRYPT_ATTRIBUTES,
        pub UnauthAttrs: root::CRYPT_ATTRIBUTES,
    }
    pub type CMSG_SIGNER_INFO = root::_CMSG_SIGNER_INFO;
    pub type PCMSG_SIGNER_INFO = *mut root::_CMSG_SIGNER_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CMS_SIGNER_INFO {
        pub dwVersion: u32,
        pub SignerId: root::CERT_ID,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub HashEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedHash: root::CRYPT_DATA_BLOB,
        pub AuthAttrs: root::CRYPT_ATTRIBUTES,
        pub UnauthAttrs: root::CRYPT_ATTRIBUTES,
    }
    pub type CMSG_CMS_SIGNER_INFO = root::_CMSG_CMS_SIGNER_INFO;
    pub type PCMSG_CMS_SIGNER_INFO = *mut root::_CMSG_CMS_SIGNER_INFO;
    pub type CMSG_ATTR = root::CRYPT_ATTRIBUTES;
    pub type PCMSG_ATTR = *mut root::CRYPT_ATTRIBUTES;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
        pub dwVersion: u32,
        pub RecipientId: root::CERT_ID,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedKey: root::CRYPT_DATA_BLOB,
    }
    pub type CMSG_KEY_TRANS_RECIPIENT_INFO = root::_CMSG_KEY_TRANS_RECIPIENT_INFO;
    pub type PCMSG_KEY_TRANS_RECIPIENT_INFO = *mut root::_CMSG_KEY_TRANS_RECIPIENT_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
        pub RecipientId: root::CERT_ID,
        pub EncryptedKey: root::CRYPT_DATA_BLOB,
        pub Date: root::FILETIME,
        pub pOtherAttr: root::PCRYPT_ATTRIBUTE_TYPE_VALUE,
    }
    pub type CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = root::_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
    pub type PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = *mut root::_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
        pub dwVersion: u32,
        pub dwOriginatorChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_KEY_AGREE_RECIPIENT_INFO__bindgen_ty_1,
        pub UserKeyingMaterial: root::CRYPT_DATA_BLOB,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub cRecipientEncryptedKeys: u32,
        pub rgpRecipientEncryptedKeys: *mut root::PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_KEY_AGREE_RECIPIENT_INFO__bindgen_ty_1 {
        pub OriginatorCertId: root::CERT_ID,
        pub OriginatorPublicKeyInfo: root::CERT_PUBLIC_KEY_INFO,
    }
    pub type CMSG_KEY_AGREE_RECIPIENT_INFO = root::_CMSG_KEY_AGREE_RECIPIENT_INFO;
    pub type PCMSG_KEY_AGREE_RECIPIENT_INFO = *mut root::_CMSG_KEY_AGREE_RECIPIENT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
        pub dwVersion: u32,
        pub KeyId: root::CRYPT_DATA_BLOB,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedKey: root::CRYPT_DATA_BLOB,
        pub Date: root::FILETIME,
        pub pOtherAttr: root::PCRYPT_ATTRIBUTE_TYPE_VALUE,
    }
    pub type CMSG_MAIL_LIST_RECIPIENT_INFO = root::_CMSG_MAIL_LIST_RECIPIENT_INFO;
    pub type PCMSG_MAIL_LIST_RECIPIENT_INFO = *mut root::_CMSG_MAIL_LIST_RECIPIENT_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CMS_RECIPIENT_INFO {
        pub dwRecipientChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_CMS_RECIPIENT_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_CMS_RECIPIENT_INFO__bindgen_ty_1 {
        pub pKeyTrans: root::PCMSG_KEY_TRANS_RECIPIENT_INFO,
        pub pKeyAgree: root::PCMSG_KEY_AGREE_RECIPIENT_INFO,
        pub pMailList: root::PCMSG_MAIL_LIST_RECIPIENT_INFO,
    }
    pub type CMSG_CMS_RECIPIENT_INFO = root::_CMSG_CMS_RECIPIENT_INFO;
    pub type PCMSG_CMS_RECIPIENT_INFO = *mut root::_CMSG_CMS_RECIPIENT_INFO;
    extern "C" {
        pub fn CryptMsgControl(
            hCryptMsg: root::HCRYPTMSG,
            dwFlags: u32,
            dwCtrlType: u32,
            pvCtrlPara: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
        pub cbSize: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub dwSignerIndex: u32,
        pub dwSignerType: u32,
        pub pvSigner: *mut ::std::os::raw::c_void,
    }
    pub type CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = root::_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
    pub type PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = *mut root::_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CTRL_DECRYPT_PARA {
        pub cbSize: u32,
        pub __bindgen_anon_1: root::_CMSG_CTRL_DECRYPT_PARA__bindgen_ty_1,
        pub dwKeySpec: u32,
        pub dwRecipientIndex: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_CTRL_DECRYPT_PARA__bindgen_ty_1 {
        pub hCryptProv: root::HCRYPTPROV,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
    }
    pub type CMSG_CTRL_DECRYPT_PARA = root::_CMSG_CTRL_DECRYPT_PARA;
    pub type PCMSG_CTRL_DECRYPT_PARA = *mut root::_CMSG_CTRL_DECRYPT_PARA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
        pub cbSize: u32,
        pub __bindgen_anon_1: root::_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA__bindgen_ty_1,
        pub dwKeySpec: u32,
        pub pKeyTrans: root::PCMSG_KEY_TRANS_RECIPIENT_INFO,
        pub dwRecipientIndex: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA__bindgen_ty_1 {
        pub hCryptProv: root::HCRYPTPROV,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
    }
    pub type CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = root::_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
    pub type PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = *mut root::_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
        pub cbSize: u32,
        pub __bindgen_anon_1: root::_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA__bindgen_ty_1,
        pub dwKeySpec: u32,
        pub pKeyAgree: root::PCMSG_KEY_AGREE_RECIPIENT_INFO,
        pub dwRecipientIndex: u32,
        pub dwRecipientEncryptedKeyIndex: u32,
        pub OriginatorPublicKey: root::CRYPT_BIT_BLOB,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA__bindgen_ty_1 {
        pub hCryptProv: root::HCRYPTPROV,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
    }
    pub type CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = root::_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
    pub type PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = *mut root::_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
        pub cbSize: u32,
        pub hCryptProv: root::HCRYPTPROV,
        pub pMailList: root::PCMSG_MAIL_LIST_RECIPIENT_INFO,
        pub dwRecipientIndex: u32,
        pub dwKeyChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA__bindgen_ty_1 {
        pub hKeyEncryptionKey: root::HCRYPTKEY,
        pub pvKeyEncryptionKey: *mut ::std::os::raw::c_void,
    }
    pub type CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = root::_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
    pub type PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = *mut root::_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
        pub cbSize: u32,
        pub dwSignerIndex: u32,
        pub blob: root::CRYPT_DATA_BLOB,
    }
    pub type CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = root::_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
    pub type PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA =
        *mut root::_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
        pub cbSize: u32,
        pub dwSignerIndex: u32,
        pub dwUnauthAttrIndex: u32,
    }
    pub type CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = root::_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
    pub type PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA =
        *mut root::_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
    extern "C" {
        pub fn CryptMsgVerifyCountersignatureEncoded(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwEncodingType: u32,
            pbSignerInfo: root::PBYTE,
            cbSignerInfo: u32,
            pbSignerInfoCountersignature: root::PBYTE,
            cbSignerInfoCountersignature: u32,
            pciCountersigner: root::PCERT_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgVerifyCountersignatureEncodedEx(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwEncodingType: u32,
            pbSignerInfo: root::PBYTE,
            cbSignerInfo: u32,
            pbSignerInfoCountersignature: root::PBYTE,
            cbSignerInfoCountersignature: u32,
            dwSignerType: u32,
            pvSigner: *mut ::std::os::raw::c_void,
            dwFlags: u32,
            pvExtra: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgCountersign(
            hCryptMsg: root::HCRYPTMSG,
            dwIndex: u32,
            cCountersigners: u32,
            rgCountersigners: root::PCMSG_SIGNER_ENCODE_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgCountersignEncoded(
            dwEncodingType: u32,
            pbSignerInfo: root::PBYTE,
            cbSignerInfo: u32,
            cCountersigners: u32,
            rgCountersigners: root::PCMSG_SIGNER_ENCODE_INFO,
            pbCountersignature: root::PBYTE,
            pcbCountersignature: root::PDWORD,
        ) -> root::BOOL;
    }
    pub type PFN_CMSG_ALLOC = ::std::option::Option<
        unsafe extern "C" fn(cb: root::size_t) -> *mut ::std::os::raw::c_void,
    >;
    pub type PFN_CMSG_FREE =
        ::std::option::Option<unsafe extern "C" fn(pv: *mut ::std::os::raw::c_void)>;
    pub type PFN_CMSG_GEN_ENCRYPT_KEY = ::std::option::Option<
        unsafe extern "C" fn(
            phCryptProv: *mut root::HCRYPTPROV,
            paiEncrypt: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pvEncryptAuxInfo: root::PVOID,
            pPublicKeyInfo: root::PCERT_PUBLIC_KEY_INFO,
            pfnAlloc: root::PFN_CMSG_ALLOC,
            phEncryptKey: *mut root::HCRYPTKEY,
            ppbEncryptParameters: *mut root::PBYTE,
            pcbEncryptParameters: root::PDWORD,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_EXPORT_ENCRYPT_KEY = ::std::option::Option<
        unsafe extern "C" fn(
            hCryptProv: root::HCRYPTPROV,
            hEncryptKey: root::HCRYPTKEY,
            pPublicKeyInfo: root::PCERT_PUBLIC_KEY_INFO,
            pbData: root::PBYTE,
            pcbData: root::PDWORD,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_IMPORT_ENCRYPT_KEY = ::std::option::Option<
        unsafe extern "C" fn(
            hCryptProv: root::HCRYPTPROV,
            dwKeySpec: u32,
            paiEncrypt: root::PCRYPT_ALGORITHM_IDENTIFIER,
            paiPubKey: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pbEncodedKey: root::PBYTE,
            cbEncodedKey: u32,
            phEncryptKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_CONTENT_ENCRYPT_INFO {
        pub cbSize: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub ContentEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvEncryptionAuxInfo: *mut ::std::os::raw::c_void,
        pub cRecipients: u32,
        pub rgCmsRecipients: root::PCMSG_RECIPIENT_ENCODE_INFO,
        pub pfnAlloc: root::PFN_CMSG_ALLOC,
        pub pfnFree: root::PFN_CMSG_FREE,
        pub dwEncryptFlags: u32,
        pub __bindgen_anon_1: root::_CMSG_CONTENT_ENCRYPT_INFO__bindgen_ty_1,
        pub dwFlags: u32,
        pub fCNG: root::BOOL,
        pub pbCNGContentEncryptKeyObject: *mut u8,
        pub pbContentEncryptKey: *mut u8,
        pub cbContentEncryptKey: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_CONTENT_ENCRYPT_INFO__bindgen_ty_1 {
        pub hContentEncryptKey: root::HCRYPTKEY,
        pub hCNGContentEncryptKey: root::BCRYPT_KEY_HANDLE,
    }
    pub type CMSG_CONTENT_ENCRYPT_INFO = root::_CMSG_CONTENT_ENCRYPT_INFO;
    pub type PCMSG_CONTENT_ENCRYPT_INFO = *mut root::_CMSG_CONTENT_ENCRYPT_INFO;
    pub type PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptInfo: root::PCMSG_CONTENT_ENCRYPT_INFO,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
        pub cbSize: u32,
        pub dwRecipientIndex: u32,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedKey: root::CRYPT_DATA_BLOB,
        pub dwFlags: u32,
    }
    pub type CMSG_KEY_TRANS_ENCRYPT_INFO = root::_CMSG_KEY_TRANS_ENCRYPT_INFO;
    pub type PCMSG_KEY_TRANS_ENCRYPT_INFO = *mut root::_CMSG_KEY_TRANS_ENCRYPT_INFO;
    pub type PFN_CMSG_EXPORT_KEY_TRANS = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptInfo: root::PCMSG_CONTENT_ENCRYPT_INFO,
            pKeyTransEncodeInfo: root::PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
            pKeyTransEncryptInfo: root::PCMSG_KEY_TRANS_ENCRYPT_INFO,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
        pub cbSize: u32,
        pub EncryptedKey: root::CRYPT_DATA_BLOB,
    }
    pub type CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = root::_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
    pub type PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = *mut root::_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
        pub cbSize: u32,
        pub dwRecipientIndex: u32,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub UserKeyingMaterial: root::CRYPT_DATA_BLOB,
        pub dwOriginatorChoice: u32,
        pub __bindgen_anon_1: root::_CMSG_KEY_AGREE_ENCRYPT_INFO__bindgen_ty_1,
        pub cKeyAgreeKeyEncryptInfo: u32,
        pub rgpKeyAgreeKeyEncryptInfo: *mut root::PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO,
        pub dwFlags: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CMSG_KEY_AGREE_ENCRYPT_INFO__bindgen_ty_1 {
        pub OriginatorCertId: root::CERT_ID,
        pub OriginatorPublicKeyInfo: root::CERT_PUBLIC_KEY_INFO,
    }
    pub type CMSG_KEY_AGREE_ENCRYPT_INFO = root::_CMSG_KEY_AGREE_ENCRYPT_INFO;
    pub type PCMSG_KEY_AGREE_ENCRYPT_INFO = *mut root::_CMSG_KEY_AGREE_ENCRYPT_INFO;
    pub type PFN_CMSG_EXPORT_KEY_AGREE = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptInfo: root::PCMSG_CONTENT_ENCRYPT_INFO,
            pKeyAgreeEncodeInfo: root::PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
            pKeyAgreeEncryptInfo: root::PCMSG_KEY_AGREE_ENCRYPT_INFO,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
        pub cbSize: u32,
        pub dwRecipientIndex: u32,
        pub KeyEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub EncryptedKey: root::CRYPT_DATA_BLOB,
        pub dwFlags: u32,
    }
    pub type CMSG_MAIL_LIST_ENCRYPT_INFO = root::_CMSG_MAIL_LIST_ENCRYPT_INFO;
    pub type PCMSG_MAIL_LIST_ENCRYPT_INFO = *mut root::_CMSG_MAIL_LIST_ENCRYPT_INFO;
    pub type PFN_CMSG_EXPORT_MAIL_LIST = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptInfo: root::PCMSG_CONTENT_ENCRYPT_INFO,
            pMailListEncodeInfo: root::PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,
            pMailListEncryptInfo: root::PCMSG_MAIL_LIST_ENCRYPT_INFO,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_IMPORT_KEY_TRANS = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptionAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pKeyTransDecryptPara: root::PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            phContentEncryptKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_IMPORT_KEY_AGREE = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptionAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pKeyAgreeDecryptPara: root::PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            phContentEncryptKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_IMPORT_MAIL_LIST = ::std::option::Option<
        unsafe extern "C" fn(
            pContentEncryptionAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pMailListDecryptPara: root::PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            phContentEncryptKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
        pub cbSize: u32,
        pub ContentEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pfnAlloc: root::PFN_CMSG_ALLOC,
        pub pfnFree: root::PFN_CMSG_FREE,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
        pub pbContentEncryptKey: *mut u8,
        pub cbContentEncryptKey: u32,
        pub hCNGContentEncryptKey: root::BCRYPT_KEY_HANDLE,
        pub pbCNGContentEncryptKeyObject: *mut u8,
    }
    pub type CMSG_CNG_CONTENT_DECRYPT_INFO = root::_CMSG_CNG_CONTENT_DECRYPT_INFO;
    pub type PCMSG_CNG_CONTENT_DECRYPT_INFO = *mut root::_CMSG_CNG_CONTENT_DECRYPT_INFO;
    pub type PFN_CMSG_CNG_IMPORT_KEY_TRANS = ::std::option::Option<
        unsafe extern "C" fn(
            pCNGContentDecryptInfo: root::PCMSG_CNG_CONTENT_DECRYPT_INFO,
            pKeyTransDecryptPara: root::PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_CNG_IMPORT_KEY_AGREE = ::std::option::Option<
        unsafe extern "C" fn(
            pCNGContentDecryptInfo: root::PCMSG_CNG_CONTENT_DECRYPT_INFO,
            pKeyAgreeDecryptPara: root::PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = ::std::option::Option<
        unsafe extern "C" fn(
            pCNGContentDecryptInfo: root::PCMSG_CNG_CONTENT_DECRYPT_INFO,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type HCERTSTORE = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CONTEXT {
        pub dwCertEncodingType: u32,
        pub pbCertEncoded: *mut u8,
        pub cbCertEncoded: u32,
        pub pCertInfo: root::PCERT_INFO,
        pub hCertStore: root::HCERTSTORE,
    }
    pub type CERT_CONTEXT = root::_CERT_CONTEXT;
    pub type PCERT_CONTEXT = *mut root::_CERT_CONTEXT;
    pub type PCCERT_CONTEXT = *const root::CERT_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRL_CONTEXT {
        pub dwCertEncodingType: u32,
        pub pbCrlEncoded: *mut u8,
        pub cbCrlEncoded: u32,
        pub pCrlInfo: root::PCRL_INFO,
        pub hCertStore: root::HCERTSTORE,
    }
    pub type CRL_CONTEXT = root::_CRL_CONTEXT;
    pub type PCRL_CONTEXT = *mut root::_CRL_CONTEXT;
    pub type PCCRL_CONTEXT = *const root::CRL_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_CONTEXT {
        pub dwMsgAndCertEncodingType: u32,
        pub pbCtlEncoded: *mut u8,
        pub cbCtlEncoded: u32,
        pub pCtlInfo: root::PCTL_INFO,
        pub hCertStore: root::HCERTSTORE,
        pub hCryptMsg: root::HCRYPTMSG,
        pub pbCtlContent: *mut u8,
        pub cbCtlContent: u32,
    }
    pub type CTL_CONTEXT = root::_CTL_CONTEXT;
    pub type PCTL_CONTEXT = *mut root::_CTL_CONTEXT;
    pub type PCCTL_CONTEXT = *const root::CTL_CONTEXT;
    pub const CertKeyType_KeyTypeOther: root::CertKeyType = 0;
    pub const CertKeyType_KeyTypeVirtualSmartCard: root::CertKeyType = 1;
    pub const CertKeyType_KeyTypePhysicalSmartCard: root::CertKeyType = 2;
    pub const CertKeyType_KeyTypePassport: root::CertKeyType = 3;
    pub const CertKeyType_KeyTypePassportRemote: root::CertKeyType = 4;
    pub const CertKeyType_KeyTypePassportSmartCard: root::CertKeyType = 5;
    pub const CertKeyType_KeyTypeHardware: root::CertKeyType = 6;
    pub const CertKeyType_KeyTypeSoftware: root::CertKeyType = 7;
    pub const CertKeyType_KeyTypeSelfSigned: root::CertKeyType = 8;
    pub type CertKeyType = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_KEY_PROV_PARAM {
        pub dwParam: u32,
        pub pbData: *mut u8,
        pub cbData: u32,
        pub dwFlags: u32,
    }
    pub type CRYPT_KEY_PROV_PARAM = root::_CRYPT_KEY_PROV_PARAM;
    pub type PCRYPT_KEY_PROV_PARAM = *mut root::_CRYPT_KEY_PROV_PARAM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_KEY_PROV_INFO {
        pub pwszContainerName: root::LPWSTR,
        pub pwszProvName: root::LPWSTR,
        pub dwProvType: u32,
        pub dwFlags: u32,
        pub cProvParam: u32,
        pub rgProvParam: root::PCRYPT_KEY_PROV_PARAM,
        pub dwKeySpec: u32,
    }
    pub type CRYPT_KEY_PROV_INFO = root::_CRYPT_KEY_PROV_INFO;
    pub type PCRYPT_KEY_PROV_INFO = *mut root::_CRYPT_KEY_PROV_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_KEY_CONTEXT {
        pub cbSize: u32,
        pub __bindgen_anon_1: root::_CERT_KEY_CONTEXT__bindgen_ty_1,
        pub dwKeySpec: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_KEY_CONTEXT__bindgen_ty_1 {
        pub hCryptProv: root::HCRYPTPROV,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
    }
    pub type CERT_KEY_CONTEXT = root::_CERT_KEY_CONTEXT;
    pub type PCERT_KEY_CONTEXT = *mut root::_CERT_KEY_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ROOT_INFO_LUID {
        pub LowPart: u32,
        pub HighPart: i32,
    }
    pub type ROOT_INFO_LUID = root::_ROOT_INFO_LUID;
    pub type PROOT_INFO_LUID = *mut root::_ROOT_INFO_LUID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_SMART_CARD_ROOT_INFO {
        pub rgbCardID: [u8; 16usize],
        pub luid: root::ROOT_INFO_LUID,
    }
    pub type CRYPT_SMART_CARD_ROOT_INFO = root::_CRYPT_SMART_CARD_ROOT_INFO;
    pub type PCRYPT_SMART_CARD_ROOT_INFO = *mut root::_CRYPT_SMART_CARD_ROOT_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
        pub __bindgen_anon_1: root::_CERT_SYSTEM_STORE_RELOCATE_PARA__bindgen_ty_1,
        pub __bindgen_anon_2: root::_CERT_SYSTEM_STORE_RELOCATE_PARA__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_SYSTEM_STORE_RELOCATE_PARA__bindgen_ty_1 {
        pub hKeyBase: root::HKEY,
        pub pvBase: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CERT_SYSTEM_STORE_RELOCATE_PARA__bindgen_ty_2 {
        pub pvSystemStore: *mut ::std::os::raw::c_void,
        pub pszSystemStore: *const i8,
        pub pwszSystemStore: root::LPCWSTR,
    }
    pub type CERT_SYSTEM_STORE_RELOCATE_PARA = root::_CERT_SYSTEM_STORE_RELOCATE_PARA;
    pub type PCERT_SYSTEM_STORE_RELOCATE_PARA = *mut root::_CERT_SYSTEM_STORE_RELOCATE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
        pub hKeyBase: root::HKEY,
        pub pwszRegPath: root::LPWSTR,
    }
    pub type CERT_REGISTRY_STORE_CLIENT_GPT_PARA = root::_CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
    pub type PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = *mut root::_CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REGISTRY_STORE_ROAMING_PARA {
        pub hKey: root::HKEY,
        pub pwszStoreDirectory: root::LPWSTR,
    }
    pub type CERT_REGISTRY_STORE_ROAMING_PARA = root::_CERT_REGISTRY_STORE_ROAMING_PARA;
    pub type PCERT_REGISTRY_STORE_ROAMING_PARA = *mut root::_CERT_REGISTRY_STORE_ROAMING_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_LDAP_STORE_OPENED_PARA {
        pub pvLdapSessionHandle: *mut ::std::os::raw::c_void,
        pub pwszLdapUrl: root::LPCWSTR,
    }
    pub type CERT_LDAP_STORE_OPENED_PARA = root::_CERT_LDAP_STORE_OPENED_PARA;
    pub type PCERT_LDAP_STORE_OPENED_PARA = *mut root::_CERT_LDAP_STORE_OPENED_PARA;
    extern "C" {
        pub fn CertOpenStore(
            lpszStoreProvider: *const i8,
            dwEncodingType: u32,
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwFlags: u32,
            pvPara: *const ::std::os::raw::c_void,
        ) -> root::HCERTSTORE;
    }
    pub type HCERTSTOREPROV = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_STORE_PROV_INFO {
        pub cbSize: u32,
        pub cStoreProvFunc: u32,
        pub rgpvStoreProvFunc: *mut *mut ::std::os::raw::c_void,
        pub hStoreProv: root::HCERTSTOREPROV,
        pub dwStoreProvFlags: u32,
        pub hStoreProvFuncAddr2: root::HCRYPTOIDFUNCADDR,
    }
    pub type CERT_STORE_PROV_INFO = root::_CERT_STORE_PROV_INFO;
    pub type PCERT_STORE_PROV_INFO = *mut root::_CERT_STORE_PROV_INFO;
    pub type PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            lpszStoreProvider: *const i8,
            dwEncodingType: u32,
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwFlags: u32,
            pvPara: *const ::std::os::raw::c_void,
            hCertStore: root::HCERTSTORE,
            pStoreProvInfo: root::PCERT_STORE_PROV_INFO,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_CLOSE = ::std::option::Option<
        unsafe extern "C" fn(hStoreProv: root::HCERTSTOREPROV, dwFlags: u32),
    >;
    pub type PFN_CERT_STORE_PROV_READ_CERT = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pStoreCertContext: root::PCCERT_CONTEXT,
            dwFlags: u32,
            ppProvCertContext: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_WRITE_CERT = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCertContext: root::PCCERT_CONTEXT,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_DELETE_CERT = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCertContext: root::PCCERT_CONTEXT,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCertContext: root::PCCERT_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_READ_CRL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pStoreCrlContext: root::PCCRL_CONTEXT,
            dwFlags: u32,
            ppProvCrlContext: *mut root::PCCRL_CONTEXT,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_WRITE_CRL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCrlContext: root::PCCRL_CONTEXT,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_DELETE_CRL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCrlContext: root::PCCRL_CONTEXT,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCrlContext: root::PCCRL_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_READ_CTL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pStoreCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
            ppProvCtlContext: *mut root::PCCTL_CONTEXT,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_WRITE_CTL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_DELETE_CTL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCtlContext: root::PCCTL_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_CONTROL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            dwFlags: u32,
            dwCtrlType: u32,
            pvCtrlPara: *const ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_STORE_PROV_FIND_INFO {
        pub cbSize: u32,
        pub dwMsgAndCertEncodingType: u32,
        pub dwFindFlags: u32,
        pub dwFindType: u32,
        pub pvFindPara: *const ::std::os::raw::c_void,
    }
    pub type CERT_STORE_PROV_FIND_INFO = root::_CERT_STORE_PROV_FIND_INFO;
    pub type PCERT_STORE_PROV_FIND_INFO = *mut root::_CERT_STORE_PROV_FIND_INFO;
    pub type CCERT_STORE_PROV_FIND_INFO = root::CERT_STORE_PROV_FIND_INFO;
    pub type PCCERT_STORE_PROV_FIND_INFO = *const root::CERT_STORE_PROV_FIND_INFO;
    pub type PFN_CERT_STORE_PROV_FIND_CERT = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pFindInfo: root::PCCERT_STORE_PROV_FIND_INFO,
            pPrevCertContext: root::PCCERT_CONTEXT,
            dwFlags: u32,
            ppvStoreProvFindInfo: *mut *mut ::std::os::raw::c_void,
            ppProvCertContext: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_FREE_FIND_CERT = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCertContext: root::PCCERT_CONTEXT,
            pvStoreProvFindInfo: *mut ::std::os::raw::c_void,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCertContext: root::PCCERT_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_FIND_CRL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pFindInfo: root::PCCERT_STORE_PROV_FIND_INFO,
            pPrevCrlContext: root::PCCRL_CONTEXT,
            dwFlags: u32,
            ppvStoreProvFindInfo: *mut *mut ::std::os::raw::c_void,
            ppProvCrlContext: *mut root::PCCRL_CONTEXT,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_FREE_FIND_CRL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCrlContext: root::PCCRL_CONTEXT,
            pvStoreProvFindInfo: *mut ::std::os::raw::c_void,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCrlContext: root::PCCRL_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_FIND_CTL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pFindInfo: root::PCCERT_STORE_PROV_FIND_INFO,
            pPrevCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
            ppvStoreProvFindInfo: *mut *mut ::std::os::raw::c_void,
            ppProvCtlContext: *mut root::PCCTL_CONTEXT,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_FREE_FIND_CTL = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCtlContext: root::PCCTL_CONTEXT,
            pvStoreProvFindInfo: *mut ::std::os::raw::c_void,
            dwFlags: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = ::std::option::Option<
        unsafe extern "C" fn(
            hStoreProv: root::HCERTSTOREPROV,
            pCtlContext: root::PCCTL_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CertDuplicateStore(hCertStore: root::HCERTSTORE) -> root::HCERTSTORE;
    }
    extern "C" {
        pub fn CertSaveStore(
            hCertStore: root::HCERTSTORE,
            dwEncodingType: u32,
            dwSaveAs: u32,
            dwSaveTo: u32,
            pvSaveToPara: *mut ::std::os::raw::c_void,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertCloseStore(hCertStore: root::HCERTSTORE, dwFlags: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetSubjectCertificateFromStore(
            hCertStore: root::HCERTSTORE,
            dwCertEncodingType: u32,
            pCertId: root::PCERT_INFO,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CertEnumCertificatesInStore(
            hCertStore: root::HCERTSTORE,
            pPrevCertContext: root::PCCERT_CONTEXT,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CertFindCertificateInStore(
            hCertStore: root::HCERTSTORE,
            dwCertEncodingType: u32,
            dwFindFlags: u32,
            dwFindType: u32,
            pvFindPara: *const ::std::os::raw::c_void,
            pPrevCertContext: root::PCCERT_CONTEXT,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CertGetIssuerCertificateFromStore(
            hCertStore: root::HCERTSTORE,
            pSubjectContext: root::PCCERT_CONTEXT,
            pPrevIssuerContext: root::PCCERT_CONTEXT,
            pdwFlags: *mut u32,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CertVerifySubjectCertificateContext(
            pSubject: root::PCCERT_CONTEXT,
            pIssuer: root::PCCERT_CONTEXT,
            pdwFlags: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertDuplicateCertificateContext(
            pCertContext: root::PCCERT_CONTEXT,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CertCreateCertificateContext(
            dwCertEncodingType: u32,
            pbCertEncoded: *const u8,
            cbCertEncoded: u32,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CertFreeCertificateContext(pCertContext: root::PCCERT_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSetCertificateContextProperty(
            pCertContext: root::PCCERT_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetCertificateContextProperty(
            pCertContext: root::PCCERT_CONTEXT,
            dwPropId: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertEnumCertificateContextProperties(
            pCertContext: root::PCCERT_CONTEXT,
            dwPropId: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertCreateCTLEntryFromCertificateContextProperties(
            pCertContext: root::PCCERT_CONTEXT,
            cOptAttr: u32,
            rgOptAttr: root::PCRYPT_ATTRIBUTE,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pCtlEntry: root::PCTL_ENTRY,
            pcbCtlEntry: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSetCertificateContextPropertiesFromCTLEntry(
            pCertContext: root::PCCERT_CONTEXT,
            pCtlEntry: root::PCTL_ENTRY,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetCRLFromStore(
            hCertStore: root::HCERTSTORE,
            pIssuerContext: root::PCCERT_CONTEXT,
            pPrevCrlContext: root::PCCRL_CONTEXT,
            pdwFlags: *mut u32,
        ) -> root::PCCRL_CONTEXT;
    }
    extern "C" {
        pub fn CertEnumCRLsInStore(
            hCertStore: root::HCERTSTORE,
            pPrevCrlContext: root::PCCRL_CONTEXT,
        ) -> root::PCCRL_CONTEXT;
    }
    extern "C" {
        pub fn CertFindCRLInStore(
            hCertStore: root::HCERTSTORE,
            dwCertEncodingType: u32,
            dwFindFlags: u32,
            dwFindType: u32,
            pvFindPara: *const ::std::os::raw::c_void,
            pPrevCrlContext: root::PCCRL_CONTEXT,
        ) -> root::PCCRL_CONTEXT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRL_FIND_ISSUED_FOR_PARA {
        pub pSubjectCert: root::PCCERT_CONTEXT,
        pub pIssuerCert: root::PCCERT_CONTEXT,
    }
    pub type CRL_FIND_ISSUED_FOR_PARA = root::_CRL_FIND_ISSUED_FOR_PARA;
    pub type PCRL_FIND_ISSUED_FOR_PARA = *mut root::_CRL_FIND_ISSUED_FOR_PARA;
    extern "C" {
        pub fn CertDuplicateCRLContext(pCrlContext: root::PCCRL_CONTEXT) -> root::PCCRL_CONTEXT;
    }
    extern "C" {
        pub fn CertCreateCRLContext(
            dwCertEncodingType: u32,
            pbCrlEncoded: *const u8,
            cbCrlEncoded: u32,
        ) -> root::PCCRL_CONTEXT;
    }
    extern "C" {
        pub fn CertFreeCRLContext(pCrlContext: root::PCCRL_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSetCRLContextProperty(
            pCrlContext: root::PCCRL_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetCRLContextProperty(
            pCrlContext: root::PCCRL_CONTEXT,
            dwPropId: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertEnumCRLContextProperties(
            pCrlContext: root::PCCRL_CONTEXT,
            dwPropId: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertFindCertificateInCRL(
            pCert: root::PCCERT_CONTEXT,
            pCrlContext: root::PCCRL_CONTEXT,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            ppCrlEntry: *mut root::PCRL_ENTRY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertIsValidCRLForCertificate(
            pCert: root::PCCERT_CONTEXT,
            pCrl: root::PCCRL_CONTEXT,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddEncodedCertificateToStore(
            hCertStore: root::HCERTSTORE,
            dwCertEncodingType: u32,
            pbCertEncoded: *const u8,
            cbCertEncoded: u32,
            dwAddDisposition: u32,
            ppCertContext: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddCertificateContextToStore(
            hCertStore: root::HCERTSTORE,
            pCertContext: root::PCCERT_CONTEXT,
            dwAddDisposition: u32,
            ppStoreContext: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddSerializedElementToStore(
            hCertStore: root::HCERTSTORE,
            pbElement: *const u8,
            cbElement: u32,
            dwAddDisposition: u32,
            dwFlags: u32,
            dwContextTypeFlags: u32,
            pdwContextType: *mut u32,
            ppvContext: *mut *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertDeleteCertificateFromStore(pCertContext: root::PCCERT_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddEncodedCRLToStore(
            hCertStore: root::HCERTSTORE,
            dwCertEncodingType: u32,
            pbCrlEncoded: *const u8,
            cbCrlEncoded: u32,
            dwAddDisposition: u32,
            ppCrlContext: *mut root::PCCRL_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddCRLContextToStore(
            hCertStore: root::HCERTSTORE,
            pCrlContext: root::PCCRL_CONTEXT,
            dwAddDisposition: u32,
            ppStoreContext: *mut root::PCCRL_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertDeleteCRLFromStore(pCrlContext: root::PCCRL_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSerializeCertificateStoreElement(
            pCertContext: root::PCCERT_CONTEXT,
            dwFlags: u32,
            pbElement: *mut u8,
            pcbElement: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSerializeCRLStoreElement(
            pCrlContext: root::PCCRL_CONTEXT,
            dwFlags: u32,
            pbElement: *mut u8,
            pcbElement: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertDuplicateCTLContext(pCtlContext: root::PCCTL_CONTEXT) -> root::PCCTL_CONTEXT;
    }
    extern "C" {
        pub fn CertCreateCTLContext(
            dwMsgAndCertEncodingType: u32,
            pbCtlEncoded: *const u8,
            cbCtlEncoded: u32,
        ) -> root::PCCTL_CONTEXT;
    }
    extern "C" {
        pub fn CertFreeCTLContext(pCtlContext: root::PCCTL_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSetCTLContextProperty(
            pCtlContext: root::PCCTL_CONTEXT,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetCTLContextProperty(
            pCtlContext: root::PCCTL_CONTEXT,
            dwPropId: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertEnumCTLContextProperties(
            pCtlContext: root::PCCTL_CONTEXT,
            dwPropId: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertEnumCTLsInStore(
            hCertStore: root::HCERTSTORE,
            pPrevCtlContext: root::PCCTL_CONTEXT,
        ) -> root::PCCTL_CONTEXT;
    }
    extern "C" {
        pub fn CertFindSubjectInCTL(
            dwEncodingType: u32,
            dwSubjectType: u32,
            pvSubject: *mut ::std::os::raw::c_void,
            pCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
        ) -> root::PCTL_ENTRY;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_ANY_SUBJECT_INFO {
        pub SubjectAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub SubjectIdentifier: root::CRYPT_DATA_BLOB,
    }
    pub type CTL_ANY_SUBJECT_INFO = root::_CTL_ANY_SUBJECT_INFO;
    pub type PCTL_ANY_SUBJECT_INFO = *mut root::_CTL_ANY_SUBJECT_INFO;
    extern "C" {
        pub fn CertFindCTLInStore(
            hCertStore: root::HCERTSTORE,
            dwMsgAndCertEncodingType: u32,
            dwFindFlags: u32,
            dwFindType: u32,
            pvFindPara: *const ::std::os::raw::c_void,
            pPrevCtlContext: root::PCCTL_CONTEXT,
        ) -> root::PCCTL_CONTEXT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_FIND_USAGE_PARA {
        pub cbSize: u32,
        pub SubjectUsage: root::CTL_USAGE,
        pub ListIdentifier: root::CRYPT_DATA_BLOB,
        pub pSigner: root::PCERT_INFO,
    }
    pub type CTL_FIND_USAGE_PARA = root::_CTL_FIND_USAGE_PARA;
    pub type PCTL_FIND_USAGE_PARA = *mut root::_CTL_FIND_USAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_FIND_SUBJECT_PARA {
        pub cbSize: u32,
        pub pUsagePara: root::PCTL_FIND_USAGE_PARA,
        pub dwSubjectType: u32,
        pub pvSubject: *mut ::std::os::raw::c_void,
    }
    pub type CTL_FIND_SUBJECT_PARA = root::_CTL_FIND_SUBJECT_PARA;
    pub type PCTL_FIND_SUBJECT_PARA = *mut root::_CTL_FIND_SUBJECT_PARA;
    extern "C" {
        pub fn CertAddEncodedCTLToStore(
            hCertStore: root::HCERTSTORE,
            dwMsgAndCertEncodingType: u32,
            pbCtlEncoded: *const u8,
            cbCtlEncoded: u32,
            dwAddDisposition: u32,
            ppCtlContext: *mut root::PCCTL_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddCTLContextToStore(
            hCertStore: root::HCERTSTORE,
            pCtlContext: root::PCCTL_CONTEXT,
            dwAddDisposition: u32,
            ppStoreContext: *mut root::PCCTL_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSerializeCTLStoreElement(
            pCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
            pbElement: *mut u8,
            pcbElement: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertDeleteCTLFromStore(pCtlContext: root::PCCTL_CONTEXT) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddCertificateLinkToStore(
            hCertStore: root::HCERTSTORE,
            pCertContext: root::PCCERT_CONTEXT,
            dwAddDisposition: u32,
            ppStoreContext: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddCRLLinkToStore(
            hCertStore: root::HCERTSTORE,
            pCrlContext: root::PCCRL_CONTEXT,
            dwAddDisposition: u32,
            ppStoreContext: *mut root::PCCRL_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddCTLLinkToStore(
            hCertStore: root::HCERTSTORE,
            pCtlContext: root::PCCTL_CONTEXT,
            dwAddDisposition: u32,
            ppStoreContext: *mut root::PCCTL_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddStoreToCollection(
            hCollectionStore: root::HCERTSTORE,
            hSiblingStore: root::HCERTSTORE,
            dwUpdateFlags: u32,
            dwPriority: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertRemoveStoreFromCollection(
            hCollectionStore: root::HCERTSTORE,
            hSiblingStore: root::HCERTSTORE,
        );
    }
    extern "C" {
        pub fn CertControlStore(
            hCertStore: root::HCERTSTORE,
            dwFlags: u32,
            dwCtrlType: u32,
            pvCtrlPara: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSetStoreProperty(
            hCertStore: root::HCERTSTORE,
            dwPropId: u32,
            dwFlags: u32,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetStoreProperty(
            hCertStore: root::HCERTSTORE,
            dwPropId: u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL;
    }
    pub type PFN_CERT_CREATE_CONTEXT_SORT_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            cbTotalEncoded: u32,
            cbRemainEncoded: u32,
            cEntry: u32,
            pvSort: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CREATE_CONTEXT_PARA {
        pub cbSize: u32,
        pub pfnFree: root::PFN_CRYPT_FREE,
        pub pvFree: *mut ::std::os::raw::c_void,
        pub pfnSort: root::PFN_CERT_CREATE_CONTEXT_SORT_FUNC,
        pub pvSort: *mut ::std::os::raw::c_void,
    }
    pub type CERT_CREATE_CONTEXT_PARA = root::_CERT_CREATE_CONTEXT_PARA;
    pub type PCERT_CREATE_CONTEXT_PARA = *mut root::_CERT_CREATE_CONTEXT_PARA;
    extern "C" {
        pub fn CertCreateContext(
            dwContextType: u32,
            dwEncodingType: u32,
            pbEncoded: *const u8,
            cbEncoded: u32,
            dwFlags: u32,
            pCreatePara: root::PCERT_CREATE_CONTEXT_PARA,
        ) -> *const ::std::os::raw::c_void;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SYSTEM_STORE_INFO {
        pub cbSize: u32,
    }
    pub type CERT_SYSTEM_STORE_INFO = root::_CERT_SYSTEM_STORE_INFO;
    pub type PCERT_SYSTEM_STORE_INFO = *mut root::_CERT_SYSTEM_STORE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_PHYSICAL_STORE_INFO {
        pub cbSize: u32,
        pub pszOpenStoreProvider: *mut i8,
        pub dwOpenEncodingType: u32,
        pub dwOpenFlags: u32,
        pub OpenParameters: root::CRYPT_DATA_BLOB,
        pub dwFlags: u32,
        pub dwPriority: u32,
    }
    pub type CERT_PHYSICAL_STORE_INFO = root::_CERT_PHYSICAL_STORE_INFO;
    pub type PCERT_PHYSICAL_STORE_INFO = *mut root::_CERT_PHYSICAL_STORE_INFO;
    extern "C" {
        pub fn CertRegisterSystemStore(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pStoreInfo: root::PCERT_SYSTEM_STORE_INFO,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertRegisterPhysicalStore(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pwszStoreName: root::LPCWSTR,
            pStoreInfo: root::PCERT_PHYSICAL_STORE_INFO,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertUnregisterSystemStore(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertUnregisterPhysicalStore(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pwszStoreName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    pub type PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = ::std::option::Option<
        unsafe extern "C" fn(
            pwszStoreLocation: root::LPCWSTR,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pvArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_ENUM_SYSTEM_STORE = ::std::option::Option<
        unsafe extern "C" fn(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pStoreInfo: root::PCERT_SYSTEM_STORE_INFO,
            pvReserved: *mut ::std::os::raw::c_void,
            pvArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    pub type PFN_CERT_ENUM_PHYSICAL_STORE = ::std::option::Option<
        unsafe extern "C" fn(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pwszStoreName: root::LPCWSTR,
            pStoreInfo: root::PCERT_PHYSICAL_STORE_INFO,
            pvReserved: *mut ::std::os::raw::c_void,
            pvArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CertEnumSystemStoreLocation(
            dwFlags: u32,
            pvArg: *mut ::std::os::raw::c_void,
            pfnEnum: root::PFN_CERT_ENUM_SYSTEM_STORE_LOCATION,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertEnumSystemStore(
            dwFlags: u32,
            pvSystemStoreLocationPara: *mut ::std::os::raw::c_void,
            pvArg: *mut ::std::os::raw::c_void,
            pfnEnum: root::PFN_CERT_ENUM_SYSTEM_STORE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertEnumPhysicalStore(
            pvSystemStore: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pvArg: *mut ::std::os::raw::c_void,
            pfnEnum: root::PFN_CERT_ENUM_PHYSICAL_STORE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetEnhancedKeyUsage(
            pCertContext: root::PCCERT_CONTEXT,
            dwFlags: u32,
            pUsage: root::PCERT_ENHKEY_USAGE,
            pcbUsage: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertSetEnhancedKeyUsage(
            pCertContext: root::PCCERT_CONTEXT,
            pUsage: root::PCERT_ENHKEY_USAGE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddEnhancedKeyUsageIdentifier(
            pCertContext: root::PCCERT_CONTEXT,
            pszUsageIdentifier: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertRemoveEnhancedKeyUsageIdentifier(
            pCertContext: root::PCCERT_CONTEXT,
            pszUsageIdentifier: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetValidUsages(
            cCerts: u32,
            rghCerts: *mut root::PCCERT_CONTEXT,
            cNumOIDs: *mut i32,
            rghOIDs: *mut *mut i8,
            pcbOIDs: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgGetAndVerifySigner(
            hCryptMsg: root::HCRYPTMSG,
            cSignerStore: u32,
            rghSignerStore: *mut root::HCERTSTORE,
            dwFlags: u32,
            ppSigner: *mut root::PCCERT_CONTEXT,
            pdwSignerIndex: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgSignCTL(
            dwMsgEncodingType: u32,
            pbCtlContent: *mut u8,
            cbCtlContent: u32,
            pSignInfo: root::PCMSG_SIGNED_ENCODE_INFO,
            dwFlags: u32,
            pbEncoded: *mut u8,
            pcbEncoded: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMsgEncodeAndSignCTL(
            dwMsgEncodingType: u32,
            pCtlInfo: root::PCTL_INFO,
            pSignInfo: root::PCMSG_SIGNED_ENCODE_INFO,
            dwFlags: u32,
            pbEncoded: *mut u8,
            pcbEncoded: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertFindSubjectInSortedCTL(
            pSubjectIdentifier: root::PCRYPT_DATA_BLOB,
            pCtlContext: root::PCCTL_CONTEXT,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pEncodedAttributes: root::PCRYPT_DER_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertEnumSubjectInSortedCTL(
            pCtlContext: root::PCCTL_CONTEXT,
            ppvNextSubject: *mut *mut ::std::os::raw::c_void,
            pSubjectIdentifier: root::PCRYPT_DER_BLOB,
            pEncodedAttributes: root::PCRYPT_DER_BLOB,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_VERIFY_USAGE_PARA {
        pub cbSize: u32,
        pub ListIdentifier: root::CRYPT_DATA_BLOB,
        pub cCtlStore: u32,
        pub rghCtlStore: *mut root::HCERTSTORE,
        pub cSignerStore: u32,
        pub rghSignerStore: *mut root::HCERTSTORE,
    }
    pub type CTL_VERIFY_USAGE_PARA = root::_CTL_VERIFY_USAGE_PARA;
    pub type PCTL_VERIFY_USAGE_PARA = *mut root::_CTL_VERIFY_USAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_VERIFY_USAGE_STATUS {
        pub cbSize: u32,
        pub dwError: u32,
        pub dwFlags: u32,
        pub ppCtl: *mut root::PCCTL_CONTEXT,
        pub dwCtlEntryIndex: u32,
        pub ppSigner: *mut root::PCCERT_CONTEXT,
        pub dwSignerIndex: u32,
    }
    pub type CTL_VERIFY_USAGE_STATUS = root::_CTL_VERIFY_USAGE_STATUS;
    pub type PCTL_VERIFY_USAGE_STATUS = *mut root::_CTL_VERIFY_USAGE_STATUS;
    extern "C" {
        pub fn CertVerifyCTLUsage(
            dwEncodingType: u32,
            dwSubjectType: u32,
            pvSubject: *mut ::std::os::raw::c_void,
            pSubjectUsage: root::PCTL_USAGE,
            dwFlags: u32,
            pVerifyUsagePara: root::PCTL_VERIFY_USAGE_PARA,
            pVerifyUsageStatus: root::PCTL_VERIFY_USAGE_STATUS,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REVOCATION_CRL_INFO {
        pub cbSize: u32,
        pub pBaseCrlContext: root::PCCRL_CONTEXT,
        pub pDeltaCrlContext: root::PCCRL_CONTEXT,
        pub pCrlEntry: root::PCRL_ENTRY,
        pub fDeltaCrlEntry: root::BOOL,
    }
    pub type CERT_REVOCATION_CRL_INFO = root::_CERT_REVOCATION_CRL_INFO;
    pub type PCERT_REVOCATION_CRL_INFO = *mut root::_CERT_REVOCATION_CRL_INFO;
    pub type CERT_REVOCATION_CHAIN_PARA = root::_CERT_REVOCATION_CHAIN_PARA;
    pub type PCERT_REVOCATION_CHAIN_PARA = *mut root::_CERT_REVOCATION_CHAIN_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REVOCATION_PARA {
        pub cbSize: u32,
        pub pIssuerCert: root::PCCERT_CONTEXT,
        pub cCertStore: u32,
        pub rgCertStore: *mut root::HCERTSTORE,
        pub hCrlStore: root::HCERTSTORE,
        pub pftTimeToUse: root::LPFILETIME,
    }
    pub type CERT_REVOCATION_PARA = root::_CERT_REVOCATION_PARA;
    pub type PCERT_REVOCATION_PARA = *mut root::_CERT_REVOCATION_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REVOCATION_STATUS {
        pub cbSize: u32,
        pub dwIndex: u32,
        pub dwError: u32,
        pub dwReason: u32,
        pub fHasFreshnessTime: root::BOOL,
        pub dwFreshnessTime: u32,
    }
    pub type CERT_REVOCATION_STATUS = root::_CERT_REVOCATION_STATUS;
    pub type PCERT_REVOCATION_STATUS = *mut root::_CERT_REVOCATION_STATUS;
    extern "C" {
        pub fn CertVerifyRevocation(
            dwEncodingType: u32,
            dwRevType: u32,
            cContext: u32,
            rgpvContext: *mut root::PVOID,
            dwFlags: u32,
            pRevPara: root::PCERT_REVOCATION_PARA,
            pRevStatus: root::PCERT_REVOCATION_STATUS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertCompareIntegerBlob(
            pInt1: root::PCRYPT_INTEGER_BLOB,
            pInt2: root::PCRYPT_INTEGER_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertCompareCertificate(
            dwCertEncodingType: u32,
            pCertId1: root::PCERT_INFO,
            pCertId2: root::PCERT_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertCompareCertificateName(
            dwCertEncodingType: u32,
            pCertName1: root::PCERT_NAME_BLOB,
            pCertName2: root::PCERT_NAME_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertIsRDNAttrsInCertificateName(
            dwCertEncodingType: u32,
            dwFlags: u32,
            pCertName: root::PCERT_NAME_BLOB,
            pRDN: root::PCERT_RDN,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertComparePublicKeyInfo(
            dwCertEncodingType: u32,
            pPublicKey1: root::PCERT_PUBLIC_KEY_INFO,
            pPublicKey2: root::PCERT_PUBLIC_KEY_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetPublicKeyLength(
            dwCertEncodingType: u32,
            pPublicKey: root::PCERT_PUBLIC_KEY_INFO,
        ) -> u32;
    }
    extern "C" {
        pub fn CryptVerifyCertificateSignature(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwCertEncodingType: u32,
            pbEncoded: *const u8,
            cbEncoded: u32,
            pPublicKey: root::PCERT_PUBLIC_KEY_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifyCertificateSignatureEx(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwCertEncodingType: u32,
            dwSubjectType: u32,
            pvSubject: *mut ::std::os::raw::c_void,
            dwIssuerType: u32,
            pvIssuer: *mut ::std::os::raw::c_void,
            dwFlags: u32,
            pvExtra: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {
        pub CertSignHashCNGAlgPropData: root::CRYPT_DATA_BLOB,
        pub CertIssuerPubKeyBitLengthPropData: root::CRYPT_DATA_BLOB,
    }
    pub type CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO =
        root::_CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
    pub type PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO =
        *mut root::_CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO {
        pub cCNGHashAlgid: u32,
        pub rgpwszCNGHashAlgid: *mut *const u16,
        pub dwWeakIndex: u32,
    }
    pub type CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = root::_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
    pub type PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO =
        *mut root::_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
    extern "C" {
        pub fn CertIsStrongHashToSign(
            pStrongSignPara: root::PCCERT_STRONG_SIGN_PARA,
            pwszCNGHashAlgid: root::LPCWSTR,
            pSigningCert: root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashToBeSigned(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwCertEncodingType: u32,
            pbEncoded: *const u8,
            cbEncoded: u32,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashCertificate(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            Algid: root::ALG_ID,
            dwFlags: u32,
            pbEncoded: *const u8,
            cbEncoded: u32,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashCertificate2(
            pwszCNGHashAlgid: root::LPCWSTR,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pbEncoded: *const u8,
            cbEncoded: u32,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSignCertificate(
            hCryptProvOrNCryptKey: root::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
            dwKeySpec: u32,
            dwCertEncodingType: u32,
            pbEncodedToBeSigned: *const u8,
            cbEncodedToBeSigned: u32,
            pSignatureAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pvHashAuxInfo: *const ::std::os::raw::c_void,
            pbSignature: *mut u8,
            pcbSignature: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSignAndEncodeCertificate(
            hCryptProvOrNCryptKey: root::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
            dwKeySpec: u32,
            dwCertEncodingType: u32,
            lpszStructType: *const i8,
            pvStructInfo: *const ::std::os::raw::c_void,
            pSignatureAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pvHashAuxInfo: *const ::std::os::raw::c_void,
            pbEncoded: *mut u8,
            pcbEncoded: *mut u32,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            dwCertEncodingType: u32,
            pSignatureAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            ppvDecodedSignPara: *mut *mut ::std::os::raw::c_void,
            ppwszCNGHashAlgid: *mut root::LPWSTR,
        ) -> root::BOOL,
    >;
    pub type PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            hKey: root::NCRYPT_KEY_HANDLE,
            dwCertEncodingType: u32,
            pSignatureAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pvDecodedSignPara: *mut ::std::os::raw::c_void,
            pwszCNGPubKeyAlgid: root::LPCWSTR,
            pwszCNGHashAlgid: root::LPCWSTR,
            pbComputedHash: *mut u8,
            cbComputedHash: u32,
            pbSignature: *mut u8,
            pcbSignature: *mut u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            dwCertEncodingType: u32,
            pPubKeyInfo: root::PCERT_PUBLIC_KEY_INFO,
            pSignatureAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pvDecodedSignPara: *mut ::std::os::raw::c_void,
            pwszCNGPubKeyAlgid: root::LPCWSTR,
            pwszCNGHashAlgid: root::LPCWSTR,
            pbComputedHash: *mut u8,
            cbComputedHash: u32,
            pbSignature: *mut u8,
            cbSignature: u32,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CertVerifyTimeValidity(
            pTimeToVerify: root::LPFILETIME,
            pCertInfo: root::PCERT_INFO,
        ) -> i32;
    }
    extern "C" {
        pub fn CertVerifyCRLTimeValidity(
            pTimeToVerify: root::LPFILETIME,
            pCrlInfo: root::PCRL_INFO,
        ) -> i32;
    }
    extern "C" {
        pub fn CertVerifyValidityNesting(
            pSubjectInfo: root::PCERT_INFO,
            pIssuerInfo: root::PCERT_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertVerifyCRLRevocation(
            dwCertEncodingType: u32,
            pCertId: root::PCERT_INFO,
            cCrlInfo: u32,
            rgpCrlInfo: *mut root::PCRL_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAlgIdToOID(dwAlgId: u32) -> *const i8;
    }
    extern "C" {
        pub fn CertOIDToAlgId(pszObjId: *const i8) -> u32;
    }
    extern "C" {
        pub fn CertFindExtension(
            pszObjId: *const i8,
            cExtensions: u32,
            rgExtensions: *mut root::CERT_EXTENSION,
        ) -> root::PCERT_EXTENSION;
    }
    extern "C" {
        pub fn CertFindAttribute(
            pszObjId: *const i8,
            cAttr: u32,
            rgAttr: *mut root::CRYPT_ATTRIBUTE,
        ) -> root::PCRYPT_ATTRIBUTE;
    }
    extern "C" {
        pub fn CertFindRDNAttr(
            pszObjId: *const i8,
            pName: root::PCERT_NAME_INFO,
        ) -> root::PCERT_RDN_ATTR;
    }
    extern "C" {
        pub fn CertGetIntendedKeyUsage(
            dwCertEncodingType: u32,
            pCertInfo: root::PCERT_INFO,
            pbKeyUsage: *mut u8,
            cbKeyUsage: u32,
        ) -> root::BOOL;
    }
    pub type HCRYPTDEFAULTCONTEXT = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn CryptInstallDefaultContext(
            hCryptProv: root::HCRYPTPROV,
            dwDefaultType: u32,
            pvDefaultPara: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            phDefaultContext: *mut root::HCRYPTDEFAULTCONTEXT,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
        pub cOID: u32,
        pub rgpszOID: *mut *mut i8,
    }
    pub type CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = root::_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
    pub type PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA =
        *mut root::_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
    extern "C" {
        pub fn CryptUninstallDefaultContext(
            hDefaultContext: root::HCRYPTDEFAULTCONTEXT,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptExportPublicKeyInfo(
            hCryptProvOrNCryptKey: root::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
            dwKeySpec: u32,
            dwCertEncodingType: u32,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            pcbInfo: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptExportPublicKeyInfoEx(
            hCryptProvOrNCryptKey: root::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
            dwKeySpec: u32,
            dwCertEncodingType: u32,
            pszPublicKeyObjId: *mut i8,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            pcbInfo: *mut u32,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            hNCryptKey: root::NCRYPT_KEY_HANDLE,
            dwCertEncodingType: u32,
            pszPublicKeyObjId: *mut i8,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            pcbInfo: *mut u32,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptExportPublicKeyInfoFromBCryptKeyHandle(
            hBCryptKey: root::BCRYPT_KEY_HANDLE,
            dwCertEncodingType: u32,
            pszPublicKeyObjId: *mut i8,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            pcbInfo: *mut u32,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            hBCryptKey: root::BCRYPT_KEY_HANDLE,
            dwCertEncodingType: u32,
            pszPublicKeyObjId: *mut i8,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            pcbInfo: *mut u32,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptImportPublicKeyInfo(
            hCryptProv: root::HCRYPTPROV,
            dwCertEncodingType: u32,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            phKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptImportPublicKeyInfoEx(
            hCryptProv: root::HCRYPTPROV,
            dwCertEncodingType: u32,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            aiKeyAlg: root::ALG_ID,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            phKey: *mut root::HCRYPTKEY,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptImportPublicKeyInfoEx2(
            dwCertEncodingType: u32,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            phKey: *mut root::BCRYPT_KEY_HANDLE,
        ) -> root::BOOL;
    }
    pub type PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            dwCertEncodingType: u32,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            phKey: *mut root::BCRYPT_KEY_HANDLE,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptAcquireCertificatePrivateKey(
            pCert: root::PCCERT_CONTEXT,
            dwFlags: u32,
            pvParameters: *mut ::std::os::raw::c_void,
            phCryptProvOrNCryptKey: *mut root::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
            pdwKeySpec: *mut u32,
            pfCallerFreeProvOrNCryptKey: *mut root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptFindCertificateKeyProvInfo(
            pCert: root::PCCERT_CONTEXT,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    pub type PFN_IMPORT_PRIV_KEY_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            hCryptProv: root::HCRYPTPROV,
            pPrivateKeyInfo: *mut root::CRYPT_PRIVATE_KEY_INFO,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptImportPKCS8(
            sPrivateKeyAndParams: root::CRYPT_PKCS8_IMPORT_PARAMS,
            dwFlags: u32,
            phCryptProv: *mut root::HCRYPTPROV,
            pvAuxInfo: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    pub type PFN_EXPORT_PRIV_KEY_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            hCryptProv: root::HCRYPTPROV,
            dwKeySpec: u32,
            pszPrivateKeyObjId: *mut i8,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pPrivateKeyInfo: *mut root::CRYPT_PRIVATE_KEY_INFO,
            pcbPrivateKeyInfo: *mut u32,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptExportPKCS8(
            hCryptProv: root::HCRYPTPROV,
            dwKeySpec: u32,
            pszPrivateKeyObjId: *mut i8,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pbPrivateKeyBlob: *mut u8,
            pcbPrivateKeyBlob: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptExportPKCS8Ex(
            psExportParams: *mut root::CRYPT_PKCS8_EXPORT_PARAMS,
            dwFlags: u32,
            pvAuxInfo: *mut ::std::os::raw::c_void,
            pbPrivateKeyBlob: *mut u8,
            pcbPrivateKeyBlob: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashPublicKeyInfo(
            hCryptProv: root::HCRYPTPROV_LEGACY,
            Algid: root::ALG_ID,
            dwFlags: u32,
            dwCertEncodingType: u32,
            pInfo: root::PCERT_PUBLIC_KEY_INFO,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertRDNValueToStrA(
            dwValueType: u32,
            pValue: root::PCERT_RDN_VALUE_BLOB,
            psz: *mut i8,
            csz: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertRDNValueToStrW(
            dwValueType: u32,
            pValue: root::PCERT_RDN_VALUE_BLOB,
            psz: root::LPWSTR,
            csz: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertNameToStrA(
            dwCertEncodingType: u32,
            pName: root::PCERT_NAME_BLOB,
            dwStrType: u32,
            psz: *mut i8,
            csz: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertNameToStrW(
            dwCertEncodingType: u32,
            pName: root::PCERT_NAME_BLOB,
            dwStrType: u32,
            psz: root::LPWSTR,
            csz: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertStrToNameA(
            dwCertEncodingType: u32,
            pszX500: *const i8,
            dwStrType: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pbEncoded: *mut u8,
            pcbEncoded: *mut u32,
            ppszError: *mut *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertStrToNameW(
            dwCertEncodingType: u32,
            pszX500: root::LPCWSTR,
            dwStrType: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pbEncoded: *mut u8,
            pcbEncoded: *mut u32,
            ppszError: *mut root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertGetNameStringA(
            pCertContext: root::PCCERT_CONTEXT,
            dwType: u32,
            dwFlags: u32,
            pvTypePara: *mut ::std::os::raw::c_void,
            pszNameString: *mut i8,
            cchNameString: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn CertGetNameStringW(
            pCertContext: root::PCCERT_CONTEXT,
            dwType: u32,
            dwFlags: u32,
            pvTypePara: *mut ::std::os::raw::c_void,
            pszNameString: root::LPWSTR,
            cchNameString: u32,
        ) -> u32;
    }
    pub type PFN_CRYPT_GET_SIGNER_CERTIFICATE = ::std::option::Option<
        unsafe extern "C" fn(
            pvGetArg: *mut ::std::os::raw::c_void,
            dwCertEncodingType: u32,
            pSignerId: root::PCERT_INFO,
            hMsgCertStore: root::HCERTSTORE,
        ) -> root::PCCERT_CONTEXT,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_SIGN_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgEncodingType: u32,
        pub pSigningCert: root::PCCERT_CONTEXT,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvHashAuxInfo: *mut ::std::os::raw::c_void,
        pub cMsgCert: u32,
        pub rgpMsgCert: *mut root::PCCERT_CONTEXT,
        pub cMsgCrl: u32,
        pub rgpMsgCrl: *mut root::PCCRL_CONTEXT,
        pub cAuthAttr: u32,
        pub rgAuthAttr: root::PCRYPT_ATTRIBUTE,
        pub cUnauthAttr: u32,
        pub rgUnauthAttr: root::PCRYPT_ATTRIBUTE,
        pub dwFlags: u32,
        pub dwInnerContentType: u32,
    }
    pub type CRYPT_SIGN_MESSAGE_PARA = root::_CRYPT_SIGN_MESSAGE_PARA;
    pub type PCRYPT_SIGN_MESSAGE_PARA = *mut root::_CRYPT_SIGN_MESSAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_VERIFY_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgAndCertEncodingType: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub pfnGetSignerCertificate: root::PFN_CRYPT_GET_SIGNER_CERTIFICATE,
        pub pvGetArg: *mut ::std::os::raw::c_void,
    }
    pub type CRYPT_VERIFY_MESSAGE_PARA = root::_CRYPT_VERIFY_MESSAGE_PARA;
    pub type PCRYPT_VERIFY_MESSAGE_PARA = *mut root::_CRYPT_VERIFY_MESSAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ENCRYPT_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgEncodingType: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub ContentEncryptionAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvEncryptionAuxInfo: *mut ::std::os::raw::c_void,
        pub dwFlags: u32,
        pub dwInnerContentType: u32,
    }
    pub type CRYPT_ENCRYPT_MESSAGE_PARA = root::_CRYPT_ENCRYPT_MESSAGE_PARA;
    pub type PCRYPT_ENCRYPT_MESSAGE_PARA = *mut root::_CRYPT_ENCRYPT_MESSAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_DECRYPT_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgAndCertEncodingType: u32,
        pub cCertStore: u32,
        pub rghCertStore: *mut root::HCERTSTORE,
    }
    pub type CRYPT_DECRYPT_MESSAGE_PARA = root::_CRYPT_DECRYPT_MESSAGE_PARA;
    pub type PCRYPT_DECRYPT_MESSAGE_PARA = *mut root::_CRYPT_DECRYPT_MESSAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_HASH_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgEncodingType: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvHashAuxInfo: *mut ::std::os::raw::c_void,
    }
    pub type CRYPT_HASH_MESSAGE_PARA = root::_CRYPT_HASH_MESSAGE_PARA;
    pub type PCRYPT_HASH_MESSAGE_PARA = *mut root::_CRYPT_HASH_MESSAGE_PARA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgAndCertEncodingType: u32,
        pub __bindgen_anon_1: root::_CRYPT_KEY_SIGN_MESSAGE_PARA__bindgen_ty_1,
        pub dwKeySpec: u32,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub pvHashAuxInfo: *mut ::std::os::raw::c_void,
        pub PubKeyAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CRYPT_KEY_SIGN_MESSAGE_PARA__bindgen_ty_1 {
        pub hCryptProv: root::HCRYPTPROV,
        pub hNCryptKey: root::NCRYPT_KEY_HANDLE,
    }
    pub type CRYPT_KEY_SIGN_MESSAGE_PARA = root::_CRYPT_KEY_SIGN_MESSAGE_PARA;
    pub type PCRYPT_KEY_SIGN_MESSAGE_PARA = *mut root::_CRYPT_KEY_SIGN_MESSAGE_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
        pub cbSize: u32,
        pub dwMsgEncodingType: u32,
        pub hCryptProv: root::HCRYPTPROV_LEGACY,
    }
    pub type CRYPT_KEY_VERIFY_MESSAGE_PARA = root::_CRYPT_KEY_VERIFY_MESSAGE_PARA;
    pub type PCRYPT_KEY_VERIFY_MESSAGE_PARA = *mut root::_CRYPT_KEY_VERIFY_MESSAGE_PARA;
    extern "C" {
        pub fn CryptSignMessage(
            pSignPara: root::PCRYPT_SIGN_MESSAGE_PARA,
            fDetachedSignature: root::BOOL,
            cToBeSigned: u32,
            rgpbToBeSigned: *mut *const u8,
            rgcbToBeSigned: *mut u32,
            pbSignedBlob: *mut u8,
            pcbSignedBlob: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifyMessageSignature(
            pVerifyPara: root::PCRYPT_VERIFY_MESSAGE_PARA,
            dwSignerIndex: u32,
            pbSignedBlob: *const u8,
            cbSignedBlob: u32,
            pbDecoded: *mut u8,
            pcbDecoded: *mut u32,
            ppSignerCert: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetMessageSignerCount(
            dwMsgEncodingType: u32,
            pbSignedBlob: *const u8,
            cbSignedBlob: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn CryptGetMessageCertificates(
            dwMsgAndCertEncodingType: u32,
            hCryptProv: root::HCRYPTPROV_LEGACY,
            dwFlags: u32,
            pbSignedBlob: *const u8,
            cbSignedBlob: u32,
        ) -> root::HCERTSTORE;
    }
    extern "C" {
        pub fn CryptVerifyDetachedMessageSignature(
            pVerifyPara: root::PCRYPT_VERIFY_MESSAGE_PARA,
            dwSignerIndex: u32,
            pbDetachedSignBlob: *const u8,
            cbDetachedSignBlob: u32,
            cToBeSigned: u32,
            rgpbToBeSigned: *mut *const u8,
            rgcbToBeSigned: *mut u32,
            ppSignerCert: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptEncryptMessage(
            pEncryptPara: root::PCRYPT_ENCRYPT_MESSAGE_PARA,
            cRecipientCert: u32,
            rgpRecipientCert: *mut root::PCCERT_CONTEXT,
            pbToBeEncrypted: *const u8,
            cbToBeEncrypted: u32,
            pbEncryptedBlob: *mut u8,
            pcbEncryptedBlob: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDecryptMessage(
            pDecryptPara: root::PCRYPT_DECRYPT_MESSAGE_PARA,
            pbEncryptedBlob: *const u8,
            cbEncryptedBlob: u32,
            pbDecrypted: *mut u8,
            pcbDecrypted: *mut u32,
            ppXchgCert: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSignAndEncryptMessage(
            pSignPara: root::PCRYPT_SIGN_MESSAGE_PARA,
            pEncryptPara: root::PCRYPT_ENCRYPT_MESSAGE_PARA,
            cRecipientCert: u32,
            rgpRecipientCert: *mut root::PCCERT_CONTEXT,
            pbToBeSignedAndEncrypted: *const u8,
            cbToBeSignedAndEncrypted: u32,
            pbSignedAndEncryptedBlob: *mut u8,
            pcbSignedAndEncryptedBlob: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDecryptAndVerifyMessageSignature(
            pDecryptPara: root::PCRYPT_DECRYPT_MESSAGE_PARA,
            pVerifyPara: root::PCRYPT_VERIFY_MESSAGE_PARA,
            dwSignerIndex: u32,
            pbEncryptedBlob: *const u8,
            cbEncryptedBlob: u32,
            pbDecrypted: *mut u8,
            pcbDecrypted: *mut u32,
            ppXchgCert: *mut root::PCCERT_CONTEXT,
            ppSignerCert: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptDecodeMessage(
            dwMsgTypeFlags: u32,
            pDecryptPara: root::PCRYPT_DECRYPT_MESSAGE_PARA,
            pVerifyPara: root::PCRYPT_VERIFY_MESSAGE_PARA,
            dwSignerIndex: u32,
            pbEncodedBlob: *const u8,
            cbEncodedBlob: u32,
            dwPrevInnerContentType: u32,
            pdwMsgType: *mut u32,
            pdwInnerContentType: *mut u32,
            pbDecoded: *mut u8,
            pcbDecoded: *mut u32,
            ppXchgCert: *mut root::PCCERT_CONTEXT,
            ppSignerCert: *mut root::PCCERT_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptHashMessage(
            pHashPara: root::PCRYPT_HASH_MESSAGE_PARA,
            fDetachedHash: root::BOOL,
            cToBeHashed: u32,
            rgpbToBeHashed: *mut *const u8,
            rgcbToBeHashed: *mut u32,
            pbHashedBlob: *mut u8,
            pcbHashedBlob: *mut u32,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifyMessageHash(
            pHashPara: root::PCRYPT_HASH_MESSAGE_PARA,
            pbHashedBlob: *mut u8,
            cbHashedBlob: u32,
            pbToBeHashed: *mut u8,
            pcbToBeHashed: *mut u32,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifyDetachedMessageHash(
            pHashPara: root::PCRYPT_HASH_MESSAGE_PARA,
            pbDetachedHashBlob: *mut u8,
            cbDetachedHashBlob: u32,
            cToBeHashed: u32,
            rgpbToBeHashed: *mut *const u8,
            rgcbToBeHashed: *mut u32,
            pbComputedHash: *mut u8,
            pcbComputedHash: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSignMessageWithKey(
            pSignPara: root::PCRYPT_KEY_SIGN_MESSAGE_PARA,
            pbToBeSigned: *const u8,
            cbToBeSigned: u32,
            pbSignedBlob: *mut u8,
            pcbSignedBlob: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifyMessageSignatureWithKey(
            pVerifyPara: root::PCRYPT_KEY_VERIFY_MESSAGE_PARA,
            pPublicKeyInfo: root::PCERT_PUBLIC_KEY_INFO,
            pbSignedBlob: *const u8,
            cbSignedBlob: u32,
            pbDecoded: *mut u8,
            pcbDecoded: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertOpenSystemStoreA(
            hProv: root::HCRYPTPROV_LEGACY,
            szSubsystemProtocol: *const i8,
        ) -> root::HCERTSTORE;
    }
    extern "C" {
        pub fn CertOpenSystemStoreW(
            hProv: root::HCRYPTPROV_LEGACY,
            szSubsystemProtocol: root::LPCWSTR,
        ) -> root::HCERTSTORE;
    }
    extern "C" {
        pub fn CertAddEncodedCertificateToSystemStoreA(
            szCertStoreName: *const i8,
            pbCertEncoded: *const u8,
            cbCertEncoded: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertAddEncodedCertificateToSystemStoreW(
            szCertStoreName: root::LPCWSTR,
            pbCertEncoded: *const u8,
            cbCertEncoded: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN {
        pub cCerts: u32,
        pub certs: root::PCERT_BLOB,
        pub keyLocatorInfo: root::CRYPT_KEY_PROV_INFO,
    }
    pub type CERT_CHAIN = root::_CERT_CHAIN;
    pub type PCERT_CHAIN = *mut root::_CERT_CHAIN;
    extern "C" {
        pub fn FindCertsByIssuer(
            pCertChains: root::PCERT_CHAIN,
            pcbCertChains: *mut u32,
            pcCertChains: *mut u32,
            pbEncodedIssuerName: *mut u8,
            cbEncodedIssuerName: u32,
            pwszPurpose: root::LPCWSTR,
            dwKeySpec: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CryptQueryObject(
            dwObjectType: u32,
            pvObject: *const ::std::os::raw::c_void,
            dwExpectedContentTypeFlags: u32,
            dwExpectedFormatTypeFlags: u32,
            dwFlags: u32,
            pdwMsgAndCertEncodingType: *mut u32,
            pdwContentType: *mut u32,
            pdwFormatType: *mut u32,
            phCertStore: *mut root::HCERTSTORE,
            phMsg: *mut root::HCRYPTMSG,
            ppvContext: *mut *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptMemAlloc(cbSize: root::ULONG) -> root::LPVOID;
    }
    extern "C" {
        pub fn CryptMemRealloc(pv: root::LPVOID, cbSize: root::ULONG) -> root::LPVOID;
    }
    extern "C" {
        pub fn CryptMemFree(pv: root::LPVOID);
    }
    pub type HCRYPTASYNC = root::HANDLE;
    pub type PHCRYPTASYNC = *mut root::HANDLE;
    pub type PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = ::std::option::Option<
        unsafe extern "C" fn(pszParamOid: *mut i8, pvParam: root::LPVOID),
    >;
    extern "C" {
        pub fn CryptCreateAsyncHandle(
            dwFlags: u32,
            phAsync: root::PHCRYPTASYNC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetAsyncParam(
            hAsync: root::HCRYPTASYNC,
            pszParamOid: *mut i8,
            pvParam: root::LPVOID,
            pfnFree: root::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptGetAsyncParam(
            hAsync: root::HCRYPTASYNC,
            pszParamOid: *mut i8,
            ppvParam: *mut root::LPVOID,
            ppfnFree: *mut root::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptCloseAsyncHandle(hAsync: root::HCRYPTASYNC) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_BLOB_ARRAY {
        pub cBlob: u32,
        pub rgBlob: root::PCRYPT_DATA_BLOB,
    }
    pub type CRYPT_BLOB_ARRAY = root::_CRYPT_BLOB_ARRAY;
    pub type PCRYPT_BLOB_ARRAY = *mut root::_CRYPT_BLOB_ARRAY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_CREDENTIALS {
        pub cbSize: u32,
        pub pszCredentialsOid: *const i8,
        pub pvCredentials: root::LPVOID,
    }
    pub type CRYPT_CREDENTIALS = root::_CRYPT_CREDENTIALS;
    pub type PCRYPT_CREDENTIALS = *mut root::_CRYPT_CREDENTIALS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PASSWORD_CREDENTIALSA {
        pub cbSize: u32,
        pub pszUsername: *mut i8,
        pub pszPassword: *mut i8,
    }
    pub type CRYPT_PASSWORD_CREDENTIALSA = root::_CRYPT_PASSWORD_CREDENTIALSA;
    pub type PCRYPT_PASSWORD_CREDENTIALSA = *mut root::_CRYPT_PASSWORD_CREDENTIALSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PASSWORD_CREDENTIALSW {
        pub cbSize: u32,
        pub pszUsername: root::LPWSTR,
        pub pszPassword: root::LPWSTR,
    }
    pub type CRYPT_PASSWORD_CREDENTIALSW = root::_CRYPT_PASSWORD_CREDENTIALSW;
    pub type PCRYPT_PASSWORD_CREDENTIALSW = *mut root::_CRYPT_PASSWORD_CREDENTIALSW;
    pub type CRYPT_PASSWORD_CREDENTIALS = root::CRYPT_PASSWORD_CREDENTIALSA;
    pub type PCRYPT_PASSWORD_CREDENTIALS = root::PCRYPT_PASSWORD_CREDENTIALSA;
    pub type PFN_FREE_ENCODED_OBJECT_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            pszObjectOid: *const i8,
            pObject: root::PCRYPT_BLOB_ARRAY,
            pvFreeContext: root::LPVOID,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
        pub cbSize: u32,
        pub dwObjectType: u32,
        pub dwError: u32,
        pub dwReserved: u32,
        pub ThisUpdateTime: root::FILETIME,
        pub NextUpdateTime: root::FILETIME,
        pub PublishTime: root::FILETIME,
    }
    pub type CRYPTNET_URL_CACHE_PRE_FETCH_INFO = root::_CRYPTNET_URL_CACHE_PRE_FETCH_INFO;
    pub type PCRYPTNET_URL_CACHE_PRE_FETCH_INFO = *mut root::_CRYPTNET_URL_CACHE_PRE_FETCH_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
        pub cbSize: u32,
        pub dwExemptSeconds: u32,
        pub ExpireTime: root::FILETIME,
    }
    pub type CRYPTNET_URL_CACHE_FLUSH_INFO = root::_CRYPTNET_URL_CACHE_FLUSH_INFO;
    pub type PCRYPTNET_URL_CACHE_FLUSH_INFO = *mut root::_CRYPTNET_URL_CACHE_FLUSH_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
        pub cbSize: u32,
        pub wResponseType: u16,
        pub wResponseFlags: u16,
        pub LastModifiedTime: root::FILETIME,
        pub dwMaxAge: u32,
        pub pwszETag: root::LPCWSTR,
        pub dwProxyId: u32,
    }
    pub type CRYPTNET_URL_CACHE_RESPONSE_INFO = root::_CRYPTNET_URL_CACHE_RESPONSE_INFO;
    pub type PCRYPTNET_URL_CACHE_RESPONSE_INFO = *mut root::_CRYPTNET_URL_CACHE_RESPONSE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_RETRIEVE_AUX_INFO {
        pub cbSize: u32,
        pub pLastSyncTime: *mut root::FILETIME,
        pub dwMaxUrlRetrievalByteCount: u32,
        pub pPreFetchInfo: root::PCRYPTNET_URL_CACHE_PRE_FETCH_INFO,
        pub pFlushInfo: root::PCRYPTNET_URL_CACHE_FLUSH_INFO,
        pub ppResponseInfo: *mut root::PCRYPTNET_URL_CACHE_RESPONSE_INFO,
        pub pwszCacheFileNamePrefix: root::LPWSTR,
        pub pftCacheResync: root::LPFILETIME,
        pub fProxyCacheRetrieval: root::BOOL,
        pub dwHttpStatusCode: u32,
        pub ppwszErrorResponseHeaders: *mut root::LPWSTR,
        pub ppErrorContentBlob: *mut root::PCRYPT_DATA_BLOB,
    }
    pub type CRYPT_RETRIEVE_AUX_INFO = root::_CRYPT_RETRIEVE_AUX_INFO;
    pub type PCRYPT_RETRIEVE_AUX_INFO = *mut root::_CRYPT_RETRIEVE_AUX_INFO;
    extern "C" {
        pub fn CryptRetrieveObjectByUrlA(
            pszUrl: *const i8,
            pszObjectOid: *const i8,
            dwRetrievalFlags: u32,
            dwTimeout: u32,
            ppvObject: *mut root::LPVOID,
            hAsyncRetrieve: root::HCRYPTASYNC,
            pCredentials: root::PCRYPT_CREDENTIALS,
            pvVerify: root::LPVOID,
            pAuxInfo: root::PCRYPT_RETRIEVE_AUX_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptRetrieveObjectByUrlW(
            pszUrl: root::LPCWSTR,
            pszObjectOid: *const i8,
            dwRetrievalFlags: u32,
            dwTimeout: u32,
            ppvObject: *mut root::LPVOID,
            hAsyncRetrieve: root::HCRYPTASYNC,
            pCredentials: root::PCRYPT_CREDENTIALS,
            pvVerify: root::LPVOID,
            pAuxInfo: root::PCRYPT_RETRIEVE_AUX_INFO,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_CANCEL_RETRIEVAL = ::std::option::Option<
        unsafe extern "C" fn(
            dwFlags: u32,
            pvArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptInstallCancelRetrieval(
            pfnCancel: root::PFN_CRYPT_CANCEL_RETRIEVAL,
            pvArg: *const ::std::os::raw::c_void,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUninstallCancelRetrieval(
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptCancelAsyncRetrieval(hAsyncRetrieval: root::HCRYPTASYNC) -> root::BOOL;
    }
    pub type PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            pvCompletion: root::LPVOID,
            dwCompletionCode: u32,
            pszUrl: *const i8,
            pszObjectOid: *mut i8,
            pvObject: root::LPVOID,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
        pub pfnCompletion: root::PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
        pub pvCompletion: root::LPVOID,
    }
    pub type CRYPT_ASYNC_RETRIEVAL_COMPLETION = root::_CRYPT_ASYNC_RETRIEVAL_COMPLETION;
    pub type PCRYPT_ASYNC_RETRIEVAL_COMPLETION = *mut root::_CRYPT_ASYNC_RETRIEVAL_COMPLETION;
    pub type PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = ::std::option::Option<
        unsafe extern "C" fn(hAsyncRetrieve: root::HCRYPTASYNC) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_URL_ARRAY {
        pub cUrl: u32,
        pub rgwszUrl: *mut root::LPWSTR,
    }
    pub type CRYPT_URL_ARRAY = root::_CRYPT_URL_ARRAY;
    pub type PCRYPT_URL_ARRAY = *mut root::_CRYPT_URL_ARRAY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_URL_INFO {
        pub cbSize: u32,
        pub dwSyncDeltaTime: u32,
        pub cGroup: u32,
        pub rgcGroupEntry: *mut u32,
    }
    pub type CRYPT_URL_INFO = root::_CRYPT_URL_INFO;
    pub type PCRYPT_URL_INFO = *mut root::_CRYPT_URL_INFO;
    extern "C" {
        pub fn CryptGetObjectUrl(
            pszUrlOid: *const i8,
            pvPara: root::LPVOID,
            dwFlags: u32,
            pUrlArray: root::PCRYPT_URL_ARRAY,
            pcbUrlArray: *mut u32,
            pUrlInfo: root::PCRYPT_URL_INFO,
            pcbUrlInfo: *mut u32,
            pvReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CRL_CONTEXT_PAIR {
        pub pCertContext: root::PCCERT_CONTEXT,
        pub pCrlContext: root::PCCRL_CONTEXT,
    }
    pub type CERT_CRL_CONTEXT_PAIR = root::_CERT_CRL_CONTEXT_PAIR;
    pub type PCERT_CRL_CONTEXT_PAIR = *mut root::_CERT_CRL_CONTEXT_PAIR;
    pub type PCCERT_CRL_CONTEXT_PAIR = *const root::CERT_CRL_CONTEXT_PAIR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
        pub cbSize: u32,
        pub iDeltaCrlIndicator: i32,
        pub pftCacheResync: root::LPFILETIME,
        pub pLastSyncTime: root::LPFILETIME,
        pub pMaxAgeTime: root::LPFILETIME,
        pub pChainPara: root::PCERT_REVOCATION_CHAIN_PARA,
        pub pDeltaCrlIndicator: root::PCRYPT_INTEGER_BLOB,
    }
    pub type CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = root::_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
    pub type PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO =
        *mut root::_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
    extern "C" {
        pub fn CryptGetTimeValidObject(
            pszTimeValidOid: *const i8,
            pvPara: root::LPVOID,
            pIssuer: root::PCCERT_CONTEXT,
            pftValidFor: root::LPFILETIME,
            dwFlags: u32,
            dwTimeout: u32,
            ppvObject: *mut root::LPVOID,
            pCredentials: root::PCRYPT_CREDENTIALS,
            pExtraInfo: root::PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptFlushTimeValidObject(
            pszFlushTimeValidOid: *const i8,
            pvPara: root::LPVOID,
            pIssuer: root::PCCERT_CONTEXT,
            dwFlags: u32,
            pvReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertCreateSelfSignCertificate(
            hCryptProvOrNCryptKey: root::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
            pSubjectIssuerBlob: root::PCERT_NAME_BLOB,
            dwFlags: u32,
            pKeyProvInfo: root::PCRYPT_KEY_PROV_INFO,
            pSignatureAlgorithm: root::PCRYPT_ALGORITHM_IDENTIFIER,
            pStartTime: root::PSYSTEMTIME,
            pEndTime: root::PSYSTEMTIME,
            pExtensions: root::PCERT_EXTENSIONS,
        ) -> root::PCCERT_CONTEXT;
    }
    extern "C" {
        pub fn CryptGetKeyIdentifierProperty(
            pKeyIdentifier: *const root::CRYPT_HASH_BLOB,
            dwPropId: u32,
            dwFlags: u32,
            pwszComputerName: root::LPCWSTR,
            pvReserved: *mut ::std::os::raw::c_void,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptSetKeyIdentifierProperty(
            pKeyIdentifier: *const root::CRYPT_HASH_BLOB,
            dwPropId: u32,
            dwFlags: u32,
            pwszComputerName: root::LPCWSTR,
            pvReserved: *mut ::std::os::raw::c_void,
            pvData: *const ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_ENUM_KEYID_PROP = ::std::option::Option<
        unsafe extern "C" fn(
            pKeyIdentifier: *const root::CRYPT_HASH_BLOB,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pvArg: *mut ::std::os::raw::c_void,
            cProp: u32,
            rgdwPropId: *mut u32,
            rgpvData: *mut *mut ::std::os::raw::c_void,
            rgcbData: *mut u32,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CryptEnumKeyIdentifierProperties(
            pKeyIdentifier: *const root::CRYPT_HASH_BLOB,
            dwPropId: u32,
            dwFlags: u32,
            pwszComputerName: root::LPCWSTR,
            pvReserved: *mut ::std::os::raw::c_void,
            pvArg: *mut ::std::os::raw::c_void,
            pfnEnum: root::PFN_CRYPT_ENUM_KEYID_PROP,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptCreateKeyIdentifierFromCSP(
            dwCertEncodingType: u32,
            pszPubKeyOID: *const i8,
            pPubKeyStruc: *const root::PUBLICKEYSTRUC,
            cbPubKeyStruc: u32,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            pbHash: *mut u8,
            pcbHash: *mut u32,
        ) -> root::BOOL;
    }
    pub type HCERTCHAINENGINE = root::HANDLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_ENGINE_CONFIG {
        pub cbSize: u32,
        pub hRestrictedRoot: root::HCERTSTORE,
        pub hRestrictedTrust: root::HCERTSTORE,
        pub hRestrictedOther: root::HCERTSTORE,
        pub cAdditionalStore: u32,
        pub rghAdditionalStore: *mut root::HCERTSTORE,
        pub dwFlags: u32,
        pub dwUrlRetrievalTimeout: u32,
        pub MaximumCachedCertificates: u32,
        pub CycleDetectionModulus: u32,
        pub hExclusiveRoot: root::HCERTSTORE,
        pub hExclusiveTrustedPeople: root::HCERTSTORE,
        pub dwExclusiveFlags: u32,
    }
    pub type CERT_CHAIN_ENGINE_CONFIG = root::_CERT_CHAIN_ENGINE_CONFIG;
    pub type PCERT_CHAIN_ENGINE_CONFIG = *mut root::_CERT_CHAIN_ENGINE_CONFIG;
    extern "C" {
        pub fn CertCreateCertificateChainEngine(
            pConfig: root::PCERT_CHAIN_ENGINE_CONFIG,
            phChainEngine: *mut root::HCERTCHAINENGINE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertFreeCertificateChainEngine(hChainEngine: root::HCERTCHAINENGINE);
    }
    extern "C" {
        pub fn CertResyncCertificateChainEngine(hChainEngine: root::HCERTCHAINENGINE)
            -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_TRUST_STATUS {
        pub dwErrorStatus: u32,
        pub dwInfoStatus: u32,
    }
    pub type CERT_TRUST_STATUS = root::_CERT_TRUST_STATUS;
    pub type PCERT_TRUST_STATUS = *mut root::_CERT_TRUST_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REVOCATION_INFO {
        pub cbSize: u32,
        pub dwRevocationResult: u32,
        pub pszRevocationOid: *const i8,
        pub pvOidSpecificInfo: root::LPVOID,
        pub fHasFreshnessTime: root::BOOL,
        pub dwFreshnessTime: u32,
        pub pCrlInfo: root::PCERT_REVOCATION_CRL_INFO,
    }
    pub type CERT_REVOCATION_INFO = root::_CERT_REVOCATION_INFO;
    pub type PCERT_REVOCATION_INFO = *mut root::_CERT_REVOCATION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_TRUST_LIST_INFO {
        pub cbSize: u32,
        pub pCtlEntry: root::PCTL_ENTRY,
        pub pCtlContext: root::PCCTL_CONTEXT,
    }
    pub type CERT_TRUST_LIST_INFO = root::_CERT_TRUST_LIST_INFO;
    pub type PCERT_TRUST_LIST_INFO = *mut root::_CERT_TRUST_LIST_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_ELEMENT {
        pub cbSize: u32,
        pub pCertContext: root::PCCERT_CONTEXT,
        pub TrustStatus: root::CERT_TRUST_STATUS,
        pub pRevocationInfo: root::PCERT_REVOCATION_INFO,
        pub pIssuanceUsage: root::PCERT_ENHKEY_USAGE,
        pub pApplicationUsage: root::PCERT_ENHKEY_USAGE,
        pub pwszExtendedErrorInfo: root::LPCWSTR,
    }
    pub type CERT_CHAIN_ELEMENT = root::_CERT_CHAIN_ELEMENT;
    pub type PCERT_CHAIN_ELEMENT = *mut root::_CERT_CHAIN_ELEMENT;
    pub type PCCERT_CHAIN_ELEMENT = *const root::CERT_CHAIN_ELEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SIMPLE_CHAIN {
        pub cbSize: u32,
        pub TrustStatus: root::CERT_TRUST_STATUS,
        pub cElement: u32,
        pub rgpElement: *mut root::PCERT_CHAIN_ELEMENT,
        pub pTrustListInfo: root::PCERT_TRUST_LIST_INFO,
        pub fHasRevocationFreshnessTime: root::BOOL,
        pub dwRevocationFreshnessTime: u32,
    }
    pub type CERT_SIMPLE_CHAIN = root::_CERT_SIMPLE_CHAIN;
    pub type PCERT_SIMPLE_CHAIN = *mut root::_CERT_SIMPLE_CHAIN;
    pub type PCCERT_SIMPLE_CHAIN = *const root::CERT_SIMPLE_CHAIN;
    pub type CERT_CHAIN_CONTEXT = root::_CERT_CHAIN_CONTEXT;
    pub type PCERT_CHAIN_CONTEXT = *mut root::_CERT_CHAIN_CONTEXT;
    pub type PCCERT_CHAIN_CONTEXT = *const root::CERT_CHAIN_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_CONTEXT {
        pub cbSize: u32,
        pub TrustStatus: root::CERT_TRUST_STATUS,
        pub cChain: u32,
        pub rgpChain: *mut root::PCERT_SIMPLE_CHAIN,
        pub cLowerQualityChainContext: u32,
        pub rgpLowerQualityChainContext: *mut root::PCCERT_CHAIN_CONTEXT,
        pub fHasRevocationFreshnessTime: root::BOOL,
        pub dwRevocationFreshnessTime: u32,
        pub dwCreateFlags: u32,
        pub ChainId: root::GUID,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_USAGE_MATCH {
        pub dwType: u32,
        pub Usage: root::CERT_ENHKEY_USAGE,
    }
    pub type CERT_USAGE_MATCH = root::_CERT_USAGE_MATCH;
    pub type PCERT_USAGE_MATCH = *mut root::_CERT_USAGE_MATCH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CTL_USAGE_MATCH {
        pub dwType: u32,
        pub Usage: root::CTL_USAGE,
    }
    pub type CTL_USAGE_MATCH = root::_CTL_USAGE_MATCH;
    pub type PCTL_USAGE_MATCH = *mut root::_CTL_USAGE_MATCH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_PARA {
        pub cbSize: u32,
        pub RequestedUsage: root::CERT_USAGE_MATCH,
    }
    pub type CERT_CHAIN_PARA = root::_CERT_CHAIN_PARA;
    pub type PCERT_CHAIN_PARA = *mut root::_CERT_CHAIN_PARA;
    extern "C" {
        pub fn CertGetCertificateChain(
            hChainEngine: root::HCERTCHAINENGINE,
            pCertContext: root::PCCERT_CONTEXT,
            pTime: root::LPFILETIME,
            hAdditionalStore: root::HCERTSTORE,
            pChainPara: root::PCERT_CHAIN_PARA,
            dwFlags: u32,
            pvReserved: root::LPVOID,
            ppChainContext: *mut root::PCCERT_CHAIN_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertFreeCertificateChain(pChainContext: root::PCCERT_CHAIN_CONTEXT);
    }
    extern "C" {
        pub fn CertDuplicateCertificateChain(
            pChainContext: root::PCCERT_CHAIN_CONTEXT,
        ) -> root::PCCERT_CHAIN_CONTEXT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_REVOCATION_CHAIN_PARA {
        pub cbSize: u32,
        pub hChainEngine: root::HCERTCHAINENGINE,
        pub hAdditionalStore: root::HCERTSTORE,
        pub dwChainFlags: u32,
        pub dwUrlRetrievalTimeout: u32,
        pub pftCurrentTime: root::LPFILETIME,
        pub pftCacheResync: root::LPFILETIME,
        pub cbMaxUrlRetrievalByteCount: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRL_REVOCATION_INFO {
        pub pCrlEntry: root::PCRL_ENTRY,
        pub pCrlContext: root::PCCRL_CONTEXT,
        pub pCrlIssuerChain: root::PCCERT_CHAIN_CONTEXT,
    }
    pub type CRL_REVOCATION_INFO = root::_CRL_REVOCATION_INFO;
    pub type PCRL_REVOCATION_INFO = *mut root::_CRL_REVOCATION_INFO;
    extern "C" {
        pub fn CertFindChainInStore(
            hCertStore: root::HCERTSTORE,
            dwCertEncodingType: u32,
            dwFindFlags: u32,
            dwFindType: u32,
            pvFindPara: *const ::std::os::raw::c_void,
            pPrevChainContext: root::PCCERT_CHAIN_CONTEXT,
        ) -> root::PCCERT_CHAIN_CONTEXT;
    }
    pub type PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            pCert: root::PCCERT_CONTEXT,
            pvFindArg: *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
        pub cbSize: u32,
        pub pszUsageIdentifier: *const i8,
        pub dwKeySpec: u32,
        pub dwAcquirePrivateKeyFlags: u32,
        pub cIssuer: u32,
        pub rgIssuer: *mut root::CERT_NAME_BLOB,
        pub pfnFindCallback: root::PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
        pub pvFindArg: *mut ::std::os::raw::c_void,
    }
    pub type CERT_CHAIN_FIND_ISSUER_PARA = root::_CERT_CHAIN_FIND_BY_ISSUER_PARA;
    pub type PCERT_CHAIN_FIND_ISSUER_PARA = *mut root::_CERT_CHAIN_FIND_BY_ISSUER_PARA;
    pub type CERT_CHAIN_FIND_BY_ISSUER_PARA = root::_CERT_CHAIN_FIND_BY_ISSUER_PARA;
    pub type PCERT_CHAIN_FIND_BY_ISSUER_PARA = *mut root::_CERT_CHAIN_FIND_BY_ISSUER_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_POLICY_PARA {
        pub cbSize: u32,
        pub dwFlags: u32,
        pub pvExtraPolicyPara: *mut ::std::os::raw::c_void,
    }
    pub type CERT_CHAIN_POLICY_PARA = root::_CERT_CHAIN_POLICY_PARA;
    pub type PCERT_CHAIN_POLICY_PARA = *mut root::_CERT_CHAIN_POLICY_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_CHAIN_POLICY_STATUS {
        pub cbSize: u32,
        pub dwError: u32,
        pub lChainIndex: i32,
        pub lElementIndex: i32,
        pub pvExtraPolicyStatus: *mut ::std::os::raw::c_void,
    }
    pub type CERT_CHAIN_POLICY_STATUS = root::_CERT_CHAIN_POLICY_STATUS;
    pub type PCERT_CHAIN_POLICY_STATUS = *mut root::_CERT_CHAIN_POLICY_STATUS;
    extern "C" {
        pub fn CertVerifyCertificateChainPolicy(
            pszPolicyOID: *const i8,
            pChainContext: root::PCCERT_CHAIN_CONTEXT,
            pPolicyPara: root::PCERT_CHAIN_POLICY_PARA,
            pPolicyStatus: root::PCERT_CHAIN_POLICY_STATUS,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
        pub cbSize: u32,
        pub dwRegPolicySettings: u32,
        pub pSignerInfo: root::PCMSG_SIGNER_INFO,
    }
    pub type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA =
        root::_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
    pub type PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA =
        *mut root::_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
        pub cbSize: u32,
        pub fCommercial: root::BOOL,
    }
    pub type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS =
        root::_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
    pub type PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS =
        *mut root::_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
        pub cbSize: u32,
        pub dwRegPolicySettings: u32,
        pub fCommercial: root::BOOL,
    }
    pub type AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA =
        root::_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
    pub type PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA =
        *mut root::_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _HTTPSPolicyCallbackData {
        pub __bindgen_anon_1: root::_HTTPSPolicyCallbackData__bindgen_ty_1,
        pub dwAuthType: u32,
        pub fdwChecks: u32,
        pub pwszServerName: *mut u16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _HTTPSPolicyCallbackData__bindgen_ty_1 {
        pub cbStruct: u32,
        pub cbSize: u32,
    }
    pub type HTTPSPolicyCallbackData = root::_HTTPSPolicyCallbackData;
    pub type PHTTPSPolicyCallbackData = *mut root::_HTTPSPolicyCallbackData;
    pub type SSL_EXTRA_CERT_CHAIN_POLICY_PARA = root::_HTTPSPolicyCallbackData;
    pub type PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = *mut root::_HTTPSPolicyCallbackData;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
        pub cbSize: u32,
        pub dwRootProgramQualifierFlags: u32,
    }
    pub type EV_EXTRA_CERT_CHAIN_POLICY_PARA = root::_EV_EXTRA_CERT_CHAIN_POLICY_PARA;
    pub type PEV_EXTRA_CERT_CHAIN_POLICY_PARA = *mut root::_EV_EXTRA_CERT_CHAIN_POLICY_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
        pub cbSize: u32,
        pub dwQualifiers: u32,
        pub dwIssuanceUsageIndex: u32,
    }
    pub type EV_EXTRA_CERT_CHAIN_POLICY_STATUS = root::_EV_EXTRA_CERT_CHAIN_POLICY_STATUS;
    pub type PEV_EXTRA_CERT_CHAIN_POLICY_STATUS = *mut root::_EV_EXTRA_CERT_CHAIN_POLICY_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS {
        pub cbSize: u32,
        pub dwErrorLevel: u32,
        pub dwErrorCategory: u32,
        pub dwReserved: u32,
        pub wszErrorText: [u16; 256usize],
    }
    pub type SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = root::_SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
    pub type PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS =
        *mut root::_SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA {
        pub cbSize: u32,
        pub dwReserved: u32,
        pub pwszServerName: root::LPWSTR,
        pub rgpszHpkpValue: [*mut i8; 2usize],
    }
    pub type SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA =
        root::_SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
    pub type PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA =
        *mut root::_SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA {
        pub cbSize: u32,
        pub dwReserved: u32,
        pub pwszServerName: *const u16,
    }
    pub type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA =
        root::_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;
    pub type PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA =
        *mut root::_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS {
        pub cbSize: u32,
        pub lError: i32,
        pub wszErrorText: [u16; 512usize],
    }
    pub type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS =
        root::_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;
    pub type PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS =
        *mut root::_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;
    extern "C" {
        pub fn CryptStringToBinaryA(
            pszString: *const i8,
            cchString: u32,
            dwFlags: u32,
            pbBinary: *mut u8,
            pcbBinary: *mut u32,
            pdwSkip: *mut u32,
            pdwFlags: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptStringToBinaryW(
            pszString: root::LPCWSTR,
            cchString: u32,
            dwFlags: u32,
            pbBinary: *mut u8,
            pcbBinary: *mut u32,
            pdwSkip: *mut u32,
            pdwFlags: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptBinaryToStringA(
            pbBinary: *const u8,
            cbBinary: u32,
            dwFlags: u32,
            pszString: *mut i8,
            pcchString: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptBinaryToStringW(
            pbBinary: *const u8,
            cbBinary: u32,
            dwFlags: u32,
            pszString: root::LPWSTR,
            pcchString: *mut u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_PKCS12_PBE_PARAMS {
        pub iIterations: i32,
        pub cbSalt: root::ULONG,
    }
    pub type CRYPT_PKCS12_PBE_PARAMS = root::_CRYPT_PKCS12_PBE_PARAMS;
    extern "C" {
        pub fn PFXImportCertStore(
            pPFX: *mut root::CRYPT_DATA_BLOB,
            szPassword: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::HCERTSTORE;
    }
    extern "C" {
        pub fn PFXIsPFXBlob(pPFX: *mut root::CRYPT_DATA_BLOB) -> root::BOOL;
    }
    extern "C" {
        pub fn PFXVerifyPassword(
            pPFX: *mut root::CRYPT_DATA_BLOB,
            szPassword: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PFXExportCertStoreEx(
            hStore: root::HCERTSTORE,
            pPFX: *mut root::CRYPT_DATA_BLOB,
            szPassword: root::LPCWSTR,
            pvPara: *mut ::std::os::raw::c_void,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PKCS12_PBES2_EXPORT_PARAMS {
        pub dwSize: u32,
        pub hNcryptDescriptor: root::PVOID,
        pub pwszPbes2Alg: root::LPWSTR,
    }
    pub type PKCS12_PBES2_EXPORT_PARAMS = root::_PKCS12_PBES2_EXPORT_PARAMS;
    pub type PPKCS12_PBES2_EXPORT_PARAMS = *mut root::_PKCS12_PBES2_EXPORT_PARAMS;
    extern "C" {
        pub fn PFXExportCertStore(
            hStore: root::HCERTSTORE,
            pPFX: *mut root::CRYPT_DATA_BLOB,
            szPassword: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    pub type HCERT_SERVER_OCSP_RESPONSE = *mut ::std::os::raw::c_void;
    pub type CERT_SERVER_OCSP_RESPONSE_CONTEXT = root::_CERT_SERVER_OCSP_RESPONSE_CONTEXT;
    pub type PCERT_SERVER_OCSP_RESPONSE_CONTEXT = *mut root::_CERT_SERVER_OCSP_RESPONSE_CONTEXT;
    pub type PCCERT_SERVER_OCSP_RESPONSE_CONTEXT = *const root::CERT_SERVER_OCSP_RESPONSE_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
        pub cbSize: u32,
        pub pbEncodedOcspResponse: *mut u8,
        pub cbEncodedOcspResponse: u32,
    }
    pub type PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            pChainContext: root::PCCERT_CHAIN_CONTEXT,
            pServerOcspResponseContext: root::PCCERT_SERVER_OCSP_RESPONSE_CONTEXT,
            pNewCrlContext: root::PCCRL_CONTEXT,
            pPrevCrlContext: root::PCCRL_CONTEXT,
            pvArg: root::PVOID,
            dwWriteOcspFileError: u32,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA {
        pub cbSize: u32,
        pub dwFlags: u32,
        pub pcbUsedSize: *mut u32,
        pub pwszOcspDirectory: *mut u16,
        pub pfnUpdateCallback: root::PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK,
        pub pvUpdateCallbackArg: root::PVOID,
    }
    pub type CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = root::_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA;
    pub type PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA = *mut root::_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA;
    extern "C" {
        pub fn CertOpenServerOcspResponse(
            pChainContext: root::PCCERT_CHAIN_CONTEXT,
            dwFlags: u32,
            pOpenPara: root::PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA,
        ) -> root::HCERT_SERVER_OCSP_RESPONSE;
    }
    extern "C" {
        pub fn CertAddRefServerOcspResponse(hServerOcspResponse: root::HCERT_SERVER_OCSP_RESPONSE);
    }
    extern "C" {
        pub fn CertCloseServerOcspResponse(
            hServerOcspResponse: root::HCERT_SERVER_OCSP_RESPONSE,
            dwFlags: u32,
        );
    }
    extern "C" {
        pub fn CertGetServerOcspResponseContext(
            hServerOcspResponse: root::HCERT_SERVER_OCSP_RESPONSE,
            dwFlags: u32,
            pvReserved: root::LPVOID,
        ) -> root::PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;
    }
    extern "C" {
        pub fn CertAddRefServerOcspResponseContext(
            pServerOcspResponseContext: root::PCCERT_SERVER_OCSP_RESPONSE_CONTEXT,
        );
    }
    extern "C" {
        pub fn CertFreeServerOcspResponseContext(
            pServerOcspResponseContext: root::PCCERT_SERVER_OCSP_RESPONSE_CONTEXT,
        );
    }
    extern "C" {
        pub fn CertRetrieveLogoOrBiometricInfo(
            pCertContext: root::PCCERT_CONTEXT,
            lpszLogoOrBiometricType: *const i8,
            dwRetrievalFlags: u32,
            dwTimeout: u32,
            dwFlags: u32,
            pvReserved: *mut ::std::os::raw::c_void,
            ppbData: *mut *mut u8,
            pcbData: *mut u32,
            ppwszMimeType: *mut root::LPWSTR,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SELECT_CHAIN_PARA {
        pub hChainEngine: root::HCERTCHAINENGINE,
        pub pTime: root::PFILETIME,
        pub hAdditionalStore: root::HCERTSTORE,
        pub pChainPara: root::PCERT_CHAIN_PARA,
        pub dwFlags: u32,
    }
    pub type CERT_SELECT_CHAIN_PARA = root::_CERT_SELECT_CHAIN_PARA;
    pub type PCERT_SELECT_CHAIN_PARA = *mut root::_CERT_SELECT_CHAIN_PARA;
    pub type PCCERT_SELECT_CHAIN_PARA = *const root::CERT_SELECT_CHAIN_PARA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERT_SELECT_CRITERIA {
        pub dwType: u32,
        pub cPara: u32,
        pub ppPara: *mut *mut ::std::os::raw::c_void,
    }
    pub type CERT_SELECT_CRITERIA = root::_CERT_SELECT_CRITERIA;
    pub type PCERT_SELECT_CRITERIA = *mut root::_CERT_SELECT_CRITERIA;
    pub type PCCERT_SELECT_CRITERIA = *const root::CERT_SELECT_CRITERIA;
    extern "C" {
        pub fn CertSelectCertificateChains(
            pSelectionContext: root::LPCGUID,
            dwFlags: u32,
            pChainParameters: root::PCCERT_SELECT_CHAIN_PARA,
            cCriteria: u32,
            rgpCriteria: root::PCCERT_SELECT_CRITERIA,
            hStore: root::HCERTSTORE,
            pcSelection: root::PDWORD,
            pprgpSelection: *mut *mut root::PCCERT_CHAIN_CONTEXT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CertFreeCertificateChainList(prgpSelection: *mut root::PCCERT_CHAIN_CONTEXT);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIMESTAMP_REQUEST {
        pub dwVersion: u32,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub HashedMessage: root::CRYPT_DER_BLOB,
        pub pszTSAPolicyId: *mut i8,
        pub Nonce: root::CRYPT_INTEGER_BLOB,
        pub fCertReq: root::BOOL,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CRYPT_TIMESTAMP_REQUEST = root::_CRYPT_TIMESTAMP_REQUEST;
    pub type PCRYPT_TIMESTAMP_REQUEST = *mut root::_CRYPT_TIMESTAMP_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIMESTAMP_RESPONSE {
        pub dwStatus: u32,
        pub cFreeText: u32,
        pub rgFreeText: *mut root::LPWSTR,
        pub FailureInfo: root::CRYPT_BIT_BLOB,
        pub ContentInfo: root::CRYPT_DER_BLOB,
    }
    pub type CRYPT_TIMESTAMP_RESPONSE = root::_CRYPT_TIMESTAMP_RESPONSE;
    pub type PCRYPT_TIMESTAMP_RESPONSE = *mut root::_CRYPT_TIMESTAMP_RESPONSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIMESTAMP_ACCURACY {
        pub dwSeconds: u32,
        pub dwMillis: u32,
        pub dwMicros: u32,
    }
    pub type CRYPT_TIMESTAMP_ACCURACY = root::_CRYPT_TIMESTAMP_ACCURACY;
    pub type PCRYPT_TIMESTAMP_ACCURACY = *mut root::_CRYPT_TIMESTAMP_ACCURACY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIMESTAMP_INFO {
        pub dwVersion: u32,
        pub pszTSAPolicyId: *mut i8,
        pub HashAlgorithm: root::CRYPT_ALGORITHM_IDENTIFIER,
        pub HashedMessage: root::CRYPT_DER_BLOB,
        pub SerialNumber: root::CRYPT_INTEGER_BLOB,
        pub ftTime: root::FILETIME,
        pub pvAccuracy: root::PCRYPT_TIMESTAMP_ACCURACY,
        pub fOrdering: root::BOOL,
        pub Nonce: root::CRYPT_DER_BLOB,
        pub Tsa: root::CRYPT_DER_BLOB,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CRYPT_TIMESTAMP_INFO = root::_CRYPT_TIMESTAMP_INFO;
    pub type PCRYPT_TIMESTAMP_INFO = *mut root::_CRYPT_TIMESTAMP_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIMESTAMP_CONTEXT {
        pub cbEncoded: u32,
        pub pbEncoded: *mut u8,
        pub pTimeStamp: root::PCRYPT_TIMESTAMP_INFO,
    }
    pub type CRYPT_TIMESTAMP_CONTEXT = root::_CRYPT_TIMESTAMP_CONTEXT;
    pub type PCRYPT_TIMESTAMP_CONTEXT = *mut root::_CRYPT_TIMESTAMP_CONTEXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_TIMESTAMP_PARA {
        pub pszTSAPolicyId: *const i8,
        pub fRequestCerts: root::BOOL,
        pub Nonce: root::CRYPT_INTEGER_BLOB,
        pub cExtension: u32,
        pub rgExtension: root::PCERT_EXTENSION,
    }
    pub type CRYPT_TIMESTAMP_PARA = root::_CRYPT_TIMESTAMP_PARA;
    pub type PCRYPT_TIMESTAMP_PARA = *mut root::_CRYPT_TIMESTAMP_PARA;
    extern "C" {
        pub fn CryptRetrieveTimeStamp(
            wszUrl: root::LPCWSTR,
            dwRetrievalFlags: u32,
            dwTimeout: u32,
            pszHashId: *const i8,
            pPara: *const root::CRYPT_TIMESTAMP_PARA,
            pbData: *const u8,
            cbData: u32,
            ppTsContext: *mut root::PCRYPT_TIMESTAMP_CONTEXT,
            ppTsSigner: *mut root::PCCERT_CONTEXT,
            phStore: *mut root::HCERTSTORE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptVerifyTimeStampSignature(
            pbTSContentInfo: *const u8,
            cbTSContentInfo: u32,
            pbData: *const u8,
            cbData: u32,
            hAdditionalStore: root::HCERTSTORE,
            ppTsContext: *mut root::PCRYPT_TIMESTAMP_CONTEXT,
            ppTsSigner: *mut root::PCCERT_CONTEXT,
            phStore: *mut root::HCERTSTORE,
        ) -> root::BOOL;
    }
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = ::std::option::Option<
        unsafe extern "C" fn(
            pContext: root::LPVOID,
            rgIdentifierOrNameList: *mut root::PCERT_NAME_BLOB,
            dwIdentifierOrNameListCount: u32,
        ) -> root::BOOL,
    >;
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = ::std::option::Option<
        unsafe extern "C" fn(
            pPluginContext: root::LPVOID,
            pIdentifier: root::PCRYPT_DATA_BLOB,
            dwNameType: u32,
            pNameBlob: root::PCERT_NAME_BLOB,
            ppbContent: *mut root::PBYTE,
            pcbContent: *mut u32,
            ppwszPassword: *mut *const u16,
            ppIdentifier: *mut root::PCRYPT_DATA_BLOB,
        ) -> root::BOOL,
    >;
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = ::std::option::Option<
        unsafe extern "C" fn(dwReason: u32, pPluginContext: root::LPVOID),
    >;
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = ::std::option::Option<
        unsafe extern "C" fn(pPluginContext: root::LPVOID, pwszPassword: *const u16),
    >;
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = ::std::option::Option<
        unsafe extern "C" fn(pPluginContext: root::LPVOID, pbData: root::PBYTE),
    >;
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = ::std::option::Option<
        unsafe extern "C" fn(pPluginContext: root::LPVOID, pIdentifier: root::PCRYPT_DATA_BLOB),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE {
        pub cbSize: u32,
        pub pfnGet: root::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET,
        pub pfnRelease: root::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE,
        pub pfnFreePassword: root::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD,
        pub pfnFree: root::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE,
        pub pfnFreeIdentifier: root::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER,
    }
    pub type CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = root::_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
    pub type PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = *mut root::_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
    pub type PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = ::std::option::Option<
        unsafe extern "C" fn(
            pfnFlush: root::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH,
            pContext: root::LPVOID,
            pdwExpectedObjectCount: *mut u32,
            ppFuncTable: *mut root::PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE,
            ppPluginContext: *mut *mut ::std::os::raw::c_void,
        ) -> root::BOOL,
    >;
    extern "C" {
        pub fn CertIsWeakHash(
            dwHashUseType: u32,
            pwszCNGHashAlgid: root::LPCWSTR,
            dwChainFlags: u32,
            pSignerChainContext: root::PCCERT_CHAIN_CONTEXT,
            pTimeStamp: root::LPFILETIME,
            pwszFileName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    pub type PFN_CERT_IS_WEAK_HASH = ::std::option::Option<
        unsafe extern "C" fn(
            dwHashUseType: u32,
            pwszCNGHashAlgid: root::LPCWSTR,
            dwChainFlags: u32,
            pSignerChainContext: root::PCCERT_CHAIN_CONTEXT,
            pTimeStamp: root::LPFILETIME,
            pwszFileName: root::LPCWSTR,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRYPTPROTECT_PROMPTSTRUCT {
        pub cbSize: u32,
        pub dwPromptFlags: u32,
        pub hwndApp: root::HWND,
        pub szPrompt: root::LPCWSTR,
    }
    pub type CRYPTPROTECT_PROMPTSTRUCT = root::_CRYPTPROTECT_PROMPTSTRUCT;
    pub type PCRYPTPROTECT_PROMPTSTRUCT = *mut root::_CRYPTPROTECT_PROMPTSTRUCT;
    extern "C" {
        pub fn CryptProtectData(
            pDataIn: *mut root::DATA_BLOB,
            szDataDescr: root::LPCWSTR,
            pOptionalEntropy: *mut root::DATA_BLOB,
            pvReserved: root::PVOID,
            pPromptStruct: *mut root::CRYPTPROTECT_PROMPTSTRUCT,
            dwFlags: u32,
            pDataOut: *mut root::DATA_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUnprotectData(
            pDataIn: *mut root::DATA_BLOB,
            ppszDataDescr: *mut root::LPWSTR,
            pOptionalEntropy: *mut root::DATA_BLOB,
            pvReserved: root::PVOID,
            pPromptStruct: *mut root::CRYPTPROTECT_PROMPTSTRUCT,
            dwFlags: u32,
            pDataOut: *mut root::DATA_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptProtectDataNoUI(
            pDataIn: *mut root::DATA_BLOB,
            szDataDescr: root::LPCWSTR,
            pOptionalEntropy: *mut root::DATA_BLOB,
            pvReserved: root::PVOID,
            pPromptStruct: *mut root::CRYPTPROTECT_PROMPTSTRUCT,
            dwFlags: u32,
            pbOptionalPassword: *const u8,
            cbOptionalPassword: u32,
            pDataOut: *mut root::DATA_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUnprotectDataNoUI(
            pDataIn: *mut root::DATA_BLOB,
            ppszDataDescr: *mut root::LPWSTR,
            pOptionalEntropy: *mut root::DATA_BLOB,
            pvReserved: root::PVOID,
            pPromptStruct: *mut root::CRYPTPROTECT_PROMPTSTRUCT,
            dwFlags: u32,
            pbOptionalPassword: *const u8,
            cbOptionalPassword: u32,
            pDataOut: *mut root::DATA_BLOB,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUpdateProtectedState(
            pOldSid: root::PSID,
            pwszOldPassword: root::LPCWSTR,
            dwFlags: u32,
            pdwSuccessCount: *mut u32,
            pdwFailureCount: *mut u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptProtectMemory(
            pDataIn: root::LPVOID,
            cbDataIn: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CryptUnprotectMemory(
            pDataIn: root::LPVOID,
            cbDataIn: u32,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CERTIFICATE_BLOB {
        pub dwCertEncodingType: u32,
        pub cbData: u32,
        pub pbData: root::PBYTE,
    }
    pub type EFS_CERTIFICATE_BLOB = root::_CERTIFICATE_BLOB;
    pub type PEFS_CERTIFICATE_BLOB = *mut root::_CERTIFICATE_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_HASH_BLOB {
        pub cbData: u32,
        pub pbData: root::PBYTE,
    }
    pub type EFS_HASH_BLOB = root::_EFS_HASH_BLOB;
    pub type PEFS_HASH_BLOB = *mut root::_EFS_HASH_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_RPC_BLOB {
        pub cbData: u32,
        pub pbData: root::PBYTE,
    }
    pub type EFS_RPC_BLOB = root::_EFS_RPC_BLOB;
    pub type PEFS_RPC_BLOB = *mut root::_EFS_RPC_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_PIN_BLOB {
        pub cbPadding: u32,
        pub cbData: u32,
        pub pbData: root::PBYTE,
    }
    pub type EFS_PIN_BLOB = root::_EFS_PIN_BLOB;
    pub type PEFS_PIN_BLOB = *mut root::_EFS_PIN_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_KEY_INFO {
        pub dwVersion: u32,
        pub Entropy: root::ULONG,
        pub Algorithm: root::ALG_ID,
        pub KeyLength: root::ULONG,
    }
    pub type EFS_KEY_INFO = root::_EFS_KEY_INFO;
    pub type PEFS_KEY_INFO = *mut root::_EFS_KEY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_COMPATIBILITY_INFO {
        pub EfsVersion: u32,
    }
    pub type EFS_COMPATIBILITY_INFO = root::_EFS_COMPATIBILITY_INFO;
    pub type PEFS_COMPATIBILITY_INFO = *mut root::_EFS_COMPATIBILITY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_VERSION_INFO {
        pub EfsVersion: u32,
        pub SubVersion: u32,
    }
    pub type EFS_VERSION_INFO = root::_EFS_VERSION_INFO;
    pub type PEFS_VERSION_INFO = *mut root::_EFS_VERSION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_DECRYPTION_STATUS_INFO {
        pub dwDecryptionError: u32,
        pub dwHashOffset: u32,
        pub cbHash: u32,
    }
    pub type EFS_DECRYPTION_STATUS_INFO = root::_EFS_DECRYPTION_STATUS_INFO;
    pub type PEFS_DECRYPTION_STATUS_INFO = *mut root::_EFS_DECRYPTION_STATUS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EFS_ENCRYPTION_STATUS_INFO {
        pub bHasCurrentKey: root::BOOL,
        pub dwEncryptionError: u32,
    }
    pub type EFS_ENCRYPTION_STATUS_INFO = root::_EFS_ENCRYPTION_STATUS_INFO;
    pub type PEFS_ENCRYPTION_STATUS_INFO = *mut root::_EFS_ENCRYPTION_STATUS_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_CERTIFICATE {
        pub cbTotalLength: u32,
        pub pUserSid: *mut root::SID,
        pub pCertBlob: root::PEFS_CERTIFICATE_BLOB,
    }
    pub type ENCRYPTION_CERTIFICATE = root::_ENCRYPTION_CERTIFICATE;
    pub type PENCRYPTION_CERTIFICATE = *mut root::_ENCRYPTION_CERTIFICATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_CERTIFICATE_HASH {
        pub cbTotalLength: u32,
        pub pUserSid: *mut root::SID,
        pub pHash: root::PEFS_HASH_BLOB,
        pub lpDisplayInformation: root::LPWSTR,
    }
    pub type ENCRYPTION_CERTIFICATE_HASH = root::_ENCRYPTION_CERTIFICATE_HASH;
    pub type PENCRYPTION_CERTIFICATE_HASH = *mut root::_ENCRYPTION_CERTIFICATE_HASH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
        pub nCert_Hash: u32,
        pub pUsers: *mut root::PENCRYPTION_CERTIFICATE_HASH,
    }
    pub type ENCRYPTION_CERTIFICATE_HASH_LIST = root::_ENCRYPTION_CERTIFICATE_HASH_LIST;
    pub type PENCRYPTION_CERTIFICATE_HASH_LIST = *mut root::_ENCRYPTION_CERTIFICATE_HASH_LIST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_CERTIFICATE_LIST {
        pub nUsers: u32,
        pub pUsers: *mut root::PENCRYPTION_CERTIFICATE,
    }
    pub type ENCRYPTION_CERTIFICATE_LIST = root::_ENCRYPTION_CERTIFICATE_LIST;
    pub type PENCRYPTION_CERTIFICATE_LIST = *mut root::_ENCRYPTION_CERTIFICATE_LIST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTED_FILE_METADATA_SIGNATURE {
        pub dwEfsAccessType: u32,
        pub pCertificatesAdded: root::PENCRYPTION_CERTIFICATE_HASH_LIST,
        pub pEncryptionCertificate: root::PENCRYPTION_CERTIFICATE,
        pub pEfsStreamSignature: root::PEFS_RPC_BLOB,
    }
    pub type ENCRYPTED_FILE_METADATA_SIGNATURE = root::_ENCRYPTED_FILE_METADATA_SIGNATURE;
    pub type PENCRYPTED_FILE_METADATA_SIGNATURE = *mut root::_ENCRYPTED_FILE_METADATA_SIGNATURE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_PROTECTOR {
        pub cbTotalLength: u32,
        pub pUserSid: *mut root::SID,
        pub lpProtectorDescriptor: root::LPWSTR,
    }
    pub type ENCRYPTION_PROTECTOR = root::_ENCRYPTION_PROTECTOR;
    pub type PENCRYPTION_PROTECTOR = *mut root::_ENCRYPTION_PROTECTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_PROTECTOR_LIST {
        pub nProtectors: u32,
        pub pProtectors: *mut root::PENCRYPTION_PROTECTOR,
    }
    pub type ENCRYPTION_PROTECTOR_LIST = root::_ENCRYPTION_PROTECTOR_LIST;
    pub type PENCRYPTION_PROTECTOR_LIST = *mut root::_ENCRYPTION_PROTECTOR_LIST;
    extern "C" {
        pub fn QueryUsersOnEncryptedFile(
            lpFileName: root::LPCWSTR,
            pUsers: *mut root::PENCRYPTION_CERTIFICATE_HASH_LIST,
        ) -> u32;
    }
    extern "C" {
        pub fn QueryRecoveryAgentsOnEncryptedFile(
            lpFileName: root::LPCWSTR,
            pRecoveryAgents: *mut root::PENCRYPTION_CERTIFICATE_HASH_LIST,
        ) -> u32;
    }
    extern "C" {
        pub fn RemoveUsersFromEncryptedFile(
            lpFileName: root::LPCWSTR,
            pHashes: root::PENCRYPTION_CERTIFICATE_HASH_LIST,
        ) -> u32;
    }
    extern "C" {
        pub fn AddUsersToEncryptedFile(
            lpFileName: root::LPCWSTR,
            pEncryptionCertificates: root::PENCRYPTION_CERTIFICATE_LIST,
        ) -> u32;
    }
    extern "C" {
        pub fn SetUserFileEncryptionKey(
            pEncryptionCertificate: root::PENCRYPTION_CERTIFICATE,
        ) -> u32;
    }
    extern "C" {
        pub fn SetUserFileEncryptionKeyEx(
            pEncryptionCertificate: root::PENCRYPTION_CERTIFICATE,
            dwCapabilities: u32,
            dwFlags: u32,
            pvReserved: root::LPVOID,
        ) -> u32;
    }
    extern "C" {
        pub fn FreeEncryptionCertificateHashList(pUsers: root::PENCRYPTION_CERTIFICATE_HASH_LIST);
    }
    extern "C" {
        pub fn EncryptionDisable(DirPath: root::LPCWSTR, Disable: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn DuplicateEncryptionInfoFile(
            SrcFileName: root::LPCWSTR,
            DstFileName: root::LPCWSTR,
            dwCreationDistribution: u32,
            dwAttributes: u32,
            lpSecurityAttributes: root::LPSECURITY_ATTRIBUTES,
        ) -> u32;
    }
    extern "C" {
        pub fn GetEncryptedFileMetadata(
            lpFileName: root::LPCWSTR,
            pcbMetadata: root::PDWORD,
            ppbMetadata: *mut root::PBYTE,
        ) -> u32;
    }
    extern "C" {
        pub fn SetEncryptedFileMetadata(
            lpFileName: root::LPCWSTR,
            pbOldMetadata: root::PBYTE,
            pbNewMetadata: root::PBYTE,
            pOwnerHash: root::PENCRYPTION_CERTIFICATE_HASH,
            dwOperation: u32,
            pCertificatesAdded: root::PENCRYPTION_CERTIFICATE_HASH_LIST,
        ) -> u32;
    }
    extern "C" {
        pub fn FreeEncryptedFileMetadata(pbMetadata: root::PBYTE);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RPC_IMPORT_CONTEXT_P {
        pub LookupContext: root::RPC_NS_HANDLE,
        pub ProposedHandle: root::RPC_BINDING_HANDLE,
        pub Bindings: *mut root::RPC_BINDING_VECTOR,
    }
    pub type PRPC_IMPORT_CONTEXT_P = *mut root::RPC_IMPORT_CONTEXT_P;
    extern "C" {
        pub fn I_RpcNsGetBuffer(Message: root::PRPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcNsSendReceive(
            Message: root::PRPC_MESSAGE,
            Handle: *mut root::RPC_BINDING_HANDLE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_RpcNsRaiseException(Message: root::PRPC_MESSAGE, Status: root::RPC_STATUS);
    }
    extern "C" {
        pub fn I_RpcReBindBuffer(Message: root::PRPC_MESSAGE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_NsServerBindSearch() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_NsClientBindSearch() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn I_NsClientBindDone();
    }
    pub type byte = u8;
    pub type cs_byte = root::byte;
    pub type boolean = u8;
    extern "C" {
        pub fn MIDL_user_allocate(size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn MIDL_user_free(arg1: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn I_RpcDefaultAllocate(
            bh: root::handle_t,
            size: root::size_t,
            RealAlloc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn I_RpcDefaultFree(
            bh: root::handle_t,
            arg1: *mut ::std::os::raw::c_void,
            RealFree: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        );
    }
    pub type NDR_CCONTEXT = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub pad: [*mut ::std::os::raw::c_void; 2usize],
        pub userContext: *mut ::std::os::raw::c_void,
    }
    pub type NDR_SCONTEXT = *mut root::_bindgen_ty_1;
    pub type NDR_RUNDOWN =
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
    pub type NDR_NOTIFY_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
    pub type NDR_NOTIFY2_ROUTINE = ::std::option::Option<unsafe extern "C" fn(flag: root::boolean)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCONTEXT_QUEUE {
        pub NumberOfObjects: u32,
        pub ArrayOfObjects: *mut root::NDR_SCONTEXT,
    }
    pub type SCONTEXT_QUEUE = root::_SCONTEXT_QUEUE;
    pub type PSCONTEXT_QUEUE = *mut root::_SCONTEXT_QUEUE;
    extern "C" {
        pub fn NDRCContextBinding(CContext: root::NDR_CCONTEXT) -> root::RPC_BINDING_HANDLE;
    }
    extern "C" {
        pub fn NDRCContextMarshall(
            CContext: root::NDR_CCONTEXT,
            pBuff: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn NDRCContextUnmarshall(
            pCContext: *mut root::NDR_CCONTEXT,
            hBinding: root::RPC_BINDING_HANDLE,
            pBuff: *mut ::std::os::raw::c_void,
            DataRepresentation: u32,
        );
    }
    extern "C" {
        pub fn NDRCContextUnmarshall2(
            pCContext: *mut root::NDR_CCONTEXT,
            hBinding: root::RPC_BINDING_HANDLE,
            pBuff: *mut ::std::os::raw::c_void,
            DataRepresentation: u32,
        );
    }
    extern "C" {
        pub fn NDRSContextMarshall(
            CContext: root::NDR_SCONTEXT,
            pBuff: *mut ::std::os::raw::c_void,
            userRunDownIn: root::NDR_RUNDOWN,
        );
    }
    extern "C" {
        pub fn NDRSContextUnmarshall(
            pBuff: *mut ::std::os::raw::c_void,
            DataRepresentation: u32,
        ) -> root::NDR_SCONTEXT;
    }
    extern "C" {
        pub fn NDRSContextMarshallEx(
            BindingHandle: root::RPC_BINDING_HANDLE,
            CContext: root::NDR_SCONTEXT,
            pBuff: *mut ::std::os::raw::c_void,
            userRunDownIn: root::NDR_RUNDOWN,
        );
    }
    extern "C" {
        pub fn NDRSContextMarshall2(
            BindingHandle: root::RPC_BINDING_HANDLE,
            CContext: root::NDR_SCONTEXT,
            pBuff: *mut ::std::os::raw::c_void,
            userRunDownIn: root::NDR_RUNDOWN,
            CtxGuard: *mut ::std::os::raw::c_void,
            Flags: u32,
        );
    }
    extern "C" {
        pub fn NDRSContextUnmarshallEx(
            BindingHandle: root::RPC_BINDING_HANDLE,
            pBuff: *mut ::std::os::raw::c_void,
            DataRepresentation: u32,
        ) -> root::NDR_SCONTEXT;
    }
    extern "C" {
        pub fn NDRSContextUnmarshall2(
            BindingHandle: root::RPC_BINDING_HANDLE,
            pBuff: *mut ::std::os::raw::c_void,
            DataRepresentation: u32,
            CtxGuard: *mut ::std::os::raw::c_void,
            Flags: u32,
        ) -> root::NDR_SCONTEXT;
    }
    extern "C" {
        pub fn RpcSsDestroyClientContext(ContextHandle: *mut *mut ::std::os::raw::c_void);
    }
    pub type error_status_t = u32;
    pub type RPC_BUFPTR = *mut u8;
    pub type RPC_LENGTH = u32;
    pub type EXPR_EVAL =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut root::_MIDL_STUB_MESSAGE)>;
    pub type PFORMAT_STRING = *const u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ARRAY_INFO {
        pub Dimension: i32,
        pub BufferConformanceMark: *mut u32,
        pub BufferVarianceMark: *mut u32,
        pub MaxCountArray: *mut u32,
        pub OffsetArray: *mut u32,
        pub ActualCountArray: *mut u32,
    }
    pub type PARRAY_INFO = *mut root::ARRAY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_ASYNC_MESSAGE {
        _unused: [u8; 0],
    }
    pub type PNDR_ASYNC_MESSAGE = *mut root::_NDR_ASYNC_MESSAGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_CORRELATION_INFO {
        _unused: [u8; 0],
    }
    pub type PNDR_CORRELATION_INFO = *mut root::_NDR_CORRELATION_INFO;
    pub type MIDL_SYNTAX_INFO = root::_MIDL_SYNTAX_INFO;
    pub type PMIDL_SYNTAX_INFO = *mut root::_MIDL_SYNTAX_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NDR_ALLOC_ALL_NODES_CONTEXT {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NDR_POINTER_QUEUE_STATE {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_PROC_CONTEXT {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_STUB_MESSAGE {
        pub RpcMsg: root::PRPC_MESSAGE,
        pub Buffer: *mut u8,
        pub BufferStart: *mut u8,
        pub BufferEnd: *mut u8,
        pub BufferMark: *mut u8,
        pub BufferLength: u32,
        pub MemorySize: u32,
        pub Memory: *mut u8,
        pub IsClient: u8,
        pub Pad: u8,
        pub uFlags2: u16,
        pub ReuseBuffer: i32,
        pub pAllocAllNodesContext: *mut root::NDR_ALLOC_ALL_NODES_CONTEXT,
        pub pPointerQueueState: *mut root::NDR_POINTER_QUEUE_STATE,
        pub IgnoreEmbeddedPointers: i32,
        pub PointerBufferMark: *mut u8,
        pub CorrDespIncrement: u8,
        pub uFlags: u8,
        pub UniquePtrCount: u16,
        pub MaxCount: u64,
        pub Offset: u32,
        pub ActualCount: u32,
        pub pfnAllocate: ::std::option::Option<
            unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
        >,
        pub pfnFree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub StackTop: *mut u8,
        pub pPresentedType: *mut u8,
        pub pTransmitType: *mut u8,
        pub SavedHandle: root::handle_t,
        pub StubDesc: *const root::_MIDL_STUB_DESC,
        pub FullPtrXlatTables: *mut root::_FULL_PTR_XLAT_TABLES,
        pub FullPtrRefId: u32,
        pub PointerLength: u32,
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub dwDestContext: u32,
        pub pvDestContext: *mut ::std::os::raw::c_void,
        pub SavedContextHandles: *mut root::NDR_SCONTEXT,
        pub ParamNumber: i32,
        pub pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
        pub pArrayInfo: root::PARRAY_INFO,
        pub SizePtrCountArray: *mut u32,
        pub SizePtrOffsetArray: *mut u32,
        pub SizePtrLengthArray: *mut u32,
        pub pArgQueue: *mut ::std::os::raw::c_void,
        pub dwStubPhase: u32,
        pub LowStackMark: *mut ::std::os::raw::c_void,
        pub pAsyncMsg: root::PNDR_ASYNC_MESSAGE,
        pub pCorrInfo: root::PNDR_CORRELATION_INFO,
        pub pCorrMemory: *mut u8,
        pub pMemoryList: *mut ::std::os::raw::c_void,
        pub pCSInfo: root::INT_PTR,
        pub ConformanceMark: *mut u8,
        pub VarianceMark: *mut u8,
        pub Unused: root::INT_PTR,
        pub pContext: *mut root::_NDR_PROC_CONTEXT,
        pub ContextHandleHash: *mut ::std::os::raw::c_void,
        pub pUserMarshalList: *mut ::std::os::raw::c_void,
        pub Reserved51_3: root::INT_PTR,
        pub Reserved51_4: root::INT_PTR,
        pub Reserved51_5: root::INT_PTR,
    }
    impl _MIDL_STUB_MESSAGE {
        #[inline]
        pub fn fInDontFree(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fInDontFree(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fDontCallFreeInst(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fDontCallFreeInst(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fUnused1(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fUnused1(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fHasReturn(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fHasReturn(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fHasExtensions(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fHasExtensions(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fHasNewCorrDesc(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fHasNewCorrDesc(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fIsIn(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fIsIn(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fIsOut(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fIsOut(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fIsOicf(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fIsOicf(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fBufferValid(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fBufferValid(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(9usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fHasMemoryValidateCallback(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fHasMemoryValidateCallback(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(10usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fInFree(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fInFree(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(11usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fNeedMCCP(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_fNeedMCCP(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn fUnused2(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
        }
        #[inline]
        pub fn set_fUnused2(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn fUnused3(&self) -> i32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_fUnused3(&mut self, val: i32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            fInDontFree: i32,
            fDontCallFreeInst: i32,
            fUnused1: i32,
            fHasReturn: i32,
            fHasExtensions: i32,
            fHasNewCorrDesc: i32,
            fIsIn: i32,
            fIsOut: i32,
            fIsOicf: i32,
            fBufferValid: i32,
            fHasMemoryValidateCallback: i32,
            fInFree: i32,
            fNeedMCCP: i32,
            fUnused2: i32,
            fUnused3: i32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let fInDontFree: u32 = unsafe { ::std::mem::transmute(fInDontFree) };
                fInDontFree as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let fDontCallFreeInst: u32 = unsafe { ::std::mem::transmute(fDontCallFreeInst) };
                fDontCallFreeInst as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let fUnused1: u32 = unsafe { ::std::mem::transmute(fUnused1) };
                fUnused1 as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let fHasReturn: u32 = unsafe { ::std::mem::transmute(fHasReturn) };
                fHasReturn as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let fHasExtensions: u32 = unsafe { ::std::mem::transmute(fHasExtensions) };
                fHasExtensions as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let fHasNewCorrDesc: u32 = unsafe { ::std::mem::transmute(fHasNewCorrDesc) };
                fHasNewCorrDesc as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let fIsIn: u32 = unsafe { ::std::mem::transmute(fIsIn) };
                fIsIn as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let fIsOut: u32 = unsafe { ::std::mem::transmute(fIsOut) };
                fIsOut as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let fIsOicf: u32 = unsafe { ::std::mem::transmute(fIsOicf) };
                fIsOicf as u64
            });
            __bindgen_bitfield_unit.set(9usize, 1u8, {
                let fBufferValid: u32 = unsafe { ::std::mem::transmute(fBufferValid) };
                fBufferValid as u64
            });
            __bindgen_bitfield_unit.set(10usize, 1u8, {
                let fHasMemoryValidateCallback: u32 =
                    unsafe { ::std::mem::transmute(fHasMemoryValidateCallback) };
                fHasMemoryValidateCallback as u64
            });
            __bindgen_bitfield_unit.set(11usize, 1u8, {
                let fInFree: u32 = unsafe { ::std::mem::transmute(fInFree) };
                fInFree as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let fNeedMCCP: u32 = unsafe { ::std::mem::transmute(fNeedMCCP) };
                fNeedMCCP as u64
            });
            __bindgen_bitfield_unit.set(13usize, 3u8, {
                let fUnused2: u32 = unsafe { ::std::mem::transmute(fUnused2) };
                fUnused2 as u64
            });
            __bindgen_bitfield_unit.set(16usize, 16u8, {
                let fUnused3: u32 = unsafe { ::std::mem::transmute(fUnused3) };
                fUnused3 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type MIDL_STUB_MESSAGE = root::_MIDL_STUB_MESSAGE;
    pub type PMIDL_STUB_MESSAGE = *mut root::_MIDL_STUB_MESSAGE;
    pub type GENERIC_BINDING_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >;
    pub type GENERIC_UNBIND_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut u8),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GENERIC_BINDING_ROUTINE_PAIR {
        pub pfnBind: root::GENERIC_BINDING_ROUTINE,
        pub pfnUnbind: root::GENERIC_UNBIND_ROUTINE,
    }
    pub type GENERIC_BINDING_ROUTINE_PAIR = root::_GENERIC_BINDING_ROUTINE_PAIR;
    pub type PGENERIC_BINDING_ROUTINE_PAIR = *mut root::_GENERIC_BINDING_ROUTINE_PAIR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __GENERIC_BINDING_INFO {
        pub pObj: *mut ::std::os::raw::c_void,
        pub Size: u32,
        pub pfnBind: root::GENERIC_BINDING_ROUTINE,
        pub pfnUnbind: root::GENERIC_UNBIND_ROUTINE,
    }
    pub type GENERIC_BINDING_INFO = root::__GENERIC_BINDING_INFO;
    pub type PGENERIC_BINDING_INFO = *mut root::__GENERIC_BINDING_INFO;
    pub type XMIT_HELPER_ROUTINE =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::PMIDL_STUB_MESSAGE)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _XMIT_ROUTINE_QUINTUPLE {
        pub pfnTranslateToXmit: root::XMIT_HELPER_ROUTINE,
        pub pfnTranslateFromXmit: root::XMIT_HELPER_ROUTINE,
        pub pfnFreeXmit: root::XMIT_HELPER_ROUTINE,
        pub pfnFreeInst: root::XMIT_HELPER_ROUTINE,
    }
    pub type XMIT_ROUTINE_QUINTUPLE = root::_XMIT_ROUTINE_QUINTUPLE;
    pub type PXMIT_ROUTINE_QUINTUPLE = *mut root::_XMIT_ROUTINE_QUINTUPLE;
    pub type USER_MARSHAL_SIZING_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut ::std::os::raw::c_void,
        ) -> u32,
    >;
    pub type USER_MARSHAL_MARSHALLING_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut u8,
    >;
    pub type USER_MARSHAL_UNMARSHALLING_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut u8,
    >;
    pub type USER_MARSHAL_FREEING_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut u32, arg2: *mut ::std::os::raw::c_void),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
        pub pfnBufferSize: root::USER_MARSHAL_SIZING_ROUTINE,
        pub pfnMarshall: root::USER_MARSHAL_MARSHALLING_ROUTINE,
        pub pfnUnmarshall: root::USER_MARSHAL_UNMARSHALLING_ROUTINE,
        pub pfnFree: root::USER_MARSHAL_FREEING_ROUTINE,
    }
    pub type USER_MARSHAL_ROUTINE_QUADRUPLE = root::_USER_MARSHAL_ROUTINE_QUADRUPLE;
    pub const _USER_MARSHAL_CB_TYPE_USER_MARSHAL_CB_BUFFER_SIZE: root::_USER_MARSHAL_CB_TYPE = 0;
    pub const _USER_MARSHAL_CB_TYPE_USER_MARSHAL_CB_MARSHALL: root::_USER_MARSHAL_CB_TYPE = 1;
    pub const _USER_MARSHAL_CB_TYPE_USER_MARSHAL_CB_UNMARSHALL: root::_USER_MARSHAL_CB_TYPE = 2;
    pub const _USER_MARSHAL_CB_TYPE_USER_MARSHAL_CB_FREE: root::_USER_MARSHAL_CB_TYPE = 3;
    pub type _USER_MARSHAL_CB_TYPE = i32;
    pub use self::super::root::_USER_MARSHAL_CB_TYPE as USER_MARSHAL_CB_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _USER_MARSHAL_CB {
        pub Flags: u32,
        pub pStubMsg: root::PMIDL_STUB_MESSAGE,
        pub pReserve: root::PFORMAT_STRING,
        pub Signature: u32,
        pub CBType: root::USER_MARSHAL_CB_TYPE,
        pub pFormat: root::PFORMAT_STRING,
        pub pTypeFormat: root::PFORMAT_STRING,
    }
    pub type USER_MARSHAL_CB = root::_USER_MARSHAL_CB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MALLOC_FREE_STRUCT {
        pub pfnAllocate: ::std::option::Option<
            unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
        >,
        pub pfnFree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    }
    pub type MALLOC_FREE_STRUCT = root::_MALLOC_FREE_STRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMM_FAULT_OFFSETS {
        pub CommOffset: i16,
        pub FaultOffset: i16,
    }
    pub type COMM_FAULT_OFFSETS = root::_COMM_FAULT_OFFSETS;
    pub const _IDL_CS_CONVERT_IDL_CS_NO_CONVERT: root::_IDL_CS_CONVERT = 0;
    pub const _IDL_CS_CONVERT_IDL_CS_IN_PLACE_CONVERT: root::_IDL_CS_CONVERT = 1;
    pub const _IDL_CS_CONVERT_IDL_CS_NEW_BUFFER_CONVERT: root::_IDL_CS_CONVERT = 2;
    pub type _IDL_CS_CONVERT = i32;
    pub use self::super::root::_IDL_CS_CONVERT as IDL_CS_CONVERT;
    pub type CS_TYPE_NET_SIZE_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            hBinding: root::RPC_BINDING_HANDLE,
            ulNetworkCodeSet: u32,
            ulLocalBufferSize: u32,
            conversionType: *mut root::IDL_CS_CONVERT,
            pulNetworkBufferSize: *mut u32,
            pStatus: *mut root::error_status_t,
        ),
    >;
    pub type CS_TYPE_LOCAL_SIZE_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            hBinding: root::RPC_BINDING_HANDLE,
            ulNetworkCodeSet: u32,
            ulNetworkBufferSize: u32,
            conversionType: *mut root::IDL_CS_CONVERT,
            pulLocalBufferSize: *mut u32,
            pStatus: *mut root::error_status_t,
        ),
    >;
    pub type CS_TYPE_TO_NETCS_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            hBinding: root::RPC_BINDING_HANDLE,
            ulNetworkCodeSet: u32,
            pLocalData: *mut ::std::os::raw::c_void,
            ulLocalDataLength: u32,
            pNetworkData: *mut root::byte,
            pulNetworkDataLength: *mut u32,
            pStatus: *mut root::error_status_t,
        ),
    >;
    pub type CS_TYPE_FROM_NETCS_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            hBinding: root::RPC_BINDING_HANDLE,
            ulNetworkCodeSet: u32,
            pNetworkData: *mut root::byte,
            ulNetworkDataLength: u32,
            ulLocalBufferSize: u32,
            pLocalData: *mut ::std::os::raw::c_void,
            pulLocalDataLength: *mut u32,
            pStatus: *mut root::error_status_t,
        ),
    >;
    pub type CS_TAG_GETTING_ROUTINE = ::std::option::Option<
        unsafe extern "C" fn(
            hBinding: root::RPC_BINDING_HANDLE,
            fServerSide: i32,
            pulSendingTag: *mut u32,
            pulDesiredReceivingTag: *mut u32,
            pulReceivingTag: *mut u32,
            pStatus: *mut root::error_status_t,
        ),
    >;
    extern "C" {
        pub fn RpcCsGetTags(
            hBinding: root::RPC_BINDING_HANDLE,
            fServerSide: i32,
            pulSendingTag: *mut u32,
            pulDesiredReceivingTag: *mut u32,
            pulReceivingTag: *mut u32,
            pStatus: *mut root::error_status_t,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_CS_SIZE_CONVERT_ROUTINES {
        pub pfnNetSize: root::CS_TYPE_NET_SIZE_ROUTINE,
        pub pfnToNetCs: root::CS_TYPE_TO_NETCS_ROUTINE,
        pub pfnLocalSize: root::CS_TYPE_LOCAL_SIZE_ROUTINE,
        pub pfnFromNetCs: root::CS_TYPE_FROM_NETCS_ROUTINE,
    }
    pub type NDR_CS_SIZE_CONVERT_ROUTINES = root::_NDR_CS_SIZE_CONVERT_ROUTINES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_CS_ROUTINES {
        pub pSizeConvertRoutines: *mut root::NDR_CS_SIZE_CONVERT_ROUTINES,
        pub pTagGettingRoutines: *mut root::CS_TAG_GETTING_ROUTINE,
    }
    pub type NDR_CS_ROUTINES = root::_NDR_CS_ROUTINES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_EXPR_DESC {
        pub pOffset: *const u16,
        pub pFormatExpr: root::PFORMAT_STRING,
    }
    pub type NDR_EXPR_DESC = root::_NDR_EXPR_DESC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _MIDL_STUB_DESC {
        pub RpcInterfaceInformation: *mut ::std::os::raw::c_void,
        pub pfnAllocate: ::std::option::Option<
            unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
        >,
        pub pfnFree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub IMPLICIT_HANDLE_INFO: root::_MIDL_STUB_DESC__bindgen_ty_1,
        pub apfnNdrRundownRoutines: *const root::NDR_RUNDOWN,
        pub aGenericBindingRoutinePairs: *const root::GENERIC_BINDING_ROUTINE_PAIR,
        pub apfnExprEval: *const root::EXPR_EVAL,
        pub aXmitQuintuple: *const root::XMIT_ROUTINE_QUINTUPLE,
        pub pFormatTypes: *const u8,
        pub fCheckBounds: i32,
        pub Version: u32,
        pub pMallocFreeStruct: *mut root::MALLOC_FREE_STRUCT,
        pub MIDLVersion: i32,
        pub CommFaultOffsets: *const root::COMM_FAULT_OFFSETS,
        pub aUserMarshalQuadruple: *const root::USER_MARSHAL_ROUTINE_QUADRUPLE,
        pub NotifyRoutineTable: *const root::NDR_NOTIFY_ROUTINE,
        pub mFlags: u64,
        pub CsRoutineTables: *const root::NDR_CS_ROUTINES,
        pub ProxyServerInfo: *mut ::std::os::raw::c_void,
        pub pExprInfo: *const root::NDR_EXPR_DESC,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _MIDL_STUB_DESC__bindgen_ty_1 {
        pub pAutoHandle: *mut root::handle_t,
        pub pPrimitiveHandle: *mut root::handle_t,
        pub pGenericBindingInfo: root::PGENERIC_BINDING_INFO,
    }
    pub type MIDL_STUB_DESC = root::_MIDL_STUB_DESC;
    pub type PMIDL_STUB_DESC = *const root::MIDL_STUB_DESC;
    pub type PMIDL_XMIT_TYPE = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug)]
    pub struct _MIDL_FORMAT_STRING {
        pub Pad: i16,
        pub Format: root::__IncompleteArrayField<u8>,
    }
    pub type MIDL_FORMAT_STRING = root::_MIDL_FORMAT_STRING;
    pub type STUB_THUNK =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::PMIDL_STUB_MESSAGE)>;
    pub type SERVER_ROUTINE =
        ::std::option::Option<unsafe extern "C" fn() -> i32>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_METHOD_PROPERTY {
        pub Id: u32,
        pub Value: u64,
    }
    pub type MIDL_METHOD_PROPERTY = root::_MIDL_METHOD_PROPERTY;
    pub type PMIDL_METHOD_PROPERTY = *mut root::_MIDL_METHOD_PROPERTY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_METHOD_PROPERTY_MAP {
        pub Count: u32,
        pub Properties: *const root::MIDL_METHOD_PROPERTY,
    }
    pub type MIDL_METHOD_PROPERTY_MAP = root::_MIDL_METHOD_PROPERTY_MAP;
    pub type PMIDL_METHOD_PROPERTY_MAP = *mut root::_MIDL_METHOD_PROPERTY_MAP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_INTERFACE_METHOD_PROPERTIES {
        pub MethodCount: u16,
        pub MethodProperties: *const *const root::MIDL_METHOD_PROPERTY_MAP,
    }
    pub type MIDL_INTERFACE_METHOD_PROPERTIES = root::_MIDL_INTERFACE_METHOD_PROPERTIES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_SERVER_INFO_ {
        pub pStubDesc: root::PMIDL_STUB_DESC,
        pub DispatchTable: *const root::SERVER_ROUTINE,
        pub ProcString: root::PFORMAT_STRING,
        pub FmtStringOffset: *const u16,
        pub ThunkTable: *const root::STUB_THUNK,
        pub pTransferSyntax: root::PRPC_SYNTAX_IDENTIFIER,
        pub nCount: u64,
        pub pSyntaxInfo: root::PMIDL_SYNTAX_INFO,
    }
    pub type MIDL_SERVER_INFO = root::_MIDL_SERVER_INFO_;
    pub type PMIDL_SERVER_INFO = *mut root::_MIDL_SERVER_INFO_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_STUBLESS_PROXY_INFO {
        pub pStubDesc: root::PMIDL_STUB_DESC,
        pub ProcFormatString: root::PFORMAT_STRING,
        pub FormatStringOffset: *const u16,
        pub pTransferSyntax: root::PRPC_SYNTAX_IDENTIFIER,
        pub nCount: u64,
        pub pSyntaxInfo: root::PMIDL_SYNTAX_INFO,
    }
    pub type MIDL_STUBLESS_PROXY_INFO = root::_MIDL_STUBLESS_PROXY_INFO;
    pub type PMIDL_STUBLESS_PROXY_INFO = *mut root::MIDL_STUBLESS_PROXY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_SYNTAX_INFO {
        pub TransferSyntax: root::RPC_SYNTAX_IDENTIFIER,
        pub DispatchTable: *mut root::RPC_DISPATCH_TABLE,
        pub ProcString: root::PFORMAT_STRING,
        pub FmtStringOffset: *const u16,
        pub TypeString: root::PFORMAT_STRING,
        pub aUserMarshalQuadruple: *const ::std::os::raw::c_void,
        pub pMethodProperties: *const root::MIDL_INTERFACE_METHOD_PROPERTIES,
        pub pReserved2: u64,
    }
    pub type PARAM_OFFSETTABLE = *mut u16;
    pub type PPARAM_OFFSETTABLE = *mut u16;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CLIENT_CALL_RETURN {
        pub Pointer: *mut ::std::os::raw::c_void,
        pub Simple: i64,
    }
    pub type CLIENT_CALL_RETURN = root::_CLIENT_CALL_RETURN;
    pub const XLAT_SIDE_XLAT_SERVER: root::XLAT_SIDE = 1;
    pub const XLAT_SIDE_XLAT_CLIENT: root::XLAT_SIDE = 2;
    pub type XLAT_SIDE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FULL_PTR_XLAT_TABLES {
        pub RefIdToPointer: *mut ::std::os::raw::c_void,
        pub PointerToRefId: *mut ::std::os::raw::c_void,
        pub NextRefId: u32,
        pub XlatSide: root::XLAT_SIDE,
    }
    pub type FULL_PTR_XLAT_TABLES = root::_FULL_PTR_XLAT_TABLES;
    pub type PFULL_PTR_XLAT_TABLES = *mut root::_FULL_PTR_XLAT_TABLES;
    pub const _system_handle_t_SYSTEM_HANDLE_FILE: root::_system_handle_t = 0;
    pub const _system_handle_t_SYSTEM_HANDLE_SEMAPHORE: root::_system_handle_t = 1;
    pub const _system_handle_t_SYSTEM_HANDLE_EVENT: root::_system_handle_t = 2;
    pub const _system_handle_t_SYSTEM_HANDLE_MUTEX: root::_system_handle_t = 3;
    pub const _system_handle_t_SYSTEM_HANDLE_PROCESS: root::_system_handle_t = 4;
    pub const _system_handle_t_SYSTEM_HANDLE_TOKEN: root::_system_handle_t = 5;
    pub const _system_handle_t_SYSTEM_HANDLE_SECTION: root::_system_handle_t = 6;
    pub const _system_handle_t_SYSTEM_HANDLE_REG_KEY: root::_system_handle_t = 7;
    pub const _system_handle_t_SYSTEM_HANDLE_THREAD: root::_system_handle_t = 8;
    pub const _system_handle_t_SYSTEM_HANDLE_COMPOSITION_OBJECT: root::_system_handle_t = 9;
    pub const _system_handle_t_SYSTEM_HANDLE_SOCKET: root::_system_handle_t = 10;
    pub const _system_handle_t_SYSTEM_HANDLE_JOB: root::_system_handle_t = 11;
    pub const _system_handle_t_SYSTEM_HANDLE_PIPE: root::_system_handle_t = 12;
    pub const _system_handle_t_SYSTEM_HANDLE_MAX: root::_system_handle_t = 12;
    pub const _system_handle_t_SYSTEM_HANDLE_INVALID: root::_system_handle_t = 255;
    pub type _system_handle_t = i32;
    pub use self::super::root::_system_handle_t as system_handle_t;
    pub const MidlInterceptionInfoVersionOne: i32 = 1;
    pub type _bindgen_ty_2 = i32;
    pub const MidlWinrtTypeSerializationInfoVersionOne: i32 = 1;
    pub type _bindgen_ty_3 = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_INTERCEPTION_INFO {
        pub Version: u32,
        pub ProcString: root::PFORMAT_STRING,
        pub ProcFormatOffsetTable: *const u16,
        pub ProcCount: u32,
        pub TypeString: root::PFORMAT_STRING,
    }
    pub type MIDL_INTERCEPTION_INFO = root::_MIDL_INTERCEPTION_INFO;
    pub type PMIDL_INTERCEPTION_INFO = *mut root::_MIDL_INTERCEPTION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO {
        pub Version: u32,
        pub TypeFormatString: root::PFORMAT_STRING,
        pub FormatStringSize: u16,
        pub TypeOffset: u16,
        pub StubDesc: root::PMIDL_STUB_DESC,
    }
    pub type MIDL_WINRT_TYPE_SERIALIZATION_INFO = root::_MIDL_WINRT_TYPE_SERIALIZATION_INFO;
    pub type PMIDL_WINRT_TYPE_SERIALIZATION_INFO = *mut root::_MIDL_WINRT_TYPE_SERIALIZATION_INFO;
    extern "C" {
        pub fn NdrClientGetSupportedSyntaxes(
            pInf: *mut root::RPC_CLIENT_INTERFACE,
            pCount: *mut u32,
            pArr: *mut *mut root::MIDL_SYNTAX_INFO,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn NdrServerGetSupportedSyntaxes(
            pInf: *mut root::RPC_SERVER_INTERFACE,
            pCount: *mut u32,
            pArr: *mut *mut root::MIDL_SYNTAX_INFO,
            pPreferSyntaxIndex: *mut u32,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn NdrSimpleTypeMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            FormatChar: u8,
        );
    }
    extern "C" {
        pub fn NdrPointerMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrCsArrayMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrCsTagMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrSimpleStructMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantStructMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantVaryingStructMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrComplexStructMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrFixedArrayMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantArrayMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantVaryingArrayMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrVaryingArrayMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrComplexArrayMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrNonConformantStringMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantStringMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrEncapsulatedUnionMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrNonEncapsulatedUnionMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrByteCountPointerMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrXmitOrRepAsMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrUserMarshalMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrInterfacePointerMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrClientContextMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ContextHandle: root::NDR_CCONTEXT,
            fCheck: i32,
        );
    }
    extern "C" {
        pub fn NdrServerContextMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ContextHandle: root::NDR_SCONTEXT,
            RundownRoutine: root::NDR_RUNDOWN,
        );
    }
    extern "C" {
        pub fn NdrServerContextNewMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ContextHandle: root::NDR_SCONTEXT,
            RundownRoutine: root::NDR_RUNDOWN,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrSimpleTypeUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            FormatChar: u8,
        );
    }
    extern "C" {
        pub fn NdrCsArrayUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrCsTagUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrRangeUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrCorrelationInitialize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut ::std::os::raw::c_void,
            CacheSize: u32,
            flags: u32,
        );
    }
    extern "C" {
        pub fn NdrCorrelationPass(pStubMsg: root::PMIDL_STUB_MESSAGE);
    }
    extern "C" {
        pub fn NdrCorrelationFree(pStubMsg: root::PMIDL_STUB_MESSAGE);
    }
    extern "C" {
        pub fn NdrPointerUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrSimpleStructUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantStructUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantVaryingStructUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrComplexStructUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrFixedArrayUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantArrayUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantVaryingArrayUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrVaryingArrayUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrComplexArrayUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrNonConformantStringUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrConformantStringUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrEncapsulatedUnionUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrNonEncapsulatedUnionUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrByteCountPointerUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrXmitOrRepAsUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrUserMarshalUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrInterfacePointerUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut u8,
            pFormat: root::PFORMAT_STRING,
            fMustAlloc: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrClientContextUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pContextHandle: *mut root::NDR_CCONTEXT,
            BindHandle: root::RPC_BINDING_HANDLE,
        );
    }
    extern "C" {
        pub fn NdrServerContextUnmarshall(pStubMsg: root::PMIDL_STUB_MESSAGE)
            -> root::NDR_SCONTEXT;
    }
    extern "C" {
        pub fn NdrContextHandleInitialize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> root::NDR_SCONTEXT;
    }
    extern "C" {
        pub fn NdrServerContextNewUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> root::NDR_SCONTEXT;
    }
    extern "C" {
        pub fn NdrPointerBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrCsArrayBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrCsTagBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrSimpleStructBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantStructBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantVaryingStructBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrComplexStructBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrFixedArrayBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantArrayBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantVaryingArrayBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrVaryingArrayBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrComplexArrayBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantStringBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrNonConformantStringBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrEncapsulatedUnionBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrNonEncapsulatedUnionBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrByteCountPointerBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrXmitOrRepAsBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrUserMarshalBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrInterfacePointerBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrContextHandleSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrPointerMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrContextHandleMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrCsArrayMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrCsTagMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrSimpleStructMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrConformantStructMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrConformantVaryingStructMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrComplexStructMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrFixedArrayMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrConformantArrayMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrConformantVaryingArrayMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrVaryingArrayMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrComplexArrayMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrConformantStringMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrNonConformantStringMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrEncapsulatedUnionMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrNonEncapsulatedUnionMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrXmitOrRepAsMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrUserMarshalMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrInterfacePointerMemorySize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        ) -> u32;
    }
    extern "C" {
        pub fn NdrPointerFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrCsArrayFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrSimpleStructFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantStructFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantVaryingStructFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrComplexStructFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrFixedArrayFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantArrayFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConformantVaryingArrayFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrVaryingArrayFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrComplexArrayFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrEncapsulatedUnionFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrNonEncapsulatedUnionFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrByteCountPointerFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrXmitOrRepAsFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrUserMarshalFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrInterfacePointerFree(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut u8,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrConvert2(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
            NumberParams: i32,
        );
    }
    extern "C" {
        pub fn NdrConvert(pStubMsg: root::PMIDL_STUB_MESSAGE, pFormat: root::PFORMAT_STRING);
    }
    extern "C" {
        pub fn NdrUserMarshalSimpleTypeConvert(
            pFlags: *mut u32,
            pBuffer: *mut u8,
            FormatChar: u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrClientInitializeNew(
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
            ProcNum: u32,
        );
    }
    extern "C" {
        pub fn NdrServerInitializeNew(
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrServerInitializePartial(
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
            RequestedBufferSize: u32,
        );
    }
    extern "C" {
        pub fn NdrClientInitialize(
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
            ProcNum: u32,
        );
    }
    extern "C" {
        pub fn NdrServerInitialize(
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrServerInitializeUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
            pRpcMsg: root::PRPC_MESSAGE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrServerInitializeMarshall(
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
        );
    }
    extern "C" {
        pub fn NdrGetBuffer(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            BufferLength: u32,
            Handle: root::RPC_BINDING_HANDLE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrNsGetBuffer(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            BufferLength: u32,
            Handle: root::RPC_BINDING_HANDLE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrSendReceive(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pBufferEnd: *mut u8,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrNsSendReceive(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pBufferEnd: *mut u8,
            pAutoHandle: *mut root::RPC_BINDING_HANDLE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn NdrFreeBuffer(pStubMsg: root::PMIDL_STUB_MESSAGE);
    }
    extern "C" {
        pub fn NdrGetDcomProtocolVersion(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pVersion: *mut root::RPC_VERSION,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn NdrClientCall2(
            pStubDescriptor: root::PMIDL_STUB_DESC,
            pFormat: root::PFORMAT_STRING,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    extern "C" {
        pub fn NdrClientCall(
            pStubDescriptor: root::PMIDL_STUB_DESC,
            pFormat: root::PFORMAT_STRING,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    extern "C" {
        pub fn NdrAsyncClientCall(
            pStubDescriptor: root::PMIDL_STUB_DESC,
            pFormat: root::PFORMAT_STRING,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    extern "C" {
        pub fn NdrDcomAsyncClientCall(
            pStubDescriptor: root::PMIDL_STUB_DESC,
            pFormat: root::PFORMAT_STRING,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    pub const STUB_PHASE_STUB_UNMARSHAL: root::STUB_PHASE = 0;
    pub const STUB_PHASE_STUB_CALL_SERVER: root::STUB_PHASE = 1;
    pub const STUB_PHASE_STUB_MARSHAL: root::STUB_PHASE = 2;
    pub const STUB_PHASE_STUB_CALL_SERVER_NO_HRESULT: root::STUB_PHASE = 3;
    pub type STUB_PHASE = i32;
    pub const PROXY_PHASE_PROXY_CALCSIZE: root::PROXY_PHASE = 0;
    pub const PROXY_PHASE_PROXY_GETBUFFER: root::PROXY_PHASE = 1;
    pub const PROXY_PHASE_PROXY_MARSHAL: root::PROXY_PHASE = 2;
    pub const PROXY_PHASE_PROXY_SENDRECEIVE: root::PROXY_PHASE = 3;
    pub const PROXY_PHASE_PROXY_UNMARSHAL: root::PROXY_PHASE = 4;
    pub type PROXY_PHASE = i32;
    extern "C" {
        pub fn NdrAsyncServerCall(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn NdrAsyncStubCall(
            pThis: *mut root::IRpcStubBuffer,
            pChannel: *mut root::IRpcChannelBuffer,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrDcomAsyncStubCall(
            pThis: *mut root::IRpcStubBuffer,
            pChannel: *mut root::IRpcChannelBuffer,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrStubCall2(
            pThis: *mut ::std::os::raw::c_void,
            pChannel: *mut ::std::os::raw::c_void,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrServerCall2(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn NdrStubCall(
            pThis: *mut ::std::os::raw::c_void,
            pChannel: *mut ::std::os::raw::c_void,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrServerCall(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn NdrServerUnmarshall(
            pChannel: *mut ::std::os::raw::c_void,
            pRpcMsg: root::PRPC_MESSAGE,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pStubDescriptor: root::PMIDL_STUB_DESC,
            pFormat: root::PFORMAT_STRING,
            pParamList: *mut ::std::os::raw::c_void,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrServerMarshall(
            pThis: *mut ::std::os::raw::c_void,
            pChannel: *mut ::std::os::raw::c_void,
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn NdrMapCommAndFaultStatus(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pCommStatus: *mut u32,
            pFaultStatus: *mut u32,
            Status: root::RPC_STATUS,
        ) -> root::RPC_STATUS;
    }
    pub type RPC_SS_THREAD_HANDLE = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn RpcSsAllocate(Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn RpcSsDisableAllocate();
    }
    extern "C" {
        pub fn RpcSsEnableAllocate();
    }
    extern "C" {
        pub fn RpcSsFree(NodeToFree: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn RpcSsGetThreadHandle() -> root::RPC_SS_THREAD_HANDLE;
    }
    extern "C" {
        pub fn RpcSsSetClientAllocFree(
            ClientAlloc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
            ClientFree: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        );
    }
    extern "C" {
        pub fn RpcSsSetThreadHandle(Id: root::RPC_SS_THREAD_HANDLE);
    }
    extern "C" {
        pub fn RpcSsSwapClientAllocFree(
            ClientAlloc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
            ClientFree: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
            OldClientAlloc: *mut ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
            OldClientFree: *mut ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        );
    }
    extern "C" {
        pub fn RpcSmAllocate(
            Size: root::size_t,
            pStatus: *mut root::RPC_STATUS,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn RpcSmClientFree(pNodeToFree: *mut ::std::os::raw::c_void) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmDestroyClientContext(
            ContextHandle: *mut *mut ::std::os::raw::c_void,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmDisableAllocate() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmEnableAllocate() -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmFree(NodeToFree: *mut ::std::os::raw::c_void) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmGetThreadHandle(pStatus: *mut root::RPC_STATUS) -> root::RPC_SS_THREAD_HANDLE;
    }
    extern "C" {
        pub fn RpcSmSetClientAllocFree(
            ClientAlloc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
            ClientFree: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmSetThreadHandle(Id: root::RPC_SS_THREAD_HANDLE) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn RpcSmSwapClientAllocFree(
            ClientAlloc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
            ClientFree: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
            OldClientAlloc: *mut ::std::option::Option<
                unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
            >,
            OldClientFree: *mut ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn NdrRpcSsEnableAllocate(pMessage: root::PMIDL_STUB_MESSAGE);
    }
    extern "C" {
        pub fn NdrRpcSsDisableAllocate(pMessage: root::PMIDL_STUB_MESSAGE);
    }
    extern "C" {
        pub fn NdrRpcSmSetClientToOsf(pMessage: root::PMIDL_STUB_MESSAGE);
    }
    extern "C" {
        pub fn NdrRpcSmClientAllocate(Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn NdrRpcSmClientFree(NodeToFree: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn NdrRpcSsDefaultAllocate(Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn NdrRpcSsDefaultFree(NodeToFree: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn NdrFullPointerXlatInit(
            NumberOfPointers: u32,
            XlatSide: root::XLAT_SIDE,
        ) -> root::PFULL_PTR_XLAT_TABLES;
    }
    extern "C" {
        pub fn NdrFullPointerXlatFree(pXlatTables: root::PFULL_PTR_XLAT_TABLES);
    }
    extern "C" {
        pub fn NdrAllocate(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            Len: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn NdrClearOutParameters(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pFormat: root::PFORMAT_STRING,
            ArgAddr: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn NdrOleAllocate(Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn NdrOleFree(NodeToFree: *mut ::std::os::raw::c_void);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
        pub Buffer: *mut ::std::os::raw::c_void,
        pub BufferSize: u32,
        pub pfnAllocate: ::std::option::Option<
            unsafe extern "C" fn(arg1: root::size_t) -> *mut ::std::os::raw::c_void,
        >,
        pub pfnFree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
        pub Reserved: [u64; 5usize],
    }
    pub type NDR_USER_MARSHAL_INFO_LEVEL1 = root::_NDR_USER_MARSHAL_INFO_LEVEL1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _NDR_USER_MARSHAL_INFO {
        pub InformationLevel: u32,
        pub __bindgen_anon_1: root::_NDR_USER_MARSHAL_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _NDR_USER_MARSHAL_INFO__bindgen_ty_1 {
        pub Level1: root::NDR_USER_MARSHAL_INFO_LEVEL1,
    }
    pub type NDR_USER_MARSHAL_INFO = root::_NDR_USER_MARSHAL_INFO;
    extern "C" {
        pub fn NdrGetUserMarshalInfo(
            pFlags: *mut u32,
            InformationLevel: u32,
            pMarshalInfo: *mut root::NDR_USER_MARSHAL_INFO,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn NdrCreateServerInterfaceFromStub(
            pStub: *mut root::IRpcStubBuffer,
            pServerIf: *mut root::RPC_SERVER_INTERFACE,
        ) -> root::RPC_STATUS;
    }
    extern "C" {
        pub fn NdrClientCall3(
            pProxyInfo: *mut root::MIDL_STUBLESS_PROXY_INFO,
            nProcNum: u32,
            pReturnValue: *mut ::std::os::raw::c_void,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    extern "C" {
        pub fn Ndr64AsyncClientCall(
            pProxyInfo: *mut root::MIDL_STUBLESS_PROXY_INFO,
            nProcNum: u32,
            pReturnValue: *mut ::std::os::raw::c_void,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    extern "C" {
        pub fn Ndr64DcomAsyncClientCall(
            pProxyInfo: *mut root::MIDL_STUBLESS_PROXY_INFO,
            nProcNum: u32,
            pReturnValue: *mut ::std::os::raw::c_void,
            ...
        ) -> root::CLIENT_CALL_RETURN;
    }
    extern "C" {
        pub fn Ndr64AsyncServerCall(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn Ndr64AsyncServerCall64(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn Ndr64AsyncServerCallAll(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn Ndr64AsyncStubCall(
            pThis: *mut root::IRpcStubBuffer,
            pChannel: *mut root::IRpcChannelBuffer,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn Ndr64DcomAsyncStubCall(
            pThis: *mut root::IRpcStubBuffer,
            pChannel: *mut root::IRpcChannelBuffer,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrStubCall3(
            pThis: *mut ::std::os::raw::c_void,
            pChannel: *mut ::std::os::raw::c_void,
            pRpcMsg: root::PRPC_MESSAGE,
            pdwStubPhase: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn NdrServerCallAll(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn NdrServerCallNdr64(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn NdrServerCall3(pRpcMsg: root::PRPC_MESSAGE);
    }
    extern "C" {
        pub fn NdrPartialIgnoreClientMarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn NdrPartialIgnoreServerUnmarshall(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn NdrPartialIgnoreClientBufferSize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            pMemory: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn NdrPartialIgnoreServerInitialize(
            pStubMsg: root::PMIDL_STUB_MESSAGE,
            ppMemory: *mut *mut ::std::os::raw::c_void,
            pFormat: root::PFORMAT_STRING,
        );
    }
    extern "C" {
        pub fn RpcUserFree(AsyncHandle: root::handle_t, pBuffer: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub static mut __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type OLECHAR = u16;
    pub type LPOLESTR = *mut root::OLECHAR;
    pub type LPCOLESTR = *const root::OLECHAR;
    pub type DOUBLE = f64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COAUTHIDENTITY {
        pub User: *mut root::USHORT,
        pub UserLength: root::ULONG,
        pub Domain: *mut root::USHORT,
        pub DomainLength: root::ULONG,
        pub Password: *mut root::USHORT,
        pub PasswordLength: root::ULONG,
        pub Flags: root::ULONG,
    }
    pub type COAUTHIDENTITY = root::_COAUTHIDENTITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COAUTHINFO {
        pub dwAuthnSvc: u32,
        pub dwAuthzSvc: u32,
        pub pwszServerPrincName: root::LPWSTR,
        pub dwAuthnLevel: u32,
        pub dwImpersonationLevel: u32,
        pub pAuthIdentityData: *mut root::COAUTHIDENTITY,
        pub dwCapabilities: u32,
    }
    pub type COAUTHINFO = root::_COAUTHINFO;
    pub type SCODE = i32;
    pub type PSCODE = *mut root::SCODE;
    pub const tagMEMCTX_MEMCTX_TASK: root::tagMEMCTX = 1;
    pub const tagMEMCTX_MEMCTX_SHARED: root::tagMEMCTX = 2;
    pub const tagMEMCTX_MEMCTX_MACSYSTEM: root::tagMEMCTX = 3;
    pub const tagMEMCTX_MEMCTX_UNKNOWN: root::tagMEMCTX = -1;
    pub const tagMEMCTX_MEMCTX_SAME: root::tagMEMCTX = -2;
    pub type tagMEMCTX = i32;
    pub use self::super::root::tagMEMCTX as MEMCTX;
    pub const tagCLSCTX_CLSCTX_INPROC_SERVER: root::tagCLSCTX = 1;
    pub const tagCLSCTX_CLSCTX_INPROC_HANDLER: root::tagCLSCTX = 2;
    pub const tagCLSCTX_CLSCTX_LOCAL_SERVER: root::tagCLSCTX = 4;
    pub const tagCLSCTX_CLSCTX_INPROC_SERVER16: root::tagCLSCTX = 8;
    pub const tagCLSCTX_CLSCTX_REMOTE_SERVER: root::tagCLSCTX = 16;
    pub const tagCLSCTX_CLSCTX_INPROC_HANDLER16: root::tagCLSCTX = 32;
    pub const tagCLSCTX_CLSCTX_RESERVED1: root::tagCLSCTX = 64;
    pub const tagCLSCTX_CLSCTX_RESERVED2: root::tagCLSCTX = 128;
    pub const tagCLSCTX_CLSCTX_RESERVED3: root::tagCLSCTX = 256;
    pub const tagCLSCTX_CLSCTX_RESERVED4: root::tagCLSCTX = 512;
    pub const tagCLSCTX_CLSCTX_NO_CODE_DOWNLOAD: root::tagCLSCTX = 1024;
    pub const tagCLSCTX_CLSCTX_RESERVED5: root::tagCLSCTX = 2048;
    pub const tagCLSCTX_CLSCTX_NO_CUSTOM_MARSHAL: root::tagCLSCTX = 4096;
    pub const tagCLSCTX_CLSCTX_ENABLE_CODE_DOWNLOAD: root::tagCLSCTX = 8192;
    pub const tagCLSCTX_CLSCTX_NO_FAILURE_LOG: root::tagCLSCTX = 16384;
    pub const tagCLSCTX_CLSCTX_DISABLE_AAA: root::tagCLSCTX = 32768;
    pub const tagCLSCTX_CLSCTX_ENABLE_AAA: root::tagCLSCTX = 65536;
    pub const tagCLSCTX_CLSCTX_FROM_DEFAULT_CONTEXT: root::tagCLSCTX = 131072;
    pub const tagCLSCTX_CLSCTX_ACTIVATE_X86_SERVER: root::tagCLSCTX = 262144;
    pub const tagCLSCTX_CLSCTX_ACTIVATE_32_BIT_SERVER: root::tagCLSCTX = 262144;
    pub const tagCLSCTX_CLSCTX_ACTIVATE_64_BIT_SERVER: root::tagCLSCTX = 524288;
    pub const tagCLSCTX_CLSCTX_ENABLE_CLOAKING: root::tagCLSCTX = 1048576;
    pub const tagCLSCTX_CLSCTX_APPCONTAINER: root::tagCLSCTX = 4194304;
    pub const tagCLSCTX_CLSCTX_ACTIVATE_AAA_AS_IU: root::tagCLSCTX = 8388608;
    pub const tagCLSCTX_CLSCTX_RESERVED6: root::tagCLSCTX = 16777216;
    pub const tagCLSCTX_CLSCTX_ACTIVATE_ARM32_SERVER: root::tagCLSCTX = 33554432;
    pub const tagCLSCTX_CLSCTX_PS_DLL: root::tagCLSCTX = -2147483648;
    pub type tagCLSCTX = i32;
    pub use self::super::root::tagCLSCTX as CLSCTX;
    pub const tagMSHLFLAGS_MSHLFLAGS_NORMAL: root::tagMSHLFLAGS = 0;
    pub const tagMSHLFLAGS_MSHLFLAGS_TABLESTRONG: root::tagMSHLFLAGS = 1;
    pub const tagMSHLFLAGS_MSHLFLAGS_TABLEWEAK: root::tagMSHLFLAGS = 2;
    pub const tagMSHLFLAGS_MSHLFLAGS_NOPING: root::tagMSHLFLAGS = 4;
    pub const tagMSHLFLAGS_MSHLFLAGS_RESERVED1: root::tagMSHLFLAGS = 8;
    pub const tagMSHLFLAGS_MSHLFLAGS_RESERVED2: root::tagMSHLFLAGS = 16;
    pub const tagMSHLFLAGS_MSHLFLAGS_RESERVED3: root::tagMSHLFLAGS = 32;
    pub const tagMSHLFLAGS_MSHLFLAGS_RESERVED4: root::tagMSHLFLAGS = 64;
    pub type tagMSHLFLAGS = i32;
    pub use self::super::root::tagMSHLFLAGS as MSHLFLAGS;
    pub const tagMSHCTX_MSHCTX_LOCAL: root::tagMSHCTX = 0;
    pub const tagMSHCTX_MSHCTX_NOSHAREDMEM: root::tagMSHCTX = 1;
    pub const tagMSHCTX_MSHCTX_DIFFERENTMACHINE: root::tagMSHCTX = 2;
    pub const tagMSHCTX_MSHCTX_INPROC: root::tagMSHCTX = 3;
    pub const tagMSHCTX_MSHCTX_CROSSCTX: root::tagMSHCTX = 4;
    pub const tagMSHCTX_MSHCTX_RESERVED1: root::tagMSHCTX = 5;
    pub type tagMSHCTX = i32;
    pub use self::super::root::tagMSHCTX as MSHCTX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BYTE_BLOB {
        pub clSize: root::ULONG,
        pub abData: [root::byte; 1usize],
    }
    pub type BYTE_BLOB = root::_BYTE_BLOB;
    pub type UP_BYTE_BLOB = *mut root::BYTE_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WORD_BLOB {
        pub clSize: root::ULONG,
        pub asData: [u16; 1usize],
    }
    pub type WORD_BLOB = root::_WORD_BLOB;
    pub type UP_WORD_BLOB = *mut root::WORD_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DWORD_BLOB {
        pub clSize: root::ULONG,
        pub alData: [root::ULONG; 1usize],
    }
    pub type DWORD_BLOB = root::_DWORD_BLOB;
    pub type UP_DWORD_BLOB = *mut root::DWORD_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FLAGGED_BYTE_BLOB {
        pub fFlags: root::ULONG,
        pub clSize: root::ULONG,
        pub abData: [root::byte; 1usize],
    }
    pub type FLAGGED_BYTE_BLOB = root::_FLAGGED_BYTE_BLOB;
    pub type UP_FLAGGED_BYTE_BLOB = *mut root::FLAGGED_BYTE_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FLAGGED_WORD_BLOB {
        pub fFlags: root::ULONG,
        pub clSize: root::ULONG,
        pub asData: [u16; 1usize],
    }
    pub type FLAGGED_WORD_BLOB = root::_FLAGGED_WORD_BLOB;
    pub type UP_FLAGGED_WORD_BLOB = *mut root::FLAGGED_WORD_BLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BYTE_SIZEDARR {
        pub clSize: root::ULONG,
        pub pData: *mut root::byte,
    }
    pub type BYTE_SIZEDARR = root::_BYTE_SIZEDARR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHORT_SIZEDARR {
        pub clSize: root::ULONG,
        pub pData: *mut u16,
    }
    pub type WORD_SIZEDARR = root::_SHORT_SIZEDARR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LONG_SIZEDARR {
        pub clSize: root::ULONG,
        pub pData: *mut root::ULONG,
    }
    pub type DWORD_SIZEDARR = root::_LONG_SIZEDARR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HYPER_SIZEDARR {
        pub clSize: root::ULONG,
        pub pData: *mut i64,
    }
    pub type HYPER_SIZEDARR = root::_HYPER_SIZEDARR;
    extern "C" {
        pub static mut IWinTypesBase_v0_1_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut IWinTypesBase_v0_1_s_ifspec: root::RPC_IF_HANDLE;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBLOB {
        pub cbSize: root::ULONG,
        pub pBlobData: *mut u8,
    }
    pub type BLOB = root::tagBLOB;
    pub type LPBLOB = *mut root::tagBLOB;
    extern "C" {
        pub static mut __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemHGLOBAL {
        pub fNullHGlobal: i32,
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemHGLOBAL = root::tagRemHGLOBAL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemHMETAFILEPICT {
        pub mm: i32,
        pub xExt: i32,
        pub yExt: i32,
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemHMETAFILEPICT = root::tagRemHMETAFILEPICT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemHENHMETAFILE {
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemHENHMETAFILE = root::tagRemHENHMETAFILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemHBITMAP {
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemHBITMAP = root::tagRemHBITMAP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemHPALETTE {
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemHPALETTE = root::tagRemHPALETTE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemBRUSH {
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemHBRUSH = root::tagRemBRUSH;
    pub const tagDVASPECT_DVASPECT_CONTENT: root::tagDVASPECT = 1;
    pub const tagDVASPECT_DVASPECT_THUMBNAIL: root::tagDVASPECT = 2;
    pub const tagDVASPECT_DVASPECT_ICON: root::tagDVASPECT = 4;
    pub const tagDVASPECT_DVASPECT_DOCPRINT: root::tagDVASPECT = 8;
    pub type tagDVASPECT = i32;
    pub use self::super::root::tagDVASPECT as DVASPECT;
    pub const tagSTGC_STGC_DEFAULT: root::tagSTGC = 0;
    pub const tagSTGC_STGC_OVERWRITE: root::tagSTGC = 1;
    pub const tagSTGC_STGC_ONLYIFCURRENT: root::tagSTGC = 2;
    pub const tagSTGC_STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE: root::tagSTGC = 4;
    pub const tagSTGC_STGC_CONSOLIDATE: root::tagSTGC = 8;
    pub type tagSTGC = i32;
    pub use self::super::root::tagSTGC as STGC;
    pub const tagSTGMOVE_STGMOVE_MOVE: root::tagSTGMOVE = 0;
    pub const tagSTGMOVE_STGMOVE_COPY: root::tagSTGMOVE = 1;
    pub const tagSTGMOVE_STGMOVE_SHALLOWCOPY: root::tagSTGMOVE = 2;
    pub type tagSTGMOVE = i32;
    pub use self::super::root::tagSTGMOVE as STGMOVE;
    pub const tagSTATFLAG_STATFLAG_DEFAULT: root::tagSTATFLAG = 0;
    pub const tagSTATFLAG_STATFLAG_NONAME: root::tagSTATFLAG = 1;
    pub const tagSTATFLAG_STATFLAG_NOOPEN: root::tagSTATFLAG = 2;
    pub type tagSTATFLAG = i32;
    pub use self::super::root::tagSTATFLAG as STATFLAG;
    pub type HCONTEXT = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userCLIPFORMAT {
        pub fContext: i32,
        pub u: root::_userCLIPFORMAT___MIDL_IWinTypes_0001,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userCLIPFORMAT___MIDL_IWinTypes_0001 {
        pub dwValue: u32,
        pub pwszName: *mut u16,
    }
    pub type userCLIPFORMAT = root::_userCLIPFORMAT;
    pub type wireCLIPFORMAT = *mut root::userCLIPFORMAT;
    pub type CLIPFORMAT = u16;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _GDI_NONREMOTE {
        pub fContext: i32,
        pub u: root::_GDI_NONREMOTE___MIDL_IWinTypes_0002,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _GDI_NONREMOTE___MIDL_IWinTypes_0002 {
        pub hInproc: i32,
        pub hRemote: *mut root::DWORD_BLOB,
    }
    pub type GDI_NONREMOTE = root::_GDI_NONREMOTE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userHGLOBAL {
        pub fContext: i32,
        pub u: root::_userHGLOBAL___MIDL_IWinTypes_0003,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userHGLOBAL___MIDL_IWinTypes_0003 {
        pub hInproc: i32,
        pub hRemote: *mut root::FLAGGED_BYTE_BLOB,
        pub hInproc64: i64,
    }
    pub type userHGLOBAL = root::_userHGLOBAL;
    pub type wireHGLOBAL = *mut root::userHGLOBAL;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userHMETAFILE {
        pub fContext: i32,
        pub u: root::_userHMETAFILE___MIDL_IWinTypes_0004,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userHMETAFILE___MIDL_IWinTypes_0004 {
        pub hInproc: i32,
        pub hRemote: *mut root::BYTE_BLOB,
        pub hInproc64: i64,
    }
    pub type userHMETAFILE = root::_userHMETAFILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _remoteMETAFILEPICT {
        pub mm: i32,
        pub xExt: i32,
        pub yExt: i32,
        pub hMF: *mut root::userHMETAFILE,
    }
    pub type remoteMETAFILEPICT = root::_remoteMETAFILEPICT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userHMETAFILEPICT {
        pub fContext: i32,
        pub u: root::_userHMETAFILEPICT___MIDL_IWinTypes_0005,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userHMETAFILEPICT___MIDL_IWinTypes_0005 {
        pub hInproc: i32,
        pub hRemote: *mut root::remoteMETAFILEPICT,
        pub hInproc64: i64,
    }
    pub type userHMETAFILEPICT = root::_userHMETAFILEPICT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userHENHMETAFILE {
        pub fContext: i32,
        pub u: root::_userHENHMETAFILE___MIDL_IWinTypes_0006,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userHENHMETAFILE___MIDL_IWinTypes_0006 {
        pub hInproc: i32,
        pub hRemote: *mut root::BYTE_BLOB,
        pub hInproc64: i64,
    }
    pub type userHENHMETAFILE = root::_userHENHMETAFILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _userBITMAP {
        pub bmType: i32,
        pub bmWidth: i32,
        pub bmHeight: i32,
        pub bmWidthBytes: i32,
        pub bmPlanes: u16,
        pub bmBitsPixel: u16,
        pub cbSize: root::ULONG,
        pub pBuffer: [root::byte; 1usize],
    }
    pub type userBITMAP = root::_userBITMAP;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userHBITMAP {
        pub fContext: i32,
        pub u: root::_userHBITMAP___MIDL_IWinTypes_0007,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userHBITMAP___MIDL_IWinTypes_0007 {
        pub hInproc: i32,
        pub hRemote: *mut root::userBITMAP,
        pub hInproc64: i64,
    }
    pub type userHBITMAP = root::_userHBITMAP;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userHPALETTE {
        pub fContext: i32,
        pub u: root::_userHPALETTE___MIDL_IWinTypes_0008,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userHPALETTE___MIDL_IWinTypes_0008 {
        pub hInproc: i32,
        pub hRemote: *mut root::LOGPALETTE,
        pub hInproc64: i64,
    }
    pub type userHPALETTE = root::_userHPALETTE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RemotableHandle {
        pub fContext: i32,
        pub u: root::_RemotableHandle___MIDL_IWinTypes_0009,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _RemotableHandle___MIDL_IWinTypes_0009 {
        pub hInproc: i32,
        pub hRemote: i32,
    }
    pub type RemotableHandle = root::_RemotableHandle;
    pub type wireHWND = *mut root::RemotableHandle;
    pub type wireHMENU = *mut root::RemotableHandle;
    pub type wireHACCEL = *mut root::RemotableHandle;
    pub type wireHBRUSH = *mut root::RemotableHandle;
    pub type wireHFONT = *mut root::RemotableHandle;
    pub type wireHDC = *mut root::RemotableHandle;
    pub type wireHICON = *mut root::RemotableHandle;
    pub type wireHRGN = *mut root::RemotableHandle;
    pub type wireHMONITOR = *mut root::RemotableHandle;
    pub type wireHBITMAP = *mut root::userHBITMAP;
    pub type wireHPALETTE = *mut root::userHPALETTE;
    pub type wireHENHMETAFILE = *mut root::userHENHMETAFILE;
    pub type wireHMETAFILE = *mut root::userHMETAFILE;
    pub type wireHMETAFILEPICT = *mut root::userHMETAFILEPICT;
    pub type HMETAFILEPICT = *mut ::std::os::raw::c_void;
    extern "C" {
        pub static mut IWinTypes_v0_1_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut IWinTypes_v0_1_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type DATE = f64;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagCY {
        pub __bindgen_anon_1: root::tagCY__bindgen_ty_1,
        pub int64: root::LONGLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCY__bindgen_ty_1 {
        pub Lo: root::ULONG,
        pub Hi: i32,
    }
    pub type CY = root::tagCY;
    pub type LPCY = *mut root::CY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagDEC {
        pub wReserved: root::USHORT,
        pub __bindgen_anon_1: root::tagDEC__bindgen_ty_1,
        pub Hi32: root::ULONG,
        pub __bindgen_anon_2: root::tagDEC__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagDEC__bindgen_ty_1 {
        pub __bindgen_anon_1: root::tagDEC__bindgen_ty_1__bindgen_ty_1,
        pub signscale: root::USHORT,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDEC__bindgen_ty_1__bindgen_ty_1 {
        pub scale: u8,
        pub sign: u8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagDEC__bindgen_ty_2 {
        pub __bindgen_anon_1: root::tagDEC__bindgen_ty_2__bindgen_ty_1,
        pub Lo64: root::ULONGLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDEC__bindgen_ty_2__bindgen_ty_1 {
        pub Lo32: root::ULONG,
        pub Mid32: root::ULONG,
    }
    pub type DECIMAL = root::tagDEC;
    pub type LPDECIMAL = *mut root::DECIMAL;
    pub type wireBSTR = *mut root::FLAGGED_WORD_BLOB;
    pub type BSTR = *mut root::OLECHAR;
    pub type LPBSTR = *mut root::BSTR;
    pub type VARIANT_BOOL = i16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBSTRBLOB {
        pub cbSize: root::ULONG,
        pub pData: *mut u8,
    }
    pub type BSTRBLOB = root::tagBSTRBLOB;
    pub type LPBSTRBLOB = *mut root::tagBSTRBLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCLIPDATA {
        pub cbSize: root::ULONG,
        pub ulClipFmt: i32,
        pub pClipData: *mut u8,
    }
    pub type CLIPDATA = root::tagCLIPDATA;
    pub type VARTYPE = u16;
    pub const VARENUM_VT_EMPTY: root::VARENUM = 0;
    pub const VARENUM_VT_NULL: root::VARENUM = 1;
    pub const VARENUM_VT_I2: root::VARENUM = 2;
    pub const VARENUM_VT_I4: root::VARENUM = 3;
    pub const VARENUM_VT_R4: root::VARENUM = 4;
    pub const VARENUM_VT_R8: root::VARENUM = 5;
    pub const VARENUM_VT_CY: root::VARENUM = 6;
    pub const VARENUM_VT_DATE: root::VARENUM = 7;
    pub const VARENUM_VT_BSTR: root::VARENUM = 8;
    pub const VARENUM_VT_DISPATCH: root::VARENUM = 9;
    pub const VARENUM_VT_ERROR: root::VARENUM = 10;
    pub const VARENUM_VT_BOOL: root::VARENUM = 11;
    pub const VARENUM_VT_VARIANT: root::VARENUM = 12;
    pub const VARENUM_VT_UNKNOWN: root::VARENUM = 13;
    pub const VARENUM_VT_DECIMAL: root::VARENUM = 14;
    pub const VARENUM_VT_I1: root::VARENUM = 16;
    pub const VARENUM_VT_UI1: root::VARENUM = 17;
    pub const VARENUM_VT_UI2: root::VARENUM = 18;
    pub const VARENUM_VT_UI4: root::VARENUM = 19;
    pub const VARENUM_VT_I8: root::VARENUM = 20;
    pub const VARENUM_VT_UI8: root::VARENUM = 21;
    pub const VARENUM_VT_INT: root::VARENUM = 22;
    pub const VARENUM_VT_UINT: root::VARENUM = 23;
    pub const VARENUM_VT_VOID: root::VARENUM = 24;
    pub const VARENUM_VT_HRESULT: root::VARENUM = 25;
    pub const VARENUM_VT_PTR: root::VARENUM = 26;
    pub const VARENUM_VT_SAFEARRAY: root::VARENUM = 27;
    pub const VARENUM_VT_CARRAY: root::VARENUM = 28;
    pub const VARENUM_VT_USERDEFINED: root::VARENUM = 29;
    pub const VARENUM_VT_LPSTR: root::VARENUM = 30;
    pub const VARENUM_VT_LPWSTR: root::VARENUM = 31;
    pub const VARENUM_VT_RECORD: root::VARENUM = 36;
    pub const VARENUM_VT_INT_PTR: root::VARENUM = 37;
    pub const VARENUM_VT_UINT_PTR: root::VARENUM = 38;
    pub const VARENUM_VT_FILETIME: root::VARENUM = 64;
    pub const VARENUM_VT_BLOB: root::VARENUM = 65;
    pub const VARENUM_VT_STREAM: root::VARENUM = 66;
    pub const VARENUM_VT_STORAGE: root::VARENUM = 67;
    pub const VARENUM_VT_STREAMED_OBJECT: root::VARENUM = 68;
    pub const VARENUM_VT_STORED_OBJECT: root::VARENUM = 69;
    pub const VARENUM_VT_BLOB_OBJECT: root::VARENUM = 70;
    pub const VARENUM_VT_CF: root::VARENUM = 71;
    pub const VARENUM_VT_CLSID: root::VARENUM = 72;
    pub const VARENUM_VT_VERSIONED_STREAM: root::VARENUM = 73;
    pub const VARENUM_VT_BSTR_BLOB: root::VARENUM = 4095;
    pub const VARENUM_VT_VECTOR: root::VARENUM = 4096;
    pub const VARENUM_VT_ARRAY: root::VARENUM = 8192;
    pub const VARENUM_VT_BYREF: root::VARENUM = 16384;
    pub const VARENUM_VT_RESERVED: root::VARENUM = 32768;
    pub const VARENUM_VT_ILLEGAL: root::VARENUM = 65535;
    pub const VARENUM_VT_ILLEGALMASKED: root::VARENUM = 4095;
    pub const VARENUM_VT_TYPEMASK: root::VARENUM = 4095;
    pub type VARENUM = i32;
    pub type PROPID = root::ULONG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagpropertykey {
        pub fmtid: root::GUID,
        pub pid: u32,
    }
    pub type PROPERTYKEY = root::_tagpropertykey;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCSPLATFORM {
        pub dwPlatformId: u32,
        pub dwVersionHi: u32,
        pub dwVersionLo: u32,
        pub dwProcessorArch: u32,
    }
    pub type CSPLATFORM = root::tagCSPLATFORM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagQUERYCONTEXT {
        pub dwContext: u32,
        pub Platform: root::CSPLATFORM,
        pub Locale: root::LCID,
        pub dwVersionHi: u32,
        pub dwVersionLo: u32,
    }
    pub type QUERYCONTEXT = root::tagQUERYCONTEXT;
    pub const tagTYSPEC_TYSPEC_CLSID: root::tagTYSPEC = 0;
    pub const tagTYSPEC_TYSPEC_FILEEXT: root::tagTYSPEC = 1;
    pub const tagTYSPEC_TYSPEC_MIMETYPE: root::tagTYSPEC = 2;
    pub const tagTYSPEC_TYSPEC_FILENAME: root::tagTYSPEC = 3;
    pub const tagTYSPEC_TYSPEC_PROGID: root::tagTYSPEC = 4;
    pub const tagTYSPEC_TYSPEC_PACKAGENAME: root::tagTYSPEC = 5;
    pub const tagTYSPEC_TYSPEC_OBJECTID: root::tagTYSPEC = 6;
    pub type tagTYSPEC = i32;
    pub use self::super::root::tagTYSPEC as TYSPEC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __MIDL___MIDL_itf_wtypes_0000_0001_0001 {
        pub tyspec: u32,
        pub tagged_union:
            root::__MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005 { pub clsid : root :: CLSID , pub pFileExt : root :: LPOLESTR , pub pMimeType : root :: LPOLESTR , pub pProgId : root :: LPOLESTR , pub pFileName : root :: LPOLESTR , pub ByName : root :: __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_1 , pub ByObjectId : root :: __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_2 , }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_1
    {
        pub pPackageName: root::LPOLESTR,
        pub PolicyId: root::GUID,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_2
    {
        pub ObjectId: root::GUID,
        pub PolicyId: root::GUID,
    }
    pub type uCLSSPEC = root::__MIDL___MIDL_itf_wtypes_0000_0001_0001;
    extern "C" {
        pub static mut __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_DISK: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_CDROM: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_PARTITION: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_TAPE: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_WRITEONCEDISK: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_VOLUME: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_MEDIUMCHANGER: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_FLOPPY: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_CDCHANGER: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_STORAGEPORT: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_VMLUN: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_SES: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_SERVICE_VOLUME: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_HIDDEN_VOLUME: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE: root::GUID;
    }
    extern "C" {
        pub static GUID_SCM_PD_HEALTH_NOTIFICATION: root::GUID;
    }
    extern "C" {
        pub static GUID_SCM_PD_PASSTHROUGH_INVDIMM: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_COMPORT: root::GUID;
    }
    extern "C" {
        pub static GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR: root::GUID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HOTPLUG_INFO {
        pub Size: u32,
        pub MediaRemovable: root::BOOLEAN,
        pub MediaHotplug: root::BOOLEAN,
        pub DeviceHotplug: root::BOOLEAN,
        pub WriteCacheEnableOverride: root::BOOLEAN,
    }
    pub type STORAGE_HOTPLUG_INFO = root::_STORAGE_HOTPLUG_INFO;
    pub type PSTORAGE_HOTPLUG_INFO = *mut root::_STORAGE_HOTPLUG_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_NUMBER {
        pub DeviceType: u32,
        pub DeviceNumber: u32,
        pub PartitionNumber: u32,
    }
    pub type STORAGE_DEVICE_NUMBER = root::_STORAGE_DEVICE_NUMBER;
    pub type PSTORAGE_DEVICE_NUMBER = *mut root::_STORAGE_DEVICE_NUMBER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_NUMBERS {
        pub Version: u32,
        pub Size: u32,
        pub NumberOfDevices: u32,
        pub Devices: [root::STORAGE_DEVICE_NUMBER; 1usize],
    }
    pub type STORAGE_DEVICE_NUMBERS = root::_STORAGE_DEVICE_NUMBERS;
    pub type PSTORAGE_DEVICE_NUMBERS = *mut root::_STORAGE_DEVICE_NUMBERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_NUMBER_EX {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub DeviceType: u32,
        pub DeviceNumber: u32,
        pub DeviceGuid: root::GUID,
        pub PartitionNumber: u32,
    }
    pub type STORAGE_DEVICE_NUMBER_EX = root::_STORAGE_DEVICE_NUMBER_EX;
    pub type PSTORAGE_DEVICE_NUMBER_EX = *mut root::_STORAGE_DEVICE_NUMBER_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_BUS_RESET_REQUEST {
        pub PathId: u8,
    }
    pub type STORAGE_BUS_RESET_REQUEST = root::_STORAGE_BUS_RESET_REQUEST;
    pub type PSTORAGE_BUS_RESET_REQUEST = *mut root::_STORAGE_BUS_RESET_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct STORAGE_BREAK_RESERVATION_REQUEST {
        pub Length: u32,
        pub _unused: u8,
        pub PathId: u8,
        pub TargetId: u8,
        pub Lun: u8,
    }
    pub type PSTORAGE_BREAK_RESERVATION_REQUEST = *mut root::STORAGE_BREAK_RESERVATION_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PREVENT_MEDIA_REMOVAL {
        pub PreventMediaRemoval: root::BOOLEAN,
    }
    pub type PREVENT_MEDIA_REMOVAL = root::_PREVENT_MEDIA_REMOVAL;
    pub type PPREVENT_MEDIA_REMOVAL = *mut root::_PREVENT_MEDIA_REMOVAL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CLASS_MEDIA_CHANGE_CONTEXT {
        pub MediaChangeCount: u32,
        pub NewState: u32,
    }
    pub type CLASS_MEDIA_CHANGE_CONTEXT = root::_CLASS_MEDIA_CHANGE_CONTEXT;
    pub type PCLASS_MEDIA_CHANGE_CONTEXT = *mut root::_CLASS_MEDIA_CHANGE_CONTEXT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TAPE_STATISTICS {
        pub Version: u32,
        pub Flags: u32,
        pub RecoveredWrites: root::LARGE_INTEGER,
        pub UnrecoveredWrites: root::LARGE_INTEGER,
        pub RecoveredReads: root::LARGE_INTEGER,
        pub UnrecoveredReads: root::LARGE_INTEGER,
        pub CompressionRatioReads: u8,
        pub CompressionRatioWrites: u8,
    }
    pub type TAPE_STATISTICS = root::_TAPE_STATISTICS;
    pub type PTAPE_STATISTICS = *mut root::_TAPE_STATISTICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TAPE_GET_STATISTICS {
        pub Operation: u32,
    }
    pub type TAPE_GET_STATISTICS = root::_TAPE_GET_STATISTICS;
    pub type PTAPE_GET_STATISTICS = *mut root::_TAPE_GET_STATISTICS;
    pub const _STORAGE_MEDIA_TYPE_DDS_4mm: root::_STORAGE_MEDIA_TYPE = 32;
    pub const _STORAGE_MEDIA_TYPE_MiniQic: root::_STORAGE_MEDIA_TYPE = 33;
    pub const _STORAGE_MEDIA_TYPE_Travan: root::_STORAGE_MEDIA_TYPE = 34;
    pub const _STORAGE_MEDIA_TYPE_QIC: root::_STORAGE_MEDIA_TYPE = 35;
    pub const _STORAGE_MEDIA_TYPE_MP_8mm: root::_STORAGE_MEDIA_TYPE = 36;
    pub const _STORAGE_MEDIA_TYPE_AME_8mm: root::_STORAGE_MEDIA_TYPE = 37;
    pub const _STORAGE_MEDIA_TYPE_AIT1_8mm: root::_STORAGE_MEDIA_TYPE = 38;
    pub const _STORAGE_MEDIA_TYPE_DLT: root::_STORAGE_MEDIA_TYPE = 39;
    pub const _STORAGE_MEDIA_TYPE_NCTP: root::_STORAGE_MEDIA_TYPE = 40;
    pub const _STORAGE_MEDIA_TYPE_IBM_3480: root::_STORAGE_MEDIA_TYPE = 41;
    pub const _STORAGE_MEDIA_TYPE_IBM_3490E: root::_STORAGE_MEDIA_TYPE = 42;
    pub const _STORAGE_MEDIA_TYPE_IBM_Magstar_3590: root::_STORAGE_MEDIA_TYPE = 43;
    pub const _STORAGE_MEDIA_TYPE_IBM_Magstar_MP: root::_STORAGE_MEDIA_TYPE = 44;
    pub const _STORAGE_MEDIA_TYPE_STK_DATA_D3: root::_STORAGE_MEDIA_TYPE = 45;
    pub const _STORAGE_MEDIA_TYPE_SONY_DTF: root::_STORAGE_MEDIA_TYPE = 46;
    pub const _STORAGE_MEDIA_TYPE_DV_6mm: root::_STORAGE_MEDIA_TYPE = 47;
    pub const _STORAGE_MEDIA_TYPE_DMI: root::_STORAGE_MEDIA_TYPE = 48;
    pub const _STORAGE_MEDIA_TYPE_SONY_D2: root::_STORAGE_MEDIA_TYPE = 49;
    pub const _STORAGE_MEDIA_TYPE_CLEANER_CARTRIDGE: root::_STORAGE_MEDIA_TYPE = 50;
    pub const _STORAGE_MEDIA_TYPE_CD_ROM: root::_STORAGE_MEDIA_TYPE = 51;
    pub const _STORAGE_MEDIA_TYPE_CD_R: root::_STORAGE_MEDIA_TYPE = 52;
    pub const _STORAGE_MEDIA_TYPE_CD_RW: root::_STORAGE_MEDIA_TYPE = 53;
    pub const _STORAGE_MEDIA_TYPE_DVD_ROM: root::_STORAGE_MEDIA_TYPE = 54;
    pub const _STORAGE_MEDIA_TYPE_DVD_R: root::_STORAGE_MEDIA_TYPE = 55;
    pub const _STORAGE_MEDIA_TYPE_DVD_RW: root::_STORAGE_MEDIA_TYPE = 56;
    pub const _STORAGE_MEDIA_TYPE_MO_3_RW: root::_STORAGE_MEDIA_TYPE = 57;
    pub const _STORAGE_MEDIA_TYPE_MO_5_WO: root::_STORAGE_MEDIA_TYPE = 58;
    pub const _STORAGE_MEDIA_TYPE_MO_5_RW: root::_STORAGE_MEDIA_TYPE = 59;
    pub const _STORAGE_MEDIA_TYPE_MO_5_LIMDOW: root::_STORAGE_MEDIA_TYPE = 60;
    pub const _STORAGE_MEDIA_TYPE_PC_5_WO: root::_STORAGE_MEDIA_TYPE = 61;
    pub const _STORAGE_MEDIA_TYPE_PC_5_RW: root::_STORAGE_MEDIA_TYPE = 62;
    pub const _STORAGE_MEDIA_TYPE_PD_5_RW: root::_STORAGE_MEDIA_TYPE = 63;
    pub const _STORAGE_MEDIA_TYPE_ABL_5_WO: root::_STORAGE_MEDIA_TYPE = 64;
    pub const _STORAGE_MEDIA_TYPE_PINNACLE_APEX_5_RW: root::_STORAGE_MEDIA_TYPE = 65;
    pub const _STORAGE_MEDIA_TYPE_SONY_12_WO: root::_STORAGE_MEDIA_TYPE = 66;
    pub const _STORAGE_MEDIA_TYPE_PHILIPS_12_WO: root::_STORAGE_MEDIA_TYPE = 67;
    pub const _STORAGE_MEDIA_TYPE_HITACHI_12_WO: root::_STORAGE_MEDIA_TYPE = 68;
    pub const _STORAGE_MEDIA_TYPE_CYGNET_12_WO: root::_STORAGE_MEDIA_TYPE = 69;
    pub const _STORAGE_MEDIA_TYPE_KODAK_14_WO: root::_STORAGE_MEDIA_TYPE = 70;
    pub const _STORAGE_MEDIA_TYPE_MO_NFR_525: root::_STORAGE_MEDIA_TYPE = 71;
    pub const _STORAGE_MEDIA_TYPE_NIKON_12_RW: root::_STORAGE_MEDIA_TYPE = 72;
    pub const _STORAGE_MEDIA_TYPE_IOMEGA_ZIP: root::_STORAGE_MEDIA_TYPE = 73;
    pub const _STORAGE_MEDIA_TYPE_IOMEGA_JAZ: root::_STORAGE_MEDIA_TYPE = 74;
    pub const _STORAGE_MEDIA_TYPE_SYQUEST_EZ135: root::_STORAGE_MEDIA_TYPE = 75;
    pub const _STORAGE_MEDIA_TYPE_SYQUEST_EZFLYER: root::_STORAGE_MEDIA_TYPE = 76;
    pub const _STORAGE_MEDIA_TYPE_SYQUEST_SYJET: root::_STORAGE_MEDIA_TYPE = 77;
    pub const _STORAGE_MEDIA_TYPE_AVATAR_F2: root::_STORAGE_MEDIA_TYPE = 78;
    pub const _STORAGE_MEDIA_TYPE_MP2_8mm: root::_STORAGE_MEDIA_TYPE = 79;
    pub const _STORAGE_MEDIA_TYPE_DST_S: root::_STORAGE_MEDIA_TYPE = 80;
    pub const _STORAGE_MEDIA_TYPE_DST_M: root::_STORAGE_MEDIA_TYPE = 81;
    pub const _STORAGE_MEDIA_TYPE_DST_L: root::_STORAGE_MEDIA_TYPE = 82;
    pub const _STORAGE_MEDIA_TYPE_VXATape_1: root::_STORAGE_MEDIA_TYPE = 83;
    pub const _STORAGE_MEDIA_TYPE_VXATape_2: root::_STORAGE_MEDIA_TYPE = 84;
    pub const _STORAGE_MEDIA_TYPE_STK_9840: root::_STORAGE_MEDIA_TYPE = 85;
    pub const _STORAGE_MEDIA_TYPE_LTO_Ultrium: root::_STORAGE_MEDIA_TYPE = 86;
    pub const _STORAGE_MEDIA_TYPE_LTO_Accelis: root::_STORAGE_MEDIA_TYPE = 87;
    pub const _STORAGE_MEDIA_TYPE_DVD_RAM: root::_STORAGE_MEDIA_TYPE = 88;
    pub const _STORAGE_MEDIA_TYPE_AIT_8mm: root::_STORAGE_MEDIA_TYPE = 89;
    pub const _STORAGE_MEDIA_TYPE_ADR_1: root::_STORAGE_MEDIA_TYPE = 90;
    pub const _STORAGE_MEDIA_TYPE_ADR_2: root::_STORAGE_MEDIA_TYPE = 91;
    pub const _STORAGE_MEDIA_TYPE_STK_9940: root::_STORAGE_MEDIA_TYPE = 92;
    pub const _STORAGE_MEDIA_TYPE_SAIT: root::_STORAGE_MEDIA_TYPE = 93;
    pub const _STORAGE_MEDIA_TYPE_VXATape: root::_STORAGE_MEDIA_TYPE = 94;
    pub type _STORAGE_MEDIA_TYPE = i32;
    pub use self::super::root::_STORAGE_MEDIA_TYPE as STORAGE_MEDIA_TYPE;
    pub type PSTORAGE_MEDIA_TYPE = *mut root::_STORAGE_MEDIA_TYPE;
    pub const _STORAGE_BUS_TYPE_BusTypeUnknown: root::_STORAGE_BUS_TYPE = 0;
    pub const _STORAGE_BUS_TYPE_BusTypeScsi: root::_STORAGE_BUS_TYPE = 1;
    pub const _STORAGE_BUS_TYPE_BusTypeAtapi: root::_STORAGE_BUS_TYPE = 2;
    pub const _STORAGE_BUS_TYPE_BusTypeAta: root::_STORAGE_BUS_TYPE = 3;
    pub const _STORAGE_BUS_TYPE_BusType1394: root::_STORAGE_BUS_TYPE = 4;
    pub const _STORAGE_BUS_TYPE_BusTypeSsa: root::_STORAGE_BUS_TYPE = 5;
    pub const _STORAGE_BUS_TYPE_BusTypeFibre: root::_STORAGE_BUS_TYPE = 6;
    pub const _STORAGE_BUS_TYPE_BusTypeUsb: root::_STORAGE_BUS_TYPE = 7;
    pub const _STORAGE_BUS_TYPE_BusTypeRAID: root::_STORAGE_BUS_TYPE = 8;
    pub const _STORAGE_BUS_TYPE_BusTypeiScsi: root::_STORAGE_BUS_TYPE = 9;
    pub const _STORAGE_BUS_TYPE_BusTypeSas: root::_STORAGE_BUS_TYPE = 10;
    pub const _STORAGE_BUS_TYPE_BusTypeSata: root::_STORAGE_BUS_TYPE = 11;
    pub const _STORAGE_BUS_TYPE_BusTypeSd: root::_STORAGE_BUS_TYPE = 12;
    pub const _STORAGE_BUS_TYPE_BusTypeMmc: root::_STORAGE_BUS_TYPE = 13;
    pub const _STORAGE_BUS_TYPE_BusTypeVirtual: root::_STORAGE_BUS_TYPE = 14;
    pub const _STORAGE_BUS_TYPE_BusTypeFileBackedVirtual: root::_STORAGE_BUS_TYPE = 15;
    pub const _STORAGE_BUS_TYPE_BusTypeSpaces: root::_STORAGE_BUS_TYPE = 16;
    pub const _STORAGE_BUS_TYPE_BusTypeNvme: root::_STORAGE_BUS_TYPE = 17;
    pub const _STORAGE_BUS_TYPE_BusTypeSCM: root::_STORAGE_BUS_TYPE = 18;
    pub const _STORAGE_BUS_TYPE_BusTypeUfs: root::_STORAGE_BUS_TYPE = 19;
    pub const _STORAGE_BUS_TYPE_BusTypeMax: root::_STORAGE_BUS_TYPE = 20;
    pub const _STORAGE_BUS_TYPE_BusTypeMaxReserved: root::_STORAGE_BUS_TYPE = 127;
    pub type _STORAGE_BUS_TYPE = i32;
    pub use self::super::root::_STORAGE_BUS_TYPE as STORAGE_BUS_TYPE;
    pub type PSTORAGE_BUS_TYPE = *mut root::_STORAGE_BUS_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_MEDIA_INFO {
        pub DeviceSpecific: root::_DEVICE_MEDIA_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DEVICE_MEDIA_INFO__bindgen_ty_1 {
        pub DiskInfo: root::_DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_1,
        pub RemovableDiskInfo: root::_DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_2,
        pub TapeInfo: root::_DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub Cylinders: root::LARGE_INTEGER,
        pub MediaType: root::STORAGE_MEDIA_TYPE,
        pub TracksPerCylinder: u32,
        pub SectorsPerTrack: u32,
        pub BytesPerSector: u32,
        pub NumberMediaSides: u32,
        pub MediaCharacteristics: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_2 {
        pub Cylinders: root::LARGE_INTEGER,
        pub MediaType: root::STORAGE_MEDIA_TYPE,
        pub TracksPerCylinder: u32,
        pub SectorsPerTrack: u32,
        pub BytesPerSector: u32,
        pub NumberMediaSides: u32,
        pub MediaCharacteristics: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3 {
        pub MediaType: root::STORAGE_MEDIA_TYPE,
        pub MediaCharacteristics: u32,
        pub CurrentBlockSize: u32,
        pub BusType: root::STORAGE_BUS_TYPE,
        pub BusSpecificData: root::_DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
        pub ScsiInformation:
            root::_DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
        pub MediumType: u8,
        pub DensityCode: u8,
    }
    pub type DEVICE_MEDIA_INFO = root::_DEVICE_MEDIA_INFO;
    pub type PDEVICE_MEDIA_INFO = *mut root::_DEVICE_MEDIA_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _GET_MEDIA_TYPES {
        pub DeviceType: u32,
        pub MediaInfoCount: u32,
        pub MediaInfo: [root::DEVICE_MEDIA_INFO; 1usize],
    }
    pub type GET_MEDIA_TYPES = root::_GET_MEDIA_TYPES;
    pub type PGET_MEDIA_TYPES = *mut root::_GET_MEDIA_TYPES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PREDICT_FAILURE {
        pub PredictFailure: u32,
        pub VendorSpecific: [u8; 512usize],
    }
    pub type STORAGE_PREDICT_FAILURE = root::_STORAGE_PREDICT_FAILURE;
    pub type PSTORAGE_PREDICT_FAILURE = *mut root::_STORAGE_PREDICT_FAILURE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_FAILURE_PREDICTION_CONFIG {
        pub Version: u32,
        pub Size: u32,
        pub Set: root::BOOLEAN,
        pub Enabled: root::BOOLEAN,
        pub Reserved: u16,
    }
    pub type STORAGE_FAILURE_PREDICTION_CONFIG = root::_STORAGE_FAILURE_PREDICTION_CONFIG;
    pub type PSTORAGE_FAILURE_PREDICTION_CONFIG = *mut root::_STORAGE_FAILURE_PREDICTION_CONFIG;
    pub const _STORAGE_QUERY_TYPE_PropertyStandardQuery: root::_STORAGE_QUERY_TYPE = 0;
    pub const _STORAGE_QUERY_TYPE_PropertyExistsQuery: root::_STORAGE_QUERY_TYPE = 1;
    pub const _STORAGE_QUERY_TYPE_PropertyMaskQuery: root::_STORAGE_QUERY_TYPE = 2;
    pub const _STORAGE_QUERY_TYPE_PropertyQueryMaxDefined: root::_STORAGE_QUERY_TYPE = 3;
    pub type _STORAGE_QUERY_TYPE = i32;
    pub use self::super::root::_STORAGE_QUERY_TYPE as STORAGE_QUERY_TYPE;
    pub type PSTORAGE_QUERY_TYPE = *mut root::_STORAGE_QUERY_TYPE;
    pub const _STORAGE_SET_TYPE_PropertyStandardSet: root::_STORAGE_SET_TYPE = 0;
    pub const _STORAGE_SET_TYPE_PropertyExistsSet: root::_STORAGE_SET_TYPE = 1;
    pub const _STORAGE_SET_TYPE_PropertySetMaxDefined: root::_STORAGE_SET_TYPE = 2;
    pub type _STORAGE_SET_TYPE = i32;
    pub use self::super::root::_STORAGE_SET_TYPE as STORAGE_SET_TYPE;
    pub type PSTORAGE_SET_TYPE = *mut root::_STORAGE_SET_TYPE;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceProperty: root::_STORAGE_PROPERTY_ID = 0;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterProperty: root::_STORAGE_PROPERTY_ID = 1;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceIdProperty: root::_STORAGE_PROPERTY_ID = 2;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceUniqueIdProperty: root::_STORAGE_PROPERTY_ID = 3;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceWriteCacheProperty: root::_STORAGE_PROPERTY_ID = 4;
    pub const _STORAGE_PROPERTY_ID_StorageMiniportProperty: root::_STORAGE_PROPERTY_ID = 5;
    pub const _STORAGE_PROPERTY_ID_StorageAccessAlignmentProperty: root::_STORAGE_PROPERTY_ID = 6;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceSeekPenaltyProperty: root::_STORAGE_PROPERTY_ID = 7;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceTrimProperty: root::_STORAGE_PROPERTY_ID = 8;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceWriteAggregationProperty:
        root::_STORAGE_PROPERTY_ID = 9;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceDeviceTelemetryProperty:
        root::_STORAGE_PROPERTY_ID = 10;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceLBProvisioningProperty: root::_STORAGE_PROPERTY_ID =
        11;
    pub const _STORAGE_PROPERTY_ID_StorageDevicePowerProperty: root::_STORAGE_PROPERTY_ID = 12;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceCopyOffloadProperty: root::_STORAGE_PROPERTY_ID =
        13;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceResiliencyProperty: root::_STORAGE_PROPERTY_ID = 14;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceMediumProductType: root::_STORAGE_PROPERTY_ID = 15;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterRpmbProperty: root::_STORAGE_PROPERTY_ID = 16;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterCryptoProperty: root::_STORAGE_PROPERTY_ID = 17;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceIoCapabilityProperty: root::_STORAGE_PROPERTY_ID =
        48;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterProtocolSpecificProperty:
        root::_STORAGE_PROPERTY_ID = 49;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceProtocolSpecificProperty:
        root::_STORAGE_PROPERTY_ID = 50;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterTemperatureProperty: root::_STORAGE_PROPERTY_ID =
        51;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceTemperatureProperty: root::_STORAGE_PROPERTY_ID =
        52;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterPhysicalTopologyProperty:
        root::_STORAGE_PROPERTY_ID = 53;
    pub const _STORAGE_PROPERTY_ID_StorageDevicePhysicalTopologyProperty:
        root::_STORAGE_PROPERTY_ID = 54;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceAttributesProperty: root::_STORAGE_PROPERTY_ID = 55;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceManagementStatus: root::_STORAGE_PROPERTY_ID = 56;
    pub const _STORAGE_PROPERTY_ID_StorageAdapterSerialNumberProperty: root::_STORAGE_PROPERTY_ID =
        57;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceLocationProperty: root::_STORAGE_PROPERTY_ID = 58;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceNumaProperty: root::_STORAGE_PROPERTY_ID = 59;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceZonedDeviceProperty: root::_STORAGE_PROPERTY_ID =
        60;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceUnsafeShutdownCount: root::_STORAGE_PROPERTY_ID =
        61;
    pub const _STORAGE_PROPERTY_ID_StorageDeviceEnduranceProperty: root::_STORAGE_PROPERTY_ID = 62;
    pub type _STORAGE_PROPERTY_ID = i32;
    pub use self::super::root::_STORAGE_PROPERTY_ID as STORAGE_PROPERTY_ID;
    pub type PSTORAGE_PROPERTY_ID = *mut root::_STORAGE_PROPERTY_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROPERTY_QUERY {
        pub PropertyId: root::STORAGE_PROPERTY_ID,
        pub QueryType: root::STORAGE_QUERY_TYPE,
        pub AdditionalParameters: [u8; 1usize],
    }
    pub type STORAGE_PROPERTY_QUERY = root::_STORAGE_PROPERTY_QUERY;
    pub type PSTORAGE_PROPERTY_QUERY = *mut root::_STORAGE_PROPERTY_QUERY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROPERTY_SET {
        pub PropertyId: root::STORAGE_PROPERTY_ID,
        pub SetType: root::STORAGE_SET_TYPE,
        pub AdditionalParameters: [u8; 1usize],
    }
    pub type STORAGE_PROPERTY_SET = root::_STORAGE_PROPERTY_SET;
    pub type PSTORAGE_PROPERTY_SET = *mut root::_STORAGE_PROPERTY_SET;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DESCRIPTOR_HEADER {
        pub Version: u32,
        pub Size: u32,
    }
    pub type STORAGE_DESCRIPTOR_HEADER = root::_STORAGE_DESCRIPTOR_HEADER;
    pub type PSTORAGE_DESCRIPTOR_HEADER = *mut root::_STORAGE_DESCRIPTOR_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub DeviceType: u8,
        pub DeviceTypeModifier: u8,
        pub RemovableMedia: root::BOOLEAN,
        pub CommandQueueing: root::BOOLEAN,
        pub VendorIdOffset: u32,
        pub ProductIdOffset: u32,
        pub ProductRevisionOffset: u32,
        pub SerialNumberOffset: u32,
        pub BusType: root::STORAGE_BUS_TYPE,
        pub RawPropertiesLength: u32,
        pub RawDeviceProperties: [u8; 1usize],
    }
    pub type STORAGE_DEVICE_DESCRIPTOR = root::_STORAGE_DEVICE_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_DESCRIPTOR = *mut root::_STORAGE_DEVICE_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ADAPTER_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub MaximumTransferLength: u32,
        pub MaximumPhysicalPages: u32,
        pub AlignmentMask: u32,
        pub AdapterUsesPio: root::BOOLEAN,
        pub AdapterScansDown: root::BOOLEAN,
        pub CommandQueueing: root::BOOLEAN,
        pub AcceleratedTransfer: root::BOOLEAN,
        pub BusType: u8,
        pub BusMajorVersion: u16,
        pub BusMinorVersion: u16,
        pub SrbType: u8,
        pub AddressType: u8,
    }
    pub type STORAGE_ADAPTER_DESCRIPTOR = root::_STORAGE_ADAPTER_DESCRIPTOR;
    pub type PSTORAGE_ADAPTER_DESCRIPTOR = *mut root::_STORAGE_ADAPTER_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub BytesPerCacheLine: u32,
        pub BytesOffsetForCacheAlignment: u32,
        pub BytesPerLogicalSector: u32,
        pub BytesPerPhysicalSector: u32,
        pub BytesOffsetForSectorAlignment: u32,
    }
    pub type STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = root::_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
    pub type PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = *mut root::_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub MediumProductType: u32,
    }
    pub type STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = root::_STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
    pub type PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR =
        *mut root::_STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetReserved: root::_STORAGE_PORT_CODE_SET = 0;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetStorport: root::_STORAGE_PORT_CODE_SET = 1;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetSCSIport: root::_STORAGE_PORT_CODE_SET = 2;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetSpaceport: root::_STORAGE_PORT_CODE_SET = 3;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetATAport: root::_STORAGE_PORT_CODE_SET = 4;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetUSBport: root::_STORAGE_PORT_CODE_SET = 5;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetSBP2port: root::_STORAGE_PORT_CODE_SET = 6;
    pub const _STORAGE_PORT_CODE_SET_StoragePortCodeSetSDport: root::_STORAGE_PORT_CODE_SET = 7;
    pub type _STORAGE_PORT_CODE_SET = i32;
    pub use self::super::root::_STORAGE_PORT_CODE_SET as STORAGE_PORT_CODE_SET;
    pub type PSTORAGE_PORT_CODE_SET = *mut root::_STORAGE_PORT_CODE_SET;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_MINIPORT_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub Portdriver: root::STORAGE_PORT_CODE_SET,
        pub LUNResetSupported: root::BOOLEAN,
        pub TargetResetSupported: root::BOOLEAN,
        pub IoTimeoutValue: u16,
        pub ExtraIoInfoSupported: root::BOOLEAN,
        pub Reserved0: [u8; 3usize],
        pub Reserved1: u32,
    }
    pub type STORAGE_MINIPORT_DESCRIPTOR = root::_STORAGE_MINIPORT_DESCRIPTOR;
    pub type PSTORAGE_MINIPORT_DESCRIPTOR = *mut root::_STORAGE_MINIPORT_DESCRIPTOR;
    pub const _STORAGE_IDENTIFIER_CODE_SET_StorageIdCodeSetReserved:
        root::_STORAGE_IDENTIFIER_CODE_SET = 0;
    pub const _STORAGE_IDENTIFIER_CODE_SET_StorageIdCodeSetBinary:
        root::_STORAGE_IDENTIFIER_CODE_SET = 1;
    pub const _STORAGE_IDENTIFIER_CODE_SET_StorageIdCodeSetAscii:
        root::_STORAGE_IDENTIFIER_CODE_SET = 2;
    pub const _STORAGE_IDENTIFIER_CODE_SET_StorageIdCodeSetUtf8:
        root::_STORAGE_IDENTIFIER_CODE_SET = 3;
    pub type _STORAGE_IDENTIFIER_CODE_SET = i32;
    pub use self::super::root::_STORAGE_IDENTIFIER_CODE_SET as STORAGE_IDENTIFIER_CODE_SET;
    pub type PSTORAGE_IDENTIFIER_CODE_SET = *mut root::_STORAGE_IDENTIFIER_CODE_SET;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeVendorSpecific: root::_STORAGE_IDENTIFIER_TYPE =
        0;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeVendorId: root::_STORAGE_IDENTIFIER_TYPE = 1;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeEUI64: root::_STORAGE_IDENTIFIER_TYPE = 2;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeFCPHName: root::_STORAGE_IDENTIFIER_TYPE = 3;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypePortRelative: root::_STORAGE_IDENTIFIER_TYPE =
        4;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeTargetPortGroup:
        root::_STORAGE_IDENTIFIER_TYPE = 5;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeLogicalUnitGroup:
        root::_STORAGE_IDENTIFIER_TYPE = 6;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeMD5LogicalUnitIdentifier:
        root::_STORAGE_IDENTIFIER_TYPE = 7;
    pub const _STORAGE_IDENTIFIER_TYPE_StorageIdTypeScsiNameString: root::_STORAGE_IDENTIFIER_TYPE =
        8;
    pub type _STORAGE_IDENTIFIER_TYPE = i32;
    pub use self::super::root::_STORAGE_IDENTIFIER_TYPE as STORAGE_IDENTIFIER_TYPE;
    pub type PSTORAGE_IDENTIFIER_TYPE = *mut root::_STORAGE_IDENTIFIER_TYPE;
    pub const _STORAGE_ID_NAA_FORMAT_StorageIdNAAFormatIEEEExtended: root::_STORAGE_ID_NAA_FORMAT =
        2;
    pub const _STORAGE_ID_NAA_FORMAT_StorageIdNAAFormatIEEERegistered:
        root::_STORAGE_ID_NAA_FORMAT = 3;
    pub const _STORAGE_ID_NAA_FORMAT_StorageIdNAAFormatIEEEERegisteredExtended:
        root::_STORAGE_ID_NAA_FORMAT = 5;
    pub type _STORAGE_ID_NAA_FORMAT = i32;
    pub use self::super::root::_STORAGE_ID_NAA_FORMAT as STORAGE_ID_NAA_FORMAT;
    pub type PSTORAGE_ID_NAA_FORMAT = *mut root::_STORAGE_ID_NAA_FORMAT;
    pub const _STORAGE_ASSOCIATION_TYPE_StorageIdAssocDevice: root::_STORAGE_ASSOCIATION_TYPE = 0;
    pub const _STORAGE_ASSOCIATION_TYPE_StorageIdAssocPort: root::_STORAGE_ASSOCIATION_TYPE = 1;
    pub const _STORAGE_ASSOCIATION_TYPE_StorageIdAssocTarget: root::_STORAGE_ASSOCIATION_TYPE = 2;
    pub type _STORAGE_ASSOCIATION_TYPE = i32;
    pub use self::super::root::_STORAGE_ASSOCIATION_TYPE as STORAGE_ASSOCIATION_TYPE;
    pub type PSTORAGE_ASSOCIATION_TYPE = *mut root::_STORAGE_ASSOCIATION_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_IDENTIFIER {
        pub CodeSet: root::STORAGE_IDENTIFIER_CODE_SET,
        pub Type: root::STORAGE_IDENTIFIER_TYPE,
        pub IdentifierSize: u16,
        pub NextOffset: u16,
        pub Association: root::STORAGE_ASSOCIATION_TYPE,
        pub Identifier: [u8; 1usize],
    }
    pub type STORAGE_IDENTIFIER = root::_STORAGE_IDENTIFIER;
    pub type PSTORAGE_IDENTIFIER = *mut root::_STORAGE_IDENTIFIER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_ID_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub NumberOfIdentifiers: u32,
        pub Identifiers: [u8; 1usize],
    }
    pub type STORAGE_DEVICE_ID_DESCRIPTOR = root::_STORAGE_DEVICE_ID_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_ID_DESCRIPTOR = *mut root::_STORAGE_DEVICE_ID_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_SEEK_PENALTY_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub IncursSeekPenalty: root::BOOLEAN,
    }
    pub type DEVICE_SEEK_PENALTY_DESCRIPTOR = root::_DEVICE_SEEK_PENALTY_DESCRIPTOR;
    pub type PDEVICE_SEEK_PENALTY_DESCRIPTOR = *mut root::_DEVICE_SEEK_PENALTY_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub BenefitsFromWriteAggregation: root::BOOLEAN,
    }
    pub type DEVICE_WRITE_AGGREGATION_DESCRIPTOR = root::_DEVICE_WRITE_AGGREGATION_DESCRIPTOR;
    pub type PDEVICE_WRITE_AGGREGATION_DESCRIPTOR = *mut root::_DEVICE_WRITE_AGGREGATION_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_TRIM_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub TrimEnabled: root::BOOLEAN,
    }
    pub type DEVICE_TRIM_DESCRIPTOR = root::_DEVICE_TRIM_DESCRIPTOR;
    pub type PDEVICE_TRIM_DESCRIPTOR = *mut root::_DEVICE_TRIM_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_LB_PROVISIONING_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub Reserved1: [u8; 7usize],
        pub OptimalUnmapGranularity: root::DWORDLONG,
        pub UnmapGranularityAlignment: root::DWORDLONG,
        pub MaxUnmapLbaCount: u32,
        pub MaxUnmapBlockDescriptorCount: u32,
    }
    impl _DEVICE_LB_PROVISIONING_DESCRIPTOR {
        #[inline]
        pub fn ThinProvisioningEnabled(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_ThinProvisioningEnabled(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ThinProvisioningReadZeros(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_ThinProvisioningReadZeros(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn AnchorSupported(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u8) }
        }
        #[inline]
        pub fn set_AnchorSupported(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn UnmapGranularityAlignmentValid(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_UnmapGranularityAlignmentValid(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved0(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ThinProvisioningEnabled: u8,
            ThinProvisioningReadZeros: u8,
            AnchorSupported: u8,
            UnmapGranularityAlignmentValid: u8,
            Reserved0: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let ThinProvisioningEnabled: u8 =
                    unsafe { ::std::mem::transmute(ThinProvisioningEnabled) };
                ThinProvisioningEnabled as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let ThinProvisioningReadZeros: u8 =
                    unsafe { ::std::mem::transmute(ThinProvisioningReadZeros) };
                ThinProvisioningReadZeros as u64
            });
            __bindgen_bitfield_unit.set(2usize, 3u8, {
                let AnchorSupported: u8 = unsafe { ::std::mem::transmute(AnchorSupported) };
                AnchorSupported as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let UnmapGranularityAlignmentValid: u8 =
                    unsafe { ::std::mem::transmute(UnmapGranularityAlignmentValid) };
                UnmapGranularityAlignmentValid as u64
            });
            __bindgen_bitfield_unit.set(6usize, 2u8, {
                let Reserved0: u8 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type DEVICE_LB_PROVISIONING_DESCRIPTOR = root::_DEVICE_LB_PROVISIONING_DESCRIPTOR;
    pub type PDEVICE_LB_PROVISIONING_DESCRIPTOR = *mut root::_DEVICE_LB_PROVISIONING_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
        pub Size: u32,
        pub Version: u32,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub Reserved1: [u8; 3usize],
        pub _bitfield_align_2: [u8; 0],
        pub _bitfield_2: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub Reserved3: [u8; 3usize],
        pub AvailableMappingResources: root::DWORDLONG,
        pub UsedMappingResources: root::DWORDLONG,
    }
    impl _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
        #[inline]
        pub fn AvailableMappingResourcesValid(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_AvailableMappingResourcesValid(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn UsedMappingResourcesValid(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_UsedMappingResourcesValid(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved0(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 6u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            AvailableMappingResourcesValid: u8,
            UsedMappingResourcesValid: u8,
            Reserved0: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let AvailableMappingResourcesValid: u8 =
                    unsafe { ::std::mem::transmute(AvailableMappingResourcesValid) };
                AvailableMappingResourcesValid as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let UsedMappingResourcesValid: u8 =
                    unsafe { ::std::mem::transmute(UsedMappingResourcesValid) };
                UsedMappingResourcesValid as u64
            });
            __bindgen_bitfield_unit.set(2usize, 6u8, {
                let Reserved0: u8 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit
        }
        #[inline]
        pub fn AvailableMappingResourcesScope(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 2u8) as u8) }
        }
        #[inline]
        pub fn set_AvailableMappingResourcesScope(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_2.set(0usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn UsedMappingResourcesScope(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 2u8) as u8) }
        }
        #[inline]
        pub fn set_UsedMappingResourcesScope(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_2.set(2usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved2(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved2(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_2.set(4usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_2(
            AvailableMappingResourcesScope: u8,
            UsedMappingResourcesScope: u8,
            Reserved2: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 2u8, {
                let AvailableMappingResourcesScope: u8 =
                    unsafe { ::std::mem::transmute(AvailableMappingResourcesScope) };
                AvailableMappingResourcesScope as u64
            });
            __bindgen_bitfield_unit.set(2usize, 2u8, {
                let UsedMappingResourcesScope: u8 =
                    unsafe { ::std::mem::transmute(UsedMappingResourcesScope) };
                UsedMappingResourcesScope as u64
            });
            __bindgen_bitfield_unit.set(4usize, 4u8, {
                let Reserved2: u8 = unsafe { ::std::mem::transmute(Reserved2) };
                Reserved2 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type STORAGE_LB_PROVISIONING_MAP_RESOURCES = root::_STORAGE_LB_PROVISIONING_MAP_RESOURCES;
    pub type PSTORAGE_LB_PROVISIONING_MAP_RESOURCES =
        *mut root::_STORAGE_LB_PROVISIONING_MAP_RESOURCES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_POWER_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub DeviceAttentionSupported: root::BOOLEAN,
        pub AsynchronousNotificationSupported: root::BOOLEAN,
        pub IdlePowerManagementEnabled: root::BOOLEAN,
        pub D3ColdEnabled: root::BOOLEAN,
        pub D3ColdSupported: root::BOOLEAN,
        pub NoVerifyDuringIdlePower: root::BOOLEAN,
        pub Reserved: [u8; 2usize],
        pub IdleTimeoutInMS: u32,
    }
    pub type DEVICE_POWER_DESCRIPTOR = root::_DEVICE_POWER_DESCRIPTOR;
    pub type PDEVICE_POWER_DESCRIPTOR = *mut root::_DEVICE_POWER_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub MaximumTokenLifetime: u32,
        pub DefaultTokenLifetime: u32,
        pub MaximumTransferSize: root::DWORDLONG,
        pub OptimalTransferCount: root::DWORDLONG,
        pub MaximumDataDescriptors: u32,
        pub MaximumTransferLengthPerDescriptor: u32,
        pub OptimalTransferLengthPerDescriptor: u32,
        pub OptimalTransferLengthGranularity: u16,
        pub Reserved: [u8; 2usize],
    }
    pub type DEVICE_COPY_OFFLOAD_DESCRIPTOR = root::_DEVICE_COPY_OFFLOAD_DESCRIPTOR;
    pub type PDEVICE_COPY_OFFLOAD_DESCRIPTOR = *mut root::_DEVICE_COPY_OFFLOAD_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub NameOffset: u32,
        pub NumberOfLogicalCopies: u32,
        pub NumberOfPhysicalCopies: u32,
        pub PhysicalDiskRedundancy: u32,
        pub NumberOfColumns: u32,
        pub Interleave: u32,
    }
    pub type STORAGE_DEVICE_RESILIENCY_DESCRIPTOR = root::_STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR =
        *mut root::_STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
    pub const _STORAGE_RPMB_FRAME_TYPE_StorageRpmbFrameTypeUnknown: root::_STORAGE_RPMB_FRAME_TYPE =
        0;
    pub const _STORAGE_RPMB_FRAME_TYPE_StorageRpmbFrameTypeStandard:
        root::_STORAGE_RPMB_FRAME_TYPE = 1;
    pub const _STORAGE_RPMB_FRAME_TYPE_StorageRpmbFrameTypeMax: root::_STORAGE_RPMB_FRAME_TYPE = 2;
    pub type _STORAGE_RPMB_FRAME_TYPE = i32;
    pub use self::super::root::_STORAGE_RPMB_FRAME_TYPE as STORAGE_RPMB_FRAME_TYPE;
    pub type PSTORAGE_RPMB_FRAME_TYPE = *mut root::_STORAGE_RPMB_FRAME_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_RPMB_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub SizeInBytes: u32,
        pub MaxReliableWriteSizeInBytes: u32,
        pub FrameFormat: root::STORAGE_RPMB_FRAME_TYPE,
    }
    pub type STORAGE_RPMB_DESCRIPTOR = root::_STORAGE_RPMB_DESCRIPTOR;
    pub type PSTORAGE_RPMB_DESCRIPTOR = *mut root::_STORAGE_RPMB_DESCRIPTOR;
    pub const _STORAGE_CRYPTO_ALGORITHM_ID_StorageCryptoAlgorithmUnknown:
        root::_STORAGE_CRYPTO_ALGORITHM_ID = 0;
    pub const _STORAGE_CRYPTO_ALGORITHM_ID_StorageCryptoAlgorithmXTSAES:
        root::_STORAGE_CRYPTO_ALGORITHM_ID = 1;
    pub const _STORAGE_CRYPTO_ALGORITHM_ID_StorageCryptoAlgorithmBitlockerAESCBC:
        root::_STORAGE_CRYPTO_ALGORITHM_ID = 2;
    pub const _STORAGE_CRYPTO_ALGORITHM_ID_StorageCryptoAlgorithmAESECB:
        root::_STORAGE_CRYPTO_ALGORITHM_ID = 3;
    pub const _STORAGE_CRYPTO_ALGORITHM_ID_StorageCryptoAlgorithmESSIVAESCBC:
        root::_STORAGE_CRYPTO_ALGORITHM_ID = 4;
    pub const _STORAGE_CRYPTO_ALGORITHM_ID_StorageCryptoAlgorithmMax:
        root::_STORAGE_CRYPTO_ALGORITHM_ID = 5;
    pub type _STORAGE_CRYPTO_ALGORITHM_ID = i32;
    pub use self::super::root::_STORAGE_CRYPTO_ALGORITHM_ID as STORAGE_CRYPTO_ALGORITHM_ID;
    pub type PSTORAGE_CRYPTO_ALGORITHM_ID = *mut root::_STORAGE_CRYPTO_ALGORITHM_ID;
    pub const _STORAGE_CRYPTO_KEY_SIZE_StorageCryptoKeySizeUnknown: root::_STORAGE_CRYPTO_KEY_SIZE =
        0;
    pub const _STORAGE_CRYPTO_KEY_SIZE_StorageCryptoKeySize128Bits: root::_STORAGE_CRYPTO_KEY_SIZE =
        1;
    pub const _STORAGE_CRYPTO_KEY_SIZE_StorageCryptoKeySize192Bits: root::_STORAGE_CRYPTO_KEY_SIZE =
        2;
    pub const _STORAGE_CRYPTO_KEY_SIZE_StorageCryptoKeySize256Bits: root::_STORAGE_CRYPTO_KEY_SIZE =
        3;
    pub const _STORAGE_CRYPTO_KEY_SIZE_StorageCryptoKeySize512Bits: root::_STORAGE_CRYPTO_KEY_SIZE =
        4;
    pub type _STORAGE_CRYPTO_KEY_SIZE = i32;
    pub use self::super::root::_STORAGE_CRYPTO_KEY_SIZE as STORAGE_CRYPTO_KEY_SIZE;
    pub type PSTORAGE_CRYPTO_KEY_SIZE = *mut root::_STORAGE_CRYPTO_KEY_SIZE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_CRYPTO_CAPABILITY {
        pub Version: u32,
        pub Size: u32,
        pub CryptoCapabilityIndex: u32,
        pub AlgorithmId: root::STORAGE_CRYPTO_ALGORITHM_ID,
        pub KeySize: root::STORAGE_CRYPTO_KEY_SIZE,
        pub DataUnitSizeBitmask: u32,
    }
    pub type STORAGE_CRYPTO_CAPABILITY = root::_STORAGE_CRYPTO_CAPABILITY;
    pub type PSTORAGE_CRYPTO_CAPABILITY = *mut root::_STORAGE_CRYPTO_CAPABILITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_CRYPTO_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub NumKeysSupported: u32,
        pub NumCryptoCapabilities: u32,
        pub CryptoCapabilities: [root::STORAGE_CRYPTO_CAPABILITY; 1usize],
    }
    pub type STORAGE_CRYPTO_DESCRIPTOR = root::_STORAGE_CRYPTO_DESCRIPTOR;
    pub type PSTORAGE_CRYPTO_DESCRIPTOR = *mut root::_STORAGE_CRYPTO_DESCRIPTOR;
    pub const _STORAGE_TIER_MEDIA_TYPE_StorageTierMediaTypeUnspecified:
        root::_STORAGE_TIER_MEDIA_TYPE = 0;
    pub const _STORAGE_TIER_MEDIA_TYPE_StorageTierMediaTypeDisk: root::_STORAGE_TIER_MEDIA_TYPE = 1;
    pub const _STORAGE_TIER_MEDIA_TYPE_StorageTierMediaTypeSsd: root::_STORAGE_TIER_MEDIA_TYPE = 2;
    pub const _STORAGE_TIER_MEDIA_TYPE_StorageTierMediaTypeScm: root::_STORAGE_TIER_MEDIA_TYPE = 4;
    pub const _STORAGE_TIER_MEDIA_TYPE_StorageTierMediaTypeMax: root::_STORAGE_TIER_MEDIA_TYPE = 5;
    pub type _STORAGE_TIER_MEDIA_TYPE = i32;
    pub use self::super::root::_STORAGE_TIER_MEDIA_TYPE as STORAGE_TIER_MEDIA_TYPE;
    pub type PSTORAGE_TIER_MEDIA_TYPE = *mut root::_STORAGE_TIER_MEDIA_TYPE;
    pub const _STORAGE_TIER_CLASS_StorageTierClassUnspecified: root::_STORAGE_TIER_CLASS = 0;
    pub const _STORAGE_TIER_CLASS_StorageTierClassCapacity: root::_STORAGE_TIER_CLASS = 1;
    pub const _STORAGE_TIER_CLASS_StorageTierClassPerformance: root::_STORAGE_TIER_CLASS = 2;
    pub const _STORAGE_TIER_CLASS_StorageTierClassMax: root::_STORAGE_TIER_CLASS = 3;
    pub type _STORAGE_TIER_CLASS = i32;
    pub use self::super::root::_STORAGE_TIER_CLASS as STORAGE_TIER_CLASS;
    pub type PSTORAGE_TIER_CLASS = *mut root::_STORAGE_TIER_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_TIER {
        pub Id: root::GUID,
        pub Name: [u16; 256usize],
        pub Description: [u16; 256usize],
        pub Flags: root::DWORDLONG,
        pub ProvisionedCapacity: root::DWORDLONG,
        pub MediaType: root::STORAGE_TIER_MEDIA_TYPE,
        pub Class: root::STORAGE_TIER_CLASS,
    }
    pub type STORAGE_TIER = root::_STORAGE_TIER;
    pub type PSTORAGE_TIER = *mut root::_STORAGE_TIER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_TIERING_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub TotalNumberOfTiers: u32,
        pub NumberOfTiersReturned: u32,
        pub Tiers: [root::STORAGE_TIER; 1usize],
    }
    pub type STORAGE_DEVICE_TIERING_DESCRIPTOR = root::_STORAGE_DEVICE_TIERING_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_TIERING_DESCRIPTOR = *mut root::_STORAGE_DEVICE_TIERING_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub NumberOfFaultDomains: u32,
        pub FaultDomainIds: [root::GUID; 1usize],
    }
    pub type STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = root::_STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR =
        *mut root::_STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeUnknown: root::_STORAGE_PROTOCOL_TYPE = 0;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeScsi: root::_STORAGE_PROTOCOL_TYPE = 1;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeAta: root::_STORAGE_PROTOCOL_TYPE = 2;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeNvme: root::_STORAGE_PROTOCOL_TYPE = 3;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeSd: root::_STORAGE_PROTOCOL_TYPE = 4;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeUfs: root::_STORAGE_PROTOCOL_TYPE = 5;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeProprietary: root::_STORAGE_PROTOCOL_TYPE = 126;
    pub const _STORAGE_PROTOCOL_TYPE_ProtocolTypeMaxReserved: root::_STORAGE_PROTOCOL_TYPE = 127;
    pub type _STORAGE_PROTOCOL_TYPE = i32;
    pub use self::super::root::_STORAGE_PROTOCOL_TYPE as STORAGE_PROTOCOL_TYPE;
    pub type PSTORAGE_PROTOCOL_TYPE = *mut root::_STORAGE_PROTOCOL_TYPE;
    pub const _STORAGE_PROTOCOL_NVME_DATA_TYPE_NVMeDataTypeUnknown:
        root::_STORAGE_PROTOCOL_NVME_DATA_TYPE = 0;
    pub const _STORAGE_PROTOCOL_NVME_DATA_TYPE_NVMeDataTypeIdentify:
        root::_STORAGE_PROTOCOL_NVME_DATA_TYPE = 1;
    pub const _STORAGE_PROTOCOL_NVME_DATA_TYPE_NVMeDataTypeLogPage:
        root::_STORAGE_PROTOCOL_NVME_DATA_TYPE = 2;
    pub const _STORAGE_PROTOCOL_NVME_DATA_TYPE_NVMeDataTypeFeature:
        root::_STORAGE_PROTOCOL_NVME_DATA_TYPE = 3;
    pub type _STORAGE_PROTOCOL_NVME_DATA_TYPE = i32;
    pub use self::super::root::_STORAGE_PROTOCOL_NVME_DATA_TYPE as STORAGE_PROTOCOL_NVME_DATA_TYPE;
    pub type PSTORAGE_PROTOCOL_NVME_DATA_TYPE = *mut root::_STORAGE_PROTOCOL_NVME_DATA_TYPE;
    pub const _STORAGE_PROTOCOL_ATA_DATA_TYPE_AtaDataTypeUnknown:
        root::_STORAGE_PROTOCOL_ATA_DATA_TYPE = 0;
    pub const _STORAGE_PROTOCOL_ATA_DATA_TYPE_AtaDataTypeIdentify:
        root::_STORAGE_PROTOCOL_ATA_DATA_TYPE = 1;
    pub const _STORAGE_PROTOCOL_ATA_DATA_TYPE_AtaDataTypeLogPage:
        root::_STORAGE_PROTOCOL_ATA_DATA_TYPE = 2;
    pub type _STORAGE_PROTOCOL_ATA_DATA_TYPE = i32;
    pub use self::super::root::_STORAGE_PROTOCOL_ATA_DATA_TYPE as STORAGE_PROTOCOL_ATA_DATA_TYPE;
    pub type PSTORAGE_PROTOCOL_ATA_DATA_TYPE = *mut root::_STORAGE_PROTOCOL_ATA_DATA_TYPE;
    pub const _STORAGE_PROTOCOL_UFS_DATA_TYPE_UfsDataTypeUnknown:
        root::_STORAGE_PROTOCOL_UFS_DATA_TYPE = 0;
    pub const _STORAGE_PROTOCOL_UFS_DATA_TYPE_UfsDataTypeQueryDescriptor:
        root::_STORAGE_PROTOCOL_UFS_DATA_TYPE = 1;
    pub const _STORAGE_PROTOCOL_UFS_DATA_TYPE_UfsDataTypeMax:
        root::_STORAGE_PROTOCOL_UFS_DATA_TYPE = 2;
    pub type _STORAGE_PROTOCOL_UFS_DATA_TYPE = i32;
    pub use self::super::root::_STORAGE_PROTOCOL_UFS_DATA_TYPE as STORAGE_PROTOCOL_UFS_DATA_TYPE;
    pub type PSTORAGE_PROTOCOL_UFS_DATA_TYPE = *mut root::_STORAGE_PROTOCOL_UFS_DATA_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROTOCOL_SPECIFIC_DATA {
        pub ProtocolType: root::STORAGE_PROTOCOL_TYPE,
        pub DataType: u32,
        pub ProtocolDataRequestValue: u32,
        pub ProtocolDataRequestSubValue: u32,
        pub ProtocolDataOffset: u32,
        pub ProtocolDataLength: u32,
        pub FixedProtocolReturnData: u32,
        pub ProtocolDataRequestSubValue2: u32,
        pub ProtocolDataRequestSubValue3: u32,
        pub Reserved: u32,
    }
    pub type STORAGE_PROTOCOL_SPECIFIC_DATA = root::_STORAGE_PROTOCOL_SPECIFIC_DATA;
    pub type PSTORAGE_PROTOCOL_SPECIFIC_DATA = *mut root::_STORAGE_PROTOCOL_SPECIFIC_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT {
        pub ProtocolType: root::STORAGE_PROTOCOL_TYPE,
        pub DataType: u32,
        pub ProtocolDataValue: u32,
        pub ProtocolDataSubValue: u32,
        pub ProtocolDataOffset: u32,
        pub ProtocolDataLength: u32,
        pub FixedProtocolReturnData: u32,
        pub ProtocolDataSubValue2: u32,
        pub ProtocolDataSubValue3: u32,
        pub ProtocolDataSubValue4: u32,
        pub ProtocolDataSubValue5: u32,
        pub Reserved: [u32; 5usize],
    }
    pub type STORAGE_PROTOCOL_SPECIFIC_DATA_EXT = root::_STORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
    pub type PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT = *mut root::_STORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub ProtocolSpecificData: root::STORAGE_PROTOCOL_SPECIFIC_DATA,
    }
    pub type STORAGE_PROTOCOL_DATA_DESCRIPTOR = root::_STORAGE_PROTOCOL_DATA_DESCRIPTOR;
    pub type PSTORAGE_PROTOCOL_DATA_DESCRIPTOR = *mut root::_STORAGE_PROTOCOL_DATA_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT {
        pub Version: u32,
        pub Size: u32,
        pub ProtocolSpecificData: root::STORAGE_PROTOCOL_SPECIFIC_DATA_EXT,
    }
    pub type STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = root::_STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
    pub type PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT =
        *mut root::_STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_TEMPERATURE_INFO {
        pub Index: u16,
        pub Temperature: i16,
        pub OverThreshold: i16,
        pub UnderThreshold: i16,
        pub OverThresholdChangable: root::BOOLEAN,
        pub UnderThresholdChangable: root::BOOLEAN,
        pub EventGenerated: root::BOOLEAN,
        pub Reserved0: u8,
        pub Reserved1: u32,
    }
    pub type STORAGE_TEMPERATURE_INFO = root::_STORAGE_TEMPERATURE_INFO;
    pub type PSTORAGE_TEMPERATURE_INFO = *mut root::_STORAGE_TEMPERATURE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_TEMPERATURE_DATA_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub CriticalTemperature: i16,
        pub WarningTemperature: i16,
        pub InfoCount: u16,
        pub Reserved0: [u8; 2usize],
        pub Reserved1: [u32; 2usize],
        pub TemperatureInfo: [root::STORAGE_TEMPERATURE_INFO; 1usize],
    }
    pub type STORAGE_TEMPERATURE_DATA_DESCRIPTOR = root::_STORAGE_TEMPERATURE_DATA_DESCRIPTOR;
    pub type PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR = *mut root::_STORAGE_TEMPERATURE_DATA_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_TEMPERATURE_THRESHOLD {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u16,
        pub Index: u16,
        pub Threshold: i16,
        pub OverThreshold: root::BOOLEAN,
        pub Reserved: u8,
    }
    pub type STORAGE_TEMPERATURE_THRESHOLD = root::_STORAGE_TEMPERATURE_THRESHOLD;
    pub type PSTORAGE_TEMPERATURE_THRESHOLD = *mut root::_STORAGE_TEMPERATURE_THRESHOLD;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactorUnknown: root::_STORAGE_DEVICE_FORM_FACTOR = 0;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactor3_5: root::_STORAGE_DEVICE_FORM_FACTOR = 1;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactor2_5: root::_STORAGE_DEVICE_FORM_FACTOR = 2;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactor1_8: root::_STORAGE_DEVICE_FORM_FACTOR = 3;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactor1_8Less: root::_STORAGE_DEVICE_FORM_FACTOR = 4;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactorEmbedded: root::_STORAGE_DEVICE_FORM_FACTOR = 5;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactorMemoryCard: root::_STORAGE_DEVICE_FORM_FACTOR =
        6;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactormSata: root::_STORAGE_DEVICE_FORM_FACTOR = 7;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactorM_2: root::_STORAGE_DEVICE_FORM_FACTOR = 8;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactorPCIeBoard: root::_STORAGE_DEVICE_FORM_FACTOR =
        9;
    pub const _STORAGE_DEVICE_FORM_FACTOR_FormFactorDimm: root::_STORAGE_DEVICE_FORM_FACTOR = 10;
    pub type _STORAGE_DEVICE_FORM_FACTOR = i32;
    pub use self::super::root::_STORAGE_DEVICE_FORM_FACTOR as STORAGE_DEVICE_FORM_FACTOR;
    pub type PSTORAGE_DEVICE_FORM_FACTOR = *mut root::_STORAGE_DEVICE_FORM_FACTOR;
    pub const _STORAGE_COMPONENT_HEALTH_STATUS_HealthStatusUnknown:
        root::_STORAGE_COMPONENT_HEALTH_STATUS = 0;
    pub const _STORAGE_COMPONENT_HEALTH_STATUS_HealthStatusNormal:
        root::_STORAGE_COMPONENT_HEALTH_STATUS = 1;
    pub const _STORAGE_COMPONENT_HEALTH_STATUS_HealthStatusThrottled:
        root::_STORAGE_COMPONENT_HEALTH_STATUS = 2;
    pub const _STORAGE_COMPONENT_HEALTH_STATUS_HealthStatusWarning:
        root::_STORAGE_COMPONENT_HEALTH_STATUS = 3;
    pub const _STORAGE_COMPONENT_HEALTH_STATUS_HealthStatusDisabled:
        root::_STORAGE_COMPONENT_HEALTH_STATUS = 4;
    pub const _STORAGE_COMPONENT_HEALTH_STATUS_HealthStatusFailed:
        root::_STORAGE_COMPONENT_HEALTH_STATUS = 5;
    pub type _STORAGE_COMPONENT_HEALTH_STATUS = i32;
    pub use self::super::root::_STORAGE_COMPONENT_HEALTH_STATUS as STORAGE_COMPONENT_HEALTH_STATUS;
    pub type PSTORAGE_COMPONENT_HEALTH_STATUS = *mut root::_STORAGE_COMPONENT_HEALTH_STATUS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STORAGE_SPEC_VERSION {
        pub __bindgen_anon_1: root::_STORAGE_SPEC_VERSION__bindgen_ty_1,
        pub AsUlong: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_SPEC_VERSION__bindgen_ty_1 {
        pub MinorVersion: root::_STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1,
        pub MajorVersion: u16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        pub AsUshort: u16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub SubMinor: u8,
        pub Minor: u8,
    }
    pub type STORAGE_SPEC_VERSION = root::_STORAGE_SPEC_VERSION;
    pub type PSTORAGE_SPEC_VERSION = *mut root::_STORAGE_SPEC_VERSION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_PHYSICAL_DEVICE_DATA {
        pub DeviceId: u32,
        pub Role: u32,
        pub HealthStatus: root::STORAGE_COMPONENT_HEALTH_STATUS,
        pub CommandProtocol: root::STORAGE_PROTOCOL_TYPE,
        pub SpecVersion: root::STORAGE_SPEC_VERSION,
        pub FormFactor: root::STORAGE_DEVICE_FORM_FACTOR,
        pub Vendor: [u8; 8usize],
        pub Model: [u8; 40usize],
        pub FirmwareRevision: [u8; 16usize],
        pub Capacity: root::DWORDLONG,
        pub PhysicalLocation: [u8; 32usize],
        pub Reserved: [u32; 2usize],
    }
    pub type STORAGE_PHYSICAL_DEVICE_DATA = root::_STORAGE_PHYSICAL_DEVICE_DATA;
    pub type PSTORAGE_PHYSICAL_DEVICE_DATA = *mut root::_STORAGE_PHYSICAL_DEVICE_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_PHYSICAL_ADAPTER_DATA {
        pub AdapterId: u32,
        pub HealthStatus: root::STORAGE_COMPONENT_HEALTH_STATUS,
        pub CommandProtocol: root::STORAGE_PROTOCOL_TYPE,
        pub SpecVersion: root::STORAGE_SPEC_VERSION,
        pub Vendor: [u8; 8usize],
        pub Model: [u8; 40usize],
        pub FirmwareRevision: [u8; 16usize],
        pub PhysicalLocation: [u8; 32usize],
        pub ExpanderConnected: root::BOOLEAN,
        pub Reserved0: [u8; 3usize],
        pub Reserved1: [u32; 3usize],
    }
    pub type STORAGE_PHYSICAL_ADAPTER_DATA = root::_STORAGE_PHYSICAL_ADAPTER_DATA;
    pub type PSTORAGE_PHYSICAL_ADAPTER_DATA = *mut root::_STORAGE_PHYSICAL_ADAPTER_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PHYSICAL_NODE_DATA {
        pub NodeId: u32,
        pub AdapterCount: u32,
        pub AdapterDataLength: u32,
        pub AdapterDataOffset: u32,
        pub DeviceCount: u32,
        pub DeviceDataLength: u32,
        pub DeviceDataOffset: u32,
        pub Reserved: [u32; 3usize],
    }
    pub type STORAGE_PHYSICAL_NODE_DATA = root::_STORAGE_PHYSICAL_NODE_DATA;
    pub type PSTORAGE_PHYSICAL_NODE_DATA = *mut root::_STORAGE_PHYSICAL_NODE_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub NodeCount: u32,
        pub Reserved: u32,
        pub Node: [root::STORAGE_PHYSICAL_NODE_DATA; 1usize],
    }
    pub type STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = root::_STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
    pub type PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR =
        *mut root::_STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub LunMaxIoCount: u32,
        pub AdapterMaxIoCount: u32,
    }
    pub type STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR =
        root::_STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR =
        *mut root::_STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub Attributes: root::DWORD64,
    }
    pub type STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = root::_STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR =
        *mut root::_STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
    pub const _STORAGE_DISK_HEALTH_STATUS_DiskHealthUnknown: root::_STORAGE_DISK_HEALTH_STATUS = 0;
    pub const _STORAGE_DISK_HEALTH_STATUS_DiskHealthUnhealthy: root::_STORAGE_DISK_HEALTH_STATUS =
        1;
    pub const _STORAGE_DISK_HEALTH_STATUS_DiskHealthWarning: root::_STORAGE_DISK_HEALTH_STATUS = 2;
    pub const _STORAGE_DISK_HEALTH_STATUS_DiskHealthHealthy: root::_STORAGE_DISK_HEALTH_STATUS = 3;
    pub const _STORAGE_DISK_HEALTH_STATUS_DiskHealthMax: root::_STORAGE_DISK_HEALTH_STATUS = 4;
    pub type _STORAGE_DISK_HEALTH_STATUS = i32;
    pub use self::super::root::_STORAGE_DISK_HEALTH_STATUS as STORAGE_DISK_HEALTH_STATUS;
    pub type PSTORAGE_DISK_HEALTH_STATUS = *mut root::_STORAGE_DISK_HEALTH_STATUS;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusNone:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 0;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusUnknown:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 1;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusOk:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 2;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusPredictingFailure:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 3;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusInService:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 4;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusHardwareError:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 5;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusNotUsable:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 6;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusTransientError:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 7;
    pub const _STORAGE_DISK_OPERATIONAL_STATUS_DiskOpStatusMissing:
        root::_STORAGE_DISK_OPERATIONAL_STATUS = 8;
    pub type _STORAGE_DISK_OPERATIONAL_STATUS = i32;
    pub use self::super::root::_STORAGE_DISK_OPERATIONAL_STATUS as STORAGE_DISK_OPERATIONAL_STATUS;
    pub type PSTORAGE_DISK_OPERATIONAL_STATUS = *mut root::_STORAGE_DISK_OPERATIONAL_STATUS;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonUnknown:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 0;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonScsiSenseCode:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 1;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonMedia:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 2;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonIo:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 3;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonThresholdExceeded:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 4;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonLostData:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 5;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonEnergySource:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 6;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonConfiguration:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 7;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonDeviceController:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 8;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonMediaController:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 9;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonComponent:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 10;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonNVDIMM_N:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 11;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonBackgroundOperation:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 12;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonInvalidFirmware:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 13;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonHealthCheck:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 14;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonLostDataPersistence:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 15;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonDisabledByPlatform:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 16;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonLostWritePersistence:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 17;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonDataPersistenceLossImminent:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 18;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonWritePersistenceLossImminent:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 19;
    pub const _STORAGE_OPERATIONAL_STATUS_REASON_DiskOpReasonMax:
        root::_STORAGE_OPERATIONAL_STATUS_REASON = 20;
    pub type _STORAGE_OPERATIONAL_STATUS_REASON = i32;
    pub use self::super::root::_STORAGE_OPERATIONAL_STATUS_REASON as STORAGE_OPERATIONAL_STATUS_REASON;
    pub type PSTORAGE_OPERATIONAL_STATUS_REASON = *mut root::_STORAGE_OPERATIONAL_STATUS_REASON;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_OPERATIONAL_REASON {
        pub Version: u32,
        pub Size: u32,
        pub Reason: root::STORAGE_OPERATIONAL_STATUS_REASON,
        pub RawBytes: root::_STORAGE_OPERATIONAL_REASON__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STORAGE_OPERATIONAL_REASON__bindgen_ty_1 {
        pub ScsiSenseKey: root::_STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_1,
        pub NVDIMM_N: root::_STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_2,
        pub AsUlong: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_1 {
        pub SenseKey: u8,
        pub ASC: u8,
        pub ASCQ: u8,
        pub Reserved: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_2 {
        pub CriticalHealth: u8,
        pub ModuleHealth: [u8; 2usize],
        pub ErrorThresholdStatus: u8,
    }
    pub type STORAGE_OPERATIONAL_REASON = root::_STORAGE_OPERATIONAL_REASON;
    pub type PSTORAGE_OPERATIONAL_REASON = *mut root::_STORAGE_OPERATIONAL_REASON;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_DEVICE_MANAGEMENT_STATUS {
        pub Version: u32,
        pub Size: u32,
        pub Health: root::STORAGE_DISK_HEALTH_STATUS,
        pub NumberOfOperationalStatus: u32,
        pub NumberOfAdditionalReasons: u32,
        pub OperationalStatus: [root::STORAGE_DISK_OPERATIONAL_STATUS; 16usize],
        pub AdditionalReasons: [root::STORAGE_OPERATIONAL_REASON; 1usize],
    }
    pub type STORAGE_DEVICE_MANAGEMENT_STATUS = root::_STORAGE_DEVICE_MANAGEMENT_STATUS;
    pub type PSTORAGE_DEVICE_MANAGEMENT_STATUS = *mut root::_STORAGE_DEVICE_MANAGEMENT_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ADAPTER_SERIAL_NUMBER {
        pub Version: u32,
        pub Size: u32,
        pub SerialNumber: [u16; 128usize],
    }
    pub type STORAGE_ADAPTER_SERIAL_NUMBER = root::_STORAGE_ADAPTER_SERIAL_NUMBER;
    pub type PSTORAGE_ADAPTER_SERIAL_NUMBER = *mut root::_STORAGE_ADAPTER_SERIAL_NUMBER;
    pub const _STORAGE_ZONED_DEVICE_TYPES_ZonedDeviceTypeUnknown:
        root::_STORAGE_ZONED_DEVICE_TYPES = 0;
    pub const _STORAGE_ZONED_DEVICE_TYPES_ZonedDeviceTypeHostManaged:
        root::_STORAGE_ZONED_DEVICE_TYPES = 1;
    pub const _STORAGE_ZONED_DEVICE_TYPES_ZonedDeviceTypeHostAware:
        root::_STORAGE_ZONED_DEVICE_TYPES = 2;
    pub const _STORAGE_ZONED_DEVICE_TYPES_ZonedDeviceTypeDeviceManaged:
        root::_STORAGE_ZONED_DEVICE_TYPES = 3;
    pub type _STORAGE_ZONED_DEVICE_TYPES = i32;
    pub use self::super::root::_STORAGE_ZONED_DEVICE_TYPES as STORAGE_ZONED_DEVICE_TYPES;
    pub type PSTORAGE_ZONED_DEVICE_TYPES = *mut root::_STORAGE_ZONED_DEVICE_TYPES;
    pub const _STORAGE_ZONE_TYPES_ZoneTypeUnknown: root::_STORAGE_ZONE_TYPES = 0;
    pub const _STORAGE_ZONE_TYPES_ZoneTypeConventional: root::_STORAGE_ZONE_TYPES = 1;
    pub const _STORAGE_ZONE_TYPES_ZoneTypeSequentialWriteRequired: root::_STORAGE_ZONE_TYPES = 2;
    pub const _STORAGE_ZONE_TYPES_ZoneTypeSequentialWritePreferred: root::_STORAGE_ZONE_TYPES = 3;
    pub const _STORAGE_ZONE_TYPES_ZoneTypeMax: root::_STORAGE_ZONE_TYPES = 4;
    pub type _STORAGE_ZONE_TYPES = i32;
    pub use self::super::root::_STORAGE_ZONE_TYPES as STORAGE_ZONE_TYPES;
    pub type PSTORAGE_ZONE_TYPES = *mut root::_STORAGE_ZONE_TYPES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ZONE_GROUP {
        pub ZoneCount: u32,
        pub ZoneType: root::STORAGE_ZONE_TYPES,
        pub ZoneSize: root::DWORDLONG,
    }
    pub type STORAGE_ZONE_GROUP = root::_STORAGE_ZONE_GROUP;
    pub type PSTORAGE_ZONE_GROUP = *mut root::_STORAGE_ZONE_GROUP;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_ZONED_DEVICE_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub DeviceType: root::STORAGE_ZONED_DEVICE_TYPES,
        pub ZoneCount: u32,
        pub ZoneAttributes: root::_STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1,
        pub ZoneGroupCount: u32,
        pub ZoneGroup: [root::STORAGE_ZONE_GROUP; 1usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1 {
        pub SequentialRequiredZone:
            root::_STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
        pub SequentialPreferredZone:
            root::_STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
        pub MaxOpenZoneCount: u32,
        pub UnrestrictedRead: root::BOOLEAN,
        pub Reserved: [u8; 3usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2 {
        pub OptimalOpenZoneCount: u32,
        pub Reserved: u32,
    }
    pub type STORAGE_ZONED_DEVICE_DESCRIPTOR = root::_STORAGE_ZONED_DEVICE_DESCRIPTOR;
    pub type PSTORAGE_ZONED_DEVICE_DESCRIPTOR = *mut root::_STORAGE_ZONED_DEVICE_DESCRIPTOR;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_LOCATION {
        pub Socket: u32,
        pub Slot: u32,
        pub Adapter: u32,
        pub Port: u32,
        pub __bindgen_anon_1: root::_DEVICE_LOCATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DEVICE_LOCATION__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2: root::_DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_1 {
        pub Channel: u32,
        pub Device: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_2 {
        pub Target: u32,
        pub Lun: u32,
    }
    pub type DEVICE_LOCATION = root::_DEVICE_LOCATION;
    pub type PDEVICE_LOCATION = *mut root::_DEVICE_LOCATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_DEVICE_LOCATION_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub Location: root::DEVICE_LOCATION,
        pub StringOffset: u32,
    }
    pub type STORAGE_DEVICE_LOCATION_DESCRIPTOR = root::_STORAGE_DEVICE_LOCATION_DESCRIPTOR;
    pub type PSTORAGE_DEVICE_LOCATION_DESCRIPTOR = *mut root::_STORAGE_DEVICE_LOCATION_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_NUMA_PROPERTY {
        pub Version: u32,
        pub Size: u32,
        pub NumaNode: u32,
    }
    pub type STORAGE_DEVICE_NUMA_PROPERTY = root::_STORAGE_DEVICE_NUMA_PROPERTY;
    pub type PSTORAGE_DEVICE_NUMA_PROPERTY = *mut root::_STORAGE_DEVICE_NUMA_PROPERTY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT {
        pub Version: u32,
        pub Size: u32,
        pub UnsafeShutdownCount: u32,
    }
    pub type STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = root::_STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
    pub type PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT =
        *mut root::_STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_ENDURANCE_INFO {
        pub ValidFields: u32,
        pub GroupId: u32,
        pub Flags: root::_STORAGE_HW_ENDURANCE_INFO__bindgen_ty_1,
        pub LifePercentage: u32,
        pub BytesReadCount: [u8; 16usize],
        pub ByteWriteCount: [u8; 16usize],
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_ENDURANCE_INFO__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    impl _STORAGE_HW_ENDURANCE_INFO__bindgen_ty_1 {
        #[inline]
        pub fn Shared(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Shared(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            Shared: u32,
            Reserved: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let Shared: u32 = unsafe { ::std::mem::transmute(Shared) };
                Shared as u64
            });
            __bindgen_bitfield_unit.set(1usize, 31u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type STORAGE_HW_ENDURANCE_INFO = root::_STORAGE_HW_ENDURANCE_INFO;
    pub type PSTORAGE_HW_ENDURANCE_INFO = *mut root::_STORAGE_HW_ENDURANCE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub EnduranceInfo: root::STORAGE_HW_ENDURANCE_INFO,
    }
    pub type STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = root::_STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
    pub type PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR =
        *mut root::_STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
    pub type DEVICE_DATA_MANAGEMENT_SET_ACTION = u32;
    pub type DEVICE_DSM_ACTION = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_RANGE {
        pub StartingOffset: root::LONGLONG,
        pub LengthInBytes: root::DWORDLONG,
    }
    pub type DEVICE_DATA_SET_RANGE = root::_DEVICE_DATA_SET_RANGE;
    pub type PDEVICE_DATA_SET_RANGE = *mut root::_DEVICE_DATA_SET_RANGE;
    pub type DEVICE_DSM_RANGE = root::_DEVICE_DATA_SET_RANGE;
    pub type PDEVICE_DSM_RANGE = *mut root::_DEVICE_DATA_SET_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
        pub Size: u32,
        pub Action: root::DEVICE_DSM_ACTION,
        pub Flags: u32,
        pub ParameterBlockOffset: u32,
        pub ParameterBlockLength: u32,
        pub DataSetRangesOffset: u32,
        pub DataSetRangesLength: u32,
    }
    pub type DEVICE_MANAGE_DATA_SET_ATTRIBUTES = root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
    pub type PDEVICE_MANAGE_DATA_SET_ATTRIBUTES = *mut root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
    pub type DEVICE_DSM_INPUT = root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
    pub type PDEVICE_DSM_INPUT = *mut root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
        pub Size: u32,
        pub Action: root::DEVICE_DSM_ACTION,
        pub Flags: u32,
        pub OperationStatus: u32,
        pub ExtendedError: u32,
        pub TargetDetailedError: u32,
        pub ReservedStatus: u32,
        pub OutputBlockOffset: u32,
        pub OutputBlockLength: u32,
    }
    pub type DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT =
        root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
    pub type PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT =
        *mut root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
    pub type DEVICE_DSM_OUTPUT = root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
    pub type PDEVICE_DSM_OUTPUT = *mut root::_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_DEFINITION {
        pub Action: root::DEVICE_DSM_ACTION,
        pub SingleRange: root::BOOLEAN,
        pub ParameterBlockAlignment: u32,
        pub ParameterBlockLength: u32,
        pub HasOutput: root::BOOLEAN,
        pub OutputBlockAlignment: u32,
        pub OutputBlockLength: u32,
    }
    pub type DEVICE_DSM_DEFINITION = root::_DEVICE_DSM_DEFINITION;
    pub type PDEVICE_DSM_DEFINITION = *mut root::_DEVICE_DSM_DEFINITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {
        pub Size: u32,
        pub Flags: u32,
        pub NumFileTypeIDs: u32,
        pub FileTypeID: [root::GUID; 1usize],
    }
    pub type DEVICE_DSM_NOTIFICATION_PARAMETERS = root::_DEVICE_DSM_NOTIFICATION_PARAMETERS;
    pub type PDEVICE_DSM_NOTIFICATION_PARAMETERS = *mut root::_DEVICE_DSM_NOTIFICATION_PARAMETERS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_OFFLOAD_TOKEN {
        pub TokenType: [u8; 4usize],
        pub Reserved: [u8; 2usize],
        pub TokenIdLength: [u8; 2usize],
        pub __bindgen_anon_1: root::_STORAGE_OFFLOAD_TOKEN__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STORAGE_OFFLOAD_TOKEN__bindgen_ty_1 {
        pub StorageOffloadZeroDataToken: root::_STORAGE_OFFLOAD_TOKEN__bindgen_ty_1__bindgen_ty_1,
        pub Token: [u8; 504usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_OFFLOAD_TOKEN__bindgen_ty_1__bindgen_ty_1 {
        pub Reserved2: [u8; 504usize],
    }
    pub type STORAGE_OFFLOAD_TOKEN = root::_STORAGE_OFFLOAD_TOKEN;
    pub type PSTORAGE_OFFLOAD_TOKEN = *mut root::_STORAGE_OFFLOAD_TOKEN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
        pub Flags: u32,
        pub TimeToLive: u32,
        pub Reserved: [u32; 2usize],
    }
    pub type DEVICE_DSM_OFFLOAD_READ_PARAMETERS = root::_DEVICE_DSM_OFFLOAD_READ_PARAMETERS;
    pub type PDEVICE_DSM_OFFLOAD_READ_PARAMETERS = *mut root::_DEVICE_DSM_OFFLOAD_READ_PARAMETERS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_OFFLOAD_READ_OUTPUT {
        pub OffloadReadFlags: u32,
        pub Reserved: u32,
        pub LengthProtected: root::DWORDLONG,
        pub TokenLength: u32,
        pub Token: root::STORAGE_OFFLOAD_TOKEN,
    }
    pub type STORAGE_OFFLOAD_READ_OUTPUT = root::_STORAGE_OFFLOAD_READ_OUTPUT;
    pub type PSTORAGE_OFFLOAD_READ_OUTPUT = *mut root::_STORAGE_OFFLOAD_READ_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
        pub Flags: u32,
        pub Reserved: u32,
        pub TokenOffset: root::DWORDLONG,
        pub Token: root::STORAGE_OFFLOAD_TOKEN,
    }
    pub type DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = root::_DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
    pub type PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = *mut root::_DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_OFFLOAD_WRITE_OUTPUT {
        pub OffloadWriteFlags: u32,
        pub Reserved: u32,
        pub LengthCopied: root::DWORDLONG,
    }
    pub type STORAGE_OFFLOAD_WRITE_OUTPUT = root::_STORAGE_OFFLOAD_WRITE_OUTPUT;
    pub type PSTORAGE_OFFLOAD_WRITE_OUTPUT = *mut root::_STORAGE_OFFLOAD_WRITE_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub OutputVersion: u32,
    }
    pub type DEVICE_DATA_SET_LBP_STATE_PARAMETERS = root::_DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
    pub type PDEVICE_DATA_SET_LBP_STATE_PARAMETERS =
        *mut root::_DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
    pub type DEVICE_DSM_ALLOCATION_PARAMETERS = root::_DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
    pub type PDEVICE_DSM_ALLOCATION_PARAMETERS = *mut root::_DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {
        pub Size: u32,
        pub Version: u32,
        pub SlabSizeInBytes: root::DWORDLONG,
        pub SlabOffsetDeltaInBytes: u32,
        pub SlabAllocationBitMapBitCount: u32,
        pub SlabAllocationBitMapLength: u32,
        pub SlabAllocationBitMap: [u32; 1usize],
    }
    pub type DEVICE_DATA_SET_LB_PROVISIONING_STATE = root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE;
    pub type PDEVICE_DATA_SET_LB_PROVISIONING_STATE =
        *mut root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE;
    pub type DEVICE_DSM_ALLOCATION_OUTPUT = root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE;
    pub type PDEVICE_DSM_ALLOCATION_OUTPUT = *mut root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {
        pub Size: u32,
        pub Version: u32,
        pub SlabSizeInBytes: root::DWORDLONG,
        pub SlabOffsetDeltaInBytes: root::DWORDLONG,
        pub SlabAllocationBitMapBitCount: u32,
        pub SlabAllocationBitMapLength: u32,
        pub SlabAllocationBitMap: [u32; 1usize],
    }
    pub type DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 =
        root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
    pub type PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 =
        *mut root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
    pub type DEVICE_DSM_ALLOCATION_OUTPUT2 = root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
    pub type PDEVICE_DSM_ALLOCATION_OUTPUT2 = *mut root::_DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {
        pub NumberOfRepairCopies: u32,
        pub SourceCopy: u32,
        pub RepairCopies: [u32; 1usize],
    }
    pub type DEVICE_DATA_SET_REPAIR_PARAMETERS = root::_DEVICE_DATA_SET_REPAIR_PARAMETERS;
    pub type PDEVICE_DATA_SET_REPAIR_PARAMETERS = *mut root::_DEVICE_DATA_SET_REPAIR_PARAMETERS;
    pub type DEVICE_DSM_REPAIR_PARAMETERS = root::_DEVICE_DATA_SET_REPAIR_PARAMETERS;
    pub type PDEVICE_DSM_REPAIR_PARAMETERS = *mut root::_DEVICE_DATA_SET_REPAIR_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_REPAIR_OUTPUT {
        pub ParityExtent: root::DEVICE_DSM_RANGE,
    }
    pub type DEVICE_DATA_SET_REPAIR_OUTPUT = root::_DEVICE_DATA_SET_REPAIR_OUTPUT;
    pub type PDEVICE_DATA_SET_REPAIR_OUTPUT = *mut root::_DEVICE_DATA_SET_REPAIR_OUTPUT;
    pub type DEVICE_DSM_REPAIR_OUTPUT = root::_DEVICE_DATA_SET_REPAIR_OUTPUT;
    pub type PDEVICE_DSM_REPAIR_OUTPUT = *mut root::_DEVICE_DATA_SET_REPAIR_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_SCRUB_OUTPUT {
        pub BytesProcessed: root::DWORDLONG,
        pub BytesRepaired: root::DWORDLONG,
        pub BytesFailed: root::DWORDLONG,
    }
    pub type DEVICE_DATA_SET_SCRUB_OUTPUT = root::_DEVICE_DATA_SET_SCRUB_OUTPUT;
    pub type PDEVICE_DATA_SET_SCRUB_OUTPUT = *mut root::_DEVICE_DATA_SET_SCRUB_OUTPUT;
    pub type DEVICE_DSM_SCRUB_OUTPUT = root::_DEVICE_DATA_SET_SCRUB_OUTPUT;
    pub type PDEVICE_DSM_SCRUB_OUTPUT = *mut root::_DEVICE_DATA_SET_SCRUB_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
        pub BytesProcessed: root::DWORDLONG,
        pub BytesRepaired: root::DWORDLONG,
        pub BytesFailed: root::DWORDLONG,
        pub ParityExtent: root::DEVICE_DSM_RANGE,
    }
    pub type DEVICE_DATA_SET_SCRUB_EX_OUTPUT = root::_DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
    pub type PDEVICE_DATA_SET_SCRUB_EX_OUTPUT = *mut root::_DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
    pub type DEVICE_DSM_SCRUB_OUTPUT2 = root::_DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
    pub type PDEVICE_DSM_SCRUB_OUTPUT2 = *mut root::_DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_TIERING_QUERY_INPUT {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub NumberOfTierIds: u32,
        pub TierIds: [root::GUID; 1usize],
    }
    pub type DEVICE_DSM_TIERING_QUERY_INPUT = root::_DEVICE_DSM_TIERING_QUERY_INPUT;
    pub type PDEVICE_DSM_TIERING_QUERY_INPUT = *mut root::_DEVICE_DSM_TIERING_QUERY_INPUT;
    pub type DEVICE_DSM_TIERING_QUERY_PARAMETERS = root::_DEVICE_DSM_TIERING_QUERY_INPUT;
    pub type PDEVICE_DSM_TIERING_QUERY_PARAMETERS = *mut root::_DEVICE_DSM_TIERING_QUERY_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_TIER_REGION {
        pub TierId: root::GUID,
        pub Offset: root::DWORDLONG,
        pub Length: root::DWORDLONG,
    }
    pub type STORAGE_TIER_REGION = root::_STORAGE_TIER_REGION;
    pub type PSTORAGE_TIER_REGION = *mut root::_STORAGE_TIER_REGION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_TIERING_QUERY_OUTPUT {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Reserved: u32,
        pub Alignment: root::DWORDLONG,
        pub TotalNumberOfRegions: u32,
        pub NumberOfRegionsReturned: u32,
        pub Regions: [root::STORAGE_TIER_REGION; 1usize],
    }
    pub type DEVICE_DSM_TIERING_QUERY_OUTPUT = root::_DEVICE_DSM_TIERING_QUERY_OUTPUT;
    pub type PDEVICE_DSM_TIERING_QUERY_OUTPUT = *mut root::_DEVICE_DSM_TIERING_QUERY_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
        pub Size: u32,
        pub TargetPriority: u8,
        pub Reserved: [u8; 3usize],
    }
    pub type DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS =
        root::_DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
    pub type PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS =
        *mut root::_DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
        pub TopologyRangeBytes: root::DWORDLONG,
        pub TopologyId: [u8; 16usize],
    }
    pub type DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT =
        root::_DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
    pub type PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT =
        *mut root::_DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
    pub type DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = root::_DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
    pub type PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT =
        *mut root::_DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_STORAGE_ADDRESS_RANGE {
        pub StartAddress: root::LONGLONG,
        pub LengthInBytes: root::DWORDLONG,
    }
    pub type DEVICE_STORAGE_ADDRESS_RANGE = root::_DEVICE_STORAGE_ADDRESS_RANGE;
    pub type PDEVICE_STORAGE_ADDRESS_RANGE = *mut root::_DEVICE_STORAGE_ADDRESS_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT {
        pub Version: u32,
        pub Flags: u32,
        pub TotalNumberOfRanges: u32,
        pub NumberOfRangesReturned: u32,
        pub Ranges: [root::DEVICE_STORAGE_ADDRESS_RANGE; 1usize],
    }
    pub type DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = root::_DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
    pub type PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT =
        *mut root::_DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS {
        pub Size: u32,
        pub ReportOption: u8,
        pub Partial: u8,
        pub Reserved: [u8; 2usize],
    }
    pub type DEVICE_DSM_REPORT_ZONES_PARAMETERS = root::_DEVICE_DSM_REPORT_ZONES_PARAMETERS;
    pub type PDEVICE_DSM_REPORT_ZONES_PARAMETERS = *mut root::_DEVICE_DSM_REPORT_ZONES_PARAMETERS;
    pub const _STORAGE_ZONES_ATTRIBUTES_ZonesAttributeTypeAndLengthMayDifferent:
        root::_STORAGE_ZONES_ATTRIBUTES = 0;
    pub const _STORAGE_ZONES_ATTRIBUTES_ZonesAttributeTypeSameLengthSame:
        root::_STORAGE_ZONES_ATTRIBUTES = 1;
    pub const _STORAGE_ZONES_ATTRIBUTES_ZonesAttributeTypeSameLastZoneLengthDifferent:
        root::_STORAGE_ZONES_ATTRIBUTES = 2;
    pub const _STORAGE_ZONES_ATTRIBUTES_ZonesAttributeTypeMayDifferentLengthSame:
        root::_STORAGE_ZONES_ATTRIBUTES = 3;
    pub type _STORAGE_ZONES_ATTRIBUTES = i32;
    pub use self::super::root::_STORAGE_ZONES_ATTRIBUTES as STORAGE_ZONES_ATTRIBUTES;
    pub type PSTORAGE_ZONES_ATTRIBUTES = *mut root::_STORAGE_ZONES_ATTRIBUTES;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionConventional: root::_STORAGE_ZONE_CONDITION = 0;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionEmpty: root::_STORAGE_ZONE_CONDITION = 1;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionImplicitlyOpened: root::_STORAGE_ZONE_CONDITION =
        2;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionExplicitlyOpened: root::_STORAGE_ZONE_CONDITION =
        3;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionClosed: root::_STORAGE_ZONE_CONDITION = 4;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionReadOnly: root::_STORAGE_ZONE_CONDITION = 13;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionFull: root::_STORAGE_ZONE_CONDITION = 14;
    pub const _STORAGE_ZONE_CONDITION_ZoneConditionOffline: root::_STORAGE_ZONE_CONDITION = 15;
    pub type _STORAGE_ZONE_CONDITION = i32;
    pub use self::super::root::_STORAGE_ZONE_CONDITION as STORAGE_ZONE_CONDITION;
    pub type PSTORAGE_ZONE_CONDITION = *mut root::_STORAGE_ZONE_CONDITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ZONE_DESCRIPTOR {
        pub Size: u32,
        pub ZoneType: root::STORAGE_ZONE_TYPES,
        pub ZoneCondition: root::STORAGE_ZONE_CONDITION,
        pub ResetWritePointerRecommend: root::BOOLEAN,
        pub Reserved0: [u8; 3usize],
        pub ZoneSize: root::DWORDLONG,
        pub WritePointerOffset: root::DWORDLONG,
    }
    pub type STORAGE_ZONE_DESCRIPTOR = root::_STORAGE_ZONE_DESCRIPTOR;
    pub type PSTORAGE_ZONE_DESCRIPTOR = *mut root::_STORAGE_ZONE_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_REPORT_ZONES_DATA {
        pub Size: u32,
        pub ZoneCount: u32,
        pub Attributes: root::STORAGE_ZONES_ATTRIBUTES,
        pub Reserved0: u32,
        pub ZoneDescriptors: [root::STORAGE_ZONE_DESCRIPTOR; 1usize],
    }
    pub type DEVICE_DSM_REPORT_ZONES_DATA = root::_DEVICE_DSM_REPORT_ZONES_DATA;
    pub type PDEVICE_DSM_REPORT_ZONES_DATA = *mut root::_DEVICE_DSM_REPORT_ZONES_DATA;
    pub type DEVICE_DSM_REPORT_ZONES_OUTPUT = root::_DEVICE_DSM_REPORT_ZONES_DATA;
    pub type PDEVICE_DSM_REPORT_ZONES_OUTPUT = *mut root::_DEVICE_DSM_REPORT_ZONES_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_STORAGE_RANGE_ATTRIBUTES {
        pub LengthInBytes: root::DWORDLONG,
        pub __bindgen_anon_1: root::_DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1,
        pub Reserved: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1 {
        pub AllFlags: u32,
        pub __bindgen_anon_1: root::_DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub __bindgen_padding_0: [u8; 3usize],
    }
    impl _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn IsRangeBad(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_IsRangeBad(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            IsRangeBad: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let IsRangeBad: u32 = unsafe { ::std::mem::transmute(IsRangeBad) };
                IsRangeBad as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type DEVICE_STORAGE_RANGE_ATTRIBUTES = root::_DEVICE_STORAGE_RANGE_ATTRIBUTES;
    pub type PDEVICE_STORAGE_RANGE_ATTRIBUTES = *mut root::_DEVICE_STORAGE_RANGE_ATTRIBUTES;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DEVICE_DSM_RANGE_ERROR_INFO {
        pub Version: u32,
        pub Flags: u32,
        pub TotalNumberOfRanges: u32,
        pub NumberOfRangesReturned: u32,
        pub Ranges: [root::DEVICE_STORAGE_RANGE_ATTRIBUTES; 1usize],
    }
    pub type DEVICE_DSM_RANGE_ERROR_INFO = root::_DEVICE_DSM_RANGE_ERROR_INFO;
    pub type PDEVICE_DSM_RANGE_ERROR_INFO = *mut root::_DEVICE_DSM_RANGE_ERROR_INFO;
    pub type DEVICE_DSM_RANGE_ERROR_OUTPUT = root::_DEVICE_DSM_RANGE_ERROR_INFO;
    pub type PDEVICE_DSM_RANGE_ERROR_OUTPUT = *mut root::_DEVICE_DSM_RANGE_ERROR_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_LOST_QUERY_PARAMETERS {
        pub Version: u32,
        pub Granularity: root::DWORDLONG,
    }
    pub type DEVICE_DSM_LOST_QUERY_PARAMETERS = root::_DEVICE_DSM_LOST_QUERY_PARAMETERS;
    pub type PDEVICE_DSM_LOST_QUERY_PARAMETERS = *mut root::_DEVICE_DSM_LOST_QUERY_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_LOST_QUERY_OUTPUT {
        pub Version: u32,
        pub Size: u32,
        pub Alignment: root::DWORDLONG,
        pub NumberOfBits: u32,
        pub BitMap: [u32; 1usize],
    }
    pub type DEVICE_DSM_LOST_QUERY_OUTPUT = root::_DEVICE_DSM_LOST_QUERY_OUTPUT;
    pub type PDEVICE_DSM_LOST_QUERY_OUTPUT = *mut root::_DEVICE_DSM_LOST_QUERY_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_FREE_SPACE_OUTPUT {
        pub Version: u32,
        pub FreeSpace: root::DWORDLONG,
    }
    pub type DEVICE_DSM_FREE_SPACE_OUTPUT = root::_DEVICE_DSM_FREE_SPACE_OUTPUT;
    pub type PDEVICE_DSM_FREE_SPACE_OUTPUT = *mut root::_DEVICE_DSM_FREE_SPACE_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_DSM_CONVERSION_OUTPUT {
        pub Version: u32,
        pub Source: root::GUID,
    }
    pub type DEVICE_DSM_CONVERSION_OUTPUT = root::_DEVICE_DSM_CONVERSION_OUTPUT;
    pub type PDEVICE_DSM_CONVERSION_OUTPUT = *mut root::_DEVICE_DSM_CONVERSION_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {
        pub MaximumRequestsPerPeriod: u32,
        pub MinimumPeriod: u32,
        pub MaximumRequestSize: root::DWORDLONG,
        pub EstimatedTimePerRequest: u32,
        pub NumOutStandingRequests: u32,
        pub RequestSize: root::DWORDLONG,
    }
    pub type STORAGE_GET_BC_PROPERTIES_OUTPUT = root::_STORAGE_GET_BC_PROPERTIES_OUTPUT;
    pub type PSTORAGE_GET_BC_PROPERTIES_OUTPUT = *mut root::_STORAGE_GET_BC_PROPERTIES_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {
        pub Version: u32,
        pub RequestsPerPeriod: u32,
        pub Period: u32,
        pub RetryFailures: root::BOOLEAN,
        pub Discardable: root::BOOLEAN,
        pub Reserved1: [root::BOOLEAN; 2usize],
        pub AccessType: u32,
        pub AccessMode: u32,
    }
    pub type STORAGE_ALLOCATE_BC_STREAM_INPUT = root::_STORAGE_ALLOCATE_BC_STREAM_INPUT;
    pub type PSTORAGE_ALLOCATE_BC_STREAM_INPUT = *mut root::_STORAGE_ALLOCATE_BC_STREAM_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {
        pub RequestSize: root::DWORDLONG,
        pub NumOutStandingRequests: u32,
    }
    pub type STORAGE_ALLOCATE_BC_STREAM_OUTPUT = root::_STORAGE_ALLOCATE_BC_STREAM_OUTPUT;
    pub type PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = *mut root::_STORAGE_ALLOCATE_BC_STREAM_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PRIORITY_HINT_SUPPORT {
        pub SupportFlags: u32,
    }
    pub type STORAGE_PRIORITY_HINT_SUPPORT = root::_STORAGE_PRIORITY_HINT_SUPPORT;
    pub type PSTORAGE_PRIORITY_HINT_SUPPORT = *mut root::_STORAGE_PRIORITY_HINT_SUPPORT;
    pub const _STORAGE_DIAGNOSTIC_LEVEL_StorageDiagnosticLevelDefault:
        root::_STORAGE_DIAGNOSTIC_LEVEL = 0;
    pub const _STORAGE_DIAGNOSTIC_LEVEL_StorageDiagnosticLevelMax: root::_STORAGE_DIAGNOSTIC_LEVEL =
        1;
    pub type _STORAGE_DIAGNOSTIC_LEVEL = i32;
    pub use self::super::root::_STORAGE_DIAGNOSTIC_LEVEL as STORAGE_DIAGNOSTIC_LEVEL;
    pub type PSTORAGE_DIAGNOSTIC_LEVEL = *mut root::_STORAGE_DIAGNOSTIC_LEVEL;
    pub const _STORAGE_DIAGNOSTIC_TARGET_TYPE_StorageDiagnosticTargetTypeUndefined:
        root::_STORAGE_DIAGNOSTIC_TARGET_TYPE = 0;
    pub const _STORAGE_DIAGNOSTIC_TARGET_TYPE_StorageDiagnosticTargetTypePort:
        root::_STORAGE_DIAGNOSTIC_TARGET_TYPE = 1;
    pub const _STORAGE_DIAGNOSTIC_TARGET_TYPE_StorageDiagnosticTargetTypeMiniport:
        root::_STORAGE_DIAGNOSTIC_TARGET_TYPE = 2;
    pub const _STORAGE_DIAGNOSTIC_TARGET_TYPE_StorageDiagnosticTargetTypeHbaFirmware:
        root::_STORAGE_DIAGNOSTIC_TARGET_TYPE = 3;
    pub const _STORAGE_DIAGNOSTIC_TARGET_TYPE_StorageDiagnosticTargetTypeMax:
        root::_STORAGE_DIAGNOSTIC_TARGET_TYPE = 4;
    pub type _STORAGE_DIAGNOSTIC_TARGET_TYPE = i32;
    pub use self::super::root::_STORAGE_DIAGNOSTIC_TARGET_TYPE as STORAGE_DIAGNOSTIC_TARGET_TYPE;
    pub type PSTORAGE_DIAGNOSTIC_TARGET_TYPE = *mut root::_STORAGE_DIAGNOSTIC_TARGET_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DIAGNOSTIC_REQUEST {
        pub Version: u32,
        pub Size: u32,
        pub Reserved: u32,
        pub TargetType: root::STORAGE_DIAGNOSTIC_TARGET_TYPE,
        pub Level: root::STORAGE_DIAGNOSTIC_LEVEL,
    }
    pub type STORAGE_DIAGNOSTIC_REQUEST = root::_STORAGE_DIAGNOSTIC_REQUEST;
    pub type PSTORAGE_DIAGNOSTIC_REQUEST = *mut root::_STORAGE_DIAGNOSTIC_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DIAGNOSTIC_DATA {
        pub Version: u32,
        pub Size: u32,
        pub ProviderId: root::GUID,
        pub BufferSize: u32,
        pub Reserved: u32,
        pub DiagnosticDataBuffer: [u8; 1usize],
    }
    pub type STORAGE_DIAGNOSTIC_DATA = root::_STORAGE_DIAGNOSTIC_DATA;
    pub type PSTORAGE_DIAGNOSTIC_DATA = *mut root::_STORAGE_DIAGNOSTIC_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PHYSICAL_ELEMENT_STATUS_REQUEST {
        pub Version: u32,
        pub Size: u32,
        pub StartingElement: u32,
        pub Filter: u8,
        pub ReportType: u8,
        pub Reserved: [u8; 2usize],
    }
    pub type PHYSICAL_ELEMENT_STATUS_REQUEST = root::_PHYSICAL_ELEMENT_STATUS_REQUEST;
    pub type PPHYSICAL_ELEMENT_STATUS_REQUEST = *mut root::_PHYSICAL_ELEMENT_STATUS_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR {
        pub Version: u32,
        pub Size: u32,
        pub ElementIdentifier: u32,
        pub PhysicalElementType: u8,
        pub PhysicalElementHealth: u8,
        pub Reserved1: [u8; 2usize],
        pub AssociatedCapacity: root::DWORDLONG,
        pub Reserved2: [u32; 4usize],
    }
    pub type PHYSICAL_ELEMENT_STATUS_DESCRIPTOR = root::_PHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
    pub type PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = *mut root::_PHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PHYSICAL_ELEMENT_STATUS {
        pub Version: u32,
        pub Size: u32,
        pub DescriptorCount: u32,
        pub ReturnedDescriptorCount: u32,
        pub ElementIdentifierBeingDepoped: u32,
        pub Reserved: u32,
        pub Descriptors: [root::PHYSICAL_ELEMENT_STATUS_DESCRIPTOR; 1usize],
    }
    pub type PHYSICAL_ELEMENT_STATUS = root::_PHYSICAL_ELEMENT_STATUS;
    pub type PPHYSICAL_ELEMENT_STATUS = *mut root::_PHYSICAL_ELEMENT_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST {
        pub Version: u32,
        pub Size: u32,
        pub RequestCapacity: root::DWORDLONG,
        pub ElementIdentifier: u32,
        pub Reserved: u32,
    }
    pub type REMOVE_ELEMENT_AND_TRUNCATE_REQUEST = root::_REMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
    pub type PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = *mut root::_REMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
    pub const _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE_DeviceInternalStatusDataRequestTypeUndefined : root :: _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = 0 ;
    pub const _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE_DeviceCurrentInternalStatusDataHeader:
        root::_DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = 1;
    pub const _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE_DeviceCurrentInternalStatusData:
        root::_DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = 2;
    pub type _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = i32;
    pub use self::super::root::_DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE as DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
    pub type PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE =
        *mut root::_DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
    pub const _DEVICE_INTERNAL_STATUS_DATA_SET_DeviceStatusDataSetUndefined:
        root::_DEVICE_INTERNAL_STATUS_DATA_SET = 0;
    pub const _DEVICE_INTERNAL_STATUS_DATA_SET_DeviceStatusDataSet1:
        root::_DEVICE_INTERNAL_STATUS_DATA_SET = 1;
    pub const _DEVICE_INTERNAL_STATUS_DATA_SET_DeviceStatusDataSet2:
        root::_DEVICE_INTERNAL_STATUS_DATA_SET = 2;
    pub const _DEVICE_INTERNAL_STATUS_DATA_SET_DeviceStatusDataSet3:
        root::_DEVICE_INTERNAL_STATUS_DATA_SET = 3;
    pub const _DEVICE_INTERNAL_STATUS_DATA_SET_DeviceStatusDataSet4:
        root::_DEVICE_INTERNAL_STATUS_DATA_SET = 4;
    pub const _DEVICE_INTERNAL_STATUS_DATA_SET_DeviceStatusDataSetMax:
        root::_DEVICE_INTERNAL_STATUS_DATA_SET = 5;
    pub type _DEVICE_INTERNAL_STATUS_DATA_SET = i32;
    pub use self::super::root::_DEVICE_INTERNAL_STATUS_DATA_SET as DEVICE_INTERNAL_STATUS_DATA_SET;
    pub type PDEVICE_INTERNAL_STATUS_DATA_SET = *mut root::_DEVICE_INTERNAL_STATUS_DATA_SET;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST {
        pub Version: u32,
        pub Size: u32,
        pub RequestDataType: root::DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE,
        pub RequestDataSet: root::DEVICE_INTERNAL_STATUS_DATA_SET,
    }
    pub type GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST =
        root::_GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
    pub type PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST =
        *mut root::_GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICE_INTERNAL_STATUS_DATA {
        pub Version: u32,
        pub Size: u32,
        pub T10VendorId: root::DWORDLONG,
        pub DataSet1Length: u32,
        pub DataSet2Length: u32,
        pub DataSet3Length: u32,
        pub DataSet4Length: u32,
        pub StatusDataVersion: u8,
        pub Reserved: [u8; 3usize],
        pub ReasonIdentifier: [u8; 128usize],
        pub StatusDataLength: u32,
        pub StatusData: [u8; 1usize],
    }
    pub type DEVICE_INTERNAL_STATUS_DATA = root::_DEVICE_INTERNAL_STATUS_DATA;
    pub type PDEVICE_INTERNAL_STATUS_DATA = *mut root::_DEVICE_INTERNAL_STATUS_DATA;
    #[repr(C)]
    #[derive(Debug)]
    pub struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {
        pub Reserved: u16,
        pub SerialNumberLength: u16,
        pub SerialNumber: root::__IncompleteArrayField<u8>,
    }
    pub type STORAGE_MEDIA_SERIAL_NUMBER_DATA = root::_STORAGE_MEDIA_SERIAL_NUMBER_DATA;
    pub type PSTORAGE_MEDIA_SERIAL_NUMBER_DATA = *mut root::_STORAGE_MEDIA_SERIAL_NUMBER_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_READ_CAPACITY {
        pub Version: u32,
        pub Size: u32,
        pub BlockLength: u32,
        pub NumberOfBlocks: root::LARGE_INTEGER,
        pub DiskLength: root::LARGE_INTEGER,
    }
    pub type STORAGE_READ_CAPACITY = root::_STORAGE_READ_CAPACITY;
    pub type PSTORAGE_READ_CAPACITY = *mut root::_STORAGE_READ_CAPACITY;
    pub const _WRITE_CACHE_TYPE_WriteCacheTypeUnknown: root::_WRITE_CACHE_TYPE = 0;
    pub const _WRITE_CACHE_TYPE_WriteCacheTypeNone: root::_WRITE_CACHE_TYPE = 1;
    pub const _WRITE_CACHE_TYPE_WriteCacheTypeWriteBack: root::_WRITE_CACHE_TYPE = 2;
    pub const _WRITE_CACHE_TYPE_WriteCacheTypeWriteThrough: root::_WRITE_CACHE_TYPE = 3;
    pub type _WRITE_CACHE_TYPE = i32;
    pub use self::super::root::_WRITE_CACHE_TYPE as WRITE_CACHE_TYPE;
    pub const _WRITE_CACHE_ENABLE_WriteCacheEnableUnknown: root::_WRITE_CACHE_ENABLE = 0;
    pub const _WRITE_CACHE_ENABLE_WriteCacheDisabled: root::_WRITE_CACHE_ENABLE = 1;
    pub const _WRITE_CACHE_ENABLE_WriteCacheEnabled: root::_WRITE_CACHE_ENABLE = 2;
    pub type _WRITE_CACHE_ENABLE = i32;
    pub use self::super::root::_WRITE_CACHE_ENABLE as WRITE_CACHE_ENABLE;
    pub const _WRITE_CACHE_CHANGE_WriteCacheChangeUnknown: root::_WRITE_CACHE_CHANGE = 0;
    pub const _WRITE_CACHE_CHANGE_WriteCacheNotChangeable: root::_WRITE_CACHE_CHANGE = 1;
    pub const _WRITE_CACHE_CHANGE_WriteCacheChangeable: root::_WRITE_CACHE_CHANGE = 2;
    pub type _WRITE_CACHE_CHANGE = i32;
    pub use self::super::root::_WRITE_CACHE_CHANGE as WRITE_CACHE_CHANGE;
    pub const _WRITE_THROUGH_WriteThroughUnknown: root::_WRITE_THROUGH = 0;
    pub const _WRITE_THROUGH_WriteThroughNotSupported: root::_WRITE_THROUGH = 1;
    pub const _WRITE_THROUGH_WriteThroughSupported: root::_WRITE_THROUGH = 2;
    pub type _WRITE_THROUGH = i32;
    pub use self::super::root::_WRITE_THROUGH as WRITE_THROUGH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_WRITE_CACHE_PROPERTY {
        pub Version: u32,
        pub Size: u32,
        pub WriteCacheType: root::WRITE_CACHE_TYPE,
        pub WriteCacheEnabled: root::WRITE_CACHE_ENABLE,
        pub WriteCacheChangeable: root::WRITE_CACHE_CHANGE,
        pub WriteThroughSupported: root::WRITE_THROUGH,
        pub FlushCacheSupported: root::BOOLEAN,
        pub UserDefinedPowerProtection: root::BOOLEAN,
        pub NVCacheEnabled: root::BOOLEAN,
    }
    pub type STORAGE_WRITE_CACHE_PROPERTY = root::_STORAGE_WRITE_CACHE_PROPERTY;
    pub type PSTORAGE_WRITE_CACHE_PROPERTY = *mut root::_STORAGE_WRITE_CACHE_PROPERTY;
    #[repr(C)]
    pub struct _PERSISTENT_RESERVE_COMMAND {
        pub Version: u32,
        pub Size: u32,
        pub __bindgen_anon_1: root::_PERSISTENT_RESERVE_COMMAND__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct _PERSISTENT_RESERVE_COMMAND__bindgen_ty_1 {
        pub PR_IN: root::__BindgenUnionField<
            root::_PERSISTENT_RESERVE_COMMAND__bindgen_ty_1__bindgen_ty_1,
        >,
        pub PR_OUT: root::__BindgenUnionField<
            root::_PERSISTENT_RESERVE_COMMAND__bindgen_ty_1__bindgen_ty_2,
        >,
        pub bindgen_union_field: [u16; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PERSISTENT_RESERVE_COMMAND__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub AllocationLength: u16,
    }
    impl _PERSISTENT_RESERVE_COMMAND__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn ServiceAction(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
        }
        #[inline]
        pub fn set_ServiceAction(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved1(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved1(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ServiceAction: u8,
            Reserved1: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 5u8, {
                let ServiceAction: u8 = unsafe { ::std::mem::transmute(ServiceAction) };
                ServiceAction as u64
            });
            __bindgen_bitfield_unit.set(5usize, 3u8, {
                let Reserved1: u8 = unsafe { ::std::mem::transmute(Reserved1) };
                Reserved1 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct _PERSISTENT_RESERVE_COMMAND__bindgen_ty_1__bindgen_ty_2 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize]>,
        pub ParameterList: root::__IncompleteArrayField<u8>,
    }
    impl _PERSISTENT_RESERVE_COMMAND__bindgen_ty_1__bindgen_ty_2 {
        #[inline]
        pub fn ServiceAction(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
        }
        #[inline]
        pub fn set_ServiceAction(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved1(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved1(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 3u8, val as u64)
            }
        }
        #[inline]
        pub fn Type(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_Type(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn Scope(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_Scope(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ServiceAction: u8,
            Reserved1: u8,
            Type: u8,
            Scope: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 5u8, {
                let ServiceAction: u8 = unsafe { ::std::mem::transmute(ServiceAction) };
                ServiceAction as u64
            });
            __bindgen_bitfield_unit.set(5usize, 3u8, {
                let Reserved1: u8 = unsafe { ::std::mem::transmute(Reserved1) };
                Reserved1 as u64
            });
            __bindgen_bitfield_unit.set(8usize, 4u8, {
                let Type: u8 = unsafe { ::std::mem::transmute(Type) };
                Type as u64
            });
            __bindgen_bitfield_unit.set(12usize, 4u8, {
                let Scope: u8 = unsafe { ::std::mem::transmute(Scope) };
                Scope as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type PERSISTENT_RESERVE_COMMAND = root::_PERSISTENT_RESERVE_COMMAND;
    pub type PPERSISTENT_RESERVE_COMMAND = *mut root::_PERSISTENT_RESERVE_COMMAND;
    pub const _DEVICEDUMP_COLLECTION_TYPE_TCCollectionBugCheck: root::_DEVICEDUMP_COLLECTION_TYPE =
        1;
    pub const _DEVICEDUMP_COLLECTION_TYPE_TCCollectionApplicationRequested:
        root::_DEVICEDUMP_COLLECTION_TYPE = 2;
    pub const _DEVICEDUMP_COLLECTION_TYPE_TCCollectionDeviceRequested:
        root::_DEVICEDUMP_COLLECTION_TYPE = 3;
    pub type _DEVICEDUMP_COLLECTION_TYPE = i32;
    pub use self::super::root::_DEVICEDUMP_COLLECTION_TYPE as DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE;
    pub type PDEVICEDUMP_COLLECTION_TYPE = *mut root::_DEVICEDUMP_COLLECTION_TYPE;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_SUBSECTION_POINTER {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub dwOffset: u32,
    }
    pub type DEVICEDUMP_SUBSECTION_POINTER = root::_DEVICEDUMP_SUBSECTION_POINTER;
    pub type PDEVICEDUMP_SUBSECTION_POINTER = *mut root::_DEVICEDUMP_SUBSECTION_POINTER;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_STRUCTURE_VERSION {
        pub dwSignature: u32,
        pub dwVersion: u32,
        pub dwSize: u32,
    }
    pub type DEVICEDUMP_STRUCTURE_VERSION = root::_DEVICEDUMP_STRUCTURE_VERSION;
    pub type PDEVICEDUMP_STRUCTURE_VERSION = *mut root::_DEVICEDUMP_STRUCTURE_VERSION;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_SECTION_HEADER {
        pub guidDeviceDataId: root::GUID,
        pub sOrganizationID: [u8; 16usize],
        pub dwFirmwareRevision: u32,
        pub sModelNumber: [u8; 32usize],
        pub szDeviceManufacturingID: [u8; 32usize],
        pub dwFlags: u32,
        pub bRestrictedPrivateDataVersion: u32,
        pub dwFirmwareIssueId: u32,
        pub szIssueDescriptionString: [u8; 132usize],
    }
    pub type DEVICEDUMP_SECTION_HEADER = root::_DEVICEDUMP_SECTION_HEADER;
    pub type PDEVICEDUMP_SECTION_HEADER = *mut root::_DEVICEDUMP_SECTION_HEADER;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GP_LOG_PAGE_DESCRIPTOR {
        pub LogAddress: u16,
        pub LogSectors: u16,
    }
    pub type GP_LOG_PAGE_DESCRIPTOR = root::_GP_LOG_PAGE_DESCRIPTOR;
    pub type PGP_LOG_PAGE_DESCRIPTOR = *mut root::_GP_LOG_PAGE_DESCRIPTOR;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_PUBLIC_SUBSECTION {
        pub dwFlags: u32,
        pub GPLogTable: [root::GP_LOG_PAGE_DESCRIPTOR; 16usize],
        pub szDescription: [i8; 16usize],
        pub bData: [u8; 1usize],
    }
    pub type DEVICEDUMP_PUBLIC_SUBSECTION = root::_DEVICEDUMP_PUBLIC_SUBSECTION;
    pub type PDEVICEDUMP_PUBLIC_SUBSECTION = *mut root::_DEVICEDUMP_PUBLIC_SUBSECTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_RESTRICTED_SUBSECTION {
        pub bData: [u8; 1usize],
    }
    pub type DEVICEDUMP_RESTRICTED_SUBSECTION = root::_DEVICEDUMP_RESTRICTED_SUBSECTION;
    pub type PDEVICEDUMP_RESTRICTED_SUBSECTION = *mut root::_DEVICEDUMP_RESTRICTED_SUBSECTION;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_PRIVATE_SUBSECTION {
        pub dwFlags: u32,
        pub GPLogId: root::GP_LOG_PAGE_DESCRIPTOR,
        pub bData: [u8; 1usize],
    }
    pub type DEVICEDUMP_PRIVATE_SUBSECTION = root::_DEVICEDUMP_PRIVATE_SUBSECTION;
    pub type PDEVICEDUMP_PRIVATE_SUBSECTION = *mut root::_DEVICEDUMP_PRIVATE_SUBSECTION;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_STORAGEDEVICE_DATA {
        pub Descriptor: root::DEVICEDUMP_STRUCTURE_VERSION,
        pub SectionHeader: root::DEVICEDUMP_SECTION_HEADER,
        pub dwBufferSize: u32,
        pub dwReasonForCollection: u32,
        pub PublicData: root::DEVICEDUMP_SUBSECTION_POINTER,
        pub RestrictedData: root::DEVICEDUMP_SUBSECTION_POINTER,
        pub PrivateData: root::DEVICEDUMP_SUBSECTION_POINTER,
    }
    pub type DEVICEDUMP_STORAGEDEVICE_DATA = root::_DEVICEDUMP_STORAGEDEVICE_DATA;
    pub type PDEVICEDUMP_STORAGEDEVICE_DATA = *mut root::_DEVICEDUMP_STORAGEDEVICE_DATA;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
        pub Cdb: [u8; 16usize],
        pub Command: [u8; 16usize],
        pub StartTime: root::DWORDLONG,
        pub EndTime: root::DWORDLONG,
        pub OperationStatus: u32,
        pub OperationError: u32,
        pub StackSpecific: root::_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1 {
        pub ExternalStack:
            root::_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_1,
        pub AtaPort: root::_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_2,
        pub StorPort:
            root::_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_3,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_1 {
        pub dwReserved: u32,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_2 {
        pub dwAtaPortSpecific: u32,
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_3 {
        pub SrbTag: u32,
    }
    pub type DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD =
        root::_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
    pub type PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD =
        *mut root::_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {
        pub Descriptor: root::DEVICEDUMP_STRUCTURE_VERSION,
        pub dwReasonForCollection: u32,
        pub cDriverName: [u8; 16usize],
        pub uiNumRecords: u32,
        pub RecordArray: [root::DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD; 1usize],
    }
    pub type DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = root::_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
    pub type PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = *mut root::_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_IDLE_POWER {
        pub Version: u32,
        pub Size: u32,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
        pub D3IdleTimeout: u32,
    }
    impl _STORAGE_IDLE_POWER {
        #[inline]
        pub fn WakeCapableHint(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_WakeCapableHint(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn D3ColdSupported(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_D3ColdSupported(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
        }
        #[inline]
        pub fn set_Reserved(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            WakeCapableHint: u32,
            D3ColdSupported: u32,
            Reserved: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let WakeCapableHint: u32 = unsafe { ::std::mem::transmute(WakeCapableHint) };
                WakeCapableHint as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let D3ColdSupported: u32 = unsafe { ::std::mem::transmute(D3ColdSupported) };
                D3ColdSupported as u64
            });
            __bindgen_bitfield_unit.set(2usize, 30u8, {
                let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
                Reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type STORAGE_IDLE_POWER = root::_STORAGE_IDLE_POWER;
    pub type PSTORAGE_IDLE_POWER = *mut root::_STORAGE_IDLE_POWER;
    pub const _STORAGE_POWERUP_REASON_TYPE_StoragePowerupUnknown:
        root::_STORAGE_POWERUP_REASON_TYPE = 0;
    pub const _STORAGE_POWERUP_REASON_TYPE_StoragePowerupIO: root::_STORAGE_POWERUP_REASON_TYPE = 1;
    pub const _STORAGE_POWERUP_REASON_TYPE_StoragePowerupDeviceAttention:
        root::_STORAGE_POWERUP_REASON_TYPE = 2;
    pub type _STORAGE_POWERUP_REASON_TYPE = i32;
    pub use self::super::root::_STORAGE_POWERUP_REASON_TYPE as STORAGE_POWERUP_REASON_TYPE;
    pub type PSTORAGE_POWERUP_REASON_TYPE = *mut root::_STORAGE_POWERUP_REASON_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_IDLE_POWERUP_REASON {
        pub Version: u32,
        pub Size: u32,
        pub PowerupReason: root::STORAGE_POWERUP_REASON_TYPE,
    }
    pub type STORAGE_IDLE_POWERUP_REASON = root::_STORAGE_IDLE_POWERUP_REASON;
    pub type PSTORAGE_IDLE_POWERUP_REASON = *mut root::_STORAGE_IDLE_POWERUP_REASON;
    pub const _STORAGE_DEVICE_POWER_CAP_UNITS_StorageDevicePowerCapUnitsPercent:
        root::_STORAGE_DEVICE_POWER_CAP_UNITS = 0;
    pub const _STORAGE_DEVICE_POWER_CAP_UNITS_StorageDevicePowerCapUnitsMilliwatts:
        root::_STORAGE_DEVICE_POWER_CAP_UNITS = 1;
    pub type _STORAGE_DEVICE_POWER_CAP_UNITS = i32;
    pub use self::super::root::_STORAGE_DEVICE_POWER_CAP_UNITS as STORAGE_DEVICE_POWER_CAP_UNITS;
    pub type PSTORAGE_DEVICE_POWER_CAP_UNITS = *mut root::_STORAGE_DEVICE_POWER_CAP_UNITS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_DEVICE_POWER_CAP {
        pub Version: u32,
        pub Size: u32,
        pub Units: root::STORAGE_DEVICE_POWER_CAP_UNITS,
        pub MaxPower: root::DWORDLONG,
    }
    pub type STORAGE_DEVICE_POWER_CAP = root::_STORAGE_DEVICE_POWER_CAP;
    pub type PSTORAGE_DEVICE_POWER_CAP = *mut root::_STORAGE_DEVICE_POWER_CAP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_RPMB_DATA_FRAME {
        pub Stuff: [u8; 196usize],
        pub KeyOrMAC: [u8; 32usize],
        pub Data: [u8; 256usize],
        pub Nonce: [u8; 16usize],
        pub WriteCounter: [u8; 4usize],
        pub Address: [u8; 2usize],
        pub BlockCount: [u8; 2usize],
        pub OperationResult: [u8; 2usize],
        pub RequestOrResponseType: [u8; 2usize],
    }
    pub type STORAGE_RPMB_DATA_FRAME = root::_STORAGE_RPMB_DATA_FRAME;
    pub type PSTORAGE_RPMB_DATA_FRAME = *mut root::_STORAGE_RPMB_DATA_FRAME;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbProgramAuthKey: root::_STORAGE_RPMB_COMMAND_TYPE =
        1;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbQueryWriteCounter:
        root::_STORAGE_RPMB_COMMAND_TYPE = 2;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbAuthenticatedWrite:
        root::_STORAGE_RPMB_COMMAND_TYPE = 3;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbAuthenticatedRead:
        root::_STORAGE_RPMB_COMMAND_TYPE = 4;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbReadResultRequest:
        root::_STORAGE_RPMB_COMMAND_TYPE = 5;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbAuthenticatedDeviceConfigWrite:
        root::_STORAGE_RPMB_COMMAND_TYPE = 6;
    pub const _STORAGE_RPMB_COMMAND_TYPE_StorRpmbAuthenticatedDeviceConfigRead:
        root::_STORAGE_RPMB_COMMAND_TYPE = 7;
    pub type _STORAGE_RPMB_COMMAND_TYPE = i32;
    pub use self::super::root::_STORAGE_RPMB_COMMAND_TYPE as STORAGE_RPMB_COMMAND_TYPE;
    pub type PSTORAGE_RPMB_COMMAND_TYPE = *mut root::_STORAGE_RPMB_COMMAND_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_EVENT_NOTIFICATION {
        pub Version: u32,
        pub Size: u32,
        pub Events: root::DWORDLONG,
    }
    pub type STORAGE_EVENT_NOTIFICATION = root::_STORAGE_EVENT_NOTIFICATION;
    pub type PSTORAGE_EVENT_NOTIFICATION = *mut root::_STORAGE_EVENT_NOTIFICATION;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeUnknown: root::_STORAGE_COUNTER_TYPE = 0;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeTemperatureCelsius:
        root::_STORAGE_COUNTER_TYPE = 1;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeTemperatureCelsiusMax:
        root::_STORAGE_COUNTER_TYPE = 2;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeReadErrorsTotal: root::_STORAGE_COUNTER_TYPE =
        3;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeReadErrorsCorrected:
        root::_STORAGE_COUNTER_TYPE = 4;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeReadErrorsUncorrected:
        root::_STORAGE_COUNTER_TYPE = 5;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWriteErrorsTotal:
        root::_STORAGE_COUNTER_TYPE = 6;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWriteErrorsCorrected:
        root::_STORAGE_COUNTER_TYPE = 7;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWriteErrorsUncorrected:
        root::_STORAGE_COUNTER_TYPE = 8;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeManufactureDate: root::_STORAGE_COUNTER_TYPE =
        9;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeStartStopCycleCount:
        root::_STORAGE_COUNTER_TYPE = 10;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeStartStopCycleCountMax:
        root::_STORAGE_COUNTER_TYPE = 11;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeLoadUnloadCycleCount:
        root::_STORAGE_COUNTER_TYPE = 12;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeLoadUnloadCycleCountMax:
        root::_STORAGE_COUNTER_TYPE = 13;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWearPercentage: root::_STORAGE_COUNTER_TYPE =
        14;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWearPercentageWarning:
        root::_STORAGE_COUNTER_TYPE = 15;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWearPercentageMax:
        root::_STORAGE_COUNTER_TYPE = 16;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypePowerOnHours: root::_STORAGE_COUNTER_TYPE =
        17;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeReadLatency100NSMax:
        root::_STORAGE_COUNTER_TYPE = 18;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeWriteLatency100NSMax:
        root::_STORAGE_COUNTER_TYPE = 19;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeFlushLatency100NSMax:
        root::_STORAGE_COUNTER_TYPE = 20;
    pub const _STORAGE_COUNTER_TYPE_StorageCounterTypeMax: root::_STORAGE_COUNTER_TYPE = 21;
    pub type _STORAGE_COUNTER_TYPE = i32;
    pub use self::super::root::_STORAGE_COUNTER_TYPE as STORAGE_COUNTER_TYPE;
    pub type PSTORAGE_COUNTER_TYPE = *mut root::_STORAGE_COUNTER_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_COUNTER {
        pub Type: root::STORAGE_COUNTER_TYPE,
        pub Value: root::_STORAGE_COUNTER__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STORAGE_COUNTER__bindgen_ty_1 {
        pub ManufactureDate: root::_STORAGE_COUNTER__bindgen_ty_1__bindgen_ty_1,
        pub AsUlonglong: root::DWORDLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_COUNTER__bindgen_ty_1__bindgen_ty_1 {
        pub Week: u32,
        pub Year: u32,
    }
    pub type STORAGE_COUNTER = root::_STORAGE_COUNTER;
    pub type PSTORAGE_COUNTER = *mut root::_STORAGE_COUNTER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STORAGE_COUNTERS {
        pub Version: u32,
        pub Size: u32,
        pub NumberOfCounters: u32,
        pub Counters: [root::STORAGE_COUNTER; 1usize],
    }
    pub type STORAGE_COUNTERS = root::_STORAGE_COUNTERS;
    pub type PSTORAGE_COUNTERS = *mut root::_STORAGE_COUNTERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_FIRMWARE_INFO_QUERY {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Reserved: u32,
    }
    pub type STORAGE_HW_FIRMWARE_INFO_QUERY = root::_STORAGE_HW_FIRMWARE_INFO_QUERY;
    pub type PSTORAGE_HW_FIRMWARE_INFO_QUERY = *mut root::_STORAGE_HW_FIRMWARE_INFO_QUERY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_FIRMWARE_SLOT_INFO {
        pub Version: u32,
        pub Size: u32,
        pub SlotNumber: u8,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub Reserved1: [u8; 6usize],
        pub Revision: [u8; 16usize],
    }
    impl _STORAGE_HW_FIRMWARE_SLOT_INFO {
        #[inline]
        pub fn ReadOnly(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_ReadOnly(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved0(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 7u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ReadOnly: u8,
            Reserved0: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let ReadOnly: u8 = unsafe { ::std::mem::transmute(ReadOnly) };
                ReadOnly as u64
            });
            __bindgen_bitfield_unit.set(1usize, 7u8, {
                let Reserved0: u8 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type STORAGE_HW_FIRMWARE_SLOT_INFO = root::_STORAGE_HW_FIRMWARE_SLOT_INFO;
    pub type PSTORAGE_HW_FIRMWARE_SLOT_INFO = *mut root::_STORAGE_HW_FIRMWARE_SLOT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_FIRMWARE_INFO {
        pub Version: u32,
        pub Size: u32,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub SlotCount: u8,
        pub ActiveSlot: u8,
        pub PendingActivateSlot: u8,
        pub FirmwareShared: root::BOOLEAN,
        pub Reserved: [u8; 3usize],
        pub ImagePayloadAlignment: u32,
        pub ImagePayloadMaxSize: u32,
        pub Slot: [root::STORAGE_HW_FIRMWARE_SLOT_INFO; 1usize],
    }
    impl _STORAGE_HW_FIRMWARE_INFO {
        #[inline]
        pub fn SupportUpgrade(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_SupportUpgrade(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved0(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 7u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            SupportUpgrade: u8,
            Reserved0: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let SupportUpgrade: u8 = unsafe { ::std::mem::transmute(SupportUpgrade) };
                SupportUpgrade as u64
            });
            __bindgen_bitfield_unit.set(1usize, 7u8, {
                let Reserved0: u8 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type STORAGE_HW_FIRMWARE_INFO = root::_STORAGE_HW_FIRMWARE_INFO;
    pub type PSTORAGE_HW_FIRMWARE_INFO = *mut root::_STORAGE_HW_FIRMWARE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_FIRMWARE_DOWNLOAD {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Slot: u8,
        pub Reserved: [u8; 3usize],
        pub Offset: root::DWORDLONG,
        pub BufferSize: root::DWORDLONG,
        pub ImageBuffer: [u8; 1usize],
    }
    pub type STORAGE_HW_FIRMWARE_DOWNLOAD = root::_STORAGE_HW_FIRMWARE_DOWNLOAD;
    pub type PSTORAGE_HW_FIRMWARE_DOWNLOAD = *mut root::_STORAGE_HW_FIRMWARE_DOWNLOAD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Slot: u8,
        pub Reserved: [u8; 3usize],
        pub Offset: root::DWORDLONG,
        pub BufferSize: root::DWORDLONG,
        pub ImageSize: u32,
        pub Reserved2: u32,
        pub ImageBuffer: [u8; 1usize],
    }
    pub type STORAGE_HW_FIRMWARE_DOWNLOAD_V2 = root::_STORAGE_HW_FIRMWARE_DOWNLOAD_V2;
    pub type PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = *mut root::_STORAGE_HW_FIRMWARE_DOWNLOAD_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_HW_FIRMWARE_ACTIVATE {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Slot: u8,
        pub Reserved0: [u8; 3usize],
    }
    pub type STORAGE_HW_FIRMWARE_ACTIVATE = root::_STORAGE_HW_FIRMWARE_ACTIVATE;
    pub type PSTORAGE_HW_FIRMWARE_ACTIVATE = *mut root::_STORAGE_HW_FIRMWARE_ACTIVATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_PROTOCOL_COMMAND {
        pub Version: u32,
        pub Length: u32,
        pub ProtocolType: root::STORAGE_PROTOCOL_TYPE,
        pub Flags: u32,
        pub ReturnStatus: u32,
        pub ErrorCode: u32,
        pub CommandLength: u32,
        pub ErrorInfoLength: u32,
        pub DataToDeviceTransferLength: u32,
        pub DataFromDeviceTransferLength: u32,
        pub TimeOutValue: u32,
        pub ErrorInfoOffset: u32,
        pub DataToDeviceBufferOffset: u32,
        pub DataFromDeviceBufferOffset: u32,
        pub CommandSpecific: u32,
        pub Reserved0: u32,
        pub FixedProtocolReturnData: u32,
        pub Reserved1: [u32; 3usize],
        pub Command: [u8; 1usize],
    }
    pub type STORAGE_PROTOCOL_COMMAND = root::_STORAGE_PROTOCOL_COMMAND;
    pub type PSTORAGE_PROTOCOL_COMMAND = *mut root::_STORAGE_PROTOCOL_COMMAND;
    pub const _STORAGE_ATTRIBUTE_MGMT_ACTION_StorAttributeMgmt_ClearAttribute:
        root::_STORAGE_ATTRIBUTE_MGMT_ACTION = 0;
    pub const _STORAGE_ATTRIBUTE_MGMT_ACTION_StorAttributeMgmt_SetAttribute:
        root::_STORAGE_ATTRIBUTE_MGMT_ACTION = 1;
    pub const _STORAGE_ATTRIBUTE_MGMT_ACTION_StorAttributeMgmt_ResetAttribute:
        root::_STORAGE_ATTRIBUTE_MGMT_ACTION = 2;
    pub type _STORAGE_ATTRIBUTE_MGMT_ACTION = i32;
    pub use self::super::root::_STORAGE_ATTRIBUTE_MGMT_ACTION as STORAGE_ATTRIBUTE_MGMT_ACTION;
    pub type PSTORAGE_ATTRIBUTE_MGMT_ACTION = *mut root::_STORAGE_ATTRIBUTE_MGMT_ACTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_ATTRIBUTE_MGMT {
        pub Version: u32,
        pub Size: u32,
        pub Action: root::STORAGE_ATTRIBUTE_MGMT_ACTION,
        pub Attribute: u32,
    }
    pub type STORAGE_ATTRIBUTE_MGMT = root::_STORAGE_ATTRIBUTE_MGMT;
    pub type PSTORAGE_ATTRIBUTE_MGMT = *mut root::_STORAGE_ATTRIBUTE_MGMT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_HEALTH_NOTIFICATION_DATA {
        pub DeviceGuid: root::GUID,
    }
    pub type SCM_PD_HEALTH_NOTIFICATION_DATA = root::_SCM_PD_HEALTH_NOTIFICATION_DATA;
    pub type PSCM_PD_HEALTH_NOTIFICATION_DATA = *mut root::_SCM_PD_HEALTH_NOTIFICATION_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_LOGICAL_DEVICE_INSTANCE {
        pub Version: u32,
        pub Size: u32,
        pub DeviceGuid: root::GUID,
        pub SymbolicLink: [u16; 256usize],
    }
    pub type SCM_LOGICAL_DEVICE_INSTANCE = root::_SCM_LOGICAL_DEVICE_INSTANCE;
    pub type PSCM_LOGICAL_DEVICE_INSTANCE = *mut root::_SCM_LOGICAL_DEVICE_INSTANCE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_LOGICAL_DEVICES {
        pub Version: u32,
        pub Size: u32,
        pub DeviceCount: u32,
        pub Devices: [root::SCM_LOGICAL_DEVICE_INSTANCE; 1usize],
    }
    pub type SCM_LOGICAL_DEVICES = root::_SCM_LOGICAL_DEVICES;
    pub type PSCM_LOGICAL_DEVICES = *mut root::_SCM_LOGICAL_DEVICES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PHYSICAL_DEVICE_INSTANCE {
        pub Version: u32,
        pub Size: u32,
        pub NfitHandle: u32,
        pub SymbolicLink: [u16; 256usize],
    }
    pub type SCM_PHYSICAL_DEVICE_INSTANCE = root::_SCM_PHYSICAL_DEVICE_INSTANCE;
    pub type PSCM_PHYSICAL_DEVICE_INSTANCE = *mut root::_SCM_PHYSICAL_DEVICE_INSTANCE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PHYSICAL_DEVICES {
        pub Version: u32,
        pub Size: u32,
        pub DeviceCount: u32,
        pub Devices: [root::SCM_PHYSICAL_DEVICE_INSTANCE; 1usize],
    }
    pub type SCM_PHYSICAL_DEVICES = root::_SCM_PHYSICAL_DEVICES;
    pub type PSCM_PHYSICAL_DEVICES = *mut root::_SCM_PHYSICAL_DEVICES;
    pub const _SCM_REGION_FLAG_ScmRegionFlagNone: root::_SCM_REGION_FLAG = 0;
    pub const _SCM_REGION_FLAG_ScmRegionFlagLabel: root::_SCM_REGION_FLAG = 1;
    pub type _SCM_REGION_FLAG = i32;
    pub use self::super::root::_SCM_REGION_FLAG as SCM_REGION_FLAG;
    pub type PSCM_REGION_FLAG = *mut root::_SCM_REGION_FLAG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_REGION {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub NfitHandle: u32,
        pub LogicalDeviceGuid: root::GUID,
        pub AddressRangeType: root::GUID,
        pub AssociatedId: u32,
        pub Length: root::DWORD64,
        pub StartingDPA: root::DWORD64,
        pub BaseSPA: root::DWORD64,
        pub SPAOffset: root::DWORD64,
        pub RegionOffset: root::DWORD64,
    }
    pub type SCM_REGION = root::_SCM_REGION;
    pub type PSCM_REGION = *mut root::_SCM_REGION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_REGIONS {
        pub Version: u32,
        pub Size: u32,
        pub RegionCount: u32,
        pub Regions: [root::SCM_REGION; 1usize],
    }
    pub type SCM_REGIONS = root::_SCM_REGIONS;
    pub type PSCM_REGIONS = *mut root::_SCM_REGIONS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_INTERLEAVED_PD_INFO {
        pub DeviceHandle: u32,
        pub DeviceGuid: root::GUID,
    }
    pub type SCM_INTERLEAVED_PD_INFO = root::_SCM_INTERLEAVED_PD_INFO;
    pub type PSCM_INTERLEAVED_PD_INFO = *mut root::_SCM_INTERLEAVED_PD_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_LD_INTERLEAVE_SET_INFO {
        pub Version: u32,
        pub Size: u32,
        pub InterleaveSetSize: u32,
        pub InterleaveSet: [root::SCM_INTERLEAVED_PD_INFO; 1usize],
    }
    pub type SCM_LD_INTERLEAVE_SET_INFO = root::_SCM_LD_INTERLEAVE_SET_INFO;
    pub type PSCM_LD_INTERLEAVE_SET_INFO = *mut root::_SCM_LD_INTERLEAVE_SET_INFO;
    pub const _SCM_PD_QUERY_TYPE_ScmPhysicalDeviceQuery_Descriptor: root::_SCM_PD_QUERY_TYPE = 0;
    pub const _SCM_PD_QUERY_TYPE_ScmPhysicalDeviceQuery_IsSupported: root::_SCM_PD_QUERY_TYPE = 1;
    pub const _SCM_PD_QUERY_TYPE_ScmPhysicalDeviceQuery_Max: root::_SCM_PD_QUERY_TYPE = 2;
    pub type _SCM_PD_QUERY_TYPE = i32;
    pub use self::super::root::_SCM_PD_QUERY_TYPE as SCM_PD_QUERY_TYPE;
    pub type PSCM_PD_QUERY_TYPE = *mut root::_SCM_PD_QUERY_TYPE;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_DeviceInfo: root::_SCM_PD_PROPERTY_ID =
        0;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_ManagementStatus:
        root::_SCM_PD_PROPERTY_ID = 1;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_FirmwareInfo:
        root::_SCM_PD_PROPERTY_ID = 2;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_LocationString:
        root::_SCM_PD_PROPERTY_ID = 3;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_DeviceSpecificInfo:
        root::_SCM_PD_PROPERTY_ID = 4;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_DeviceHandle:
        root::_SCM_PD_PROPERTY_ID = 5;
    pub const _SCM_PD_PROPERTY_ID_ScmPhysicalDeviceProperty_Max: root::_SCM_PD_PROPERTY_ID = 6;
    pub type _SCM_PD_PROPERTY_ID = i32;
    pub use self::super::root::_SCM_PD_PROPERTY_ID as SCM_PD_PROPERTY_ID;
    pub type PSCM_PD_PROPERTY_ID = *mut root::_SCM_PD_PROPERTY_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_PROPERTY_QUERY {
        pub Version: u32,
        pub Size: u32,
        pub PropertyId: root::SCM_PD_PROPERTY_ID,
        pub QueryType: root::SCM_PD_QUERY_TYPE,
        pub AdditionalParameters: [u8; 1usize],
    }
    pub type SCM_PD_PROPERTY_QUERY = root::_SCM_PD_PROPERTY_QUERY;
    pub type PSCM_PD_PROPERTY_QUERY = *mut root::_SCM_PD_PROPERTY_QUERY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_DESCRIPTOR_HEADER {
        pub Version: u32,
        pub Size: u32,
    }
    pub type SCM_PD_DESCRIPTOR_HEADER = root::_SCM_PD_DESCRIPTOR_HEADER;
    pub type PSCM_PD_DESCRIPTOR_HEADER = *mut root::_SCM_PD_DESCRIPTOR_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_DEVICE_HANDLE {
        pub Version: u32,
        pub Size: u32,
        pub DeviceGuid: root::GUID,
        pub DeviceHandle: u32,
    }
    pub type SCM_PD_DEVICE_HANDLE = root::_SCM_PD_DEVICE_HANDLE;
    pub type PSCM_PD_DEVICE_HANDLE = *mut root::_SCM_PD_DEVICE_HANDLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_DEVICE_INFO {
        pub Version: u32,
        pub Size: u32,
        pub DeviceGuid: root::GUID,
        pub UnsafeShutdownCount: u32,
        pub PersistentMemorySizeInBytes: root::DWORD64,
        pub VolatileMemorySizeInBytes: root::DWORD64,
        pub TotalMemorySizeInBytes: root::DWORD64,
        pub SlotNumber: u32,
        pub DeviceHandle: u32,
        pub PhysicalId: u16,
        pub NumberOfFormatInterfaceCodes: u8,
        pub FormatInterfaceCodes: [u16; 8usize],
        pub VendorId: u32,
        pub ProductId: u32,
        pub SubsystemDeviceId: u32,
        pub SubsystemVendorId: u32,
        pub ManufacturingLocation: u8,
        pub ManufacturingWeek: u8,
        pub ManufacturingYear: u8,
        pub SerialNumber4Byte: u32,
        pub SerialNumberLengthInChars: u32,
        pub SerialNumber: [i8; 1usize],
    }
    pub type SCM_PD_DEVICE_INFO = root::_SCM_PD_DEVICE_INFO;
    pub type PSCM_PD_DEVICE_INFO = *mut root::_SCM_PD_DEVICE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_DEVICE_SPECIFIC_PROPERTY {
        pub Name: [u16; 128usize],
        pub Value: root::LONGLONG,
    }
    pub type SCM_PD_DEVICE_SPECIFIC_PROPERTY = root::_SCM_PD_DEVICE_SPECIFIC_PROPERTY;
    pub type PSCM_PD_DEVICE_SPECIFIC_PROPERTY = *mut root::_SCM_PD_DEVICE_SPECIFIC_PROPERTY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_DEVICE_SPECIFIC_INFO {
        pub Version: u32,
        pub Size: u32,
        pub NumberOfProperties: u32,
        pub DeviceSpecificProperties: [root::SCM_PD_DEVICE_SPECIFIC_PROPERTY; 1usize],
    }
    pub type SCM_PD_DEVICE_SPECIFIC_INFO = root::_SCM_PD_DEVICE_SPECIFIC_INFO;
    pub type PSCM_PD_DEVICE_SPECIFIC_INFO = *mut root::_SCM_PD_DEVICE_SPECIFIC_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_FIRMWARE_SLOT_INFO {
        pub Version: u32,
        pub Size: u32,
        pub SlotNumber: u8,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub Reserved1: [u8; 6usize],
        pub Revision: [u8; 32usize],
    }
    impl _SCM_PD_FIRMWARE_SLOT_INFO {
        #[inline]
        pub fn ReadOnly(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_ReadOnly(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn Reserved0(&self) -> u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
        }
        #[inline]
        pub fn set_Reserved0(&mut self, val: u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 7u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ReadOnly: u8,
            Reserved0: u8,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let ReadOnly: u8 = unsafe { ::std::mem::transmute(ReadOnly) };
                ReadOnly as u64
            });
            __bindgen_bitfield_unit.set(1usize, 7u8, {
                let Reserved0: u8 = unsafe { ::std::mem::transmute(Reserved0) };
                Reserved0 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type SCM_PD_FIRMWARE_SLOT_INFO = root::_SCM_PD_FIRMWARE_SLOT_INFO;
    pub type PSCM_PD_FIRMWARE_SLOT_INFO = *mut root::_SCM_PD_FIRMWARE_SLOT_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_FIRMWARE_INFO {
        pub Version: u32,
        pub Size: u32,
        pub ActiveSlot: u8,
        pub NextActiveSlot: u8,
        pub SlotCount: u8,
        pub Slots: [root::SCM_PD_FIRMWARE_SLOT_INFO; 1usize],
    }
    pub type SCM_PD_FIRMWARE_INFO = root::_SCM_PD_FIRMWARE_INFO;
    pub type PSCM_PD_FIRMWARE_INFO = *mut root::_SCM_PD_FIRMWARE_INFO;
    pub const _SCM_PD_HEALTH_STATUS_ScmPhysicalDeviceHealth_Unknown: root::_SCM_PD_HEALTH_STATUS =
        0;
    pub const _SCM_PD_HEALTH_STATUS_ScmPhysicalDeviceHealth_Unhealthy: root::_SCM_PD_HEALTH_STATUS =
        1;
    pub const _SCM_PD_HEALTH_STATUS_ScmPhysicalDeviceHealth_Warning: root::_SCM_PD_HEALTH_STATUS =
        2;
    pub const _SCM_PD_HEALTH_STATUS_ScmPhysicalDeviceHealth_Healthy: root::_SCM_PD_HEALTH_STATUS =
        3;
    pub const _SCM_PD_HEALTH_STATUS_ScmPhysicalDeviceHealth_Max: root::_SCM_PD_HEALTH_STATUS = 4;
    pub type _SCM_PD_HEALTH_STATUS = i32;
    pub use self::super::root::_SCM_PD_HEALTH_STATUS as SCM_PD_HEALTH_STATUS;
    pub type PSCM_PD_HEALTH_STATUS = *mut root::_SCM_PD_HEALTH_STATUS;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_Unknown:
        root::_SCM_PD_OPERATIONAL_STATUS = 0;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_Ok:
        root::_SCM_PD_OPERATIONAL_STATUS = 1;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_PredictingFailure:
        root::_SCM_PD_OPERATIONAL_STATUS = 2;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_InService:
        root::_SCM_PD_OPERATIONAL_STATUS = 3;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_HardwareError:
        root::_SCM_PD_OPERATIONAL_STATUS = 4;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_NotUsable:
        root::_SCM_PD_OPERATIONAL_STATUS = 5;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_TransientError:
        root::_SCM_PD_OPERATIONAL_STATUS = 6;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_Missing:
        root::_SCM_PD_OPERATIONAL_STATUS = 7;
    pub const _SCM_PD_OPERATIONAL_STATUS_ScmPhysicalDeviceOpStatus_Max:
        root::_SCM_PD_OPERATIONAL_STATUS = 8;
    pub type _SCM_PD_OPERATIONAL_STATUS = i32;
    pub use self::super::root::_SCM_PD_OPERATIONAL_STATUS as SCM_PD_OPERATIONAL_STATUS;
    pub type PSCM_PD_OPERATIONAL_STATUS = *mut root::_SCM_PD_OPERATIONAL_STATUS;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_Unknown:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 0;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_Media:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 1;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_ThresholdExceeded:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 2;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_LostData:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 3;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_EnergySource:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 4;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_Configuration:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 5;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_DeviceController:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 6;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_MediaController:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 7;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_Component:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 8;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_BackgroundOperation:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 9;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_InvalidFirmware:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 10;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_HealthCheck:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 11;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_LostDataPersistence:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 12;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_DisabledByPlatform:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 13;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_PermanentError:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 14;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_LostWritePersistence:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 15;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_FatalError:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 16;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_DataPersistenceLossImminent : root :: _SCM_PD_OPERATIONAL_STATUS_REASON = 17 ;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_WritePersistenceLossImminent : root :: _SCM_PD_OPERATIONAL_STATUS_REASON = 18 ;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock : root :: _SCM_PD_OPERATIONAL_STATUS_REASON = 19 ;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_PerformanceDegradation:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 20;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_ExcessiveTemperature:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 21;
    pub const _SCM_PD_OPERATIONAL_STATUS_REASON_ScmPhysicalDeviceOpReason_Max:
        root::_SCM_PD_OPERATIONAL_STATUS_REASON = 22;
    pub type _SCM_PD_OPERATIONAL_STATUS_REASON = i32;
    pub use self::super::root::_SCM_PD_OPERATIONAL_STATUS_REASON as SCM_PD_OPERATIONAL_STATUS_REASON;
    pub type PSCM_PD_OPERATIONAL_STATUS_REASON = *mut root::_SCM_PD_OPERATIONAL_STATUS_REASON;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_MANAGEMENT_STATUS {
        pub Version: u32,
        pub Size: u32,
        pub Health: root::SCM_PD_HEALTH_STATUS,
        pub NumberOfOperationalStatus: u32,
        pub NumberOfAdditionalReasons: u32,
        pub OperationalStatus: [root::SCM_PD_OPERATIONAL_STATUS; 16usize],
        pub AdditionalReasons: [root::SCM_PD_OPERATIONAL_STATUS_REASON; 1usize],
    }
    pub type SCM_PD_MANAGEMENT_STATUS = root::_SCM_PD_MANAGEMENT_STATUS;
    pub type PSCM_PD_MANAGEMENT_STATUS = *mut root::_SCM_PD_MANAGEMENT_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_LOCATION_STRING {
        pub Version: u32,
        pub Size: u32,
        pub Location: [u16; 1usize],
    }
    pub type SCM_PD_LOCATION_STRING = root::_SCM_PD_LOCATION_STRING;
    pub type PSCM_PD_LOCATION_STRING = *mut root::_SCM_PD_LOCATION_STRING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_FIRMWARE_DOWNLOAD {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Slot: u8,
        pub Reserved: [u8; 3usize],
        pub Offset: root::DWORD64,
        pub FirmwareImageSizeInBytes: u32,
        pub FirmwareImage: [u8; 1usize],
    }
    pub type SCM_PD_FIRMWARE_DOWNLOAD = root::_SCM_PD_FIRMWARE_DOWNLOAD;
    pub type PSCM_PD_FIRMWARE_DOWNLOAD = *mut root::_SCM_PD_FIRMWARE_DOWNLOAD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_FIRMWARE_ACTIVATE {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Slot: u8,
    }
    pub type SCM_PD_FIRMWARE_ACTIVATE = root::_SCM_PD_FIRMWARE_ACTIVATE;
    pub type PSCM_PD_FIRMWARE_ACTIVATE = *mut root::_SCM_PD_FIRMWARE_ACTIVATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_PASSTHROUGH_INPUT {
        pub Version: u32,
        pub Size: u32,
        pub ProtocolGuid: root::GUID,
        pub DataSize: u32,
        pub Data: [u8; 1usize],
    }
    pub type SCM_PD_PASSTHROUGH_INPUT = root::_SCM_PD_PASSTHROUGH_INPUT;
    pub type PSCM_PD_PASSTHROUGH_INPUT = *mut root::_SCM_PD_PASSTHROUGH_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_PASSTHROUGH_OUTPUT {
        pub Version: u32,
        pub Size: u32,
        pub ProtocolGuid: root::GUID,
        pub DataSize: u32,
        pub Data: [u8; 1usize],
    }
    pub type SCM_PD_PASSTHROUGH_OUTPUT = root::_SCM_PD_PASSTHROUGH_OUTPUT;
    pub type PSCM_PD_PASSTHROUGH_OUTPUT = *mut root::_SCM_PD_PASSTHROUGH_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_PASSTHROUGH_INVDIMM_INPUT {
        pub Opcode: u32,
        pub OpcodeParametersLength: u32,
        pub OpcodeParameters: [u8; 1usize],
    }
    pub type SCM_PD_PASSTHROUGH_INVDIMM_INPUT = root::_SCM_PD_PASSTHROUGH_INVDIMM_INPUT;
    pub type PSCM_PD_PASSTHROUGH_INVDIMM_INPUT = *mut root::_SCM_PD_PASSTHROUGH_INVDIMM_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {
        pub GeneralStatus: u16,
        pub ExtendedStatus: u16,
        pub OutputDataLength: u32,
        pub OutputData: [u8; 1usize],
    }
    pub type SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = root::_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
    pub type PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = *mut root::_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_REINITIALIZE_MEDIA_INPUT {
        pub Version: u32,
        pub Size: u32,
        pub Options: root::_SCM_PD_REINITIALIZE_MEDIA_INPUT__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_REINITIALIZE_MEDIA_INPUT__bindgen_ty_1 {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
        pub __bindgen_padding_0: [u8; 3usize],
    }
    impl _SCM_PD_REINITIALIZE_MEDIA_INPUT__bindgen_ty_1 {
        #[inline]
        pub fn Overwrite(&self) -> u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_Overwrite(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(Overwrite: u32) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let Overwrite: u32 = unsafe { ::std::mem::transmute(Overwrite) };
                Overwrite as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type SCM_PD_REINITIALIZE_MEDIA_INPUT = root::_SCM_PD_REINITIALIZE_MEDIA_INPUT;
    pub type PSCM_PD_REINITIALIZE_MEDIA_INPUT = *mut root::_SCM_PD_REINITIALIZE_MEDIA_INPUT;
    pub const _SCM_PD_MEDIA_REINITIALIZATION_STATUS_ScmPhysicalDeviceReinit_Success:
        root::_SCM_PD_MEDIA_REINITIALIZATION_STATUS = 0;
    pub const _SCM_PD_MEDIA_REINITIALIZATION_STATUS_ScmPhysicalDeviceReinit_RebootNeeded:
        root::_SCM_PD_MEDIA_REINITIALIZATION_STATUS = 1;
    pub const _SCM_PD_MEDIA_REINITIALIZATION_STATUS_ScmPhysicalDeviceReinit_ColdBootNeeded:
        root::_SCM_PD_MEDIA_REINITIALIZATION_STATUS = 2;
    pub const _SCM_PD_MEDIA_REINITIALIZATION_STATUS_ScmPhysicalDeviceReinit_Max:
        root::_SCM_PD_MEDIA_REINITIALIZATION_STATUS = 3;
    pub type _SCM_PD_MEDIA_REINITIALIZATION_STATUS = i32;
    pub use self::super::root::_SCM_PD_MEDIA_REINITIALIZATION_STATUS as SCM_PD_MEDIA_REINITIALIZATION_STATUS;
    pub type PSCM_PD_MEDIA_REINITIALIZATION_STATUS =
        *mut root::_SCM_PD_MEDIA_REINITIALIZATION_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCM_PD_REINITIALIZE_MEDIA_OUTPUT {
        pub Version: u32,
        pub Size: u32,
        pub Status: root::SCM_PD_MEDIA_REINITIALIZATION_STATUS,
    }
    pub type SCM_PD_REINITIALIZE_MEDIA_OUTPUT = root::_SCM_PD_REINITIALIZE_MEDIA_OUTPUT;
    pub type PSCM_PD_REINITIALIZE_MEDIA_OUTPUT = *mut root::_SCM_PD_REINITIALIZE_MEDIA_OUTPUT;
    pub const _MEDIA_TYPE_Unknown: root::_MEDIA_TYPE = 0;
    pub const _MEDIA_TYPE_F5_1Pt2_512: root::_MEDIA_TYPE = 1;
    pub const _MEDIA_TYPE_F3_1Pt44_512: root::_MEDIA_TYPE = 2;
    pub const _MEDIA_TYPE_F3_2Pt88_512: root::_MEDIA_TYPE = 3;
    pub const _MEDIA_TYPE_F3_20Pt8_512: root::_MEDIA_TYPE = 4;
    pub const _MEDIA_TYPE_F3_720_512: root::_MEDIA_TYPE = 5;
    pub const _MEDIA_TYPE_F5_360_512: root::_MEDIA_TYPE = 6;
    pub const _MEDIA_TYPE_F5_320_512: root::_MEDIA_TYPE = 7;
    pub const _MEDIA_TYPE_F5_320_1024: root::_MEDIA_TYPE = 8;
    pub const _MEDIA_TYPE_F5_180_512: root::_MEDIA_TYPE = 9;
    pub const _MEDIA_TYPE_F5_160_512: root::_MEDIA_TYPE = 10;
    pub const _MEDIA_TYPE_RemovableMedia: root::_MEDIA_TYPE = 11;
    pub const _MEDIA_TYPE_FixedMedia: root::_MEDIA_TYPE = 12;
    pub const _MEDIA_TYPE_F3_120M_512: root::_MEDIA_TYPE = 13;
    pub const _MEDIA_TYPE_F3_640_512: root::_MEDIA_TYPE = 14;
    pub const _MEDIA_TYPE_F5_640_512: root::_MEDIA_TYPE = 15;
    pub const _MEDIA_TYPE_F5_720_512: root::_MEDIA_TYPE = 16;
    pub const _MEDIA_TYPE_F3_1Pt2_512: root::_MEDIA_TYPE = 17;
    pub const _MEDIA_TYPE_F3_1Pt23_1024: root::_MEDIA_TYPE = 18;
    pub const _MEDIA_TYPE_F5_1Pt23_1024: root::_MEDIA_TYPE = 19;
    pub const _MEDIA_TYPE_F3_128Mb_512: root::_MEDIA_TYPE = 20;
    pub const _MEDIA_TYPE_F3_230Mb_512: root::_MEDIA_TYPE = 21;
    pub const _MEDIA_TYPE_F8_256_128: root::_MEDIA_TYPE = 22;
    pub const _MEDIA_TYPE_F3_200Mb_512: root::_MEDIA_TYPE = 23;
    pub const _MEDIA_TYPE_F3_240M_512: root::_MEDIA_TYPE = 24;
    pub const _MEDIA_TYPE_F3_32M_512: root::_MEDIA_TYPE = 25;
    pub type _MEDIA_TYPE = i32;
    pub use self::super::root::_MEDIA_TYPE as MEDIA_TYPE;
    pub type PMEDIA_TYPE = *mut root::_MEDIA_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FORMAT_PARAMETERS {
        pub MediaType: root::MEDIA_TYPE,
        pub StartCylinderNumber: u32,
        pub EndCylinderNumber: u32,
        pub StartHeadNumber: u32,
        pub EndHeadNumber: u32,
    }
    pub type FORMAT_PARAMETERS = root::_FORMAT_PARAMETERS;
    pub type PFORMAT_PARAMETERS = *mut root::_FORMAT_PARAMETERS;
    pub type BAD_TRACK_NUMBER = u16;
    pub type PBAD_TRACK_NUMBER = *mut u16;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FORMAT_EX_PARAMETERS {
        pub MediaType: root::MEDIA_TYPE,
        pub StartCylinderNumber: u32,
        pub EndCylinderNumber: u32,
        pub StartHeadNumber: u32,
        pub EndHeadNumber: u32,
        pub FormatGapLength: u16,
        pub SectorsPerTrack: u16,
        pub SectorNumber: [u16; 1usize],
    }
    pub type FORMAT_EX_PARAMETERS = root::_FORMAT_EX_PARAMETERS;
    pub type PFORMAT_EX_PARAMETERS = *mut root::_FORMAT_EX_PARAMETERS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_GEOMETRY {
        pub Cylinders: root::LARGE_INTEGER,
        pub MediaType: root::MEDIA_TYPE,
        pub TracksPerCylinder: u32,
        pub SectorsPerTrack: u32,
        pub BytesPerSector: u32,
    }
    pub type DISK_GEOMETRY = root::_DISK_GEOMETRY;
    pub type PDISK_GEOMETRY = *mut root::_DISK_GEOMETRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PARTITION_INFORMATION {
        pub StartingOffset: root::LARGE_INTEGER,
        pub PartitionLength: root::LARGE_INTEGER,
        pub HiddenSectors: u32,
        pub PartitionNumber: u32,
        pub PartitionType: u8,
        pub BootIndicator: root::BOOLEAN,
        pub RecognizedPartition: root::BOOLEAN,
        pub RewritePartition: root::BOOLEAN,
    }
    pub type PARTITION_INFORMATION = root::_PARTITION_INFORMATION;
    pub type PPARTITION_INFORMATION = *mut root::_PARTITION_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SET_PARTITION_INFORMATION {
        pub PartitionType: u8,
    }
    pub type SET_PARTITION_INFORMATION = root::_SET_PARTITION_INFORMATION;
    pub type PSET_PARTITION_INFORMATION = *mut root::_SET_PARTITION_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DRIVE_LAYOUT_INFORMATION {
        pub PartitionCount: u32,
        pub Signature: u32,
        pub PartitionEntry: [root::PARTITION_INFORMATION; 1usize],
    }
    pub type DRIVE_LAYOUT_INFORMATION = root::_DRIVE_LAYOUT_INFORMATION;
    pub type PDRIVE_LAYOUT_INFORMATION = *mut root::_DRIVE_LAYOUT_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _VERIFY_INFORMATION {
        pub StartingOffset: root::LARGE_INTEGER,
        pub Length: u32,
    }
    pub type VERIFY_INFORMATION = root::_VERIFY_INFORMATION;
    pub type PVERIFY_INFORMATION = *mut root::_VERIFY_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REASSIGN_BLOCKS {
        pub Reserved: u16,
        pub Count: u16,
        pub BlockNumber: [u32; 1usize],
    }
    pub type REASSIGN_BLOCKS = root::_REASSIGN_BLOCKS;
    pub type PREASSIGN_BLOCKS = *mut root::_REASSIGN_BLOCKS;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct _REASSIGN_BLOCKS_EX {
        pub Reserved: u16,
        pub Count: u16,
        pub BlockNumber: [root::LARGE_INTEGER; 1usize],
    }
    pub type REASSIGN_BLOCKS_EX = root::_REASSIGN_BLOCKS_EX;
    pub type PREASSIGN_BLOCKS_EX = *mut root::_REASSIGN_BLOCKS_EX;
    pub const _PARTITION_STYLE_PARTITION_STYLE_MBR: root::_PARTITION_STYLE = 0;
    pub const _PARTITION_STYLE_PARTITION_STYLE_GPT: root::_PARTITION_STYLE = 1;
    pub const _PARTITION_STYLE_PARTITION_STYLE_RAW: root::_PARTITION_STYLE = 2;
    pub type _PARTITION_STYLE = i32;
    pub use self::super::root::_PARTITION_STYLE as PARTITION_STYLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PARTITION_INFORMATION_GPT {
        pub PartitionType: root::GUID,
        pub PartitionId: root::GUID,
        pub Attributes: root::DWORD64,
        pub Name: [u16; 36usize],
    }
    pub type PARTITION_INFORMATION_GPT = root::_PARTITION_INFORMATION_GPT;
    pub type PPARTITION_INFORMATION_GPT = *mut root::_PARTITION_INFORMATION_GPT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PARTITION_INFORMATION_MBR {
        pub PartitionType: u8,
        pub BootIndicator: root::BOOLEAN,
        pub RecognizedPartition: root::BOOLEAN,
        pub HiddenSectors: u32,
        pub PartitionId: root::GUID,
    }
    pub type PARTITION_INFORMATION_MBR = root::_PARTITION_INFORMATION_MBR;
    pub type PPARTITION_INFORMATION_MBR = *mut root::_PARTITION_INFORMATION_MBR;
    pub type SET_PARTITION_INFORMATION_MBR = root::SET_PARTITION_INFORMATION;
    pub type SET_PARTITION_INFORMATION_GPT = root::PARTITION_INFORMATION_GPT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SET_PARTITION_INFORMATION_EX {
        pub PartitionStyle: root::PARTITION_STYLE,
        pub __bindgen_anon_1: root::_SET_PARTITION_INFORMATION_EX__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SET_PARTITION_INFORMATION_EX__bindgen_ty_1 {
        pub Mbr: root::SET_PARTITION_INFORMATION_MBR,
        pub Gpt: root::SET_PARTITION_INFORMATION_GPT,
    }
    pub type SET_PARTITION_INFORMATION_EX = root::_SET_PARTITION_INFORMATION_EX;
    pub type PSET_PARTITION_INFORMATION_EX = *mut root::_SET_PARTITION_INFORMATION_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CREATE_DISK_GPT {
        pub DiskId: root::GUID,
        pub MaxPartitionCount: u32,
    }
    pub type CREATE_DISK_GPT = root::_CREATE_DISK_GPT;
    pub type PCREATE_DISK_GPT = *mut root::_CREATE_DISK_GPT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CREATE_DISK_MBR {
        pub Signature: u32,
    }
    pub type CREATE_DISK_MBR = root::_CREATE_DISK_MBR;
    pub type PCREATE_DISK_MBR = *mut root::_CREATE_DISK_MBR;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CREATE_DISK {
        pub PartitionStyle: root::PARTITION_STYLE,
        pub __bindgen_anon_1: root::_CREATE_DISK__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _CREATE_DISK__bindgen_ty_1 {
        pub Mbr: root::CREATE_DISK_MBR,
        pub Gpt: root::CREATE_DISK_GPT,
    }
    pub type CREATE_DISK = root::_CREATE_DISK;
    pub type PCREATE_DISK = *mut root::_CREATE_DISK;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _GET_LENGTH_INFORMATION {
        pub Length: root::LARGE_INTEGER,
    }
    pub type GET_LENGTH_INFORMATION = root::_GET_LENGTH_INFORMATION;
    pub type PGET_LENGTH_INFORMATION = *mut root::_GET_LENGTH_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PARTITION_INFORMATION_EX {
        pub PartitionStyle: root::PARTITION_STYLE,
        pub StartingOffset: root::LARGE_INTEGER,
        pub PartitionLength: root::LARGE_INTEGER,
        pub PartitionNumber: u32,
        pub RewritePartition: root::BOOLEAN,
        pub IsServicePartition: root::BOOLEAN,
        pub __bindgen_anon_1: root::_PARTITION_INFORMATION_EX__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PARTITION_INFORMATION_EX__bindgen_ty_1 {
        pub Mbr: root::PARTITION_INFORMATION_MBR,
        pub Gpt: root::PARTITION_INFORMATION_GPT,
    }
    pub type PARTITION_INFORMATION_EX = root::_PARTITION_INFORMATION_EX;
    pub type PPARTITION_INFORMATION_EX = *mut root::_PARTITION_INFORMATION_EX;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DRIVE_LAYOUT_INFORMATION_GPT {
        pub DiskId: root::GUID,
        pub StartingUsableOffset: root::LARGE_INTEGER,
        pub UsableLength: root::LARGE_INTEGER,
        pub MaxPartitionCount: u32,
    }
    pub type DRIVE_LAYOUT_INFORMATION_GPT = root::_DRIVE_LAYOUT_INFORMATION_GPT;
    pub type PDRIVE_LAYOUT_INFORMATION_GPT = *mut root::_DRIVE_LAYOUT_INFORMATION_GPT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVE_LAYOUT_INFORMATION_MBR {
        pub Signature: u32,
        pub CheckSum: u32,
    }
    pub type DRIVE_LAYOUT_INFORMATION_MBR = root::_DRIVE_LAYOUT_INFORMATION_MBR;
    pub type PDRIVE_LAYOUT_INFORMATION_MBR = *mut root::_DRIVE_LAYOUT_INFORMATION_MBR;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DRIVE_LAYOUT_INFORMATION_EX {
        pub PartitionStyle: u32,
        pub PartitionCount: u32,
        pub __bindgen_anon_1: root::_DRIVE_LAYOUT_INFORMATION_EX__bindgen_ty_1,
        pub PartitionEntry: [root::PARTITION_INFORMATION_EX; 1usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DRIVE_LAYOUT_INFORMATION_EX__bindgen_ty_1 {
        pub Mbr: root::DRIVE_LAYOUT_INFORMATION_MBR,
        pub Gpt: root::DRIVE_LAYOUT_INFORMATION_GPT,
    }
    pub type DRIVE_LAYOUT_INFORMATION_EX = root::_DRIVE_LAYOUT_INFORMATION_EX;
    pub type PDRIVE_LAYOUT_INFORMATION_EX = *mut root::_DRIVE_LAYOUT_INFORMATION_EX;
    pub const _DETECTION_TYPE_DetectNone: root::_DETECTION_TYPE = 0;
    pub const _DETECTION_TYPE_DetectInt13: root::_DETECTION_TYPE = 1;
    pub const _DETECTION_TYPE_DetectExInt13: root::_DETECTION_TYPE = 2;
    pub type _DETECTION_TYPE = i32;
    pub use self::super::root::_DETECTION_TYPE as DETECTION_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_INT13_INFO {
        pub DriveSelect: u16,
        pub MaxCylinders: u32,
        pub SectorsPerTrack: u16,
        pub MaxHeads: u16,
        pub NumberDrives: u16,
    }
    pub type DISK_INT13_INFO = root::_DISK_INT13_INFO;
    pub type PDISK_INT13_INFO = *mut root::_DISK_INT13_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_EX_INT13_INFO {
        pub ExBufferSize: u16,
        pub ExFlags: u16,
        pub ExCylinders: u32,
        pub ExHeads: u32,
        pub ExSectorsPerTrack: u32,
        pub ExSectorsPerDrive: root::DWORD64,
        pub ExSectorSize: u16,
        pub ExReserved: u16,
    }
    pub type DISK_EX_INT13_INFO = root::_DISK_EX_INT13_INFO;
    pub type PDISK_EX_INT13_INFO = *mut root::_DISK_EX_INT13_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_DETECTION_INFO {
        pub SizeOfDetectInfo: u32,
        pub DetectionType: root::DETECTION_TYPE,
        pub __bindgen_anon_1: root::_DISK_DETECTION_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DISK_DETECTION_INFO__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_DISK_DETECTION_INFO__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_DETECTION_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub Int13: root::DISK_INT13_INFO,
        pub ExInt13: root::DISK_EX_INT13_INFO,
    }
    pub type DISK_DETECTION_INFO = root::_DISK_DETECTION_INFO;
    pub type PDISK_DETECTION_INFO = *mut root::_DISK_DETECTION_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_PARTITION_INFO {
        pub SizeOfPartitionInfo: u32,
        pub PartitionStyle: root::PARTITION_STYLE,
        pub __bindgen_anon_1: root::_DISK_PARTITION_INFO__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DISK_PARTITION_INFO__bindgen_ty_1 {
        pub Mbr: root::_DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_1,
        pub Gpt: root::_DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_1 {
        pub Signature: u32,
        pub CheckSum: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_2 {
        pub DiskId: root::GUID,
    }
    pub type DISK_PARTITION_INFO = root::_DISK_PARTITION_INFO;
    pub type PDISK_PARTITION_INFO = *mut root::_DISK_PARTITION_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_GEOMETRY_EX {
        pub Geometry: root::DISK_GEOMETRY,
        pub DiskSize: root::LARGE_INTEGER,
        pub Data: [u8; 1usize],
    }
    pub type DISK_GEOMETRY_EX = root::_DISK_GEOMETRY_EX;
    pub type PDISK_GEOMETRY_EX = *mut root::_DISK_GEOMETRY_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_CONTROLLER_NUMBER {
        pub ControllerNumber: u32,
        pub DiskNumber: u32,
    }
    pub type DISK_CONTROLLER_NUMBER = root::_DISK_CONTROLLER_NUMBER;
    pub type PDISK_CONTROLLER_NUMBER = *mut root::_DISK_CONTROLLER_NUMBER;
    pub const DISK_CACHE_RETENTION_PRIORITY_EqualPriority: root::DISK_CACHE_RETENTION_PRIORITY = 0;
    pub const DISK_CACHE_RETENTION_PRIORITY_KeepPrefetchedData:
        root::DISK_CACHE_RETENTION_PRIORITY = 1;
    pub const DISK_CACHE_RETENTION_PRIORITY_KeepReadData: root::DISK_CACHE_RETENTION_PRIORITY = 2;
    pub type DISK_CACHE_RETENTION_PRIORITY = i32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_CACHE_INFORMATION {
        pub ParametersSavable: root::BOOLEAN,
        pub ReadCacheEnabled: root::BOOLEAN,
        pub WriteCacheEnabled: root::BOOLEAN,
        pub ReadRetentionPriority: root::DISK_CACHE_RETENTION_PRIORITY,
        pub WriteRetentionPriority: root::DISK_CACHE_RETENTION_PRIORITY,
        pub DisablePrefetchTransferLength: u16,
        pub PrefetchScalar: root::BOOLEAN,
        pub __bindgen_anon_1: root::_DISK_CACHE_INFORMATION__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _DISK_CACHE_INFORMATION__bindgen_ty_1 {
        pub ScalarPrefetch: root::_DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        pub BlockPrefetch: root::_DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
        pub Minimum: u16,
        pub Maximum: u16,
        pub MaximumBlocks: u16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_2 {
        pub Minimum: u16,
        pub Maximum: u16,
    }
    pub type DISK_CACHE_INFORMATION = root::_DISK_CACHE_INFORMATION;
    pub type PDISK_CACHE_INFORMATION = *mut root::_DISK_CACHE_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_GROW_PARTITION {
        pub PartitionNumber: u32,
        pub BytesToGrow: root::LARGE_INTEGER,
    }
    pub type DISK_GROW_PARTITION = root::_DISK_GROW_PARTITION;
    pub type PDISK_GROW_PARTITION = *mut root::_DISK_GROW_PARTITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _HISTOGRAM_BUCKET {
        pub Reads: u32,
        pub Writes: u32,
    }
    pub type HISTOGRAM_BUCKET = root::_HISTOGRAM_BUCKET;
    pub type PHISTOGRAM_BUCKET = *mut root::_HISTOGRAM_BUCKET;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_HISTOGRAM {
        pub DiskSize: root::LARGE_INTEGER,
        pub Start: root::LARGE_INTEGER,
        pub End: root::LARGE_INTEGER,
        pub Average: root::LARGE_INTEGER,
        pub AverageRead: root::LARGE_INTEGER,
        pub AverageWrite: root::LARGE_INTEGER,
        pub Granularity: u32,
        pub Size: u32,
        pub ReadCount: u32,
        pub WriteCount: u32,
        pub Histogram: root::PHISTOGRAM_BUCKET,
    }
    pub type DISK_HISTOGRAM = root::_DISK_HISTOGRAM;
    pub type PDISK_HISTOGRAM = *mut root::_DISK_HISTOGRAM;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_PERFORMANCE {
        pub BytesRead: root::LARGE_INTEGER,
        pub BytesWritten: root::LARGE_INTEGER,
        pub ReadTime: root::LARGE_INTEGER,
        pub WriteTime: root::LARGE_INTEGER,
        pub IdleTime: root::LARGE_INTEGER,
        pub ReadCount: u32,
        pub WriteCount: u32,
        pub QueueDepth: u32,
        pub SplitCount: u32,
        pub QueryTime: root::LARGE_INTEGER,
        pub StorageDeviceNumber: u32,
        pub StorageManagerName: [u16; 8usize],
    }
    pub type DISK_PERFORMANCE = root::_DISK_PERFORMANCE;
    pub type PDISK_PERFORMANCE = *mut root::_DISK_PERFORMANCE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_RECORD {
        pub ByteOffset: root::LARGE_INTEGER,
        pub StartTime: root::LARGE_INTEGER,
        pub EndTime: root::LARGE_INTEGER,
        pub VirtualAddress: root::PVOID,
        pub NumberOfBytes: u32,
        pub DeviceNumber: u8,
        pub ReadRequest: root::BOOLEAN,
    }
    pub type DISK_RECORD = root::_DISK_RECORD;
    pub type PDISK_RECORD = *mut root::_DISK_RECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DISK_LOGGING {
        pub Function: u8,
        pub BufferAddress: root::PVOID,
        pub BufferSize: u32,
    }
    pub type DISK_LOGGING = root::_DISK_LOGGING;
    pub type PDISK_LOGGING = *mut root::_DISK_LOGGING;
    pub const _BIN_TYPES_RequestSize: root::_BIN_TYPES = 0;
    pub const _BIN_TYPES_RequestLocation: root::_BIN_TYPES = 1;
    pub type _BIN_TYPES = i32;
    pub use self::super::root::_BIN_TYPES as BIN_TYPES;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIN_RANGE {
        pub StartValue: root::LARGE_INTEGER,
        pub Length: root::LARGE_INTEGER,
    }
    pub type BIN_RANGE = root::_BIN_RANGE;
    pub type PBIN_RANGE = *mut root::_BIN_RANGE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PERF_BIN {
        pub NumberOfBins: u32,
        pub TypeOfBin: u32,
        pub BinsRanges: [root::BIN_RANGE; 1usize],
    }
    pub type PERF_BIN = root::_PERF_BIN;
    pub type PPERF_BIN = *mut root::_PERF_BIN;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIN_COUNT {
        pub BinRange: root::BIN_RANGE,
        pub BinCount: u32,
    }
    pub type BIN_COUNT = root::_BIN_COUNT;
    pub type PBIN_COUNT = *mut root::_BIN_COUNT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIN_RESULTS {
        pub NumberOfBins: u32,
        pub BinCounts: [root::BIN_COUNT; 1usize],
    }
    pub type BIN_RESULTS = root::_BIN_RESULTS;
    pub type PBIN_RESULTS = *mut root::_BIN_RESULTS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GETVERSIONINPARAMS {
        pub bVersion: u8,
        pub bRevision: u8,
        pub bReserved: u8,
        pub bIDEDeviceMap: u8,
        pub fCapabilities: u32,
        pub dwReserved: [u32; 4usize],
    }
    pub type GETVERSIONINPARAMS = root::_GETVERSIONINPARAMS;
    pub type PGETVERSIONINPARAMS = *mut root::_GETVERSIONINPARAMS;
    pub type LPGETVERSIONINPARAMS = *mut root::_GETVERSIONINPARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IDEREGS {
        pub bFeaturesReg: u8,
        pub bSectorCountReg: u8,
        pub bSectorNumberReg: u8,
        pub bCylLowReg: u8,
        pub bCylHighReg: u8,
        pub bDriveHeadReg: u8,
        pub bCommandReg: u8,
        pub bReserved: u8,
    }
    pub type IDEREGS = root::_IDEREGS;
    pub type PIDEREGS = *mut root::_IDEREGS;
    pub type LPIDEREGS = *mut root::_IDEREGS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SENDCMDINPARAMS {
        pub cBufferSize: u32,
        pub irDriveRegs: root::IDEREGS,
        pub bDriveNumber: u8,
        pub bReserved: [u8; 3usize],
        pub dwReserved: [u32; 4usize],
        pub bBuffer: [u8; 1usize],
    }
    pub type SENDCMDINPARAMS = root::_SENDCMDINPARAMS;
    pub type PSENDCMDINPARAMS = *mut root::_SENDCMDINPARAMS;
    pub type LPSENDCMDINPARAMS = *mut root::_SENDCMDINPARAMS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVERSTATUS {
        pub bDriverError: u8,
        pub bIDEError: u8,
        pub bReserved: [u8; 2usize],
        pub dwReserved: [u32; 2usize],
    }
    pub type DRIVERSTATUS = root::_DRIVERSTATUS;
    pub type PDRIVERSTATUS = *mut root::_DRIVERSTATUS;
    pub type LPDRIVERSTATUS = *mut root::_DRIVERSTATUS;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SENDCMDOUTPARAMS {
        pub cBufferSize: u32,
        pub DriverStatus: root::DRIVERSTATUS,
        pub bBuffer: [u8; 1usize],
    }
    pub type SENDCMDOUTPARAMS = root::_SENDCMDOUTPARAMS;
    pub type PSENDCMDOUTPARAMS = *mut root::_SENDCMDOUTPARAMS;
    pub type LPSENDCMDOUTPARAMS = *mut root::_SENDCMDOUTPARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GET_DISK_ATTRIBUTES {
        pub Version: u32,
        pub Reserved1: u32,
        pub Attributes: root::DWORDLONG,
    }
    pub type GET_DISK_ATTRIBUTES = root::_GET_DISK_ATTRIBUTES;
    pub type PGET_DISK_ATTRIBUTES = *mut root::_GET_DISK_ATTRIBUTES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SET_DISK_ATTRIBUTES {
        pub Version: u32,
        pub Persist: root::BOOLEAN,
        pub Reserved1: [u8; 3usize],
        pub Attributes: root::DWORDLONG,
        pub AttributesMask: root::DWORDLONG,
        pub Reserved2: [u32; 4usize],
    }
    pub type SET_DISK_ATTRIBUTES = root::_SET_DISK_ATTRIBUTES;
    pub type PSET_DISK_ATTRIBUTES = *mut root::_SET_DISK_ATTRIBUTES;
    pub const _ELEMENT_TYPE_AllElements: root::_ELEMENT_TYPE = 0;
    pub const _ELEMENT_TYPE_ChangerTransport: root::_ELEMENT_TYPE = 1;
    pub const _ELEMENT_TYPE_ChangerSlot: root::_ELEMENT_TYPE = 2;
    pub const _ELEMENT_TYPE_ChangerIEPort: root::_ELEMENT_TYPE = 3;
    pub const _ELEMENT_TYPE_ChangerDrive: root::_ELEMENT_TYPE = 4;
    pub const _ELEMENT_TYPE_ChangerDoor: root::_ELEMENT_TYPE = 5;
    pub const _ELEMENT_TYPE_ChangerKeypad: root::_ELEMENT_TYPE = 6;
    pub const _ELEMENT_TYPE_ChangerMaxElement: root::_ELEMENT_TYPE = 7;
    pub type _ELEMENT_TYPE = i32;
    pub use self::super::root::_ELEMENT_TYPE as ELEMENT_TYPE;
    pub type PELEMENT_TYPE = *mut root::_ELEMENT_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_ELEMENT {
        pub ElementType: root::ELEMENT_TYPE,
        pub ElementAddress: u32,
    }
    pub type CHANGER_ELEMENT = root::_CHANGER_ELEMENT;
    pub type PCHANGER_ELEMENT = *mut root::_CHANGER_ELEMENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_ELEMENT_LIST {
        pub Element: root::CHANGER_ELEMENT,
        pub NumberOfElements: u32,
    }
    pub type CHANGER_ELEMENT_LIST = root::_CHANGER_ELEMENT_LIST;
    pub type PCHANGER_ELEMENT_LIST = *mut root::_CHANGER_ELEMENT_LIST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GET_CHANGER_PARAMETERS {
        pub Size: u32,
        pub NumberTransportElements: u16,
        pub NumberStorageElements: u16,
        pub NumberCleanerSlots: u16,
        pub NumberIEElements: u16,
        pub NumberDataTransferElements: u16,
        pub NumberOfDoors: u16,
        pub FirstSlotNumber: u16,
        pub FirstDriveNumber: u16,
        pub FirstTransportNumber: u16,
        pub FirstIEPortNumber: u16,
        pub FirstCleanerSlotAddress: u16,
        pub MagazineSize: u16,
        pub DriveCleanTimeout: u32,
        pub Features0: u32,
        pub Features1: u32,
        pub MoveFromTransport: u8,
        pub MoveFromSlot: u8,
        pub MoveFromIePort: u8,
        pub MoveFromDrive: u8,
        pub ExchangeFromTransport: u8,
        pub ExchangeFromSlot: u8,
        pub ExchangeFromIePort: u8,
        pub ExchangeFromDrive: u8,
        pub LockUnlockCapabilities: u8,
        pub PositionCapabilities: u8,
        pub Reserved1: [u8; 2usize],
        pub Reserved2: [u32; 2usize],
    }
    pub type GET_CHANGER_PARAMETERS = root::_GET_CHANGER_PARAMETERS;
    pub type PGET_CHANGER_PARAMETERS = *mut root::_GET_CHANGER_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_PRODUCT_DATA {
        pub VendorId: [u8; 8usize],
        pub ProductId: [u8; 16usize],
        pub Revision: [u8; 4usize],
        pub SerialNumber: [u8; 32usize],
        pub DeviceType: u8,
    }
    pub type CHANGER_PRODUCT_DATA = root::_CHANGER_PRODUCT_DATA;
    pub type PCHANGER_PRODUCT_DATA = *mut root::_CHANGER_PRODUCT_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_SET_ACCESS {
        pub Element: root::CHANGER_ELEMENT,
        pub Control: u32,
    }
    pub type CHANGER_SET_ACCESS = root::_CHANGER_SET_ACCESS;
    pub type PCHANGER_SET_ACCESS = *mut root::_CHANGER_SET_ACCESS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_READ_ELEMENT_STATUS {
        pub ElementList: root::CHANGER_ELEMENT_LIST,
        pub VolumeTagInfo: root::BOOLEAN,
    }
    pub type CHANGER_READ_ELEMENT_STATUS = root::_CHANGER_READ_ELEMENT_STATUS;
    pub type PCHANGER_READ_ELEMENT_STATUS = *mut root::_CHANGER_READ_ELEMENT_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_ELEMENT_STATUS {
        pub Element: root::CHANGER_ELEMENT,
        pub SrcElementAddress: root::CHANGER_ELEMENT,
        pub Flags: u32,
        pub ExceptionCode: u32,
        pub TargetId: u8,
        pub Lun: u8,
        pub Reserved: u16,
        pub PrimaryVolumeID: [u8; 36usize],
        pub AlternateVolumeID: [u8; 36usize],
    }
    pub type CHANGER_ELEMENT_STATUS = root::_CHANGER_ELEMENT_STATUS;
    pub type PCHANGER_ELEMENT_STATUS = *mut root::_CHANGER_ELEMENT_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_ELEMENT_STATUS_EX {
        pub Element: root::CHANGER_ELEMENT,
        pub SrcElementAddress: root::CHANGER_ELEMENT,
        pub Flags: u32,
        pub ExceptionCode: u32,
        pub TargetId: u8,
        pub Lun: u8,
        pub Reserved: u16,
        pub PrimaryVolumeID: [u8; 36usize],
        pub AlternateVolumeID: [u8; 36usize],
        pub VendorIdentification: [u8; 8usize],
        pub ProductIdentification: [u8; 16usize],
        pub SerialNumber: [u8; 32usize],
    }
    pub type CHANGER_ELEMENT_STATUS_EX = root::_CHANGER_ELEMENT_STATUS_EX;
    pub type PCHANGER_ELEMENT_STATUS_EX = *mut root::_CHANGER_ELEMENT_STATUS_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
        pub ElementList: root::CHANGER_ELEMENT_LIST,
        pub BarCodeScan: root::BOOLEAN,
    }
    pub type CHANGER_INITIALIZE_ELEMENT_STATUS = root::_CHANGER_INITIALIZE_ELEMENT_STATUS;
    pub type PCHANGER_INITIALIZE_ELEMENT_STATUS = *mut root::_CHANGER_INITIALIZE_ELEMENT_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_SET_POSITION {
        pub Transport: root::CHANGER_ELEMENT,
        pub Destination: root::CHANGER_ELEMENT,
        pub Flip: root::BOOLEAN,
    }
    pub type CHANGER_SET_POSITION = root::_CHANGER_SET_POSITION;
    pub type PCHANGER_SET_POSITION = *mut root::_CHANGER_SET_POSITION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_EXCHANGE_MEDIUM {
        pub Transport: root::CHANGER_ELEMENT,
        pub Source: root::CHANGER_ELEMENT,
        pub Destination1: root::CHANGER_ELEMENT,
        pub Destination2: root::CHANGER_ELEMENT,
        pub Flip1: root::BOOLEAN,
        pub Flip2: root::BOOLEAN,
    }
    pub type CHANGER_EXCHANGE_MEDIUM = root::_CHANGER_EXCHANGE_MEDIUM;
    pub type PCHANGER_EXCHANGE_MEDIUM = *mut root::_CHANGER_EXCHANGE_MEDIUM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_MOVE_MEDIUM {
        pub Transport: root::CHANGER_ELEMENT,
        pub Source: root::CHANGER_ELEMENT,
        pub Destination: root::CHANGER_ELEMENT,
        pub Flip: root::BOOLEAN,
    }
    pub type CHANGER_MOVE_MEDIUM = root::_CHANGER_MOVE_MEDIUM;
    pub type PCHANGER_MOVE_MEDIUM = *mut root::_CHANGER_MOVE_MEDIUM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
        pub StartingElement: root::CHANGER_ELEMENT,
        pub ActionCode: u32,
        pub VolumeIDTemplate: [u8; 40usize],
    }
    pub type CHANGER_SEND_VOLUME_TAG_INFORMATION = root::_CHANGER_SEND_VOLUME_TAG_INFORMATION;
    pub type PCHANGER_SEND_VOLUME_TAG_INFORMATION = *mut root::_CHANGER_SEND_VOLUME_TAG_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _READ_ELEMENT_ADDRESS_INFO {
        pub NumberOfElements: u32,
        pub ElementStatus: [root::CHANGER_ELEMENT_STATUS; 1usize],
    }
    pub type READ_ELEMENT_ADDRESS_INFO = root::_READ_ELEMENT_ADDRESS_INFO;
    pub type PREAD_ELEMENT_ADDRESS_INFO = *mut root::_READ_ELEMENT_ADDRESS_INFO;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemNone: root::_CHANGER_DEVICE_PROBLEM_TYPE =
        0;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemHardware:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 1;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemCHMError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 2;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemDoorOpen:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 3;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemCalibrationError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 4;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemTargetFailure:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 5;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemCHMMoveError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 6;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemCHMZeroError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 7;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemCartridgeInsertError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 8;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemPositionError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 9;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemSensorError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 10;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemCartridgeEjectError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 11;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemGripperError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 12;
    pub const _CHANGER_DEVICE_PROBLEM_TYPE_DeviceProblemDriveError:
        root::_CHANGER_DEVICE_PROBLEM_TYPE = 13;
    pub type _CHANGER_DEVICE_PROBLEM_TYPE = i32;
    pub use self::super::root::_CHANGER_DEVICE_PROBLEM_TYPE as CHANGER_DEVICE_PROBLEM_TYPE;
    pub type PCHANGER_DEVICE_PROBLEM_TYPE = *mut root::_CHANGER_DEVICE_PROBLEM_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PATHNAME_BUFFER {
        pub PathNameLength: u32,
        pub Name: [u16; 1usize],
    }
    pub type PATHNAME_BUFFER = root::_PATHNAME_BUFFER;
    pub type PPATHNAME_BUFFER = *mut root::_PATHNAME_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_QUERY_FAT_BPB_BUFFER {
        pub First0x24BytesOfBootSector: [u8; 36usize],
    }
    pub type FSCTL_QUERY_FAT_BPB_BUFFER = root::_FSCTL_QUERY_FAT_BPB_BUFFER;
    pub type PFSCTL_QUERY_FAT_BPB_BUFFER = *mut root::_FSCTL_QUERY_FAT_BPB_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct NTFS_VOLUME_DATA_BUFFER {
        pub VolumeSerialNumber: root::LARGE_INTEGER,
        pub NumberSectors: root::LARGE_INTEGER,
        pub TotalClusters: root::LARGE_INTEGER,
        pub FreeClusters: root::LARGE_INTEGER,
        pub TotalReserved: root::LARGE_INTEGER,
        pub BytesPerSector: u32,
        pub BytesPerCluster: u32,
        pub BytesPerFileRecordSegment: u32,
        pub ClustersPerFileRecordSegment: u32,
        pub MftValidDataLength: root::LARGE_INTEGER,
        pub MftStartLcn: root::LARGE_INTEGER,
        pub Mft2StartLcn: root::LARGE_INTEGER,
        pub MftZoneStart: root::LARGE_INTEGER,
        pub MftZoneEnd: root::LARGE_INTEGER,
    }
    pub type PNTFS_VOLUME_DATA_BUFFER = *mut root::NTFS_VOLUME_DATA_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NTFS_EXTENDED_VOLUME_DATA {
        pub ByteCount: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub BytesPerPhysicalSector: u32,
        pub LfsMajorVersion: u16,
        pub LfsMinorVersion: u16,
        pub MaxDeviceTrimExtentCount: u32,
        pub MaxDeviceTrimByteCount: u32,
        pub MaxVolumeTrimExtentCount: u32,
        pub MaxVolumeTrimByteCount: u32,
    }
    pub type PNTFS_EXTENDED_VOLUME_DATA = *mut root::NTFS_EXTENDED_VOLUME_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct REFS_VOLUME_DATA_BUFFER {
        pub ByteCount: u32,
        pub MajorVersion: u32,
        pub MinorVersion: u32,
        pub BytesPerPhysicalSector: u32,
        pub VolumeSerialNumber: root::LARGE_INTEGER,
        pub NumberSectors: root::LARGE_INTEGER,
        pub TotalClusters: root::LARGE_INTEGER,
        pub FreeClusters: root::LARGE_INTEGER,
        pub TotalReserved: root::LARGE_INTEGER,
        pub BytesPerSector: u32,
        pub BytesPerCluster: u32,
        pub MaximumSizeOfResidentFile: root::LARGE_INTEGER,
        pub FastTierDataFillRatio: u16,
        pub SlowTierDataFillRatio: u16,
        pub DestagesFastTierToSlowTierRate: u32,
        pub Reserved: [root::LARGE_INTEGER; 9usize],
    }
    pub type PREFS_VOLUME_DATA_BUFFER = *mut root::REFS_VOLUME_DATA_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct STARTING_LCN_INPUT_BUFFER {
        pub StartingLcn: root::LARGE_INTEGER,
    }
    pub type PSTARTING_LCN_INPUT_BUFFER = *mut root::STARTING_LCN_INPUT_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct STARTING_LCN_INPUT_BUFFER_EX {
        pub StartingLcn: root::LARGE_INTEGER,
        pub Flags: u32,
    }
    pub type PSTARTING_LCN_INPUT_BUFFER_EX = *mut root::STARTING_LCN_INPUT_BUFFER_EX;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct VOLUME_BITMAP_BUFFER {
        pub StartingLcn: root::LARGE_INTEGER,
        pub BitmapSize: root::LARGE_INTEGER,
        pub Buffer: [u8; 1usize],
    }
    pub type PVOLUME_BITMAP_BUFFER = *mut root::VOLUME_BITMAP_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct STARTING_VCN_INPUT_BUFFER {
        pub StartingVcn: root::LARGE_INTEGER,
    }
    pub type PSTARTING_VCN_INPUT_BUFFER = *mut root::STARTING_VCN_INPUT_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct RETRIEVAL_POINTERS_BUFFER {
        pub ExtentCount: u32,
        pub StartingVcn: root::LARGE_INTEGER,
        pub Extents: [root::RETRIEVAL_POINTERS_BUFFER__bindgen_ty_1; 1usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct RETRIEVAL_POINTERS_BUFFER__bindgen_ty_1 {
        pub NextVcn: root::LARGE_INTEGER,
        pub Lcn: root::LARGE_INTEGER,
    }
    pub type PRETRIEVAL_POINTERS_BUFFER = *mut root::RETRIEVAL_POINTERS_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
        pub ExtentCount: u32,
        pub StartingVcn: root::LARGE_INTEGER,
        pub Extents: [root::RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER__bindgen_ty_1; 1usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER__bindgen_ty_1 {
        pub NextVcn: root::LARGE_INTEGER,
        pub Lcn: root::LARGE_INTEGER,
        pub ReferenceCount: u32,
    }
    pub type PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER =
        *mut root::RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RETRIEVAL_POINTER_COUNT {
        pub ExtentCount: u32,
    }
    pub type PRETRIEVAL_POINTER_COUNT = *mut root::RETRIEVAL_POINTER_COUNT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct NTFS_FILE_RECORD_INPUT_BUFFER {
        pub FileReferenceNumber: root::LARGE_INTEGER,
    }
    pub type PNTFS_FILE_RECORD_INPUT_BUFFER = *mut root::NTFS_FILE_RECORD_INPUT_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct NTFS_FILE_RECORD_OUTPUT_BUFFER {
        pub FileReferenceNumber: root::LARGE_INTEGER,
        pub FileRecordLength: u32,
        pub FileRecordBuffer: [u8; 1usize],
    }
    pub type PNTFS_FILE_RECORD_OUTPUT_BUFFER = *mut root::NTFS_FILE_RECORD_OUTPUT_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct MOVE_FILE_DATA {
        pub FileHandle: root::HANDLE,
        pub StartingVcn: root::LARGE_INTEGER,
        pub StartingLcn: root::LARGE_INTEGER,
        pub ClusterCount: u32,
    }
    pub type PMOVE_FILE_DATA = *mut root::MOVE_FILE_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct MOVE_FILE_RECORD_DATA {
        pub FileHandle: root::HANDLE,
        pub SourceFileRecord: root::LARGE_INTEGER,
        pub TargetFileRecord: root::LARGE_INTEGER,
    }
    pub type PMOVE_FILE_RECORD_DATA = *mut root::MOVE_FILE_RECORD_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _MOVE_FILE_DATA32 {
        pub FileHandle: root::UINT32,
        pub StartingVcn: root::LARGE_INTEGER,
        pub StartingLcn: root::LARGE_INTEGER,
        pub ClusterCount: u32,
    }
    pub type MOVE_FILE_DATA32 = root::_MOVE_FILE_DATA32;
    pub type PMOVE_FILE_DATA32 = *mut root::_MOVE_FILE_DATA32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FIND_BY_SID_DATA {
        pub Restart: u32,
        pub Sid: root::SID,
    }
    pub type PFIND_BY_SID_DATA = *mut root::FIND_BY_SID_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FIND_BY_SID_OUTPUT {
        pub NextEntryOffset: u32,
        pub FileIndex: u32,
        pub FileNameLength: u32,
        pub FileName: [u16; 1usize],
    }
    pub type PFIND_BY_SID_OUTPUT = *mut root::FIND_BY_SID_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MFT_ENUM_DATA_V0 {
        pub StartFileReferenceNumber: root::DWORDLONG,
        pub LowUsn: root::USN,
        pub HighUsn: root::USN,
    }
    pub type PMFT_ENUM_DATA_V0 = *mut root::MFT_ENUM_DATA_V0;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MFT_ENUM_DATA_V1 {
        pub StartFileReferenceNumber: root::DWORDLONG,
        pub LowUsn: root::USN,
        pub HighUsn: root::USN,
        pub MinMajorVersion: u16,
        pub MaxMajorVersion: u16,
    }
    pub type PMFT_ENUM_DATA_V1 = *mut root::MFT_ENUM_DATA_V1;
    pub type MFT_ENUM_DATA = root::MFT_ENUM_DATA_V1;
    pub type PMFT_ENUM_DATA = *mut root::MFT_ENUM_DATA_V1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CREATE_USN_JOURNAL_DATA {
        pub MaximumSize: root::DWORDLONG,
        pub AllocationDelta: root::DWORDLONG,
    }
    pub type PCREATE_USN_JOURNAL_DATA = *mut root::CREATE_USN_JOURNAL_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct READ_FILE_USN_DATA {
        pub MinMajorVersion: u16,
        pub MaxMajorVersion: u16,
    }
    pub type PREAD_FILE_USN_DATA = *mut root::READ_FILE_USN_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct READ_USN_JOURNAL_DATA_V0 {
        pub StartUsn: root::USN,
        pub ReasonMask: u32,
        pub ReturnOnlyOnClose: u32,
        pub Timeout: root::DWORDLONG,
        pub BytesToWaitFor: root::DWORDLONG,
        pub UsnJournalID: root::DWORDLONG,
    }
    pub type PREAD_USN_JOURNAL_DATA_V0 = *mut root::READ_USN_JOURNAL_DATA_V0;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct READ_USN_JOURNAL_DATA_V1 {
        pub StartUsn: root::USN,
        pub ReasonMask: u32,
        pub ReturnOnlyOnClose: u32,
        pub Timeout: root::DWORDLONG,
        pub BytesToWaitFor: root::DWORDLONG,
        pub UsnJournalID: root::DWORDLONG,
        pub MinMajorVersion: u16,
        pub MaxMajorVersion: u16,
    }
    pub type PREAD_USN_JOURNAL_DATA_V1 = *mut root::READ_USN_JOURNAL_DATA_V1;
    pub type READ_USN_JOURNAL_DATA = root::READ_USN_JOURNAL_DATA_V1;
    pub type PREAD_USN_JOURNAL_DATA = *mut root::READ_USN_JOURNAL_DATA_V1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_TRACK_MODIFIED_RANGES {
        pub Flags: u32,
        pub Unused: u32,
        pub ChunkSize: root::DWORDLONG,
        pub FileSizeThreshold: root::LONGLONG,
    }
    pub type PUSN_TRACK_MODIFIED_RANGES = *mut root::USN_TRACK_MODIFIED_RANGES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_RANGE_TRACK_OUTPUT {
        pub Usn: root::USN,
    }
    pub type PUSN_RANGE_TRACK_OUTPUT = *mut root::USN_RANGE_TRACK_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct USN_RECORD_V2 {
        pub RecordLength: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub FileReferenceNumber: root::DWORDLONG,
        pub ParentFileReferenceNumber: root::DWORDLONG,
        pub Usn: root::USN,
        pub TimeStamp: root::LARGE_INTEGER,
        pub Reason: u32,
        pub SourceInfo: u32,
        pub SecurityId: u32,
        pub FileAttributes: u32,
        pub FileNameLength: u16,
        pub FileNameOffset: u16,
        pub FileName: [u16; 1usize],
    }
    pub type PUSN_RECORD_V2 = *mut root::USN_RECORD_V2;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct USN_RECORD_V3 {
        pub RecordLength: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
        pub FileReferenceNumber: root::FILE_ID_128,
        pub ParentFileReferenceNumber: root::FILE_ID_128,
        pub Usn: root::USN,
        pub TimeStamp: root::LARGE_INTEGER,
        pub Reason: u32,
        pub SourceInfo: u32,
        pub SecurityId: u32,
        pub FileAttributes: u32,
        pub FileNameLength: u16,
        pub FileNameOffset: u16,
        pub FileName: [u16; 1usize],
    }
    pub type PUSN_RECORD_V3 = *mut root::USN_RECORD_V3;
    pub type USN_RECORD = root::USN_RECORD_V2;
    pub type PUSN_RECORD = *mut root::USN_RECORD_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_RECORD_COMMON_HEADER {
        pub RecordLength: u32,
        pub MajorVersion: u16,
        pub MinorVersion: u16,
    }
    pub type PUSN_RECORD_COMMON_HEADER = *mut root::USN_RECORD_COMMON_HEADER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_RECORD_EXTENT {
        pub Offset: root::LONGLONG,
        pub Length: root::LONGLONG,
    }
    pub type PUSN_RECORD_EXTENT = *mut root::USN_RECORD_EXTENT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_RECORD_V4 {
        pub Header: root::USN_RECORD_COMMON_HEADER,
        pub FileReferenceNumber: root::FILE_ID_128,
        pub ParentFileReferenceNumber: root::FILE_ID_128,
        pub Usn: root::USN,
        pub Reason: u32,
        pub SourceInfo: u32,
        pub RemainingExtents: u32,
        pub NumberOfExtents: u16,
        pub ExtentSize: u16,
        pub Extents: [root::USN_RECORD_EXTENT; 1usize],
    }
    pub type PUSN_RECORD_V4 = *mut root::USN_RECORD_V4;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union USN_RECORD_UNION {
        pub Header: root::USN_RECORD_COMMON_HEADER,
        pub V2: root::USN_RECORD_V2,
        pub V3: root::USN_RECORD_V3,
        pub V4: root::USN_RECORD_V4,
    }
    pub type PUSN_RECORD_UNION = *mut root::USN_RECORD_UNION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_JOURNAL_DATA_V0 {
        pub UsnJournalID: root::DWORDLONG,
        pub FirstUsn: root::USN,
        pub NextUsn: root::USN,
        pub LowestValidUsn: root::USN,
        pub MaxUsn: root::USN,
        pub MaximumSize: root::DWORDLONG,
        pub AllocationDelta: root::DWORDLONG,
    }
    pub type PUSN_JOURNAL_DATA_V0 = *mut root::USN_JOURNAL_DATA_V0;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_JOURNAL_DATA_V1 {
        pub UsnJournalID: root::DWORDLONG,
        pub FirstUsn: root::USN,
        pub NextUsn: root::USN,
        pub LowestValidUsn: root::USN,
        pub MaxUsn: root::USN,
        pub MaximumSize: root::DWORDLONG,
        pub AllocationDelta: root::DWORDLONG,
        pub MinSupportedMajorVersion: u16,
        pub MaxSupportedMajorVersion: u16,
    }
    pub type PUSN_JOURNAL_DATA_V1 = *mut root::USN_JOURNAL_DATA_V1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct USN_JOURNAL_DATA_V2 {
        pub UsnJournalID: root::DWORDLONG,
        pub FirstUsn: root::USN,
        pub NextUsn: root::USN,
        pub LowestValidUsn: root::USN,
        pub MaxUsn: root::USN,
        pub MaximumSize: root::DWORDLONG,
        pub AllocationDelta: root::DWORDLONG,
        pub MinSupportedMajorVersion: u16,
        pub MaxSupportedMajorVersion: u16,
        pub Flags: u32,
        pub RangeTrackChunkSize: root::DWORDLONG,
        pub RangeTrackFileSizeThreshold: root::LONGLONG,
    }
    pub type PUSN_JOURNAL_DATA_V2 = *mut root::USN_JOURNAL_DATA_V2;
    pub type USN_JOURNAL_DATA = root::USN_JOURNAL_DATA_V1;
    pub type PUSN_JOURNAL_DATA = *mut root::USN_JOURNAL_DATA_V1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DELETE_USN_JOURNAL_DATA {
        pub UsnJournalID: root::DWORDLONG,
        pub DeleteFlags: u32,
    }
    pub type PDELETE_USN_JOURNAL_DATA = *mut root::DELETE_USN_JOURNAL_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct MARK_HANDLE_INFO {
        pub __bindgen_anon_1: root::MARK_HANDLE_INFO__bindgen_ty_1,
        pub VolumeHandle: root::HANDLE,
        pub HandleInfo: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union MARK_HANDLE_INFO__bindgen_ty_1 {
        pub UsnSourceInfo: u32,
        pub CopyNumber: u32,
    }
    pub type PMARK_HANDLE_INFO = *mut root::MARK_HANDLE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct MARK_HANDLE_INFO32 {
        pub __bindgen_anon_1: root::MARK_HANDLE_INFO32__bindgen_ty_1,
        pub VolumeHandle: root::UINT32,
        pub HandleInfo: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union MARK_HANDLE_INFO32__bindgen_ty_1 {
        pub UsnSourceInfo: u32,
        pub CopyNumber: u32,
    }
    pub type PMARK_HANDLE_INFO32 = *mut root::MARK_HANDLE_INFO32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct BULK_SECURITY_TEST_DATA {
        pub DesiredAccess: root::ACCESS_MASK,
        pub SecurityIds: [u32; 1usize],
    }
    pub type PBULK_SECURITY_TEST_DATA = *mut root::BULK_SECURITY_TEST_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_PREFETCH {
        pub Type: u32,
        pub Count: u32,
        pub Prefetch: [root::DWORDLONG; 1usize],
    }
    pub type FILE_PREFETCH = root::_FILE_PREFETCH;
    pub type PFILE_PREFETCH = *mut root::_FILE_PREFETCH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_PREFETCH_EX {
        pub Type: u32,
        pub Count: u32,
        pub Context: root::PVOID,
        pub Prefetch: [root::DWORDLONG; 1usize],
    }
    pub type FILE_PREFETCH_EX = root::_FILE_PREFETCH_EX;
    pub type PFILE_PREFETCH_EX = *mut root::_FILE_PREFETCH_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILESYSTEM_STATISTICS {
        pub FileSystemType: u16,
        pub Version: u16,
        pub SizeOfCompleteStructure: u32,
        pub UserFileReads: u32,
        pub UserFileReadBytes: u32,
        pub UserDiskReads: u32,
        pub UserFileWrites: u32,
        pub UserFileWriteBytes: u32,
        pub UserDiskWrites: u32,
        pub MetaDataReads: u32,
        pub MetaDataReadBytes: u32,
        pub MetaDataDiskReads: u32,
        pub MetaDataWrites: u32,
        pub MetaDataWriteBytes: u32,
        pub MetaDataDiskWrites: u32,
    }
    pub type FILESYSTEM_STATISTICS = root::_FILESYSTEM_STATISTICS;
    pub type PFILESYSTEM_STATISTICS = *mut root::_FILESYSTEM_STATISTICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FAT_STATISTICS {
        pub CreateHits: u32,
        pub SuccessfulCreates: u32,
        pub FailedCreates: u32,
        pub NonCachedReads: u32,
        pub NonCachedReadBytes: u32,
        pub NonCachedWrites: u32,
        pub NonCachedWriteBytes: u32,
        pub NonCachedDiskReads: u32,
        pub NonCachedDiskWrites: u32,
    }
    pub type FAT_STATISTICS = root::_FAT_STATISTICS;
    pub type PFAT_STATISTICS = *mut root::_FAT_STATISTICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXFAT_STATISTICS {
        pub CreateHits: u32,
        pub SuccessfulCreates: u32,
        pub FailedCreates: u32,
        pub NonCachedReads: u32,
        pub NonCachedReadBytes: u32,
        pub NonCachedWrites: u32,
        pub NonCachedWriteBytes: u32,
        pub NonCachedDiskReads: u32,
        pub NonCachedDiskWrites: u32,
    }
    pub type EXFAT_STATISTICS = root::_EXFAT_STATISTICS;
    pub type PEXFAT_STATISTICS = *mut root::_EXFAT_STATISTICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS {
        pub LogFileFullExceptions: u32,
        pub OtherExceptions: u32,
        pub MftReads: u32,
        pub MftReadBytes: u32,
        pub MftWrites: u32,
        pub MftWriteBytes: u32,
        pub MftWritesUserLevel: root::_NTFS_STATISTICS__bindgen_ty_1,
        pub MftWritesFlushForLogFileFull: u16,
        pub MftWritesLazyWriter: u16,
        pub MftWritesUserRequest: u16,
        pub Mft2Writes: u32,
        pub Mft2WriteBytes: u32,
        pub Mft2WritesUserLevel: root::_NTFS_STATISTICS__bindgen_ty_2,
        pub Mft2WritesFlushForLogFileFull: u16,
        pub Mft2WritesLazyWriter: u16,
        pub Mft2WritesUserRequest: u16,
        pub RootIndexReads: u32,
        pub RootIndexReadBytes: u32,
        pub RootIndexWrites: u32,
        pub RootIndexWriteBytes: u32,
        pub BitmapReads: u32,
        pub BitmapReadBytes: u32,
        pub BitmapWrites: u32,
        pub BitmapWriteBytes: u32,
        pub BitmapWritesFlushForLogFileFull: u16,
        pub BitmapWritesLazyWriter: u16,
        pub BitmapWritesUserRequest: u16,
        pub BitmapWritesUserLevel: root::_NTFS_STATISTICS__bindgen_ty_3,
        pub MftBitmapReads: u32,
        pub MftBitmapReadBytes: u32,
        pub MftBitmapWrites: u32,
        pub MftBitmapWriteBytes: u32,
        pub MftBitmapWritesFlushForLogFileFull: u16,
        pub MftBitmapWritesLazyWriter: u16,
        pub MftBitmapWritesUserRequest: u16,
        pub MftBitmapWritesUserLevel: root::_NTFS_STATISTICS__bindgen_ty_4,
        pub UserIndexReads: u32,
        pub UserIndexReadBytes: u32,
        pub UserIndexWrites: u32,
        pub UserIndexWriteBytes: u32,
        pub LogFileReads: u32,
        pub LogFileReadBytes: u32,
        pub LogFileWrites: u32,
        pub LogFileWriteBytes: u32,
        pub Allocate: root::_NTFS_STATISTICS__bindgen_ty_5,
        pub DiskResourcesExhausted: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS__bindgen_ty_1 {
        pub Write: u16,
        pub Create: u16,
        pub SetInfo: u16,
        pub Flush: u16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS__bindgen_ty_2 {
        pub Write: u16,
        pub Create: u16,
        pub SetInfo: u16,
        pub Flush: u16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS__bindgen_ty_3 {
        pub Write: u16,
        pub Create: u16,
        pub SetInfo: u16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS__bindgen_ty_4 {
        pub Write: u16,
        pub Create: u16,
        pub SetInfo: u16,
        pub Flush: u16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS__bindgen_ty_5 {
        pub Calls: u32,
        pub Clusters: u32,
        pub Hints: u32,
        pub RunsReturned: u32,
        pub HintsHonored: u32,
        pub HintsClusters: u32,
        pub Cache: u32,
        pub CacheClusters: u32,
        pub CacheMiss: u32,
        pub CacheMissClusters: u32,
    }
    pub type NTFS_STATISTICS = root::_NTFS_STATISTICS;
    pub type PNTFS_STATISTICS = *mut root::_NTFS_STATISTICS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILESYSTEM_STATISTICS_EX {
        pub FileSystemType: u16,
        pub Version: u16,
        pub SizeOfCompleteStructure: u32,
        pub UserFileReads: root::DWORDLONG,
        pub UserFileReadBytes: root::DWORDLONG,
        pub UserDiskReads: root::DWORDLONG,
        pub UserFileWrites: root::DWORDLONG,
        pub UserFileWriteBytes: root::DWORDLONG,
        pub UserDiskWrites: root::DWORDLONG,
        pub MetaDataReads: root::DWORDLONG,
        pub MetaDataReadBytes: root::DWORDLONG,
        pub MetaDataDiskReads: root::DWORDLONG,
        pub MetaDataWrites: root::DWORDLONG,
        pub MetaDataWriteBytes: root::DWORDLONG,
        pub MetaDataDiskWrites: root::DWORDLONG,
    }
    pub type FILESYSTEM_STATISTICS_EX = root::_FILESYSTEM_STATISTICS_EX;
    pub type PFILESYSTEM_STATISTICS_EX = *mut root::_FILESYSTEM_STATISTICS_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS_EX {
        pub LogFileFullExceptions: u32,
        pub OtherExceptions: u32,
        pub MftReads: root::DWORDLONG,
        pub MftReadBytes: root::DWORDLONG,
        pub MftWrites: root::DWORDLONG,
        pub MftWriteBytes: root::DWORDLONG,
        pub MftWritesUserLevel: root::_NTFS_STATISTICS_EX__bindgen_ty_1,
        pub MftWritesFlushForLogFileFull: u32,
        pub MftWritesLazyWriter: u32,
        pub MftWritesUserRequest: u32,
        pub Mft2Writes: root::DWORDLONG,
        pub Mft2WriteBytes: root::DWORDLONG,
        pub Mft2WritesUserLevel: root::_NTFS_STATISTICS_EX__bindgen_ty_2,
        pub Mft2WritesFlushForLogFileFull: u32,
        pub Mft2WritesLazyWriter: u32,
        pub Mft2WritesUserRequest: u32,
        pub RootIndexReads: root::DWORDLONG,
        pub RootIndexReadBytes: root::DWORDLONG,
        pub RootIndexWrites: root::DWORDLONG,
        pub RootIndexWriteBytes: root::DWORDLONG,
        pub BitmapReads: root::DWORDLONG,
        pub BitmapReadBytes: root::DWORDLONG,
        pub BitmapWrites: root::DWORDLONG,
        pub BitmapWriteBytes: root::DWORDLONG,
        pub BitmapWritesFlushForLogFileFull: u32,
        pub BitmapWritesLazyWriter: u32,
        pub BitmapWritesUserRequest: u32,
        pub BitmapWritesUserLevel: root::_NTFS_STATISTICS_EX__bindgen_ty_3,
        pub MftBitmapReads: root::DWORDLONG,
        pub MftBitmapReadBytes: root::DWORDLONG,
        pub MftBitmapWrites: root::DWORDLONG,
        pub MftBitmapWriteBytes: root::DWORDLONG,
        pub MftBitmapWritesFlushForLogFileFull: u32,
        pub MftBitmapWritesLazyWriter: u32,
        pub MftBitmapWritesUserRequest: u32,
        pub MftBitmapWritesUserLevel: root::_NTFS_STATISTICS_EX__bindgen_ty_4,
        pub UserIndexReads: root::DWORDLONG,
        pub UserIndexReadBytes: root::DWORDLONG,
        pub UserIndexWrites: root::DWORDLONG,
        pub UserIndexWriteBytes: root::DWORDLONG,
        pub LogFileReads: root::DWORDLONG,
        pub LogFileReadBytes: root::DWORDLONG,
        pub LogFileWrites: root::DWORDLONG,
        pub LogFileWriteBytes: root::DWORDLONG,
        pub Allocate: root::_NTFS_STATISTICS_EX__bindgen_ty_5,
        pub DiskResourcesExhausted: u32,
        pub VolumeTrimCount: root::DWORDLONG,
        pub VolumeTrimTime: root::DWORDLONG,
        pub VolumeTrimByteCount: root::DWORDLONG,
        pub FileLevelTrimCount: root::DWORDLONG,
        pub FileLevelTrimTime: root::DWORDLONG,
        pub FileLevelTrimByteCount: root::DWORDLONG,
        pub VolumeTrimSkippedCount: root::DWORDLONG,
        pub VolumeTrimSkippedByteCount: root::DWORDLONG,
        pub NtfsFillStatInfoFromMftRecordCalledCount: root::DWORDLONG,
        pub NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount: root::DWORDLONG,
        pub NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount: root::DWORDLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS_EX__bindgen_ty_1 {
        pub Write: u32,
        pub Create: u32,
        pub SetInfo: u32,
        pub Flush: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS_EX__bindgen_ty_2 {
        pub Write: u32,
        pub Create: u32,
        pub SetInfo: u32,
        pub Flush: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS_EX__bindgen_ty_3 {
        pub Write: u32,
        pub Create: u32,
        pub SetInfo: u32,
        pub Flush: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS_EX__bindgen_ty_4 {
        pub Write: u32,
        pub Create: u32,
        pub SetInfo: u32,
        pub Flush: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _NTFS_STATISTICS_EX__bindgen_ty_5 {
        pub Calls: u32,
        pub RunsReturned: u32,
        pub Hints: u32,
        pub HintsHonored: u32,
        pub Cache: u32,
        pub CacheMiss: u32,
        pub Clusters: root::DWORDLONG,
        pub HintsClusters: root::DWORDLONG,
        pub CacheClusters: root::DWORDLONG,
        pub CacheMissClusters: root::DWORDLONG,
    }
    pub type NTFS_STATISTICS_EX = root::_NTFS_STATISTICS_EX;
    pub type PNTFS_STATISTICS_EX = *mut root::_NTFS_STATISTICS_EX;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_OBJECTID_BUFFER {
        pub ObjectId: [u8; 16usize],
        pub __bindgen_anon_1: root::_FILE_OBJECTID_BUFFER__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _FILE_OBJECTID_BUFFER__bindgen_ty_1 {
        pub __bindgen_anon_1: root::_FILE_OBJECTID_BUFFER__bindgen_ty_1__bindgen_ty_1,
        pub ExtendedInfo: [u8; 48usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_OBJECTID_BUFFER__bindgen_ty_1__bindgen_ty_1 {
        pub BirthVolumeId: [u8; 16usize],
        pub BirthObjectId: [u8; 16usize],
        pub DomainId: [u8; 16usize],
    }
    pub type FILE_OBJECTID_BUFFER = root::_FILE_OBJECTID_BUFFER;
    pub type PFILE_OBJECTID_BUFFER = *mut root::_FILE_OBJECTID_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_SET_SPARSE_BUFFER {
        pub SetSparse: root::BOOLEAN,
    }
    pub type FILE_SET_SPARSE_BUFFER = root::_FILE_SET_SPARSE_BUFFER;
    pub type PFILE_SET_SPARSE_BUFFER = *mut root::_FILE_SET_SPARSE_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_ZERO_DATA_INFORMATION {
        pub FileOffset: root::LARGE_INTEGER,
        pub BeyondFinalZero: root::LARGE_INTEGER,
    }
    pub type FILE_ZERO_DATA_INFORMATION = root::_FILE_ZERO_DATA_INFORMATION;
    pub type PFILE_ZERO_DATA_INFORMATION = *mut root::_FILE_ZERO_DATA_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_ZERO_DATA_INFORMATION_EX {
        pub FileOffset: root::LARGE_INTEGER,
        pub BeyondFinalZero: root::LARGE_INTEGER,
        pub Flags: u32,
    }
    pub type FILE_ZERO_DATA_INFORMATION_EX = root::_FILE_ZERO_DATA_INFORMATION_EX;
    pub type PFILE_ZERO_DATA_INFORMATION_EX = *mut root::_FILE_ZERO_DATA_INFORMATION_EX;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_ALLOCATED_RANGE_BUFFER {
        pub FileOffset: root::LARGE_INTEGER,
        pub Length: root::LARGE_INTEGER,
    }
    pub type FILE_ALLOCATED_RANGE_BUFFER = root::_FILE_ALLOCATED_RANGE_BUFFER;
    pub type PFILE_ALLOCATED_RANGE_BUFFER = *mut root::_FILE_ALLOCATED_RANGE_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_BUFFER {
        pub EncryptionOperation: u32,
        pub Private: [u8; 1usize],
    }
    pub type ENCRYPTION_BUFFER = root::_ENCRYPTION_BUFFER;
    pub type PENCRYPTION_BUFFER = *mut root::_ENCRYPTION_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DECRYPTION_STATUS_BUFFER {
        pub NoEncryptedStreams: root::BOOLEAN,
    }
    pub type DECRYPTION_STATUS_BUFFER = root::_DECRYPTION_STATUS_BUFFER;
    pub type PDECRYPTION_STATUS_BUFFER = *mut root::_DECRYPTION_STATUS_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REQUEST_RAW_ENCRYPTED_DATA {
        pub FileOffset: root::LONGLONG,
        pub Length: u32,
    }
    pub type REQUEST_RAW_ENCRYPTED_DATA = root::_REQUEST_RAW_ENCRYPTED_DATA;
    pub type PREQUEST_RAW_ENCRYPTED_DATA = *mut root::_REQUEST_RAW_ENCRYPTED_DATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTED_DATA_INFO {
        pub StartingFileOffset: root::DWORDLONG,
        pub OutputBufferOffset: u32,
        pub BytesWithinFileSize: u32,
        pub BytesWithinValidDataLength: u32,
        pub CompressionFormat: u16,
        pub DataUnitShift: u8,
        pub ChunkShift: u8,
        pub ClusterShift: u8,
        pub EncryptionFormat: u8,
        pub NumberOfDataBlocks: u16,
        pub DataBlockSize: [u32; 1usize],
    }
    pub type ENCRYPTED_DATA_INFO = root::_ENCRYPTED_DATA_INFO;
    pub type PENCRYPTED_DATA_INFO = *mut root::_ENCRYPTED_DATA_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _EXTENDED_ENCRYPTED_DATA_INFO {
        pub ExtendedCode: u32,
        pub Length: u32,
        pub Flags: u32,
        pub Reserved: u32,
    }
    pub type EXTENDED_ENCRYPTED_DATA_INFO = root::_EXTENDED_ENCRYPTED_DATA_INFO;
    pub type PEXTENDED_ENCRYPTED_DATA_INFO = *mut root::_EXTENDED_ENCRYPTED_DATA_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PLEX_READ_DATA_REQUEST {
        pub ByteOffset: root::LARGE_INTEGER,
        pub ByteLength: u32,
        pub PlexNumber: u32,
    }
    pub type PLEX_READ_DATA_REQUEST = root::_PLEX_READ_DATA_REQUEST;
    pub type PPLEX_READ_DATA_REQUEST = *mut root::_PLEX_READ_DATA_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SI_COPYFILE {
        pub SourceFileNameLength: u32,
        pub DestinationFileNameLength: u32,
        pub Flags: u32,
        pub FileNameBuffer: [u16; 1usize],
    }
    pub type SI_COPYFILE = root::_SI_COPYFILE;
    pub type PSI_COPYFILE = *mut root::_SI_COPYFILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_MAKE_COMPATIBLE_BUFFER {
        pub CloseDisc: root::BOOLEAN,
    }
    pub type FILE_MAKE_COMPATIBLE_BUFFER = root::_FILE_MAKE_COMPATIBLE_BUFFER;
    pub type PFILE_MAKE_COMPATIBLE_BUFFER = *mut root::_FILE_MAKE_COMPATIBLE_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_SET_DEFECT_MGMT_BUFFER {
        pub Disable: root::BOOLEAN,
    }
    pub type FILE_SET_DEFECT_MGMT_BUFFER = root::_FILE_SET_DEFECT_MGMT_BUFFER;
    pub type PFILE_SET_DEFECT_MGMT_BUFFER = *mut root::_FILE_SET_DEFECT_MGMT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_QUERY_SPARING_BUFFER {
        pub SparingUnitBytes: u32,
        pub SoftwareSparing: root::BOOLEAN,
        pub TotalSpareBlocks: u32,
        pub FreeSpareBlocks: u32,
    }
    pub type FILE_QUERY_SPARING_BUFFER = root::_FILE_QUERY_SPARING_BUFFER;
    pub type PFILE_QUERY_SPARING_BUFFER = *mut root::_FILE_QUERY_SPARING_BUFFER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
        pub DirectoryCount: root::LARGE_INTEGER,
        pub FileCount: root::LARGE_INTEGER,
        pub FsFormatMajVersion: u16,
        pub FsFormatMinVersion: u16,
        pub FsFormatName: [u16; 12usize],
        pub FormatTime: root::LARGE_INTEGER,
        pub LastUpdateTime: root::LARGE_INTEGER,
        pub CopyrightInfo: [u16; 34usize],
        pub AbstractInfo: [u16; 34usize],
        pub FormattingImplementationInfo: [u16; 34usize],
        pub LastModifyingImplementationInfo: [u16; 34usize],
    }
    pub type FILE_QUERY_ON_DISK_VOL_INFO_BUFFER = root::_FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
    pub type PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = *mut root::_FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
    pub type CLSN = root::DWORDLONG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
        pub Hint1: root::DWORDLONG,
        pub Hint2: root::DWORDLONG,
        pub Clsn: root::CLSN,
        pub Status: u32,
    }
    pub type FILE_INITIATE_REPAIR_OUTPUT_BUFFER = root::_FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
    pub type PFILE_INITIATE_REPAIR_OUTPUT_BUFFER = *mut root::_FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
    pub const _SHRINK_VOLUME_REQUEST_TYPES_ShrinkPrepare: root::_SHRINK_VOLUME_REQUEST_TYPES = 1;
    pub const _SHRINK_VOLUME_REQUEST_TYPES_ShrinkCommit: root::_SHRINK_VOLUME_REQUEST_TYPES = 2;
    pub const _SHRINK_VOLUME_REQUEST_TYPES_ShrinkAbort: root::_SHRINK_VOLUME_REQUEST_TYPES = 3;
    pub type _SHRINK_VOLUME_REQUEST_TYPES = i32;
    pub use self::super::root::_SHRINK_VOLUME_REQUEST_TYPES as SHRINK_VOLUME_REQUEST_TYPES;
    pub type PSHRINK_VOLUME_REQUEST_TYPES = *mut root::_SHRINK_VOLUME_REQUEST_TYPES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHRINK_VOLUME_INFORMATION {
        pub ShrinkRequestType: root::SHRINK_VOLUME_REQUEST_TYPES,
        pub Flags: root::DWORDLONG,
        pub NewNumberOfSectors: root::LONGLONG,
    }
    pub type SHRINK_VOLUME_INFORMATION = root::_SHRINK_VOLUME_INFORMATION;
    pub type PSHRINK_VOLUME_INFORMATION = *mut root::_SHRINK_VOLUME_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_MODIFY_RM {
        pub Flags: u32,
        pub LogContainerCountMax: u32,
        pub LogContainerCountMin: u32,
        pub LogContainerCount: u32,
        pub LogGrowthIncrement: u32,
        pub LogAutoShrinkPercentage: u32,
        pub Reserved: root::DWORDLONG,
        pub LoggingMode: u16,
    }
    pub type TXFS_MODIFY_RM = root::_TXFS_MODIFY_RM;
    pub type PTXFS_MODIFY_RM = *mut root::_TXFS_MODIFY_RM;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TXFS_QUERY_RM_INFORMATION {
        pub BytesRequired: u32,
        pub TailLsn: root::DWORDLONG,
        pub CurrentLsn: root::DWORDLONG,
        pub ArchiveTailLsn: root::DWORDLONG,
        pub LogContainerSize: root::DWORDLONG,
        pub HighestVirtualClock: root::LARGE_INTEGER,
        pub LogContainerCount: u32,
        pub LogContainerCountMax: u32,
        pub LogContainerCountMin: u32,
        pub LogGrowthIncrement: u32,
        pub LogAutoShrinkPercentage: u32,
        pub Flags: u32,
        pub LoggingMode: u16,
        pub Reserved: u16,
        pub RmState: u32,
        pub LogCapacity: root::DWORDLONG,
        pub LogFree: root::DWORDLONG,
        pub TopsSize: root::DWORDLONG,
        pub TopsUsed: root::DWORDLONG,
        pub TransactionCount: root::DWORDLONG,
        pub OnePCCount: root::DWORDLONG,
        pub TwoPCCount: root::DWORDLONG,
        pub NumberLogFileFull: root::DWORDLONG,
        pub OldestTransactionAge: root::DWORDLONG,
        pub RMName: root::GUID,
        pub TmLogPathOffset: u32,
    }
    pub type TXFS_QUERY_RM_INFORMATION = root::_TXFS_QUERY_RM_INFORMATION;
    pub type PTXFS_QUERY_RM_INFORMATION = *mut root::_TXFS_QUERY_RM_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
        pub LastVirtualClock: root::LARGE_INTEGER,
        pub LastRedoLsn: root::DWORDLONG,
        pub HighestRecoveryLsn: root::DWORDLONG,
        pub Flags: u32,
    }
    pub type TXFS_ROLLFORWARD_REDO_INFORMATION = root::_TXFS_ROLLFORWARD_REDO_INFORMATION;
    pub type PTXFS_ROLLFORWARD_REDO_INFORMATION = *mut root::_TXFS_ROLLFORWARD_REDO_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_START_RM_INFORMATION {
        pub Flags: u32,
        pub LogContainerSize: root::DWORDLONG,
        pub LogContainerCountMin: u32,
        pub LogContainerCountMax: u32,
        pub LogGrowthIncrement: u32,
        pub LogAutoShrinkPercentage: u32,
        pub TmLogPathOffset: u32,
        pub TmLogPathLength: u16,
        pub LoggingMode: u16,
        pub LogPathLength: u16,
        pub Reserved: u16,
        pub LogPath: [u16; 1usize],
    }
    pub type TXFS_START_RM_INFORMATION = root::_TXFS_START_RM_INFORMATION;
    pub type PTXFS_START_RM_INFORMATION = *mut root::_TXFS_START_RM_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_GET_METADATA_INFO_OUT {
        pub TxfFileId: root::_TXFS_GET_METADATA_INFO_OUT__bindgen_ty_1,
        pub LockingTransaction: root::GUID,
        pub LastLsn: root::DWORDLONG,
        pub TransactionState: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_GET_METADATA_INFO_OUT__bindgen_ty_1 {
        pub LowPart: root::LONGLONG,
        pub HighPart: root::LONGLONG,
    }
    pub type TXFS_GET_METADATA_INFO_OUT = root::_TXFS_GET_METADATA_INFO_OUT;
    pub type PTXFS_GET_METADATA_INFO_OUT = *mut root::_TXFS_GET_METADATA_INFO_OUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
        pub Offset: root::DWORDLONG,
        pub NameFlags: u32,
        pub FileId: root::LONGLONG,
        pub Reserved1: u32,
        pub Reserved2: u32,
        pub Reserved3: root::LONGLONG,
        pub FileName: [u16; 1usize],
    }
    pub type TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY =
        root::_TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
    pub type PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY =
        *mut root::_TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
        pub KtmTransaction: root::GUID,
        pub NumberOfFiles: root::DWORDLONG,
        pub BufferSizeRequired: root::DWORDLONG,
        pub Offset: root::DWORDLONG,
    }
    pub type TXFS_LIST_TRANSACTION_LOCKED_FILES = root::_TXFS_LIST_TRANSACTION_LOCKED_FILES;
    pub type PTXFS_LIST_TRANSACTION_LOCKED_FILES = *mut root::_TXFS_LIST_TRANSACTION_LOCKED_FILES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_LIST_TRANSACTIONS_ENTRY {
        pub TransactionId: root::GUID,
        pub TransactionState: u32,
        pub Reserved1: u32,
        pub Reserved2: u32,
        pub Reserved3: root::LONGLONG,
    }
    pub type TXFS_LIST_TRANSACTIONS_ENTRY = root::_TXFS_LIST_TRANSACTIONS_ENTRY;
    pub type PTXFS_LIST_TRANSACTIONS_ENTRY = *mut root::_TXFS_LIST_TRANSACTIONS_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_LIST_TRANSACTIONS {
        pub NumberOfTransactions: root::DWORDLONG,
        pub BufferSizeRequired: root::DWORDLONG,
    }
    pub type TXFS_LIST_TRANSACTIONS = root::_TXFS_LIST_TRANSACTIONS;
    pub type PTXFS_LIST_TRANSACTIONS = *mut root::_TXFS_LIST_TRANSACTIONS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _TXFS_READ_BACKUP_INFORMATION_OUT {
        pub __bindgen_anon_1: root::_TXFS_READ_BACKUP_INFORMATION_OUT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _TXFS_READ_BACKUP_INFORMATION_OUT__bindgen_ty_1 {
        pub BufferLength: u32,
        pub Buffer: [u8; 1usize],
    }
    pub type TXFS_READ_BACKUP_INFORMATION_OUT = root::_TXFS_READ_BACKUP_INFORMATION_OUT;
    pub type PTXFS_READ_BACKUP_INFORMATION_OUT = *mut root::_TXFS_READ_BACKUP_INFORMATION_OUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_WRITE_BACKUP_INFORMATION {
        pub Buffer: [u8; 1usize],
    }
    pub type TXFS_WRITE_BACKUP_INFORMATION = root::_TXFS_WRITE_BACKUP_INFORMATION;
    pub type PTXFS_WRITE_BACKUP_INFORMATION = *mut root::_TXFS_WRITE_BACKUP_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_GET_TRANSACTED_VERSION {
        pub ThisBaseVersion: u32,
        pub LatestVersion: u32,
        pub ThisMiniVersion: u16,
        pub FirstMiniVersion: u16,
        pub LatestMiniVersion: u16,
    }
    pub type TXFS_GET_TRANSACTED_VERSION = root::_TXFS_GET_TRANSACTED_VERSION;
    pub type PTXFS_GET_TRANSACTED_VERSION = *mut root::_TXFS_GET_TRANSACTED_VERSION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_SAVEPOINT_INFORMATION {
        pub KtmTransaction: root::HANDLE,
        pub ActionCode: u32,
        pub SavepointId: u32,
    }
    pub type TXFS_SAVEPOINT_INFORMATION = root::_TXFS_SAVEPOINT_INFORMATION;
    pub type PTXFS_SAVEPOINT_INFORMATION = *mut root::_TXFS_SAVEPOINT_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_CREATE_MINIVERSION_INFO {
        pub StructureVersion: u16,
        pub StructureLength: u16,
        pub BaseVersion: u32,
        pub MiniVersion: u16,
    }
    pub type TXFS_CREATE_MINIVERSION_INFO = root::_TXFS_CREATE_MINIVERSION_INFO;
    pub type PTXFS_CREATE_MINIVERSION_INFO = *mut root::_TXFS_CREATE_MINIVERSION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _TXFS_TRANSACTION_ACTIVE_INFO {
        pub TransactionsActiveAtSnapshot: root::BOOLEAN,
    }
    pub type TXFS_TRANSACTION_ACTIVE_INFO = root::_TXFS_TRANSACTION_ACTIVE_INFO;
    pub type PTXFS_TRANSACTION_ACTIVE_INFO = *mut root::_TXFS_TRANSACTION_ACTIVE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BOOT_AREA_INFO {
        pub BootSectorCount: u32,
        pub BootSectors: [root::_BOOT_AREA_INFO__bindgen_ty_1; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BOOT_AREA_INFO__bindgen_ty_1 {
        pub Offset: root::LARGE_INTEGER,
    }
    pub type BOOT_AREA_INFO = root::_BOOT_AREA_INFO;
    pub type PBOOT_AREA_INFO = *mut root::_BOOT_AREA_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _RETRIEVAL_POINTER_BASE {
        pub FileAreaOffset: root::LARGE_INTEGER,
    }
    pub type RETRIEVAL_POINTER_BASE = root::_RETRIEVAL_POINTER_BASE;
    pub type PRETRIEVAL_POINTER_BASE = *mut root::_RETRIEVAL_POINTER_BASE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
        pub VolumeFlags: u32,
        pub FlagMask: u32,
        pub Version: u32,
        pub Reserved: u32,
    }
    pub type FILE_FS_PERSISTENT_VOLUME_INFORMATION = root::_FILE_FS_PERSISTENT_VOLUME_INFORMATION;
    pub type PFILE_FS_PERSISTENT_VOLUME_INFORMATION =
        *mut root::_FILE_FS_PERSISTENT_VOLUME_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
        pub FileSystem: [i8; 9usize],
    }
    pub type FILE_SYSTEM_RECOGNITION_INFORMATION = root::_FILE_SYSTEM_RECOGNITION_INFORMATION;
    pub type PFILE_SYSTEM_RECOGNITION_INFORMATION = *mut root::_FILE_SYSTEM_RECOGNITION_INFORMATION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REQUEST_OPLOCK_INPUT_BUFFER {
        pub StructureVersion: u16,
        pub StructureLength: u16,
        pub RequestedOplockLevel: u32,
        pub Flags: u32,
    }
    pub type REQUEST_OPLOCK_INPUT_BUFFER = root::_REQUEST_OPLOCK_INPUT_BUFFER;
    pub type PREQUEST_OPLOCK_INPUT_BUFFER = *mut root::_REQUEST_OPLOCK_INPUT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
        pub StructureVersion: u16,
        pub StructureLength: u16,
        pub OriginalOplockLevel: u32,
        pub NewOplockLevel: u32,
        pub Flags: u32,
        pub AccessMode: root::ACCESS_MASK,
        pub ShareMode: u16,
    }
    pub type REQUEST_OPLOCK_OUTPUT_BUFFER = root::_REQUEST_OPLOCK_OUTPUT_BUFFER;
    pub type PREQUEST_OPLOCK_OUTPUT_BUFFER = *mut root::_REQUEST_OPLOCK_OUTPUT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VIRTUAL_STORAGE_TYPE {
        pub DeviceId: u32,
        pub VendorId: root::GUID,
    }
    pub type VIRTUAL_STORAGE_TYPE = root::_VIRTUAL_STORAGE_TYPE;
    pub type PVIRTUAL_STORAGE_TYPE = *mut root::_VIRTUAL_STORAGE_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
        pub RequestLevel: u32,
        pub RequestFlags: u32,
    }
    pub type STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = root::_STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
    pub type PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST =
        *mut root::_STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
        pub EntryLength: u32,
        pub DependencyTypeFlags: u32,
        pub ProviderSpecificFlags: u32,
        pub VirtualStorageType: root::VIRTUAL_STORAGE_TYPE,
    }
    pub type STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY =
        root::_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
    pub type PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY =
        *mut root::_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
        pub EntryLength: u32,
        pub DependencyTypeFlags: u32,
        pub ProviderSpecificFlags: u32,
        pub VirtualStorageType: root::VIRTUAL_STORAGE_TYPE,
        pub AncestorLevel: u32,
        pub HostVolumeNameOffset: u32,
        pub HostVolumeNameSize: u32,
        pub DependentVolumeNameOffset: u32,
        pub DependentVolumeNameSize: u32,
        pub RelativePathOffset: u32,
        pub RelativePathSize: u32,
        pub DependentDeviceNameOffset: u32,
        pub DependentDeviceNameSize: u32,
    }
    pub type STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY =
        root::_STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
    pub type PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY =
        *mut root::_STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
    #[repr(C)]
    pub struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
        pub ResponseLevel: u32,
        pub NumberEntries: u32,
        pub __bindgen_anon_1: root::_STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE__bindgen_ty_1 {
        pub Lev1Depends:
            root::__BindgenUnionField<[root::STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY; 0usize]>,
        pub Lev2Depends:
            root::__BindgenUnionField<[root::STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY; 0usize]>,
        pub bindgen_union_field: u32,
    }
    pub type STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE =
        root::_STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
    pub type PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE =
        *mut root::_STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_CHANGE_MACHINE_SID_INPUT {
        pub CurrentMachineSIDOffset: u16,
        pub CurrentMachineSIDLength: u16,
        pub NewMachineSIDOffset: u16,
        pub NewMachineSIDLength: u16,
    }
    pub type SD_CHANGE_MACHINE_SID_INPUT = root::_SD_CHANGE_MACHINE_SID_INPUT;
    pub type PSD_CHANGE_MACHINE_SID_INPUT = *mut root::_SD_CHANGE_MACHINE_SID_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_CHANGE_MACHINE_SID_OUTPUT {
        pub NumSDChangedSuccess: root::DWORDLONG,
        pub NumSDChangedFail: root::DWORDLONG,
        pub NumSDUnused: root::DWORDLONG,
        pub NumSDTotal: root::DWORDLONG,
        pub NumMftSDChangedSuccess: root::DWORDLONG,
        pub NumMftSDChangedFail: root::DWORDLONG,
        pub NumMftSDTotal: root::DWORDLONG,
    }
    pub type SD_CHANGE_MACHINE_SID_OUTPUT = root::_SD_CHANGE_MACHINE_SID_OUTPUT;
    pub type PSD_CHANGE_MACHINE_SID_OUTPUT = *mut root::_SD_CHANGE_MACHINE_SID_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_QUERY_STATS_INPUT {
        pub Reserved: u32,
    }
    pub type SD_QUERY_STATS_INPUT = root::_SD_QUERY_STATS_INPUT;
    pub type PSD_QUERY_STATS_INPUT = *mut root::_SD_QUERY_STATS_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_QUERY_STATS_OUTPUT {
        pub SdsStreamSize: root::DWORDLONG,
        pub SdsAllocationSize: root::DWORDLONG,
        pub SiiStreamSize: root::DWORDLONG,
        pub SiiAllocationSize: root::DWORDLONG,
        pub SdhStreamSize: root::DWORDLONG,
        pub SdhAllocationSize: root::DWORDLONG,
        pub NumSDTotal: root::DWORDLONG,
        pub NumSDUnused: root::DWORDLONG,
    }
    pub type SD_QUERY_STATS_OUTPUT = root::_SD_QUERY_STATS_OUTPUT;
    pub type PSD_QUERY_STATS_OUTPUT = *mut root::_SD_QUERY_STATS_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_ENUM_SDS_INPUT {
        pub StartingOffset: root::DWORDLONG,
        pub MaxSDEntriesToReturn: root::DWORDLONG,
    }
    pub type SD_ENUM_SDS_INPUT = root::_SD_ENUM_SDS_INPUT;
    pub type PSD_ENUM_SDS_INPUT = *mut root::_SD_ENUM_SDS_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_ENUM_SDS_ENTRY {
        pub Hash: u32,
        pub SecurityId: u32,
        pub Offset: root::DWORDLONG,
        pub Length: u32,
        pub Descriptor: [u8; 1usize],
    }
    pub type SD_ENUM_SDS_ENTRY = root::_SD_ENUM_SDS_ENTRY;
    pub type PSD_ENUM_SDS_ENTRY = *mut root::_SD_ENUM_SDS_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SD_ENUM_SDS_OUTPUT {
        pub NextOffset: root::DWORDLONG,
        pub NumSDEntriesReturned: root::DWORDLONG,
        pub NumSDBytesReturned: root::DWORDLONG,
        pub SDEntry: [root::SD_ENUM_SDS_ENTRY; 1usize],
    }
    pub type SD_ENUM_SDS_OUTPUT = root::_SD_ENUM_SDS_OUTPUT;
    pub type PSD_ENUM_SDS_OUTPUT = *mut root::_SD_ENUM_SDS_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SD_GLOBAL_CHANGE_INPUT {
        pub Flags: u32,
        pub ChangeType: u32,
        pub __bindgen_anon_1: root::_SD_GLOBAL_CHANGE_INPUT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SD_GLOBAL_CHANGE_INPUT__bindgen_ty_1 {
        pub SdChange: root::SD_CHANGE_MACHINE_SID_INPUT,
        pub SdQueryStats: root::SD_QUERY_STATS_INPUT,
        pub SdEnumSds: root::SD_ENUM_SDS_INPUT,
    }
    pub type SD_GLOBAL_CHANGE_INPUT = root::_SD_GLOBAL_CHANGE_INPUT;
    pub type PSD_GLOBAL_CHANGE_INPUT = *mut root::_SD_GLOBAL_CHANGE_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SD_GLOBAL_CHANGE_OUTPUT {
        pub Flags: u32,
        pub ChangeType: u32,
        pub __bindgen_anon_1: root::_SD_GLOBAL_CHANGE_OUTPUT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SD_GLOBAL_CHANGE_OUTPUT__bindgen_ty_1 {
        pub SdChange: root::SD_CHANGE_MACHINE_SID_OUTPUT,
        pub SdQueryStats: root::SD_QUERY_STATS_OUTPUT,
        pub SdEnumSds: root::SD_ENUM_SDS_OUTPUT,
    }
    pub type SD_GLOBAL_CHANGE_OUTPUT = root::_SD_GLOBAL_CHANGE_OUTPUT;
    pub type PSD_GLOBAL_CHANGE_OUTPUT = *mut root::_SD_GLOBAL_CHANGE_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
        pub Flags: u32,
        pub NumberOfClusters: u32,
        pub Cluster: [root::LARGE_INTEGER; 1usize],
    }
    pub type LOOKUP_STREAM_FROM_CLUSTER_INPUT = root::_LOOKUP_STREAM_FROM_CLUSTER_INPUT;
    pub type PLOOKUP_STREAM_FROM_CLUSTER_INPUT = *mut root::_LOOKUP_STREAM_FROM_CLUSTER_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
        pub Offset: u32,
        pub NumberOfMatches: u32,
        pub BufferSizeRequired: u32,
    }
    pub type LOOKUP_STREAM_FROM_CLUSTER_OUTPUT = root::_LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
    pub type PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT = *mut root::_LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
        pub OffsetToNext: u32,
        pub Flags: u32,
        pub Reserved: root::LARGE_INTEGER,
        pub Cluster: root::LARGE_INTEGER,
        pub FileName: [u16; 1usize],
    }
    pub type LOOKUP_STREAM_FROM_CLUSTER_ENTRY = root::_LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
    pub type PLOOKUP_STREAM_FROM_CLUSTER_ENTRY = *mut root::_LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_TYPE_NOTIFICATION_INPUT {
        pub Flags: u32,
        pub NumFileTypeIDs: u32,
        pub FileTypeID: [root::GUID; 1usize],
    }
    pub type FILE_TYPE_NOTIFICATION_INPUT = root::_FILE_TYPE_NOTIFICATION_INPUT;
    pub type PFILE_TYPE_NOTIFICATION_INPUT = *mut root::_FILE_TYPE_NOTIFICATION_INPUT;
    extern "C" {
        pub static FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE: root::GUID;
    }
    extern "C" {
        pub static FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE: root::GUID;
    }
    extern "C" {
        pub static FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE: root::GUID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_MGMT_LOCK {
        pub Flags: u32,
    }
    pub type CSV_MGMT_LOCK = root::_CSV_MGMT_LOCK;
    pub type PCSV_MGMT_LOCK = *mut root::_CSV_MGMT_LOCK;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CSV_NAMESPACE_INFO {
        pub Version: u32,
        pub DeviceNumber: u32,
        pub StartingOffset: root::LARGE_INTEGER,
        pub SectorSize: u32,
    }
    pub type CSV_NAMESPACE_INFO = root::_CSV_NAMESPACE_INFO;
    pub type PCSV_NAMESPACE_INFO = *mut root::_CSV_NAMESPACE_INFO;
    pub const _CSV_CONTROL_OP_CsvControlStartRedirectFile: root::_CSV_CONTROL_OP = 2;
    pub const _CSV_CONTROL_OP_CsvControlStopRedirectFile: root::_CSV_CONTROL_OP = 3;
    pub const _CSV_CONTROL_OP_CsvControlQueryRedirectState: root::_CSV_CONTROL_OP = 4;
    pub const _CSV_CONTROL_OP_CsvControlQueryFileRevision: root::_CSV_CONTROL_OP = 6;
    pub const _CSV_CONTROL_OP_CsvControlQueryMdsPath: root::_CSV_CONTROL_OP = 8;
    pub const _CSV_CONTROL_OP_CsvControlQueryFileRevisionFileId128: root::_CSV_CONTROL_OP = 9;
    pub const _CSV_CONTROL_OP_CsvControlQueryVolumeRedirectState: root::_CSV_CONTROL_OP = 10;
    pub const _CSV_CONTROL_OP_CsvControlEnableUSNRangeModificationTracking: root::_CSV_CONTROL_OP =
        13;
    pub const _CSV_CONTROL_OP_CsvControlMarkHandleLocalVolumeMount: root::_CSV_CONTROL_OP = 14;
    pub const _CSV_CONTROL_OP_CsvControlUnmarkHandleLocalVolumeMount: root::_CSV_CONTROL_OP = 15;
    pub const _CSV_CONTROL_OP_CsvControlGetCsvFsMdsPathV2: root::_CSV_CONTROL_OP = 18;
    pub const _CSV_CONTROL_OP_CsvControlDisableCaching: root::_CSV_CONTROL_OP = 19;
    pub const _CSV_CONTROL_OP_CsvControlEnableCaching: root::_CSV_CONTROL_OP = 20;
    pub const _CSV_CONTROL_OP_CsvControlStartForceDFO: root::_CSV_CONTROL_OP = 21;
    pub const _CSV_CONTROL_OP_CsvControlStopForceDFO: root::_CSV_CONTROL_OP = 22;
    pub type _CSV_CONTROL_OP = i32;
    pub use self::super::root::_CSV_CONTROL_OP as CSV_CONTROL_OP;
    pub type PCSV_CONTROL_OP = *mut root::_CSV_CONTROL_OP;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_CONTROL_PARAM {
        pub Operation: root::CSV_CONTROL_OP,
        pub Unused: root::LONGLONG,
    }
    pub type CSV_CONTROL_PARAM = root::_CSV_CONTROL_PARAM;
    pub type PCSV_CONTROL_PARAM = *mut root::_CSV_CONTROL_PARAM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_REDIRECT_STATE {
        pub MdsNodeId: u32,
        pub DsNodeId: u32,
        pub FileRedirected: root::BOOLEAN,
    }
    pub type CSV_QUERY_REDIRECT_STATE = root::_CSV_QUERY_REDIRECT_STATE;
    pub type PCSV_QUERY_REDIRECT_STATE = *mut root::_CSV_QUERY_REDIRECT_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_FILE_REVISION {
        pub FileId: root::LONGLONG,
        pub FileRevision: [root::LONGLONG; 3usize],
    }
    pub type CSV_QUERY_FILE_REVISION = root::_CSV_QUERY_FILE_REVISION;
    pub type PCSV_QUERY_FILE_REVISION = *mut root::_CSV_QUERY_FILE_REVISION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
        pub FileId: root::FILE_ID_128,
        pub FileRevision: [root::LONGLONG; 3usize],
    }
    pub type CSV_QUERY_FILE_REVISION_FILE_ID_128 = root::_CSV_QUERY_FILE_REVISION_FILE_ID_128;
    pub type PCSV_QUERY_FILE_REVISION_FILE_ID_128 = *mut root::_CSV_QUERY_FILE_REVISION_FILE_ID_128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_MDS_PATH {
        pub MdsNodeId: u32,
        pub DsNodeId: u32,
        pub PathLength: u32,
        pub Path: [u16; 1usize],
    }
    pub type CSV_QUERY_MDS_PATH = root::_CSV_QUERY_MDS_PATH;
    pub type PCSV_QUERY_MDS_PATH = *mut root::_CSV_QUERY_MDS_PATH;
    pub const _CSVFS_DISK_CONNECTIVITY_CsvFsDiskConnectivityNone: root::_CSVFS_DISK_CONNECTIVITY =
        0;
    pub const _CSVFS_DISK_CONNECTIVITY_CsvFsDiskConnectivityMdsNodeOnly:
        root::_CSVFS_DISK_CONNECTIVITY = 1;
    pub const _CSVFS_DISK_CONNECTIVITY_CsvFsDiskConnectivitySubsetOfNodes:
        root::_CSVFS_DISK_CONNECTIVITY = 2;
    pub const _CSVFS_DISK_CONNECTIVITY_CsvFsDiskConnectivityAllNodes:
        root::_CSVFS_DISK_CONNECTIVITY = 3;
    pub type _CSVFS_DISK_CONNECTIVITY = i32;
    pub use self::super::root::_CSVFS_DISK_CONNECTIVITY as CSVFS_DISK_CONNECTIVITY;
    pub type PCSVFS_DISK_CONNECTIVITY = *mut root::_CSVFS_DISK_CONNECTIVITY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
        pub MdsNodeId: u32,
        pub DsNodeId: u32,
        pub IsDiskConnected: root::BOOLEAN,
        pub ClusterEnableDirectIo: root::BOOLEAN,
        pub DiskConnectivity: root::CSVFS_DISK_CONNECTIVITY,
    }
    pub type CSV_QUERY_VOLUME_REDIRECT_STATE = root::_CSV_QUERY_VOLUME_REDIRECT_STATE;
    pub type PCSV_QUERY_VOLUME_REDIRECT_STATE = *mut root::_CSV_QUERY_VOLUME_REDIRECT_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_MDS_PATH_V2 {
        pub Version: root::LONGLONG,
        pub RequiredSize: u32,
        pub MdsNodeId: u32,
        pub DsNodeId: u32,
        pub Flags: u32,
        pub DiskConnectivity: root::CSVFS_DISK_CONNECTIVITY,
        pub VolumeId: root::GUID,
        pub IpAddressOffset: u32,
        pub IpAddressLength: u32,
        pub PathOffset: u32,
        pub PathLength: u32,
    }
    pub type CSV_QUERY_MDS_PATH_V2 = root::_CSV_QUERY_MDS_PATH_V2;
    pub type PCSV_QUERY_MDS_PATH_V2 = *mut root::_CSV_QUERY_MDS_PATH_V2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
        pub VetoedFromAltitudeIntegral: root::DWORDLONG,
        pub VetoedFromAltitudeDecimal: root::DWORDLONG,
        pub Reason: [u16; 256usize],
    }
    pub type CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = root::_CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
    pub type PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT =
        *mut root::_CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
    pub const _STORAGE_RESERVE_ID_StorageReserveIdNone: root::_STORAGE_RESERVE_ID = 0;
    pub const _STORAGE_RESERVE_ID_StorageReserveIdHard: root::_STORAGE_RESERVE_ID = 1;
    pub const _STORAGE_RESERVE_ID_StorageReserveIdSoft: root::_STORAGE_RESERVE_ID = 2;
    pub const _STORAGE_RESERVE_ID_StorageReserveIdUpdateScratch: root::_STORAGE_RESERVE_ID = 3;
    pub const _STORAGE_RESERVE_ID_StorageReserveIdMax: root::_STORAGE_RESERVE_ID = 4;
    pub type _STORAGE_RESERVE_ID = i32;
    pub use self::super::root::_STORAGE_RESERVE_ID as STORAGE_RESERVE_ID;
    pub type PSTORAGE_RESERVE_ID = *mut root::_STORAGE_RESERVE_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CSV_IS_OWNED_BY_CSVFS {
        pub OwnedByCSVFS: root::BOOLEAN,
    }
    pub type CSV_IS_OWNED_BY_CSVFS = root::_CSV_IS_OWNED_BY_CSVFS;
    pub type PCSV_IS_OWNED_BY_CSVFS = *mut root::_CSV_IS_OWNED_BY_CSVFS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_LEVEL_TRIM_RANGE {
        pub Offset: root::DWORDLONG,
        pub Length: root::DWORDLONG,
    }
    pub type FILE_LEVEL_TRIM_RANGE = root::_FILE_LEVEL_TRIM_RANGE;
    pub type PFILE_LEVEL_TRIM_RANGE = *mut root::_FILE_LEVEL_TRIM_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_LEVEL_TRIM {
        pub Key: u32,
        pub NumRanges: u32,
        pub Ranges: [root::FILE_LEVEL_TRIM_RANGE; 1usize],
    }
    pub type FILE_LEVEL_TRIM = root::_FILE_LEVEL_TRIM;
    pub type PFILE_LEVEL_TRIM = *mut root::_FILE_LEVEL_TRIM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_LEVEL_TRIM_OUTPUT {
        pub NumRangesProcessed: u32,
    }
    pub type FILE_LEVEL_TRIM_OUTPUT = root::_FILE_LEVEL_TRIM_OUTPUT;
    pub type PFILE_LEVEL_TRIM_OUTPUT = *mut root::_FILE_LEVEL_TRIM_OUTPUT;
    pub const _QUERY_FILE_LAYOUT_FILTER_TYPE_QUERY_FILE_LAYOUT_FILTER_TYPE_NONE:
        root::_QUERY_FILE_LAYOUT_FILTER_TYPE = 0;
    pub const _QUERY_FILE_LAYOUT_FILTER_TYPE_QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS:
        root::_QUERY_FILE_LAYOUT_FILTER_TYPE = 1;
    pub const _QUERY_FILE_LAYOUT_FILTER_TYPE_QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID:
        root::_QUERY_FILE_LAYOUT_FILTER_TYPE = 2;
    pub const _QUERY_FILE_LAYOUT_FILTER_TYPE_QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID:
        root::_QUERY_FILE_LAYOUT_FILTER_TYPE = 3;
    pub const _QUERY_FILE_LAYOUT_FILTER_TYPE_QUERY_FILE_LAYOUT_NUM_FILTER_TYPES:
        root::_QUERY_FILE_LAYOUT_FILTER_TYPE = 4;
    pub type _QUERY_FILE_LAYOUT_FILTER_TYPE = i32;
    pub use self::super::root::_QUERY_FILE_LAYOUT_FILTER_TYPE as QUERY_FILE_LAYOUT_FILTER_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _CLUSTER_RANGE {
        pub StartingCluster: root::LARGE_INTEGER,
        pub ClusterCount: root::LARGE_INTEGER,
    }
    pub type CLUSTER_RANGE = root::_CLUSTER_RANGE;
    pub type PCLUSTER_RANGE = *mut root::_CLUSTER_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REFERENCE_RANGE {
        pub StartingFileReferenceNumber: root::DWORDLONG,
        pub EndingFileReferenceNumber: root::DWORDLONG,
    }
    pub type FILE_REFERENCE_RANGE = root::_FILE_REFERENCE_RANGE;
    pub type PFILE_REFERENCE_RANGE = *mut root::_FILE_REFERENCE_RANGE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _QUERY_FILE_LAYOUT_INPUT {
        pub __bindgen_anon_1: root::_QUERY_FILE_LAYOUT_INPUT__bindgen_ty_1,
        pub Flags: u32,
        pub FilterType: root::QUERY_FILE_LAYOUT_FILTER_TYPE,
        pub Reserved: u32,
        pub Filter: root::_QUERY_FILE_LAYOUT_INPUT__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _QUERY_FILE_LAYOUT_INPUT__bindgen_ty_1 {
        pub FilterEntryCount: u32,
        pub NumberOfPairs: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _QUERY_FILE_LAYOUT_INPUT__bindgen_ty_2 {
        pub ClusterRanges: [root::CLUSTER_RANGE; 1usize],
        pub FileReferenceRanges: [root::FILE_REFERENCE_RANGE; 1usize],
        pub StorageReserveIds: [root::STORAGE_RESERVE_ID; 1usize],
    }
    pub type QUERY_FILE_LAYOUT_INPUT = root::_QUERY_FILE_LAYOUT_INPUT;
    pub type PQUERY_FILE_LAYOUT_INPUT = *mut root::_QUERY_FILE_LAYOUT_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_FILE_LAYOUT_OUTPUT {
        pub FileEntryCount: u32,
        pub FirstFileOffset: u32,
        pub Flags: u32,
        pub Reserved: u32,
    }
    pub type QUERY_FILE_LAYOUT_OUTPUT = root::_QUERY_FILE_LAYOUT_OUTPUT;
    pub type PQUERY_FILE_LAYOUT_OUTPUT = *mut root::_QUERY_FILE_LAYOUT_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_LAYOUT_ENTRY {
        pub Version: u32,
        pub NextFileOffset: u32,
        pub Flags: u32,
        pub FileAttributes: u32,
        pub FileReferenceNumber: root::DWORDLONG,
        pub FirstNameOffset: u32,
        pub FirstStreamOffset: u32,
        pub ExtraInfoOffset: u32,
        pub ExtraInfoLength: u32,
    }
    pub type FILE_LAYOUT_ENTRY = root::_FILE_LAYOUT_ENTRY;
    pub type PFILE_LAYOUT_ENTRY = *mut root::_FILE_LAYOUT_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_LAYOUT_NAME_ENTRY {
        pub NextNameOffset: u32,
        pub Flags: u32,
        pub ParentFileReferenceNumber: root::DWORDLONG,
        pub FileNameLength: u32,
        pub Reserved: u32,
        pub FileName: [u16; 1usize],
    }
    pub type FILE_LAYOUT_NAME_ENTRY = root::_FILE_LAYOUT_NAME_ENTRY;
    pub type PFILE_LAYOUT_NAME_ENTRY = *mut root::_FILE_LAYOUT_NAME_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_LAYOUT_INFO_ENTRY {
        pub BasicInformation: root::_FILE_LAYOUT_INFO_ENTRY__bindgen_ty_1,
        pub OwnerId: u32,
        pub SecurityId: u32,
        pub Usn: root::USN,
        pub StorageReserveId: root::STORAGE_RESERVE_ID,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FILE_LAYOUT_INFO_ENTRY__bindgen_ty_1 {
        pub CreationTime: root::LARGE_INTEGER,
        pub LastAccessTime: root::LARGE_INTEGER,
        pub LastWriteTime: root::LARGE_INTEGER,
        pub ChangeTime: root::LARGE_INTEGER,
        pub FileAttributes: u32,
    }
    pub type FILE_LAYOUT_INFO_ENTRY = root::_FILE_LAYOUT_INFO_ENTRY;
    pub type PFILE_LAYOUT_INFO_ENTRY = *mut root::_FILE_LAYOUT_INFO_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STREAM_LAYOUT_ENTRY {
        pub Version: u32,
        pub NextStreamOffset: u32,
        pub Flags: u32,
        pub ExtentInformationOffset: u32,
        pub AllocationSize: root::LARGE_INTEGER,
        pub EndOfFile: root::LARGE_INTEGER,
        pub StreamInformationOffset: u32,
        pub AttributeTypeCode: u32,
        pub AttributeFlags: u32,
        pub StreamIdentifierLength: u32,
        pub StreamIdentifier: [u16; 1usize],
    }
    pub type STREAM_LAYOUT_ENTRY = root::_STREAM_LAYOUT_ENTRY;
    pub type PSTREAM_LAYOUT_ENTRY = *mut root::_STREAM_LAYOUT_ENTRY;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STREAM_EXTENT_ENTRY {
        pub Flags: u32,
        pub ExtentInformation: root::_STREAM_EXTENT_ENTRY__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STREAM_EXTENT_ENTRY__bindgen_ty_1 {
        pub RetrievalPointers: root::RETRIEVAL_POINTERS_BUFFER,
    }
    pub type STREAM_EXTENT_ENTRY = root::_STREAM_EXTENT_ENTRY;
    pub type PSTREAM_EXTENT_ENTRY = *mut root::_STREAM_EXTENT_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
        pub ChecksumAlgorithm: u16,
        pub Reserved: u16,
        pub Flags: u32,
        pub ChecksumChunkSizeInBytes: u32,
        pub ClusterSizeInBytes: u32,
    }
    pub type FSCTL_GET_INTEGRITY_INFORMATION_BUFFER = root::_FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
    pub type PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER =
        *mut root::_FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
        pub ChecksumAlgorithm: u16,
        pub Reserved: u16,
        pub Flags: u32,
    }
    pub type FSCTL_SET_INTEGRITY_INFORMATION_BUFFER = root::_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
    pub type PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER =
        *mut root::_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
        pub EnableIntegrity: u8,
        pub KeepIntegrityStateUnchanged: u8,
        pub Reserved: u16,
        pub Flags: u32,
        pub Version: u8,
        pub Reserved2: [u8; 7usize],
    }
    pub type FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX =
        root::_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
    pub type PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX =
        *mut root::_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_OFFLOAD_READ_INPUT {
        pub Size: u32,
        pub Flags: u32,
        pub TokenTimeToLive: u32,
        pub Reserved: u32,
        pub FileOffset: root::DWORDLONG,
        pub CopyLength: root::DWORDLONG,
    }
    pub type FSCTL_OFFLOAD_READ_INPUT = root::_FSCTL_OFFLOAD_READ_INPUT;
    pub type PFSCTL_OFFLOAD_READ_INPUT = *mut root::_FSCTL_OFFLOAD_READ_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_OFFLOAD_READ_OUTPUT {
        pub Size: u32,
        pub Flags: u32,
        pub TransferLength: root::DWORDLONG,
        pub Token: [u8; 512usize],
    }
    pub type FSCTL_OFFLOAD_READ_OUTPUT = root::_FSCTL_OFFLOAD_READ_OUTPUT;
    pub type PFSCTL_OFFLOAD_READ_OUTPUT = *mut root::_FSCTL_OFFLOAD_READ_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_OFFLOAD_WRITE_INPUT {
        pub Size: u32,
        pub Flags: u32,
        pub FileOffset: root::DWORDLONG,
        pub CopyLength: root::DWORDLONG,
        pub TransferOffset: root::DWORDLONG,
        pub Token: [u8; 512usize],
    }
    pub type FSCTL_OFFLOAD_WRITE_INPUT = root::_FSCTL_OFFLOAD_WRITE_INPUT;
    pub type PFSCTL_OFFLOAD_WRITE_INPUT = *mut root::_FSCTL_OFFLOAD_WRITE_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
        pub Size: u32,
        pub Flags: u32,
        pub LengthWritten: root::DWORDLONG,
    }
    pub type FSCTL_OFFLOAD_WRITE_OUTPUT = root::_FSCTL_OFFLOAD_WRITE_OUTPUT;
    pub type PFSCTL_OFFLOAD_WRITE_OUTPUT = *mut root::_FSCTL_OFFLOAD_WRITE_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SET_PURGE_FAILURE_MODE_INPUT {
        pub Flags: u32,
    }
    pub type SET_PURGE_FAILURE_MODE_INPUT = root::_SET_PURGE_FAILURE_MODE_INPUT;
    pub type PSET_PURGE_FAILURE_MODE_INPUT = *mut root::_SET_PURGE_FAILURE_MODE_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _REPAIR_COPIES_INPUT {
        pub Size: u32,
        pub Flags: u32,
        pub FileOffset: root::LARGE_INTEGER,
        pub Length: u32,
        pub SourceCopy: u32,
        pub NumberOfRepairCopies: u32,
        pub RepairCopies: [u32; 1usize],
    }
    pub type REPAIR_COPIES_INPUT = root::_REPAIR_COPIES_INPUT;
    pub type PREPAIR_COPIES_INPUT = *mut root::_REPAIR_COPIES_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _REPAIR_COPIES_OUTPUT {
        pub Size: u32,
        pub Status: u32,
        pub ResumeFileOffset: root::LARGE_INTEGER,
    }
    pub type REPAIR_COPIES_OUTPUT = root::_REPAIR_COPIES_OUTPUT;
    pub type PREPAIR_COPIES_OUTPUT = *mut root::_REPAIR_COPIES_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REGION_INFO {
        pub FileOffset: root::LONGLONG,
        pub Length: root::LONGLONG,
        pub Usage: u32,
        pub Reserved: u32,
    }
    pub type FILE_REGION_INFO = root::_FILE_REGION_INFO;
    pub type PFILE_REGION_INFO = *mut root::_FILE_REGION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REGION_OUTPUT {
        pub Flags: u32,
        pub TotalRegionEntryCount: u32,
        pub RegionEntryCount: u32,
        pub Reserved: u32,
        pub Region: [root::FILE_REGION_INFO; 1usize],
    }
    pub type FILE_REGION_OUTPUT = root::_FILE_REGION_OUTPUT;
    pub type PFILE_REGION_OUTPUT = *mut root::_FILE_REGION_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_REGION_INPUT {
        pub FileOffset: root::LONGLONG,
        pub Length: root::LONGLONG,
        pub DesiredUsage: u32,
    }
    pub type FILE_REGION_INPUT = root::_FILE_REGION_INPUT;
    pub type PFILE_REGION_INPUT = *mut root::_FILE_REGION_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WRITE_USN_REASON_INPUT {
        pub Flags: u32,
        pub UsnReasonToWrite: u32,
    }
    pub type WRITE_USN_REASON_INPUT = root::_WRITE_USN_REASON_INPUT;
    pub type PWRITE_USN_REASON_INPUT = *mut root::_WRITE_USN_REASON_INPUT;
    pub const _FILE_STORAGE_TIER_MEDIA_TYPE_FileStorageTierMediaTypeUnspecified:
        root::_FILE_STORAGE_TIER_MEDIA_TYPE = 0;
    pub const _FILE_STORAGE_TIER_MEDIA_TYPE_FileStorageTierMediaTypeDisk:
        root::_FILE_STORAGE_TIER_MEDIA_TYPE = 1;
    pub const _FILE_STORAGE_TIER_MEDIA_TYPE_FileStorageTierMediaTypeSsd:
        root::_FILE_STORAGE_TIER_MEDIA_TYPE = 2;
    pub const _FILE_STORAGE_TIER_MEDIA_TYPE_FileStorageTierMediaTypeScm:
        root::_FILE_STORAGE_TIER_MEDIA_TYPE = 4;
    pub const _FILE_STORAGE_TIER_MEDIA_TYPE_FileStorageTierMediaTypeMax:
        root::_FILE_STORAGE_TIER_MEDIA_TYPE = 5;
    pub type _FILE_STORAGE_TIER_MEDIA_TYPE = i32;
    pub use self::super::root::_FILE_STORAGE_TIER_MEDIA_TYPE as FILE_STORAGE_TIER_MEDIA_TYPE;
    pub type PFILE_STORAGE_TIER_MEDIA_TYPE = *mut root::_FILE_STORAGE_TIER_MEDIA_TYPE;
    pub const _FILE_STORAGE_TIER_CLASS_FileStorageTierClassUnspecified:
        root::_FILE_STORAGE_TIER_CLASS = 0;
    pub const _FILE_STORAGE_TIER_CLASS_FileStorageTierClassCapacity:
        root::_FILE_STORAGE_TIER_CLASS = 1;
    pub const _FILE_STORAGE_TIER_CLASS_FileStorageTierClassPerformance:
        root::_FILE_STORAGE_TIER_CLASS = 2;
    pub const _FILE_STORAGE_TIER_CLASS_FileStorageTierClassMax: root::_FILE_STORAGE_TIER_CLASS = 3;
    pub type _FILE_STORAGE_TIER_CLASS = i32;
    pub use self::super::root::_FILE_STORAGE_TIER_CLASS as FILE_STORAGE_TIER_CLASS;
    pub type PFILE_STORAGE_TIER_CLASS = *mut root::_FILE_STORAGE_TIER_CLASS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_STORAGE_TIER {
        pub Id: root::GUID,
        pub Name: [u16; 256usize],
        pub Description: [u16; 256usize],
        pub Flags: root::DWORDLONG,
        pub ProvisionedCapacity: root::DWORDLONG,
        pub MediaType: root::FILE_STORAGE_TIER_MEDIA_TYPE,
        pub Class: root::FILE_STORAGE_TIER_CLASS,
    }
    pub type FILE_STORAGE_TIER = root::_FILE_STORAGE_TIER;
    pub type PFILE_STORAGE_TIER = *mut root::_FILE_STORAGE_TIER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub TotalNumberOfTiers: u32,
        pub NumberOfTiersReturned: u32,
        pub Tiers: [root::FILE_STORAGE_TIER; 1usize],
    }
    pub type FSCTL_QUERY_STORAGE_CLASSES_OUTPUT = root::_FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
    pub type PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = *mut root::_FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STREAM_INFORMATION_ENTRY {
        pub Version: u32,
        pub Flags: u32,
        pub StreamInformation: root::_STREAM_INFORMATION_ENTRY__StreamInformation,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STREAM_INFORMATION_ENTRY__StreamInformation {
        pub DesiredStorageClass:
            root::_STREAM_INFORMATION_ENTRY__StreamInformation__DesiredStorageClass,
        pub DataStream: root::_STREAM_INFORMATION_ENTRY__StreamInformation__DataStream,
        pub Reparse: root::_STREAM_INFORMATION_ENTRY__StreamInformation__Reparse,
        pub Ea: root::_STREAM_INFORMATION_ENTRY__StreamInformation__Ea,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAM_INFORMATION_ENTRY__StreamInformation__DesiredStorageClass {
        pub Class: root::FILE_STORAGE_TIER_CLASS,
        pub Flags: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAM_INFORMATION_ENTRY__StreamInformation__DataStream {
        pub Length: u16,
        pub Flags: u16,
        pub Reserved: u32,
        pub Vdl: root::DWORDLONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAM_INFORMATION_ENTRY__StreamInformation__Reparse {
        pub Length: u16,
        pub Flags: u16,
        pub ReparseDataSize: u32,
        pub ReparseDataOffset: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAM_INFORMATION_ENTRY__StreamInformation__Ea {
        pub Length: u16,
        pub Flags: u16,
        pub EaSize: u32,
        pub EaInformationOffset: u32,
    }
    pub type STREAM_INFORMATION_ENTRY = root::_STREAM_INFORMATION_ENTRY;
    pub type PSTREAM_INFORMATION_ENTRY = *mut root::_STREAM_INFORMATION_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_QUERY_REGION_INFO_INPUT {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub NumberOfTierIds: u32,
        pub TierIds: [root::GUID; 1usize],
    }
    pub type FSCTL_QUERY_REGION_INFO_INPUT = root::_FSCTL_QUERY_REGION_INFO_INPUT;
    pub type PFSCTL_QUERY_REGION_INFO_INPUT = *mut root::_FSCTL_QUERY_REGION_INFO_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_STORAGE_TIER_REGION {
        pub TierId: root::GUID,
        pub Offset: root::DWORDLONG,
        pub Length: root::DWORDLONG,
    }
    pub type FILE_STORAGE_TIER_REGION = root::_FILE_STORAGE_TIER_REGION;
    pub type PFILE_STORAGE_TIER_REGION = *mut root::_FILE_STORAGE_TIER_REGION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
        pub Version: u32,
        pub Size: u32,
        pub Flags: u32,
        pub Reserved: u32,
        pub Alignment: root::DWORDLONG,
        pub TotalNumberOfRegions: u32,
        pub NumberOfRegionsReturned: u32,
        pub Regions: [root::FILE_STORAGE_TIER_REGION; 1usize],
    }
    pub type FSCTL_QUERY_REGION_INFO_OUTPUT = root::_FSCTL_QUERY_REGION_INFO_OUTPUT;
    pub type PFSCTL_QUERY_REGION_INFO_OUTPUT = *mut root::_FSCTL_QUERY_REGION_INFO_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
        pub Class: root::FILE_STORAGE_TIER_CLASS,
        pub Flags: u32,
    }
    pub type FILE_DESIRED_STORAGE_CLASS_INFORMATION = root::_FILE_DESIRED_STORAGE_CLASS_INFORMATION;
    pub type PFILE_DESIRED_STORAGE_CLASS_INFORMATION =
        *mut root::_FILE_DESIRED_STORAGE_CLASS_INFORMATION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DUPLICATE_EXTENTS_DATA {
        pub FileHandle: root::HANDLE,
        pub SourceFileOffset: root::LARGE_INTEGER,
        pub TargetFileOffset: root::LARGE_INTEGER,
        pub ByteCount: root::LARGE_INTEGER,
    }
    pub type DUPLICATE_EXTENTS_DATA = root::_DUPLICATE_EXTENTS_DATA;
    pub type PDUPLICATE_EXTENTS_DATA = *mut root::_DUPLICATE_EXTENTS_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DUPLICATE_EXTENTS_DATA32 {
        pub FileHandle: root::UINT32,
        pub SourceFileOffset: root::LARGE_INTEGER,
        pub TargetFileOffset: root::LARGE_INTEGER,
        pub ByteCount: root::LARGE_INTEGER,
    }
    pub type DUPLICATE_EXTENTS_DATA32 = root::_DUPLICATE_EXTENTS_DATA32;
    pub type PDUPLICATE_EXTENTS_DATA32 = *mut root::_DUPLICATE_EXTENTS_DATA32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DUPLICATE_EXTENTS_DATA_EX {
        pub Size: root::SIZE_T,
        pub FileHandle: root::HANDLE,
        pub SourceFileOffset: root::LARGE_INTEGER,
        pub TargetFileOffset: root::LARGE_INTEGER,
        pub ByteCount: root::LARGE_INTEGER,
        pub Flags: u32,
    }
    pub type DUPLICATE_EXTENTS_DATA_EX = root::_DUPLICATE_EXTENTS_DATA_EX;
    pub type PDUPLICATE_EXTENTS_DATA_EX = *mut root::_DUPLICATE_EXTENTS_DATA_EX;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DUPLICATE_EXTENTS_DATA_EX32 {
        pub Size: root::DWORD32,
        pub FileHandle: root::DWORD32,
        pub SourceFileOffset: root::LARGE_INTEGER,
        pub TargetFileOffset: root::LARGE_INTEGER,
        pub ByteCount: root::LARGE_INTEGER,
        pub Flags: u32,
    }
    pub type DUPLICATE_EXTENTS_DATA_EX32 = root::_DUPLICATE_EXTENTS_DATA_EX32;
    pub type PDUPLICATE_EXTENTS_DATA_EX32 = *mut root::_DUPLICATE_EXTENTS_DATA_EX32;
    pub const _REFS_SMR_VOLUME_GC_STATE_SmrGcStateInactive: root::_REFS_SMR_VOLUME_GC_STATE = 0;
    pub const _REFS_SMR_VOLUME_GC_STATE_SmrGcStatePaused: root::_REFS_SMR_VOLUME_GC_STATE = 1;
    pub const _REFS_SMR_VOLUME_GC_STATE_SmrGcStateActive: root::_REFS_SMR_VOLUME_GC_STATE = 2;
    pub const _REFS_SMR_VOLUME_GC_STATE_SmrGcStateActiveFullSpeed: root::_REFS_SMR_VOLUME_GC_STATE =
        3;
    pub type _REFS_SMR_VOLUME_GC_STATE = i32;
    pub use self::super::root::_REFS_SMR_VOLUME_GC_STATE as REFS_SMR_VOLUME_GC_STATE;
    pub type PREFS_SMR_VOLUME_GC_STATE = *mut root::_REFS_SMR_VOLUME_GC_STATE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _REFS_SMR_VOLUME_INFO_OUTPUT {
        pub Version: u32,
        pub Flags: u32,
        pub SizeOfRandomlyWritableTier: root::LARGE_INTEGER,
        pub FreeSpaceInRandomlyWritableTier: root::LARGE_INTEGER,
        pub SizeofSMRTier: root::LARGE_INTEGER,
        pub FreeSpaceInSMRTier: root::LARGE_INTEGER,
        pub UsableFreeSpaceInSMRTier: root::LARGE_INTEGER,
        pub VolumeGcState: root::REFS_SMR_VOLUME_GC_STATE,
        pub VolumeGcLastStatus: u32,
        pub Unused: [root::DWORDLONG; 7usize],
    }
    pub type REFS_SMR_VOLUME_INFO_OUTPUT = root::_REFS_SMR_VOLUME_INFO_OUTPUT;
    pub type PREFS_SMR_VOLUME_INFO_OUTPUT = *mut root::_REFS_SMR_VOLUME_INFO_OUTPUT;
    pub const _REFS_SMR_VOLUME_GC_ACTION_SmrGcActionStart: root::_REFS_SMR_VOLUME_GC_ACTION = 1;
    pub const _REFS_SMR_VOLUME_GC_ACTION_SmrGcActionStartFullSpeed:
        root::_REFS_SMR_VOLUME_GC_ACTION = 2;
    pub const _REFS_SMR_VOLUME_GC_ACTION_SmrGcActionPause: root::_REFS_SMR_VOLUME_GC_ACTION = 3;
    pub const _REFS_SMR_VOLUME_GC_ACTION_SmrGcActionStop: root::_REFS_SMR_VOLUME_GC_ACTION = 4;
    pub type _REFS_SMR_VOLUME_GC_ACTION = i32;
    pub use self::super::root::_REFS_SMR_VOLUME_GC_ACTION as REFS_SMR_VOLUME_GC_ACTION;
    pub type PREFS_SMR_VOLUME_GC_ACTION = *mut root::_REFS_SMR_VOLUME_GC_ACTION;
    pub const _REFS_SMR_VOLUME_GC_METHOD_SmrGcMethodCompaction: root::_REFS_SMR_VOLUME_GC_METHOD =
        1;
    pub const _REFS_SMR_VOLUME_GC_METHOD_SmrGcMethodCompression: root::_REFS_SMR_VOLUME_GC_METHOD =
        2;
    pub const _REFS_SMR_VOLUME_GC_METHOD_SmrGcMethodRotation: root::_REFS_SMR_VOLUME_GC_METHOD = 3;
    pub type _REFS_SMR_VOLUME_GC_METHOD = i32;
    pub use self::super::root::_REFS_SMR_VOLUME_GC_METHOD as REFS_SMR_VOLUME_GC_METHOD;
    pub type PREFS_SMR_VOLUME_GC_METHOD = *mut root::_REFS_SMR_VOLUME_GC_METHOD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REFS_SMR_VOLUME_GC_PARAMETERS {
        pub Version: u32,
        pub Flags: u32,
        pub Action: root::REFS_SMR_VOLUME_GC_ACTION,
        pub Method: root::REFS_SMR_VOLUME_GC_METHOD,
        pub IoGranularity: u32,
        pub CompressionFormat: u32,
        pub Unused: [root::DWORDLONG; 8usize],
    }
    pub type REFS_SMR_VOLUME_GC_PARAMETERS = root::_REFS_SMR_VOLUME_GC_PARAMETERS;
    pub type PREFS_SMR_VOLUME_GC_PARAMETERS = *mut root::_REFS_SMR_VOLUME_GC_PARAMETERS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
        pub OptimalWriteSize: u32,
        pub StreamGranularitySize: u32,
        pub StreamIdMin: u32,
        pub StreamIdMax: u32,
    }
    pub type STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = root::_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
    pub type PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER =
        *mut root::_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
        pub Flags: u32,
        pub StreamId: u32,
    }
    pub type STREAMS_ASSOCIATE_ID_INPUT_BUFFER = root::_STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
    pub type PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = *mut root::_STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
        pub StreamId: u32,
    }
    pub type STREAMS_QUERY_ID_OUTPUT_BUFFER = root::_STREAMS_QUERY_ID_OUTPUT_BUFFER;
    pub type PSTREAMS_QUERY_ID_OUTPUT_BUFFER = *mut root::_STREAMS_QUERY_ID_OUTPUT_BUFFER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_BAD_RANGES_INPUT_RANGE {
        pub StartOffset: root::DWORDLONG,
        pub LengthInBytes: root::DWORDLONG,
    }
    pub type QUERY_BAD_RANGES_INPUT_RANGE = root::_QUERY_BAD_RANGES_INPUT_RANGE;
    pub type PQUERY_BAD_RANGES_INPUT_RANGE = *mut root::_QUERY_BAD_RANGES_INPUT_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_BAD_RANGES_INPUT {
        pub Flags: u32,
        pub NumRanges: u32,
        pub Ranges: [root::QUERY_BAD_RANGES_INPUT_RANGE; 1usize],
    }
    pub type QUERY_BAD_RANGES_INPUT = root::_QUERY_BAD_RANGES_INPUT;
    pub type PQUERY_BAD_RANGES_INPUT = *mut root::_QUERY_BAD_RANGES_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
        pub Flags: u32,
        pub Reserved: u32,
        pub StartOffset: root::DWORDLONG,
        pub LengthInBytes: root::DWORDLONG,
    }
    pub type QUERY_BAD_RANGES_OUTPUT_RANGE = root::_QUERY_BAD_RANGES_OUTPUT_RANGE;
    pub type PQUERY_BAD_RANGES_OUTPUT_RANGE = *mut root::_QUERY_BAD_RANGES_OUTPUT_RANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_BAD_RANGES_OUTPUT {
        pub Flags: u32,
        pub NumBadRanges: u32,
        pub NextOffsetToLookUp: root::DWORDLONG,
        pub BadRanges: [root::QUERY_BAD_RANGES_OUTPUT_RANGE; 1usize],
    }
    pub type QUERY_BAD_RANGES_OUTPUT = root::_QUERY_BAD_RANGES_OUTPUT;
    pub type PQUERY_BAD_RANGES_OUTPUT = *mut root::_QUERY_BAD_RANGES_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
        pub Flags: u32,
        pub AlignmentShift: u32,
        pub FileOffsetToAlign: root::DWORDLONG,
        pub FallbackAlignmentShift: u32,
    }
    pub type SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = root::_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
    pub type PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = *mut root::_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
    pub const _VIRTUAL_STORAGE_BEHAVIOR_CODE_VirtualStorageBehaviorUndefined:
        root::_VIRTUAL_STORAGE_BEHAVIOR_CODE = 0;
    pub const _VIRTUAL_STORAGE_BEHAVIOR_CODE_VirtualStorageBehaviorCacheWriteThrough:
        root::_VIRTUAL_STORAGE_BEHAVIOR_CODE = 1;
    pub const _VIRTUAL_STORAGE_BEHAVIOR_CODE_VirtualStorageBehaviorCacheWriteBack:
        root::_VIRTUAL_STORAGE_BEHAVIOR_CODE = 2;
    pub type _VIRTUAL_STORAGE_BEHAVIOR_CODE = i32;
    pub use self::super::root::_VIRTUAL_STORAGE_BEHAVIOR_CODE as VIRTUAL_STORAGE_BEHAVIOR_CODE;
    pub type PVIRTUAL_STORAGE_BEHAVIOR_CODE = *mut root::_VIRTUAL_STORAGE_BEHAVIOR_CODE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
        pub Size: u32,
        pub BehaviorCode: root::VIRTUAL_STORAGE_BEHAVIOR_CODE,
    }
    pub type VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = root::_VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
    pub type PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = *mut root::_VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENCRYPTION_KEY_CTRL_INPUT {
        pub HeaderSize: u32,
        pub StructureSize: u32,
        pub KeyOffset: u16,
        pub KeySize: u16,
        pub DplLock: u32,
        pub DplUserId: root::DWORDLONG,
        pub DplCredentialId: root::DWORDLONG,
    }
    pub type ENCRYPTION_KEY_CTRL_INPUT = root::_ENCRYPTION_KEY_CTRL_INPUT;
    pub type PENCRYPTION_KEY_CTRL_INPUT = *mut root::_ENCRYPTION_KEY_CTRL_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOF_EXTERNAL_INFO {
        pub Version: u32,
        pub Provider: u32,
    }
    pub type WOF_EXTERNAL_INFO = root::_WOF_EXTERNAL_INFO;
    pub type PWOF_EXTERNAL_INFO = *mut root::_WOF_EXTERNAL_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOF_EXTERNAL_FILE_ID {
        pub FileId: root::FILE_ID_128,
    }
    pub type WOF_EXTERNAL_FILE_ID = root::_WOF_EXTERNAL_FILE_ID;
    pub type PWOF_EXTERNAL_FILE_ID = *mut root::_WOF_EXTERNAL_FILE_ID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WOF_VERSION_INFO {
        pub WofVersion: u32,
    }
    pub type WOF_VERSION_INFO = root::_WOF_VERSION_INFO;
    pub type PWOF_VERSION_INFO = *mut root::_WOF_VERSION_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIM_PROVIDER_EXTERNAL_INFO {
        pub Version: u32,
        pub Flags: u32,
        pub DataSourceId: root::LARGE_INTEGER,
        pub ResourceHash: [u8; 20usize],
    }
    pub type WIM_PROVIDER_EXTERNAL_INFO = root::_WIM_PROVIDER_EXTERNAL_INFO;
    pub type PWIM_PROVIDER_EXTERNAL_INFO = *mut root::_WIM_PROVIDER_EXTERNAL_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
        pub WimType: u32,
        pub WimIndex: u32,
        pub WimFileNameOffset: u32,
        pub WimFileNameLength: u32,
    }
    pub type WIM_PROVIDER_ADD_OVERLAY_INPUT = root::_WIM_PROVIDER_ADD_OVERLAY_INPUT;
    pub type PWIM_PROVIDER_ADD_OVERLAY_INPUT = *mut root::_WIM_PROVIDER_ADD_OVERLAY_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
        pub DataSourceId: root::LARGE_INTEGER,
        pub WimFileNameOffset: u32,
        pub WimFileNameLength: u32,
    }
    pub type WIM_PROVIDER_UPDATE_OVERLAY_INPUT = root::_WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
    pub type PWIM_PROVIDER_UPDATE_OVERLAY_INPUT = *mut root::_WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
        pub DataSourceId: root::LARGE_INTEGER,
    }
    pub type WIM_PROVIDER_REMOVE_OVERLAY_INPUT = root::_WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
    pub type PWIM_PROVIDER_REMOVE_OVERLAY_INPUT = *mut root::_WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
        pub DataSourceId: root::LARGE_INTEGER,
    }
    pub type WIM_PROVIDER_SUSPEND_OVERLAY_INPUT = root::_WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
    pub type PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = *mut root::_WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _WIM_PROVIDER_OVERLAY_ENTRY {
        pub NextEntryOffset: u32,
        pub DataSourceId: root::LARGE_INTEGER,
        pub WimGuid: root::GUID,
        pub WimFileNameOffset: u32,
        pub WimType: u32,
        pub WimIndex: u32,
        pub Flags: u32,
    }
    pub type WIM_PROVIDER_OVERLAY_ENTRY = root::_WIM_PROVIDER_OVERLAY_ENTRY;
    pub type PWIM_PROVIDER_OVERLAY_ENTRY = *mut root::_WIM_PROVIDER_OVERLAY_ENTRY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
        pub Version: u32,
        pub Algorithm: u32,
    }
    pub type FILE_PROVIDER_EXTERNAL_INFO_V0 = root::_FILE_PROVIDER_EXTERNAL_INFO_V0;
    pub type PFILE_PROVIDER_EXTERNAL_INFO_V0 = *mut root::_FILE_PROVIDER_EXTERNAL_INFO_V0;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
        pub Version: u32,
        pub Algorithm: u32,
        pub Flags: u32,
    }
    pub type FILE_PROVIDER_EXTERNAL_INFO_V1 = root::_FILE_PROVIDER_EXTERNAL_INFO_V1;
    pub type PFILE_PROVIDER_EXTERNAL_INFO_V1 = *mut root::_FILE_PROVIDER_EXTERNAL_INFO_V1;
    pub type FILE_PROVIDER_EXTERNAL_INFO = root::FILE_PROVIDER_EXTERNAL_INFO_V1;
    pub type PFILE_PROVIDER_EXTERNAL_INFO = root::PFILE_PROVIDER_EXTERNAL_INFO_V1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONTAINER_VOLUME_STATE {
        pub Flags: u32,
    }
    pub type CONTAINER_VOLUME_STATE = root::_CONTAINER_VOLUME_STATE;
    pub type PCONTAINER_VOLUME_STATE = *mut root::_CONTAINER_VOLUME_STATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONTAINER_ROOT_INFO_INPUT {
        pub Flags: u32,
    }
    pub type CONTAINER_ROOT_INFO_INPUT = root::_CONTAINER_ROOT_INFO_INPUT;
    pub type PCONTAINER_ROOT_INFO_INPUT = *mut root::_CONTAINER_ROOT_INFO_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONTAINER_ROOT_INFO_OUTPUT {
        pub ContainerRootIdLength: u16,
        pub ContainerRootId: [u8; 1usize],
    }
    pub type CONTAINER_ROOT_INFO_OUTPUT = root::_CONTAINER_ROOT_INFO_OUTPUT;
    pub type PCONTAINER_ROOT_INFO_OUTPUT = *mut root::_CONTAINER_ROOT_INFO_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
        pub NumberOfWorkerThreads: u32,
        pub Flags: u32,
    }
    pub type VIRTUALIZATION_INSTANCE_INFO_INPUT = root::_VIRTUALIZATION_INSTANCE_INFO_INPUT;
    pub type PVIRTUALIZATION_INSTANCE_INFO_INPUT = *mut root::_VIRTUALIZATION_INSTANCE_INFO_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
        pub HeaderSize: u16,
        pub Flags: u32,
        pub NotificationInfoSize: u32,
        pub NotificationInfoOffset: u16,
        pub ProviderMajorVersion: u16,
    }
    pub type VIRTUALIZATION_INSTANCE_INFO_INPUT_EX = root::_VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
    pub type PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX =
        *mut root::_VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
        pub VirtualizationInstanceID: root::GUID,
    }
    pub type VIRTUALIZATION_INSTANCE_INFO_OUTPUT = root::_VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
    pub type PVIRTUALIZATION_INSTANCE_INFO_OUTPUT = *mut root::_VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
        pub AltitudeLength: u16,
        pub Altitude: [u16; 1usize],
    }
    pub type GET_FILTER_FILE_IDENTIFIER_INPUT = root::_GET_FILTER_FILE_IDENTIFIER_INPUT;
    pub type PGET_FILTER_FILE_IDENTIFIER_INPUT = *mut root::_GET_FILTER_FILE_IDENTIFIER_INPUT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
        pub FilterFileIdentifierLength: u16,
        pub FilterFileIdentifier: [u8; 1usize],
    }
    pub type GET_FILTER_FILE_IDENTIFIER_OUTPUT = root::_GET_FILTER_FILE_IDENTIFIER_OUTPUT;
    pub type PGET_FILTER_FILE_IDENTIFIER_OUTPUT = *mut root::_GET_FILTER_FILE_IDENTIFIER_OUTPUT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _DISK_EXTENT {
        pub DiskNumber: u32,
        pub StartingOffset: root::LARGE_INTEGER,
        pub ExtentLength: root::LARGE_INTEGER,
    }
    pub type DISK_EXTENT = root::_DISK_EXTENT;
    pub type PDISK_EXTENT = *mut root::_DISK_EXTENT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _VOLUME_DISK_EXTENTS {
        pub NumberOfDiskExtents: u32,
        pub Extents: [root::DISK_EXTENT; 1usize],
    }
    pub type VOLUME_DISK_EXTENTS = root::_VOLUME_DISK_EXTENTS;
    pub type PVOLUME_DISK_EXTENTS = *mut root::_VOLUME_DISK_EXTENTS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
        pub GptAttributes: root::DWORDLONG,
    }
    pub type VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = root::_VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
    pub type PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION =
        *mut root::_VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
    pub type PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            SourceContext: *mut root::_IO_IRP_EXT_TRACK_OFFSET_HEADER,
            TargetContext: *mut root::_IO_IRP_EXT_TRACK_OFFSET_HEADER,
            RelativeOffset: root::LONGLONG,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
        pub Validation: u16,
        pub Flags: u16,
        pub TrackedOffsetCallback: root::PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK,
    }
    pub type IO_IRP_EXT_TRACK_OFFSET_HEADER = root::_IO_IRP_EXT_TRACK_OFFSET_HEADER;
    pub type PIO_IRP_EXT_TRACK_OFFSET_HEADER = *mut root::_IO_IRP_EXT_TRACK_OFFSET_HEADER;
    pub type UWORD = u16;
    extern "C" {
        pub static GUID_DEVINTERFACE_SMARTCARD_READER: root::GUID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCARD_IO_REQUEST {
        pub dwProtocol: u32,
        pub cbPciLength: u32,
    }
    pub type SCARD_IO_REQUEST = root::_SCARD_IO_REQUEST;
    pub type PSCARD_IO_REQUEST = *mut root::_SCARD_IO_REQUEST;
    pub type LPSCARD_IO_REQUEST = *mut root::_SCARD_IO_REQUEST;
    pub type LPCSCARD_IO_REQUEST = *const root::SCARD_IO_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCARD_T0_COMMAND {
        pub bCla: u8,
        pub bIns: u8,
        pub bP1: u8,
        pub bP2: u8,
        pub bP3: u8,
    }
    pub type SCARD_T0_COMMAND = root::_SCARD_T0_COMMAND;
    pub type LPSCARD_T0_COMMAND = *mut root::_SCARD_T0_COMMAND;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SCARD_T0_REQUEST {
        pub ioRequest: root::SCARD_IO_REQUEST,
        pub bSw1: u8,
        pub bSw2: u8,
        pub __bindgen_anon_1: root::_SCARD_T0_REQUEST__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SCARD_T0_REQUEST__bindgen_ty_1 {
        pub CmdBytes: root::SCARD_T0_COMMAND,
        pub rgbHeader: [u8; 5usize],
    }
    pub type SCARD_T0_REQUEST = root::_SCARD_T0_REQUEST;
    pub type PSCARD_T0_REQUEST = *mut root::SCARD_T0_REQUEST;
    pub type LPSCARD_T0_REQUEST = *mut root::SCARD_T0_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCARD_T1_REQUEST {
        pub ioRequest: root::SCARD_IO_REQUEST,
    }
    pub type SCARD_T1_REQUEST = root::_SCARD_T1_REQUEST;
    pub type PSCARD_T1_REQUEST = *mut root::SCARD_T1_REQUEST;
    pub type LPSCARD_T1_REQUEST = *mut root::SCARD_T1_REQUEST;
    pub type LPCBYTE = *const u8;
    extern "C" {
        pub static g_rgSCardT0Pci: root::SCARD_IO_REQUEST;
    }
    extern "C" {
        pub static g_rgSCardT1Pci: root::SCARD_IO_REQUEST;
    }
    extern "C" {
        pub static g_rgSCardRawPci: root::SCARD_IO_REQUEST;
    }
    pub type SCARDCONTEXT = u64;
    pub type PSCARDCONTEXT = *mut root::SCARDCONTEXT;
    pub type LPSCARDCONTEXT = *mut root::SCARDCONTEXT;
    pub type SCARDHANDLE = u64;
    pub type PSCARDHANDLE = *mut root::SCARDHANDLE;
    pub type LPSCARDHANDLE = *mut root::SCARDHANDLE;
    extern "C" {
        pub fn SCardEstablishContext(
            dwScope: u32,
            pvReserved1: root::LPCVOID,
            pvReserved2: root::LPCVOID,
            phContext: root::LPSCARDCONTEXT,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardReleaseContext(hContext: root::SCARDCONTEXT) -> i32;
    }
    extern "C" {
        pub fn SCardIsValidContext(hContext: root::SCARDCONTEXT) -> i32;
    }
    extern "C" {
        pub fn SCardListReaderGroupsA(
            hContext: root::SCARDCONTEXT,
            mszGroups: *mut i8,
            pcchGroups: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListReaderGroupsW(
            hContext: root::SCARDCONTEXT,
            mszGroups: root::LPWSTR,
            pcchGroups: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListReadersA(
            hContext: root::SCARDCONTEXT,
            mszGroups: *const i8,
            mszReaders: *mut i8,
            pcchReaders: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListReadersW(
            hContext: root::SCARDCONTEXT,
            mszGroups: root::LPCWSTR,
            mszReaders: root::LPWSTR,
            pcchReaders: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListCardsA(
            hContext: root::SCARDCONTEXT,
            pbAtr: root::LPCBYTE,
            rgquidInterfaces: root::LPCGUID,
            cguidInterfaceCount: u32,
            mszCards: *mut i8,
            pcchCards: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListCardsW(
            hContext: root::SCARDCONTEXT,
            pbAtr: root::LPCBYTE,
            rgquidInterfaces: root::LPCGUID,
            cguidInterfaceCount: u32,
            mszCards: *mut u16,
            pcchCards: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListInterfacesA(
            hContext: root::SCARDCONTEXT,
            szCard: *const i8,
            pguidInterfaces: root::LPGUID,
            pcguidInterfaces: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListInterfacesW(
            hContext: root::SCARDCONTEXT,
            szCard: root::LPCWSTR,
            pguidInterfaces: root::LPGUID,
            pcguidInterfaces: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetProviderIdA(
            hContext: root::SCARDCONTEXT,
            szCard: *const i8,
            pguidProviderId: root::LPGUID,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetProviderIdW(
            hContext: root::SCARDCONTEXT,
            szCard: root::LPCWSTR,
            pguidProviderId: root::LPGUID,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetCardTypeProviderNameA(
            hContext: root::SCARDCONTEXT,
            szCardName: *const i8,
            dwProviderId: u32,
            szProvider: *mut i8,
            pcchProvider: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetCardTypeProviderNameW(
            hContext: root::SCARDCONTEXT,
            szCardName: root::LPCWSTR,
            dwProviderId: u32,
            szProvider: *mut u16,
            pcchProvider: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardIntroduceReaderGroupA(
            hContext: root::SCARDCONTEXT,
            szGroupName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardIntroduceReaderGroupW(
            hContext: root::SCARDCONTEXT,
            szGroupName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardForgetReaderGroupA(
            hContext: root::SCARDCONTEXT,
            szGroupName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardForgetReaderGroupW(
            hContext: root::SCARDCONTEXT,
            szGroupName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardIntroduceReaderA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
            szDeviceName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardIntroduceReaderW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
            szDeviceName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardForgetReaderA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardForgetReaderW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardAddReaderToGroupA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
            szGroupName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardAddReaderToGroupW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
            szGroupName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardRemoveReaderFromGroupA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
            szGroupName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardRemoveReaderFromGroupW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
            szGroupName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardIntroduceCardTypeA(
            hContext: root::SCARDCONTEXT,
            szCardName: *const i8,
            pguidPrimaryProvider: root::LPCGUID,
            rgguidInterfaces: root::LPCGUID,
            dwInterfaceCount: u32,
            pbAtr: root::LPCBYTE,
            pbAtrMask: root::LPCBYTE,
            cbAtrLen: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardIntroduceCardTypeW(
            hContext: root::SCARDCONTEXT,
            szCardName: root::LPCWSTR,
            pguidPrimaryProvider: root::LPCGUID,
            rgguidInterfaces: root::LPCGUID,
            dwInterfaceCount: u32,
            pbAtr: root::LPCBYTE,
            pbAtrMask: root::LPCBYTE,
            cbAtrLen: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardSetCardTypeProviderNameA(
            hContext: root::SCARDCONTEXT,
            szCardName: *const i8,
            dwProviderId: u32,
            szProvider: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardSetCardTypeProviderNameW(
            hContext: root::SCARDCONTEXT,
            szCardName: root::LPCWSTR,
            dwProviderId: u32,
            szProvider: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardForgetCardTypeA(
            hContext: root::SCARDCONTEXT,
            szCardName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardForgetCardTypeW(
            hContext: root::SCARDCONTEXT,
            szCardName: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardFreeMemory(hContext: root::SCARDCONTEXT, pvMem: root::LPCVOID) -> i32;
    }
    extern "C" {
        pub fn SCardAccessStartedEvent() -> root::HANDLE;
    }
    extern "C" {
        pub fn SCardReleaseStartedEvent();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SCARD_READERSTATEA {
        pub szReader: *const i8,
        pub pvUserData: root::LPVOID,
        pub dwCurrentState: u32,
        pub dwEventState: u32,
        pub cbAtr: u32,
        pub rgbAtr: [u8; 36usize],
    }
    pub type PSCARD_READERSTATEA = *mut root::SCARD_READERSTATEA;
    pub type LPSCARD_READERSTATEA = *mut root::SCARD_READERSTATEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SCARD_READERSTATEW {
        pub szReader: root::LPCWSTR,
        pub pvUserData: root::LPVOID,
        pub dwCurrentState: u32,
        pub dwEventState: u32,
        pub cbAtr: u32,
        pub rgbAtr: [u8; 36usize],
    }
    pub type PSCARD_READERSTATEW = *mut root::SCARD_READERSTATEW;
    pub type LPSCARD_READERSTATEW = *mut root::SCARD_READERSTATEW;
    pub type SCARD_READERSTATE = root::SCARD_READERSTATEA;
    pub type PSCARD_READERSTATE = root::PSCARD_READERSTATEA;
    pub type LPSCARD_READERSTATE = root::LPSCARD_READERSTATEA;
    extern "C" {
        pub fn SCardLocateCardsA(
            hContext: root::SCARDCONTEXT,
            mszCards: *const i8,
            rgReaderStates: root::LPSCARD_READERSTATEA,
            cReaders: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardLocateCardsW(
            hContext: root::SCARDCONTEXT,
            mszCards: root::LPCWSTR,
            rgReaderStates: root::LPSCARD_READERSTATEW,
            cReaders: u32,
        ) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SCARD_ATRMASK {
        pub cbAtr: u32,
        pub rgbAtr: [u8; 36usize],
        pub rgbMask: [u8; 36usize],
    }
    pub type SCARD_ATRMASK = root::_SCARD_ATRMASK;
    pub type PSCARD_ATRMASK = *mut root::_SCARD_ATRMASK;
    pub type LPSCARD_ATRMASK = *mut root::_SCARD_ATRMASK;
    extern "C" {
        pub fn SCardLocateCardsByATRA(
            hContext: root::SCARDCONTEXT,
            rgAtrMasks: root::LPSCARD_ATRMASK,
            cAtrs: u32,
            rgReaderStates: root::LPSCARD_READERSTATEA,
            cReaders: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardLocateCardsByATRW(
            hContext: root::SCARDCONTEXT,
            rgAtrMasks: root::LPSCARD_ATRMASK,
            cAtrs: u32,
            rgReaderStates: root::LPSCARD_READERSTATEW,
            cReaders: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetStatusChangeA(
            hContext: root::SCARDCONTEXT,
            dwTimeout: u32,
            rgReaderStates: root::LPSCARD_READERSTATEA,
            cReaders: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetStatusChangeW(
            hContext: root::SCARDCONTEXT,
            dwTimeout: u32,
            rgReaderStates: root::LPSCARD_READERSTATEW,
            cReaders: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardCancel(hContext: root::SCARDCONTEXT) -> i32;
    }
    extern "C" {
        pub fn SCardConnectA(
            hContext: root::SCARDCONTEXT,
            szReader: *const i8,
            dwShareMode: u32,
            dwPreferredProtocols: u32,
            phCard: root::LPSCARDHANDLE,
            pdwActiveProtocol: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardConnectW(
            hContext: root::SCARDCONTEXT,
            szReader: root::LPCWSTR,
            dwShareMode: u32,
            dwPreferredProtocols: u32,
            phCard: root::LPSCARDHANDLE,
            pdwActiveProtocol: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardReconnect(
            hCard: root::SCARDHANDLE,
            dwShareMode: u32,
            dwPreferredProtocols: u32,
            dwInitialization: u32,
            pdwActiveProtocol: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardDisconnect(hCard: root::SCARDHANDLE, dwDisposition: u32) -> i32;
    }
    extern "C" {
        pub fn SCardBeginTransaction(hCard: root::SCARDHANDLE) -> i32;
    }
    extern "C" {
        pub fn SCardEndTransaction(
            hCard: root::SCARDHANDLE,
            dwDisposition: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardCancelTransaction(hCard: root::SCARDHANDLE) -> i32;
    }
    extern "C" {
        pub fn SCardState(
            hCard: root::SCARDHANDLE,
            pdwState: root::LPDWORD,
            pdwProtocol: root::LPDWORD,
            pbAtr: root::LPBYTE,
            pcbAtrLen: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardStatusA(
            hCard: root::SCARDHANDLE,
            mszReaderNames: *mut i8,
            pcchReaderLen: root::LPDWORD,
            pdwState: root::LPDWORD,
            pdwProtocol: root::LPDWORD,
            pbAtr: root::LPBYTE,
            pcbAtrLen: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardStatusW(
            hCard: root::SCARDHANDLE,
            mszReaderNames: root::LPWSTR,
            pcchReaderLen: root::LPDWORD,
            pdwState: root::LPDWORD,
            pdwProtocol: root::LPDWORD,
            pbAtr: root::LPBYTE,
            pcbAtrLen: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardTransmit(
            hCard: root::SCARDHANDLE,
            pioSendPci: root::LPCSCARD_IO_REQUEST,
            pbSendBuffer: root::LPCBYTE,
            cbSendLength: u32,
            pioRecvPci: root::LPSCARD_IO_REQUEST,
            pbRecvBuffer: root::LPBYTE,
            pcbRecvLength: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetTransmitCount(
            hCard: root::SCARDHANDLE,
            pcTransmitCount: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardControl(
            hCard: root::SCARDHANDLE,
            dwControlCode: u32,
            lpInBuffer: root::LPCVOID,
            cbInBufferSize: u32,
            lpOutBuffer: root::LPVOID,
            cbOutBufferSize: u32,
            lpBytesReturned: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetAttrib(
            hCard: root::SCARDHANDLE,
            dwAttrId: u32,
            pbAttr: root::LPBYTE,
            pcbAttrLen: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardSetAttrib(
            hCard: root::SCARDHANDLE,
            dwAttrId: u32,
            pbAttr: root::LPCBYTE,
            cbAttrLen: u32,
        ) -> i32;
    }
    pub type LPOCNCONNPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::SCARDCONTEXT,
            arg2: *mut i8,
            arg3: *mut i8,
            arg4: root::PVOID,
        ) -> root::SCARDHANDLE,
    >;
    pub type LPOCNCONNPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::SCARDCONTEXT,
            arg2: root::LPWSTR,
            arg3: root::LPWSTR,
            arg4: root::PVOID,
        ) -> root::SCARDHANDLE,
    >;
    pub type LPOCNCHKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::SCARDCONTEXT,
            arg2: root::SCARDHANDLE,
            arg3: root::PVOID,
        ) -> root::BOOL,
    >;
    pub type LPOCNDSCPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::SCARDCONTEXT, arg2: root::SCARDHANDLE, arg3: root::PVOID),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct OPENCARD_SEARCH_CRITERIAA {
        pub dwStructSize: u32,
        pub lpstrGroupNames: *mut i8,
        pub nMaxGroupNames: u32,
        pub rgguidInterfaces: root::LPCGUID,
        pub cguidInterfaces: u32,
        pub lpstrCardNames: *mut i8,
        pub nMaxCardNames: u32,
        pub lpfnCheck: root::LPOCNCHKPROC,
        pub lpfnConnect: root::LPOCNCONNPROCA,
        pub lpfnDisconnect: root::LPOCNDSCPROC,
        pub pvUserData: root::LPVOID,
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
    }
    pub type POPENCARD_SEARCH_CRITERIAA = *mut root::OPENCARD_SEARCH_CRITERIAA;
    pub type LPOPENCARD_SEARCH_CRITERIAA = *mut root::OPENCARD_SEARCH_CRITERIAA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct OPENCARD_SEARCH_CRITERIAW {
        pub dwStructSize: u32,
        pub lpstrGroupNames: root::LPWSTR,
        pub nMaxGroupNames: u32,
        pub rgguidInterfaces: root::LPCGUID,
        pub cguidInterfaces: u32,
        pub lpstrCardNames: root::LPWSTR,
        pub nMaxCardNames: u32,
        pub lpfnCheck: root::LPOCNCHKPROC,
        pub lpfnConnect: root::LPOCNCONNPROCW,
        pub lpfnDisconnect: root::LPOCNDSCPROC,
        pub pvUserData: root::LPVOID,
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
    }
    pub type POPENCARD_SEARCH_CRITERIAW = *mut root::OPENCARD_SEARCH_CRITERIAW;
    pub type LPOPENCARD_SEARCH_CRITERIAW = *mut root::OPENCARD_SEARCH_CRITERIAW;
    pub type OPENCARD_SEARCH_CRITERIA = root::OPENCARD_SEARCH_CRITERIAA;
    pub type POPENCARD_SEARCH_CRITERIA = root::POPENCARD_SEARCH_CRITERIAA;
    pub type LPOPENCARD_SEARCH_CRITERIA = root::LPOPENCARD_SEARCH_CRITERIAA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct OPENCARDNAME_EXA {
        pub dwStructSize: u32,
        pub hSCardContext: root::SCARDCONTEXT,
        pub hwndOwner: root::HWND,
        pub dwFlags: u32,
        pub lpstrTitle: *const i8,
        pub lpstrSearchDesc: *const i8,
        pub hIcon: root::HICON,
        pub pOpenCardSearchCriteria: root::POPENCARD_SEARCH_CRITERIAA,
        pub lpfnConnect: root::LPOCNCONNPROCA,
        pub pvUserData: root::LPVOID,
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
        pub lpstrRdr: *mut i8,
        pub nMaxRdr: u32,
        pub lpstrCard: *mut i8,
        pub nMaxCard: u32,
        pub dwActiveProtocol: u32,
        pub hCardHandle: root::SCARDHANDLE,
    }
    pub type POPENCARDNAME_EXA = *mut root::OPENCARDNAME_EXA;
    pub type LPOPENCARDNAME_EXA = *mut root::OPENCARDNAME_EXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct OPENCARDNAME_EXW {
        pub dwStructSize: u32,
        pub hSCardContext: root::SCARDCONTEXT,
        pub hwndOwner: root::HWND,
        pub dwFlags: u32,
        pub lpstrTitle: root::LPCWSTR,
        pub lpstrSearchDesc: root::LPCWSTR,
        pub hIcon: root::HICON,
        pub pOpenCardSearchCriteria: root::POPENCARD_SEARCH_CRITERIAW,
        pub lpfnConnect: root::LPOCNCONNPROCW,
        pub pvUserData: root::LPVOID,
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
        pub lpstrRdr: root::LPWSTR,
        pub nMaxRdr: u32,
        pub lpstrCard: root::LPWSTR,
        pub nMaxCard: u32,
        pub dwActiveProtocol: u32,
        pub hCardHandle: root::SCARDHANDLE,
    }
    pub type POPENCARDNAME_EXW = *mut root::OPENCARDNAME_EXW;
    pub type LPOPENCARDNAME_EXW = *mut root::OPENCARDNAME_EXW;
    pub type OPENCARDNAME_EX = root::OPENCARDNAME_EXA;
    pub type POPENCARDNAME_EX = root::POPENCARDNAME_EXA;
    pub type LPOPENCARDNAME_EX = root::LPOPENCARDNAME_EXA;
    pub const READER_SEL_REQUEST_MATCH_TYPE_RSR_MATCH_TYPE_READER_AND_CONTAINER:
        root::READER_SEL_REQUEST_MATCH_TYPE = 1;
    pub const READER_SEL_REQUEST_MATCH_TYPE_RSR_MATCH_TYPE_SERIAL_NUMBER:
        root::READER_SEL_REQUEST_MATCH_TYPE = 2;
    pub const READER_SEL_REQUEST_MATCH_TYPE_RSR_MATCH_TYPE_ALL_CARDS:
        root::READER_SEL_REQUEST_MATCH_TYPE = 3;
    pub type READER_SEL_REQUEST_MATCH_TYPE = i32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct READER_SEL_REQUEST {
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
        pub MatchType: root::READER_SEL_REQUEST_MATCH_TYPE,
        pub __bindgen_anon_1: root::READER_SEL_REQUEST__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union READER_SEL_REQUEST__bindgen_ty_1 {
        pub ReaderAndContainerParameter: root::READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_1,
        pub SerialNumberParameter: root::READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_1 {
        pub cbReaderNameOffset: u32,
        pub cchReaderNameLength: u32,
        pub cbContainerNameOffset: u32,
        pub cchContainerNameLength: u32,
        pub dwDesiredCardModuleVersion: u32,
        pub dwCspFlags: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_2 {
        pub cbSerialNumberOffset: u32,
        pub cbSerialNumberLength: u32,
        pub dwDesiredCardModuleVersion: u32,
    }
    pub type PREADER_SEL_REQUEST = *mut root::READER_SEL_REQUEST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct READER_SEL_RESPONSE {
        pub cbReaderNameOffset: u32,
        pub cchReaderNameLength: u32,
        pub cbCardNameOffset: u32,
        pub cchCardNameLength: u32,
    }
    pub type PREADER_SEL_RESPONSE = *mut root::READER_SEL_RESPONSE;
    extern "C" {
        pub fn SCardUIDlgSelectCardA(arg1: root::LPOPENCARDNAME_EXA) -> i32;
    }
    extern "C" {
        pub fn SCardUIDlgSelectCardW(arg1: root::LPOPENCARDNAME_EXW) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct OPENCARDNAMEA {
        pub dwStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hSCardContext: root::SCARDCONTEXT,
        pub lpstrGroupNames: *mut i8,
        pub nMaxGroupNames: u32,
        pub lpstrCardNames: *mut i8,
        pub nMaxCardNames: u32,
        pub rgguidInterfaces: root::LPCGUID,
        pub cguidInterfaces: u32,
        pub lpstrRdr: *mut i8,
        pub nMaxRdr: u32,
        pub lpstrCard: *mut i8,
        pub nMaxCard: u32,
        pub lpstrTitle: *const i8,
        pub dwFlags: u32,
        pub pvUserData: root::LPVOID,
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
        pub dwActiveProtocol: u32,
        pub lpfnConnect: root::LPOCNCONNPROCA,
        pub lpfnCheck: root::LPOCNCHKPROC,
        pub lpfnDisconnect: root::LPOCNDSCPROC,
        pub hCardHandle: root::SCARDHANDLE,
    }
    pub type POPENCARDNAMEA = *mut root::OPENCARDNAMEA;
    pub type LPOPENCARDNAMEA = *mut root::OPENCARDNAMEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct OPENCARDNAMEW {
        pub dwStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hSCardContext: root::SCARDCONTEXT,
        pub lpstrGroupNames: root::LPWSTR,
        pub nMaxGroupNames: u32,
        pub lpstrCardNames: root::LPWSTR,
        pub nMaxCardNames: u32,
        pub rgguidInterfaces: root::LPCGUID,
        pub cguidInterfaces: u32,
        pub lpstrRdr: root::LPWSTR,
        pub nMaxRdr: u32,
        pub lpstrCard: root::LPWSTR,
        pub nMaxCard: u32,
        pub lpstrTitle: root::LPCWSTR,
        pub dwFlags: u32,
        pub pvUserData: root::LPVOID,
        pub dwShareMode: u32,
        pub dwPreferredProtocols: u32,
        pub dwActiveProtocol: u32,
        pub lpfnConnect: root::LPOCNCONNPROCW,
        pub lpfnCheck: root::LPOCNCHKPROC,
        pub lpfnDisconnect: root::LPOCNDSCPROC,
        pub hCardHandle: root::SCARDHANDLE,
    }
    pub type POPENCARDNAMEW = *mut root::OPENCARDNAMEW;
    pub type LPOPENCARDNAMEW = *mut root::OPENCARDNAMEW;
    pub type OPENCARDNAME = root::OPENCARDNAMEA;
    pub type POPENCARDNAME = root::POPENCARDNAMEA;
    pub type LPOPENCARDNAME = root::LPOPENCARDNAMEA;
    extern "C" {
        pub fn GetOpenCardNameA(arg1: root::LPOPENCARDNAMEA) -> i32;
    }
    extern "C" {
        pub fn GetOpenCardNameW(arg1: root::LPOPENCARDNAMEW) -> i32;
    }
    extern "C" {
        pub fn SCardDlgExtendedError() -> i32;
    }
    extern "C" {
        pub fn SCardReadCacheA(
            hContext: root::SCARDCONTEXT,
            CardIdentifier: *mut root::UUID,
            FreshnessCounter: u32,
            LookupName: *mut i8,
            Data: root::PBYTE,
            DataLen: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardReadCacheW(
            hContext: root::SCARDCONTEXT,
            CardIdentifier: *mut root::UUID,
            FreshnessCounter: u32,
            LookupName: root::LPWSTR,
            Data: root::PBYTE,
            DataLen: *mut u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardWriteCacheA(
            hContext: root::SCARDCONTEXT,
            CardIdentifier: *mut root::UUID,
            FreshnessCounter: u32,
            LookupName: *mut i8,
            Data: root::PBYTE,
            DataLen: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardWriteCacheW(
            hContext: root::SCARDCONTEXT,
            CardIdentifier: *mut root::UUID,
            FreshnessCounter: u32,
            LookupName: root::LPWSTR,
            Data: root::PBYTE,
            DataLen: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetReaderIconA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
            pbIcon: root::LPBYTE,
            pcbIcon: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetReaderIconW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
            pbIcon: root::LPBYTE,
            pcbIcon: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetDeviceTypeIdA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
            pdwDeviceTypeId: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetDeviceTypeIdW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
            pdwDeviceTypeId: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetReaderDeviceInstanceIdA(
            hContext: root::SCARDCONTEXT,
            szReaderName: *const i8,
            szDeviceInstanceId: *mut i8,
            pcchDeviceInstanceId: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardGetReaderDeviceInstanceIdW(
            hContext: root::SCARDCONTEXT,
            szReaderName: root::LPCWSTR,
            szDeviceInstanceId: root::LPWSTR,
            pcchDeviceInstanceId: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListReadersWithDeviceInstanceIdA(
            hContext: root::SCARDCONTEXT,
            szDeviceInstanceId: *const i8,
            mszReaders: *mut i8,
            pcchReaders: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardListReadersWithDeviceInstanceIdW(
            hContext: root::SCARDCONTEXT,
            szDeviceInstanceId: root::LPCWSTR,
            mszReaders: root::LPWSTR,
            pcchReaders: root::LPDWORD,
        ) -> i32;
    }
    extern "C" {
        pub fn SCardAudit(hContext: root::SCARDCONTEXT, dwEvent: u32) -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PSP {
        _unused: [u8; 0],
    }
    pub type HPROPSHEETPAGE = *mut root::_PSP;
    pub type LPFNPSPCALLBACKA = ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: root::HWND,
            uMsg: root::UINT,
            ppsp: *mut root::_PROPSHEETPAGEA,
        ) -> root::UINT,
    >;
    pub type LPFNPSPCALLBACKW = ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: root::HWND,
            uMsg: root::UINT,
            ppsp: *mut root::_PROPSHEETPAGEW,
        ) -> root::UINT,
    >;
    pub type PROPSHEETPAGE_RESOURCE = root::LPCDLGTEMPLATE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEA_V1 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEA_V1__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEA_V1__bindgen_ty_2,
        pub pszTitle: *const i8,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKA,
        pub pcRefParent: *mut root::UINT,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA_V1__bindgen_ty_1 {
        pub pszTemplate: *const i8,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA_V1__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: *const i8,
    }
    pub type PROPSHEETPAGEA_V1 = root::_PROPSHEETPAGEA_V1;
    pub type LPPROPSHEETPAGEA_V1 = *mut root::_PROPSHEETPAGEA_V1;
    pub type LPCPROPSHEETPAGEA_V1 = *const root::PROPSHEETPAGEA_V1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEA_V2 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEA_V2__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEA_V2__bindgen_ty_2,
        pub pszTitle: *const i8,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKA,
        pub pcRefParent: *mut root::UINT,
        pub pszHeaderTitle: *const i8,
        pub pszHeaderSubTitle: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA_V2__bindgen_ty_1 {
        pub pszTemplate: *const i8,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA_V2__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: *const i8,
    }
    pub type PROPSHEETPAGEA_V2 = root::_PROPSHEETPAGEA_V2;
    pub type LPPROPSHEETPAGEA_V2 = *mut root::_PROPSHEETPAGEA_V2;
    pub type LPCPROPSHEETPAGEA_V2 = *const root::PROPSHEETPAGEA_V2;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEA_V3 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEA_V3__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEA_V3__bindgen_ty_2,
        pub pszTitle: *const i8,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKA,
        pub pcRefParent: *mut root::UINT,
        pub pszHeaderTitle: *const i8,
        pub pszHeaderSubTitle: *const i8,
        pub hActCtx: root::HANDLE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA_V3__bindgen_ty_1 {
        pub pszTemplate: *const i8,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA_V3__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: *const i8,
    }
    pub type PROPSHEETPAGEA_V3 = root::_PROPSHEETPAGEA_V3;
    pub type LPPROPSHEETPAGEA_V3 = *mut root::_PROPSHEETPAGEA_V3;
    pub type LPCPROPSHEETPAGEA_V3 = *const root::PROPSHEETPAGEA_V3;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEA {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEA__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEA__bindgen_ty_2,
        pub pszTitle: *const i8,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKA,
        pub pcRefParent: *mut root::UINT,
        pub pszHeaderTitle: *const i8,
        pub pszHeaderSubTitle: *const i8,
        pub hActCtx: root::HANDLE,
        pub __bindgen_anon_3: root::_PROPSHEETPAGEA__bindgen_ty_3,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA__bindgen_ty_1 {
        pub pszTemplate: *const i8,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEA__bindgen_ty_3 {
        pub hbmHeader: root::HBITMAP,
        pub pszbmHeader: *const i8,
    }
    pub type PROPSHEETPAGEA_V4 = root::_PROPSHEETPAGEA;
    pub type LPPROPSHEETPAGEA_V4 = *mut root::_PROPSHEETPAGEA;
    pub type LPCPROPSHEETPAGEA_V4 = *const root::PROPSHEETPAGEA_V4;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEW_V1 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEW_V1__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEW_V1__bindgen_ty_2,
        pub pszTitle: root::LPCWSTR,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKW,
        pub pcRefParent: *mut root::UINT,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW_V1__bindgen_ty_1 {
        pub pszTemplate: root::LPCWSTR,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW_V1__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: root::LPCWSTR,
    }
    pub type PROPSHEETPAGEW_V1 = root::_PROPSHEETPAGEW_V1;
    pub type LPPROPSHEETPAGEW_V1 = *mut root::_PROPSHEETPAGEW_V1;
    pub type LPCPROPSHEETPAGEW_V1 = *const root::PROPSHEETPAGEW_V1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEW_V2 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEW_V2__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEW_V2__bindgen_ty_2,
        pub pszTitle: root::LPCWSTR,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKW,
        pub pcRefParent: *mut root::UINT,
        pub pszHeaderTitle: root::LPCWSTR,
        pub pszHeaderSubTitle: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW_V2__bindgen_ty_1 {
        pub pszTemplate: root::LPCWSTR,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW_V2__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: root::LPCWSTR,
    }
    pub type PROPSHEETPAGEW_V2 = root::_PROPSHEETPAGEW_V2;
    pub type LPPROPSHEETPAGEW_V2 = *mut root::_PROPSHEETPAGEW_V2;
    pub type LPCPROPSHEETPAGEW_V2 = *const root::PROPSHEETPAGEW_V2;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEW_V3 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEW_V3__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEW_V3__bindgen_ty_2,
        pub pszTitle: root::LPCWSTR,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKW,
        pub pcRefParent: *mut root::UINT,
        pub pszHeaderTitle: root::LPCWSTR,
        pub pszHeaderSubTitle: root::LPCWSTR,
        pub hActCtx: root::HANDLE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW_V3__bindgen_ty_1 {
        pub pszTemplate: root::LPCWSTR,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW_V3__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: root::LPCWSTR,
    }
    pub type PROPSHEETPAGEW_V3 = root::_PROPSHEETPAGEW_V3;
    pub type LPPROPSHEETPAGEW_V3 = *mut root::_PROPSHEETPAGEW_V3;
    pub type LPCPROPSHEETPAGEW_V3 = *const root::PROPSHEETPAGEW_V3;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETPAGEW {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETPAGEW__bindgen_ty_1,
        pub __bindgen_anon_2: root::_PROPSHEETPAGEW__bindgen_ty_2,
        pub pszTitle: root::LPCWSTR,
        pub pfnDlgProc: root::DLGPROC,
        pub lParam: root::LPARAM,
        pub pfnCallback: root::LPFNPSPCALLBACKW,
        pub pcRefParent: *mut root::UINT,
        pub pszHeaderTitle: root::LPCWSTR,
        pub pszHeaderSubTitle: root::LPCWSTR,
        pub hActCtx: root::HANDLE,
        pub __bindgen_anon_3: root::_PROPSHEETPAGEW__bindgen_ty_3,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW__bindgen_ty_1 {
        pub pszTemplate: root::LPCWSTR,
        pub pResource: root::PROPSHEETPAGE_RESOURCE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW__bindgen_ty_2 {
        pub hIcon: root::HICON,
        pub pszIcon: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETPAGEW__bindgen_ty_3 {
        pub hbmHeader: root::HBITMAP,
        pub pszbmHeader: root::LPCWSTR,
    }
    pub type PROPSHEETPAGEW_V4 = root::_PROPSHEETPAGEW;
    pub type LPPROPSHEETPAGEW_V4 = *mut root::_PROPSHEETPAGEW;
    pub type LPCPROPSHEETPAGEW_V4 = *const root::PROPSHEETPAGEW_V4;
    pub type PROPSHEETPAGEA_LATEST = root::PROPSHEETPAGEA_V4;
    pub type PROPSHEETPAGEW_LATEST = root::PROPSHEETPAGEW_V4;
    pub type LPPROPSHEETPAGEA_LATEST = root::LPPROPSHEETPAGEA_V4;
    pub type LPPROPSHEETPAGEW_LATEST = root::LPPROPSHEETPAGEW_V4;
    pub type LPCPROPSHEETPAGEA_LATEST = root::LPCPROPSHEETPAGEA_V4;
    pub type LPCPROPSHEETPAGEW_LATEST = root::LPCPROPSHEETPAGEW_V4;
    pub type PROPSHEETPAGEA = root::PROPSHEETPAGEA_V4;
    pub type PROPSHEETPAGEW = root::PROPSHEETPAGEW_V4;
    pub type LPPROPSHEETPAGEA = root::LPPROPSHEETPAGEA_V4;
    pub type LPPROPSHEETPAGEW = root::LPPROPSHEETPAGEW_V4;
    pub type LPCPROPSHEETPAGEA = root::LPCPROPSHEETPAGEA_V4;
    pub type LPCPROPSHEETPAGEW = root::LPCPROPSHEETPAGEW_V4;
    pub type PFNPROPSHEETCALLBACK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::LPARAM,
        ) -> i32,
    >;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETHEADERA_V1 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hwndParent: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETHEADERA_V1__bindgen_ty_1,
        pub pszCaption: *const i8,
        pub nPages: root::UINT,
        pub __bindgen_anon_2: root::_PROPSHEETHEADERA_V1__bindgen_ty_2,
        pub __bindgen_anon_3: root::_PROPSHEETHEADERA_V1__bindgen_ty_3,
        pub pfnCallback: root::PFNPROPSHEETCALLBACK,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V1__bindgen_ty_1 {
        pub hIcon: root::HICON,
        pub pszIcon: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V1__bindgen_ty_2 {
        pub nStartPage: root::UINT,
        pub pStartPage: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V1__bindgen_ty_3 {
        pub ppsp: root::LPCPROPSHEETPAGEA,
        pub phpage: *mut root::HPROPSHEETPAGE,
    }
    pub type PROPSHEETHEADERA_V1 = root::_PROPSHEETHEADERA_V1;
    pub type LPPROPSHEETHEADERA_V1 = *mut root::_PROPSHEETHEADERA_V1;
    pub type LPCPROPSHEETHEADERA_V1 = *const root::PROPSHEETHEADERA_V1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETHEADERA_V2 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hwndParent: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETHEADERA_V2__bindgen_ty_1,
        pub pszCaption: *const i8,
        pub nPages: root::UINT,
        pub __bindgen_anon_2: root::_PROPSHEETHEADERA_V2__bindgen_ty_2,
        pub __bindgen_anon_3: root::_PROPSHEETHEADERA_V2__bindgen_ty_3,
        pub pfnCallback: root::PFNPROPSHEETCALLBACK,
        pub __bindgen_anon_4: root::_PROPSHEETHEADERA_V2__bindgen_ty_4,
        pub hplWatermark: root::HPALETTE,
        pub __bindgen_anon_5: root::_PROPSHEETHEADERA_V2__bindgen_ty_5,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V2__bindgen_ty_1 {
        pub hIcon: root::HICON,
        pub pszIcon: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V2__bindgen_ty_2 {
        pub nStartPage: root::UINT,
        pub pStartPage: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V2__bindgen_ty_3 {
        pub ppsp: root::LPCPROPSHEETPAGEA,
        pub phpage: *mut root::HPROPSHEETPAGE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V2__bindgen_ty_4 {
        pub hbmWatermark: root::HBITMAP,
        pub pszbmWatermark: *const i8,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERA_V2__bindgen_ty_5 {
        pub hbmHeader: root::HBITMAP,
        pub pszbmHeader: *const i8,
    }
    pub type PROPSHEETHEADERA_V2 = root::_PROPSHEETHEADERA_V2;
    pub type LPPROPSHEETHEADERA_V2 = *mut root::_PROPSHEETHEADERA_V2;
    pub type LPCPROPSHEETHEADERA_V2 = *const root::PROPSHEETHEADERA_V2;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETHEADERW_V1 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hwndParent: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETHEADERW_V1__bindgen_ty_1,
        pub pszCaption: root::LPCWSTR,
        pub nPages: root::UINT,
        pub __bindgen_anon_2: root::_PROPSHEETHEADERW_V1__bindgen_ty_2,
        pub __bindgen_anon_3: root::_PROPSHEETHEADERW_V1__bindgen_ty_3,
        pub pfnCallback: root::PFNPROPSHEETCALLBACK,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V1__bindgen_ty_1 {
        pub hIcon: root::HICON,
        pub pszIcon: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V1__bindgen_ty_2 {
        pub nStartPage: root::UINT,
        pub pStartPage: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V1__bindgen_ty_3 {
        pub ppsp: root::LPCPROPSHEETPAGEW,
        pub phpage: *mut root::HPROPSHEETPAGE,
    }
    pub type PROPSHEETHEADERW_V1 = root::_PROPSHEETHEADERW_V1;
    pub type LPPROPSHEETHEADERW_V1 = *mut root::_PROPSHEETHEADERW_V1;
    pub type LPCPROPSHEETHEADERW_V1 = *const root::PROPSHEETHEADERW_V1;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PROPSHEETHEADERW_V2 {
        pub dwSize: u32,
        pub dwFlags: u32,
        pub hwndParent: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub __bindgen_anon_1: root::_PROPSHEETHEADERW_V2__bindgen_ty_1,
        pub pszCaption: root::LPCWSTR,
        pub nPages: root::UINT,
        pub __bindgen_anon_2: root::_PROPSHEETHEADERW_V2__bindgen_ty_2,
        pub __bindgen_anon_3: root::_PROPSHEETHEADERW_V2__bindgen_ty_3,
        pub pfnCallback: root::PFNPROPSHEETCALLBACK,
        pub __bindgen_anon_4: root::_PROPSHEETHEADERW_V2__bindgen_ty_4,
        pub hplWatermark: root::HPALETTE,
        pub __bindgen_anon_5: root::_PROPSHEETHEADERW_V2__bindgen_ty_5,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V2__bindgen_ty_1 {
        pub hIcon: root::HICON,
        pub pszIcon: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V2__bindgen_ty_2 {
        pub nStartPage: root::UINT,
        pub pStartPage: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V2__bindgen_ty_3 {
        pub ppsp: root::LPCPROPSHEETPAGEW,
        pub phpage: *mut root::HPROPSHEETPAGE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V2__bindgen_ty_4 {
        pub hbmWatermark: root::HBITMAP,
        pub pszbmWatermark: root::LPCWSTR,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PROPSHEETHEADERW_V2__bindgen_ty_5 {
        pub hbmHeader: root::HBITMAP,
        pub pszbmHeader: root::LPCWSTR,
    }
    pub type PROPSHEETHEADERW_V2 = root::_PROPSHEETHEADERW_V2;
    pub type LPPROPSHEETHEADERW_V2 = *mut root::_PROPSHEETHEADERW_V2;
    pub type LPCPROPSHEETHEADERW_V2 = *const root::PROPSHEETHEADERW_V2;
    pub type PROPSHEETHEADERA = root::PROPSHEETHEADERA_V2;
    pub type PROPSHEETHEADERW = root::PROPSHEETHEADERW_V2;
    pub type LPPROPSHEETHEADERA = root::LPPROPSHEETHEADERA_V2;
    pub type LPPROPSHEETHEADERW = root::LPPROPSHEETHEADERW_V2;
    pub type LPCPROPSHEETHEADERA = root::LPCPROPSHEETHEADERA_V2;
    pub type LPCPROPSHEETHEADERW = root::LPCPROPSHEETHEADERW_V2;
    extern "C" {
        pub fn CreatePropertySheetPageA(
            constPropSheetPagePointer: root::LPCPROPSHEETPAGEA,
        ) -> root::HPROPSHEETPAGE;
    }
    extern "C" {
        pub fn CreatePropertySheetPageW(
            constPropSheetPagePointer: root::LPCPROPSHEETPAGEW,
        ) -> root::HPROPSHEETPAGE;
    }
    extern "C" {
        pub fn DestroyPropertySheetPage(arg1: root::HPROPSHEETPAGE) -> root::BOOL;
    }
    extern "C" {
        pub fn PropertySheetA(arg1: root::LPCPROPSHEETHEADERA) -> root::INT_PTR;
    }
    extern "C" {
        pub fn PropertySheetW(arg1: root::LPCPROPSHEETHEADERW) -> root::INT_PTR;
    }
    pub type LPFNADDPROPSHEETPAGE = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::HPROPSHEETPAGE, arg2: root::LPARAM) -> root::BOOL,
    >;
    pub type LPFNADDPROPSHEETPAGES = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPVOID,
            arg2: root::LPFNADDPROPSHEETPAGE,
            arg3: root::LPARAM,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PSHNOTIFY {
        pub hdr: root::NMHDR,
        pub lParam: root::LPARAM,
    }
    pub type PSHNOTIFY = root::_PSHNOTIFY;
    pub type LPPSHNOTIFY = *mut root::_PSHNOTIFY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_1A {
        pub Flags: u32,
        pub pDescription: *mut i8,
        pub pName: *mut i8,
        pub pComment: *mut i8,
    }
    pub type PRINTER_INFO_1A = root::_PRINTER_INFO_1A;
    pub type PPRINTER_INFO_1A = *mut root::_PRINTER_INFO_1A;
    pub type LPPRINTER_INFO_1A = *mut root::_PRINTER_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_1W {
        pub Flags: u32,
        pub pDescription: root::LPWSTR,
        pub pName: root::LPWSTR,
        pub pComment: root::LPWSTR,
    }
    pub type PRINTER_INFO_1W = root::_PRINTER_INFO_1W;
    pub type PPRINTER_INFO_1W = *mut root::_PRINTER_INFO_1W;
    pub type LPPRINTER_INFO_1W = *mut root::_PRINTER_INFO_1W;
    pub type PRINTER_INFO_1 = root::PRINTER_INFO_1A;
    pub type PPRINTER_INFO_1 = root::PPRINTER_INFO_1A;
    pub type LPPRINTER_INFO_1 = root::LPPRINTER_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_2A {
        pub pServerName: *mut i8,
        pub pPrinterName: *mut i8,
        pub pShareName: *mut i8,
        pub pPortName: *mut i8,
        pub pDriverName: *mut i8,
        pub pComment: *mut i8,
        pub pLocation: *mut i8,
        pub pDevMode: root::LPDEVMODEA,
        pub pSepFile: *mut i8,
        pub pPrintProcessor: *mut i8,
        pub pDatatype: *mut i8,
        pub pParameters: *mut i8,
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        pub Attributes: u32,
        pub Priority: u32,
        pub DefaultPriority: u32,
        pub StartTime: u32,
        pub UntilTime: u32,
        pub Status: u32,
        pub cJobs: u32,
        pub AveragePPM: u32,
    }
    pub type PRINTER_INFO_2A = root::_PRINTER_INFO_2A;
    pub type PPRINTER_INFO_2A = *mut root::_PRINTER_INFO_2A;
    pub type LPPRINTER_INFO_2A = *mut root::_PRINTER_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_2W {
        pub pServerName: root::LPWSTR,
        pub pPrinterName: root::LPWSTR,
        pub pShareName: root::LPWSTR,
        pub pPortName: root::LPWSTR,
        pub pDriverName: root::LPWSTR,
        pub pComment: root::LPWSTR,
        pub pLocation: root::LPWSTR,
        pub pDevMode: root::LPDEVMODEW,
        pub pSepFile: root::LPWSTR,
        pub pPrintProcessor: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
        pub pParameters: root::LPWSTR,
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        pub Attributes: u32,
        pub Priority: u32,
        pub DefaultPriority: u32,
        pub StartTime: u32,
        pub UntilTime: u32,
        pub Status: u32,
        pub cJobs: u32,
        pub AveragePPM: u32,
    }
    pub type PRINTER_INFO_2W = root::_PRINTER_INFO_2W;
    pub type PPRINTER_INFO_2W = *mut root::_PRINTER_INFO_2W;
    pub type LPPRINTER_INFO_2W = *mut root::_PRINTER_INFO_2W;
    pub type PRINTER_INFO_2 = root::PRINTER_INFO_2A;
    pub type PPRINTER_INFO_2 = root::PPRINTER_INFO_2A;
    pub type LPPRINTER_INFO_2 = root::LPPRINTER_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_3 {
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
    }
    pub type PRINTER_INFO_3 = root::_PRINTER_INFO_3;
    pub type PPRINTER_INFO_3 = *mut root::_PRINTER_INFO_3;
    pub type LPPRINTER_INFO_3 = *mut root::_PRINTER_INFO_3;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_4A {
        pub pPrinterName: *mut i8,
        pub pServerName: *mut i8,
        pub Attributes: u32,
    }
    pub type PRINTER_INFO_4A = root::_PRINTER_INFO_4A;
    pub type PPRINTER_INFO_4A = *mut root::_PRINTER_INFO_4A;
    pub type LPPRINTER_INFO_4A = *mut root::_PRINTER_INFO_4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_4W {
        pub pPrinterName: root::LPWSTR,
        pub pServerName: root::LPWSTR,
        pub Attributes: u32,
    }
    pub type PRINTER_INFO_4W = root::_PRINTER_INFO_4W;
    pub type PPRINTER_INFO_4W = *mut root::_PRINTER_INFO_4W;
    pub type LPPRINTER_INFO_4W = *mut root::_PRINTER_INFO_4W;
    pub type PRINTER_INFO_4 = root::PRINTER_INFO_4A;
    pub type PPRINTER_INFO_4 = root::PPRINTER_INFO_4A;
    pub type LPPRINTER_INFO_4 = root::LPPRINTER_INFO_4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_5A {
        pub pPrinterName: *mut i8,
        pub pPortName: *mut i8,
        pub Attributes: u32,
        pub DeviceNotSelectedTimeout: u32,
        pub TransmissionRetryTimeout: u32,
    }
    pub type PRINTER_INFO_5A = root::_PRINTER_INFO_5A;
    pub type PPRINTER_INFO_5A = *mut root::_PRINTER_INFO_5A;
    pub type LPPRINTER_INFO_5A = *mut root::_PRINTER_INFO_5A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_5W {
        pub pPrinterName: root::LPWSTR,
        pub pPortName: root::LPWSTR,
        pub Attributes: u32,
        pub DeviceNotSelectedTimeout: u32,
        pub TransmissionRetryTimeout: u32,
    }
    pub type PRINTER_INFO_5W = root::_PRINTER_INFO_5W;
    pub type PPRINTER_INFO_5W = *mut root::_PRINTER_INFO_5W;
    pub type LPPRINTER_INFO_5W = *mut root::_PRINTER_INFO_5W;
    pub type PRINTER_INFO_5 = root::PRINTER_INFO_5A;
    pub type PPRINTER_INFO_5 = root::PPRINTER_INFO_5A;
    pub type LPPRINTER_INFO_5 = root::LPPRINTER_INFO_5A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_6 {
        pub dwStatus: u32,
    }
    pub type PRINTER_INFO_6 = root::_PRINTER_INFO_6;
    pub type PPRINTER_INFO_6 = *mut root::_PRINTER_INFO_6;
    pub type LPPRINTER_INFO_6 = *mut root::_PRINTER_INFO_6;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_7A {
        pub pszObjectGUID: *mut i8,
        pub dwAction: u32,
    }
    pub type PRINTER_INFO_7A = root::_PRINTER_INFO_7A;
    pub type PPRINTER_INFO_7A = *mut root::_PRINTER_INFO_7A;
    pub type LPPRINTER_INFO_7A = *mut root::_PRINTER_INFO_7A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_7W {
        pub pszObjectGUID: root::LPWSTR,
        pub dwAction: u32,
    }
    pub type PRINTER_INFO_7W = root::_PRINTER_INFO_7W;
    pub type PPRINTER_INFO_7W = *mut root::_PRINTER_INFO_7W;
    pub type LPPRINTER_INFO_7W = *mut root::_PRINTER_INFO_7W;
    pub type PRINTER_INFO_7 = root::PRINTER_INFO_7A;
    pub type PPRINTER_INFO_7 = root::PPRINTER_INFO_7A;
    pub type LPPRINTER_INFO_7 = root::LPPRINTER_INFO_7A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_8A {
        pub pDevMode: root::LPDEVMODEA,
    }
    pub type PRINTER_INFO_8A = root::_PRINTER_INFO_8A;
    pub type PPRINTER_INFO_8A = *mut root::_PRINTER_INFO_8A;
    pub type LPPRINTER_INFO_8A = *mut root::_PRINTER_INFO_8A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_8W {
        pub pDevMode: root::LPDEVMODEW,
    }
    pub type PRINTER_INFO_8W = root::_PRINTER_INFO_8W;
    pub type PPRINTER_INFO_8W = *mut root::_PRINTER_INFO_8W;
    pub type LPPRINTER_INFO_8W = *mut root::_PRINTER_INFO_8W;
    pub type PRINTER_INFO_8 = root::PRINTER_INFO_8A;
    pub type PPRINTER_INFO_8 = root::PPRINTER_INFO_8A;
    pub type LPPRINTER_INFO_8 = root::LPPRINTER_INFO_8A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_9A {
        pub pDevMode: root::LPDEVMODEA,
    }
    pub type PRINTER_INFO_9A = root::_PRINTER_INFO_9A;
    pub type PPRINTER_INFO_9A = *mut root::_PRINTER_INFO_9A;
    pub type LPPRINTER_INFO_9A = *mut root::_PRINTER_INFO_9A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_INFO_9W {
        pub pDevMode: root::LPDEVMODEW,
    }
    pub type PRINTER_INFO_9W = root::_PRINTER_INFO_9W;
    pub type PPRINTER_INFO_9W = *mut root::_PRINTER_INFO_9W;
    pub type LPPRINTER_INFO_9W = *mut root::_PRINTER_INFO_9W;
    pub type PRINTER_INFO_9 = root::PRINTER_INFO_9A;
    pub type PPRINTER_INFO_9 = root::PPRINTER_INFO_9A;
    pub type LPPRINTER_INFO_9 = root::LPPRINTER_INFO_9A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_1A {
        pub JobId: u32,
        pub pPrinterName: *mut i8,
        pub pMachineName: *mut i8,
        pub pUserName: *mut i8,
        pub pDocument: *mut i8,
        pub pDatatype: *mut i8,
        pub pStatus: *mut i8,
        pub Status: u32,
        pub Priority: u32,
        pub Position: u32,
        pub TotalPages: u32,
        pub PagesPrinted: u32,
        pub Submitted: root::SYSTEMTIME,
    }
    pub type JOB_INFO_1A = root::_JOB_INFO_1A;
    pub type PJOB_INFO_1A = *mut root::_JOB_INFO_1A;
    pub type LPJOB_INFO_1A = *mut root::_JOB_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_1W {
        pub JobId: u32,
        pub pPrinterName: root::LPWSTR,
        pub pMachineName: root::LPWSTR,
        pub pUserName: root::LPWSTR,
        pub pDocument: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
        pub pStatus: root::LPWSTR,
        pub Status: u32,
        pub Priority: u32,
        pub Position: u32,
        pub TotalPages: u32,
        pub PagesPrinted: u32,
        pub Submitted: root::SYSTEMTIME,
    }
    pub type JOB_INFO_1W = root::_JOB_INFO_1W;
    pub type PJOB_INFO_1W = *mut root::_JOB_INFO_1W;
    pub type LPJOB_INFO_1W = *mut root::_JOB_INFO_1W;
    pub type JOB_INFO_1 = root::JOB_INFO_1A;
    pub type PJOB_INFO_1 = root::PJOB_INFO_1A;
    pub type LPJOB_INFO_1 = root::LPJOB_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_2A {
        pub JobId: u32,
        pub pPrinterName: *mut i8,
        pub pMachineName: *mut i8,
        pub pUserName: *mut i8,
        pub pDocument: *mut i8,
        pub pNotifyName: *mut i8,
        pub pDatatype: *mut i8,
        pub pPrintProcessor: *mut i8,
        pub pParameters: *mut i8,
        pub pDriverName: *mut i8,
        pub pDevMode: root::LPDEVMODEA,
        pub pStatus: *mut i8,
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        pub Status: u32,
        pub Priority: u32,
        pub Position: u32,
        pub StartTime: u32,
        pub UntilTime: u32,
        pub TotalPages: u32,
        pub Size: u32,
        pub Submitted: root::SYSTEMTIME,
        pub Time: u32,
        pub PagesPrinted: u32,
    }
    pub type JOB_INFO_2A = root::_JOB_INFO_2A;
    pub type PJOB_INFO_2A = *mut root::_JOB_INFO_2A;
    pub type LPJOB_INFO_2A = *mut root::_JOB_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_2W {
        pub JobId: u32,
        pub pPrinterName: root::LPWSTR,
        pub pMachineName: root::LPWSTR,
        pub pUserName: root::LPWSTR,
        pub pDocument: root::LPWSTR,
        pub pNotifyName: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
        pub pPrintProcessor: root::LPWSTR,
        pub pParameters: root::LPWSTR,
        pub pDriverName: root::LPWSTR,
        pub pDevMode: root::LPDEVMODEW,
        pub pStatus: root::LPWSTR,
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        pub Status: u32,
        pub Priority: u32,
        pub Position: u32,
        pub StartTime: u32,
        pub UntilTime: u32,
        pub TotalPages: u32,
        pub Size: u32,
        pub Submitted: root::SYSTEMTIME,
        pub Time: u32,
        pub PagesPrinted: u32,
    }
    pub type JOB_INFO_2W = root::_JOB_INFO_2W;
    pub type PJOB_INFO_2W = *mut root::_JOB_INFO_2W;
    pub type LPJOB_INFO_2W = *mut root::_JOB_INFO_2W;
    pub type JOB_INFO_2 = root::JOB_INFO_2A;
    pub type PJOB_INFO_2 = root::PJOB_INFO_2A;
    pub type LPJOB_INFO_2 = root::LPJOB_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_3 {
        pub JobId: u32,
        pub NextJobId: u32,
        pub Reserved: u32,
    }
    pub type JOB_INFO_3 = root::_JOB_INFO_3;
    pub type PJOB_INFO_3 = *mut root::_JOB_INFO_3;
    pub type LPJOB_INFO_3 = *mut root::_JOB_INFO_3;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_4A {
        pub JobId: u32,
        pub pPrinterName: *mut i8,
        pub pMachineName: *mut i8,
        pub pUserName: *mut i8,
        pub pDocument: *mut i8,
        pub pNotifyName: *mut i8,
        pub pDatatype: *mut i8,
        pub pPrintProcessor: *mut i8,
        pub pParameters: *mut i8,
        pub pDriverName: *mut i8,
        pub pDevMode: root::LPDEVMODEA,
        pub pStatus: *mut i8,
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        pub Status: u32,
        pub Priority: u32,
        pub Position: u32,
        pub StartTime: u32,
        pub UntilTime: u32,
        pub TotalPages: u32,
        pub Size: u32,
        pub Submitted: root::SYSTEMTIME,
        pub Time: u32,
        pub PagesPrinted: u32,
        pub SizeHigh: i32,
    }
    pub type JOB_INFO_4A = root::_JOB_INFO_4A;
    pub type PJOB_INFO_4A = *mut root::_JOB_INFO_4A;
    pub type LPJOB_INFO_4A = *mut root::_JOB_INFO_4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _JOB_INFO_4W {
        pub JobId: u32,
        pub pPrinterName: root::LPWSTR,
        pub pMachineName: root::LPWSTR,
        pub pUserName: root::LPWSTR,
        pub pDocument: root::LPWSTR,
        pub pNotifyName: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
        pub pPrintProcessor: root::LPWSTR,
        pub pParameters: root::LPWSTR,
        pub pDriverName: root::LPWSTR,
        pub pDevMode: root::LPDEVMODEW,
        pub pStatus: root::LPWSTR,
        pub pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        pub Status: u32,
        pub Priority: u32,
        pub Position: u32,
        pub StartTime: u32,
        pub UntilTime: u32,
        pub TotalPages: u32,
        pub Size: u32,
        pub Submitted: root::SYSTEMTIME,
        pub Time: u32,
        pub PagesPrinted: u32,
        pub SizeHigh: i32,
    }
    pub type JOB_INFO_4W = root::_JOB_INFO_4W;
    pub type PJOB_INFO_4W = *mut root::_JOB_INFO_4W;
    pub type LPJOB_INFO_4W = *mut root::_JOB_INFO_4W;
    pub type JOB_INFO_4 = root::JOB_INFO_4A;
    pub type PJOB_INFO_4 = root::PJOB_INFO_4A;
    pub type LPJOB_INFO_4 = root::LPJOB_INFO_4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ADDJOB_INFO_1A {
        pub Path: *mut i8,
        pub JobId: u32,
    }
    pub type ADDJOB_INFO_1A = root::_ADDJOB_INFO_1A;
    pub type PADDJOB_INFO_1A = *mut root::_ADDJOB_INFO_1A;
    pub type LPADDJOB_INFO_1A = *mut root::_ADDJOB_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ADDJOB_INFO_1W {
        pub Path: root::LPWSTR,
        pub JobId: u32,
    }
    pub type ADDJOB_INFO_1W = root::_ADDJOB_INFO_1W;
    pub type PADDJOB_INFO_1W = *mut root::_ADDJOB_INFO_1W;
    pub type LPADDJOB_INFO_1W = *mut root::_ADDJOB_INFO_1W;
    pub type ADDJOB_INFO_1 = root::ADDJOB_INFO_1A;
    pub type PADDJOB_INFO_1 = root::PADDJOB_INFO_1A;
    pub type LPADDJOB_INFO_1 = root::LPADDJOB_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_1A {
        pub pName: *mut i8,
    }
    pub type DRIVER_INFO_1A = root::_DRIVER_INFO_1A;
    pub type PDRIVER_INFO_1A = *mut root::_DRIVER_INFO_1A;
    pub type LPDRIVER_INFO_1A = *mut root::_DRIVER_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_1W {
        pub pName: root::LPWSTR,
    }
    pub type DRIVER_INFO_1W = root::_DRIVER_INFO_1W;
    pub type PDRIVER_INFO_1W = *mut root::_DRIVER_INFO_1W;
    pub type LPDRIVER_INFO_1W = *mut root::_DRIVER_INFO_1W;
    pub type DRIVER_INFO_1 = root::DRIVER_INFO_1A;
    pub type PDRIVER_INFO_1 = root::PDRIVER_INFO_1A;
    pub type LPDRIVER_INFO_1 = root::LPDRIVER_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_2A {
        pub cVersion: u32,
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDriverPath: *mut i8,
        pub pDataFile: *mut i8,
        pub pConfigFile: *mut i8,
    }
    pub type DRIVER_INFO_2A = root::_DRIVER_INFO_2A;
    pub type PDRIVER_INFO_2A = *mut root::_DRIVER_INFO_2A;
    pub type LPDRIVER_INFO_2A = *mut root::_DRIVER_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_2W {
        pub cVersion: u32,
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDriverPath: root::LPWSTR,
        pub pDataFile: root::LPWSTR,
        pub pConfigFile: root::LPWSTR,
    }
    pub type DRIVER_INFO_2W = root::_DRIVER_INFO_2W;
    pub type PDRIVER_INFO_2W = *mut root::_DRIVER_INFO_2W;
    pub type LPDRIVER_INFO_2W = *mut root::_DRIVER_INFO_2W;
    pub type DRIVER_INFO_2 = root::DRIVER_INFO_2A;
    pub type PDRIVER_INFO_2 = root::PDRIVER_INFO_2A;
    pub type LPDRIVER_INFO_2 = root::LPDRIVER_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_3A {
        pub cVersion: u32,
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDriverPath: *mut i8,
        pub pDataFile: *mut i8,
        pub pConfigFile: *mut i8,
        pub pHelpFile: *mut i8,
        pub pDependentFiles: *mut i8,
        pub pMonitorName: *mut i8,
        pub pDefaultDataType: *mut i8,
    }
    pub type DRIVER_INFO_3A = root::_DRIVER_INFO_3A;
    pub type PDRIVER_INFO_3A = *mut root::_DRIVER_INFO_3A;
    pub type LPDRIVER_INFO_3A = *mut root::_DRIVER_INFO_3A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_3W {
        pub cVersion: u32,
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDriverPath: root::LPWSTR,
        pub pDataFile: root::LPWSTR,
        pub pConfigFile: root::LPWSTR,
        pub pHelpFile: root::LPWSTR,
        pub pDependentFiles: root::LPWSTR,
        pub pMonitorName: root::LPWSTR,
        pub pDefaultDataType: root::LPWSTR,
    }
    pub type DRIVER_INFO_3W = root::_DRIVER_INFO_3W;
    pub type PDRIVER_INFO_3W = *mut root::_DRIVER_INFO_3W;
    pub type LPDRIVER_INFO_3W = *mut root::_DRIVER_INFO_3W;
    pub type DRIVER_INFO_3 = root::DRIVER_INFO_3A;
    pub type PDRIVER_INFO_3 = root::PDRIVER_INFO_3A;
    pub type LPDRIVER_INFO_3 = root::LPDRIVER_INFO_3A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_4A {
        pub cVersion: u32,
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDriverPath: *mut i8,
        pub pDataFile: *mut i8,
        pub pConfigFile: *mut i8,
        pub pHelpFile: *mut i8,
        pub pDependentFiles: *mut i8,
        pub pMonitorName: *mut i8,
        pub pDefaultDataType: *mut i8,
        pub pszzPreviousNames: *mut i8,
    }
    pub type DRIVER_INFO_4A = root::_DRIVER_INFO_4A;
    pub type PDRIVER_INFO_4A = *mut root::_DRIVER_INFO_4A;
    pub type LPDRIVER_INFO_4A = *mut root::_DRIVER_INFO_4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_4W {
        pub cVersion: u32,
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDriverPath: root::LPWSTR,
        pub pDataFile: root::LPWSTR,
        pub pConfigFile: root::LPWSTR,
        pub pHelpFile: root::LPWSTR,
        pub pDependentFiles: root::LPWSTR,
        pub pMonitorName: root::LPWSTR,
        pub pDefaultDataType: root::LPWSTR,
        pub pszzPreviousNames: root::LPWSTR,
    }
    pub type DRIVER_INFO_4W = root::_DRIVER_INFO_4W;
    pub type PDRIVER_INFO_4W = *mut root::_DRIVER_INFO_4W;
    pub type LPDRIVER_INFO_4W = *mut root::_DRIVER_INFO_4W;
    pub type DRIVER_INFO_4 = root::DRIVER_INFO_4A;
    pub type PDRIVER_INFO_4 = root::PDRIVER_INFO_4A;
    pub type LPDRIVER_INFO_4 = root::LPDRIVER_INFO_4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_5A {
        pub cVersion: u32,
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDriverPath: *mut i8,
        pub pDataFile: *mut i8,
        pub pConfigFile: *mut i8,
        pub dwDriverAttributes: u32,
        pub dwConfigVersion: u32,
        pub dwDriverVersion: u32,
    }
    pub type DRIVER_INFO_5A = root::_DRIVER_INFO_5A;
    pub type PDRIVER_INFO_5A = *mut root::_DRIVER_INFO_5A;
    pub type LPDRIVER_INFO_5A = *mut root::_DRIVER_INFO_5A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_5W {
        pub cVersion: u32,
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDriverPath: root::LPWSTR,
        pub pDataFile: root::LPWSTR,
        pub pConfigFile: root::LPWSTR,
        pub dwDriverAttributes: u32,
        pub dwConfigVersion: u32,
        pub dwDriverVersion: u32,
    }
    pub type DRIVER_INFO_5W = root::_DRIVER_INFO_5W;
    pub type PDRIVER_INFO_5W = *mut root::_DRIVER_INFO_5W;
    pub type LPDRIVER_INFO_5W = *mut root::_DRIVER_INFO_5W;
    pub type DRIVER_INFO_5 = root::DRIVER_INFO_5A;
    pub type PDRIVER_INFO_5 = root::PDRIVER_INFO_5A;
    pub type LPDRIVER_INFO_5 = root::LPDRIVER_INFO_5A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_6A {
        pub cVersion: u32,
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDriverPath: *mut i8,
        pub pDataFile: *mut i8,
        pub pConfigFile: *mut i8,
        pub pHelpFile: *mut i8,
        pub pDependentFiles: *mut i8,
        pub pMonitorName: *mut i8,
        pub pDefaultDataType: *mut i8,
        pub pszzPreviousNames: *mut i8,
        pub ftDriverDate: root::FILETIME,
        pub dwlDriverVersion: root::DWORDLONG,
        pub pszMfgName: *mut i8,
        pub pszOEMUrl: *mut i8,
        pub pszHardwareID: *mut i8,
        pub pszProvider: *mut i8,
    }
    pub type DRIVER_INFO_6A = root::_DRIVER_INFO_6A;
    pub type PDRIVER_INFO_6A = *mut root::_DRIVER_INFO_6A;
    pub type LPDRIVER_INFO_6A = *mut root::_DRIVER_INFO_6A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_6W {
        pub cVersion: u32,
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDriverPath: root::LPWSTR,
        pub pDataFile: root::LPWSTR,
        pub pConfigFile: root::LPWSTR,
        pub pHelpFile: root::LPWSTR,
        pub pDependentFiles: root::LPWSTR,
        pub pMonitorName: root::LPWSTR,
        pub pDefaultDataType: root::LPWSTR,
        pub pszzPreviousNames: root::LPWSTR,
        pub ftDriverDate: root::FILETIME,
        pub dwlDriverVersion: root::DWORDLONG,
        pub pszMfgName: root::LPWSTR,
        pub pszOEMUrl: root::LPWSTR,
        pub pszHardwareID: root::LPWSTR,
        pub pszProvider: root::LPWSTR,
    }
    pub type DRIVER_INFO_6W = root::_DRIVER_INFO_6W;
    pub type PDRIVER_INFO_6W = *mut root::_DRIVER_INFO_6W;
    pub type LPDRIVER_INFO_6W = *mut root::_DRIVER_INFO_6W;
    pub type DRIVER_INFO_6 = root::DRIVER_INFO_6A;
    pub type PDRIVER_INFO_6 = root::PDRIVER_INFO_6A;
    pub type LPDRIVER_INFO_6 = root::LPDRIVER_INFO_6A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_8A {
        pub cVersion: u32,
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDriverPath: *mut i8,
        pub pDataFile: *mut i8,
        pub pConfigFile: *mut i8,
        pub pHelpFile: *mut i8,
        pub pDependentFiles: *mut i8,
        pub pMonitorName: *mut i8,
        pub pDefaultDataType: *mut i8,
        pub pszzPreviousNames: *mut i8,
        pub ftDriverDate: root::FILETIME,
        pub dwlDriverVersion: root::DWORDLONG,
        pub pszMfgName: *mut i8,
        pub pszOEMUrl: *mut i8,
        pub pszHardwareID: *mut i8,
        pub pszProvider: *mut i8,
        pub pszPrintProcessor: *mut i8,
        pub pszVendorSetup: *mut i8,
        pub pszzColorProfiles: *mut i8,
        pub pszInfPath: *mut i8,
        pub dwPrinterDriverAttributes: u32,
        pub pszzCoreDriverDependencies: *mut i8,
        pub ftMinInboxDriverVerDate: root::FILETIME,
        pub dwlMinInboxDriverVerVersion: root::DWORDLONG,
    }
    pub type DRIVER_INFO_8A = root::_DRIVER_INFO_8A;
    pub type PDRIVER_INFO_8A = *mut root::_DRIVER_INFO_8A;
    pub type LPDRIVER_INFO_8A = *mut root::_DRIVER_INFO_8A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DRIVER_INFO_8W {
        pub cVersion: u32,
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDriverPath: root::LPWSTR,
        pub pDataFile: root::LPWSTR,
        pub pConfigFile: root::LPWSTR,
        pub pHelpFile: root::LPWSTR,
        pub pDependentFiles: root::LPWSTR,
        pub pMonitorName: root::LPWSTR,
        pub pDefaultDataType: root::LPWSTR,
        pub pszzPreviousNames: root::LPWSTR,
        pub ftDriverDate: root::FILETIME,
        pub dwlDriverVersion: root::DWORDLONG,
        pub pszMfgName: root::LPWSTR,
        pub pszOEMUrl: root::LPWSTR,
        pub pszHardwareID: root::LPWSTR,
        pub pszProvider: root::LPWSTR,
        pub pszPrintProcessor: root::LPWSTR,
        pub pszVendorSetup: root::LPWSTR,
        pub pszzColorProfiles: root::LPWSTR,
        pub pszInfPath: root::LPWSTR,
        pub dwPrinterDriverAttributes: u32,
        pub pszzCoreDriverDependencies: root::LPWSTR,
        pub ftMinInboxDriverVerDate: root::FILETIME,
        pub dwlMinInboxDriverVerVersion: root::DWORDLONG,
    }
    pub type DRIVER_INFO_8W = root::_DRIVER_INFO_8W;
    pub type PDRIVER_INFO_8W = *mut root::_DRIVER_INFO_8W;
    pub type LPDRIVER_INFO_8W = *mut root::_DRIVER_INFO_8W;
    pub type DRIVER_INFO_8 = root::DRIVER_INFO_8A;
    pub type PDRIVER_INFO_8 = root::PDRIVER_INFO_8A;
    pub type LPDRIVER_INFO_8 = root::LPDRIVER_INFO_8A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOC_INFO_1A {
        pub pDocName: *mut i8,
        pub pOutputFile: *mut i8,
        pub pDatatype: *mut i8,
    }
    pub type DOC_INFO_1A = root::_DOC_INFO_1A;
    pub type PDOC_INFO_1A = *mut root::_DOC_INFO_1A;
    pub type LPDOC_INFO_1A = *mut root::_DOC_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOC_INFO_1W {
        pub pDocName: root::LPWSTR,
        pub pOutputFile: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
    }
    pub type DOC_INFO_1W = root::_DOC_INFO_1W;
    pub type PDOC_INFO_1W = *mut root::_DOC_INFO_1W;
    pub type LPDOC_INFO_1W = *mut root::_DOC_INFO_1W;
    pub type DOC_INFO_1 = root::DOC_INFO_1A;
    pub type PDOC_INFO_1 = root::PDOC_INFO_1A;
    pub type LPDOC_INFO_1 = root::LPDOC_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FORM_INFO_1A {
        pub Flags: u32,
        pub pName: *mut i8,
        pub Size: root::SIZEL,
        pub ImageableArea: root::RECTL,
    }
    pub type FORM_INFO_1A = root::_FORM_INFO_1A;
    pub type PFORM_INFO_1A = *mut root::_FORM_INFO_1A;
    pub type LPFORM_INFO_1A = *mut root::_FORM_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FORM_INFO_1W {
        pub Flags: u32,
        pub pName: root::LPWSTR,
        pub Size: root::SIZEL,
        pub ImageableArea: root::RECTL,
    }
    pub type FORM_INFO_1W = root::_FORM_INFO_1W;
    pub type PFORM_INFO_1W = *mut root::_FORM_INFO_1W;
    pub type LPFORM_INFO_1W = *mut root::_FORM_INFO_1W;
    pub type FORM_INFO_1 = root::FORM_INFO_1A;
    pub type PFORM_INFO_1 = root::PFORM_INFO_1A;
    pub type LPFORM_INFO_1 = root::LPFORM_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FORM_INFO_2A {
        pub Flags: u32,
        pub pName: *const i8,
        pub Size: root::SIZEL,
        pub ImageableArea: root::RECTL,
        pub pKeyword: *const i8,
        pub StringType: u32,
        pub pMuiDll: *const i8,
        pub dwResourceId: u32,
        pub pDisplayName: *const i8,
        pub wLangId: root::LANGID,
    }
    pub type FORM_INFO_2A = root::_FORM_INFO_2A;
    pub type PFORM_INFO_2A = *mut root::_FORM_INFO_2A;
    pub type LPFORM_INFO_2A = *mut root::_FORM_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _FORM_INFO_2W {
        pub Flags: u32,
        pub pName: root::LPCWSTR,
        pub Size: root::SIZEL,
        pub ImageableArea: root::RECTL,
        pub pKeyword: *const i8,
        pub StringType: u32,
        pub pMuiDll: root::LPCWSTR,
        pub dwResourceId: u32,
        pub pDisplayName: root::LPCWSTR,
        pub wLangId: root::LANGID,
    }
    pub type FORM_INFO_2W = root::_FORM_INFO_2W;
    pub type PFORM_INFO_2W = *mut root::_FORM_INFO_2W;
    pub type LPFORM_INFO_2W = *mut root::_FORM_INFO_2W;
    pub type FORM_INFO_2 = root::FORM_INFO_2A;
    pub type PFORM_INFO_2 = root::PFORM_INFO_2A;
    pub type LPFORM_INFO_2 = root::LPFORM_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOC_INFO_2A {
        pub pDocName: *mut i8,
        pub pOutputFile: *mut i8,
        pub pDatatype: *mut i8,
        pub dwMode: u32,
        pub JobId: u32,
    }
    pub type DOC_INFO_2A = root::_DOC_INFO_2A;
    pub type PDOC_INFO_2A = *mut root::_DOC_INFO_2A;
    pub type LPDOC_INFO_2A = *mut root::_DOC_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOC_INFO_2W {
        pub pDocName: root::LPWSTR,
        pub pOutputFile: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
        pub dwMode: u32,
        pub JobId: u32,
    }
    pub type DOC_INFO_2W = root::_DOC_INFO_2W;
    pub type PDOC_INFO_2W = *mut root::_DOC_INFO_2W;
    pub type LPDOC_INFO_2W = *mut root::_DOC_INFO_2W;
    pub type DOC_INFO_2 = root::DOC_INFO_2A;
    pub type PDOC_INFO_2 = root::PDOC_INFO_2A;
    pub type LPDOC_INFO_2 = root::LPDOC_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOC_INFO_3A {
        pub pDocName: *mut i8,
        pub pOutputFile: *mut i8,
        pub pDatatype: *mut i8,
        pub dwFlags: u32,
    }
    pub type DOC_INFO_3A = root::_DOC_INFO_3A;
    pub type PDOC_INFO_3A = *mut root::_DOC_INFO_3A;
    pub type LPDOC_INFO_3A = *mut root::_DOC_INFO_3A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DOC_INFO_3W {
        pub pDocName: root::LPWSTR,
        pub pOutputFile: root::LPWSTR,
        pub pDatatype: root::LPWSTR,
        pub dwFlags: u32,
    }
    pub type DOC_INFO_3W = root::_DOC_INFO_3W;
    pub type PDOC_INFO_3W = *mut root::_DOC_INFO_3W;
    pub type LPDOC_INFO_3W = *mut root::_DOC_INFO_3W;
    pub type DOC_INFO_3 = root::DOC_INFO_3A;
    pub type PDOC_INFO_3 = root::PDOC_INFO_3A;
    pub type LPDOC_INFO_3 = root::LPDOC_INFO_3A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTPROCESSOR_INFO_1A {
        pub pName: *mut i8,
    }
    pub type PRINTPROCESSOR_INFO_1A = root::_PRINTPROCESSOR_INFO_1A;
    pub type PPRINTPROCESSOR_INFO_1A = *mut root::_PRINTPROCESSOR_INFO_1A;
    pub type LPPRINTPROCESSOR_INFO_1A = *mut root::_PRINTPROCESSOR_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTPROCESSOR_INFO_1W {
        pub pName: root::LPWSTR,
    }
    pub type PRINTPROCESSOR_INFO_1W = root::_PRINTPROCESSOR_INFO_1W;
    pub type PPRINTPROCESSOR_INFO_1W = *mut root::_PRINTPROCESSOR_INFO_1W;
    pub type LPPRINTPROCESSOR_INFO_1W = *mut root::_PRINTPROCESSOR_INFO_1W;
    pub type PRINTPROCESSOR_INFO_1 = root::PRINTPROCESSOR_INFO_1A;
    pub type PPRINTPROCESSOR_INFO_1 = root::PPRINTPROCESSOR_INFO_1A;
    pub type LPPRINTPROCESSOR_INFO_1 = root::LPPRINTPROCESSOR_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTPROCESSOR_CAPS_1 {
        pub dwLevel: u32,
        pub dwNupOptions: u32,
        pub dwPageOrderFlags: u32,
        pub dwNumberOfCopies: u32,
    }
    pub type PRINTPROCESSOR_CAPS_1 = root::_PRINTPROCESSOR_CAPS_1;
    pub type PPRINTPROCESSOR_CAPS_1 = *mut root::_PRINTPROCESSOR_CAPS_1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTPROCESSOR_CAPS_2 {
        pub dwLevel: u32,
        pub dwNupOptions: u32,
        pub dwPageOrderFlags: u32,
        pub dwNumberOfCopies: u32,
        pub dwDuplexHandlingCaps: u32,
        pub dwNupDirectionCaps: u32,
        pub dwNupBorderCaps: u32,
        pub dwBookletHandlingCaps: u32,
        pub dwScalingCaps: u32,
    }
    pub type PRINTPROCESSOR_CAPS_2 = root::_PRINTPROCESSOR_CAPS_2;
    pub type PPRINTPROCESSOR_CAPS_2 = *mut root::_PRINTPROCESSOR_CAPS_2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PORT_INFO_1A {
        pub pName: *mut i8,
    }
    pub type PORT_INFO_1A = root::_PORT_INFO_1A;
    pub type PPORT_INFO_1A = *mut root::_PORT_INFO_1A;
    pub type LPPORT_INFO_1A = *mut root::_PORT_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PORT_INFO_1W {
        pub pName: root::LPWSTR,
    }
    pub type PORT_INFO_1W = root::_PORT_INFO_1W;
    pub type PPORT_INFO_1W = *mut root::_PORT_INFO_1W;
    pub type LPPORT_INFO_1W = *mut root::_PORT_INFO_1W;
    pub type PORT_INFO_1 = root::PORT_INFO_1A;
    pub type PPORT_INFO_1 = root::PPORT_INFO_1A;
    pub type LPPORT_INFO_1 = root::LPPORT_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PORT_INFO_2A {
        pub pPortName: *mut i8,
        pub pMonitorName: *mut i8,
        pub pDescription: *mut i8,
        pub fPortType: u32,
        pub Reserved: u32,
    }
    pub type PORT_INFO_2A = root::_PORT_INFO_2A;
    pub type PPORT_INFO_2A = *mut root::_PORT_INFO_2A;
    pub type LPPORT_INFO_2A = *mut root::_PORT_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PORT_INFO_2W {
        pub pPortName: root::LPWSTR,
        pub pMonitorName: root::LPWSTR,
        pub pDescription: root::LPWSTR,
        pub fPortType: u32,
        pub Reserved: u32,
    }
    pub type PORT_INFO_2W = root::_PORT_INFO_2W;
    pub type PPORT_INFO_2W = *mut root::_PORT_INFO_2W;
    pub type LPPORT_INFO_2W = *mut root::_PORT_INFO_2W;
    pub type PORT_INFO_2 = root::PORT_INFO_2A;
    pub type PPORT_INFO_2 = root::PPORT_INFO_2A;
    pub type LPPORT_INFO_2 = root::LPPORT_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PORT_INFO_3A {
        pub dwStatus: u32,
        pub pszStatus: *mut i8,
        pub dwSeverity: u32,
    }
    pub type PORT_INFO_3A = root::_PORT_INFO_3A;
    pub type PPORT_INFO_3A = *mut root::_PORT_INFO_3A;
    pub type LPPORT_INFO_3A = *mut root::_PORT_INFO_3A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PORT_INFO_3W {
        pub dwStatus: u32,
        pub pszStatus: root::LPWSTR,
        pub dwSeverity: u32,
    }
    pub type PORT_INFO_3W = root::_PORT_INFO_3W;
    pub type PPORT_INFO_3W = *mut root::_PORT_INFO_3W;
    pub type LPPORT_INFO_3W = *mut root::_PORT_INFO_3W;
    pub type PORT_INFO_3 = root::PORT_INFO_3A;
    pub type PPORT_INFO_3 = root::PPORT_INFO_3A;
    pub type LPPORT_INFO_3 = root::LPPORT_INFO_3A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MONITOR_INFO_1A {
        pub pName: *mut i8,
    }
    pub type MONITOR_INFO_1A = root::_MONITOR_INFO_1A;
    pub type PMONITOR_INFO_1A = *mut root::_MONITOR_INFO_1A;
    pub type LPMONITOR_INFO_1A = *mut root::_MONITOR_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MONITOR_INFO_1W {
        pub pName: root::LPWSTR,
    }
    pub type MONITOR_INFO_1W = root::_MONITOR_INFO_1W;
    pub type PMONITOR_INFO_1W = *mut root::_MONITOR_INFO_1W;
    pub type LPMONITOR_INFO_1W = *mut root::_MONITOR_INFO_1W;
    pub type MONITOR_INFO_1 = root::MONITOR_INFO_1A;
    pub type PMONITOR_INFO_1 = root::PMONITOR_INFO_1A;
    pub type LPMONITOR_INFO_1 = root::LPMONITOR_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MONITOR_INFO_2A {
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDLLName: *mut i8,
    }
    pub type MONITOR_INFO_2A = root::_MONITOR_INFO_2A;
    pub type PMONITOR_INFO_2A = *mut root::_MONITOR_INFO_2A;
    pub type LPMONITOR_INFO_2A = *mut root::_MONITOR_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MONITOR_INFO_2W {
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDLLName: root::LPWSTR,
    }
    pub type MONITOR_INFO_2W = root::_MONITOR_INFO_2W;
    pub type PMONITOR_INFO_2W = *mut root::_MONITOR_INFO_2W;
    pub type LPMONITOR_INFO_2W = *mut root::_MONITOR_INFO_2W;
    pub type MONITOR_INFO_2 = root::MONITOR_INFO_2A;
    pub type PMONITOR_INFO_2 = root::PMONITOR_INFO_2A;
    pub type LPMONITOR_INFO_2 = root::LPMONITOR_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DATATYPES_INFO_1A {
        pub pName: *mut i8,
    }
    pub type DATATYPES_INFO_1A = root::_DATATYPES_INFO_1A;
    pub type PDATATYPES_INFO_1A = *mut root::_DATATYPES_INFO_1A;
    pub type LPDATATYPES_INFO_1A = *mut root::_DATATYPES_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DATATYPES_INFO_1W {
        pub pName: root::LPWSTR,
    }
    pub type DATATYPES_INFO_1W = root::_DATATYPES_INFO_1W;
    pub type PDATATYPES_INFO_1W = *mut root::_DATATYPES_INFO_1W;
    pub type LPDATATYPES_INFO_1W = *mut root::_DATATYPES_INFO_1W;
    pub type DATATYPES_INFO_1 = root::DATATYPES_INFO_1A;
    pub type PDATATYPES_INFO_1 = root::PDATATYPES_INFO_1A;
    pub type LPDATATYPES_INFO_1 = root::LPDATATYPES_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_DEFAULTSA {
        pub pDatatype: *mut i8,
        pub pDevMode: root::LPDEVMODEA,
        pub DesiredAccess: root::ACCESS_MASK,
    }
    pub type PRINTER_DEFAULTSA = root::_PRINTER_DEFAULTSA;
    pub type PPRINTER_DEFAULTSA = *mut root::_PRINTER_DEFAULTSA;
    pub type LPPRINTER_DEFAULTSA = *mut root::_PRINTER_DEFAULTSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_DEFAULTSW {
        pub pDatatype: root::LPWSTR,
        pub pDevMode: root::LPDEVMODEW,
        pub DesiredAccess: root::ACCESS_MASK,
    }
    pub type PRINTER_DEFAULTSW = root::_PRINTER_DEFAULTSW;
    pub type PPRINTER_DEFAULTSW = *mut root::_PRINTER_DEFAULTSW;
    pub type LPPRINTER_DEFAULTSW = *mut root::_PRINTER_DEFAULTSW;
    pub type PRINTER_DEFAULTS = root::PRINTER_DEFAULTSA;
    pub type PPRINTER_DEFAULTS = root::PPRINTER_DEFAULTSA;
    pub type LPPRINTER_DEFAULTS = root::LPPRINTER_DEFAULTSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_ENUM_VALUESA {
        pub pValueName: *mut i8,
        pub cbValueName: u32,
        pub dwType: u32,
        pub pData: root::LPBYTE,
        pub cbData: u32,
    }
    pub type PRINTER_ENUM_VALUESA = root::_PRINTER_ENUM_VALUESA;
    pub type PPRINTER_ENUM_VALUESA = *mut root::_PRINTER_ENUM_VALUESA;
    pub type LPPRINTER_ENUM_VALUESA = *mut root::_PRINTER_ENUM_VALUESA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_ENUM_VALUESW {
        pub pValueName: root::LPWSTR,
        pub cbValueName: u32,
        pub dwType: u32,
        pub pData: root::LPBYTE,
        pub cbData: u32,
    }
    pub type PRINTER_ENUM_VALUESW = root::_PRINTER_ENUM_VALUESW;
    pub type PPRINTER_ENUM_VALUESW = *mut root::_PRINTER_ENUM_VALUESW;
    pub type LPPRINTER_ENUM_VALUESW = *mut root::_PRINTER_ENUM_VALUESW;
    pub type PRINTER_ENUM_VALUES = root::PRINTER_ENUM_VALUESA;
    pub type PPRINTER_ENUM_VALUES = root::PPRINTER_ENUM_VALUESA;
    pub type LPPRINTER_ENUM_VALUES = root::LPPRINTER_ENUM_VALUESA;
    extern "C" {
        pub fn EnumPrintersA(
            Flags: u32,
            Name: *mut i8,
            Level: u32,
            pPrinterEnum: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrintersW(
            Flags: u32,
            Name: root::LPWSTR,
            Level: u32,
            pPrinterEnum: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSpoolFileHandle(hPrinter: root::HANDLE) -> root::HANDLE;
    }
    extern "C" {
        pub fn CommitSpoolData(
            hPrinter: root::HANDLE,
            hSpoolFile: root::HANDLE,
            cbCommit: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn CloseSpoolFileHandle(hPrinter: root::HANDLE, hSpoolFile: root::HANDLE)
            -> root::BOOL;
    }
    extern "C" {
        pub fn OpenPrinterA(
            pPrinterName: *mut i8,
            phPrinter: root::LPHANDLE,
            pDefault: root::LPPRINTER_DEFAULTSA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenPrinterW(
            pPrinterName: root::LPWSTR,
            phPrinter: root::LPHANDLE,
            pDefault: root::LPPRINTER_DEFAULTSW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ResetPrinterA(
            hPrinter: root::HANDLE,
            pDefault: root::LPPRINTER_DEFAULTSA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ResetPrinterW(
            hPrinter: root::HANDLE,
            pDefault: root::LPPRINTER_DEFAULTSW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetJobA(
            hPrinter: root::HANDLE,
            JobId: u32,
            Level: u32,
            pJob: root::LPBYTE,
            Command: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetJobW(
            hPrinter: root::HANDLE,
            JobId: u32,
            Level: u32,
            pJob: root::LPBYTE,
            Command: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetJobA(
            hPrinter: root::HANDLE,
            JobId: u32,
            Level: u32,
            pJob: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetJobW(
            hPrinter: root::HANDLE,
            JobId: u32,
            Level: u32,
            pJob: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumJobsA(
            hPrinter: root::HANDLE,
            FirstJob: u32,
            NoJobs: u32,
            Level: u32,
            pJob: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumJobsW(
            hPrinter: root::HANDLE,
            FirstJob: u32,
            NoJobs: u32,
            Level: u32,
            pJob: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterA(
            pName: *mut i8,
            Level: u32,
            pPrinter: root::LPBYTE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn AddPrinterW(
            pName: root::LPWSTR,
            Level: u32,
            pPrinter: root::LPBYTE,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn DeletePrinter(hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPrinterA(
            hPrinter: root::HANDLE,
            Level: u32,
            pPrinter: root::LPBYTE,
            Command: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPrinterW(
            hPrinter: root::HANDLE,
            Level: u32,
            pPrinter: root::LPBYTE,
            Command: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterA(
            hPrinter: root::HANDLE,
            Level: u32,
            pPrinter: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterW(
            hPrinter: root::HANDLE,
            Level: u32,
            pPrinter: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterDriverA(
            pName: *mut i8,
            Level: u32,
            pDriverInfo: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterDriverW(
            pName: root::LPWSTR,
            Level: u32,
            pDriverInfo: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterDriverExA(
            pName: *mut i8,
            Level: u32,
            lpbDriverInfo: root::PBYTE,
            dwFileCopyFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterDriverExW(
            pName: root::LPWSTR,
            Level: u32,
            lpbDriverInfo: root::PBYTE,
            dwFileCopyFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrinterDriversA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            Level: u32,
            pDriverInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrinterDriversW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            Level: u32,
            pDriverInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterDriverA(
            hPrinter: root::HANDLE,
            pEnvironment: *mut i8,
            Level: u32,
            pDriverInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterDriverW(
            hPrinter: root::HANDLE,
            pEnvironment: root::LPWSTR,
            Level: u32,
            pDriverInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterDriverDirectoryA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            Level: u32,
            pDriverDirectory: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterDriverDirectoryW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            Level: u32,
            pDriverDirectory: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrinterDriverA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            pDriverName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrinterDriverW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            pDriverName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrinterDriverExA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            pDriverName: *mut i8,
            dwDeleteFlag: u32,
            dwVersionFlag: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrinterDriverExW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            pDriverName: root::LPWSTR,
            dwDeleteFlag: u32,
            dwVersionFlag: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrintProcessorA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            pPathName: *mut i8,
            pPrintProcessorName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrintProcessorW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            pPathName: root::LPWSTR,
            pPrintProcessorName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrintProcessorsA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            Level: u32,
            pPrintProcessorInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrintProcessorsW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            Level: u32,
            pPrintProcessorInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrintProcessorDirectoryA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            Level: u32,
            pPrintProcessorInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrintProcessorDirectoryW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            Level: u32,
            pPrintProcessorInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrintProcessorDatatypesA(
            pName: *mut i8,
            pPrintProcessorName: *mut i8,
            Level: u32,
            pDatatypes: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPrintProcessorDatatypesW(
            pName: root::LPWSTR,
            pPrintProcessorName: root::LPWSTR,
            Level: u32,
            pDatatypes: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrintProcessorA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            pPrintProcessorName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrintProcessorW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            pPrintProcessorName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StartDocPrinterA(
            hPrinter: root::HANDLE,
            Level: u32,
            pDocInfo: root::LPBYTE,
        ) -> u32;
    }
    extern "C" {
        pub fn StartDocPrinterW(
            hPrinter: root::HANDLE,
            Level: u32,
            pDocInfo: root::LPBYTE,
        ) -> u32;
    }
    extern "C" {
        pub fn StartPagePrinter(hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn WritePrinter(
            hPrinter: root::HANDLE,
            pBuf: root::LPVOID,
            cbBuf: u32,
            pcWritten: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FlushPrinter(
            hPrinter: root::HANDLE,
            pBuf: root::LPVOID,
            cbBuf: u32,
            pcWritten: root::LPDWORD,
            cSleep: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EndPagePrinter(hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn AbortPrinter(hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadPrinter(
            hPrinter: root::HANDLE,
            pBuf: root::LPVOID,
            cbBuf: u32,
            pNoBytesRead: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EndDocPrinter(hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn AddJobA(
            hPrinter: root::HANDLE,
            Level: u32,
            pData: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddJobW(
            hPrinter: root::HANDLE,
            Level: u32,
            pData: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ScheduleJob(hPrinter: root::HANDLE, JobId: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn PrinterProperties(hWnd: root::HWND, hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn DocumentPropertiesA(
            hWnd: root::HWND,
            hPrinter: root::HANDLE,
            pDeviceName: *mut i8,
            pDevModeOutput: root::PDEVMODEA,
            pDevModeInput: root::PDEVMODEA,
            fMode: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn DocumentPropertiesW(
            hWnd: root::HWND,
            hPrinter: root::HANDLE,
            pDeviceName: root::LPWSTR,
            pDevModeOutput: root::PDEVMODEW,
            pDevModeInput: root::PDEVMODEW,
            fMode: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn AdvancedDocumentPropertiesA(
            hWnd: root::HWND,
            hPrinter: root::HANDLE,
            pDeviceName: *mut i8,
            pDevModeOutput: root::PDEVMODEA,
            pDevModeInput: root::PDEVMODEA,
        ) -> i32;
    }
    extern "C" {
        pub fn AdvancedDocumentPropertiesW(
            hWnd: root::HWND,
            hPrinter: root::HANDLE,
            pDeviceName: root::LPWSTR,
            pDevModeOutput: root::PDEVMODEW,
            pDevModeInput: root::PDEVMODEW,
        ) -> i32;
    }
    extern "C" {
        pub fn ExtDeviceMode(
            hWnd: root::HWND,
            hInst: root::HANDLE,
            pDevModeOutput: root::LPDEVMODEA,
            pDeviceName: *mut i8,
            pPort: *mut i8,
            pDevModeInput: root::LPDEVMODEA,
            pProfile: *mut i8,
            fMode: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn GetPrinterDataA(
            hPrinter: root::HANDLE,
            pValueName: *mut i8,
            pType: root::LPDWORD,
            pData: root::LPBYTE,
            nSize: u32,
            pcbNeeded: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrinterDataW(
            hPrinter: root::HANDLE,
            pValueName: root::LPWSTR,
            pType: root::LPDWORD,
            pData: root::LPBYTE,
            nSize: u32,
            pcbNeeded: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrinterDataExA(
            hPrinter: root::HANDLE,
            pKeyName: *const i8,
            pValueName: *const i8,
            pType: root::LPDWORD,
            pData: root::LPBYTE,
            nSize: u32,
            pcbNeeded: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrinterDataExW(
            hPrinter: root::HANDLE,
            pKeyName: root::LPCWSTR,
            pValueName: root::LPCWSTR,
            pType: root::LPDWORD,
            pData: root::LPBYTE,
            nSize: u32,
            pcbNeeded: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumPrinterDataA(
            hPrinter: root::HANDLE,
            dwIndex: u32,
            pValueName: *mut i8,
            cbValueName: u32,
            pcbValueName: root::LPDWORD,
            pType: root::LPDWORD,
            pData: root::LPBYTE,
            cbData: u32,
            pcbData: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumPrinterDataW(
            hPrinter: root::HANDLE,
            dwIndex: u32,
            pValueName: root::LPWSTR,
            cbValueName: u32,
            pcbValueName: root::LPDWORD,
            pType: root::LPDWORD,
            pData: root::LPBYTE,
            cbData: u32,
            pcbData: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumPrinterDataExA(
            hPrinter: root::HANDLE,
            pKeyName: *const i8,
            pEnumValues: root::LPBYTE,
            cbEnumValues: u32,
            pcbEnumValues: root::LPDWORD,
            pnEnumValues: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumPrinterDataExW(
            hPrinter: root::HANDLE,
            pKeyName: root::LPCWSTR,
            pEnumValues: root::LPBYTE,
            cbEnumValues: u32,
            pcbEnumValues: root::LPDWORD,
            pnEnumValues: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumPrinterKeyA(
            hPrinter: root::HANDLE,
            pKeyName: *const i8,
            pSubkey: *mut i8,
            cbSubkey: u32,
            pcbSubkey: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumPrinterKeyW(
            hPrinter: root::HANDLE,
            pKeyName: root::LPCWSTR,
            pSubkey: root::LPWSTR,
            cbSubkey: u32,
            pcbSubkey: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn SetPrinterDataA(
            hPrinter: root::HANDLE,
            pValueName: *mut i8,
            Type: u32,
            pData: root::LPBYTE,
            cbData: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetPrinterDataW(
            hPrinter: root::HANDLE,
            pValueName: root::LPWSTR,
            Type: u32,
            pData: root::LPBYTE,
            cbData: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetPrinterDataExA(
            hPrinter: root::HANDLE,
            pKeyName: *const i8,
            pValueName: *const i8,
            Type: u32,
            pData: root::LPBYTE,
            cbData: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn SetPrinterDataExW(
            hPrinter: root::HANDLE,
            pKeyName: root::LPCWSTR,
            pValueName: root::LPCWSTR,
            Type: u32,
            pData: root::LPBYTE,
            cbData: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn DeletePrinterDataA(hPrinter: root::HANDLE, pValueName: *mut i8) -> u32;
    }
    extern "C" {
        pub fn DeletePrinterDataW(hPrinter: root::HANDLE, pValueName: root::LPWSTR) -> u32;
    }
    extern "C" {
        pub fn DeletePrinterDataExA(
            hPrinter: root::HANDLE,
            pKeyName: *const i8,
            pValueName: *const i8,
        ) -> u32;
    }
    extern "C" {
        pub fn DeletePrinterDataExW(
            hPrinter: root::HANDLE,
            pKeyName: root::LPCWSTR,
            pValueName: root::LPCWSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn DeletePrinterKeyA(hPrinter: root::HANDLE, pKeyName: *const i8) -> u32;
    }
    extern "C" {
        pub fn DeletePrinterKeyW(hPrinter: root::HANDLE, pKeyName: root::LPCWSTR) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_NOTIFY_OPTIONS_TYPE {
        pub Type: u16,
        pub Reserved0: u16,
        pub Reserved1: u32,
        pub Reserved2: u32,
        pub Count: u32,
        pub pFields: root::PWORD,
    }
    pub type PRINTER_NOTIFY_OPTIONS_TYPE = root::_PRINTER_NOTIFY_OPTIONS_TYPE;
    pub type PPRINTER_NOTIFY_OPTIONS_TYPE = *mut root::_PRINTER_NOTIFY_OPTIONS_TYPE;
    pub type LPPRINTER_NOTIFY_OPTIONS_TYPE = *mut root::_PRINTER_NOTIFY_OPTIONS_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_NOTIFY_OPTIONS {
        pub Version: u32,
        pub Flags: u32,
        pub Count: u32,
        pub pTypes: root::PPRINTER_NOTIFY_OPTIONS_TYPE,
    }
    pub type PRINTER_NOTIFY_OPTIONS = root::_PRINTER_NOTIFY_OPTIONS;
    pub type PPRINTER_NOTIFY_OPTIONS = *mut root::_PRINTER_NOTIFY_OPTIONS;
    pub type LPPRINTER_NOTIFY_OPTIONS = *mut root::_PRINTER_NOTIFY_OPTIONS;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PRINTER_NOTIFY_INFO_DATA {
        pub Type: u16,
        pub Field: u16,
        pub Reserved: u32,
        pub Id: u32,
        pub NotifyData: root::_PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1 {
        pub adwData: [u32; 2usize],
        pub Data: root::_PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1__bindgen_ty_1 {
        pub cbBuf: u32,
        pub pBuf: root::LPVOID,
    }
    pub type PRINTER_NOTIFY_INFO_DATA = root::_PRINTER_NOTIFY_INFO_DATA;
    pub type PPRINTER_NOTIFY_INFO_DATA = *mut root::_PRINTER_NOTIFY_INFO_DATA;
    pub type LPPRINTER_NOTIFY_INFO_DATA = *mut root::_PRINTER_NOTIFY_INFO_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _PRINTER_NOTIFY_INFO {
        pub Version: u32,
        pub Flags: u32,
        pub Count: u32,
        pub aData: [root::PRINTER_NOTIFY_INFO_DATA; 1usize],
    }
    pub type PRINTER_NOTIFY_INFO = root::_PRINTER_NOTIFY_INFO;
    pub type PPRINTER_NOTIFY_INFO = *mut root::_PRINTER_NOTIFY_INFO;
    pub type LPPRINTER_NOTIFY_INFO = *mut root::_PRINTER_NOTIFY_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _BINARY_CONTAINER {
        pub cbBuf: u32,
        pub pData: root::LPBYTE,
    }
    pub type BINARY_CONTAINER = root::_BINARY_CONTAINER;
    pub type PBINARY_CONTAINER = *mut root::_BINARY_CONTAINER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIDI_DATA {
        pub dwBidiType: u32,
        pub u: root::_BIDI_DATA__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _BIDI_DATA__bindgen_ty_1 {
        pub bData: root::BOOL,
        pub iData: i32,
        pub sData: root::LPWSTR,
        pub fData: root::FLOAT,
        pub biData: root::BINARY_CONTAINER,
    }
    pub type BIDI_DATA = root::_BIDI_DATA;
    pub type PBIDI_DATA = *mut root::_BIDI_DATA;
    pub type LPBIDI_DATA = *mut root::_BIDI_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIDI_REQUEST_DATA {
        pub dwReqNumber: u32,
        pub pSchema: root::LPWSTR,
        pub data: root::BIDI_DATA,
    }
    pub type BIDI_REQUEST_DATA = root::_BIDI_REQUEST_DATA;
    pub type PBIDI_REQUEST_DATA = *mut root::_BIDI_REQUEST_DATA;
    pub type LPBIDI_REQUEST_DATA = *mut root::_BIDI_REQUEST_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIDI_REQUEST_CONTAINER {
        pub Version: u32,
        pub Flags: u32,
        pub Count: u32,
        pub aData: [root::BIDI_REQUEST_DATA; 1usize],
    }
    pub type BIDI_REQUEST_CONTAINER = root::_BIDI_REQUEST_CONTAINER;
    pub type PBIDI_REQUEST_CONTAINER = *mut root::_BIDI_REQUEST_CONTAINER;
    pub type LPBIDI_REQUEST_CONTAINER = *mut root::_BIDI_REQUEST_CONTAINER;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIDI_RESPONSE_DATA {
        pub dwResult: u32,
        pub dwReqNumber: u32,
        pub pSchema: root::LPWSTR,
        pub data: root::BIDI_DATA,
    }
    pub type BIDI_RESPONSE_DATA = root::_BIDI_RESPONSE_DATA;
    pub type PBIDI_RESPONSE_DATA = *mut root::_BIDI_RESPONSE_DATA;
    pub type LPBIDI_RESPONSE_DATA = *mut root::_BIDI_RESPONSE_DATA;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _BIDI_RESPONSE_CONTAINER {
        pub Version: u32,
        pub Flags: u32,
        pub Count: u32,
        pub aData: [root::BIDI_RESPONSE_DATA; 1usize],
    }
    pub type BIDI_RESPONSE_CONTAINER = root::_BIDI_RESPONSE_CONTAINER;
    pub type PBIDI_RESPONSE_CONTAINER = *mut root::_BIDI_RESPONSE_CONTAINER;
    pub type LPBIDI_RESPONSE_CONTAINER = *mut root::_BIDI_RESPONSE_CONTAINER;
    pub const BIDI_TYPE_BIDI_NULL: root::BIDI_TYPE = 0;
    pub const BIDI_TYPE_BIDI_INT: root::BIDI_TYPE = 1;
    pub const BIDI_TYPE_BIDI_FLOAT: root::BIDI_TYPE = 2;
    pub const BIDI_TYPE_BIDI_BOOL: root::BIDI_TYPE = 3;
    pub const BIDI_TYPE_BIDI_STRING: root::BIDI_TYPE = 4;
    pub const BIDI_TYPE_BIDI_TEXT: root::BIDI_TYPE = 5;
    pub const BIDI_TYPE_BIDI_ENUM: root::BIDI_TYPE = 6;
    pub const BIDI_TYPE_BIDI_BLOB: root::BIDI_TYPE = 7;
    pub type BIDI_TYPE = i32;
    extern "C" {
        pub fn WaitForPrinterChange(hPrinter: root::HANDLE, Flags: u32) -> u32;
    }
    extern "C" {
        pub fn FindFirstPrinterChangeNotification(
            hPrinter: root::HANDLE,
            fdwFilter: u32,
            fdwOptions: u32,
            pPrinterNotifyOptions: root::PVOID,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn FindNextPrinterChangeNotification(
            hChange: root::HANDLE,
            pdwChange: root::PDWORD,
            pvReserved: root::LPVOID,
            ppPrinterNotifyInfo: *mut root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn FreePrinterNotifyInfo(pPrinterNotifyInfo: root::PPRINTER_NOTIFY_INFO) -> root::BOOL;
    }
    extern "C" {
        pub fn FindClosePrinterChangeNotification(hChange: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn PrinterMessageBoxA(
            hPrinter: root::HANDLE,
            Error: u32,
            hWnd: root::HWND,
            pText: *mut i8,
            pCaption: *mut i8,
            dwType: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn PrinterMessageBoxW(
            hPrinter: root::HANDLE,
            Error: u32,
            hWnd: root::HWND,
            pText: root::LPWSTR,
            pCaption: root::LPWSTR,
            dwType: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ClosePrinter(hPrinter: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn AddFormA(
            hPrinter: root::HANDLE,
            Level: u32,
            pForm: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddFormW(
            hPrinter: root::HANDLE,
            Level: u32,
            pForm: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteFormA(hPrinter: root::HANDLE, pFormName: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteFormW(hPrinter: root::HANDLE, pFormName: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFormA(
            hPrinter: root::HANDLE,
            pFormName: *mut i8,
            Level: u32,
            pForm: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFormW(
            hPrinter: root::HANDLE,
            pFormName: root::LPWSTR,
            Level: u32,
            pForm: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFormA(
            hPrinter: root::HANDLE,
            pFormName: *mut i8,
            Level: u32,
            pForm: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetFormW(
            hPrinter: root::HANDLE,
            pFormName: root::LPWSTR,
            Level: u32,
            pForm: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumFormsA(
            hPrinter: root::HANDLE,
            Level: u32,
            pForm: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumFormsW(
            hPrinter: root::HANDLE,
            Level: u32,
            pForm: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumMonitorsA(
            pName: *mut i8,
            Level: u32,
            pMonitor: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumMonitorsW(
            pName: root::LPWSTR,
            Level: u32,
            pMonitor: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddMonitorA(
            pName: *mut i8,
            Level: u32,
            pMonitors: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddMonitorW(
            pName: root::LPWSTR,
            Level: u32,
            pMonitors: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteMonitorA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            pMonitorName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeleteMonitorW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            pMonitorName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPortsA(
            pName: *mut i8,
            Level: u32,
            pPort: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumPortsW(
            pName: root::LPWSTR,
            Level: u32,
            pPort: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
            pcReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPortA(
            pName: *mut i8,
            hWnd: root::HWND,
            pMonitorName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPortW(
            pName: root::LPWSTR,
            hWnd: root::HWND,
            pMonitorName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ConfigurePortA(
            pName: *mut i8,
            hWnd: root::HWND,
            pPortName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ConfigurePortW(
            pName: root::LPWSTR,
            hWnd: root::HWND,
            pPortName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePortA(
            pName: *mut i8,
            hWnd: root::HWND,
            pPortName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePortW(
            pName: root::LPWSTR,
            hWnd: root::HWND,
            pPortName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn XcvDataW(
            hXcv: root::HANDLE,
            pszDataName: *const u16,
            pInputData: root::PBYTE,
            cbInputData: u32,
            pOutputData: root::PBYTE,
            cbOutputData: u32,
            pcbOutputNeeded: root::PDWORD,
            pdwStatus: root::PDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDefaultPrinterA(pszBuffer: *mut i8, pcchBuffer: root::LPDWORD) -> root::BOOL;
    }
    extern "C" {
        pub fn GetDefaultPrinterW(pszBuffer: root::LPWSTR, pcchBuffer: root::LPDWORD)
            -> root::BOOL;
    }
    extern "C" {
        pub fn SetDefaultPrinterA(pszPrinter: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn SetDefaultPrinterW(pszPrinter: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPortA(
            pName: *mut i8,
            pPortName: *mut i8,
            dwLevel: u32,
            pPortInfo: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetPortW(
            pName: root::LPWSTR,
            pPortName: root::LPWSTR,
            dwLevel: u32,
            pPortInfo: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterConnectionA(pName: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterConnectionW(pName: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrinterConnectionA(pName: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrinterConnectionW(pName: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn ConnectToPrinterDlg(hwnd: root::HWND, Flags: u32) -> root::HANDLE;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROVIDOR_INFO_1A {
        pub pName: *mut i8,
        pub pEnvironment: *mut i8,
        pub pDLLName: *mut i8,
    }
    pub type PROVIDOR_INFO_1A = root::_PROVIDOR_INFO_1A;
    pub type PPROVIDOR_INFO_1A = *mut root::_PROVIDOR_INFO_1A;
    pub type LPPROVIDOR_INFO_1A = *mut root::_PROVIDOR_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROVIDOR_INFO_1W {
        pub pName: root::LPWSTR,
        pub pEnvironment: root::LPWSTR,
        pub pDLLName: root::LPWSTR,
    }
    pub type PROVIDOR_INFO_1W = root::_PROVIDOR_INFO_1W;
    pub type PPROVIDOR_INFO_1W = *mut root::_PROVIDOR_INFO_1W;
    pub type LPPROVIDOR_INFO_1W = *mut root::_PROVIDOR_INFO_1W;
    pub type PROVIDOR_INFO_1 = root::PROVIDOR_INFO_1A;
    pub type PPROVIDOR_INFO_1 = root::PPROVIDOR_INFO_1A;
    pub type LPPROVIDOR_INFO_1 = root::LPPROVIDOR_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROVIDOR_INFO_2A {
        pub pOrder: *mut i8,
    }
    pub type PROVIDOR_INFO_2A = root::_PROVIDOR_INFO_2A;
    pub type PPROVIDOR_INFO_2A = *mut root::_PROVIDOR_INFO_2A;
    pub type LPPROVIDOR_INFO_2A = *mut root::_PROVIDOR_INFO_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PROVIDOR_INFO_2W {
        pub pOrder: root::LPWSTR,
    }
    pub type PROVIDOR_INFO_2W = root::_PROVIDOR_INFO_2W;
    pub type PPROVIDOR_INFO_2W = *mut root::_PROVIDOR_INFO_2W;
    pub type LPPROVIDOR_INFO_2W = *mut root::_PROVIDOR_INFO_2W;
    pub type PROVIDOR_INFO_2 = root::PROVIDOR_INFO_2A;
    pub type PPROVIDOR_INFO_2 = root::PPROVIDOR_INFO_2A;
    pub type LPPROVIDOR_INFO_2 = root::LPPROVIDOR_INFO_2A;
    extern "C" {
        pub fn AddPrintProvidorA(
            pName: *mut i8,
            Level: u32,
            pProvidorInfo: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrintProvidorW(
            pName: root::LPWSTR,
            Level: u32,
            pProvidorInfo: root::LPBYTE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrintProvidorA(
            pName: *mut i8,
            pEnvironment: *mut i8,
            pPrintProvidorName: *mut i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn DeletePrintProvidorW(
            pName: root::LPWSTR,
            pEnvironment: root::LPWSTR,
            pPrintProvidorName: root::LPWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidDevmodeA(pDevmode: root::PDEVMODEA, DevmodeSize: root::size_t) -> root::BOOL;
    }
    extern "C" {
        pub fn IsValidDevmodeW(pDevmode: root::PDEVMODEW, DevmodeSize: root::size_t) -> root::BOOL;
    }
    pub const _PRINTER_OPTION_FLAGS_PRINTER_OPTION_NO_CACHE: root::_PRINTER_OPTION_FLAGS = 1;
    pub const _PRINTER_OPTION_FLAGS_PRINTER_OPTION_CACHE: root::_PRINTER_OPTION_FLAGS = 2;
    pub const _PRINTER_OPTION_FLAGS_PRINTER_OPTION_CLIENT_CHANGE: root::_PRINTER_OPTION_FLAGS = 4;
    pub const _PRINTER_OPTION_FLAGS_PRINTER_OPTION_NO_CLIENT_DATA: root::_PRINTER_OPTION_FLAGS = 8;
    pub type _PRINTER_OPTION_FLAGS = i32;
    pub use self::super::root::_PRINTER_OPTION_FLAGS as PRINTER_OPTION_FLAGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_OPTIONSA {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
    }
    pub type PRINTER_OPTIONSA = root::_PRINTER_OPTIONSA;
    pub type PPRINTER_OPTIONSA = *mut root::_PRINTER_OPTIONSA;
    pub type LPPRINTER_OPTIONSA = *mut root::_PRINTER_OPTIONSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_OPTIONSW {
        pub cbSize: root::UINT,
        pub dwFlags: u32,
    }
    pub type PRINTER_OPTIONSW = root::_PRINTER_OPTIONSW;
    pub type PPRINTER_OPTIONSW = *mut root::_PRINTER_OPTIONSW;
    pub type LPPRINTER_OPTIONSW = *mut root::_PRINTER_OPTIONSW;
    pub type PRINTER_OPTIONS = root::PRINTER_OPTIONSA;
    pub type PPRINTER_OPTIONS = root::PPRINTER_OPTIONSA;
    pub type LPPRINTER_OPTIONS = root::LPPRINTER_OPTIONSA;
    extern "C" {
        pub fn OpenPrinter2A(
            pPrinterName: *const i8,
            phPrinter: root::LPHANDLE,
            pDefault: root::PPRINTER_DEFAULTSA,
            pOptions: root::PPRINTER_OPTIONSA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenPrinter2W(
            pPrinterName: root::LPCWSTR,
            phPrinter: root::LPHANDLE,
            pDefault: root::PPRINTER_DEFAULTSW,
            pOptions: root::PPRINTER_OPTIONSW,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_CONNECTION_INFO_1A {
        pub dwFlags: u32,
        pub pszDriverName: *mut i8,
    }
    pub type PRINTER_CONNECTION_INFO_1A = root::_PRINTER_CONNECTION_INFO_1A;
    pub type PPRINTER_CONNECTION_INFO_1A = *mut root::_PRINTER_CONNECTION_INFO_1A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _PRINTER_CONNECTION_INFO_1W {
        pub dwFlags: u32,
        pub pszDriverName: root::LPWSTR,
    }
    pub type PRINTER_CONNECTION_INFO_1W = root::_PRINTER_CONNECTION_INFO_1W;
    pub type PPRINTER_CONNECTION_INFO_1W = *mut root::_PRINTER_CONNECTION_INFO_1W;
    pub type PRINTER_CONNECTION_INFO_1 = root::PRINTER_CONNECTION_INFO_1A;
    pub type PPRINTER_CONNECTION_INFO_1 = root::PPRINTER_CONNECTION_INFO_1A;
    extern "C" {
        pub fn AddPrinterConnection2A(
            hWnd: root::HWND,
            pszName: *const i8,
            dwLevel: u32,
            pConnectionInfo: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn AddPrinterConnection2W(
            hWnd: root::HWND,
            pszName: root::LPCWSTR,
            dwLevel: u32,
            pConnectionInfo: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn InstallPrinterDriverFromPackageA(
            pszServer: *const i8,
            pszInfPath: *const i8,
            pszDriverName: *const i8,
            pszEnvironment: *const i8,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn InstallPrinterDriverFromPackageW(
            pszServer: root::LPCWSTR,
            pszInfPath: root::LPCWSTR,
            pszDriverName: root::LPCWSTR,
            pszEnvironment: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UploadPrinterDriverPackageA(
            pszServer: *const i8,
            pszInfPath: *const i8,
            pszEnvironment: *const i8,
            dwFlags: u32,
            hwnd: root::HWND,
            pszDestInfPath: *mut i8,
            pcchDestInfPath: root::PULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UploadPrinterDriverPackageW(
            pszServer: root::LPCWSTR,
            pszInfPath: root::LPCWSTR,
            pszEnvironment: root::LPCWSTR,
            dwFlags: u32,
            hwnd: root::HWND,
            pszDestInfPath: root::LPWSTR,
            pcchDestInfPath: root::PULONG,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CORE_PRINTER_DRIVERA {
        pub CoreDriverGUID: root::GUID,
        pub ftDriverDate: root::FILETIME,
        pub dwlDriverVersion: root::DWORDLONG,
        pub szPackageID: [i8; 260usize],
    }
    pub type CORE_PRINTER_DRIVERA = root::_CORE_PRINTER_DRIVERA;
    pub type PCORE_PRINTER_DRIVERA = *mut root::_CORE_PRINTER_DRIVERA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CORE_PRINTER_DRIVERW {
        pub CoreDriverGUID: root::GUID,
        pub ftDriverDate: root::FILETIME,
        pub dwlDriverVersion: root::DWORDLONG,
        pub szPackageID: [u16; 260usize],
    }
    pub type CORE_PRINTER_DRIVERW = root::_CORE_PRINTER_DRIVERW;
    pub type PCORE_PRINTER_DRIVERW = *mut root::_CORE_PRINTER_DRIVERW;
    pub type CORE_PRINTER_DRIVER = root::CORE_PRINTER_DRIVERA;
    pub type PCORE_PRINTER_DRIVER = root::PCORE_PRINTER_DRIVERA;
    extern "C" {
        pub fn GetCorePrinterDriversA(
            pszServer: *const i8,
            pszEnvironment: *const i8,
            pszzCoreDriverDependencies: *const i8,
            cCorePrinterDrivers: u32,
            pCorePrinterDrivers: root::PCORE_PRINTER_DRIVERA,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetCorePrinterDriversW(
            pszServer: root::LPCWSTR,
            pszEnvironment: root::LPCWSTR,
            pszzCoreDriverDependencies: root::LPCWSTR,
            cCorePrinterDrivers: u32,
            pCorePrinterDrivers: root::PCORE_PRINTER_DRIVERW,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CorePrinterDriverInstalledA(
            pszServer: *const i8,
            pszEnvironment: *const i8,
            CoreDriverGUID: root::GUID,
            ftDriverDate: root::FILETIME,
            dwlDriverVersion: root::DWORDLONG,
            pbDriverInstalled: *mut root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CorePrinterDriverInstalledW(
            pszServer: root::LPCWSTR,
            pszEnvironment: root::LPCWSTR,
            CoreDriverGUID: root::GUID,
            ftDriverDate: root::FILETIME,
            dwlDriverVersion: root::DWORDLONG,
            pbDriverInstalled: *mut root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetPrinterDriverPackagePathA(
            pszServer: *const i8,
            pszEnvironment: *const i8,
            pszLanguage: *const i8,
            pszPackageID: *const i8,
            pszDriverPackageCab: *mut i8,
            cchDriverPackageCab: u32,
            pcchRequiredSize: root::LPDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetPrinterDriverPackagePathW(
            pszServer: root::LPCWSTR,
            pszEnvironment: root::LPCWSTR,
            pszLanguage: root::LPCWSTR,
            pszPackageID: root::LPCWSTR,
            pszDriverPackageCab: root::LPWSTR,
            cchDriverPackageCab: u32,
            pcchRequiredSize: root::LPDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DeletePrinterDriverPackageA(
            pszServer: *const i8,
            pszInfPath: *const i8,
            pszEnvironment: *const i8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DeletePrinterDriverPackageW(
            pszServer: root::LPCWSTR,
            pszInfPath: root::LPCWSTR,
            pszEnvironment: root::LPCWSTR,
        ) -> root::HRESULT;
    }
    pub const EPrintPropertyType_kPropertyTypeString: root::EPrintPropertyType = 1;
    pub const EPrintPropertyType_kPropertyTypeInt32: root::EPrintPropertyType = 2;
    pub const EPrintPropertyType_kPropertyTypeInt64: root::EPrintPropertyType = 3;
    pub const EPrintPropertyType_kPropertyTypeByte: root::EPrintPropertyType = 4;
    pub const EPrintPropertyType_kPropertyTypeTime: root::EPrintPropertyType = 5;
    pub const EPrintPropertyType_kPropertyTypeDevMode: root::EPrintPropertyType = 6;
    pub const EPrintPropertyType_kPropertyTypeSD: root::EPrintPropertyType = 7;
    pub const EPrintPropertyType_kPropertyTypeNotificationReply: root::EPrintPropertyType = 8;
    pub const EPrintPropertyType_kPropertyTypeNotificationOptions: root::EPrintPropertyType = 9;
    pub const EPrintPropertyType_kPropertyTypeBuffer: root::EPrintPropertyType = 10;
    pub type EPrintPropertyType = i32;
    pub const EPrintXPSJobProgress_kAddingDocumentSequence: root::EPrintXPSJobProgress = 0;
    pub const EPrintXPSJobProgress_kDocumentSequenceAdded: root::EPrintXPSJobProgress = 1;
    pub const EPrintXPSJobProgress_kAddingFixedDocument: root::EPrintXPSJobProgress = 2;
    pub const EPrintXPSJobProgress_kFixedDocumentAdded: root::EPrintXPSJobProgress = 3;
    pub const EPrintXPSJobProgress_kAddingFixedPage: root::EPrintXPSJobProgress = 4;
    pub const EPrintXPSJobProgress_kFixedPageAdded: root::EPrintXPSJobProgress = 5;
    pub const EPrintXPSJobProgress_kResourceAdded: root::EPrintXPSJobProgress = 6;
    pub const EPrintXPSJobProgress_kFontAdded: root::EPrintXPSJobProgress = 7;
    pub const EPrintXPSJobProgress_kImageAdded: root::EPrintXPSJobProgress = 8;
    pub const EPrintXPSJobProgress_kXpsDocumentCommitted: root::EPrintXPSJobProgress = 9;
    pub type EPrintXPSJobProgress = i32;
    pub const EPrintXPSJobOperation_kJobProduction: root::EPrintXPSJobOperation = 1;
    pub const EPrintXPSJobOperation_kJobConsumption: root::EPrintXPSJobOperation = 2;
    pub type EPrintXPSJobOperation = i32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct PrintPropertyValue {
        pub ePropertyType: root::EPrintPropertyType,
        pub value: root::PrintPropertyValue__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union PrintPropertyValue__bindgen_ty_1 {
        pub propertyByte: u8,
        pub propertyString: *mut u16,
        pub propertyInt32: i32,
        pub propertyInt64: root::LONGLONG,
        pub propertyBlob: root::PrintPropertyValue__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PrintPropertyValue__bindgen_ty_1__bindgen_ty_1 {
        pub cbBuf: u32,
        pub pBuf: root::LPVOID,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct PrintNamedProperty {
        pub propertyName: *mut u16,
        pub propertyValue: root::PrintPropertyValue,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PrintPropertiesCollection {
        pub numberOfProperties: root::ULONG,
        pub propertiesCollection: *mut root::PrintNamedProperty,
    }
    extern "C" {
        pub fn ReportJobProcessingProgress(
            printerHandle: root::HANDLE,
            jobId: root::ULONG,
            jobOperation: root::EPrintXPSJobOperation,
            jobProgress: root::EPrintXPSJobProgress,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetPrinterDriver2A(
            hWnd: root::HWND,
            hPrinter: root::HANDLE,
            pEnvironment: *mut i8,
            Level: u32,
            pDriverInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetPrinterDriver2W(
            hWnd: root::HWND,
            hPrinter: root::HANDLE,
            pEnvironment: root::LPWSTR,
            Level: u32,
            pDriverInfo: root::LPBYTE,
            cbBuf: u32,
            pcbNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    pub const PRINT_EXECUTION_CONTEXT_PRINT_EXECUTION_CONTEXT_APPLICATION:
        root::PRINT_EXECUTION_CONTEXT = 0;
    pub const PRINT_EXECUTION_CONTEXT_PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE:
        root::PRINT_EXECUTION_CONTEXT = 1;
    pub const PRINT_EXECUTION_CONTEXT_PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST:
        root::PRINT_EXECUTION_CONTEXT = 2;
    pub const PRINT_EXECUTION_CONTEXT_PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE:
        root::PRINT_EXECUTION_CONTEXT = 3;
    pub const PRINT_EXECUTION_CONTEXT_PRINT_EXECUTION_CONTEXT_WOW64: root::PRINT_EXECUTION_CONTEXT =
        4;
    pub type PRINT_EXECUTION_CONTEXT = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PRINT_EXECUTION_DATA {
        pub context: root::PRINT_EXECUTION_CONTEXT,
        pub clientAppPID: u32,
    }
    extern "C" {
        pub fn GetPrintExecutionData(pData: *mut root::PRINT_EXECUTION_DATA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetJobNamedPropertyValue(
            hPrinter: root::HANDLE,
            JobId: u32,
            pszName: *const u16,
            pValue: *mut root::PrintPropertyValue,
        ) -> u32;
    }
    extern "C" {
        pub fn FreePrintPropertyValue(pValue: *mut root::PrintPropertyValue);
    }
    extern "C" {
        pub fn FreePrintNamedPropertyArray(
            cProperties: u32,
            ppProperties: *mut *mut root::PrintNamedProperty,
        );
    }
    extern "C" {
        pub fn SetJobNamedProperty(
            hPrinter: root::HANDLE,
            JobId: u32,
            pProperty: *const root::PrintNamedProperty,
        ) -> u32;
    }
    extern "C" {
        pub fn DeleteJobNamedProperty(
            hPrinter: root::HANDLE,
            JobId: u32,
            pszName: *const u16,
        ) -> u32;
    }
    extern "C" {
        pub fn EnumJobNamedProperties(
            hPrinter: root::HANDLE,
            JobId: u32,
            pcProperties: *mut u32,
            ppProperties: *mut *mut root::PrintNamedProperty,
        ) -> u32;
    }
    extern "C" {
        pub fn GetPrintOutputInfo(
            hWnd: root::HWND,
            pszPrinter: *const u16,
            phFile: *mut root::HANDLE,
            ppszOutputFile: *mut *mut u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn _calloc_base(
            _Count: root::size_t,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(_Count: root::size_t, _Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _callnewh(_Size: root::size_t) -> i32;
    }
    extern "C" {
        pub fn _expand(
            _Block: *mut ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn free(_Block: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn _malloc_base(_Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc(_Size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> root::size_t;
    }
    extern "C" {
        pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> root::size_t;
    }
    extern "C" {
        pub fn _realloc_base(
            _Block: *mut ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            _Block: *mut ::std::os::raw::c_void,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _recalloc_base(
            _Block: *mut ::std::os::raw::c_void,
            _Count: root::size_t,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _recalloc(
            _Block: *mut ::std::os::raw::c_void,
            _Count: root::size_t,
            _Size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn _aligned_malloc(
            _Size: root::size_t,
            _Alignment: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_offset_malloc(
            _Size: root::size_t,
            _Alignment: root::size_t,
            _Offset: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_msize(
            _Block: *mut ::std::os::raw::c_void,
            _Alignment: root::size_t,
            _Offset: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _aligned_offset_realloc(
            _Block: *mut ::std::os::raw::c_void,
            _Size: root::size_t,
            _Alignment: root::size_t,
            _Offset: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_offset_recalloc(
            _Block: *mut ::std::os::raw::c_void,
            _Count: root::size_t,
            _Size: root::size_t,
            _Alignment: root::size_t,
            _Offset: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_realloc(
            _Block: *mut ::std::os::raw::c_void,
            _Size: root::size_t,
            _Alignment: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_recalloc(
            _Block: *mut ::std::os::raw::c_void,
            _Count: root::size_t,
            _Size: root::size_t,
            _Alignment: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::std::os::raw::c_void;
    }
    pub type max_align_t = f64;
    pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_void,
        ) -> i32,
    >;
    pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> i32,
    >;
    extern "C" {
        pub fn bsearch_s(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: root::rsize_t,
            _SizeOfElements: root::rsize_t,
            _CompareFunction: root::_CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort_s(
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: root::rsize_t,
            _SizeOfElements: root::rsize_t,
            _CompareFunction: root::_CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn bsearch(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: root::size_t,
            _SizeOfElements: root::size_t,
            _CompareFunction: root::_CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: root::size_t,
            _SizeOfElements: root::size_t,
            _CompareFunction: root::_CoreCrtNonSecureSearchSortCompareFunction,
        );
    }
    extern "C" {
        pub fn _lfind_s(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: *mut u32,
            _SizeOfElements: root::size_t,
            _CompareFunction: root::_CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _lfind(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: *mut u32,
            _SizeOfElements: u32,
            _CompareFunction: root::_CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _lsearch_s(
            _Key: *const ::std::os::raw::c_void,
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: *mut u32,
            _SizeOfElements: root::size_t,
            _CompareFunction: root::_CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _lsearch(
            _Key: *const ::std::os::raw::c_void,
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: *mut u32,
            _SizeOfElements: u32,
            _CompareFunction: root::_CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn lfind(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: *mut u32,
            _SizeOfElements: u32,
            _CompareFunction: root::_CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn lsearch(
            _Key: *const ::std::os::raw::c_void,
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: *mut u32,
            _SizeOfElements: u32,
            _CompareFunction: root::_CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _itow_s(
            _Value: i32,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _itow(
            _Value: i32,
            _Buffer: *mut u16,
            _Radix: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _ltow_s(
            _Value: i32,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ltow(
            _Value: i32,
            _Buffer: *mut u16,
            _Radix: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _ultow_s(
            _Value: u32,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ultow(
            _Value: u32,
            _Buffer: *mut u16,
            _Radix: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn wcstod(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
    }
    extern "C" {
        pub fn _wcstod_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Locale: root::_locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn wcstol(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _wcstol_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn wcstoll(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
        ) -> i64;
    }
    extern "C" {
        pub fn _wcstoll_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn wcstoul(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn _wcstoul_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> u32;
    }
    extern "C" {
        pub fn wcstoull(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
        ) -> u64;
    }
    extern "C" {
        pub fn _wcstoull_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> u64;
    }
    extern "C" {
        pub fn wcstold(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
    }
    extern "C" {
        pub fn _wcstold_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Locale: root::_locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn wcstof(_String: *const u16, _EndPtr: *mut *mut u16) -> f32;
    }
    extern "C" {
        pub fn _wcstof_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Locale: root::_locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn _wtof(_String: *const u16) -> f64;
    }
    extern "C" {
        pub fn _wtof_l(_String: *const u16, _Locale: root::_locale_t) -> f64;
    }
    extern "C" {
        pub fn _wtoi(_String: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wtoi_l(_String: *const u16, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _wtol(_String: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wtol_l(_String: *const u16, _Locale: root::_locale_t) -> i32;
    }
    extern "C" {
        pub fn _wtoll(_String: *const u16) -> i64;
    }
    extern "C" {
        pub fn _wtoll_l(
            _String: *const u16,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn _i64tow_s(
            _Value: i64,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _i64tow(
            _Value: i64,
            _Buffer: *mut u16,
            _Radix: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _ui64tow_s(
            _Value: u64,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ui64tow(
            _Value: u64,
            _Buffer: *mut u16,
            _Radix: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _wtoi64(_String: *const u16) -> i64;
    }
    extern "C" {
        pub fn _wtoi64_l(
            _String: *const u16,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn _wcstoi64(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
        ) -> i64;
    }
    extern "C" {
        pub fn _wcstoi64_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn _wcstoui64(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
        ) -> u64;
    }
    extern "C" {
        pub fn _wcstoui64_l(
            _String: *const u16,
            _EndPtr: *mut *mut u16,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> u64;
    }
    extern "C" {
        pub fn _wfullpath(
            _Buffer: *mut u16,
            _Path: *const u16,
            _BufferCount: root::size_t,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn _wmakepath_s(
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Drive: *const u16,
            _Dir: *const u16,
            _Filename: *const u16,
            _Ext: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wmakepath(
            _Buffer: *mut u16,
            _Drive: *const u16,
            _Dir: *const u16,
            _Filename: *const u16,
            _Ext: *const u16,
        );
    }
    extern "C" {
        pub fn _wperror(_ErrorMessage: *const u16);
    }
    extern "C" {
        pub fn _wsplitpath(
            _FullPath: *const u16,
            _Drive: *mut u16,
            _Dir: *mut u16,
            _Filename: *mut u16,
            _Ext: *mut u16,
        );
    }
    extern "C" {
        pub fn _wsplitpath_s(
            _FullPath: *const u16,
            _Drive: *mut u16,
            _DriveCount: root::size_t,
            _Dir: *mut u16,
            _DirCount: root::size_t,
            _Filename: *mut u16,
            _FilenameCount: root::size_t,
            _Ext: *mut u16,
            _ExtCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wdupenv_s(
            _Buffer: *mut *mut u16,
            _BufferCount: *mut root::size_t,
            _VarName: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wgetenv_s(
            _RequiredCount: *mut root::size_t,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _VarName: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wputenv(_EnvString: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wputenv_s(_Name: *const u16, _Value: *const u16) -> root::errno_t;
    }
    extern "C" {
        pub fn _wsearchenv_s(
            _Filename: *const u16,
            _VarName: *const u16,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wsearchenv(_Filename: *const u16, _VarName: *const u16, _ResultPath: *mut u16);
    }
    extern "C" {
        pub fn _wsystem(_Command: *const u16) -> i32;
    }
    extern "C" {
        pub fn _swab(
            _Buf1: *mut i8,
            _Buf2: *mut i8,
            _SizeInBytes: i32,
        );
    }
    extern "C" {
        pub fn exit(_Code: i32);
    }
    extern "C" {
        pub fn _exit(_Code: i32);
    }
    extern "C" {
        pub fn _Exit(_Code: i32);
    }
    extern "C" {
        pub fn quick_exit(_Code: i32);
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn _set_abort_behavior(
            _Flags: u32,
            _Mask: u32,
        ) -> u32;
    }
    pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> i32>;
    extern "C" {
        pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
            -> i32;
    }
    extern "C" {
        pub fn _onexit(_Func: root::_onexit_t) -> root::_onexit_t;
    }
    extern "C" {
        pub fn at_quick_exit(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> i32;
    }
    pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
    pub type _invalid_parameter_handler = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const u16,
            arg2: *const u16,
            arg3: *const u16,
            arg4: u32,
            arg5: usize,
        ),
    >;
    extern "C" {
        pub fn _set_purecall_handler(_Handler: root::_purecall_handler) -> root::_purecall_handler;
    }
    extern "C" {
        pub fn _get_purecall_handler() -> root::_purecall_handler;
    }
    extern "C" {
        pub fn _set_invalid_parameter_handler(
            _Handler: root::_invalid_parameter_handler,
        ) -> root::_invalid_parameter_handler;
    }
    extern "C" {
        pub fn _get_invalid_parameter_handler() -> root::_invalid_parameter_handler;
    }
    extern "C" {
        pub fn _set_thread_local_invalid_parameter_handler(
            _Handler: root::_invalid_parameter_handler,
        ) -> root::_invalid_parameter_handler;
    }
    extern "C" {
        pub fn _get_thread_local_invalid_parameter_handler() -> root::_invalid_parameter_handler;
    }
    extern "C" {
        pub fn _set_error_mode(_Mode: i32) -> i32;
    }
    extern "C" {
        pub fn __sys_errlist() -> *mut *mut i8;
    }
    extern "C" {
        pub fn __sys_nerr() -> *mut i32;
    }
    extern "C" {
        pub fn perror(_ErrMsg: *const i8);
    }
    extern "C" {
        pub fn __p__pgmptr() -> *mut *mut i8;
    }
    extern "C" {
        pub fn __p__wpgmptr() -> *mut *mut u16;
    }
    extern "C" {
        pub fn __p__fmode() -> *mut i32;
    }
    extern "C" {
        pub fn _get_pgmptr(_Value: *mut *mut i8) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_wpgmptr(_Value: *mut *mut u16) -> root::errno_t;
    }
    extern "C" {
        pub fn _set_fmode(_Mode: i32) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_fmode(_PMode: *mut i32) -> root::errno_t;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _div_t {
        pub quot: i32,
        pub rem: i32,
    }
    pub type div_t = root::_div_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ldiv_t {
        pub quot: i32,
        pub rem: i32,
    }
    pub type ldiv_t = root::_ldiv_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _lldiv_t {
        pub quot: i64,
        pub rem: i64,
    }
    pub type lldiv_t = root::_lldiv_t;
    extern "C" {
        pub fn abs(_Number: i32) -> i32;
    }
    extern "C" {
        pub fn labs(_Number: i32) -> i32;
    }
    extern "C" {
        pub fn llabs(_Number: i64) -> i64;
    }
    extern "C" {
        pub fn _abs64(_Number: i64) -> i64;
    }
    extern "C" {
        pub fn _byteswap_ushort(_Number: u16) -> u16;
    }
    extern "C" {
        pub fn _byteswap_ulong(_Number: u32) -> u32;
    }
    extern "C" {
        pub fn _byteswap_uint64(
            _Number: u64,
        ) -> u64;
    }
    extern "C" {
        pub fn div(
            _Numerator: i32,
            _Denominator: i32,
        ) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            _Numerator: i32,
            _Denominator: i32,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            _Numerator: i64,
            _Denominator: i64,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn _lrotl(
            _Value: u32,
            _Shift: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn _lrotr(
            _Value: u32,
            _Shift: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn srand(_Seed: u32);
    }
    extern "C" {
        pub fn rand() -> i32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LDOUBLE {
        pub ld: [u8; 10usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRT_DOUBLE {
        pub x: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _CRT_FLOAT {
        pub f: f32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LONGDOUBLE {
        pub x: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _LDBL12 {
        pub ld12: [u8; 12usize],
    }
    extern "C" {
        pub fn atof(_String: *const i8) -> f64;
    }
    extern "C" {
        pub fn atoi(_String: *const i8) -> i32;
    }
    extern "C" {
        pub fn atol(_String: *const i8) -> i32;
    }
    extern "C" {
        pub fn atoll(_String: *const i8) -> i64;
    }
    extern "C" {
        pub fn _atoi64(_String: *const i8) -> i64;
    }
    extern "C" {
        pub fn _atof_l(_String: *const i8, _Locale: root::_locale_t) -> f64;
    }
    extern "C" {
        pub fn _atoi_l(
            _String: *const i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _atol_l(
            _String: *const i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _atoll_l(
            _String: *const i8,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn _atoi64_l(
            _String: *const i8,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn _atoflt(
            _Result: *mut root::_CRT_FLOAT,
            _String: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _atodbl(
            _Result: *mut root::_CRT_DOUBLE,
            _String: *mut i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _atoldbl(
            _Result: *mut root::_LDOUBLE,
            _String: *mut i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _atoflt_l(
            _Result: *mut root::_CRT_FLOAT,
            _String: *const i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _atodbl_l(
            _Result: *mut root::_CRT_DOUBLE,
            _String: *mut i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _atoldbl_l(
            _Result: *mut root::_LDOUBLE,
            _String: *mut i8,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn strtof(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
        ) -> f32;
    }
    extern "C" {
        pub fn _strtof_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Locale: root::_locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtod(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
        ) -> f64;
    }
    extern "C" {
        pub fn _strtod_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Locale: root::_locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtold(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
        ) -> f64;
    }
    extern "C" {
        pub fn _strtold_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Locale: root::_locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtol(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _strtol_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn strtoll(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
        ) -> i64;
    }
    extern "C" {
        pub fn _strtoll_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn strtoul(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
        ) -> u32;
    }
    extern "C" {
        pub fn _strtoul_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> u32;
    }
    extern "C" {
        pub fn strtoull(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
        ) -> u64;
    }
    extern "C" {
        pub fn _strtoull_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> u64;
    }
    extern "C" {
        pub fn _strtoi64(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
        ) -> i64;
    }
    extern "C" {
        pub fn _strtoi64_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> i64;
    }
    extern "C" {
        pub fn _strtoui64(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
        ) -> u64;
    }
    extern "C" {
        pub fn _strtoui64_l(
            _String: *const i8,
            _EndPtr: *mut *mut i8,
            _Radix: i32,
            _Locale: root::_locale_t,
        ) -> u64;
    }
    extern "C" {
        pub fn _itoa_s(
            _Value: i32,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _itoa(
            _Value: i32,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _ltoa_s(
            _Value: i32,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ltoa(
            _Value: i32,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _ultoa_s(
            _Value: u32,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ultoa(
            _Value: u32,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _i64toa_s(
            _Value: i64,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _i64toa(
            _Value: i64,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _ui64toa_s(
            _Value: u64,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Radix: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ui64toa(
            _Value: u64,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _ecvt_s(
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Value: f64,
            _DigitCount: i32,
            _PtDec: *mut i32,
            _PtSign: *mut i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _ecvt(
            _Value: f64,
            _DigitCount: i32,
            _PtDec: *mut i32,
            _PtSign: *mut i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _fcvt_s(
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Value: f64,
            _FractionalDigitCount: i32,
            _PtDec: *mut i32,
            _PtSign: *mut i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _fcvt(
            _Value: f64,
            _FractionalDigitCount: i32,
            _PtDec: *mut i32,
            _PtSign: *mut i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _gcvt_s(
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Value: f64,
            _DigitCount: i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _gcvt(
            _Value: f64,
            _DigitCount: i32,
            _Buffer: *mut i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn mblen(
            _Ch: *const i8,
            _MaxCount: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _mblen_l(
            _Ch: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _mbstrlen(_String: *const i8) -> root::size_t;
    }
    extern "C" {
        pub fn _mbstrlen_l(
            _String: *const i8,
            _Locale: root::_locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _mbstrnlen(
            _String: *const i8,
            _MaxCount: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _mbstrnlen_l(
            _String: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbtowc(
            _DstCh: *mut u16,
            _SrcCh: *const i8,
            _SrcSizeInBytes: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _mbtowc_l(
            _DstCh: *mut u16,
            _SrcCh: *const i8,
            _SrcSizeInBytes: root::size_t,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn mbstowcs_s(
            _PtNumOfCharConverted: *mut root::size_t,
            _DstBuf: *mut u16,
            _SizeInWords: root::size_t,
            _SrcBuf: *const i8,
            _MaxCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn mbstowcs(
            _Dest: *mut u16,
            _Source: *const i8,
            _MaxCount: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _mbstowcs_s_l(
            _PtNumOfCharConverted: *mut root::size_t,
            _DstBuf: *mut u16,
            _SizeInWords: root::size_t,
            _SrcBuf: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _mbstowcs_l(
            _Dest: *mut u16,
            _Source: *const i8,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wctomb(_MbCh: *mut i8, _WCh: u16) -> i32;
    }
    extern "C" {
        pub fn _wctomb_l(
            _MbCh: *mut i8,
            _WCh: u16,
            _Locale: root::_locale_t,
        ) -> i32;
    }
    extern "C" {
        pub fn wctomb_s(
            _SizeConverted: *mut i32,
            _MbCh: *mut i8,
            _SizeInBytes: root::rsize_t,
            _WCh: u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wctomb_s_l(
            _SizeConverted: *mut i32,
            _MbCh: *mut i8,
            _SizeInBytes: root::size_t,
            _WCh: u16,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn wcstombs_s(
            _PtNumOfCharConverted: *mut root::size_t,
            _Dst: *mut i8,
            _DstSizeInBytes: root::size_t,
            _Src: *const u16,
            _MaxCountInBytes: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn wcstombs(
            _Dest: *mut i8,
            _Source: *const u16,
            _MaxCount: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _wcstombs_s_l(
            _PtNumOfCharConverted: *mut root::size_t,
            _Dst: *mut i8,
            _DstSizeInBytes: root::size_t,
            _Src: *const u16,
            _MaxCountInBytes: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wcstombs_l(
            _Dest: *mut i8,
            _Source: *const u16,
            _MaxCount: root::size_t,
            _Locale: root::_locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _fullpath(
            _Buffer: *mut i8,
            _Path: *const i8,
            _BufferCount: root::size_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _makepath_s(
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Drive: *const i8,
            _Dir: *const i8,
            _Filename: *const i8,
            _Ext: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _makepath(
            _Buffer: *mut i8,
            _Drive: *const i8,
            _Dir: *const i8,
            _Filename: *const i8,
            _Ext: *const i8,
        );
    }
    extern "C" {
        pub fn _splitpath(
            _FullPath: *const i8,
            _Drive: *mut i8,
            _Dir: *mut i8,
            _Filename: *mut i8,
            _Ext: *mut i8,
        );
    }
    extern "C" {
        pub fn _splitpath_s(
            _FullPath: *const i8,
            _Drive: *mut i8,
            _DriveCount: root::size_t,
            _Dir: *mut i8,
            _DirCount: root::size_t,
            _Filename: *mut i8,
            _FilenameCount: root::size_t,
            _Ext: *mut i8,
            _ExtCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn getenv_s(
            _RequiredCount: *mut root::size_t,
            _Buffer: *mut i8,
            _BufferCount: root::rsize_t,
            _VarName: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn __p___argc() -> *mut i32;
    }
    extern "C" {
        pub fn __p___argv() -> *mut *mut *mut i8;
    }
    extern "C" {
        pub fn __p___wargv() -> *mut *mut *mut u16;
    }
    extern "C" {
        pub fn __p__environ() -> *mut *mut *mut i8;
    }
    extern "C" {
        pub fn __p__wenviron() -> *mut *mut *mut u16;
    }
    extern "C" {
        pub fn getenv(_VarName: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn _dupenv_s(
            _Buffer: *mut *mut i8,
            _BufferCount: *mut root::size_t,
            _VarName: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn system(_Command: *const i8) -> i32;
    }
    extern "C" {
        pub fn _putenv(_EnvString: *const i8) -> i32;
    }
    extern "C" {
        pub fn _putenv_s(
            _Name: *const i8,
            _Value: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _searchenv_s(
            _Filename: *const i8,
            _VarName: *const i8,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _searchenv(
            _Filename: *const i8,
            _VarName: *const i8,
            _Buffer: *mut i8,
        );
    }
    extern "C" {
        pub fn _seterrormode(_Mode: i32);
    }
    extern "C" {
        pub fn _beep(_Frequency: u32, _Duration: u32);
    }
    extern "C" {
        pub fn _sleep(_Duration: u32);
    }
    extern "C" {
        pub fn ecvt(
            _Value: f64,
            _DigitCount: i32,
            _PtDec: *mut i32,
            _PtSign: *mut i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn fcvt(
            _Value: f64,
            _FractionalDigitCount: i32,
            _PtDec: *mut i32,
            _PtSign: *mut i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn gcvt(
            _Value: f64,
            _DigitCount: i32,
            _DstBuf: *mut i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn itoa(
            _Value: i32,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn ltoa(
            _Value: i32,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn swab(
            _Buf1: *mut i8,
            _Buf2: *mut i8,
            _SizeInBytes: i32,
        );
    }
    extern "C" {
        pub fn ultoa(
            _Value: u32,
            _Buffer: *mut i8,
            _Radix: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn putenv(_EnvString: *const i8) -> i32;
    }
    extern "C" {
        pub fn onexit(_Func: root::_onexit_t) -> root::_onexit_t;
    }
    pub const tagREGCLS_REGCLS_SINGLEUSE: root::tagREGCLS = 0;
    pub const tagREGCLS_REGCLS_MULTIPLEUSE: root::tagREGCLS = 1;
    pub const tagREGCLS_REGCLS_MULTI_SEPARATE: root::tagREGCLS = 2;
    pub const tagREGCLS_REGCLS_SUSPENDED: root::tagREGCLS = 4;
    pub const tagREGCLS_REGCLS_SURROGATE: root::tagREGCLS = 8;
    pub const tagREGCLS_REGCLS_AGILE: root::tagREGCLS = 16;
    pub type tagREGCLS = i32;
    pub use self::super::root::tagREGCLS as REGCLS;
    pub const tagCOINITBASE_COINITBASE_MULTITHREADED: root::tagCOINITBASE = 0;
    pub type tagCOINITBASE = i32;
    pub use self::super::root::tagCOINITBASE as COINITBASE;
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPUNKNOWN = *mut root::IUnknown;
    extern "C" {
        pub static IID_IUnknown: root::IID;
    }
    #[repr(C)]
    pub struct IUnknown__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IUnknown {
        pub vtable_: *const IUnknown__bindgen_vtable,
    }
    extern "C" {
        pub fn IUnknown_QueryInterface_Proxy(
            This: *mut root::IUnknown,
            riid: *const root::IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IUnknown_QueryInterface_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IUnknown_AddRef_Proxy(This: *mut root::IUnknown) -> root::ULONG;
    }
    extern "C" {
        pub fn IUnknown_AddRef_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IUnknown_Release_Proxy(This: *mut root::IUnknown) -> root::ULONG;
    }
    extern "C" {
        pub fn IUnknown_Release_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_AsyncIUnknown: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIUnknown {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPCLASSFACTORY = *mut root::IClassFactory;
    extern "C" {
        pub static IID_IClassFactory: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IClassFactory {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IClassFactory_RemoteCreateInstance_Proxy(
            This: *mut root::IClassFactory,
            riid: *const root::IID,
            ppvObject: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IClassFactory_RemoteCreateInstance_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IClassFactory_RemoteLockServer_Proxy(
            This: *mut root::IClassFactory,
            fLock: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IClassFactory_RemoteLockServer_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn IClassFactory_CreateInstance_Proxy(
            This: *mut root::IClassFactory,
            pUnkOuter: *mut root::IUnknown,
            riid: *const root::IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IClassFactory_CreateInstance_Stub(
            This: *mut root::IClassFactory,
            riid: *const root::IID,
            ppvObject: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IClassFactory_LockServer_Proxy(
            This: *mut root::IClassFactory,
            fLock: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IClassFactory_LockServer_Stub(
            This: *mut root::IClassFactory,
            fLock: root::BOOL,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumContextProps {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IContext {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IObjContext {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COSERVERINFO {
        pub dwReserved1: u32,
        pub pwszName: root::LPWSTR,
        pub pAuthInfo: *mut root::COAUTHINFO,
        pub dwReserved2: u32,
    }
    pub type COSERVERINFO = root::_COSERVERINFO;
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPMARSHAL = *mut root::IMarshal;
    extern "C" {
        pub static IID_IMarshal: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMarshal {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_INoMarshal: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct INoMarshal {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IAgileObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAgileObject {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub const tagACTIVATIONTYPE_ACTIVATIONTYPE_UNCATEGORIZED: root::tagACTIVATIONTYPE = 0;
    pub const tagACTIVATIONTYPE_ACTIVATIONTYPE_FROM_MONIKER: root::tagACTIVATIONTYPE = 1;
    pub const tagACTIVATIONTYPE_ACTIVATIONTYPE_FROM_DATA: root::tagACTIVATIONTYPE = 2;
    pub const tagACTIVATIONTYPE_ACTIVATIONTYPE_FROM_STORAGE: root::tagACTIVATIONTYPE = 4;
    pub const tagACTIVATIONTYPE_ACTIVATIONTYPE_FROM_STREAM: root::tagACTIVATIONTYPE = 8;
    pub const tagACTIVATIONTYPE_ACTIVATIONTYPE_FROM_FILE: root::tagACTIVATIONTYPE = 16;
    pub type tagACTIVATIONTYPE = i32;
    pub use self::super::root::tagACTIVATIONTYPE as ACTIVATIONTYPE;
    extern "C" {
        pub static IID_IActivationFilter: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IActivationFilter {
        pub _base: root::IUnknown,
    }
    pub type LPMARSHAL2 = *mut root::IMarshal2;
    extern "C" {
        pub static IID_IMarshal2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMarshal2 {
        pub _base: root::IMarshal,
    }
    pub type LPMALLOC = *mut root::IMalloc;
    extern "C" {
        pub static IID_IMalloc: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMalloc {
        pub _base: root::IUnknown,
    }
    pub type LPSTDMARSHALINFO = *mut root::IStdMarshalInfo;
    extern "C" {
        pub static IID_IStdMarshalInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IStdMarshalInfo {
        pub _base: root::IUnknown,
    }
    pub type LPEXTERNALCONNECTION = *mut root::IExternalConnection;
    pub const tagEXTCONN_EXTCONN_STRONG: root::tagEXTCONN = 1;
    pub const tagEXTCONN_EXTCONN_WEAK: root::tagEXTCONN = 2;
    pub const tagEXTCONN_EXTCONN_CALLABLE: root::tagEXTCONN = 4;
    pub type tagEXTCONN = i32;
    pub use self::super::root::tagEXTCONN as EXTCONN;
    extern "C" {
        pub static IID_IExternalConnection: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IExternalConnection {
        pub _base: root::IUnknown,
    }
    pub type LPMULTIQI = *mut root::IMultiQI;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMULTI_QI {
        pub pIID: *const root::IID,
        pub pItf: *mut root::IUnknown,
        pub hr: root::HRESULT,
    }
    pub type MULTI_QI = root::tagMULTI_QI;
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IMultiQI: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMultiQI {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_AsyncIMultiQI: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIMultiQI {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternalUnknown: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternalUnknown {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPENUMUNKNOWN = *mut root::IEnumUnknown;
    extern "C" {
        pub static IID_IEnumUnknown: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumUnknown {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumUnknown_RemoteNext_Proxy(
            This: *mut root::IEnumUnknown,
            celt: root::ULONG,
            rgelt: *mut *mut root::IUnknown,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumUnknown_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPENUMSTRING = *mut root::IEnumString;
    extern "C" {
        pub static IID_IEnumString: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumString {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumString_RemoteNext_Proxy(
            This: *mut root::IEnumString,
            celt: root::ULONG,
            rgelt: *mut root::LPOLESTR,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumString_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static IID_ISequentialStream: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISequentialStream {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn ISequentialStream_RemoteRead_Proxy(
            This: *mut root::ISequentialStream,
            pv: *mut root::byte,
            cb: root::ULONG,
            pcbRead: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ISequentialStream_RemoteRead_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ISequentialStream_RemoteWrite_Proxy(
            This: *mut root::ISequentialStream,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ISequentialStream_RemoteWrite_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPSTREAM = *mut root::IStream;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagSTATSTG {
        pub pwcsName: root::LPOLESTR,
        pub type_: u32,
        pub cbSize: root::ULARGE_INTEGER,
        pub mtime: root::FILETIME,
        pub ctime: root::FILETIME,
        pub atime: root::FILETIME,
        pub grfMode: u32,
        pub grfLocksSupported: u32,
        pub clsid: root::CLSID,
        pub grfStateBits: u32,
        pub reserved: u32,
    }
    pub type STATSTG = root::tagSTATSTG;
    pub const tagSTGTY_STGTY_STORAGE: root::tagSTGTY = 1;
    pub const tagSTGTY_STGTY_STREAM: root::tagSTGTY = 2;
    pub const tagSTGTY_STGTY_LOCKBYTES: root::tagSTGTY = 3;
    pub const tagSTGTY_STGTY_PROPERTY: root::tagSTGTY = 4;
    pub type tagSTGTY = i32;
    pub use self::super::root::tagSTGTY as STGTY;
    pub const tagSTREAM_SEEK_STREAM_SEEK_SET: root::tagSTREAM_SEEK = 0;
    pub const tagSTREAM_SEEK_STREAM_SEEK_CUR: root::tagSTREAM_SEEK = 1;
    pub const tagSTREAM_SEEK_STREAM_SEEK_END: root::tagSTREAM_SEEK = 2;
    pub type tagSTREAM_SEEK = i32;
    pub use self::super::root::tagSTREAM_SEEK as STREAM_SEEK;
    pub const tagLOCKTYPE_LOCK_WRITE: root::tagLOCKTYPE = 1;
    pub const tagLOCKTYPE_LOCK_EXCLUSIVE: root::tagLOCKTYPE = 2;
    pub const tagLOCKTYPE_LOCK_ONLYONCE: root::tagLOCKTYPE = 4;
    pub type tagLOCKTYPE = i32;
    pub use self::super::root::tagLOCKTYPE as LOCKTYPE;
    extern "C" {
        pub static IID_IStream: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IStream {
        pub _base: root::ISequentialStream,
    }
    extern "C" {
        pub fn IStream_RemoteSeek_Proxy(
            This: *mut root::IStream,
            dlibMove: root::LARGE_INTEGER,
            dwOrigin: u32,
            plibNewPosition: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_RemoteSeek_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IStream_RemoteCopyTo_Proxy(
            This: *mut root::IStream,
            pstm: *mut root::IStream,
            cb: root::ULARGE_INTEGER,
            pcbRead: *mut root::ULARGE_INTEGER,
            pcbWritten: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_RemoteCopyTo_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type RPCOLEDATAREP = root::ULONG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRPCOLEMESSAGE {
        pub reserved1: *mut ::std::os::raw::c_void,
        pub dataRepresentation: root::RPCOLEDATAREP,
        pub Buffer: *mut ::std::os::raw::c_void,
        pub cbBuffer: root::ULONG,
        pub iMethod: root::ULONG,
        pub reserved2: [*mut ::std::os::raw::c_void; 5usize],
        pub rpcFlags: root::ULONG,
    }
    pub type RPCOLEMESSAGE = root::tagRPCOLEMESSAGE;
    pub type PRPCOLEMESSAGE = *mut root::RPCOLEMESSAGE;
    extern "C" {
        pub static IID_IRpcChannelBuffer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcChannelBuffer {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IRpcChannelBuffer2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcChannelBuffer2 {
        pub _base: root::IRpcChannelBuffer,
    }
    extern "C" {
        pub static IID_IAsyncRpcChannelBuffer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAsyncRpcChannelBuffer {
        pub _base: root::IRpcChannelBuffer2,
    }
    extern "C" {
        pub static IID_IRpcChannelBuffer3: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcChannelBuffer3 {
        pub _base: root::IRpcChannelBuffer2,
    }
    extern "C" {
        pub static IID_IRpcSyntaxNegotiate: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcSyntaxNegotiate {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IRpcProxyBuffer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcProxyBuffer {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IRpcStubBuffer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcStubBuffer {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IPSFactoryBuffer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPSFactoryBuffer {
        pub _base: root::IUnknown,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SChannelHookCallInfo {
        pub iid: root::IID,
        pub cbSize: u32,
        pub uCausality: root::GUID,
        pub dwServerPid: u32,
        pub iMethod: u32,
        pub pObject: *mut ::std::os::raw::c_void,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IChannelHook: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IChannelHook {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSOLE_AUTHENTICATION_SERVICE {
        pub dwAuthnSvc: u32,
        pub dwAuthzSvc: u32,
        pub pPrincipalName: *mut root::OLECHAR,
        pub hr: root::HRESULT,
    }
    pub type SOLE_AUTHENTICATION_SERVICE = root::tagSOLE_AUTHENTICATION_SERVICE;
    pub type PSOLE_AUTHENTICATION_SERVICE = *mut root::SOLE_AUTHENTICATION_SERVICE;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_NONE:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 0;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_MUTUAL_AUTH:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 1;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_STATIC_CLOAKING:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 32;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_DYNAMIC_CLOAKING:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 64;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_ANY_AUTHORITY:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 128;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_MAKE_FULLSIC:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 256;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_DEFAULT:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 2048;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_SECURE_REFS:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 2;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_ACCESS_CONTROL:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 4;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_APPID:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 8;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_DYNAMIC:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 16;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_REQUIRE_FULLSIC:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 512;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_AUTO_IMPERSONATE:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 1024;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_DISABLE_AAA:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 4096;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_NO_CUSTOM_MARSHAL:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 8192;
    pub const tagEOLE_AUTHENTICATION_CAPABILITIES_EOAC_RESERVED1:
        root::tagEOLE_AUTHENTICATION_CAPABILITIES = 16384;
    pub type tagEOLE_AUTHENTICATION_CAPABILITIES = i32;
    pub use self::super::root::tagEOLE_AUTHENTICATION_CAPABILITIES as EOLE_AUTHENTICATION_CAPABILITIES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSOLE_AUTHENTICATION_INFO {
        pub dwAuthnSvc: u32,
        pub dwAuthzSvc: u32,
        pub pAuthInfo: *mut ::std::os::raw::c_void,
    }
    pub type SOLE_AUTHENTICATION_INFO = root::tagSOLE_AUTHENTICATION_INFO;
    pub type PSOLE_AUTHENTICATION_INFO = *mut root::tagSOLE_AUTHENTICATION_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSOLE_AUTHENTICATION_LIST {
        pub cAuthInfo: u32,
        pub aAuthInfo: *mut root::SOLE_AUTHENTICATION_INFO,
    }
    pub type SOLE_AUTHENTICATION_LIST = root::tagSOLE_AUTHENTICATION_LIST;
    pub type PSOLE_AUTHENTICATION_LIST = *mut root::tagSOLE_AUTHENTICATION_LIST;
    extern "C" {
        pub static IID_IClientSecurity: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IClientSecurity {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IServerSecurity: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IServerSecurity {
        pub _base: root::IUnknown,
    }
    pub const tagRPCOPT_PROPERTIES_COMBND_RPCTIMEOUT: root::tagRPCOPT_PROPERTIES = 1;
    pub const tagRPCOPT_PROPERTIES_COMBND_SERVER_LOCALITY: root::tagRPCOPT_PROPERTIES = 2;
    pub const tagRPCOPT_PROPERTIES_COMBND_RESERVED1: root::tagRPCOPT_PROPERTIES = 4;
    pub const tagRPCOPT_PROPERTIES_COMBND_RESERVED2: root::tagRPCOPT_PROPERTIES = 5;
    pub const tagRPCOPT_PROPERTIES_COMBND_RESERVED3: root::tagRPCOPT_PROPERTIES = 8;
    pub const tagRPCOPT_PROPERTIES_COMBND_RESERVED4: root::tagRPCOPT_PROPERTIES = 16;
    pub type tagRPCOPT_PROPERTIES = i32;
    pub use self::super::root::tagRPCOPT_PROPERTIES as RPCOPT_PROPERTIES;
    pub const tagRPCOPT_SERVER_LOCALITY_VALUES_SERVER_LOCALITY_PROCESS_LOCAL:
        root::tagRPCOPT_SERVER_LOCALITY_VALUES = 0;
    pub const tagRPCOPT_SERVER_LOCALITY_VALUES_SERVER_LOCALITY_MACHINE_LOCAL:
        root::tagRPCOPT_SERVER_LOCALITY_VALUES = 1;
    pub const tagRPCOPT_SERVER_LOCALITY_VALUES_SERVER_LOCALITY_REMOTE:
        root::tagRPCOPT_SERVER_LOCALITY_VALUES = 2;
    pub type tagRPCOPT_SERVER_LOCALITY_VALUES = i32;
    pub use self::super::root::tagRPCOPT_SERVER_LOCALITY_VALUES as RPCOPT_SERVER_LOCALITY_VALUES;
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IRpcOptions: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcOptions {
        pub _base: root::IUnknown,
    }
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_EXCEPTION_HANDLING: root::tagGLOBALOPT_PROPERTIES = 1;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_APPID: root::tagGLOBALOPT_PROPERTIES = 2;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_RPC_THREADPOOL_SETTING: root::tagGLOBALOPT_PROPERTIES =
        3;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_RO_SETTINGS: root::tagGLOBALOPT_PROPERTIES = 4;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_UNMARSHALING_POLICY: root::tagGLOBALOPT_PROPERTIES = 5;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_PROPERTIES_RESERVED1: root::tagGLOBALOPT_PROPERTIES =
        6;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_PROPERTIES_RESERVED2: root::tagGLOBALOPT_PROPERTIES =
        7;
    pub const tagGLOBALOPT_PROPERTIES_COMGLB_PROPERTIES_RESERVED3: root::tagGLOBALOPT_PROPERTIES =
        8;
    pub type tagGLOBALOPT_PROPERTIES = i32;
    pub use self::super::root::tagGLOBALOPT_PROPERTIES as GLOBALOPT_PROPERTIES;
    pub const tagGLOBALOPT_EH_VALUES_COMGLB_EXCEPTION_HANDLE: root::tagGLOBALOPT_EH_VALUES = 0;
    pub const tagGLOBALOPT_EH_VALUES_COMGLB_EXCEPTION_DONOT_HANDLE_FATAL:
        root::tagGLOBALOPT_EH_VALUES = 1;
    pub const tagGLOBALOPT_EH_VALUES_COMGLB_EXCEPTION_DONOT_HANDLE: root::tagGLOBALOPT_EH_VALUES =
        1;
    pub const tagGLOBALOPT_EH_VALUES_COMGLB_EXCEPTION_DONOT_HANDLE_ANY:
        root::tagGLOBALOPT_EH_VALUES = 2;
    pub type tagGLOBALOPT_EH_VALUES = i32;
    pub use self::super::root::tagGLOBALOPT_EH_VALUES as GLOBALOPT_EH_VALUES;
    pub const tagGLOBALOPT_RPCTP_VALUES_COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL:
        root::tagGLOBALOPT_RPCTP_VALUES = 0;
    pub const tagGLOBALOPT_RPCTP_VALUES_COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL:
        root::tagGLOBALOPT_RPCTP_VALUES = 1;
    pub type tagGLOBALOPT_RPCTP_VALUES = i32;
    pub use self::super::root::tagGLOBALOPT_RPCTP_VALUES as GLOBALOPT_RPCTP_VALUES;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES:
        root::tagGLOBALOPT_RO_FLAGS = 1;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES:
        root::tagGLOBALOPT_RO_FLAGS = 2;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES : root :: tagGLOBALOPT_RO_FLAGS = 4 ;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_FAST_RUNDOWN: root::tagGLOBALOPT_RO_FLAGS = 8;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_RESERVED1: root::tagGLOBALOPT_RO_FLAGS = 16;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_RESERVED2: root::tagGLOBALOPT_RO_FLAGS = 32;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_RESERVED3: root::tagGLOBALOPT_RO_FLAGS = 64;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES:
        root::tagGLOBALOPT_RO_FLAGS = 128;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_RESERVED4: root::tagGLOBALOPT_RO_FLAGS = 256;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_RESERVED5: root::tagGLOBALOPT_RO_FLAGS = 512;
    pub const tagGLOBALOPT_RO_FLAGS_COMGLB_RESERVED6: root::tagGLOBALOPT_RO_FLAGS = 1024;
    pub type tagGLOBALOPT_RO_FLAGS = i32;
    pub use self::super::root::tagGLOBALOPT_RO_FLAGS as GLOBALOPT_RO_FLAGS;
    pub const tagGLOBALOPT_UNMARSHALING_POLICY_VALUES_COMGLB_UNMARSHALING_POLICY_NORMAL:
        root::tagGLOBALOPT_UNMARSHALING_POLICY_VALUES = 0;
    pub const tagGLOBALOPT_UNMARSHALING_POLICY_VALUES_COMGLB_UNMARSHALING_POLICY_STRONG:
        root::tagGLOBALOPT_UNMARSHALING_POLICY_VALUES = 1;
    pub const tagGLOBALOPT_UNMARSHALING_POLICY_VALUES_COMGLB_UNMARSHALING_POLICY_HYBRID:
        root::tagGLOBALOPT_UNMARSHALING_POLICY_VALUES = 2;
    pub type tagGLOBALOPT_UNMARSHALING_POLICY_VALUES = i32;
    pub use self::super::root::tagGLOBALOPT_UNMARSHALING_POLICY_VALUES as GLOBALOPT_UNMARSHALING_POLICY_VALUES;
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IGlobalOptions: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IGlobalOptions {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPSURROGATE = *mut root::ISurrogate;
    extern "C" {
        pub static IID_ISurrogate: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISurrogate {
        pub _base: root::IUnknown,
    }
    pub type LPGLOBALINTERFACETABLE = *mut root::IGlobalInterfaceTable;
    extern "C" {
        pub static IID_IGlobalInterfaceTable: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IGlobalInterfaceTable {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_ISynchronize: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISynchronize {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ISynchronizeHandle: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISynchronizeHandle {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ISynchronizeEvent: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISynchronizeEvent {
        pub _base: root::ISynchronizeHandle,
    }
    extern "C" {
        pub static IID_ISynchronizeContainer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISynchronizeContainer {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ISynchronizeMutex: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISynchronizeMutex {
        pub _base: root::ISynchronize,
    }
    pub type LPCANCELMETHODCALLS = *mut root::ICancelMethodCalls;
    extern "C" {
        pub static IID_ICancelMethodCalls: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICancelMethodCalls {
        pub _base: root::IUnknown,
    }
    pub const tagDCOM_CALL_STATE_DCOM_NONE: root::tagDCOM_CALL_STATE = 0;
    pub const tagDCOM_CALL_STATE_DCOM_CALL_COMPLETE: root::tagDCOM_CALL_STATE = 1;
    pub const tagDCOM_CALL_STATE_DCOM_CALL_CANCELED: root::tagDCOM_CALL_STATE = 2;
    pub type tagDCOM_CALL_STATE = i32;
    pub use self::super::root::tagDCOM_CALL_STATE as DCOM_CALL_STATE;
    extern "C" {
        pub static IID_IAsyncManager: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAsyncManager {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ICallFactory: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICallFactory {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IRpcHelper: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRpcHelper {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IReleaseMarshalBuffers: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IReleaseMarshalBuffers {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IWaitMultiple: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWaitMultiple {
        pub _base: root::IUnknown,
    }
    pub type LPADDRTRACKINGCONTROL = *mut root::IAddrTrackingControl;
    extern "C" {
        pub static IID_IAddrTrackingControl: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAddrTrackingControl {
        pub _base: root::IUnknown,
    }
    pub type LPADDREXCLUSIONCONTROL = *mut root::IAddrExclusionControl;
    extern "C" {
        pub static IID_IAddrExclusionControl: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAddrExclusionControl {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IPipeByte: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPipeByte {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_AsyncIPipeByte: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIPipeByte {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IPipeLong: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPipeLong {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_AsyncIPipeLong: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIPipeLong {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IPipeDouble: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPipeDouble {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_AsyncIPipeDouble: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIPipeDouble {
        pub _base: root::IUnknown,
    }
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_NONE: root::_APTTYPEQUALIFIER = 0;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_IMPLICIT_MTA: root::_APTTYPEQUALIFIER = 1;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_NA_ON_MTA: root::_APTTYPEQUALIFIER = 2;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_NA_ON_STA: root::_APTTYPEQUALIFIER = 3;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA: root::_APTTYPEQUALIFIER = 4;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_NA_ON_MAINSTA: root::_APTTYPEQUALIFIER = 5;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_APPLICATION_STA: root::_APTTYPEQUALIFIER = 6;
    pub const _APTTYPEQUALIFIER_APTTYPEQUALIFIER_RESERVED_1: root::_APTTYPEQUALIFIER = 7;
    pub type _APTTYPEQUALIFIER = i32;
    pub use self::super::root::_APTTYPEQUALIFIER as APTTYPEQUALIFIER;
    pub const _APTTYPE_APTTYPE_CURRENT: root::_APTTYPE = -1;
    pub const _APTTYPE_APTTYPE_STA: root::_APTTYPE = 0;
    pub const _APTTYPE_APTTYPE_MTA: root::_APTTYPE = 1;
    pub const _APTTYPE_APTTYPE_NA: root::_APTTYPE = 2;
    pub const _APTTYPE_APTTYPE_MAINSTA: root::_APTTYPE = 3;
    pub type _APTTYPE = i32;
    pub use self::super::root::_APTTYPE as APTTYPE;
    pub const _THDTYPE_THDTYPE_BLOCKMESSAGES: root::_THDTYPE = 0;
    pub const _THDTYPE_THDTYPE_PROCESSMESSAGES: root::_THDTYPE = 1;
    pub type _THDTYPE = i32;
    pub use self::super::root::_THDTYPE as THDTYPE;
    pub type APARTMENTID = u32;
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IComThreadingInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IComThreadingInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IProcessInitControl: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IProcessInitControl {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IFastRundown: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IFastRundown {
        pub _base: root::IUnknown,
    }
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_SOURCE_IS_APP_CONTAINER:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = 0;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483648;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483647;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483646;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483645;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483644;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483643;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483642;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483641;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483640;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483639;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483638;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483637;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483636;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483635;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483634;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483633;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483632;
    pub const CO_MARSHALING_CONTEXT_ATTRIBUTES_CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18:
        root::CO_MARSHALING_CONTEXT_ATTRIBUTES = -2147483631;
    pub type CO_MARSHALING_CONTEXT_ATTRIBUTES = i32;
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IMarshalingStream: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMarshalingStream {
        pub _base: root::IStream,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IAgileReference: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAgileReference {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ICallbackWithNoReentrancyToApplicationSTA: root::GUID;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn IEnumUnknown_Next_Proxy(
            This: *mut root::IEnumUnknown,
            celt: root::ULONG,
            rgelt: *mut *mut root::IUnknown,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumUnknown_Next_Stub(
            This: *mut root::IEnumUnknown,
            celt: root::ULONG,
            rgelt: *mut *mut root::IUnknown,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumString_Next_Proxy(
            This: *mut root::IEnumString,
            celt: root::ULONG,
            rgelt: *mut root::LPOLESTR,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumString_Next_Stub(
            This: *mut root::IEnumString,
            celt: root::ULONG,
            rgelt: *mut root::LPOLESTR,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ISequentialStream_Read_Proxy(
            This: *mut root::ISequentialStream,
            pv: *mut ::std::os::raw::c_void,
            cb: root::ULONG,
            pcbRead: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ISequentialStream_Read_Stub(
            This: *mut root::ISequentialStream,
            pv: *mut root::byte,
            cb: root::ULONG,
            pcbRead: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ISequentialStream_Write_Proxy(
            This: *mut root::ISequentialStream,
            pv: *const ::std::os::raw::c_void,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ISequentialStream_Write_Stub(
            This: *mut root::ISequentialStream,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Seek_Proxy(
            This: *mut root::IStream,
            dlibMove: root::LARGE_INTEGER,
            dwOrigin: u32,
            plibNewPosition: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Seek_Stub(
            This: *mut root::IStream,
            dlibMove: root::LARGE_INTEGER,
            dwOrigin: u32,
            plibNewPosition: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_CopyTo_Proxy(
            This: *mut root::IStream,
            pstm: *mut root::IStream,
            cb: root::ULARGE_INTEGER,
            pcbRead: *mut root::ULARGE_INTEGER,
            pcbWritten: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_CopyTo_Stub(
            This: *mut root::IStream,
            pstm: *mut root::IStream,
            cb: root::ULARGE_INTEGER,
            pcbRead: *mut root::ULARGE_INTEGER,
            pcbWritten: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static GUID_NULL: root::IID;
    }
    extern "C" {
        pub static CATID_MARSHALER: root::IID;
    }
    extern "C" {
        pub static IID_IRpcChannel: root::IID;
    }
    extern "C" {
        pub static IID_IRpcStub: root::IID;
    }
    extern "C" {
        pub static IID_IStubManager: root::IID;
    }
    extern "C" {
        pub static IID_IRpcProxy: root::IID;
    }
    extern "C" {
        pub static IID_IProxyManager: root::IID;
    }
    extern "C" {
        pub static IID_IPSFactory: root::IID;
    }
    extern "C" {
        pub static IID_IInternalMoniker: root::IID;
    }
    extern "C" {
        pub static IID_IDfReserved1: root::IID;
    }
    extern "C" {
        pub static IID_IDfReserved2: root::IID;
    }
    extern "C" {
        pub static IID_IDfReserved3: root::IID;
    }
    extern "C" {
        pub static CLSID_StdMarshal: root::CLSID;
    }
    extern "C" {
        pub static CLSID_AggStdMarshal: root::CLSID;
    }
    extern "C" {
        pub static CLSID_StdAsyncActManager: root::CLSID;
    }
    extern "C" {
        pub static IID_IStub: root::IID;
    }
    extern "C" {
        pub static IID_IProxy: root::IID;
    }
    extern "C" {
        pub static IID_IEnumGeneric: root::IID;
    }
    extern "C" {
        pub static IID_IEnumHolder: root::IID;
    }
    extern "C" {
        pub static IID_IEnumCallback: root::IID;
    }
    extern "C" {
        pub static IID_IOleManager: root::IID;
    }
    extern "C" {
        pub static IID_IOlePresObj: root::IID;
    }
    extern "C" {
        pub static IID_IDebug: root::IID;
    }
    extern "C" {
        pub static IID_IDebugStream: root::IID;
    }
    extern "C" {
        pub static CLSID_PSGenObject: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSClientSite: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSClassObject: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSInPlaceActive: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSInPlaceFrame: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSDragDrop: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSBindCtx: root::CLSID;
    }
    extern "C" {
        pub static CLSID_PSEnumerators: root::CLSID;
    }
    extern "C" {
        pub static CLSID_StaticMetafile: root::CLSID;
    }
    extern "C" {
        pub static CLSID_StaticDib: root::CLSID;
    }
    extern "C" {
        pub static CID_CDfsVolume: root::CLSID;
    }
    extern "C" {
        pub static CLSID_DCOMAccessControl: root::CLSID;
    }
    extern "C" {
        pub static CLSID_GlobalOptions: root::CLSID;
    }
    extern "C" {
        pub static CLSID_StdGlobalInterfaceTable: root::CLSID;
    }
    extern "C" {
        pub static CLSID_ComBinding: root::CLSID;
    }
    extern "C" {
        pub static CLSID_StdEvent: root::CLSID;
    }
    extern "C" {
        pub static CLSID_ManualResetEvent: root::CLSID;
    }
    extern "C" {
        pub static CLSID_SynchronizeContainer: root::CLSID;
    }
    extern "C" {
        pub static CLSID_AddrControl: root::CLSID;
    }
    extern "C" {
        pub static CLSID_ContextSwitcher: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDFormKrnl: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDFormDialog: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDCommandButton: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDComboBox: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDTextBox: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDCheckBox: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDLabel: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDOptionButton: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDListBox: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDScrollBar: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDGroupBox: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDGeneralPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDGenericPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDFontPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDColorPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDLabelPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDCheckBoxPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDTextBoxPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDOptionButtonPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDListBoxPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDCommandButtonPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDComboBoxPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDScrollBarPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDGroupBoxPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CCDXObjectPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CStdPropertyFrame: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CFormPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CGridPropertyPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CWSJArticlePage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_CSystemPage: root::CLSID;
    }
    extern "C" {
        pub static CLSID_IdentityUnmarshal: root::CLSID;
    }
    extern "C" {
        pub static CLSID_InProcFreeMarshaler: root::CLSID;
    }
    extern "C" {
        pub static CLSID_Picture_Metafile: root::CLSID;
    }
    extern "C" {
        pub static CLSID_Picture_EnhMetafile: root::CLSID;
    }
    extern "C" {
        pub static CLSID_Picture_Dib: root::CLSID;
    }
    extern "C" {
        pub static GUID_TRISTATE: root::GUID;
    }
    extern "C" {
        pub fn CoGetMalloc(
            dwMemContext: u32,
            ppMalloc: *mut root::LPMALLOC,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateStreamOnHGlobal(
            hGlobal: root::HGLOBAL,
            fDeleteOnRelease: root::BOOL,
            ppstm: *mut root::LPSTREAM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetHGlobalFromStream(
            pstm: root::LPSTREAM,
            phglobal: *mut root::HGLOBAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoUninitialize();
    }
    extern "C" {
        pub fn CoGetCurrentProcess() -> u32;
    }
    extern "C" {
        pub fn CoInitializeEx(pvReserved: root::LPVOID, dwCoInit: u32) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetCallerTID(lpdwTID: root::LPDWORD) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetCurrentLogicalThreadId(pguid: *mut root::GUID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetContextToken(pToken: *mut u64) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetDefaultContext(
            aptType: root::APTTYPE,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetApartmentType(
            pAptType: *mut root::APTTYPE,
            pAptQualifier: *mut root::APTTYPEQUALIFIER,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagServerInformation {
        pub dwServerPid: u32,
        pub dwServerTid: u32,
        pub ui64ServerAddress: root::UINT64,
    }
    pub type ServerInformation = root::tagServerInformation;
    pub type PServerInformation = *mut root::tagServerInformation;
    extern "C" {
        pub fn CoDecodeProxy(
            dwClientPid: u32,
            ui64ProxyAddress: root::UINT64,
            pServerInformation: root::PServerInformation,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CO_MTA_USAGE_COOKIE__ {
        pub unused: i32,
    }
    pub type CO_MTA_USAGE_COOKIE = *mut root::CO_MTA_USAGE_COOKIE__;
    extern "C" {
        pub fn CoIncrementMTAUsage(pCookie: *mut root::CO_MTA_USAGE_COOKIE) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoDecrementMTAUsage(Cookie: root::CO_MTA_USAGE_COOKIE) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoAllowUnmarshalerCLSID(clsid: *const root::IID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetObjectContext(riid: *const root::IID, ppv: *mut root::LPVOID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetClassObject(
            rclsid: *const root::IID,
            dwClsContext: u32,
            pvReserved: root::LPVOID,
            riid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterClassObject(
            rclsid: *const root::IID,
            pUnk: root::LPUNKNOWN,
            dwClsContext: u32,
            flags: u32,
            lpdwRegister: root::LPDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRevokeClassObject(dwRegister: u32) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoResumeClassObjects() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoSuspendClassObjects() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoAddRefServerProcess() -> root::ULONG;
    }
    extern "C" {
        pub fn CoReleaseServerProcess() -> root::ULONG;
    }
    extern "C" {
        pub fn CoGetPSClsid(riid: *const root::IID, pClsid: *mut root::CLSID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterPSClsid(riid: *const root::IID, rclsid: *const root::IID)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterSurrogate(pSurrogate: root::LPSURROGATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetMarshalSizeMax(
            pulSize: *mut root::ULONG,
            riid: *const root::IID,
            pUnk: root::LPUNKNOWN,
            dwDestContext: u32,
            pvDestContext: root::LPVOID,
            mshlflags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoMarshalInterface(
            pStm: root::LPSTREAM,
            riid: *const root::IID,
            pUnk: root::LPUNKNOWN,
            dwDestContext: u32,
            pvDestContext: root::LPVOID,
            mshlflags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoUnmarshalInterface(
            pStm: root::LPSTREAM,
            riid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoMarshalHresult(pstm: root::LPSTREAM, hresult: root::HRESULT) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoUnmarshalHresult(
            pstm: root::LPSTREAM,
            phresult: *mut root::HRESULT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoReleaseMarshalData(pStm: root::LPSTREAM) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoDisconnectObject(pUnk: root::LPUNKNOWN, dwReserved: u32) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoLockObjectExternal(
            pUnk: root::LPUNKNOWN,
            fLock: root::BOOL,
            fLastUnlockReleases: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetStandardMarshal(
            riid: *const root::IID,
            pUnk: root::LPUNKNOWN,
            dwDestContext: u32,
            pvDestContext: root::LPVOID,
            mshlflags: u32,
            ppMarshal: *mut root::LPMARSHAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetStdMarshalEx(
            pUnkOuter: root::LPUNKNOWN,
            smexflags: u32,
            ppUnkInner: *mut root::LPUNKNOWN,
        ) -> root::HRESULT;
    }
    pub const tagSTDMSHLFLAGS_SMEXF_SERVER: root::tagSTDMSHLFLAGS = 1;
    pub const tagSTDMSHLFLAGS_SMEXF_HANDLER: root::tagSTDMSHLFLAGS = 2;
    pub type tagSTDMSHLFLAGS = i32;
    pub use self::super::root::tagSTDMSHLFLAGS as STDMSHLFLAGS;
    extern "C" {
        pub fn CoIsHandlerConnected(pUnk: root::LPUNKNOWN) -> root::BOOL;
    }
    extern "C" {
        pub fn CoMarshalInterThreadInterfaceInStream(
            riid: *const root::IID,
            pUnk: root::LPUNKNOWN,
            ppStm: *mut root::LPSTREAM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetInterfaceAndReleaseStream(
            pStm: root::LPSTREAM,
            iid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCreateFreeThreadedMarshaler(
            punkOuter: root::LPUNKNOWN,
            ppunkMarshal: *mut root::LPUNKNOWN,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoFreeUnusedLibraries();
    }
    extern "C" {
        pub fn CoFreeUnusedLibrariesEx(dwUnloadDelay: u32, dwReserved: u32);
    }
    extern "C" {
        pub fn CoDisconnectContext(dwTimeout: u32) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInitializeSecurity(
            pSecDesc: root::PSECURITY_DESCRIPTOR,
            cAuthSvc: i32,
            asAuthSvc: *mut root::SOLE_AUTHENTICATION_SERVICE,
            pReserved1: *mut ::std::os::raw::c_void,
            dwAuthnLevel: u32,
            dwImpLevel: u32,
            pAuthList: *mut ::std::os::raw::c_void,
            dwCapabilities: u32,
            pReserved3: *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetCallContext(
            riid: *const root::IID,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoQueryProxyBlanket(
            pProxy: *mut root::IUnknown,
            pwAuthnSvc: *mut u32,
            pAuthzSvc: *mut u32,
            pServerPrincName: *mut root::LPOLESTR,
            pAuthnLevel: *mut u32,
            pImpLevel: *mut u32,
            pAuthInfo: *mut root::RPC_AUTH_IDENTITY_HANDLE,
            pCapabilites: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoSetProxyBlanket(
            pProxy: *mut root::IUnknown,
            dwAuthnSvc: u32,
            dwAuthzSvc: u32,
            pServerPrincName: *mut root::OLECHAR,
            dwAuthnLevel: u32,
            dwImpLevel: u32,
            pAuthInfo: root::RPC_AUTH_IDENTITY_HANDLE,
            dwCapabilities: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCopyProxy(
            pProxy: *mut root::IUnknown,
            ppCopy: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoQueryClientBlanket(
            pAuthnSvc: *mut u32,
            pAuthzSvc: *mut u32,
            pServerPrincName: *mut root::LPOLESTR,
            pAuthnLevel: *mut u32,
            pImpLevel: *mut u32,
            pPrivs: *mut root::RPC_AUTHZ_HANDLE,
            pCapabilities: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoImpersonateClient() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRevertToSelf() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoQueryAuthenticationServices(
            pcAuthSvc: *mut u32,
            asAuthSvc: *mut *mut root::SOLE_AUTHENTICATION_SERVICE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoSwitchCallContext(
            pNewObject: *mut root::IUnknown,
            ppOldObject: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCreateInstance(
            rclsid: *const root::IID,
            pUnkOuter: root::LPUNKNOWN,
            dwClsContext: u32,
            riid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCreateInstanceEx(
            Clsid: *const root::IID,
            punkOuter: *mut root::IUnknown,
            dwClsCtx: u32,
            pServerInfo: *mut root::COSERVERINFO,
            dwCount: u32,
            pResults: *mut root::MULTI_QI,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCreateInstanceFromApp(
            Clsid: *const root::IID,
            punkOuter: *mut root::IUnknown,
            dwClsCtx: u32,
            reserved: root::PVOID,
            dwCount: u32,
            pResults: *mut root::MULTI_QI,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterActivationFilter(
            pActivationFilter: *mut root::IActivationFilter,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetCancelObject(
            dwThreadId: u32,
            iid: *const root::IID,
            ppUnk: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoSetCancelObject(pUnk: *mut root::IUnknown) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCancelCall(dwThreadId: u32, ulTimeout: root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoTestCancel() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoEnableCallCancellation(pReserved: root::LPVOID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoDisableCallCancellation(pReserved: root::LPVOID) -> root::HRESULT;
    }
    extern "C" {
        pub fn StringFromCLSID(
            rclsid: *const root::IID,
            lplpsz: *mut root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CLSIDFromString(lpsz: root::LPCOLESTR, pclsid: root::LPCLSID) -> root::HRESULT;
    }
    extern "C" {
        pub fn StringFromIID(
            rclsid: *const root::IID,
            lplpsz: *mut root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IIDFromString(lpsz: root::LPCOLESTR, lpiid: root::LPIID) -> root::HRESULT;
    }
    extern "C" {
        pub fn ProgIDFromCLSID(
            clsid: *const root::IID,
            lplpszProgID: *mut root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CLSIDFromProgID(
            lpszProgID: root::LPCOLESTR,
            lpclsid: root::LPCLSID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StringFromGUID2(
            rguid: *const root::GUID,
            lpsz: root::LPOLESTR,
            cchMax: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn CoCreateGuid(pguid: *mut root::GUID) -> root::HRESULT;
    }
    pub type PROPVARIANT = root::tagPROPVARIANT;
    extern "C" {
        pub fn PropVariantCopy(
            pvarDest: *mut root::PROPVARIANT,
            pvarSrc: *const root::PROPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PropVariantClear(pvar: *mut root::PROPVARIANT) -> root::HRESULT;
    }
    extern "C" {
        pub fn FreePropVariantArray(
            cVariants: root::ULONG,
            rgvars: *mut root::PROPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoWaitForMultipleHandles(
            dwFlags: u32,
            dwTimeout: u32,
            cHandles: root::ULONG,
            pHandles: root::LPHANDLE,
            lpdwindex: root::LPDWORD,
        ) -> root::HRESULT;
    }
    pub const tagCOWAIT_FLAGS_COWAIT_DEFAULT: root::tagCOWAIT_FLAGS = 0;
    pub const tagCOWAIT_FLAGS_COWAIT_WAITALL: root::tagCOWAIT_FLAGS = 1;
    pub const tagCOWAIT_FLAGS_COWAIT_ALERTABLE: root::tagCOWAIT_FLAGS = 2;
    pub const tagCOWAIT_FLAGS_COWAIT_INPUTAVAILABLE: root::tagCOWAIT_FLAGS = 4;
    pub const tagCOWAIT_FLAGS_COWAIT_DISPATCH_CALLS: root::tagCOWAIT_FLAGS = 8;
    pub const tagCOWAIT_FLAGS_COWAIT_DISPATCH_WINDOW_MESSAGES: root::tagCOWAIT_FLAGS = 16;
    pub type tagCOWAIT_FLAGS = i32;
    pub use self::super::root::tagCOWAIT_FLAGS as COWAIT_FLAGS;
    pub const CWMO_FLAGS_CWMO_DEFAULT: root::CWMO_FLAGS = 0;
    pub const CWMO_FLAGS_CWMO_DISPATCH_CALLS: root::CWMO_FLAGS = 1;
    pub const CWMO_FLAGS_CWMO_DISPATCH_WINDOW_MESSAGES: root::CWMO_FLAGS = 2;
    pub type CWMO_FLAGS = i32;
    extern "C" {
        pub fn CoWaitForMultipleObjects(
            dwFlags: u32,
            dwTimeout: u32,
            cHandles: root::ULONG,
            pHandles: *const root::HANDLE,
            lpdwindex: root::LPDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetTreatAsClass(
            clsidOld: *const root::IID,
            pClsidNew: root::LPCLSID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInvalidateRemoteMachineBindings(pszMachineName: root::LPOLESTR) -> root::HRESULT;
    }
    pub const AgileReferenceOptions_AGILEREFERENCE_DEFAULT: root::AgileReferenceOptions = 0;
    pub const AgileReferenceOptions_AGILEREFERENCE_DELAYEDMARSHAL: root::AgileReferenceOptions = 1;
    pub type AgileReferenceOptions = i32;
    extern "C" {
        pub fn RoGetAgileReference(
            options: root::AgileReferenceOptions,
            riid: *const root::IID,
            pUnk: *mut root::IUnknown,
            ppAgileReference: *mut *mut root::IAgileReference,
        ) -> root::HRESULT;
    }
    pub type LPFNGETCLASSOBJECT = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const root::IID,
            arg2: *const root::IID,
            arg3: *mut root::LPVOID,
        ) -> root::HRESULT,
    >;
    pub type LPFNCANUNLOADNOW = ::std::option::Option<unsafe extern "C" fn() -> root::HRESULT>;
    extern "C" {
        pub fn DllGetClassObject(
            rclsid: *const root::IID,
            riid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DllCanUnloadNow() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoTaskMemAlloc(cb: root::SIZE_T) -> root::LPVOID;
    }
    extern "C" {
        pub fn CoTaskMemRealloc(pv: root::LPVOID, cb: root::SIZE_T) -> root::LPVOID;
    }
    extern "C" {
        pub fn CoTaskMemFree(pv: root::LPVOID);
    }
    extern "C" {
        pub fn CoFileTimeNow(lpFileTime: *mut root::FILETIME) -> root::HRESULT;
    }
    extern "C" {
        pub fn CLSIDFromProgIDEx(
            lpszProgID: root::LPCOLESTR,
            lpclsid: root::LPCLSID,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CO_DEVICE_CATALOG_COOKIE__ {
        pub unused: i32,
    }
    pub type CO_DEVICE_CATALOG_COOKIE = *mut root::CO_DEVICE_CATALOG_COOKIE__;
    extern "C" {
        pub fn CoRegisterDeviceCatalog(
            deviceInstanceId: *const u16,
            cookie: *mut root::CO_DEVICE_CATALOG_COOKIE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRevokeDeviceCatalog(cookie: root::CO_DEVICE_CATALOG_COOKIE) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPMALLOCSPY = *mut root::IMallocSpy;
    extern "C" {
        pub static IID_IMallocSpy: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMallocSpy {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBC = *mut root::IBindCtx;
    pub type LPBINDCTX = *mut root::IBindCtx;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBIND_OPTS {
        pub cbStruct: u32,
        pub grfFlags: u32,
        pub grfMode: u32,
        pub dwTickCountDeadline: u32,
    }
    pub type BIND_OPTS = root::tagBIND_OPTS;
    pub type LPBIND_OPTS = *mut root::tagBIND_OPTS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBIND_OPTS2 {
        pub _base: root::tagBIND_OPTS,
        pub dwTrackFlags: u32,
        pub dwClassContext: u32,
        pub locale: root::LCID,
        pub pServerInfo: *mut root::COSERVERINFO,
    }
    pub type BIND_OPTS2 = root::tagBIND_OPTS2;
    pub type LPBIND_OPTS2 = *mut root::tagBIND_OPTS2;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBIND_OPTS3 {
        pub _base: root::tagBIND_OPTS2,
        pub hwnd: root::HWND,
    }
    pub type BIND_OPTS3 = root::tagBIND_OPTS3;
    pub type LPBIND_OPTS3 = *mut root::tagBIND_OPTS3;
    pub const tagBIND_FLAGS_BIND_MAYBOTHERUSER: root::tagBIND_FLAGS = 1;
    pub const tagBIND_FLAGS_BIND_JUSTTESTEXISTENCE: root::tagBIND_FLAGS = 2;
    pub type tagBIND_FLAGS = i32;
    pub use self::super::root::tagBIND_FLAGS as BIND_FLAGS;
    extern "C" {
        pub static IID_IBindCtx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindCtx {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IBindCtx_RemoteSetBindOptions_Proxy(
            This: *mut root::IBindCtx,
            pbindopts: *mut root::BIND_OPTS2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindCtx_RemoteSetBindOptions_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IBindCtx_RemoteGetBindOptions_Proxy(
            This: *mut root::IBindCtx,
            pbindopts: *mut root::BIND_OPTS2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindCtx_RemoteGetBindOptions_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPENUMMONIKER = *mut root::IEnumMoniker;
    extern "C" {
        pub static IID_IEnumMoniker: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumMoniker {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumMoniker_RemoteNext_Proxy(
            This: *mut root::IEnumMoniker,
            celt: root::ULONG,
            rgelt: *mut *mut root::IMoniker,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumMoniker_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPRUNNABLEOBJECT = *mut root::IRunnableObject;
    extern "C" {
        pub static IID_IRunnableObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRunnableObject {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IRunnableObject_RemoteIsRunning_Proxy(
            This: *mut root::IRunnableObject,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IRunnableObject_RemoteIsRunning_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPRUNNINGOBJECTTABLE = *mut root::IRunningObjectTable;
    extern "C" {
        pub static IID_IRunningObjectTable: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRunningObjectTable {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPPERSIST = *mut root::IPersist;
    extern "C" {
        pub static IID_IPersist: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPersist {
        pub _base: root::IUnknown,
    }
    pub type LPPERSISTSTREAM = *mut root::IPersistStream;
    extern "C" {
        pub static IID_IPersistStream: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPersistStream {
        pub _base: root::IPersist,
    }
    pub type LPMONIKER = *mut root::IMoniker;
    pub const tagMKSYS_MKSYS_NONE: root::tagMKSYS = 0;
    pub const tagMKSYS_MKSYS_GENERICCOMPOSITE: root::tagMKSYS = 1;
    pub const tagMKSYS_MKSYS_FILEMONIKER: root::tagMKSYS = 2;
    pub const tagMKSYS_MKSYS_ANTIMONIKER: root::tagMKSYS = 3;
    pub const tagMKSYS_MKSYS_ITEMMONIKER: root::tagMKSYS = 4;
    pub const tagMKSYS_MKSYS_POINTERMONIKER: root::tagMKSYS = 5;
    pub const tagMKSYS_MKSYS_CLASSMONIKER: root::tagMKSYS = 7;
    pub const tagMKSYS_MKSYS_OBJREFMONIKER: root::tagMKSYS = 8;
    pub const tagMKSYS_MKSYS_SESSIONMONIKER: root::tagMKSYS = 9;
    pub const tagMKSYS_MKSYS_LUAMONIKER: root::tagMKSYS = 10;
    pub type tagMKSYS = i32;
    pub use self::super::root::tagMKSYS as MKSYS;
    pub const tagMKREDUCE_MKRREDUCE_ONE: root::tagMKREDUCE = 196608;
    pub const tagMKREDUCE_MKRREDUCE_TOUSER: root::tagMKREDUCE = 131072;
    pub const tagMKREDUCE_MKRREDUCE_THROUGHUSER: root::tagMKREDUCE = 65536;
    pub const tagMKREDUCE_MKRREDUCE_ALL: root::tagMKREDUCE = 0;
    pub type tagMKREDUCE = i32;
    pub use self::super::root::tagMKREDUCE as MKRREDUCE;
    extern "C" {
        pub static IID_IMoniker: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMoniker {
        pub _base: root::IPersistStream,
    }
    extern "C" {
        pub fn IMoniker_RemoteBindToObject_Proxy(
            This: *mut root::IMoniker,
            pbc: *mut root::IBindCtx,
            pmkToLeft: *mut root::IMoniker,
            riidResult: *const root::IID,
            ppvResult: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IMoniker_RemoteBindToObject_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IMoniker_RemoteBindToStorage_Proxy(
            This: *mut root::IMoniker,
            pbc: *mut root::IBindCtx,
            pmkToLeft: *mut root::IMoniker,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IMoniker_RemoteBindToStorage_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IROTData: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IROTData {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPENUMSTATSTG = *mut root::IEnumSTATSTG;
    extern "C" {
        pub static IID_IEnumSTATSTG: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumSTATSTG {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumSTATSTG_RemoteNext_Proxy(
            This: *mut root::IEnumSTATSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATSTG_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPSTORAGE = *mut root::IStorage;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemSNB {
        pub ulCntStr: root::ULONG,
        pub ulCntChar: root::ULONG,
        pub rgString: [root::OLECHAR; 1usize],
    }
    pub type RemSNB = root::tagRemSNB;
    pub type wireSNB = *mut root::RemSNB;
    pub type SNB = *mut root::LPOLESTR;
    extern "C" {
        pub static IID_IStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IStorage {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IStorage_RemoteOpenStream_Proxy(
            This: *mut root::IStorage,
            pwcsName: *const root::OLECHAR,
            cbReserved1: root::ULONG,
            reserved1: *mut root::byte,
            grfMode: u32,
            reserved2: u32,
            ppstm: *mut *mut root::IStream,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_RemoteOpenStream_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IStorage_RemoteCopyTo_Proxy(
            This: *mut root::IStorage,
            ciidExclude: u32,
            rgiidExclude: *const root::IID,
            snbExclude: root::SNB,
            pstgDest: *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_RemoteCopyTo_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IStorage_RemoteEnumElements_Proxy(
            This: *mut root::IStorage,
            reserved1: u32,
            cbReserved2: root::ULONG,
            reserved2: *mut root::byte,
            reserved3: u32,
            ppenum: *mut *mut root::IEnumSTATSTG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_RemoteEnumElements_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPPERSISTFILE = *mut root::IPersistFile;
    extern "C" {
        pub static IID_IPersistFile: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPersistFile {
        pub _base: root::IPersist,
    }
    pub type LPPERSISTSTORAGE = *mut root::IPersistStorage;
    extern "C" {
        pub static IID_IPersistStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPersistStorage {
        pub _base: root::IPersist,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPLOCKBYTES = *mut root::ILockBytes;
    extern "C" {
        pub static IID_ILockBytes: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ILockBytes {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn ILockBytes_RemoteReadAt_Proxy(
            This: *mut root::ILockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *mut root::byte,
            cb: root::ULONG,
            pcbRead: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ILockBytes_RemoteReadAt_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ILockBytes_RemoteWriteAt_Proxy(
            This: *mut root::ILockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ILockBytes_RemoteWriteAt_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPENUMFORMATETC = *mut root::IEnumFORMATETC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDVTARGETDEVICE {
        pub tdSize: u32,
        pub tdDriverNameOffset: u16,
        pub tdDeviceNameOffset: u16,
        pub tdPortNameOffset: u16,
        pub tdExtDevmodeOffset: u16,
        pub tdData: [u8; 1usize],
    }
    pub type DVTARGETDEVICE = root::tagDVTARGETDEVICE;
    pub type LPCLIPFORMAT = *mut root::CLIPFORMAT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagFORMATETC {
        pub cfFormat: root::CLIPFORMAT,
        pub ptd: *mut root::DVTARGETDEVICE,
        pub dwAspect: u32,
        pub lindex: i32,
        pub tymed: u32,
    }
    pub type FORMATETC = root::tagFORMATETC;
    pub type LPFORMATETC = *mut root::tagFORMATETC;
    extern "C" {
        pub static IID_IEnumFORMATETC: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumFORMATETC {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumFORMATETC_RemoteNext_Proxy(
            This: *mut root::IEnumFORMATETC,
            celt: root::ULONG,
            rgelt: *mut root::FORMATETC,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumFORMATETC_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPENUMSTATDATA = *mut root::IEnumSTATDATA;
    pub const tagADVF_ADVF_NODATA: root::tagADVF = 1;
    pub const tagADVF_ADVF_PRIMEFIRST: root::tagADVF = 2;
    pub const tagADVF_ADVF_ONLYONCE: root::tagADVF = 4;
    pub const tagADVF_ADVF_DATAONSTOP: root::tagADVF = 64;
    pub const tagADVF_ADVFCACHE_NOHANDLER: root::tagADVF = 8;
    pub const tagADVF_ADVFCACHE_FORCEBUILTIN: root::tagADVF = 16;
    pub const tagADVF_ADVFCACHE_ONSAVE: root::tagADVF = 32;
    pub type tagADVF = i32;
    pub use self::super::root::tagADVF as ADVF;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTATDATA {
        pub formatetc: root::FORMATETC,
        pub advf: u32,
        pub pAdvSink: *mut root::IAdviseSink,
        pub dwConnection: u32,
    }
    pub type STATDATA = root::tagSTATDATA;
    pub type LPSTATDATA = *mut root::STATDATA;
    extern "C" {
        pub static IID_IEnumSTATDATA: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumSTATDATA {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumSTATDATA_RemoteNext_Proxy(
            This: *mut root::IEnumSTATDATA,
            celt: root::ULONG,
            rgelt: *mut root::STATDATA,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATDATA_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPROOTSTORAGE = *mut root::IRootStorage;
    extern "C" {
        pub static IID_IRootStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRootStorage {
        pub _base: root::IUnknown,
    }
    pub type LPADVISESINK = *mut root::IAdviseSink;
    pub const tagTYMED_TYMED_HGLOBAL: root::tagTYMED = 1;
    pub const tagTYMED_TYMED_FILE: root::tagTYMED = 2;
    pub const tagTYMED_TYMED_ISTREAM: root::tagTYMED = 4;
    pub const tagTYMED_TYMED_ISTORAGE: root::tagTYMED = 8;
    pub const tagTYMED_TYMED_GDI: root::tagTYMED = 16;
    pub const tagTYMED_TYMED_MFPICT: root::tagTYMED = 32;
    pub const tagTYMED_TYMED_ENHMF: root::tagTYMED = 64;
    pub const tagTYMED_TYMED_NULL: root::tagTYMED = 0;
    pub type tagTYMED = i32;
    pub use self::super::root::tagTYMED as TYMED;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemSTGMEDIUM {
        pub tymed: u32,
        pub dwHandleType: u32,
        pub pData: root::ULONG,
        pub pUnkForRelease: root::ULONG,
        pub cbData: root::ULONG,
        pub data: [root::byte; 1usize],
    }
    pub type RemSTGMEDIUM = root::tagRemSTGMEDIUM;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagSTGMEDIUM {
        pub tymed: u32,
        pub __bindgen_anon_1: root::tagSTGMEDIUM__bindgen_ty_1,
        pub pUnkForRelease: *mut root::IUnknown,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagSTGMEDIUM__bindgen_ty_1 {
        pub hBitmap: root::HBITMAP,
        pub hMetaFilePict: root::HMETAFILEPICT,
        pub hEnhMetaFile: root::HENHMETAFILE,
        pub hGlobal: root::HGLOBAL,
        pub lpszFileName: root::LPOLESTR,
        pub pstm: *mut root::IStream,
        pub pstg: *mut root::IStorage,
    }
    pub type uSTGMEDIUM = root::tagSTGMEDIUM;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _GDI_OBJECT {
        pub ObjectType: u32,
        pub u: root::_GDI_OBJECT___MIDL_IAdviseSink_0002,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _GDI_OBJECT___MIDL_IAdviseSink_0002 {
        pub hBitmap: root::wireHBITMAP,
        pub hPalette: root::wireHPALETTE,
        pub hGeneric: root::wireHGLOBAL,
    }
    pub type GDI_OBJECT = root::_GDI_OBJECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _userSTGMEDIUM {
        pub pUnkForRelease: *mut root::IUnknown,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _userSTGMEDIUM__STGMEDIUM_UNION {
        pub tymed: u32,
        pub u: root::_userSTGMEDIUM__STGMEDIUM_UNION___MIDL_IAdviseSink_0003,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _userSTGMEDIUM__STGMEDIUM_UNION___MIDL_IAdviseSink_0003 {
        pub hMetaFilePict: root::wireHMETAFILEPICT,
        pub hHEnhMetaFile: root::wireHENHMETAFILE,
        pub hGdiHandle: *mut root::GDI_OBJECT,
        pub hGlobal: root::wireHGLOBAL,
        pub lpszFileName: root::LPOLESTR,
        pub pstm: *mut root::BYTE_BLOB,
        pub pstg: *mut root::BYTE_BLOB,
    }
    pub type userSTGMEDIUM = root::_userSTGMEDIUM;
    pub type wireSTGMEDIUM = *mut root::userSTGMEDIUM;
    pub type STGMEDIUM = root::uSTGMEDIUM;
    pub type wireASYNC_STGMEDIUM = *mut root::userSTGMEDIUM;
    pub type ASYNC_STGMEDIUM = root::STGMEDIUM;
    pub type LPSTGMEDIUM = *mut root::STGMEDIUM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _userFLAG_STGMEDIUM {
        pub ContextFlags: i32,
        pub fPassOwnership: i32,
        pub Stgmed: root::userSTGMEDIUM,
    }
    pub type userFLAG_STGMEDIUM = root::_userFLAG_STGMEDIUM;
    pub type wireFLAG_STGMEDIUM = *mut root::userFLAG_STGMEDIUM;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _FLAG_STGMEDIUM {
        pub ContextFlags: i32,
        pub fPassOwnership: i32,
        pub Stgmed: root::STGMEDIUM,
    }
    pub type FLAG_STGMEDIUM = root::_FLAG_STGMEDIUM;
    extern "C" {
        pub static IID_IAdviseSink: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAdviseSink {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnDataChange_Proxy(
            This: *mut root::IAdviseSink,
            pFormatetc: *mut root::FORMATETC,
            pStgmed: *mut root::ASYNC_STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnDataChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnViewChange_Proxy(
            This: *mut root::IAdviseSink,
            dwAspect: u32,
            lindex: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnViewChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnRename_Proxy(
            This: *mut root::IAdviseSink,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnRename_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnSave_Proxy(This: *mut root::IAdviseSink) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnSave_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnClose_Proxy(This: *mut root::IAdviseSink) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_RemoteOnClose_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static IID_AsyncIAdviseSink: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIAdviseSink {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
            This: *mut root::AsyncIAdviseSink,
            pFormatetc: *mut root::FORMATETC,
            pStgmed: *mut root::ASYNC_STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
            This: *mut root::AsyncIAdviseSink,
            dwAspect: u32,
            lindex: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
            This: *mut root::AsyncIAdviseSink,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPADVISESINK2 = *mut root::IAdviseSink2;
    extern "C" {
        pub static IID_IAdviseSink2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAdviseSink2 {
        pub _base: root::IAdviseSink,
    }
    extern "C" {
        pub fn IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
            This: *mut root::IAdviseSink2,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink2_RemoteOnLinkSrcChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static IID_AsyncIAdviseSink2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AsyncIAdviseSink2 {
        pub _base: root::AsyncIAdviseSink,
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
            This: *mut root::AsyncIAdviseSink2,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
            This: *mut root::AsyncIAdviseSink2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPDATAOBJECT = *mut root::IDataObject;
    pub const tagDATADIR_DATADIR_GET: root::tagDATADIR = 1;
    pub const tagDATADIR_DATADIR_SET: root::tagDATADIR = 2;
    pub type tagDATADIR = i32;
    pub use self::super::root::tagDATADIR as DATADIR;
    extern "C" {
        pub static IID_IDataObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDataObject {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IDataObject_RemoteGetData_Proxy(
            This: *mut root::IDataObject,
            pformatetcIn: *mut root::FORMATETC,
            pRemoteMedium: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_RemoteGetData_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IDataObject_RemoteGetDataHere_Proxy(
            This: *mut root::IDataObject,
            pformatetc: *mut root::FORMATETC,
            pRemoteMedium: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_RemoteGetDataHere_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IDataObject_RemoteSetData_Proxy(
            This: *mut root::IDataObject,
            pformatetc: *mut root::FORMATETC,
            pmedium: *mut root::FLAG_STGMEDIUM,
            fRelease: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_RemoteSetData_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPDATAADVISEHOLDER = *mut root::IDataAdviseHolder;
    extern "C" {
        pub static IID_IDataAdviseHolder: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDataAdviseHolder {
        pub _base: root::IUnknown,
    }
    pub type LPMESSAGEFILTER = *mut root::IMessageFilter;
    pub const tagCALLTYPE_CALLTYPE_TOPLEVEL: root::tagCALLTYPE = 1;
    pub const tagCALLTYPE_CALLTYPE_NESTED: root::tagCALLTYPE = 2;
    pub const tagCALLTYPE_CALLTYPE_ASYNC: root::tagCALLTYPE = 3;
    pub const tagCALLTYPE_CALLTYPE_TOPLEVEL_CALLPENDING: root::tagCALLTYPE = 4;
    pub const tagCALLTYPE_CALLTYPE_ASYNC_CALLPENDING: root::tagCALLTYPE = 5;
    pub type tagCALLTYPE = i32;
    pub use self::super::root::tagCALLTYPE as CALLTYPE;
    pub const tagSERVERCALL_SERVERCALL_ISHANDLED: root::tagSERVERCALL = 0;
    pub const tagSERVERCALL_SERVERCALL_REJECTED: root::tagSERVERCALL = 1;
    pub const tagSERVERCALL_SERVERCALL_RETRYLATER: root::tagSERVERCALL = 2;
    pub type tagSERVERCALL = i32;
    pub use self::super::root::tagSERVERCALL as SERVERCALL;
    pub const tagPENDINGTYPE_PENDINGTYPE_TOPLEVEL: root::tagPENDINGTYPE = 1;
    pub const tagPENDINGTYPE_PENDINGTYPE_NESTED: root::tagPENDINGTYPE = 2;
    pub type tagPENDINGTYPE = i32;
    pub use self::super::root::tagPENDINGTYPE as PENDINGTYPE;
    pub const tagPENDINGMSG_PENDINGMSG_CANCELCALL: root::tagPENDINGMSG = 0;
    pub const tagPENDINGMSG_PENDINGMSG_WAITNOPROCESS: root::tagPENDINGMSG = 1;
    pub const tagPENDINGMSG_PENDINGMSG_WAITDEFPROCESS: root::tagPENDINGMSG = 2;
    pub type tagPENDINGMSG = i32;
    pub use self::super::root::tagPENDINGMSG as PENDINGMSG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagINTERFACEINFO {
        pub pUnk: *mut root::IUnknown,
        pub iid: root::IID,
        pub wMethod: u16,
    }
    pub type INTERFACEINFO = root::tagINTERFACEINFO;
    pub type LPINTERFACEINFO = *mut root::tagINTERFACEINFO;
    extern "C" {
        pub static IID_IMessageFilter: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMessageFilter {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static FMTID_SummaryInformation: root::FMTID;
    }
    extern "C" {
        pub static FMTID_DocSummaryInformation: root::FMTID;
    }
    extern "C" {
        pub static FMTID_UserDefinedProperties: root::FMTID;
    }
    extern "C" {
        pub static FMTID_DiscardableInformation: root::FMTID;
    }
    extern "C" {
        pub static FMTID_ImageSummaryInformation: root::FMTID;
    }
    extern "C" {
        pub static FMTID_AudioSummaryInformation: root::FMTID;
    }
    extern "C" {
        pub static FMTID_VideoSummaryInformation: root::FMTID;
    }
    extern "C" {
        pub static FMTID_MediaFileSummaryInformation: root::FMTID;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IClassActivator: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IClassActivator {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IFillLockBytes: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IFillLockBytes {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IFillLockBytes_RemoteFillAppend_Proxy(
            This: *mut root::IFillLockBytes,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IFillLockBytes_RemoteFillAppend_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IFillLockBytes_RemoteFillAt_Proxy(
            This: *mut root::IFillLockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IFillLockBytes_RemoteFillAt_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IProgressNotify: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IProgressNotify {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagStorageLayout {
        pub LayoutType: u32,
        pub pwcsElementName: *mut root::OLECHAR,
        pub cOffset: root::LARGE_INTEGER,
        pub cBytes: root::LARGE_INTEGER,
    }
    pub type StorageLayout = root::tagStorageLayout;
    extern "C" {
        pub static IID_ILayoutStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ILayoutStorage {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IBlockingLock: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBlockingLock {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ITimeAndNoticeControl: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITimeAndNoticeControl {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IOplockStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOplockStorage {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IDirectWriterLock: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDirectWriterLock {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IUrlMon: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IUrlMon {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IForegroundTransfer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IForegroundTransfer {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IThumbnailExtractor: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IThumbnailExtractor {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IDummyHICONIncluder: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDummyHICONIncluder {
        pub _base: root::IUnknown,
    }
    pub const tagApplicationType_ServerApplication: root::tagApplicationType = 0;
    pub const tagApplicationType_LibraryApplication: root::tagApplicationType = 1;
    pub type tagApplicationType = i32;
    pub use self::super::root::tagApplicationType as ApplicationType;
    pub const tagShutdownType_IdleShutdown: root::tagShutdownType = 0;
    pub const tagShutdownType_ForcedShutdown: root::tagShutdownType = 1;
    pub type tagShutdownType = i32;
    pub use self::super::root::tagShutdownType as ShutdownType;
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IProcessLock: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IProcessLock {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ISurrogateService: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISurrogateService {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPINITIALIZESPY = *mut root::IInitializeSpy;
    extern "C" {
        pub static IID_IInitializeSpy: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInitializeSpy {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IApartmentShutdown: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IApartmentShutdown {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::ASYNC_STGMEDIUM,
        ) -> u32;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::ASYNC_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::ASYNC_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserFree(
            arg1: *mut u32,
            arg2: *mut root::ASYNC_STGMEDIUM,
        );
    }
    extern "C" {
        pub fn CLIPFORMAT_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::CLIPFORMAT,
        ) -> u32;
    }
    extern "C" {
        pub fn CLIPFORMAT_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLIPFORMAT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLIPFORMAT_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLIPFORMAT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLIPFORMAT_UserFree(arg1: *mut u32, arg2: *mut root::CLIPFORMAT);
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::FLAG_STGMEDIUM,
        ) -> u32;
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::FLAG_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::FLAG_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserFree(
            arg1: *mut u32,
            arg2: *mut root::FLAG_STGMEDIUM,
        );
    }
    extern "C" {
        pub fn HBITMAP_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HBITMAP,
        ) -> u32;
    }
    extern "C" {
        pub fn HBITMAP_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HBITMAP,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HBITMAP_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HBITMAP,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HBITMAP_UserFree(arg1: *mut u32, arg2: *mut root::HBITMAP);
    }
    extern "C" {
        pub fn HDC_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HDC,
        ) -> u32;
    }
    extern "C" {
        pub fn HDC_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HDC,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HDC_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HDC,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HDC_UserFree(arg1: *mut u32, arg2: *mut root::HDC);
    }
    extern "C" {
        pub fn HICON_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HICON,
        ) -> u32;
    }
    extern "C" {
        pub fn HICON_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HICON,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HICON_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HICON,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HICON_UserFree(arg1: *mut u32, arg2: *mut root::HICON);
    }
    extern "C" {
        pub fn SNB_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::SNB,
        ) -> u32;
    }
    extern "C" {
        pub fn SNB_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::SNB,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn SNB_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::SNB,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn SNB_UserFree(arg1: *mut u32, arg2: *mut root::SNB);
    }
    extern "C" {
        pub fn STGMEDIUM_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::STGMEDIUM,
        ) -> u32;
    }
    extern "C" {
        pub fn STGMEDIUM_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn STGMEDIUM_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn STGMEDIUM_UserFree(arg1: *mut u32, arg2: *mut root::STGMEDIUM);
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::ASYNC_STGMEDIUM,
        ) -> u32;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::ASYNC_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::ASYNC_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn ASYNC_STGMEDIUM_UserFree64(
            arg1: *mut u32,
            arg2: *mut root::ASYNC_STGMEDIUM,
        );
    }
    extern "C" {
        pub fn CLIPFORMAT_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::CLIPFORMAT,
        ) -> u32;
    }
    extern "C" {
        pub fn CLIPFORMAT_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLIPFORMAT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLIPFORMAT_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLIPFORMAT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLIPFORMAT_UserFree64(
            arg1: *mut u32,
            arg2: *mut root::CLIPFORMAT,
        );
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::FLAG_STGMEDIUM,
        ) -> u32;
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::FLAG_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::FLAG_STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn FLAG_STGMEDIUM_UserFree64(
            arg1: *mut u32,
            arg2: *mut root::FLAG_STGMEDIUM,
        );
    }
    extern "C" {
        pub fn HBITMAP_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HBITMAP,
        ) -> u32;
    }
    extern "C" {
        pub fn HBITMAP_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HBITMAP,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HBITMAP_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HBITMAP,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HBITMAP_UserFree64(arg1: *mut u32, arg2: *mut root::HBITMAP);
    }
    extern "C" {
        pub fn HDC_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HDC,
        ) -> u32;
    }
    extern "C" {
        pub fn HDC_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HDC,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HDC_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HDC,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HDC_UserFree64(arg1: *mut u32, arg2: *mut root::HDC);
    }
    extern "C" {
        pub fn HICON_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HICON,
        ) -> u32;
    }
    extern "C" {
        pub fn HICON_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HICON,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HICON_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HICON,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HICON_UserFree64(arg1: *mut u32, arg2: *mut root::HICON);
    }
    extern "C" {
        pub fn SNB_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::SNB,
        ) -> u32;
    }
    extern "C" {
        pub fn SNB_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::SNB,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn SNB_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::SNB,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn SNB_UserFree64(arg1: *mut u32, arg2: *mut root::SNB);
    }
    extern "C" {
        pub fn STGMEDIUM_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::STGMEDIUM,
        ) -> u32;
    }
    extern "C" {
        pub fn STGMEDIUM_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn STGMEDIUM_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::STGMEDIUM,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn STGMEDIUM_UserFree64(arg1: *mut u32, arg2: *mut root::STGMEDIUM);
    }
    extern "C" {
        pub fn IBindCtx_SetBindOptions_Proxy(
            This: *mut root::IBindCtx,
            pbindopts: *mut root::BIND_OPTS,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindCtx_SetBindOptions_Stub(
            This: *mut root::IBindCtx,
            pbindopts: *mut root::BIND_OPTS2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindCtx_GetBindOptions_Proxy(
            This: *mut root::IBindCtx,
            pbindopts: *mut root::BIND_OPTS,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindCtx_GetBindOptions_Stub(
            This: *mut root::IBindCtx,
            pbindopts: *mut root::BIND_OPTS2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumMoniker_Next_Proxy(
            This: *mut root::IEnumMoniker,
            celt: root::ULONG,
            rgelt: *mut *mut root::IMoniker,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumMoniker_Next_Stub(
            This: *mut root::IEnumMoniker,
            celt: root::ULONG,
            rgelt: *mut *mut root::IMoniker,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IRunnableObject_IsRunning_Proxy(This: *mut root::IRunnableObject) -> root::BOOL;
    }
    extern "C" {
        pub fn IRunnableObject_IsRunning_Stub(This: *mut root::IRunnableObject) -> root::HRESULT;
    }
    extern "C" {
        pub fn IMoniker_BindToObject_Proxy(
            This: *mut root::IMoniker,
            pbc: *mut root::IBindCtx,
            pmkToLeft: *mut root::IMoniker,
            riidResult: *const root::IID,
            ppvResult: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IMoniker_BindToObject_Stub(
            This: *mut root::IMoniker,
            pbc: *mut root::IBindCtx,
            pmkToLeft: *mut root::IMoniker,
            riidResult: *const root::IID,
            ppvResult: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IMoniker_BindToStorage_Proxy(
            This: *mut root::IMoniker,
            pbc: *mut root::IBindCtx,
            pmkToLeft: *mut root::IMoniker,
            riid: *const root::IID,
            ppvObj: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IMoniker_BindToStorage_Stub(
            This: *mut root::IMoniker,
            pbc: *mut root::IBindCtx,
            pmkToLeft: *mut root::IMoniker,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATSTG_Next_Proxy(
            This: *mut root::IEnumSTATSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATSTG_Next_Stub(
            This: *mut root::IEnumSTATSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_OpenStream_Proxy(
            This: *mut root::IStorage,
            pwcsName: *const root::OLECHAR,
            reserved1: *mut ::std::os::raw::c_void,
            grfMode: u32,
            reserved2: u32,
            ppstm: *mut *mut root::IStream,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_OpenStream_Stub(
            This: *mut root::IStorage,
            pwcsName: *const root::OLECHAR,
            cbReserved1: root::ULONG,
            reserved1: *mut root::byte,
            grfMode: u32,
            reserved2: u32,
            ppstm: *mut *mut root::IStream,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_CopyTo_Proxy(
            This: *mut root::IStorage,
            ciidExclude: u32,
            rgiidExclude: *const root::IID,
            snbExclude: root::SNB,
            pstgDest: *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_CopyTo_Stub(
            This: *mut root::IStorage,
            ciidExclude: u32,
            rgiidExclude: *const root::IID,
            snbExclude: root::SNB,
            pstgDest: *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_EnumElements_Proxy(
            This: *mut root::IStorage,
            reserved1: u32,
            reserved2: *mut ::std::os::raw::c_void,
            reserved3: u32,
            ppenum: *mut *mut root::IEnumSTATSTG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStorage_EnumElements_Stub(
            This: *mut root::IStorage,
            reserved1: u32,
            cbReserved2: root::ULONG,
            reserved2: *mut root::byte,
            reserved3: u32,
            ppenum: *mut *mut root::IEnumSTATSTG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ILockBytes_ReadAt_Proxy(
            This: *mut root::ILockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *mut ::std::os::raw::c_void,
            cb: root::ULONG,
            pcbRead: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ILockBytes_ReadAt_Stub(
            This: *mut root::ILockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *mut root::byte,
            cb: root::ULONG,
            pcbRead: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ILockBytes_WriteAt_Proxy(
            This: *mut root::ILockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *const ::std::os::raw::c_void,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ILockBytes_WriteAt_Stub(
            This: *mut root::ILockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumFORMATETC_Next_Proxy(
            This: *mut root::IEnumFORMATETC,
            celt: root::ULONG,
            rgelt: *mut root::FORMATETC,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumFORMATETC_Next_Stub(
            This: *mut root::IEnumFORMATETC,
            celt: root::ULONG,
            rgelt: *mut root::FORMATETC,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATDATA_Next_Proxy(
            This: *mut root::IEnumSTATDATA,
            celt: root::ULONG,
            rgelt: *mut root::STATDATA,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATDATA_Next_Stub(
            This: *mut root::IEnumSTATDATA,
            celt: root::ULONG,
            rgelt: *mut root::STATDATA,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_OnDataChange_Proxy(
            This: *mut root::IAdviseSink,
            pFormatetc: *mut root::FORMATETC,
            pStgmed: *mut root::STGMEDIUM,
        );
    }
    extern "C" {
        pub fn IAdviseSink_OnDataChange_Stub(
            This: *mut root::IAdviseSink,
            pFormatetc: *mut root::FORMATETC,
            pStgmed: *mut root::ASYNC_STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_OnViewChange_Proxy(
            This: *mut root::IAdviseSink,
            dwAspect: u32,
            lindex: i32,
        );
    }
    extern "C" {
        pub fn IAdviseSink_OnViewChange_Stub(
            This: *mut root::IAdviseSink,
            dwAspect: u32,
            lindex: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_OnRename_Proxy(This: *mut root::IAdviseSink, pmk: *mut root::IMoniker);
    }
    extern "C" {
        pub fn IAdviseSink_OnRename_Stub(
            This: *mut root::IAdviseSink,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_OnSave_Proxy(This: *mut root::IAdviseSink);
    }
    extern "C" {
        pub fn IAdviseSink_OnSave_Stub(This: *mut root::IAdviseSink) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink_OnClose_Proxy(This: *mut root::IAdviseSink);
    }
    extern "C" {
        pub fn IAdviseSink_OnClose_Stub(This: *mut root::IAdviseSink) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnDataChange_Proxy(
            This: *mut root::AsyncIAdviseSink,
            pFormatetc: *mut root::FORMATETC,
            pStgmed: *mut root::STGMEDIUM,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnDataChange_Stub(
            This: *mut root::AsyncIAdviseSink,
            pFormatetc: *mut root::FORMATETC,
            pStgmed: *mut root::ASYNC_STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnDataChange_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnDataChange_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnViewChange_Proxy(
            This: *mut root::AsyncIAdviseSink,
            dwAspect: u32,
            lindex: i32,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnViewChange_Stub(
            This: *mut root::AsyncIAdviseSink,
            dwAspect: u32,
            lindex: i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnViewChange_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnViewChange_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnRename_Proxy(
            This: *mut root::AsyncIAdviseSink,
            pmk: *mut root::IMoniker,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnRename_Stub(
            This: *mut root::AsyncIAdviseSink,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnRename_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnRename_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnSave_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnSave_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnSave_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnSave_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnClose_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Begin_OnClose_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnClose_Proxy(This: *mut root::AsyncIAdviseSink);
    }
    extern "C" {
        pub fn AsyncIAdviseSink_Finish_OnClose_Stub(
            This: *mut root::AsyncIAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IAdviseSink2_OnLinkSrcChange_Proxy(
            This: *mut root::IAdviseSink2,
            pmk: *mut root::IMoniker,
        );
    }
    extern "C" {
        pub fn IAdviseSink2_OnLinkSrcChange_Stub(
            This: *mut root::IAdviseSink2,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
            This: *mut root::AsyncIAdviseSink2,
            pmk: *mut root::IMoniker,
        );
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
            This: *mut root::AsyncIAdviseSink2,
            pmk: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(This: *mut root::AsyncIAdviseSink2);
    }
    extern "C" {
        pub fn AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
            This: *mut root::AsyncIAdviseSink2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_GetData_Proxy(
            This: *mut root::IDataObject,
            pformatetcIn: *mut root::FORMATETC,
            pmedium: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_GetData_Stub(
            This: *mut root::IDataObject,
            pformatetcIn: *mut root::FORMATETC,
            pRemoteMedium: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_GetDataHere_Proxy(
            This: *mut root::IDataObject,
            pformatetc: *mut root::FORMATETC,
            pmedium: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_GetDataHere_Stub(
            This: *mut root::IDataObject,
            pformatetc: *mut root::FORMATETC,
            pRemoteMedium: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_SetData_Proxy(
            This: *mut root::IDataObject,
            pformatetc: *mut root::FORMATETC,
            pmedium: *mut root::STGMEDIUM,
            fRelease: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDataObject_SetData_Stub(
            This: *mut root::IDataObject,
            pformatetc: *mut root::FORMATETC,
            pmedium: *mut root::FLAG_STGMEDIUM,
            fRelease: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IFillLockBytes_FillAppend_Proxy(
            This: *mut root::IFillLockBytes,
            pv: *const ::std::os::raw::c_void,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IFillLockBytes_FillAppend_Stub(
            This: *mut root::IFillLockBytes,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IFillLockBytes_FillAt_Proxy(
            This: *mut root::IFillLockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *const ::std::os::raw::c_void,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IFillLockBytes_FillAt_Stub(
            This: *mut root::IFillLockBytes,
            ulOffset: root::ULARGE_INTEGER,
            pv: *const root::byte,
            cb: root::ULONG,
            pcbWritten: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type CURRENCY = root::CY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSAFEARRAYBOUND {
        pub cElements: root::ULONG,
        pub lLbound: i32,
    }
    pub type SAFEARRAYBOUND = root::tagSAFEARRAYBOUND;
    pub type LPSAFEARRAYBOUND = *mut root::tagSAFEARRAYBOUND;
    pub type wireVARIANT = *mut root::_wireVARIANT;
    pub type wireBRECORD = *mut root::_wireBRECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireSAFEARR_BSTR {
        pub Size: root::ULONG,
        pub aBstr: *mut root::wireBSTR,
    }
    pub type SAFEARR_BSTR = root::_wireSAFEARR_BSTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireSAFEARR_UNKNOWN {
        pub Size: root::ULONG,
        pub apUnknown: *mut *mut root::IUnknown,
    }
    pub type SAFEARR_UNKNOWN = root::_wireSAFEARR_UNKNOWN;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireSAFEARR_DISPATCH {
        pub Size: root::ULONG,
        pub apDispatch: *mut *mut root::IDispatch,
    }
    pub type SAFEARR_DISPATCH = root::_wireSAFEARR_DISPATCH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireSAFEARR_VARIANT {
        pub Size: root::ULONG,
        pub aVariant: *mut root::wireVARIANT,
    }
    pub type SAFEARR_VARIANT = root::_wireSAFEARR_VARIANT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireSAFEARR_BRECORD {
        pub Size: root::ULONG,
        pub aRecord: *mut root::wireBRECORD,
    }
    pub type SAFEARR_BRECORD = root::_wireSAFEARR_BRECORD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireSAFEARR_HAVEIID {
        pub Size: root::ULONG,
        pub apUnknown: *mut *mut root::IUnknown,
        pub iid: root::IID,
    }
    pub type SAFEARR_HAVEIID = root::_wireSAFEARR_HAVEIID;
    pub const tagSF_TYPE_SF_ERROR: root::tagSF_TYPE = 10;
    pub const tagSF_TYPE_SF_I1: root::tagSF_TYPE = 16;
    pub const tagSF_TYPE_SF_I2: root::tagSF_TYPE = 2;
    pub const tagSF_TYPE_SF_I4: root::tagSF_TYPE = 3;
    pub const tagSF_TYPE_SF_I8: root::tagSF_TYPE = 20;
    pub const tagSF_TYPE_SF_BSTR: root::tagSF_TYPE = 8;
    pub const tagSF_TYPE_SF_UNKNOWN: root::tagSF_TYPE = 13;
    pub const tagSF_TYPE_SF_DISPATCH: root::tagSF_TYPE = 9;
    pub const tagSF_TYPE_SF_VARIANT: root::tagSF_TYPE = 12;
    pub const tagSF_TYPE_SF_RECORD: root::tagSF_TYPE = 36;
    pub const tagSF_TYPE_SF_HAVEIID: root::tagSF_TYPE = 32781;
    pub type tagSF_TYPE = i32;
    pub use self::super::root::tagSF_TYPE as SF_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _wireSAFEARRAY_UNION {
        pub sfType: root::ULONG,
        pub u: root::_wireSAFEARRAY_UNION___MIDL_IOleAutomationTypes_0001,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _wireSAFEARRAY_UNION___MIDL_IOleAutomationTypes_0001 {
        pub BstrStr: root::SAFEARR_BSTR,
        pub UnknownStr: root::SAFEARR_UNKNOWN,
        pub DispatchStr: root::SAFEARR_DISPATCH,
        pub VariantStr: root::SAFEARR_VARIANT,
        pub RecordStr: root::SAFEARR_BRECORD,
        pub HaveIidStr: root::SAFEARR_HAVEIID,
        pub ByteStr: root::BYTE_SIZEDARR,
        pub WordStr: root::WORD_SIZEDARR,
        pub LongStr: root::DWORD_SIZEDARR,
        pub HyperStr: root::HYPER_SIZEDARR,
    }
    pub type SAFEARRAYUNION = root::_wireSAFEARRAY_UNION;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _wireSAFEARRAY {
        pub cDims: root::USHORT,
        pub fFeatures: root::USHORT,
        pub cbElements: root::ULONG,
        pub cLocks: root::ULONG,
        pub uArrayStructs: root::SAFEARRAYUNION,
        pub rgsabound: [root::SAFEARRAYBOUND; 1usize],
    }
    pub type wireSAFEARRAY = *mut root::_wireSAFEARRAY;
    pub type wirePSAFEARRAY = *mut root::wireSAFEARRAY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSAFEARRAY {
        pub cDims: root::USHORT,
        pub fFeatures: root::USHORT,
        pub cbElements: root::ULONG,
        pub cLocks: root::ULONG,
        pub pvData: root::PVOID,
        pub rgsabound: [root::SAFEARRAYBOUND; 1usize],
    }
    pub type SAFEARRAY = root::tagSAFEARRAY;
    pub type LPSAFEARRAY = *mut root::SAFEARRAY;
    pub type VARIANT = root::tagVARIANT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagVARIANT {
        pub __bindgen_anon_1: root::tagVARIANT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagVARIANT__bindgen_ty_1 {
        pub __bindgen_anon_1: root::tagVARIANT__bindgen_ty_1__bindgen_ty_1,
        pub decVal: root::DECIMAL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagVARIANT__bindgen_ty_1__bindgen_ty_1 {
        pub vt: root::VARTYPE,
        pub wReserved1: u16,
        pub wReserved2: u16,
        pub wReserved3: u16,
        pub __bindgen_anon_1: root::tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub llVal: root::LONGLONG,
        pub lVal: i32,
        pub bVal: u8,
        pub iVal: i16,
        pub fltVal: root::FLOAT,
        pub dblVal: root::DOUBLE,
        pub boolVal: root::VARIANT_BOOL,
        pub __OBSOLETE__VARIANT_BOOL: root::VARIANT_BOOL,
        pub scode: root::SCODE,
        pub cyVal: root::CY,
        pub date: root::DATE,
        pub bstrVal: root::BSTR,
        pub punkVal: *mut root::IUnknown,
        pub pdispVal: *mut root::IDispatch,
        pub parray: *mut root::SAFEARRAY,
        pub pbVal: *mut u8,
        pub piVal: *mut i16,
        pub plVal: *mut i32,
        pub pllVal: *mut root::LONGLONG,
        pub pfltVal: *mut root::FLOAT,
        pub pdblVal: *mut root::DOUBLE,
        pub pboolVal: *mut root::VARIANT_BOOL,
        pub __OBSOLETE__VARIANT_PBOOL: *mut root::VARIANT_BOOL,
        pub pscode: *mut root::SCODE,
        pub pcyVal: *mut root::CY,
        pub pdate: *mut root::DATE,
        pub pbstrVal: *mut root::BSTR,
        pub ppunkVal: *mut *mut root::IUnknown,
        pub ppdispVal: *mut *mut root::IDispatch,
        pub pparray: *mut *mut root::SAFEARRAY,
        pub pvarVal: *mut root::VARIANT,
        pub byref: root::PVOID,
        pub cVal: i8,
        pub uiVal: root::USHORT,
        pub ulVal: root::ULONG,
        pub ullVal: root::ULONGLONG,
        pub intVal: root::INT,
        pub uintVal: root::UINT,
        pub pdecVal: *mut root::DECIMAL,
        pub pcVal: *mut i8,
        pub puiVal: *mut root::USHORT,
        pub pulVal: *mut root::ULONG,
        pub pullVal: *mut root::ULONGLONG,
        pub pintVal: *mut root::INT,
        pub puintVal: *mut root::UINT,
        pub __bindgen_anon_1:
            root::tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub pvRecord: root::PVOID,
        pub pRecInfo: *mut root::IRecordInfo,
    }
    pub type LPVARIANT = *mut root::VARIANT;
    pub type VARIANTARG = root::VARIANT;
    pub type LPVARIANTARG = *mut root::VARIANT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _wireBRECORD {
        pub fFlags: root::ULONG,
        pub clSize: root::ULONG,
        pub pRecInfo: *mut root::IRecordInfo,
        pub pRecord: *mut root::byte,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _wireVARIANT {
        pub clSize: u32,
        pub rpcReserved: u32,
        pub vt: root::USHORT,
        pub wReserved1: root::USHORT,
        pub wReserved2: root::USHORT,
        pub wReserved3: root::USHORT,
        pub __bindgen_anon_1: root::_wireVARIANT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _wireVARIANT__bindgen_ty_1 {
        pub llVal: root::LONGLONG,
        pub lVal: i32,
        pub bVal: u8,
        pub iVal: i16,
        pub fltVal: root::FLOAT,
        pub dblVal: root::DOUBLE,
        pub boolVal: root::VARIANT_BOOL,
        pub scode: root::SCODE,
        pub cyVal: root::CY,
        pub date: root::DATE,
        pub bstrVal: root::wireBSTR,
        pub punkVal: *mut root::IUnknown,
        pub pdispVal: *mut root::IDispatch,
        pub parray: root::wirePSAFEARRAY,
        pub brecVal: root::wireBRECORD,
        pub pbVal: *mut u8,
        pub piVal: *mut i16,
        pub plVal: *mut i32,
        pub pllVal: *mut root::LONGLONG,
        pub pfltVal: *mut root::FLOAT,
        pub pdblVal: *mut root::DOUBLE,
        pub pboolVal: *mut root::VARIANT_BOOL,
        pub pscode: *mut root::SCODE,
        pub pcyVal: *mut root::CY,
        pub pdate: *mut root::DATE,
        pub pbstrVal: *mut root::wireBSTR,
        pub ppunkVal: *mut *mut root::IUnknown,
        pub ppdispVal: *mut *mut root::IDispatch,
        pub pparray: *mut root::wirePSAFEARRAY,
        pub pvarVal: *mut root::wireVARIANT,
        pub cVal: i8,
        pub uiVal: root::USHORT,
        pub ulVal: root::ULONG,
        pub ullVal: root::ULONGLONG,
        pub intVal: root::INT,
        pub uintVal: root::UINT,
        pub decVal: root::DECIMAL,
        pub pdecVal: *mut root::DECIMAL,
        pub pcVal: *mut i8,
        pub puiVal: *mut root::USHORT,
        pub pulVal: *mut root::ULONG,
        pub pullVal: *mut root::ULONGLONG,
        pub pintVal: *mut root::INT,
        pub puintVal: *mut root::UINT,
    }
    pub type DISPID = i32;
    pub type MEMBERID = root::DISPID;
    pub type HREFTYPE = u32;
    pub const tagTYPEKIND_TKIND_ENUM: root::tagTYPEKIND = 0;
    pub const tagTYPEKIND_TKIND_RECORD: root::tagTYPEKIND = 1;
    pub const tagTYPEKIND_TKIND_MODULE: root::tagTYPEKIND = 2;
    pub const tagTYPEKIND_TKIND_INTERFACE: root::tagTYPEKIND = 3;
    pub const tagTYPEKIND_TKIND_DISPATCH: root::tagTYPEKIND = 4;
    pub const tagTYPEKIND_TKIND_COCLASS: root::tagTYPEKIND = 5;
    pub const tagTYPEKIND_TKIND_ALIAS: root::tagTYPEKIND = 6;
    pub const tagTYPEKIND_TKIND_UNION: root::tagTYPEKIND = 7;
    pub const tagTYPEKIND_TKIND_MAX: root::tagTYPEKIND = 8;
    pub type tagTYPEKIND = i32;
    pub use self::super::root::tagTYPEKIND as TYPEKIND;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagTYPEDESC {
        pub __bindgen_anon_1: root::tagTYPEDESC__bindgen_ty_1,
        pub vt: root::VARTYPE,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagTYPEDESC__bindgen_ty_1 {
        pub lptdesc: *mut root::tagTYPEDESC,
        pub lpadesc: *mut root::tagARRAYDESC,
        pub hreftype: root::HREFTYPE,
    }
    pub type TYPEDESC = root::tagTYPEDESC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagARRAYDESC {
        pub tdescElem: root::TYPEDESC,
        pub cDims: root::USHORT,
        pub rgbounds: [root::SAFEARRAYBOUND; 1usize],
    }
    pub type ARRAYDESC = root::tagARRAYDESC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagPARAMDESCEX {
        pub cBytes: root::ULONG,
        pub varDefaultValue: root::VARIANTARG,
    }
    pub type PARAMDESCEX = root::tagPARAMDESCEX;
    pub type LPPARAMDESCEX = *mut root::tagPARAMDESCEX;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPARAMDESC {
        pub pparamdescex: root::LPPARAMDESCEX,
        pub wParamFlags: root::USHORT,
    }
    pub type PARAMDESC = root::tagPARAMDESC;
    pub type LPPARAMDESC = *mut root::tagPARAMDESC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagIDLDESC {
        pub dwReserved: u64,
        pub wIDLFlags: root::USHORT,
    }
    pub type IDLDESC = root::tagIDLDESC;
    pub type LPIDLDESC = *mut root::tagIDLDESC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagELEMDESC {
        pub tdesc: root::TYPEDESC,
        pub __bindgen_anon_1: root::tagELEMDESC__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagELEMDESC__bindgen_ty_1 {
        pub idldesc: root::IDLDESC,
        pub paramdesc: root::PARAMDESC,
    }
    pub type ELEMDESC = root::tagELEMDESC;
    pub type LPELEMDESC = *mut root::tagELEMDESC;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagTYPEATTR {
        pub guid: root::GUID,
        pub lcid: root::LCID,
        pub dwReserved: u32,
        pub memidConstructor: root::MEMBERID,
        pub memidDestructor: root::MEMBERID,
        pub lpstrSchema: root::LPOLESTR,
        pub cbSizeInstance: root::ULONG,
        pub typekind: root::TYPEKIND,
        pub cFuncs: u16,
        pub cVars: u16,
        pub cImplTypes: u16,
        pub cbSizeVft: u16,
        pub cbAlignment: u16,
        pub wTypeFlags: u16,
        pub wMajorVerNum: u16,
        pub wMinorVerNum: u16,
        pub tdescAlias: root::TYPEDESC,
        pub idldescType: root::IDLDESC,
    }
    pub type TYPEATTR = root::tagTYPEATTR;
    pub type LPTYPEATTR = *mut root::tagTYPEATTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDISPPARAMS {
        pub rgvarg: *mut root::VARIANTARG,
        pub rgdispidNamedArgs: *mut root::DISPID,
        pub cArgs: root::UINT,
        pub cNamedArgs: root::UINT,
    }
    pub type DISPPARAMS = root::tagDISPPARAMS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagEXCEPINFO {
        pub wCode: u16,
        pub wReserved: u16,
        pub bstrSource: root::BSTR,
        pub bstrDescription: root::BSTR,
        pub bstrHelpFile: root::BSTR,
        pub dwHelpContext: u32,
        pub pvReserved: root::PVOID,
        pub pfnDeferredFillIn: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut root::tagEXCEPINFO) -> root::HRESULT,
        >,
        pub scode: root::SCODE,
    }
    pub type EXCEPINFO = root::tagEXCEPINFO;
    pub type LPEXCEPINFO = *mut root::tagEXCEPINFO;
    pub const tagCALLCONV_CC_FASTCALL: root::tagCALLCONV = 0;
    pub const tagCALLCONV_CC_CDECL: root::tagCALLCONV = 1;
    pub const tagCALLCONV_CC_MSCPASCAL: root::tagCALLCONV = 2;
    pub const tagCALLCONV_CC_PASCAL: root::tagCALLCONV = 2;
    pub const tagCALLCONV_CC_MACPASCAL: root::tagCALLCONV = 3;
    pub const tagCALLCONV_CC_STDCALL: root::tagCALLCONV = 4;
    pub const tagCALLCONV_CC_FPFASTCALL: root::tagCALLCONV = 5;
    pub const tagCALLCONV_CC_SYSCALL: root::tagCALLCONV = 6;
    pub const tagCALLCONV_CC_MPWCDECL: root::tagCALLCONV = 7;
    pub const tagCALLCONV_CC_MPWPASCAL: root::tagCALLCONV = 8;
    pub const tagCALLCONV_CC_MAX: root::tagCALLCONV = 9;
    pub type tagCALLCONV = i32;
    pub use self::super::root::tagCALLCONV as CALLCONV;
    pub const tagFUNCKIND_FUNC_VIRTUAL: root::tagFUNCKIND = 0;
    pub const tagFUNCKIND_FUNC_PUREVIRTUAL: root::tagFUNCKIND = 1;
    pub const tagFUNCKIND_FUNC_NONVIRTUAL: root::tagFUNCKIND = 2;
    pub const tagFUNCKIND_FUNC_STATIC: root::tagFUNCKIND = 3;
    pub const tagFUNCKIND_FUNC_DISPATCH: root::tagFUNCKIND = 4;
    pub type tagFUNCKIND = i32;
    pub use self::super::root::tagFUNCKIND as FUNCKIND;
    pub const tagINVOKEKIND_INVOKE_FUNC: root::tagINVOKEKIND = 1;
    pub const tagINVOKEKIND_INVOKE_PROPERTYGET: root::tagINVOKEKIND = 2;
    pub const tagINVOKEKIND_INVOKE_PROPERTYPUT: root::tagINVOKEKIND = 4;
    pub const tagINVOKEKIND_INVOKE_PROPERTYPUTREF: root::tagINVOKEKIND = 8;
    pub type tagINVOKEKIND = i32;
    pub use self::super::root::tagINVOKEKIND as INVOKEKIND;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagFUNCDESC {
        pub memid: root::MEMBERID,
        pub lprgscode: *mut root::SCODE,
        pub lprgelemdescParam: *mut root::ELEMDESC,
        pub funckind: root::FUNCKIND,
        pub invkind: root::INVOKEKIND,
        pub callconv: root::CALLCONV,
        pub cParams: i16,
        pub cParamsOpt: i16,
        pub oVft: i16,
        pub cScodes: i16,
        pub elemdescFunc: root::ELEMDESC,
        pub wFuncFlags: u16,
    }
    pub type FUNCDESC = root::tagFUNCDESC;
    pub type LPFUNCDESC = *mut root::tagFUNCDESC;
    pub const tagVARKIND_VAR_PERINSTANCE: root::tagVARKIND = 0;
    pub const tagVARKIND_VAR_STATIC: root::tagVARKIND = 1;
    pub const tagVARKIND_VAR_CONST: root::tagVARKIND = 2;
    pub const tagVARKIND_VAR_DISPATCH: root::tagVARKIND = 3;
    pub type tagVARKIND = i32;
    pub use self::super::root::tagVARKIND as VARKIND;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagVARDESC {
        pub memid: root::MEMBERID,
        pub lpstrSchema: root::LPOLESTR,
        pub __bindgen_anon_1: root::tagVARDESC__bindgen_ty_1,
        pub elemdescVar: root::ELEMDESC,
        pub wVarFlags: u16,
        pub varkind: root::VARKIND,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagVARDESC__bindgen_ty_1 {
        pub oInst: root::ULONG,
        pub lpvarValue: *mut root::VARIANT,
    }
    pub type VARDESC = root::tagVARDESC;
    pub type LPVARDESC = *mut root::tagVARDESC;
    pub const tagTYPEFLAGS_TYPEFLAG_FAPPOBJECT: root::tagTYPEFLAGS = 1;
    pub const tagTYPEFLAGS_TYPEFLAG_FCANCREATE: root::tagTYPEFLAGS = 2;
    pub const tagTYPEFLAGS_TYPEFLAG_FLICENSED: root::tagTYPEFLAGS = 4;
    pub const tagTYPEFLAGS_TYPEFLAG_FPREDECLID: root::tagTYPEFLAGS = 8;
    pub const tagTYPEFLAGS_TYPEFLAG_FHIDDEN: root::tagTYPEFLAGS = 16;
    pub const tagTYPEFLAGS_TYPEFLAG_FCONTROL: root::tagTYPEFLAGS = 32;
    pub const tagTYPEFLAGS_TYPEFLAG_FDUAL: root::tagTYPEFLAGS = 64;
    pub const tagTYPEFLAGS_TYPEFLAG_FNONEXTENSIBLE: root::tagTYPEFLAGS = 128;
    pub const tagTYPEFLAGS_TYPEFLAG_FOLEAUTOMATION: root::tagTYPEFLAGS = 256;
    pub const tagTYPEFLAGS_TYPEFLAG_FRESTRICTED: root::tagTYPEFLAGS = 512;
    pub const tagTYPEFLAGS_TYPEFLAG_FAGGREGATABLE: root::tagTYPEFLAGS = 1024;
    pub const tagTYPEFLAGS_TYPEFLAG_FREPLACEABLE: root::tagTYPEFLAGS = 2048;
    pub const tagTYPEFLAGS_TYPEFLAG_FDISPATCHABLE: root::tagTYPEFLAGS = 4096;
    pub const tagTYPEFLAGS_TYPEFLAG_FREVERSEBIND: root::tagTYPEFLAGS = 8192;
    pub const tagTYPEFLAGS_TYPEFLAG_FPROXY: root::tagTYPEFLAGS = 16384;
    pub type tagTYPEFLAGS = i32;
    pub use self::super::root::tagTYPEFLAGS as TYPEFLAGS;
    pub const tagFUNCFLAGS_FUNCFLAG_FRESTRICTED: root::tagFUNCFLAGS = 1;
    pub const tagFUNCFLAGS_FUNCFLAG_FSOURCE: root::tagFUNCFLAGS = 2;
    pub const tagFUNCFLAGS_FUNCFLAG_FBINDABLE: root::tagFUNCFLAGS = 4;
    pub const tagFUNCFLAGS_FUNCFLAG_FREQUESTEDIT: root::tagFUNCFLAGS = 8;
    pub const tagFUNCFLAGS_FUNCFLAG_FDISPLAYBIND: root::tagFUNCFLAGS = 16;
    pub const tagFUNCFLAGS_FUNCFLAG_FDEFAULTBIND: root::tagFUNCFLAGS = 32;
    pub const tagFUNCFLAGS_FUNCFLAG_FHIDDEN: root::tagFUNCFLAGS = 64;
    pub const tagFUNCFLAGS_FUNCFLAG_FUSESGETLASTERROR: root::tagFUNCFLAGS = 128;
    pub const tagFUNCFLAGS_FUNCFLAG_FDEFAULTCOLLELEM: root::tagFUNCFLAGS = 256;
    pub const tagFUNCFLAGS_FUNCFLAG_FUIDEFAULT: root::tagFUNCFLAGS = 512;
    pub const tagFUNCFLAGS_FUNCFLAG_FNONBROWSABLE: root::tagFUNCFLAGS = 1024;
    pub const tagFUNCFLAGS_FUNCFLAG_FREPLACEABLE: root::tagFUNCFLAGS = 2048;
    pub const tagFUNCFLAGS_FUNCFLAG_FIMMEDIATEBIND: root::tagFUNCFLAGS = 4096;
    pub type tagFUNCFLAGS = i32;
    pub use self::super::root::tagFUNCFLAGS as FUNCFLAGS;
    pub const tagVARFLAGS_VARFLAG_FREADONLY: root::tagVARFLAGS = 1;
    pub const tagVARFLAGS_VARFLAG_FSOURCE: root::tagVARFLAGS = 2;
    pub const tagVARFLAGS_VARFLAG_FBINDABLE: root::tagVARFLAGS = 4;
    pub const tagVARFLAGS_VARFLAG_FREQUESTEDIT: root::tagVARFLAGS = 8;
    pub const tagVARFLAGS_VARFLAG_FDISPLAYBIND: root::tagVARFLAGS = 16;
    pub const tagVARFLAGS_VARFLAG_FDEFAULTBIND: root::tagVARFLAGS = 32;
    pub const tagVARFLAGS_VARFLAG_FHIDDEN: root::tagVARFLAGS = 64;
    pub const tagVARFLAGS_VARFLAG_FRESTRICTED: root::tagVARFLAGS = 128;
    pub const tagVARFLAGS_VARFLAG_FDEFAULTCOLLELEM: root::tagVARFLAGS = 256;
    pub const tagVARFLAGS_VARFLAG_FUIDEFAULT: root::tagVARFLAGS = 512;
    pub const tagVARFLAGS_VARFLAG_FNONBROWSABLE: root::tagVARFLAGS = 1024;
    pub const tagVARFLAGS_VARFLAG_FREPLACEABLE: root::tagVARFLAGS = 2048;
    pub const tagVARFLAGS_VARFLAG_FIMMEDIATEBIND: root::tagVARFLAGS = 4096;
    pub type tagVARFLAGS = i32;
    pub use self::super::root::tagVARFLAGS as VARFLAGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCLEANLOCALSTORAGE {
        pub pInterface: *mut root::IUnknown,
        pub pStorage: root::PVOID,
        pub flags: u32,
    }
    pub type CLEANLOCALSTORAGE = root::tagCLEANLOCALSTORAGE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagCUSTDATAITEM {
        pub guid: root::GUID,
        pub varValue: root::VARIANTARG,
    }
    pub type CUSTDATAITEM = root::tagCUSTDATAITEM;
    pub type LPCUSTDATAITEM = *mut root::tagCUSTDATAITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCUSTDATA {
        pub cCustData: u32,
        pub prgCustData: root::LPCUSTDATAITEM,
    }
    pub type CUSTDATA = root::tagCUSTDATA;
    pub type LPCUSTDATA = *mut root::tagCUSTDATA;
    extern "C" {
        pub static mut IOleAutomationTypes_v1_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut IOleAutomationTypes_v1_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPCREATETYPEINFO = *mut root::ICreateTypeInfo;
    extern "C" {
        pub static IID_ICreateTypeInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICreateTypeInfo {
        pub _base: root::IUnknown,
    }
    pub type LPCREATETYPEINFO2 = *mut root::ICreateTypeInfo2;
    extern "C" {
        pub static IID_ICreateTypeInfo2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICreateTypeInfo2 {
        pub _base: root::ICreateTypeInfo,
    }
    pub type LPCREATETYPELIB = *mut root::ICreateTypeLib;
    extern "C" {
        pub static IID_ICreateTypeLib: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICreateTypeLib {
        pub _base: root::IUnknown,
    }
    pub type LPCREATETYPELIB2 = *mut root::ICreateTypeLib2;
    extern "C" {
        pub static IID_ICreateTypeLib2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICreateTypeLib2 {
        pub _base: root::ICreateTypeLib,
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPDISPATCH = *mut root::IDispatch;
    extern "C" {
        pub static IID_IDispatch: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDispatch {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IDispatch_RemoteInvoke_Proxy(
            This: *mut root::IDispatch,
            dispIdMember: root::DISPID,
            riid: *const root::IID,
            lcid: root::LCID,
            dwFlags: u32,
            pDispParams: *mut root::DISPPARAMS,
            pVarResult: *mut root::VARIANT,
            pExcepInfo: *mut root::EXCEPINFO,
            pArgErr: *mut root::UINT,
            cVarRef: root::UINT,
            rgVarRefIdx: *mut root::UINT,
            rgVarRef: *mut root::VARIANTARG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDispatch_RemoteInvoke_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPENUMVARIANT = *mut root::IEnumVARIANT;
    extern "C" {
        pub static IID_IEnumVARIANT: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumVARIANT {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumVARIANT_RemoteNext_Proxy(
            This: *mut root::IEnumVARIANT,
            celt: root::ULONG,
            rgVar: *mut root::VARIANT,
            pCeltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumVARIANT_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPTYPECOMP = *mut root::ITypeComp;
    pub const tagDESCKIND_DESCKIND_NONE: root::tagDESCKIND = 0;
    pub const tagDESCKIND_DESCKIND_FUNCDESC: root::tagDESCKIND = 1;
    pub const tagDESCKIND_DESCKIND_VARDESC: root::tagDESCKIND = 2;
    pub const tagDESCKIND_DESCKIND_TYPECOMP: root::tagDESCKIND = 3;
    pub const tagDESCKIND_DESCKIND_IMPLICITAPPOBJ: root::tagDESCKIND = 4;
    pub const tagDESCKIND_DESCKIND_MAX: root::tagDESCKIND = 5;
    pub type tagDESCKIND = i32;
    pub use self::super::root::tagDESCKIND as DESCKIND;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagBINDPTR {
        pub lpfuncdesc: *mut root::FUNCDESC,
        pub lpvardesc: *mut root::VARDESC,
        pub lptcomp: *mut root::ITypeComp,
    }
    pub type BINDPTR = root::tagBINDPTR;
    pub type LPBINDPTR = *mut root::tagBINDPTR;
    extern "C" {
        pub static IID_ITypeComp: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeComp {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn ITypeComp_RemoteBind_Proxy(
            This: *mut root::ITypeComp,
            szName: root::LPOLESTR,
            lHashVal: root::ULONG,
            wFlags: u16,
            ppTInfo: *mut *mut root::ITypeInfo,
            pDescKind: *mut root::DESCKIND,
            ppFuncDesc: *mut root::LPFUNCDESC,
            ppVarDesc: *mut root::LPVARDESC,
            ppTypeComp: *mut *mut root::ITypeComp,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeComp_RemoteBind_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeComp_RemoteBindType_Proxy(
            This: *mut root::ITypeComp,
            szName: root::LPOLESTR,
            lHashVal: root::ULONG,
            ppTInfo: *mut *mut root::ITypeInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeComp_RemoteBindType_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPTYPEINFO = *mut root::ITypeInfo;
    extern "C" {
        pub static IID_ITypeInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetTypeAttr_Proxy(
            This: *mut root::ITypeInfo,
            ppTypeAttr: *mut root::LPTYPEATTR,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetTypeAttr_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetFuncDesc_Proxy(
            This: *mut root::ITypeInfo,
            index: root::UINT,
            ppFuncDesc: *mut root::LPFUNCDESC,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetFuncDesc_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetVarDesc_Proxy(
            This: *mut root::ITypeInfo,
            index: root::UINT,
            ppVarDesc: *mut root::LPVARDESC,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetVarDesc_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetNames_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            rgBstrNames: *mut root::BSTR,
            cMaxNames: root::UINT,
            pcNames: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetNames_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_LocalGetIDsOfNames_Proxy(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_LocalGetIDsOfNames_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_LocalInvoke_Proxy(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_LocalInvoke_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetDocumentation_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            refPtrFlags: u32,
            pBstrName: *mut root::BSTR,
            pBstrDocString: *mut root::BSTR,
            pdwHelpContext: *mut u32,
            pBstrHelpFile: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetDocumentation_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetDllEntry_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            invKind: root::INVOKEKIND,
            refPtrFlags: u32,
            pBstrDllName: *mut root::BSTR,
            pBstrName: *mut root::BSTR,
            pwOrdinal: *mut u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetDllEntry_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_LocalAddressOfMember_Proxy(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_LocalAddressOfMember_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteCreateInstance_Proxy(
            This: *mut root::ITypeInfo,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteCreateInstance_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetContainingTypeLib_Proxy(
            This: *mut root::ITypeInfo,
            ppTLib: *mut *mut root::ITypeLib,
            pIndex: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_RemoteGetContainingTypeLib_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_LocalReleaseTypeAttr_Proxy(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_LocalReleaseTypeAttr_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_LocalReleaseFuncDesc_Proxy(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_LocalReleaseFuncDesc_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeInfo_LocalReleaseVarDesc_Proxy(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_LocalReleaseVarDesc_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPTYPEINFO2 = *mut root::ITypeInfo2;
    extern "C" {
        pub static IID_ITypeInfo2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeInfo2 {
        pub _base: root::ITypeInfo,
    }
    extern "C" {
        pub fn ITypeInfo2_RemoteGetDocumentation2_Proxy(
            This: *mut root::ITypeInfo2,
            memid: root::MEMBERID,
            lcid: root::LCID,
            refPtrFlags: u32,
            pbstrHelpString: *mut root::BSTR,
            pdwHelpStringContext: *mut u32,
            pbstrHelpStringDll: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo2_RemoteGetDocumentation2_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub const tagSYSKIND_SYS_WIN16: root::tagSYSKIND = 0;
    pub const tagSYSKIND_SYS_WIN32: root::tagSYSKIND = 1;
    pub const tagSYSKIND_SYS_MAC: root::tagSYSKIND = 2;
    pub const tagSYSKIND_SYS_WIN64: root::tagSYSKIND = 3;
    pub type tagSYSKIND = i32;
    pub use self::super::root::tagSYSKIND as SYSKIND;
    pub const tagLIBFLAGS_LIBFLAG_FRESTRICTED: root::tagLIBFLAGS = 1;
    pub const tagLIBFLAGS_LIBFLAG_FCONTROL: root::tagLIBFLAGS = 2;
    pub const tagLIBFLAGS_LIBFLAG_FHIDDEN: root::tagLIBFLAGS = 4;
    pub const tagLIBFLAGS_LIBFLAG_FHASDISKIMAGE: root::tagLIBFLAGS = 8;
    pub type tagLIBFLAGS = i32;
    pub use self::super::root::tagLIBFLAGS as LIBFLAGS;
    pub type LPTYPELIB = *mut root::ITypeLib;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagTLIBATTR {
        pub guid: root::GUID,
        pub lcid: root::LCID,
        pub syskind: root::SYSKIND,
        pub wMajorVerNum: u16,
        pub wMinorVerNum: u16,
        pub wLibFlags: u16,
    }
    pub type TLIBATTR = root::tagTLIBATTR;
    pub type LPTLIBATTR = *mut root::tagTLIBATTR;
    extern "C" {
        pub static IID_ITypeLib: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeLib {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn ITypeLib_RemoteGetTypeInfoCount_Proxy(
            This: *mut root::ITypeLib,
            pcTInfo: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_RemoteGetTypeInfoCount_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeLib_RemoteGetLibAttr_Proxy(
            This: *mut root::ITypeLib,
            ppTLibAttr: *mut root::LPTLIBATTR,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_RemoteGetLibAttr_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeLib_RemoteGetDocumentation_Proxy(
            This: *mut root::ITypeLib,
            index: root::INT,
            refPtrFlags: u32,
            pBstrName: *mut root::BSTR,
            pBstrDocString: *mut root::BSTR,
            pdwHelpContext: *mut u32,
            pBstrHelpFile: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_RemoteGetDocumentation_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeLib_RemoteIsName_Proxy(
            This: *mut root::ITypeLib,
            szNameBuf: root::LPOLESTR,
            lHashVal: root::ULONG,
            pfName: *mut root::BOOL,
            pBstrLibName: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_RemoteIsName_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeLib_RemoteFindName_Proxy(
            This: *mut root::ITypeLib,
            szNameBuf: root::LPOLESTR,
            lHashVal: root::ULONG,
            ppTInfo: *mut *mut root::ITypeInfo,
            rgMemId: *mut root::MEMBERID,
            pcFound: *mut root::USHORT,
            pBstrLibName: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_RemoteFindName_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeLib_LocalReleaseTLibAttr_Proxy(This: *mut root::ITypeLib) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_LocalReleaseTLibAttr_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPTYPELIB2 = *mut root::ITypeLib2;
    extern "C" {
        pub static IID_ITypeLib2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeLib2 {
        pub _base: root::ITypeLib,
    }
    extern "C" {
        pub fn ITypeLib2_RemoteGetLibStatistics_Proxy(
            This: *mut root::ITypeLib2,
            pcUniqueNames: *mut root::ULONG,
            pcchUniqueNames: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib2_RemoteGetLibStatistics_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn ITypeLib2_RemoteGetDocumentation2_Proxy(
            This: *mut root::ITypeLib2,
            index: root::INT,
            lcid: root::LCID,
            refPtrFlags: u32,
            pbstrHelpString: *mut root::BSTR,
            pdwHelpStringContext: *mut u32,
            pbstrHelpStringDll: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib2_RemoteGetDocumentation2_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPTYPECHANGEEVENTS = *mut root::ITypeChangeEvents;
    pub const tagCHANGEKIND_CHANGEKIND_ADDMEMBER: root::tagCHANGEKIND = 0;
    pub const tagCHANGEKIND_CHANGEKIND_DELETEMEMBER: root::tagCHANGEKIND = 1;
    pub const tagCHANGEKIND_CHANGEKIND_SETNAMES: root::tagCHANGEKIND = 2;
    pub const tagCHANGEKIND_CHANGEKIND_SETDOCUMENTATION: root::tagCHANGEKIND = 3;
    pub const tagCHANGEKIND_CHANGEKIND_GENERAL: root::tagCHANGEKIND = 4;
    pub const tagCHANGEKIND_CHANGEKIND_INVALIDATE: root::tagCHANGEKIND = 5;
    pub const tagCHANGEKIND_CHANGEKIND_CHANGEFAILED: root::tagCHANGEKIND = 6;
    pub const tagCHANGEKIND_CHANGEKIND_MAX: root::tagCHANGEKIND = 7;
    pub type tagCHANGEKIND = i32;
    pub use self::super::root::tagCHANGEKIND as CHANGEKIND;
    extern "C" {
        pub static IID_ITypeChangeEvents: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeChangeEvents {
        pub _base: root::IUnknown,
    }
    pub type LPERRORINFO = *mut root::IErrorInfo;
    extern "C" {
        pub static IID_IErrorInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IErrorInfo {
        pub _base: root::IUnknown,
    }
    pub type LPCREATEERRORINFO = *mut root::ICreateErrorInfo;
    extern "C" {
        pub static IID_ICreateErrorInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICreateErrorInfo {
        pub _base: root::IUnknown,
    }
    pub type LPSUPPORTERRORINFO = *mut root::ISupportErrorInfo;
    extern "C" {
        pub static IID_ISupportErrorInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISupportErrorInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ITypeFactory: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeFactory {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ITypeMarshal: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeMarshal {
        pub _base: root::IUnknown,
    }
    pub type LPRECORDINFO = *mut root::IRecordInfo;
    extern "C" {
        pub static IID_IRecordInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IRecordInfo {
        pub _base: root::IUnknown,
    }
    pub type LPERRORLOG = *mut root::IErrorLog;
    extern "C" {
        pub static IID_IErrorLog: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IErrorLog {
        pub _base: root::IUnknown,
    }
    pub type LPPROPERTYBAG = *mut root::IPropertyBag;
    extern "C" {
        pub static IID_IPropertyBag: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPropertyBag {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IPropertyBag_RemoteRead_Proxy(
            This: *mut root::IPropertyBag,
            pszPropName: root::LPCOLESTR,
            pVar: *mut root::VARIANT,
            pErrorLog: *mut root::IErrorLog,
            varType: u32,
            pUnkObj: *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IPropertyBag_RemoteRead_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static IID_ITypeLibRegistrationReader: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeLibRegistrationReader {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_ITypeLibRegistration: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ITypeLibRegistration {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static CLSID_TypeLibRegistrationReader: root::CLSID;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn BSTR_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::BSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn BSTR_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::BSTR,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn BSTR_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::BSTR,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn BSTR_UserFree(arg1: *mut u32, arg2: *mut root::BSTR);
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::CLEANLOCALSTORAGE,
        ) -> u32;
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLEANLOCALSTORAGE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLEANLOCALSTORAGE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserFree(
            arg1: *mut u32,
            arg2: *mut root::CLEANLOCALSTORAGE,
        );
    }
    extern "C" {
        pub fn VARIANT_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::VARIANT,
        ) -> u32;
    }
    extern "C" {
        pub fn VARIANT_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::VARIANT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn VARIANT_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::VARIANT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn VARIANT_UserFree(arg1: *mut u32, arg2: *mut root::VARIANT);
    }
    extern "C" {
        pub fn BSTR_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::BSTR,
        ) -> u32;
    }
    extern "C" {
        pub fn BSTR_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::BSTR,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn BSTR_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::BSTR,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn BSTR_UserFree64(arg1: *mut u32, arg2: *mut root::BSTR);
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::CLEANLOCALSTORAGE,
        ) -> u32;
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLEANLOCALSTORAGE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::CLEANLOCALSTORAGE,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn CLEANLOCALSTORAGE_UserFree64(
            arg1: *mut u32,
            arg2: *mut root::CLEANLOCALSTORAGE,
        );
    }
    extern "C" {
        pub fn VARIANT_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::VARIANT,
        ) -> u32;
    }
    extern "C" {
        pub fn VARIANT_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::VARIANT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn VARIANT_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::VARIANT,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn VARIANT_UserFree64(arg1: *mut u32, arg2: *mut root::VARIANT);
    }
    extern "C" {
        pub fn IDispatch_Invoke_Proxy(
            This: *mut root::IDispatch,
            dispIdMember: root::DISPID,
            riid: *const root::IID,
            lcid: root::LCID,
            wFlags: u16,
            pDispParams: *mut root::DISPPARAMS,
            pVarResult: *mut root::VARIANT,
            pExcepInfo: *mut root::EXCEPINFO,
            puArgErr: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IDispatch_Invoke_Stub(
            This: *mut root::IDispatch,
            dispIdMember: root::DISPID,
            riid: *const root::IID,
            lcid: root::LCID,
            dwFlags: u32,
            pDispParams: *mut root::DISPPARAMS,
            pVarResult: *mut root::VARIANT,
            pExcepInfo: *mut root::EXCEPINFO,
            pArgErr: *mut root::UINT,
            cVarRef: root::UINT,
            rgVarRefIdx: *mut root::UINT,
            rgVarRef: *mut root::VARIANTARG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumVARIANT_Next_Proxy(
            This: *mut root::IEnumVARIANT,
            celt: root::ULONG,
            rgVar: *mut root::VARIANT,
            pCeltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumVARIANT_Next_Stub(
            This: *mut root::IEnumVARIANT,
            celt: root::ULONG,
            rgVar: *mut root::VARIANT,
            pCeltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeComp_Bind_Proxy(
            This: *mut root::ITypeComp,
            szName: root::LPOLESTR,
            lHashVal: root::ULONG,
            wFlags: u16,
            ppTInfo: *mut *mut root::ITypeInfo,
            pDescKind: *mut root::DESCKIND,
            pBindPtr: *mut root::BINDPTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeComp_Bind_Stub(
            This: *mut root::ITypeComp,
            szName: root::LPOLESTR,
            lHashVal: root::ULONG,
            wFlags: u16,
            ppTInfo: *mut *mut root::ITypeInfo,
            pDescKind: *mut root::DESCKIND,
            ppFuncDesc: *mut root::LPFUNCDESC,
            ppVarDesc: *mut root::LPVARDESC,
            ppTypeComp: *mut *mut root::ITypeComp,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeComp_BindType_Proxy(
            This: *mut root::ITypeComp,
            szName: root::LPOLESTR,
            lHashVal: root::ULONG,
            ppTInfo: *mut *mut root::ITypeInfo,
            ppTComp: *mut *mut root::ITypeComp,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeComp_BindType_Stub(
            This: *mut root::ITypeComp,
            szName: root::LPOLESTR,
            lHashVal: root::ULONG,
            ppTInfo: *mut *mut root::ITypeInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetTypeAttr_Proxy(
            This: *mut root::ITypeInfo,
            ppTypeAttr: *mut *mut root::TYPEATTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetTypeAttr_Stub(
            This: *mut root::ITypeInfo,
            ppTypeAttr: *mut root::LPTYPEATTR,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetFuncDesc_Proxy(
            This: *mut root::ITypeInfo,
            index: root::UINT,
            ppFuncDesc: *mut *mut root::FUNCDESC,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetFuncDesc_Stub(
            This: *mut root::ITypeInfo,
            index: root::UINT,
            ppFuncDesc: *mut root::LPFUNCDESC,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetVarDesc_Proxy(
            This: *mut root::ITypeInfo,
            index: root::UINT,
            ppVarDesc: *mut *mut root::VARDESC,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetVarDesc_Stub(
            This: *mut root::ITypeInfo,
            index: root::UINT,
            ppVarDesc: *mut root::LPVARDESC,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetNames_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            rgBstrNames: *mut root::BSTR,
            cMaxNames: root::UINT,
            pcNames: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetNames_Stub(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            rgBstrNames: *mut root::BSTR,
            cMaxNames: root::UINT,
            pcNames: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetIDsOfNames_Proxy(
            This: *mut root::ITypeInfo,
            rgszNames: *mut root::LPOLESTR,
            cNames: root::UINT,
            pMemId: *mut root::MEMBERID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetIDsOfNames_Stub(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_Invoke_Proxy(
            This: *mut root::ITypeInfo,
            pvInstance: root::PVOID,
            memid: root::MEMBERID,
            wFlags: u16,
            pDispParams: *mut root::DISPPARAMS,
            pVarResult: *mut root::VARIANT,
            pExcepInfo: *mut root::EXCEPINFO,
            puArgErr: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_Invoke_Stub(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetDocumentation_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            pBstrName: *mut root::BSTR,
            pBstrDocString: *mut root::BSTR,
            pdwHelpContext: *mut u32,
            pBstrHelpFile: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetDocumentation_Stub(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            refPtrFlags: u32,
            pBstrName: *mut root::BSTR,
            pBstrDocString: *mut root::BSTR,
            pdwHelpContext: *mut u32,
            pBstrHelpFile: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetDllEntry_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            invKind: root::INVOKEKIND,
            pBstrDllName: *mut root::BSTR,
            pBstrName: *mut root::BSTR,
            pwOrdinal: *mut u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetDllEntry_Stub(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            invKind: root::INVOKEKIND,
            refPtrFlags: u32,
            pBstrDllName: *mut root::BSTR,
            pBstrName: *mut root::BSTR,
            pwOrdinal: *mut u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_AddressOfMember_Proxy(
            This: *mut root::ITypeInfo,
            memid: root::MEMBERID,
            invKind: root::INVOKEKIND,
            ppv: *mut root::PVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_AddressOfMember_Stub(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_CreateInstance_Proxy(
            This: *mut root::ITypeInfo,
            pUnkOuter: *mut root::IUnknown,
            riid: *const root::IID,
            ppvObj: *mut root::PVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_CreateInstance_Stub(
            This: *mut root::ITypeInfo,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetContainingTypeLib_Proxy(
            This: *mut root::ITypeInfo,
            ppTLib: *mut *mut root::ITypeLib,
            pIndex: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_GetContainingTypeLib_Stub(
            This: *mut root::ITypeInfo,
            ppTLib: *mut *mut root::ITypeLib,
            pIndex: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_ReleaseTypeAttr_Proxy(
            This: *mut root::ITypeInfo,
            pTypeAttr: *mut root::TYPEATTR,
        );
    }
    extern "C" {
        pub fn ITypeInfo_ReleaseTypeAttr_Stub(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_ReleaseFuncDesc_Proxy(
            This: *mut root::ITypeInfo,
            pFuncDesc: *mut root::FUNCDESC,
        );
    }
    extern "C" {
        pub fn ITypeInfo_ReleaseFuncDesc_Stub(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo_ReleaseVarDesc_Proxy(
            This: *mut root::ITypeInfo,
            pVarDesc: *mut root::VARDESC,
        );
    }
    extern "C" {
        pub fn ITypeInfo_ReleaseVarDesc_Stub(This: *mut root::ITypeInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo2_GetDocumentation2_Proxy(
            This: *mut root::ITypeInfo2,
            memid: root::MEMBERID,
            lcid: root::LCID,
            pbstrHelpString: *mut root::BSTR,
            pdwHelpStringContext: *mut u32,
            pbstrHelpStringDll: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeInfo2_GetDocumentation2_Stub(
            This: *mut root::ITypeInfo2,
            memid: root::MEMBERID,
            lcid: root::LCID,
            refPtrFlags: u32,
            pbstrHelpString: *mut root::BSTR,
            pdwHelpStringContext: *mut u32,
            pbstrHelpStringDll: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_GetTypeInfoCount_Proxy(This: *mut root::ITypeLib) -> root::UINT;
    }
    extern "C" {
        pub fn ITypeLib_GetTypeInfoCount_Stub(
            This: *mut root::ITypeLib,
            pcTInfo: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_GetLibAttr_Proxy(
            This: *mut root::ITypeLib,
            ppTLibAttr: *mut *mut root::TLIBATTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_GetLibAttr_Stub(
            This: *mut root::ITypeLib,
            ppTLibAttr: *mut root::LPTLIBATTR,
            pDummy: *mut root::CLEANLOCALSTORAGE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_GetDocumentation_Proxy(
            This: *mut root::ITypeLib,
            index: root::INT,
            pBstrName: *mut root::BSTR,
            pBstrDocString: *mut root::BSTR,
            pdwHelpContext: *mut u32,
            pBstrHelpFile: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_GetDocumentation_Stub(
            This: *mut root::ITypeLib,
            index: root::INT,
            refPtrFlags: u32,
            pBstrName: *mut root::BSTR,
            pBstrDocString: *mut root::BSTR,
            pdwHelpContext: *mut u32,
            pBstrHelpFile: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_IsName_Proxy(
            This: *mut root::ITypeLib,
            szNameBuf: root::LPOLESTR,
            lHashVal: root::ULONG,
            pfName: *mut root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_IsName_Stub(
            This: *mut root::ITypeLib,
            szNameBuf: root::LPOLESTR,
            lHashVal: root::ULONG,
            pfName: *mut root::BOOL,
            pBstrLibName: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_FindName_Proxy(
            This: *mut root::ITypeLib,
            szNameBuf: root::LPOLESTR,
            lHashVal: root::ULONG,
            ppTInfo: *mut *mut root::ITypeInfo,
            rgMemId: *mut root::MEMBERID,
            pcFound: *mut root::USHORT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_FindName_Stub(
            This: *mut root::ITypeLib,
            szNameBuf: root::LPOLESTR,
            lHashVal: root::ULONG,
            ppTInfo: *mut *mut root::ITypeInfo,
            rgMemId: *mut root::MEMBERID,
            pcFound: *mut root::USHORT,
            pBstrLibName: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib_ReleaseTLibAttr_Proxy(
            This: *mut root::ITypeLib,
            pTLibAttr: *mut root::TLIBATTR,
        );
    }
    extern "C" {
        pub fn ITypeLib_ReleaseTLibAttr_Stub(This: *mut root::ITypeLib) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib2_GetLibStatistics_Proxy(
            This: *mut root::ITypeLib2,
            pcUniqueNames: *mut root::ULONG,
            pcchUniqueNames: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib2_GetLibStatistics_Stub(
            This: *mut root::ITypeLib2,
            pcUniqueNames: *mut root::ULONG,
            pcchUniqueNames: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib2_GetDocumentation2_Proxy(
            This: *mut root::ITypeLib2,
            index: root::INT,
            lcid: root::LCID,
            pbstrHelpString: *mut root::BSTR,
            pdwHelpStringContext: *mut u32,
            pbstrHelpStringDll: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ITypeLib2_GetDocumentation2_Stub(
            This: *mut root::ITypeLib2,
            index: root::INT,
            lcid: root::LCID,
            refPtrFlags: u32,
            pbstrHelpString: *mut root::BSTR,
            pdwHelpStringContext: *mut u32,
            pbstrHelpStringDll: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IPropertyBag_Read_Proxy(
            This: *mut root::IPropertyBag,
            pszPropName: root::LPCOLESTR,
            pVar: *mut root::VARIANT,
            pErrorLog: *mut root::IErrorLog,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IPropertyBag_Read_Stub(
            This: *mut root::IPropertyBag,
            pszPropName: root::LPCOLESTR,
            pVar: *mut root::VARIANT,
            pErrorLog: *mut root::IErrorLog,
            varType: u32,
            pUnkObj: *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagVersionedStream {
        pub guidVersion: root::GUID,
        pub pStream: *mut root::IStream,
    }
    pub type VERSIONEDSTREAM = root::tagVersionedStream;
    pub type LPVERSIONEDSTREAM = *mut root::tagVersionedStream;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAC {
        pub cElems: root::ULONG,
        pub pElems: *mut i8,
    }
    pub type CAC = root::tagCAC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAUB {
        pub cElems: root::ULONG,
        pub pElems: *mut root::UCHAR,
    }
    pub type CAUB = root::tagCAUB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAI {
        pub cElems: root::ULONG,
        pub pElems: *mut i16,
    }
    pub type CAI = root::tagCAI;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAUI {
        pub cElems: root::ULONG,
        pub pElems: *mut root::USHORT,
    }
    pub type CAUI = root::tagCAUI;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAL {
        pub cElems: root::ULONG,
        pub pElems: *mut i32,
    }
    pub type CAL = root::tagCAL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAUL {
        pub cElems: root::ULONG,
        pub pElems: *mut root::ULONG,
    }
    pub type CAUL = root::tagCAUL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAFLT {
        pub cElems: root::ULONG,
        pub pElems: *mut root::FLOAT,
    }
    pub type CAFLT = root::tagCAFLT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCADBL {
        pub cElems: root::ULONG,
        pub pElems: *mut root::DOUBLE,
    }
    pub type CADBL = root::tagCADBL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCACY {
        pub cElems: root::ULONG,
        pub pElems: *mut root::CY,
    }
    pub type CACY = root::tagCACY;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCADATE {
        pub cElems: root::ULONG,
        pub pElems: *mut root::DATE,
    }
    pub type CADATE = root::tagCADATE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCABSTR {
        pub cElems: root::ULONG,
        pub pElems: *mut root::BSTR,
    }
    pub type CABSTR = root::tagCABSTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCABSTRBLOB {
        pub cElems: root::ULONG,
        pub pElems: *mut root::BSTRBLOB,
    }
    pub type CABSTRBLOB = root::tagCABSTRBLOB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCABOOL {
        pub cElems: root::ULONG,
        pub pElems: *mut root::VARIANT_BOOL,
    }
    pub type CABOOL = root::tagCABOOL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCASCODE {
        pub cElems: root::ULONG,
        pub pElems: *mut root::SCODE,
    }
    pub type CASCODE = root::tagCASCODE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAPROPVARIANT {
        pub cElems: root::ULONG,
        pub pElems: *mut root::PROPVARIANT,
    }
    pub type CAPROPVARIANT = root::tagCAPROPVARIANT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAH {
        pub cElems: root::ULONG,
        pub pElems: *mut root::LARGE_INTEGER,
    }
    pub type CAH = root::tagCAH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAUH {
        pub cElems: root::ULONG,
        pub pElems: *mut root::ULARGE_INTEGER,
    }
    pub type CAUH = root::tagCAUH;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCALPSTR {
        pub cElems: root::ULONG,
        pub pElems: *mut *mut i8,
    }
    pub type CALPSTR = root::tagCALPSTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCALPWSTR {
        pub cElems: root::ULONG,
        pub pElems: *mut root::LPWSTR,
    }
    pub type CALPWSTR = root::tagCALPWSTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCAFILETIME {
        pub cElems: root::ULONG,
        pub pElems: *mut root::FILETIME,
    }
    pub type CAFILETIME = root::tagCAFILETIME;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCACLIPDATA {
        pub cElems: root::ULONG,
        pub pElems: *mut root::CLIPDATA,
    }
    pub type CACLIPDATA = root::tagCACLIPDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCACLSID {
        pub cElems: root::ULONG,
        pub pElems: *mut root::CLSID,
    }
    pub type CACLSID = root::tagCACLSID;
    pub type PROPVAR_PAD1 = u16;
    pub type PROPVAR_PAD2 = u16;
    pub type PROPVAR_PAD3 = u16;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagPROPVARIANT {
        pub __bindgen_anon_1: root::tagPROPVARIANT__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagPROPVARIANT__bindgen_ty_1 {
        pub __bindgen_anon_1: root::tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1,
        pub decVal: root::DECIMAL,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1 {
        pub vt: root::VARTYPE,
        pub wReserved1: root::PROPVAR_PAD1,
        pub wReserved2: root::PROPVAR_PAD2,
        pub wReserved3: root::PROPVAR_PAD3,
        pub __bindgen_anon_1: root::tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
        pub cVal: i8,
        pub bVal: root::UCHAR,
        pub iVal: i16,
        pub uiVal: root::USHORT,
        pub lVal: i32,
        pub ulVal: root::ULONG,
        pub intVal: root::INT,
        pub uintVal: root::UINT,
        pub hVal: root::LARGE_INTEGER,
        pub uhVal: root::ULARGE_INTEGER,
        pub fltVal: root::FLOAT,
        pub dblVal: root::DOUBLE,
        pub boolVal: root::VARIANT_BOOL,
        pub __OBSOLETE__VARIANT_BOOL: root::VARIANT_BOOL,
        pub scode: root::SCODE,
        pub cyVal: root::CY,
        pub date: root::DATE,
        pub filetime: root::FILETIME,
        pub puuid: *mut root::CLSID,
        pub pclipdata: *mut root::CLIPDATA,
        pub bstrVal: root::BSTR,
        pub bstrblobVal: root::BSTRBLOB,
        pub blob: root::BLOB,
        pub pszVal: *mut i8,
        pub pwszVal: root::LPWSTR,
        pub punkVal: *mut root::IUnknown,
        pub pdispVal: *mut root::IDispatch,
        pub pStream: *mut root::IStream,
        pub pStorage: *mut root::IStorage,
        pub pVersionedStream: root::LPVERSIONEDSTREAM,
        pub parray: root::LPSAFEARRAY,
        pub cac: root::CAC,
        pub caub: root::CAUB,
        pub cai: root::CAI,
        pub caui: root::CAUI,
        pub cal: root::CAL,
        pub caul: root::CAUL,
        pub cah: root::CAH,
        pub cauh: root::CAUH,
        pub caflt: root::CAFLT,
        pub cadbl: root::CADBL,
        pub cabool: root::CABOOL,
        pub cascode: root::CASCODE,
        pub cacy: root::CACY,
        pub cadate: root::CADATE,
        pub cafiletime: root::CAFILETIME,
        pub cauuid: root::CACLSID,
        pub caclipdata: root::CACLIPDATA,
        pub cabstr: root::CABSTR,
        pub cabstrblob: root::CABSTRBLOB,
        pub calpstr: root::CALPSTR,
        pub calpwstr: root::CALPWSTR,
        pub capropvar: root::CAPROPVARIANT,
        pub pcVal: *mut i8,
        pub pbVal: *mut root::UCHAR,
        pub piVal: *mut i16,
        pub puiVal: *mut root::USHORT,
        pub plVal: *mut i32,
        pub pulVal: *mut root::ULONG,
        pub pintVal: *mut root::INT,
        pub puintVal: *mut root::UINT,
        pub pfltVal: *mut root::FLOAT,
        pub pdblVal: *mut root::DOUBLE,
        pub pboolVal: *mut root::VARIANT_BOOL,
        pub pdecVal: *mut root::DECIMAL,
        pub pscode: *mut root::SCODE,
        pub pcyVal: *mut root::CY,
        pub pdate: *mut root::DATE,
        pub pbstrVal: *mut root::BSTR,
        pub ppunkVal: *mut *mut root::IUnknown,
        pub ppdispVal: *mut *mut root::IDispatch,
        pub pparray: *mut root::LPSAFEARRAY,
        pub pvarVal: *mut root::PROPVARIANT,
    }
    pub type LPPROPVARIANT = *mut root::tagPROPVARIANT;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct tagPROPSPEC {
        pub ulKind: root::ULONG,
        pub __bindgen_anon_1: root::tagPROPSPEC__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union tagPROPSPEC__bindgen_ty_1 {
        pub propid: root::PROPID,
        pub lpwstr: root::LPOLESTR,
    }
    pub type PROPSPEC = root::tagPROPSPEC;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTATPROPSTG {
        pub lpwstrName: root::LPOLESTR,
        pub propid: root::PROPID,
        pub vt: root::VARTYPE,
    }
    pub type STATPROPSTG = root::tagSTATPROPSTG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTATPROPSETSTG {
        pub fmtid: root::FMTID,
        pub clsid: root::CLSID,
        pub grfFlags: u32,
        pub mtime: root::FILETIME,
        pub ctime: root::FILETIME,
        pub atime: root::FILETIME,
        pub dwOSVersion: u32,
    }
    pub type STATPROPSETSTG = root::tagSTATPROPSETSTG;
    extern "C" {
        pub static mut __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IPropertyStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPropertyStorage {
        pub _base: root::IUnknown,
    }
    pub type LPPROPERTYSETSTORAGE = *mut root::IPropertySetStorage;
    extern "C" {
        pub static IID_IPropertySetStorage: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPropertySetStorage {
        pub _base: root::IUnknown,
    }
    pub type LPENUMSTATPROPSTG = *mut root::IEnumSTATPROPSTG;
    extern "C" {
        pub static IID_IEnumSTATPROPSTG: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumSTATPROPSTG {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumSTATPROPSTG_RemoteNext_Proxy(
            This: *mut root::IEnumSTATPROPSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATPROPSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATPROPSTG_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPENUMSTATPROPSETSTG = *mut root::IEnumSTATPROPSETSTG;
    extern "C" {
        pub static IID_IEnumSTATPROPSETSTG: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumSTATPROPSETSTG {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumSTATPROPSETSTG_RemoteNext_Proxy(
            This: *mut root::IEnumSTATPROPSETSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATPROPSETSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATPROPSETSTG_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPPROPERTYSTORAGE = *mut root::IPropertyStorage;
    extern "C" {
        pub static mut __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::LPSAFEARRAY,
        ) -> u32;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::LPSAFEARRAY,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::LPSAFEARRAY,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserFree(
            arg1: *mut u32,
            arg2: *mut root::LPSAFEARRAY,
        );
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::LPSAFEARRAY,
        ) -> u32;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::LPSAFEARRAY,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::LPSAFEARRAY,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn LPSAFEARRAY_UserFree64(
            arg1: *mut u32,
            arg2: *mut root::LPSAFEARRAY,
        );
    }
    extern "C" {
        pub fn IEnumSTATPROPSTG_Next_Proxy(
            This: *mut root::IEnumSTATPROPSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATPROPSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATPROPSTG_Next_Stub(
            This: *mut root::IEnumSTATPROPSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATPROPSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATPROPSETSTG_Next_Proxy(
            This: *mut root::IEnumSTATPROPSETSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATPROPSETSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumSTATPROPSETSTG_Next_Stub(
            This: *mut root::IEnumSTATPROPSETSTG,
            celt: root::ULONG,
            rgelt: *mut root::STATPROPSETSTG,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    pub type STGFMT = u32;
    extern "C" {
        pub fn StgCreateDocfile(
            pwcsName: *const u16,
            grfMode: u32,
            reserved: u32,
            ppstgOpen: *mut *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgCreateDocfileOnILockBytes(
            plkbyt: *mut root::ILockBytes,
            grfMode: u32,
            reserved: u32,
            ppstgOpen: *mut *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgOpenStorage(
            pwcsName: *const u16,
            pstgPriority: *mut root::IStorage,
            grfMode: u32,
            snbExclude: root::SNB,
            reserved: u32,
            ppstgOpen: *mut *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgOpenStorageOnILockBytes(
            plkbyt: *mut root::ILockBytes,
            pstgPriority: *mut root::IStorage,
            grfMode: u32,
            snbExclude: root::SNB,
            reserved: u32,
            ppstgOpen: *mut *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgIsStorageFile(pwcsName: *const u16) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgIsStorageILockBytes(plkbyt: *mut root::ILockBytes) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgSetTimes(
            lpszName: *const u16,
            pctime: *const root::FILETIME,
            patime: *const root::FILETIME,
            pmtime: *const root::FILETIME,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTGOPTIONS {
        pub usVersion: root::USHORT,
        pub reserved: root::USHORT,
        pub ulSectorSize: root::ULONG,
        pub pwcsTemplateFile: *const u16,
    }
    pub type STGOPTIONS = root::tagSTGOPTIONS;
    extern "C" {
        pub fn StgCreateStorageEx(
            pwcsName: *const u16,
            grfMode: u32,
            stgfmt: u32,
            grfAttrs: u32,
            pStgOptions: *mut root::STGOPTIONS,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            riid: *const root::IID,
            ppObjectOpen: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgOpenStorageEx(
            pwcsName: *const u16,
            grfMode: u32,
            stgfmt: u32,
            grfAttrs: u32,
            pStgOptions: *mut root::STGOPTIONS,
            pSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            riid: *const root::IID,
            ppObjectOpen: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgCreatePropStg(
            pUnk: *mut root::IUnknown,
            fmtid: *const root::IID,
            pclsid: *const root::CLSID,
            grfFlags: u32,
            dwReserved: u32,
            ppPropStg: *mut *mut root::IPropertyStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgOpenPropStg(
            pUnk: *mut root::IUnknown,
            fmtid: *const root::IID,
            grfFlags: u32,
            dwReserved: u32,
            ppPropStg: *mut *mut root::IPropertyStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgCreatePropSetStg(
            pStorage: *mut root::IStorage,
            dwReserved: u32,
            ppPropSetStg: *mut *mut root::IPropertySetStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn FmtIdToPropStgName(
            pfmtid: *const root::FMTID,
            oszName: root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PropStgNameToFmtId(
            oszName: root::LPOLESTR,
            pfmtid: *mut root::FMTID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ReadClassStg(pStg: root::LPSTORAGE, pclsid: *mut root::CLSID) -> root::HRESULT;
    }
    extern "C" {
        pub fn WriteClassStg(pStg: root::LPSTORAGE, rclsid: *const root::IID) -> root::HRESULT;
    }
    extern "C" {
        pub fn ReadClassStm(pStm: root::LPSTREAM, pclsid: *mut root::CLSID) -> root::HRESULT;
    }
    extern "C" {
        pub fn WriteClassStm(pStm: root::LPSTREAM, rclsid: *const root::IID) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetHGlobalFromILockBytes(
            plkbyt: root::LPLOCKBYTES,
            phglobal: *mut root::HGLOBAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateILockBytesOnHGlobal(
            hGlobal: root::HGLOBAL,
            fDeleteOnRelease: root::BOOL,
            pplkbyt: *mut root::LPLOCKBYTES,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetConvertStg(pStg: root::LPSTORAGE) -> root::HRESULT;
    }
    pub const tagCOINIT_COINIT_APARTMENTTHREADED: root::tagCOINIT = 2;
    pub const tagCOINIT_COINIT_MULTITHREADED: root::tagCOINIT = 0;
    pub const tagCOINIT_COINIT_DISABLE_OLE1DDE: root::tagCOINIT = 4;
    pub const tagCOINIT_COINIT_SPEED_OVER_MEMORY: root::tagCOINIT = 8;
    pub type tagCOINIT = i32;
    pub use self::super::root::tagCOINIT as COINIT;
    extern "C" {
        pub fn CoBuildVersion() -> u32;
    }
    extern "C" {
        pub fn CoInitialize(pvReserved: root::LPVOID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterMallocSpy(pMallocSpy: root::LPMALLOCSPY) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRevokeMallocSpy() -> root::HRESULT;
    }
    extern "C" {
        pub fn CoCreateStandardMalloc(
            memctx: u32,
            ppMalloc: *mut *mut root::IMalloc,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterInitializeSpy(
            pSpy: *mut root::IInitializeSpy,
            puliCookie: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRevokeInitializeSpy(uliCookie: root::ULARGE_INTEGER) -> root::HRESULT;
    }
    pub const tagCOMSD_SD_LAUNCHPERMISSIONS: root::tagCOMSD = 0;
    pub const tagCOMSD_SD_ACCESSPERMISSIONS: root::tagCOMSD = 1;
    pub const tagCOMSD_SD_LAUNCHRESTRICTIONS: root::tagCOMSD = 2;
    pub const tagCOMSD_SD_ACCESSRESTRICTIONS: root::tagCOMSD = 3;
    pub type tagCOMSD = i32;
    pub use self::super::root::tagCOMSD as COMSD;
    extern "C" {
        pub fn CoGetSystemSecurityPermissions(
            comSDType: root::COMSD,
            ppSD: *mut root::PSECURITY_DESCRIPTOR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoLoadLibrary(lpszLibName: root::LPOLESTR, bAutoFree: root::BOOL)
            -> root::HINSTANCE;
    }
    extern "C" {
        pub fn CoFreeLibrary(hInst: root::HINSTANCE);
    }
    extern "C" {
        pub fn CoFreeAllLibraries();
    }
    extern "C" {
        pub fn CoGetInstanceFromFile(
            pServerInfo: *mut root::COSERVERINFO,
            pClsid: *mut root::CLSID,
            punkOuter: *mut root::IUnknown,
            dwClsCtx: u32,
            grfMode: u32,
            pwszName: *mut root::OLECHAR,
            dwCount: u32,
            pResults: *mut root::MULTI_QI,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetInstanceFromIStorage(
            pServerInfo: *mut root::COSERVERINFO,
            pClsid: *mut root::CLSID,
            punkOuter: *mut root::IUnknown,
            dwClsCtx: u32,
            pstg: *mut root::IStorage,
            dwCount: u32,
            pResults: *mut root::MULTI_QI,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoAllowSetForegroundWindow(
            pUnk: *mut root::IUnknown,
            lpvReserved: root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DcomChannelSetHResult(
            pvReserved: root::LPVOID,
            pulReserved: *mut root::ULONG,
            appsHR: root::HRESULT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoIsOle1Class(rclsid: *const root::IID) -> root::BOOL;
    }
    extern "C" {
        pub fn CoFileTimeToDosDateTime(
            lpFileTime: *mut root::FILETIME,
            lpDosDate: root::LPWORD,
            lpDosTime: root::LPWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CoDosDateTimeToFileTime(
            nDosDate: u16,
            nDosTime: u16,
            lpFileTime: *mut root::FILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CoRegisterMessageFilter(
            lpMessageFilter: root::LPMESSAGEFILTER,
            lplpMessageFilter: *mut root::LPMESSAGEFILTER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoRegisterChannelHook(
            ExtensionUuid: *const root::GUID,
            pChannelHook: *mut root::IChannelHook,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoTreatAsClass(
            clsidOld: *const root::IID,
            clsidNew: *const root::IID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateDataAdviseHolder(ppDAHolder: *mut root::LPDATAADVISEHOLDER) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateDataCache(
            pUnkOuter: root::LPUNKNOWN,
            rclsid: *const root::IID,
            iid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgOpenAsyncDocfileOnIFillLockBytes(
            pflb: *mut root::IFillLockBytes,
            grfMode: u32,
            asyncFlags: u32,
            ppstgOpen: *mut *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgGetIFillLockBytesOnILockBytes(
            pilb: *mut root::ILockBytes,
            ppflb: *mut *mut root::IFillLockBytes,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgGetIFillLockBytesOnFile(
            pwcsName: *const root::OLECHAR,
            ppflb: *mut *mut root::IFillLockBytes,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StgOpenLayoutDocfile(
            pwcsDfName: *const root::OLECHAR,
            grfMode: u32,
            reserved: u32,
            ppstgOpen: *mut *mut root::IStorage,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInstall(
            pbc: *mut root::IBindCtx,
            dwFlags: u32,
            pClassSpec: *mut root::uCLSSPEC,
            pQuery: *mut root::QUERYCONTEXT,
            pszCodeBase: root::LPWSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn BindMoniker(
            pmk: root::LPMONIKER,
            grfOpt: u32,
            iidResult: *const root::IID,
            ppvResult: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetObject(
            pszName: root::LPCWSTR,
            pBindOptions: *mut root::BIND_OPTS,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn MkParseDisplayName(
            pbc: root::LPBC,
            szUserName: root::LPCOLESTR,
            pchEaten: *mut root::ULONG,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn MonikerRelativePathTo(
            pmkSrc: root::LPMONIKER,
            pmkDest: root::LPMONIKER,
            ppmkRelPath: *mut root::LPMONIKER,
            dwReserved: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn MonikerCommonPrefixWith(
            pmkThis: root::LPMONIKER,
            pmkOther: root::LPMONIKER,
            ppmkCommon: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateBindCtx(reserved: u32, ppbc: *mut root::LPBC) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateGenericComposite(
            pmkFirst: root::LPMONIKER,
            pmkRest: root::LPMONIKER,
            ppmkComposite: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetClassFile(szFilename: root::LPCOLESTR, pclsid: *mut root::CLSID)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateClassMoniker(
            rclsid: *const root::IID,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateFileMoniker(
            lpszPathName: root::LPCOLESTR,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateItemMoniker(
            lpszDelim: root::LPCOLESTR,
            lpszItem: root::LPCOLESTR,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateAntiMoniker(ppmk: *mut root::LPMONIKER) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreatePointerMoniker(
            punk: root::LPUNKNOWN,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateObjrefMoniker(
            punk: root::LPUNKNOWN,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetRunningObjectTable(
            reserved: u32,
            pprot: *mut root::LPRUNNINGOBJECTTABLE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPOLEADVISEHOLDER = *mut root::IOleAdviseHolder;
    extern "C" {
        pub static IID_IOleAdviseHolder: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleAdviseHolder {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPOLECACHE = *mut root::IOleCache;
    extern "C" {
        pub static IID_IOleCache: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleCache {
        pub _base: root::IUnknown,
    }
    pub type LPOLECACHE2 = *mut root::IOleCache2;
    pub const tagDISCARDCACHE_DISCARDCACHE_SAVEIFDIRTY: root::tagDISCARDCACHE = 0;
    pub const tagDISCARDCACHE_DISCARDCACHE_NOSAVE: root::tagDISCARDCACHE = 1;
    pub type tagDISCARDCACHE = i32;
    pub use self::super::root::tagDISCARDCACHE as DISCARDCACHE;
    extern "C" {
        pub static IID_IOleCache2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleCache2 {
        pub _base: root::IOleCache,
    }
    extern "C" {
        pub fn IOleCache2_RemoteUpdateCache_Proxy(
            This: *mut root::IOleCache2,
            pDataObject: root::LPDATAOBJECT,
            grfUpdf: u32,
            pReserved: i64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleCache2_RemoteUpdateCache_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPOLECACHECONTROL = *mut root::IOleCacheControl;
    extern "C" {
        pub static IID_IOleCacheControl: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleCacheControl {
        pub _base: root::IUnknown,
    }
    pub type LPPARSEDISPLAYNAME = *mut root::IParseDisplayName;
    extern "C" {
        pub static IID_IParseDisplayName: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IParseDisplayName {
        pub _base: root::IUnknown,
    }
    pub type LPOLECONTAINER = *mut root::IOleContainer;
    extern "C" {
        pub static IID_IOleContainer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleContainer {
        pub _base: root::IParseDisplayName,
    }
    pub type LPOLECLIENTSITE = *mut root::IOleClientSite;
    extern "C" {
        pub static IID_IOleClientSite: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleClientSite {
        pub _base: root::IUnknown,
    }
    pub type LPOLEOBJECT = *mut root::IOleObject;
    pub const tagOLEGETMONIKER_OLEGETMONIKER_ONLYIFTHERE: root::tagOLEGETMONIKER = 1;
    pub const tagOLEGETMONIKER_OLEGETMONIKER_FORCEASSIGN: root::tagOLEGETMONIKER = 2;
    pub const tagOLEGETMONIKER_OLEGETMONIKER_UNASSIGN: root::tagOLEGETMONIKER = 3;
    pub const tagOLEGETMONIKER_OLEGETMONIKER_TEMPFORUSER: root::tagOLEGETMONIKER = 4;
    pub type tagOLEGETMONIKER = i32;
    pub use self::super::root::tagOLEGETMONIKER as OLEGETMONIKER;
    pub const tagOLEWHICHMK_OLEWHICHMK_CONTAINER: root::tagOLEWHICHMK = 1;
    pub const tagOLEWHICHMK_OLEWHICHMK_OBJREL: root::tagOLEWHICHMK = 2;
    pub const tagOLEWHICHMK_OLEWHICHMK_OBJFULL: root::tagOLEWHICHMK = 3;
    pub type tagOLEWHICHMK = i32;
    pub use self::super::root::tagOLEWHICHMK as OLEWHICHMK;
    pub const tagUSERCLASSTYPE_USERCLASSTYPE_FULL: root::tagUSERCLASSTYPE = 1;
    pub const tagUSERCLASSTYPE_USERCLASSTYPE_SHORT: root::tagUSERCLASSTYPE = 2;
    pub const tagUSERCLASSTYPE_USERCLASSTYPE_APPNAME: root::tagUSERCLASSTYPE = 3;
    pub type tagUSERCLASSTYPE = i32;
    pub use self::super::root::tagUSERCLASSTYPE as USERCLASSTYPE;
    pub const tagOLEMISC_OLEMISC_RECOMPOSEONRESIZE: root::tagOLEMISC = 1;
    pub const tagOLEMISC_OLEMISC_ONLYICONIC: root::tagOLEMISC = 2;
    pub const tagOLEMISC_OLEMISC_INSERTNOTREPLACE: root::tagOLEMISC = 4;
    pub const tagOLEMISC_OLEMISC_STATIC: root::tagOLEMISC = 8;
    pub const tagOLEMISC_OLEMISC_CANTLINKINSIDE: root::tagOLEMISC = 16;
    pub const tagOLEMISC_OLEMISC_CANLINKBYOLE1: root::tagOLEMISC = 32;
    pub const tagOLEMISC_OLEMISC_ISLINKOBJECT: root::tagOLEMISC = 64;
    pub const tagOLEMISC_OLEMISC_INSIDEOUT: root::tagOLEMISC = 128;
    pub const tagOLEMISC_OLEMISC_ACTIVATEWHENVISIBLE: root::tagOLEMISC = 256;
    pub const tagOLEMISC_OLEMISC_RENDERINGISDEVICEINDEPENDENT: root::tagOLEMISC = 512;
    pub const tagOLEMISC_OLEMISC_INVISIBLEATRUNTIME: root::tagOLEMISC = 1024;
    pub const tagOLEMISC_OLEMISC_ALWAYSRUN: root::tagOLEMISC = 2048;
    pub const tagOLEMISC_OLEMISC_ACTSLIKEBUTTON: root::tagOLEMISC = 4096;
    pub const tagOLEMISC_OLEMISC_ACTSLIKELABEL: root::tagOLEMISC = 8192;
    pub const tagOLEMISC_OLEMISC_NOUIACTIVATE: root::tagOLEMISC = 16384;
    pub const tagOLEMISC_OLEMISC_ALIGNABLE: root::tagOLEMISC = 32768;
    pub const tagOLEMISC_OLEMISC_SIMPLEFRAME: root::tagOLEMISC = 65536;
    pub const tagOLEMISC_OLEMISC_SETCLIENTSITEFIRST: root::tagOLEMISC = 131072;
    pub const tagOLEMISC_OLEMISC_IMEMODE: root::tagOLEMISC = 262144;
    pub const tagOLEMISC_OLEMISC_IGNOREACTIVATEWHENVISIBLE: root::tagOLEMISC = 524288;
    pub const tagOLEMISC_OLEMISC_WANTSTOMENUMERGE: root::tagOLEMISC = 1048576;
    pub const tagOLEMISC_OLEMISC_SUPPORTSMULTILEVELUNDO: root::tagOLEMISC = 2097152;
    pub type tagOLEMISC = i32;
    pub use self::super::root::tagOLEMISC as OLEMISC;
    pub const tagOLECLOSE_OLECLOSE_SAVEIFDIRTY: root::tagOLECLOSE = 0;
    pub const tagOLECLOSE_OLECLOSE_NOSAVE: root::tagOLECLOSE = 1;
    pub const tagOLECLOSE_OLECLOSE_PROMPTSAVE: root::tagOLECLOSE = 2;
    pub type tagOLECLOSE = i32;
    pub use self::super::root::tagOLECLOSE as OLECLOSE;
    extern "C" {
        pub static IID_IOleObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleObject {
        pub _base: root::IUnknown,
    }
    pub const tagOLERENDER_OLERENDER_NONE: root::tagOLERENDER = 0;
    pub const tagOLERENDER_OLERENDER_DRAW: root::tagOLERENDER = 1;
    pub const tagOLERENDER_OLERENDER_FORMAT: root::tagOLERENDER = 2;
    pub const tagOLERENDER_OLERENDER_ASIS: root::tagOLERENDER = 3;
    pub type tagOLERENDER = i32;
    pub use self::super::root::tagOLERENDER as OLERENDER;
    pub type LPOLERENDER = *mut root::OLERENDER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOBJECTDESCRIPTOR {
        pub cbSize: root::ULONG,
        pub clsid: root::CLSID,
        pub dwDrawAspect: u32,
        pub sizel: root::SIZEL,
        pub pointl: root::POINTL,
        pub dwStatus: u32,
        pub dwFullUserTypeName: u32,
        pub dwSrcOfCopy: u32,
    }
    pub type OBJECTDESCRIPTOR = root::tagOBJECTDESCRIPTOR;
    pub type POBJECTDESCRIPTOR = *mut root::tagOBJECTDESCRIPTOR;
    pub type LPOBJECTDESCRIPTOR = *mut root::tagOBJECTDESCRIPTOR;
    pub type LINKSRCDESCRIPTOR = root::tagOBJECTDESCRIPTOR;
    pub type PLINKSRCDESCRIPTOR = *mut root::tagOBJECTDESCRIPTOR;
    pub type LPLINKSRCDESCRIPTOR = *mut root::tagOBJECTDESCRIPTOR;
    extern "C" {
        pub static mut IOLETypes_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut IOLETypes_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPOLEWINDOW = *mut root::IOleWindow;
    extern "C" {
        pub static IID_IOleWindow: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleWindow {
        pub _base: root::IUnknown,
    }
    pub type LPOLELINK = *mut root::IOleLink;
    pub const tagOLEUPDATE_OLEUPDATE_ALWAYS: root::tagOLEUPDATE = 1;
    pub const tagOLEUPDATE_OLEUPDATE_ONCALL: root::tagOLEUPDATE = 3;
    pub type tagOLEUPDATE = i32;
    pub use self::super::root::tagOLEUPDATE as OLEUPDATE;
    pub type LPOLEUPDATE = *mut root::OLEUPDATE;
    pub type POLEUPDATE = *mut root::OLEUPDATE;
    pub const tagOLELINKBIND_OLELINKBIND_EVENIFCLASSDIFF: root::tagOLELINKBIND = 1;
    pub type tagOLELINKBIND = i32;
    pub use self::super::root::tagOLELINKBIND as OLELINKBIND;
    extern "C" {
        pub static IID_IOleLink: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleLink {
        pub _base: root::IUnknown,
    }
    pub type LPOLEITEMCONTAINER = *mut root::IOleItemContainer;
    pub const tagBINDSPEED_BINDSPEED_INDEFINITE: root::tagBINDSPEED = 1;
    pub const tagBINDSPEED_BINDSPEED_MODERATE: root::tagBINDSPEED = 2;
    pub const tagBINDSPEED_BINDSPEED_IMMEDIATE: root::tagBINDSPEED = 3;
    pub type tagBINDSPEED = i32;
    pub use self::super::root::tagBINDSPEED as BINDSPEED;
    pub const tagOLECONTF_OLECONTF_EMBEDDINGS: root::tagOLECONTF = 1;
    pub const tagOLECONTF_OLECONTF_LINKS: root::tagOLECONTF = 2;
    pub const tagOLECONTF_OLECONTF_OTHERS: root::tagOLECONTF = 4;
    pub const tagOLECONTF_OLECONTF_ONLYUSER: root::tagOLECONTF = 8;
    pub const tagOLECONTF_OLECONTF_ONLYIFRUNNING: root::tagOLECONTF = 16;
    pub type tagOLECONTF = i32;
    pub use self::super::root::tagOLECONTF as OLECONTF;
    extern "C" {
        pub static IID_IOleItemContainer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleItemContainer {
        pub _base: root::IOleContainer,
    }
    pub type LPOLEINPLACEUIWINDOW = *mut root::IOleInPlaceUIWindow;
    pub type BORDERWIDTHS = root::RECT;
    pub type LPBORDERWIDTHS = root::LPRECT;
    pub type LPCBORDERWIDTHS = root::LPCRECT;
    extern "C" {
        pub static IID_IOleInPlaceUIWindow: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleInPlaceUIWindow {
        pub _base: root::IOleWindow,
    }
    pub type LPOLEINPLACEACTIVEOBJECT = *mut root::IOleInPlaceActiveObject;
    extern "C" {
        pub static IID_IOleInPlaceActiveObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleInPlaceActiveObject {
        pub _base: root::IOleWindow,
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
            This: *mut root::IOleInPlaceActiveObject,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
            This: *mut root::IOleInPlaceActiveObject,
            prcBorder: root::LPCRECT,
            riid: *const root::IID,
            pUIWindow: *mut root::IOleInPlaceUIWindow,
            fFrameWindow: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPOLEINPLACEFRAME = *mut root::IOleInPlaceFrame;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOIFI {
        pub cb: root::UINT,
        pub fMDIApp: root::BOOL,
        pub hwndFrame: root::HWND,
        pub haccel: root::HACCEL,
        pub cAccelEntries: root::UINT,
    }
    pub type OLEINPLACEFRAMEINFO = root::tagOIFI;
    pub type LPOLEINPLACEFRAMEINFO = *mut root::tagOIFI;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOleMenuGroupWidths {
        pub width: [i32; 6usize],
    }
    pub type OLEMENUGROUPWIDTHS = root::tagOleMenuGroupWidths;
    pub type LPOLEMENUGROUPWIDTHS = *mut root::tagOleMenuGroupWidths;
    pub type HOLEMENU = root::HGLOBAL;
    extern "C" {
        pub static IID_IOleInPlaceFrame: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleInPlaceFrame {
        pub _base: root::IOleInPlaceUIWindow,
    }
    pub type LPOLEINPLACEOBJECT = *mut root::IOleInPlaceObject;
    extern "C" {
        pub static IID_IOleInPlaceObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleInPlaceObject {
        pub _base: root::IOleWindow,
    }
    pub type LPOLEINPLACESITE = *mut root::IOleInPlaceSite;
    extern "C" {
        pub static IID_IOleInPlaceSite: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IOleInPlaceSite {
        pub _base: root::IOleWindow,
    }
    extern "C" {
        pub static IID_IContinue: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IContinue {
        pub _base: root::IUnknown,
    }
    pub type LPVIEWOBJECT = *mut root::IViewObject;
    extern "C" {
        pub static IID_IViewObject: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IViewObject {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IViewObject_RemoteDraw_Proxy(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: u64,
            ptd: *mut root::DVTARGETDEVICE,
            hdcTargetDev: root::HDC,
            hdcDraw: root::HDC,
            lprcBounds: root::LPCRECTL,
            lprcWBounds: root::LPCRECTL,
            pContinue: *mut root::IContinue,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_RemoteDraw_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IViewObject_RemoteGetColorSet_Proxy(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: u64,
            ptd: *mut root::DVTARGETDEVICE,
            hicTargetDev: u64,
            ppColorSet: *mut *mut root::LOGPALETTE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_RemoteGetColorSet_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IViewObject_RemoteFreeze_Proxy(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: u64,
            pdwFreeze: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_RemoteFreeze_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IViewObject_RemoteGetAdvise_Proxy(
            This: *mut root::IViewObject,
            pAspects: *mut u32,
            pAdvf: *mut u32,
            ppAdvSink: *mut *mut root::IAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_RemoteGetAdvise_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    pub type LPVIEWOBJECT2 = *mut root::IViewObject2;
    extern "C" {
        pub static IID_IViewObject2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IViewObject2 {
        pub _base: root::IViewObject,
    }
    pub type LPDROPSOURCE = *mut root::IDropSource;
    extern "C" {
        pub static IID_IDropSource: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDropSource {
        pub _base: root::IUnknown,
    }
    pub type LPDROPTARGET = *mut root::IDropTarget;
    extern "C" {
        pub static IID_IDropTarget: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDropTarget {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IDropSourceNotify: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDropSourceNotify {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IEnterpriseDropTarget: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnterpriseDropTarget {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPENUMOLEVERB = *mut root::IEnumOLEVERB;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOLEVERB {
        pub lVerb: i32,
        pub lpszVerbName: root::LPOLESTR,
        pub fuFlags: u32,
        pub grfAttribs: u32,
    }
    pub type OLEVERB = root::tagOLEVERB;
    pub type LPOLEVERB = *mut root::tagOLEVERB;
    pub const tagOLEVERBATTRIB_OLEVERBATTRIB_NEVERDIRTIES: root::tagOLEVERBATTRIB = 1;
    pub const tagOLEVERBATTRIB_OLEVERBATTRIB_ONCONTAINERMENU: root::tagOLEVERBATTRIB = 2;
    pub type tagOLEVERBATTRIB = i32;
    pub use self::super::root::tagOLEVERBATTRIB as OLEVERBATTRIB;
    extern "C" {
        pub static IID_IEnumOLEVERB: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEnumOLEVERB {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IEnumOLEVERB_RemoteNext_Proxy(
            This: *mut root::IEnumOLEVERB,
            celt: root::ULONG,
            rgelt: root::LPOLEVERB,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumOLEVERB_RemoteNext_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn HACCEL_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HACCEL,
        ) -> u32;
    }
    extern "C" {
        pub fn HACCEL_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HACCEL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HACCEL_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HACCEL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HACCEL_UserFree(arg1: *mut u32, arg2: *mut root::HACCEL);
    }
    extern "C" {
        pub fn HGLOBAL_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HGLOBAL,
        ) -> u32;
    }
    extern "C" {
        pub fn HGLOBAL_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HGLOBAL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HGLOBAL_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HGLOBAL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HGLOBAL_UserFree(arg1: *mut u32, arg2: *mut root::HGLOBAL);
    }
    extern "C" {
        pub fn HMENU_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HMENU,
        ) -> u32;
    }
    extern "C" {
        pub fn HMENU_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HMENU,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HMENU_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HMENU,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HMENU_UserFree(arg1: *mut u32, arg2: *mut root::HMENU);
    }
    extern "C" {
        pub fn HWND_UserSize(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HWND,
        ) -> u32;
    }
    extern "C" {
        pub fn HWND_UserMarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HWND,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HWND_UserUnmarshal(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HWND,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HWND_UserFree(arg1: *mut u32, arg2: *mut root::HWND);
    }
    extern "C" {
        pub fn HACCEL_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HACCEL,
        ) -> u32;
    }
    extern "C" {
        pub fn HACCEL_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HACCEL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HACCEL_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HACCEL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HACCEL_UserFree64(arg1: *mut u32, arg2: *mut root::HACCEL);
    }
    extern "C" {
        pub fn HGLOBAL_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HGLOBAL,
        ) -> u32;
    }
    extern "C" {
        pub fn HGLOBAL_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HGLOBAL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HGLOBAL_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HGLOBAL,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HGLOBAL_UserFree64(arg1: *mut u32, arg2: *mut root::HGLOBAL);
    }
    extern "C" {
        pub fn HMENU_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HMENU,
        ) -> u32;
    }
    extern "C" {
        pub fn HMENU_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HMENU,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HMENU_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HMENU,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HMENU_UserFree64(arg1: *mut u32, arg2: *mut root::HMENU);
    }
    extern "C" {
        pub fn HWND_UserSize64(
            arg1: *mut u32,
            arg2: u32,
            arg3: *mut root::HWND,
        ) -> u32;
    }
    extern "C" {
        pub fn HWND_UserMarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HWND,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HWND_UserUnmarshal64(
            arg1: *mut u32,
            arg2: *mut u8,
            arg3: *mut root::HWND,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn HWND_UserFree64(arg1: *mut u32, arg2: *mut root::HWND);
    }
    extern "C" {
        pub fn IOleCache2_UpdateCache_Proxy(
            This: *mut root::IOleCache2,
            pDataObject: root::LPDATAOBJECT,
            grfUpdf: u32,
            pReserved: root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleCache2_UpdateCache_Stub(
            This: *mut root::IOleCache2,
            pDataObject: root::LPDATAOBJECT,
            grfUpdf: u32,
            pReserved: i64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
            This: *mut root::IOleInPlaceActiveObject,
            lpmsg: root::LPMSG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_TranslateAccelerator_Stub(
            This: *mut root::IOleInPlaceActiveObject,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_ResizeBorder_Proxy(
            This: *mut root::IOleInPlaceActiveObject,
            prcBorder: root::LPCRECT,
            pUIWindow: *mut root::IOleInPlaceUIWindow,
            fFrameWindow: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IOleInPlaceActiveObject_ResizeBorder_Stub(
            This: *mut root::IOleInPlaceActiveObject,
            prcBorder: root::LPCRECT,
            riid: *const root::IID,
            pUIWindow: *mut root::IOleInPlaceUIWindow,
            fFrameWindow: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_Draw_Proxy(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: *mut ::std::os::raw::c_void,
            ptd: *mut root::DVTARGETDEVICE,
            hdcTargetDev: root::HDC,
            hdcDraw: root::HDC,
            lprcBounds: root::LPCRECTL,
            lprcWBounds: root::LPCRECTL,
            pfnContinue: ::std::option::Option<
                unsafe extern "C" fn(dwContinue: u64) -> root::BOOL,
            >,
            dwContinue: u64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_Draw_Stub(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: u64,
            ptd: *mut root::DVTARGETDEVICE,
            hdcTargetDev: root::HDC,
            hdcDraw: root::HDC,
            lprcBounds: root::LPCRECTL,
            lprcWBounds: root::LPCRECTL,
            pContinue: *mut root::IContinue,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_GetColorSet_Proxy(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: *mut ::std::os::raw::c_void,
            ptd: *mut root::DVTARGETDEVICE,
            hicTargetDev: root::HDC,
            ppColorSet: *mut *mut root::LOGPALETTE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_GetColorSet_Stub(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: u64,
            ptd: *mut root::DVTARGETDEVICE,
            hicTargetDev: u64,
            ppColorSet: *mut *mut root::LOGPALETTE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_Freeze_Proxy(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: *mut ::std::os::raw::c_void,
            pdwFreeze: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_Freeze_Stub(
            This: *mut root::IViewObject,
            dwDrawAspect: u32,
            lindex: i32,
            pvAspect: u64,
            pdwFreeze: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_GetAdvise_Proxy(
            This: *mut root::IViewObject,
            pAspects: *mut u32,
            pAdvf: *mut u32,
            ppAdvSink: *mut *mut root::IAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IViewObject_GetAdvise_Stub(
            This: *mut root::IViewObject,
            pAspects: *mut u32,
            pAdvf: *mut u32,
            ppAdvSink: *mut *mut root::IAdviseSink,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumOLEVERB_Next_Proxy(
            This: *mut root::IEnumOLEVERB,
            celt: root::ULONG,
            rgelt: root::LPOLEVERB,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEnumOLEVERB_Next_Stub(
            This: *mut root::IEnumOLEVERB,
            celt: root::ULONG,
            rgelt: root::LPOLEVERB,
            pceltFetched: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPSERVICEPROVIDER = *mut root::IServiceProvider;
    extern "C" {
        pub static IID_IServiceProvider: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IServiceProvider {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IServiceProvider_RemoteQueryService_Proxy(
            This: *mut root::IServiceProvider,
            guidService: *const root::GUID,
            riid: *const root::IID,
            ppvObject: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IServiceProvider_RemoteQueryService_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn IServiceProvider_QueryService_Proxy(
            This: *mut root::IServiceProvider,
            guidService: *const root::GUID,
            riid: *const root::IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IServiceProvider_QueryService_Stub(
            This: *mut root::IServiceProvider,
            guidService: *const root::GUID,
            riid: *const root::IID,
            ppvObject: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DOMDocument {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DOMFreeThreadedDocument {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XMLHTTPRequest {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XMLDSOControl {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XMLDocument {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _xml_error {
        pub _nLine: u32,
        pub _pchBuf: root::BSTR,
        pub _cchBuf: u32,
        pub _ich: u32,
        pub _pszFound: root::BSTR,
        pub _pszExpected: root::BSTR,
        pub _reserved1: u32,
        pub _reserved2: u32,
    }
    pub type XML_ERROR = root::_xml_error;
    extern "C" {
        pub static mut __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub const tagDOMNodeType_NODE_INVALID: root::tagDOMNodeType = 0;
    pub const tagDOMNodeType_NODE_ELEMENT: root::tagDOMNodeType = 1;
    pub const tagDOMNodeType_NODE_ATTRIBUTE: root::tagDOMNodeType = 2;
    pub const tagDOMNodeType_NODE_TEXT: root::tagDOMNodeType = 3;
    pub const tagDOMNodeType_NODE_CDATA_SECTION: root::tagDOMNodeType = 4;
    pub const tagDOMNodeType_NODE_ENTITY_REFERENCE: root::tagDOMNodeType = 5;
    pub const tagDOMNodeType_NODE_ENTITY: root::tagDOMNodeType = 6;
    pub const tagDOMNodeType_NODE_PROCESSING_INSTRUCTION: root::tagDOMNodeType = 7;
    pub const tagDOMNodeType_NODE_COMMENT: root::tagDOMNodeType = 8;
    pub const tagDOMNodeType_NODE_DOCUMENT: root::tagDOMNodeType = 9;
    pub const tagDOMNodeType_NODE_DOCUMENT_TYPE: root::tagDOMNodeType = 10;
    pub const tagDOMNodeType_NODE_DOCUMENT_FRAGMENT: root::tagDOMNodeType = 11;
    pub const tagDOMNodeType_NODE_NOTATION: root::tagDOMNodeType = 12;
    pub type tagDOMNodeType = i32;
    pub use self::super::root::tagDOMNodeType as DOMNodeType;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_ELEMENT: root::tagXMLEMEM_TYPE = 0;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_TEXT: root::tagXMLEMEM_TYPE = 1;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_COMMENT: root::tagXMLEMEM_TYPE = 2;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_DOCUMENT: root::tagXMLEMEM_TYPE = 3;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_DTD: root::tagXMLEMEM_TYPE = 4;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_PI: root::tagXMLEMEM_TYPE = 5;
    pub const tagXMLEMEM_TYPE_XMLELEMTYPE_OTHER: root::tagXMLEMEM_TYPE = 6;
    pub type tagXMLEMEM_TYPE = i32;
    pub use self::super::root::tagXMLEMEM_TYPE as XMLELEM_TYPE;
    extern "C" {
        pub static LIBID_MSXML: root::IID;
    }
    extern "C" {
        pub static IID_IXMLDOMImplementation: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMImplementation {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLDOMNode: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMNode {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLDOMDocumentFragment: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMDocumentFragment {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMDocument: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMDocument {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMNodeList: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMNodeList {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLDOMNamedNodeMap: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMNamedNodeMap {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLDOMCharacterData: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMCharacterData {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMAttribute: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMAttribute {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMElement: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMElement {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMText: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMText {
        pub _base: root::IXMLDOMCharacterData,
    }
    extern "C" {
        pub static IID_IXMLDOMComment: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMComment {
        pub _base: root::IXMLDOMCharacterData,
    }
    extern "C" {
        pub static IID_IXMLDOMProcessingInstruction: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMProcessingInstruction {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMCDATASection: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMCDATASection {
        pub _base: root::IXMLDOMText,
    }
    extern "C" {
        pub static IID_IXMLDOMDocumentType: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMDocumentType {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMNotation: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMNotation {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMEntity: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMEntity {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMEntityReference: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMEntityReference {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static IID_IXMLDOMParseError: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDOMParseError {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXTLRuntime: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXTLRuntime {
        pub _base: root::IXMLDOMNode,
    }
    extern "C" {
        pub static DIID_XMLDOMDocumentEvents: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XMLDOMDocumentEvents {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static CLSID_DOMDocument: root::CLSID;
    }
    extern "C" {
        pub static CLSID_DOMFreeThreadedDocument: root::CLSID;
    }
    extern "C" {
        pub static IID_IXMLHttpRequest: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLHttpRequest {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static CLSID_XMLHTTPRequest: root::CLSID;
    }
    extern "C" {
        pub static IID_IXMLDSOControl: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDSOControl {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static CLSID_XMLDSOControl: root::CLSID;
    }
    extern "C" {
        pub static IID_IXMLElementCollection: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLElementCollection {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLDocument: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDocument {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLDocument2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLDocument2 {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLElement: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLElement {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLElement2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLElement2 {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLAttribute: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLAttribute {
        pub _base: root::IDispatch,
    }
    extern "C" {
        pub static IID_IXMLError: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IXMLError {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static CLSID_XMLDocument: root::CLSID;
    }
    extern "C" {
        pub static mut __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static CLSID_SBS_StdURLMoniker: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_HttpProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_FtpProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_GopherProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_HttpSProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_FileProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_MkProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_UrlMkBindCtx: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_SoftDistExt: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_CdlProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_ClassInstallFilter: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_InternetSecurityManager: root::IID;
    }
    extern "C" {
        pub static CLSID_SBS_InternetZoneManager: root::IID;
    }
    extern "C" {
        pub static IID_IAsyncMoniker: root::IID;
    }
    extern "C" {
        pub static CLSID_StdURLMoniker: root::IID;
    }
    extern "C" {
        pub static CLSID_HttpProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_FtpProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_GopherProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_HttpSProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_FileProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_ResProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_AboutProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_JSProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_MailtoProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_IE4_PROTOCOLS: root::IID;
    }
    extern "C" {
        pub static CLSID_MkProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_StdURLProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_TBAuthProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_UrlMkBindCtx: root::IID;
    }
    extern "C" {
        pub static CLSID_CdlProtocol: root::IID;
    }
    extern "C" {
        pub static CLSID_ClassInstallFilter: root::IID;
    }
    extern "C" {
        pub static IID_IAsyncBindCtx: root::IID;
    }
    extern "C" {
        pub fn CreateURLMoniker(
            pMkCtx: root::LPMONIKER,
            szURL: root::LPCWSTR,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateURLMonikerEx(
            pMkCtx: root::LPMONIKER,
            szURL: root::LPCWSTR,
            ppmk: *mut root::LPMONIKER,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetClassURL(szURL: root::LPCWSTR, pClsID: *mut root::CLSID) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateAsyncBindCtx(
            reserved: u32,
            pBSCb: *mut root::IBindStatusCallback,
            pEFetc: *mut root::IEnumFORMATETC,
            ppBC: *mut *mut root::IBindCtx,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateURLMonikerEx2(
            pMkCtx: root::LPMONIKER,
            pUri: *mut root::IUri,
            ppmk: *mut root::LPMONIKER,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateAsyncBindCtxEx(
            pbc: *mut root::IBindCtx,
            dwOptions: u32,
            pBSCb: *mut root::IBindStatusCallback,
            pEnum: *mut root::IEnumFORMATETC,
            ppBC: *mut *mut root::IBindCtx,
            reserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn MkParseDisplayNameEx(
            pbc: *mut root::IBindCtx,
            szDisplayName: root::LPCWSTR,
            pchEaten: *mut root::ULONG,
            ppmk: *mut root::LPMONIKER,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterBindStatusCallback(
            pBC: root::LPBC,
            pBSCb: *mut root::IBindStatusCallback,
            ppBSCBPrev: *mut *mut root::IBindStatusCallback,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RevokeBindStatusCallback(
            pBC: root::LPBC,
            pBSCb: *mut root::IBindStatusCallback,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetClassFileOrMime(
            pBC: root::LPBC,
            szFilename: root::LPCWSTR,
            pBuffer: root::LPVOID,
            cbSize: u32,
            szMime: root::LPCWSTR,
            dwReserved: u32,
            pclsid: *mut root::CLSID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IsValidURL(
            pBC: root::LPBC,
            szURL: root::LPCWSTR,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoGetClassObjectFromURL(
            rCLASSID: *const root::IID,
            szCODE: root::LPCWSTR,
            dwFileVersionMS: u32,
            dwFileVersionLS: u32,
            szTYPE: root::LPCWSTR,
            pBindCtx: root::LPBINDCTX,
            dwClsContext: u32,
            pvReserved: root::LPVOID,
            riid: *const root::IID,
            ppv: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IEInstallScope(pdwScope: root::LPDWORD) -> root::HRESULT;
    }
    extern "C" {
        pub fn FaultInIEFeature(
            hWnd: root::HWND,
            pClassSpec: *mut root::uCLSSPEC,
            pQuery: *mut root::QUERYCONTEXT,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetComponentIDFromCLSSPEC(
            pClassspec: *mut root::uCLSSPEC,
            ppszComponentID: *mut *mut i8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IsAsyncMoniker(pmk: *mut root::IMoniker) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateURLBinding(
            lpszUrl: root::LPCWSTR,
            pbc: *mut root::IBindCtx,
            ppBdg: *mut *mut root::IBinding,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterMediaTypes(
            ctypes: root::UINT,
            rgszTypes: *const *const i8,
            rgcfTypes: *mut root::CLIPFORMAT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn FindMediaType(
            rgszTypes: *const i8,
            rgcfTypes: *mut root::CLIPFORMAT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateFormatEnumerator(
            cfmtetc: root::UINT,
            rgfmtetc: *mut root::FORMATETC,
            ppenumfmtetc: *mut *mut root::IEnumFORMATETC,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterFormatEnumerator(
            pBC: root::LPBC,
            pEFetc: *mut root::IEnumFORMATETC,
            reserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RevokeFormatEnumerator(
            pBC: root::LPBC,
            pEFetc: *mut root::IEnumFORMATETC,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterMediaTypeClass(
            pBC: root::LPBC,
            ctypes: root::UINT,
            rgszTypes: *const *const i8,
            rgclsID: *mut root::CLSID,
            reserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn FindMediaTypeClass(
            pBC: root::LPBC,
            szType: *const i8,
            pclsID: *mut root::CLSID,
            reserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlMkSetSessionOption(
            dwOption: u32,
            pBuffer: root::LPVOID,
            dwBufferLength: u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlMkGetSessionOption(
            dwOption: u32,
            pBuffer: root::LPVOID,
            dwBufferLength: u32,
            pdwBufferLengthOut: *mut u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn FindMimeFromData(
            pBC: root::LPBC,
            pwzUrl: root::LPCWSTR,
            pBuffer: root::LPVOID,
            cbSize: u32,
            pwzMimeProposed: root::LPCWSTR,
            dwMimeFlags: u32,
            ppwzMimeOut: *mut root::LPWSTR,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ObtainUserAgentString(
            dwOption: u32,
            pszUAOut: *mut i8,
            cbSize: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CompareSecurityIds(
            pbSecurityId1: *mut u8,
            dwLen1: u32,
            pbSecurityId2: *mut u8,
            dwLen2: u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CompatFlagsFromClsid(
            pclsid: *mut root::CLSID,
            pdwCompatFlags: root::LPDWORD,
            pdwMiscStatusFlags: root::LPDWORD,
        ) -> root::HRESULT;
    }
    pub const IEObjectType_IE_EPM_OBJECT_EVENT: root::IEObjectType = 0;
    pub const IEObjectType_IE_EPM_OBJECT_MUTEX: root::IEObjectType = 1;
    pub const IEObjectType_IE_EPM_OBJECT_SEMAPHORE: root::IEObjectType = 2;
    pub const IEObjectType_IE_EPM_OBJECT_SHARED_MEMORY: root::IEObjectType = 3;
    pub const IEObjectType_IE_EPM_OBJECT_WAITABLE_TIMER: root::IEObjectType = 4;
    pub const IEObjectType_IE_EPM_OBJECT_FILE: root::IEObjectType = 5;
    pub const IEObjectType_IE_EPM_OBJECT_NAMED_PIPE: root::IEObjectType = 6;
    pub const IEObjectType_IE_EPM_OBJECT_REGISTRY: root::IEObjectType = 7;
    pub type IEObjectType = i32;
    extern "C" {
        pub fn SetAccessForIEAppContainer(
            hObject: root::HANDLE,
            ieObjectType: root::IEObjectType,
            dwAccessMask: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPPERSISTMONIKER = *mut root::IPersistMoniker;
    extern "C" {
        pub static IID_IPersistMoniker: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPersistMoniker {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPMONIKERPROP = *mut root::IMonikerProp;
    pub const __MIDL_IMonikerProp_0001_MIMETYPEPROP: root::__MIDL_IMonikerProp_0001 = 0;
    pub const __MIDL_IMonikerProp_0001_USE_SRC_URL: root::__MIDL_IMonikerProp_0001 = 1;
    pub const __MIDL_IMonikerProp_0001_CLASSIDPROP: root::__MIDL_IMonikerProp_0001 = 2;
    pub const __MIDL_IMonikerProp_0001_TRUSTEDDOWNLOADPROP: root::__MIDL_IMonikerProp_0001 = 3;
    pub const __MIDL_IMonikerProp_0001_POPUPLEVELPROP: root::__MIDL_IMonikerProp_0001 = 4;
    pub type __MIDL_IMonikerProp_0001 = i32;
    pub use self::super::root::__MIDL_IMonikerProp_0001 as MONIKERPROPERTY;
    extern "C" {
        pub static IID_IMonikerProp: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IMonikerProp {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBINDPROTOCOL = *mut root::IBindProtocol;
    extern "C" {
        pub static IID_IBindProtocol: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindProtocol {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBINDING = *mut root::IBinding;
    extern "C" {
        pub static IID_IBinding: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBinding {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IBinding_RemoteGetBindResult_Proxy(
            This: *mut root::IBinding,
            pclsidProtocol: *mut root::CLSID,
            pdwResult: *mut u32,
            pszResult: *mut root::LPOLESTR,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBinding_RemoteGetBindResult_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBINDSTATUSCALLBACK = *mut root::IBindStatusCallback;
    pub const __MIDL_IBindStatusCallback_0001_BINDVERB_GET: root::__MIDL_IBindStatusCallback_0001 =
        0;
    pub const __MIDL_IBindStatusCallback_0001_BINDVERB_POST: root::__MIDL_IBindStatusCallback_0001 =
        1;
    pub const __MIDL_IBindStatusCallback_0001_BINDVERB_PUT: root::__MIDL_IBindStatusCallback_0001 =
        2;
    pub const __MIDL_IBindStatusCallback_0001_BINDVERB_CUSTOM:
        root::__MIDL_IBindStatusCallback_0001 = 3;
    pub const __MIDL_IBindStatusCallback_0001_BINDVERB_RESERVED1:
        root::__MIDL_IBindStatusCallback_0001 = 4;
    pub type __MIDL_IBindStatusCallback_0001 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallback_0001 as BINDVERB;
    pub const __MIDL_IBindStatusCallback_0002_BINDINFOF_URLENCODESTGMEDDATA:
        root::__MIDL_IBindStatusCallback_0002 = 1;
    pub const __MIDL_IBindStatusCallback_0002_BINDINFOF_URLENCODEDEXTRAINFO:
        root::__MIDL_IBindStatusCallback_0002 = 2;
    pub type __MIDL_IBindStatusCallback_0002 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallback_0002 as BINDINFOF;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_ASYNCHRONOUS:
        root::__MIDL_IBindStatusCallback_0003 = 1;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_ASYNCSTORAGE:
        root::__MIDL_IBindStatusCallback_0003 = 2;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_NOPROGRESSIVERENDERING:
        root::__MIDL_IBindStatusCallback_0003 = 4;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_OFFLINEOPERATION:
        root::__MIDL_IBindStatusCallback_0003 = 8;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_GETNEWESTVERSION:
        root::__MIDL_IBindStatusCallback_0003 = 16;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_NOWRITECACHE:
        root::__MIDL_IBindStatusCallback_0003 = 32;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_NEEDFILE:
        root::__MIDL_IBindStatusCallback_0003 = 64;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_PULLDATA:
        root::__MIDL_IBindStatusCallback_0003 = 128;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_IGNORESECURITYPROBLEM:
        root::__MIDL_IBindStatusCallback_0003 = 256;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESYNCHRONIZE:
        root::__MIDL_IBindStatusCallback_0003 = 512;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_HYPERLINK:
        root::__MIDL_IBindStatusCallback_0003 = 1024;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_NO_UI: root::__MIDL_IBindStatusCallback_0003 =
        2048;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_SILENTOPERATION:
        root::__MIDL_IBindStatusCallback_0003 = 4096;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_PRAGMA_NO_CACHE:
        root::__MIDL_IBindStatusCallback_0003 = 8192;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_GETCLASSOBJECT:
        root::__MIDL_IBindStatusCallback_0003 = 16384;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_1:
        root::__MIDL_IBindStatusCallback_0003 = 32768;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_FREE_THREADED:
        root::__MIDL_IBindStatusCallback_0003 = 65536;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_DIRECT_READ:
        root::__MIDL_IBindStatusCallback_0003 = 131072;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_FORMS_SUBMIT:
        root::__MIDL_IBindStatusCallback_0003 = 262144;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_GETFROMCACHE_IF_NET_FAIL:
        root::__MIDL_IBindStatusCallback_0003 = 524288;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_FROMURLMON:
        root::__MIDL_IBindStatusCallback_0003 = 1048576;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_FWD_BACK:
        root::__MIDL_IBindStatusCallback_0003 = 2097152;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_PREFERDEFAULTHANDLER:
        root::__MIDL_IBindStatusCallback_0003 = 4194304;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_ENFORCERESTRICTED:
        root::__MIDL_IBindStatusCallback_0003 = 8388608;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_2:
        root::__MIDL_IBindStatusCallback_0003 = -2147483648;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_3:
        root::__MIDL_IBindStatusCallback_0003 = 16777216;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_4:
        root::__MIDL_IBindStatusCallback_0003 = 33554432;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_5:
        root::__MIDL_IBindStatusCallback_0003 = 67108864;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_6:
        root::__MIDL_IBindStatusCallback_0003 = 134217728;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_7:
        root::__MIDL_IBindStatusCallback_0003 = 1073741824;
    pub const __MIDL_IBindStatusCallback_0003_BINDF_RESERVED_8:
        root::__MIDL_IBindStatusCallback_0003 = 536870912;
    pub type __MIDL_IBindStatusCallback_0003 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallback_0003 as BINDF;
    pub const __MIDL_IBindStatusCallback_0004_URL_ENCODING_NONE:
        root::__MIDL_IBindStatusCallback_0004 = 0;
    pub const __MIDL_IBindStatusCallback_0004_URL_ENCODING_ENABLE_UTF8:
        root::__MIDL_IBindStatusCallback_0004 = 268435456;
    pub const __MIDL_IBindStatusCallback_0004_URL_ENCODING_DISABLE_UTF8:
        root::__MIDL_IBindStatusCallback_0004 = 536870912;
    pub type __MIDL_IBindStatusCallback_0004 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallback_0004 as URL_ENCODING;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _tagBINDINFO {
        pub cbSize: root::ULONG,
        pub szExtraInfo: root::LPWSTR,
        pub stgmedData: root::STGMEDIUM,
        pub grfBindInfoF: u32,
        pub dwBindVerb: u32,
        pub szCustomVerb: root::LPWSTR,
        pub cbstgmedData: u32,
        pub dwOptions: u32,
        pub dwOptionsFlags: u32,
        pub dwCodePage: u32,
        pub securityAttributes: root::SECURITY_ATTRIBUTES,
        pub iid: root::IID,
        pub pUnk: *mut root::IUnknown,
        pub dwReserved: u32,
    }
    pub type BINDINFO = root::_tagBINDINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _REMSECURITY_ATTRIBUTES {
        pub nLength: u32,
        pub lpSecurityDescriptor: u32,
        pub bInheritHandle: root::BOOL,
    }
    pub type REMSECURITY_ATTRIBUTES = root::_REMSECURITY_ATTRIBUTES;
    pub type PREMSECURITY_ATTRIBUTES = *mut root::_REMSECURITY_ATTRIBUTES;
    pub type LPREMSECURITY_ATTRIBUTES = *mut root::_REMSECURITY_ATTRIBUTES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagRemBINDINFO {
        pub cbSize: root::ULONG,
        pub szExtraInfo: root::LPWSTR,
        pub grfBindInfoF: u32,
        pub dwBindVerb: u32,
        pub szCustomVerb: root::LPWSTR,
        pub cbstgmedData: u32,
        pub dwOptions: u32,
        pub dwOptionsFlags: u32,
        pub dwCodePage: u32,
        pub securityAttributes: root::REMSECURITY_ATTRIBUTES,
        pub iid: root::IID,
        pub pUnk: *mut root::IUnknown,
        pub dwReserved: u32,
    }
    pub type RemBINDINFO = root::_tagRemBINDINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRemFORMATETC {
        pub cfFormat: u32,
        pub ptd: u32,
        pub dwAspect: u32,
        pub lindex: i32,
        pub tymed: u32,
    }
    pub type RemFORMATETC = root::tagRemFORMATETC;
    pub type LPREMFORMATETC = *mut root::tagRemFORMATETC;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_WININETFLAG:
        root::__MIDL_IBindStatusCallback_0005 = 65536;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_ENABLE_UTF8:
        root::__MIDL_IBindStatusCallback_0005 = 131072;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_DISABLE_UTF8:
        root::__MIDL_IBindStatusCallback_0005 = 262144;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_USE_IE_ENCODING:
        root::__MIDL_IBindStatusCallback_0005 = 524288;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_BINDTOOBJECT:
        root::__MIDL_IBindStatusCallback_0005 = 1048576;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_SECURITYOPTOUT:
        root::__MIDL_IBindStatusCallback_0005 = 2097152;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN:
        root::__MIDL_IBindStatusCallback_0005 = 4194304;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_USEBINDSTRINGCREDS:
        root::__MIDL_IBindStatusCallback_0005 = 8388608;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS:
        root::__MIDL_IBindStatusCallback_0005 = 16777216;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE:
        root::__MIDL_IBindStatusCallback_0005 = 33554432;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_WPC_DOWNLOADBLOCKED:
        root::__MIDL_IBindStatusCallback_0005 = 134217728;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_WPC_LOGGING_ENABLED:
        root::__MIDL_IBindStatusCallback_0005 = 268435456;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_ALLOWCONNECTDATA:
        root::__MIDL_IBindStatusCallback_0005 = 536870912;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS:
        root::__MIDL_IBindStatusCallback_0005 = 1073741824;
    pub const __MIDL_IBindStatusCallback_0005_BINDINFO_OPTIONS_SHDOCVW_NAVIGATE:
        root::__MIDL_IBindStatusCallback_0005 = -2147483648;
    pub type __MIDL_IBindStatusCallback_0005 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallback_0005 as BINDINFO_OPTIONS;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_FIRSTDATANOTIFICATION:
        root::__MIDL_IBindStatusCallback_0006 = 1;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_INTERMEDIATEDATANOTIFICATION:
        root::__MIDL_IBindStatusCallback_0006 = 2;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_LASTDATANOTIFICATION:
        root::__MIDL_IBindStatusCallback_0006 = 4;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_DATAFULLYAVAILABLE:
        root::__MIDL_IBindStatusCallback_0006 = 8;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_AVAILABLEDATASIZEUNKNOWN:
        root::__MIDL_IBindStatusCallback_0006 = 16;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_SKIPDRAINDATAFORFILEURLS:
        root::__MIDL_IBindStatusCallback_0006 = 32;
    pub const __MIDL_IBindStatusCallback_0006_BSCF_64BITLENGTHDOWNLOAD:
        root::__MIDL_IBindStatusCallback_0006 = 64;
    pub type __MIDL_IBindStatusCallback_0006 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallback_0006 as BSCF;
    pub const tagBINDSTATUS_BINDSTATUS_FINDINGRESOURCE: root::tagBINDSTATUS = 1;
    pub const tagBINDSTATUS_BINDSTATUS_CONNECTING: root::tagBINDSTATUS = 2;
    pub const tagBINDSTATUS_BINDSTATUS_REDIRECTING: root::tagBINDSTATUS = 3;
    pub const tagBINDSTATUS_BINDSTATUS_BEGINDOWNLOADDATA: root::tagBINDSTATUS = 4;
    pub const tagBINDSTATUS_BINDSTATUS_DOWNLOADINGDATA: root::tagBINDSTATUS = 5;
    pub const tagBINDSTATUS_BINDSTATUS_ENDDOWNLOADDATA: root::tagBINDSTATUS = 6;
    pub const tagBINDSTATUS_BINDSTATUS_BEGINDOWNLOADCOMPONENTS: root::tagBINDSTATUS = 7;
    pub const tagBINDSTATUS_BINDSTATUS_INSTALLINGCOMPONENTS: root::tagBINDSTATUS = 8;
    pub const tagBINDSTATUS_BINDSTATUS_ENDDOWNLOADCOMPONENTS: root::tagBINDSTATUS = 9;
    pub const tagBINDSTATUS_BINDSTATUS_USINGCACHEDCOPY: root::tagBINDSTATUS = 10;
    pub const tagBINDSTATUS_BINDSTATUS_SENDINGREQUEST: root::tagBINDSTATUS = 11;
    pub const tagBINDSTATUS_BINDSTATUS_CLASSIDAVAILABLE: root::tagBINDSTATUS = 12;
    pub const tagBINDSTATUS_BINDSTATUS_MIMETYPEAVAILABLE: root::tagBINDSTATUS = 13;
    pub const tagBINDSTATUS_BINDSTATUS_CACHEFILENAMEAVAILABLE: root::tagBINDSTATUS = 14;
    pub const tagBINDSTATUS_BINDSTATUS_BEGINSYNCOPERATION: root::tagBINDSTATUS = 15;
    pub const tagBINDSTATUS_BINDSTATUS_ENDSYNCOPERATION: root::tagBINDSTATUS = 16;
    pub const tagBINDSTATUS_BINDSTATUS_BEGINUPLOADDATA: root::tagBINDSTATUS = 17;
    pub const tagBINDSTATUS_BINDSTATUS_UPLOADINGDATA: root::tagBINDSTATUS = 18;
    pub const tagBINDSTATUS_BINDSTATUS_ENDUPLOADDATA: root::tagBINDSTATUS = 19;
    pub const tagBINDSTATUS_BINDSTATUS_PROTOCOLCLASSID: root::tagBINDSTATUS = 20;
    pub const tagBINDSTATUS_BINDSTATUS_ENCODING: root::tagBINDSTATUS = 21;
    pub const tagBINDSTATUS_BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE: root::tagBINDSTATUS = 22;
    pub const tagBINDSTATUS_BINDSTATUS_CLASSINSTALLLOCATION: root::tagBINDSTATUS = 23;
    pub const tagBINDSTATUS_BINDSTATUS_DECODING: root::tagBINDSTATUS = 24;
    pub const tagBINDSTATUS_BINDSTATUS_LOADINGMIMEHANDLER: root::tagBINDSTATUS = 25;
    pub const tagBINDSTATUS_BINDSTATUS_CONTENTDISPOSITIONATTACH: root::tagBINDSTATUS = 26;
    pub const tagBINDSTATUS_BINDSTATUS_FILTERREPORTMIMETYPE: root::tagBINDSTATUS = 27;
    pub const tagBINDSTATUS_BINDSTATUS_CLSIDCANINSTANTIATE: root::tagBINDSTATUS = 28;
    pub const tagBINDSTATUS_BINDSTATUS_IUNKNOWNAVAILABLE: root::tagBINDSTATUS = 29;
    pub const tagBINDSTATUS_BINDSTATUS_DIRECTBIND: root::tagBINDSTATUS = 30;
    pub const tagBINDSTATUS_BINDSTATUS_RAWMIMETYPE: root::tagBINDSTATUS = 31;
    pub const tagBINDSTATUS_BINDSTATUS_PROXYDETECTING: root::tagBINDSTATUS = 32;
    pub const tagBINDSTATUS_BINDSTATUS_ACCEPTRANGES: root::tagBINDSTATUS = 33;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_SENT: root::tagBINDSTATUS = 34;
    pub const tagBINDSTATUS_BINDSTATUS_COMPACT_POLICY_RECEIVED: root::tagBINDSTATUS = 35;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_SUPPRESSED: root::tagBINDSTATUS = 36;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_STATE_UNKNOWN: root::tagBINDSTATUS = 37;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_STATE_ACCEPT: root::tagBINDSTATUS = 38;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_STATE_REJECT: root::tagBINDSTATUS = 39;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_STATE_PROMPT: root::tagBINDSTATUS = 40;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_STATE_LEASH: root::tagBINDSTATUS = 41;
    pub const tagBINDSTATUS_BINDSTATUS_COOKIE_STATE_DOWNGRADE: root::tagBINDSTATUS = 42;
    pub const tagBINDSTATUS_BINDSTATUS_POLICY_HREF: root::tagBINDSTATUS = 43;
    pub const tagBINDSTATUS_BINDSTATUS_P3P_HEADER: root::tagBINDSTATUS = 44;
    pub const tagBINDSTATUS_BINDSTATUS_SESSION_COOKIE_RECEIVED: root::tagBINDSTATUS = 45;
    pub const tagBINDSTATUS_BINDSTATUS_PERSISTENT_COOKIE_RECEIVED: root::tagBINDSTATUS = 46;
    pub const tagBINDSTATUS_BINDSTATUS_SESSION_COOKIES_ALLOWED: root::tagBINDSTATUS = 47;
    pub const tagBINDSTATUS_BINDSTATUS_CACHECONTROL: root::tagBINDSTATUS = 48;
    pub const tagBINDSTATUS_BINDSTATUS_CONTENTDISPOSITIONFILENAME: root::tagBINDSTATUS = 49;
    pub const tagBINDSTATUS_BINDSTATUS_MIMETEXTPLAINMISMATCH: root::tagBINDSTATUS = 50;
    pub const tagBINDSTATUS_BINDSTATUS_PUBLISHERAVAILABLE: root::tagBINDSTATUS = 51;
    pub const tagBINDSTATUS_BINDSTATUS_DISPLAYNAMEAVAILABLE: root::tagBINDSTATUS = 52;
    pub const tagBINDSTATUS_BINDSTATUS_SSLUX_NAVBLOCKED: root::tagBINDSTATUS = 53;
    pub const tagBINDSTATUS_BINDSTATUS_SERVER_MIMETYPEAVAILABLE: root::tagBINDSTATUS = 54;
    pub const tagBINDSTATUS_BINDSTATUS_SNIFFED_CLASSIDAVAILABLE: root::tagBINDSTATUS = 55;
    pub const tagBINDSTATUS_BINDSTATUS_64BIT_PROGRESS: root::tagBINDSTATUS = 56;
    pub const tagBINDSTATUS_BINDSTATUS_LAST: root::tagBINDSTATUS = 56;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_0: root::tagBINDSTATUS = 57;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_1: root::tagBINDSTATUS = 58;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_2: root::tagBINDSTATUS = 59;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_3: root::tagBINDSTATUS = 60;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_4: root::tagBINDSTATUS = 61;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_5: root::tagBINDSTATUS = 62;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_6: root::tagBINDSTATUS = 63;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_7: root::tagBINDSTATUS = 64;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_8: root::tagBINDSTATUS = 65;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_9: root::tagBINDSTATUS = 66;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_A: root::tagBINDSTATUS = 67;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_B: root::tagBINDSTATUS = 68;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_C: root::tagBINDSTATUS = 69;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_D: root::tagBINDSTATUS = 70;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_E: root::tagBINDSTATUS = 71;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_F: root::tagBINDSTATUS = 72;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_10: root::tagBINDSTATUS = 73;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_11: root::tagBINDSTATUS = 74;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_12: root::tagBINDSTATUS = 75;
    pub const tagBINDSTATUS_BINDSTATUS_RESERVED_13: root::tagBINDSTATUS = 76;
    pub const tagBINDSTATUS_BINDSTATUS_LAST_PRIVATE: root::tagBINDSTATUS = 76;
    pub type tagBINDSTATUS = i32;
    pub use self::super::root::tagBINDSTATUS as BINDSTATUS;
    extern "C" {
        pub static IID_IBindStatusCallback: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindStatusCallback {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IBindStatusCallback_RemoteGetBindInfo_Proxy(
            This: *mut root::IBindStatusCallback,
            grfBINDF: *mut u32,
            pbindinfo: *mut root::RemBINDINFO,
            pstgmed: *mut root::RemSTGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallback_RemoteGetBindInfo_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IBindStatusCallback_RemoteOnDataAvailable_Proxy(
            This: *mut root::IBindStatusCallback,
            grfBSCF: u32,
            dwSize: u32,
            pformatetc: *mut root::RemFORMATETC,
            pstgmed: *mut root::RemSTGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallback_RemoteOnDataAvailable_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBINDSTATUSCALLBACKEX = *mut root::IBindStatusCallbackEx;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_DISABLEBASICOVERHTTP:
        root::__MIDL_IBindStatusCallbackEx_0001 = 1;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_DISABLEAUTOCOOKIEHANDLING:
        root::__MIDL_IBindStatusCallbackEx_0001 = 2;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_READ_DATA_GREATER_THAN_4GB:
        root::__MIDL_IBindStatusCallbackEx_0001 = 4;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID:
        root::__MIDL_IBindStatusCallbackEx_0001 = 8;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_SETDOWNLOADMODE:
        root::__MIDL_IBindStatusCallbackEx_0001 = 32;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_DISABLE_HTTP_REDIRECT_CACHING:
        root::__MIDL_IBindStatusCallbackEx_0001 = 64;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_KEEP_CALLBACK_MODULE_LOADED:
        root::__MIDL_IBindStatusCallbackEx_0001 = 128;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_ALLOW_PROXY_CRED_PROMPT:
        root::__MIDL_IBindStatusCallbackEx_0001 = 256;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_17:
        root::__MIDL_IBindStatusCallbackEx_0001 = 512;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_16:
        root::__MIDL_IBindStatusCallbackEx_0001 = 1024;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_15:
        root::__MIDL_IBindStatusCallbackEx_0001 = 2048;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_14:
        root::__MIDL_IBindStatusCallbackEx_0001 = 4096;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_13:
        root::__MIDL_IBindStatusCallbackEx_0001 = 8192;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_12:
        root::__MIDL_IBindStatusCallbackEx_0001 = 16384;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_11:
        root::__MIDL_IBindStatusCallbackEx_0001 = 32768;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_10:
        root::__MIDL_IBindStatusCallbackEx_0001 = 65536;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_F:
        root::__MIDL_IBindStatusCallbackEx_0001 = 131072;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_E:
        root::__MIDL_IBindStatusCallbackEx_0001 = 262144;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_D:
        root::__MIDL_IBindStatusCallbackEx_0001 = 524288;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_C:
        root::__MIDL_IBindStatusCallbackEx_0001 = 1048576;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_B:
        root::__MIDL_IBindStatusCallbackEx_0001 = 2097152;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_A:
        root::__MIDL_IBindStatusCallbackEx_0001 = 4194304;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_9:
        root::__MIDL_IBindStatusCallbackEx_0001 = 8388608;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_8:
        root::__MIDL_IBindStatusCallbackEx_0001 = 16777216;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_7:
        root::__MIDL_IBindStatusCallbackEx_0001 = 33554432;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_6:
        root::__MIDL_IBindStatusCallbackEx_0001 = 67108864;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_5:
        root::__MIDL_IBindStatusCallbackEx_0001 = 134217728;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_4:
        root::__MIDL_IBindStatusCallbackEx_0001 = 268435456;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_3:
        root::__MIDL_IBindStatusCallbackEx_0001 = 536870912;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_2:
        root::__MIDL_IBindStatusCallbackEx_0001 = 1073741824;
    pub const __MIDL_IBindStatusCallbackEx_0001_BINDF2_RESERVED_1:
        root::__MIDL_IBindStatusCallbackEx_0001 = -2147483648;
    pub type __MIDL_IBindStatusCallbackEx_0001 = i32;
    pub use self::super::root::__MIDL_IBindStatusCallbackEx_0001 as BINDF2;
    extern "C" {
        pub static IID_IBindStatusCallbackEx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindStatusCallbackEx {
        pub _base: root::IBindStatusCallback,
    }
    extern "C" {
        pub fn IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
            This: *mut root::IBindStatusCallbackEx,
            grfBINDF: *mut u32,
            pbindinfo: *mut root::RemBINDINFO,
            pstgmed: *mut root::RemSTGMEDIUM,
            grfBINDF2: *mut u32,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPAUTHENTICATION = *mut root::IAuthenticate;
    extern "C" {
        pub static IID_IAuthenticate: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAuthenticate {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPAUTHENTICATIONEX = *mut root::IAuthenticateEx;
    pub const __MIDL_IAuthenticateEx_0001_AUTHENTICATEF_PROXY: root::__MIDL_IAuthenticateEx_0001 =
        1;
    pub const __MIDL_IAuthenticateEx_0001_AUTHENTICATEF_BASIC: root::__MIDL_IAuthenticateEx_0001 =
        2;
    pub const __MIDL_IAuthenticateEx_0001_AUTHENTICATEF_HTTP: root::__MIDL_IAuthenticateEx_0001 = 4;
    pub type __MIDL_IAuthenticateEx_0001 = i32;
    pub use self::super::root::__MIDL_IAuthenticateEx_0001 as AUTHENTICATEF;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagAUTHENTICATEINFO {
        pub dwFlags: u32,
        pub dwReserved: u32,
    }
    pub type AUTHENTICATEINFO = root::_tagAUTHENTICATEINFO;
    extern "C" {
        pub static IID_IAuthenticateEx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IAuthenticateEx {
        pub _base: root::IAuthenticate,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPHTTPNEGOTIATE = *mut root::IHttpNegotiate;
    extern "C" {
        pub static IID_IHttpNegotiate: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IHttpNegotiate {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPHTTPNEGOTIATE2 = *mut root::IHttpNegotiate2;
    extern "C" {
        pub static IID_IHttpNegotiate2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IHttpNegotiate2 {
        pub _base: root::IHttpNegotiate,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPHTTPNEGOTIATE3 = *mut root::IHttpNegotiate3;
    extern "C" {
        pub static IID_IHttpNegotiate3: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IHttpNegotiate3 {
        pub _base: root::IHttpNegotiate2,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPWININETFILESTREAM = *mut root::IWinInetFileStream;
    extern "C" {
        pub static IID_IWinInetFileStream: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWinInetFileStream {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPWINDOWFORBINDINGUI = *mut root::IWindowForBindingUI;
    extern "C" {
        pub static IID_IWindowForBindingUI: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWindowForBindingUI {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPCODEINSTALL = *mut root::ICodeInstall;
    pub const __MIDL_ICodeInstall_0001_CIP_DISK_FULL: root::__MIDL_ICodeInstall_0001 = 0;
    pub const __MIDL_ICodeInstall_0001_CIP_ACCESS_DENIED: root::__MIDL_ICodeInstall_0001 = 1;
    pub const __MIDL_ICodeInstall_0001_CIP_NEWER_VERSION_EXISTS: root::__MIDL_ICodeInstall_0001 = 2;
    pub const __MIDL_ICodeInstall_0001_CIP_OLDER_VERSION_EXISTS: root::__MIDL_ICodeInstall_0001 = 3;
    pub const __MIDL_ICodeInstall_0001_CIP_NAME_CONFLICT: root::__MIDL_ICodeInstall_0001 = 4;
    pub const __MIDL_ICodeInstall_0001_CIP_TRUST_VERIFICATION_COMPONENT_MISSING:
        root::__MIDL_ICodeInstall_0001 = 5;
    pub const __MIDL_ICodeInstall_0001_CIP_EXE_SELF_REGISTERATION_TIMEOUT:
        root::__MIDL_ICodeInstall_0001 = 6;
    pub const __MIDL_ICodeInstall_0001_CIP_UNSAFE_TO_ABORT: root::__MIDL_ICodeInstall_0001 = 7;
    pub const __MIDL_ICodeInstall_0001_CIP_NEED_REBOOT: root::__MIDL_ICodeInstall_0001 = 8;
    pub const __MIDL_ICodeInstall_0001_CIP_NEED_REBOOT_UI_PERMISSION:
        root::__MIDL_ICodeInstall_0001 = 9;
    pub type __MIDL_ICodeInstall_0001 = i32;
    pub use self::super::root::__MIDL_ICodeInstall_0001 as CIP_STATUS;
    extern "C" {
        pub static IID_ICodeInstall: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICodeInstall {
        pub _base: root::IWindowForBindingUI,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub const __MIDL_IUri_0001_Uri_PROPERTY_ABSOLUTE_URI: root::__MIDL_IUri_0001 = 0;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_STRING_START: root::__MIDL_IUri_0001 = 0;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_AUTHORITY: root::__MIDL_IUri_0001 = 1;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_DISPLAY_URI: root::__MIDL_IUri_0001 = 2;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_DOMAIN: root::__MIDL_IUri_0001 = 3;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_EXTENSION: root::__MIDL_IUri_0001 = 4;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_FRAGMENT: root::__MIDL_IUri_0001 = 5;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_HOST: root::__MIDL_IUri_0001 = 6;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_PASSWORD: root::__MIDL_IUri_0001 = 7;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_PATH: root::__MIDL_IUri_0001 = 8;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_PATH_AND_QUERY: root::__MIDL_IUri_0001 = 9;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_QUERY: root::__MIDL_IUri_0001 = 10;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_RAW_URI: root::__MIDL_IUri_0001 = 11;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_SCHEME_NAME: root::__MIDL_IUri_0001 = 12;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_USER_INFO: root::__MIDL_IUri_0001 = 13;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_USER_NAME: root::__MIDL_IUri_0001 = 14;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_STRING_LAST: root::__MIDL_IUri_0001 = 14;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_HOST_TYPE: root::__MIDL_IUri_0001 = 15;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_DWORD_START: root::__MIDL_IUri_0001 = 15;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_PORT: root::__MIDL_IUri_0001 = 16;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_SCHEME: root::__MIDL_IUri_0001 = 17;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_ZONE: root::__MIDL_IUri_0001 = 18;
    pub const __MIDL_IUri_0001_Uri_PROPERTY_DWORD_LAST: root::__MIDL_IUri_0001 = 18;
    pub type __MIDL_IUri_0001 = i32;
    pub use self::super::root::__MIDL_IUri_0001 as Uri_PROPERTY;
    pub const __MIDL_IUri_0002_Uri_HOST_UNKNOWN: root::__MIDL_IUri_0002 = 0;
    pub const __MIDL_IUri_0002_Uri_HOST_DNS: root::__MIDL_IUri_0002 = 1;
    pub const __MIDL_IUri_0002_Uri_HOST_IPV4: root::__MIDL_IUri_0002 = 2;
    pub const __MIDL_IUri_0002_Uri_HOST_IPV6: root::__MIDL_IUri_0002 = 3;
    pub const __MIDL_IUri_0002_Uri_HOST_IDN: root::__MIDL_IUri_0002 = 4;
    pub type __MIDL_IUri_0002 = i32;
    pub use self::super::root::__MIDL_IUri_0002 as Uri_HOST_TYPE;
    extern "C" {
        pub static IID_IUri: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IUri {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn CreateUri(
            pwzURI: root::LPCWSTR,
            dwFlags: u32,
            dwReserved: root::DWORD_PTR,
            ppURI: *mut *mut root::IUri,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateUriWithFragment(
            pwzURI: root::LPCWSTR,
            pwzFragment: root::LPCWSTR,
            dwFlags: u32,
            dwReserved: root::DWORD_PTR,
            ppURI: *mut *mut root::IUri,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateUriFromMultiByteString(
            pszANSIInputUri: *const i8,
            dwEncodingFlags: u32,
            dwCodePage: u32,
            dwCreateFlags: u32,
            dwReserved: root::DWORD_PTR,
            ppUri: *mut *mut root::IUri,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IUriContainer: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IUriContainer {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IUriBuilder: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IUriBuilder {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static IID_IUriBuilderFactory: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IUriBuilderFactory {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn CreateIUriBuilder(
            pIUri: *mut root::IUri,
            dwFlags: u32,
            dwReserved: root::DWORD_PTR,
            ppIUriBuilder: *mut *mut root::IUriBuilder,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPWININETINFO = *mut root::IWinInetInfo;
    extern "C" {
        pub static IID_IWinInetInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWinInetInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IWinInetInfo_RemoteQueryOption_Proxy(
            This: *mut root::IWinInetInfo,
            dwOption: u32,
            pBuffer: *mut u8,
            pcbBuf: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IWinInetInfo_RemoteQueryOption_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPHTTPSECURITY = *mut root::IHttpSecurity;
    extern "C" {
        pub static IID_IHttpSecurity: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IHttpSecurity {
        pub _base: root::IWindowForBindingUI,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPWININETHTTPINFO = *mut root::IWinInetHttpInfo;
    extern "C" {
        pub static IID_IWinInetHttpInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWinInetHttpInfo {
        pub _base: root::IWinInetInfo,
    }
    extern "C" {
        pub fn IWinInetHttpInfo_RemoteQueryInfo_Proxy(
            This: *mut root::IWinInetHttpInfo,
            dwOption: u32,
            pBuffer: *mut u8,
            pcbBuf: *mut u32,
            pdwFlags: *mut u32,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IWinInetHttpInfo_RemoteQueryInfo_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IWinInetHttpTimeouts: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWinInetHttpTimeouts {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPWININETCACHEHINTS = *mut root::IWinInetCacheHints;
    extern "C" {
        pub static IID_IWinInetCacheHints: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWinInetCacheHints {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPWININETCACHEHINTS2 = *mut root::IWinInetCacheHints2;
    extern "C" {
        pub static IID_IWinInetCacheHints2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWinInetCacheHints2 {
        pub _base: root::IWinInetCacheHints,
    }
    extern "C" {
        pub static SID_BindHost: root::GUID;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBINDHOST = *mut root::IBindHost;
    extern "C" {
        pub static IID_IBindHost: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindHost {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IBindHost_RemoteMonikerBindToStorage_Proxy(
            This: *mut root::IBindHost,
            pMk: *mut root::IMoniker,
            pBC: *mut root::IBindCtx,
            pBSC: *mut root::IBindStatusCallback,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindHost_RemoteMonikerBindToStorage_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn IBindHost_RemoteMonikerBindToObject_Proxy(
            This: *mut root::IBindHost,
            pMk: *mut root::IMoniker,
            pBC: *mut root::IBindCtx,
            pBSC: *mut root::IBindStatusCallback,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindHost_RemoteMonikerBindToObject_Stub(
            This: *mut root::IRpcStubBuffer,
            _pRpcChannelBuffer: *mut root::IRpcChannelBuffer,
            _pRpcMessage: root::PRPC_MESSAGE,
            _pdwStubPhase: *mut u32,
        );
    }
    extern "C" {
        pub fn HlinkSimpleNavigateToString(
            szTarget: root::LPCWSTR,
            szLocation: root::LPCWSTR,
            szTargetFrameName: root::LPCWSTR,
            pUnk: *mut root::IUnknown,
            pbc: *mut root::IBindCtx,
            arg1: *mut root::IBindStatusCallback,
            grfHLNF: u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn HlinkSimpleNavigateToMoniker(
            pmkTarget: *mut root::IMoniker,
            szLocation: root::LPCWSTR,
            szTargetFrameName: root::LPCWSTR,
            pUnk: *mut root::IUnknown,
            pbc: *mut root::IBindCtx,
            arg1: *mut root::IBindStatusCallback,
            grfHLNF: u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLOpenStreamA(
            arg1: root::LPUNKNOWN,
            arg2: *const i8,
            arg3: u32,
            arg4: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLOpenStreamW(
            arg1: root::LPUNKNOWN,
            arg2: root::LPCWSTR,
            arg3: u32,
            arg4: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLOpenPullStreamA(
            arg1: root::LPUNKNOWN,
            arg2: *const i8,
            arg3: u32,
            arg4: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLOpenPullStreamW(
            arg1: root::LPUNKNOWN,
            arg2: root::LPCWSTR,
            arg3: u32,
            arg4: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLDownloadToFileA(
            arg1: root::LPUNKNOWN,
            arg2: *const i8,
            arg3: *const i8,
            arg4: u32,
            arg5: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLDownloadToFileW(
            arg1: root::LPUNKNOWN,
            arg2: root::LPCWSTR,
            arg3: root::LPCWSTR,
            arg4: u32,
            arg5: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLDownloadToCacheFileA(
            arg1: root::LPUNKNOWN,
            arg2: *const i8,
            arg3: *mut i8,
            cchFileName: u32,
            arg4: u32,
            arg5: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLDownloadToCacheFileW(
            arg1: root::LPUNKNOWN,
            arg2: root::LPCWSTR,
            arg3: root::LPWSTR,
            cchFileName: u32,
            arg4: u32,
            arg5: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLOpenBlockingStreamA(
            arg1: root::LPUNKNOWN,
            arg2: *const i8,
            arg3: *mut root::LPSTREAM,
            arg4: u32,
            arg5: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn URLOpenBlockingStreamW(
            arg1: root::LPUNKNOWN,
            arg2: root::LPCWSTR,
            arg3: *mut root::LPSTREAM,
            arg4: u32,
            arg5: root::LPBINDSTATUSCALLBACK,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn HlinkGoBack(pUnk: *mut root::IUnknown) -> root::HRESULT;
    }
    extern "C" {
        pub fn HlinkGoForward(pUnk: *mut root::IUnknown) -> root::HRESULT;
    }
    extern "C" {
        pub fn HlinkNavigateString(
            pUnk: *mut root::IUnknown,
            szTarget: root::LPCWSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn HlinkNavigateMoniker(
            pUnk: *mut root::IUnknown,
            pmkTarget: *mut root::IMoniker,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNET = *mut root::IInternet;
    extern "C" {
        pub static IID_IInternet: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternet {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETBINDINFO = *mut root::IInternetBindInfo;
    pub const tagBINDSTRING_BINDSTRING_HEADERS: root::tagBINDSTRING = 1;
    pub const tagBINDSTRING_BINDSTRING_ACCEPT_MIMES: root::tagBINDSTRING = 2;
    pub const tagBINDSTRING_BINDSTRING_EXTRA_URL: root::tagBINDSTRING = 3;
    pub const tagBINDSTRING_BINDSTRING_LANGUAGE: root::tagBINDSTRING = 4;
    pub const tagBINDSTRING_BINDSTRING_USERNAME: root::tagBINDSTRING = 5;
    pub const tagBINDSTRING_BINDSTRING_PASSWORD: root::tagBINDSTRING = 6;
    pub const tagBINDSTRING_BINDSTRING_UA_PIXELS: root::tagBINDSTRING = 7;
    pub const tagBINDSTRING_BINDSTRING_UA_COLOR: root::tagBINDSTRING = 8;
    pub const tagBINDSTRING_BINDSTRING_OS: root::tagBINDSTRING = 9;
    pub const tagBINDSTRING_BINDSTRING_USER_AGENT: root::tagBINDSTRING = 10;
    pub const tagBINDSTRING_BINDSTRING_ACCEPT_ENCODINGS: root::tagBINDSTRING = 11;
    pub const tagBINDSTRING_BINDSTRING_POST_COOKIE: root::tagBINDSTRING = 12;
    pub const tagBINDSTRING_BINDSTRING_POST_DATA_MIME: root::tagBINDSTRING = 13;
    pub const tagBINDSTRING_BINDSTRING_URL: root::tagBINDSTRING = 14;
    pub const tagBINDSTRING_BINDSTRING_IID: root::tagBINDSTRING = 15;
    pub const tagBINDSTRING_BINDSTRING_FLAG_BIND_TO_OBJECT: root::tagBINDSTRING = 16;
    pub const tagBINDSTRING_BINDSTRING_PTR_BIND_CONTEXT: root::tagBINDSTRING = 17;
    pub const tagBINDSTRING_BINDSTRING_XDR_ORIGIN: root::tagBINDSTRING = 18;
    pub const tagBINDSTRING_BINDSTRING_DOWNLOADPATH: root::tagBINDSTRING = 19;
    pub const tagBINDSTRING_BINDSTRING_ROOTDOC_URL: root::tagBINDSTRING = 20;
    pub const tagBINDSTRING_BINDSTRING_INITIAL_FILENAME: root::tagBINDSTRING = 21;
    pub const tagBINDSTRING_BINDSTRING_PROXY_USERNAME: root::tagBINDSTRING = 22;
    pub const tagBINDSTRING_BINDSTRING_PROXY_PASSWORD: root::tagBINDSTRING = 23;
    pub const tagBINDSTRING_BINDSTRING_ENTERPRISE_ID: root::tagBINDSTRING = 24;
    pub const tagBINDSTRING_BINDSTRING_DOC_URL: root::tagBINDSTRING = 25;
    pub const tagBINDSTRING_BINDSTRING_SAMESITE_COOKIE_LEVEL: root::tagBINDSTRING = 26;
    pub type tagBINDSTRING = i32;
    pub use self::super::root::tagBINDSTRING as BINDSTRING;
    extern "C" {
        pub static IID_IInternetBindInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetBindInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETBINDINFOEX = *mut root::IInternetBindInfoEx;
    extern "C" {
        pub static IID_IInternetBindInfoEx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetBindInfoEx {
        pub _base: root::IInternetBindInfo,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETPROTOCOLROOT = *mut root::IInternetProtocolRoot;
    pub const _tagPI_FLAGS_PI_PARSE_URL: root::_tagPI_FLAGS = 1;
    pub const _tagPI_FLAGS_PI_FILTER_MODE: root::_tagPI_FLAGS = 2;
    pub const _tagPI_FLAGS_PI_FORCE_ASYNC: root::_tagPI_FLAGS = 4;
    pub const _tagPI_FLAGS_PI_USE_WORKERTHREAD: root::_tagPI_FLAGS = 8;
    pub const _tagPI_FLAGS_PI_MIMEVERIFICATION: root::_tagPI_FLAGS = 16;
    pub const _tagPI_FLAGS_PI_CLSIDLOOKUP: root::_tagPI_FLAGS = 32;
    pub const _tagPI_FLAGS_PI_DATAPROGRESS: root::_tagPI_FLAGS = 64;
    pub const _tagPI_FLAGS_PI_SYNCHRONOUS: root::_tagPI_FLAGS = 128;
    pub const _tagPI_FLAGS_PI_APARTMENTTHREADED: root::_tagPI_FLAGS = 256;
    pub const _tagPI_FLAGS_PI_CLASSINSTALL: root::_tagPI_FLAGS = 512;
    pub const _tagPI_FLAGS_PI_PASSONBINDCTX: root::_tagPI_FLAGS = 8192;
    pub const _tagPI_FLAGS_PI_NOMIMEHANDLER: root::_tagPI_FLAGS = 32768;
    pub const _tagPI_FLAGS_PI_LOADAPPDIRECT: root::_tagPI_FLAGS = 16384;
    pub const _tagPI_FLAGS_PD_FORCE_SWITCH: root::_tagPI_FLAGS = 65536;
    pub const _tagPI_FLAGS_PI_PREFERDEFAULTHANDLER: root::_tagPI_FLAGS = 131072;
    pub type _tagPI_FLAGS = i32;
    pub use self::super::root::_tagPI_FLAGS as PI_FLAGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagPROTOCOLDATA {
        pub grfFlags: u32,
        pub dwState: u32,
        pub pData: root::LPVOID,
        pub cbData: root::ULONG,
    }
    pub type PROTOCOLDATA = root::_tagPROTOCOLDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagStartParam {
        pub iid: root::IID,
        pub pIBindCtx: *mut root::IBindCtx,
        pub pItf: *mut root::IUnknown,
    }
    pub type StartParam = root::_tagStartParam;
    extern "C" {
        pub static IID_IInternetProtocolRoot: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetProtocolRoot {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETPROTOCOL = *mut root::IInternetProtocol;
    extern "C" {
        pub static IID_IInternetProtocol: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetProtocol {
        pub _base: root::IInternetProtocolRoot,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetProtocolEx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetProtocolEx {
        pub _base: root::IInternetProtocol,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETPROTOCOLSINK = *mut root::IInternetProtocolSink;
    extern "C" {
        pub static IID_IInternetProtocolSink: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetProtocolSink {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETPROTOCOLSINKStackable = *mut root::IInternetProtocolSinkStackable;
    extern "C" {
        pub static IID_IInternetProtocolSinkStackable: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetProtocolSinkStackable {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETSESSION = *mut root::IInternetSession;
    pub const _tagOIBDG_FLAGS_OIBDG_APARTMENTTHREADED: root::_tagOIBDG_FLAGS = 256;
    pub const _tagOIBDG_FLAGS_OIBDG_DATAONLY: root::_tagOIBDG_FLAGS = 4096;
    pub type _tagOIBDG_FLAGS = i32;
    pub use self::super::root::_tagOIBDG_FLAGS as OIBDG_FLAGS;
    extern "C" {
        pub static IID_IInternetSession: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetSession {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETTHREADSWITCH = *mut root::IInternetThreadSwitch;
    extern "C" {
        pub static IID_IInternetThreadSwitch: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetThreadSwitch {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETPRIORITY = *mut root::IInternetPriority;
    extern "C" {
        pub static IID_IInternetPriority: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetPriority {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIINTERNETPROTOCOLINFO = *mut root::IInternetProtocolInfo;
    pub const _tagPARSEACTION_PARSE_CANONICALIZE: root::_tagPARSEACTION = 1;
    pub const _tagPARSEACTION_PARSE_FRIENDLY: root::_tagPARSEACTION = 2;
    pub const _tagPARSEACTION_PARSE_SECURITY_URL: root::_tagPARSEACTION = 3;
    pub const _tagPARSEACTION_PARSE_ROOTDOCUMENT: root::_tagPARSEACTION = 4;
    pub const _tagPARSEACTION_PARSE_DOCUMENT: root::_tagPARSEACTION = 5;
    pub const _tagPARSEACTION_PARSE_ANCHOR: root::_tagPARSEACTION = 6;
    pub const _tagPARSEACTION_PARSE_ENCODE_IS_UNESCAPE: root::_tagPARSEACTION = 7;
    pub const _tagPARSEACTION_PARSE_DECODE_IS_ESCAPE: root::_tagPARSEACTION = 8;
    pub const _tagPARSEACTION_PARSE_PATH_FROM_URL: root::_tagPARSEACTION = 9;
    pub const _tagPARSEACTION_PARSE_URL_FROM_PATH: root::_tagPARSEACTION = 10;
    pub const _tagPARSEACTION_PARSE_MIME: root::_tagPARSEACTION = 11;
    pub const _tagPARSEACTION_PARSE_SERVER: root::_tagPARSEACTION = 12;
    pub const _tagPARSEACTION_PARSE_SCHEMA: root::_tagPARSEACTION = 13;
    pub const _tagPARSEACTION_PARSE_SITE: root::_tagPARSEACTION = 14;
    pub const _tagPARSEACTION_PARSE_DOMAIN: root::_tagPARSEACTION = 15;
    pub const _tagPARSEACTION_PARSE_LOCATION: root::_tagPARSEACTION = 16;
    pub const _tagPARSEACTION_PARSE_SECURITY_DOMAIN: root::_tagPARSEACTION = 17;
    pub const _tagPARSEACTION_PARSE_ESCAPE: root::_tagPARSEACTION = 18;
    pub const _tagPARSEACTION_PARSE_UNESCAPE: root::_tagPARSEACTION = 19;
    pub type _tagPARSEACTION = i32;
    pub use self::super::root::_tagPARSEACTION as PARSEACTION;
    pub const _tagPSUACTION_PSU_DEFAULT: root::_tagPSUACTION = 1;
    pub const _tagPSUACTION_PSU_SECURITY_URL_ONLY: root::_tagPSUACTION = 2;
    pub type _tagPSUACTION = i32;
    pub use self::super::root::_tagPSUACTION as PSUACTION;
    pub const _tagQUERYOPTION_QUERY_EXPIRATION_DATE: root::_tagQUERYOPTION = 1;
    pub const _tagQUERYOPTION_QUERY_TIME_OF_LAST_CHANGE: root::_tagQUERYOPTION = 2;
    pub const _tagQUERYOPTION_QUERY_CONTENT_ENCODING: root::_tagQUERYOPTION = 3;
    pub const _tagQUERYOPTION_QUERY_CONTENT_TYPE: root::_tagQUERYOPTION = 4;
    pub const _tagQUERYOPTION_QUERY_REFRESH: root::_tagQUERYOPTION = 5;
    pub const _tagQUERYOPTION_QUERY_RECOMBINE: root::_tagQUERYOPTION = 6;
    pub const _tagQUERYOPTION_QUERY_CAN_NAVIGATE: root::_tagQUERYOPTION = 7;
    pub const _tagQUERYOPTION_QUERY_USES_NETWORK: root::_tagQUERYOPTION = 8;
    pub const _tagQUERYOPTION_QUERY_IS_CACHED: root::_tagQUERYOPTION = 9;
    pub const _tagQUERYOPTION_QUERY_IS_INSTALLEDENTRY: root::_tagQUERYOPTION = 10;
    pub const _tagQUERYOPTION_QUERY_IS_CACHED_OR_MAPPED: root::_tagQUERYOPTION = 11;
    pub const _tagQUERYOPTION_QUERY_USES_CACHE: root::_tagQUERYOPTION = 12;
    pub const _tagQUERYOPTION_QUERY_IS_SECURE: root::_tagQUERYOPTION = 13;
    pub const _tagQUERYOPTION_QUERY_IS_SAFE: root::_tagQUERYOPTION = 14;
    pub const _tagQUERYOPTION_QUERY_USES_HISTORYFOLDER: root::_tagQUERYOPTION = 15;
    pub const _tagQUERYOPTION_QUERY_IS_CACHED_AND_USABLE_OFFLINE: root::_tagQUERYOPTION = 16;
    pub type _tagQUERYOPTION = i32;
    pub use self::super::root::_tagQUERYOPTION as QUERYOPTION;
    extern "C" {
        pub static IID_IInternetProtocolInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetProtocolInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn CoInternetParseUrl(
            pwzUrl: root::LPCWSTR,
            ParseAction: root::PARSEACTION,
            dwFlags: u32,
            pszResult: root::LPWSTR,
            cchResult: u32,
            pcchResult: *mut u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetParseIUri(
            pIUri: *mut root::IUri,
            ParseAction: root::PARSEACTION,
            dwFlags: u32,
            pwzResult: root::LPWSTR,
            cchResult: u32,
            pcchResult: *mut u32,
            dwReserved: root::DWORD_PTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetCombineUrl(
            pwzBaseUrl: root::LPCWSTR,
            pwzRelativeUrl: root::LPCWSTR,
            dwCombineFlags: u32,
            pszResult: root::LPWSTR,
            cchResult: u32,
            pcchResult: *mut u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetCombineUrlEx(
            pBaseUri: *mut root::IUri,
            pwzRelativeUrl: root::LPCWSTR,
            dwCombineFlags: u32,
            ppCombinedUri: *mut *mut root::IUri,
            dwReserved: root::DWORD_PTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetCombineIUri(
            pBaseUri: *mut root::IUri,
            pRelativeUri: *mut root::IUri,
            dwCombineFlags: u32,
            ppCombinedUri: *mut *mut root::IUri,
            dwReserved: root::DWORD_PTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetCompareUrl(
            pwzUrl1: root::LPCWSTR,
            pwzUrl2: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetGetProtocolFlags(
            pwzUrl: root::LPCWSTR,
            pdwFlags: *mut u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetQueryInfo(
            pwzUrl: root::LPCWSTR,
            QueryOptions: root::QUERYOPTION,
            dwQueryFlags: u32,
            pvBuffer: root::LPVOID,
            cbBuffer: u32,
            pcbBuffer: *mut u32,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetGetSession(
            dwSessionMode: u32,
            ppIInternetSession: *mut *mut root::IInternetSession,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetGetSecurityUrl(
            pwszUrl: root::LPCWSTR,
            ppwszSecUrl: *mut root::LPWSTR,
            psuAction: root::PSUACTION,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AsyncInstallDistributionUnit(
            szDistUnit: root::LPCWSTR,
            szTYPE: root::LPCWSTR,
            szExt: root::LPCWSTR,
            dwFileVersionMS: u32,
            dwFileVersionLS: u32,
            szURL: root::LPCWSTR,
            pbc: *mut root::IBindCtx,
            pvReserved: root::LPVOID,
            flags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetGetSecurityUrlEx(
            pUri: *mut root::IUri,
            ppSecUri: *mut *mut root::IUri,
            psuAction: root::PSUACTION,
            dwReserved: root::DWORD_PTR,
        ) -> root::HRESULT;
    }
    pub const _tagINTERNETFEATURELIST_FEATURE_OBJECT_CACHING: root::_tagINTERNETFEATURELIST = 0;
    pub const _tagINTERNETFEATURELIST_FEATURE_ZONE_ELEVATION: root::_tagINTERNETFEATURELIST = 1;
    pub const _tagINTERNETFEATURELIST_FEATURE_MIME_HANDLING: root::_tagINTERNETFEATURELIST = 2;
    pub const _tagINTERNETFEATURELIST_FEATURE_MIME_SNIFFING: root::_tagINTERNETFEATURELIST = 3;
    pub const _tagINTERNETFEATURELIST_FEATURE_WINDOW_RESTRICTIONS: root::_tagINTERNETFEATURELIST =
        4;
    pub const _tagINTERNETFEATURELIST_FEATURE_WEBOC_POPUPMANAGEMENT: root::_tagINTERNETFEATURELIST =
        5;
    pub const _tagINTERNETFEATURELIST_FEATURE_BEHAVIORS: root::_tagINTERNETFEATURELIST = 6;
    pub const _tagINTERNETFEATURELIST_FEATURE_DISABLE_MK_PROTOCOL: root::_tagINTERNETFEATURELIST =
        7;
    pub const _tagINTERNETFEATURELIST_FEATURE_LOCALMACHINE_LOCKDOWN: root::_tagINTERNETFEATURELIST =
        8;
    pub const _tagINTERNETFEATURELIST_FEATURE_SECURITYBAND: root::_tagINTERNETFEATURELIST = 9;
    pub const _tagINTERNETFEATURELIST_FEATURE_RESTRICT_ACTIVEXINSTALL:
        root::_tagINTERNETFEATURELIST = 10;
    pub const _tagINTERNETFEATURELIST_FEATURE_VALIDATE_NAVIGATE_URL: root::_tagINTERNETFEATURELIST =
        11;
    pub const _tagINTERNETFEATURELIST_FEATURE_RESTRICT_FILEDOWNLOAD: root::_tagINTERNETFEATURELIST =
        12;
    pub const _tagINTERNETFEATURELIST_FEATURE_ADDON_MANAGEMENT: root::_tagINTERNETFEATURELIST = 13;
    pub const _tagINTERNETFEATURELIST_FEATURE_PROTOCOL_LOCKDOWN: root::_tagINTERNETFEATURELIST = 14;
    pub const _tagINTERNETFEATURELIST_FEATURE_HTTP_USERNAME_PASSWORD_DISABLE:
        root::_tagINTERNETFEATURELIST = 15;
    pub const _tagINTERNETFEATURELIST_FEATURE_SAFE_BINDTOOBJECT: root::_tagINTERNETFEATURELIST = 16;
    pub const _tagINTERNETFEATURELIST_FEATURE_UNC_SAVEDFILECHECK: root::_tagINTERNETFEATURELIST =
        17;
    pub const _tagINTERNETFEATURELIST_FEATURE_GET_URL_DOM_FILEPATH_UNENCODED:
        root::_tagINTERNETFEATURELIST = 18;
    pub const _tagINTERNETFEATURELIST_FEATURE_TABBED_BROWSING: root::_tagINTERNETFEATURELIST = 19;
    pub const _tagINTERNETFEATURELIST_FEATURE_SSLUX: root::_tagINTERNETFEATURELIST = 20;
    pub const _tagINTERNETFEATURELIST_FEATURE_DISABLE_NAVIGATION_SOUNDS:
        root::_tagINTERNETFEATURELIST = 21;
    pub const _tagINTERNETFEATURELIST_FEATURE_DISABLE_LEGACY_COMPRESSION:
        root::_tagINTERNETFEATURELIST = 22;
    pub const _tagINTERNETFEATURELIST_FEATURE_FORCE_ADDR_AND_STATUS: root::_tagINTERNETFEATURELIST =
        23;
    pub const _tagINTERNETFEATURELIST_FEATURE_XMLHTTP: root::_tagINTERNETFEATURELIST = 24;
    pub const _tagINTERNETFEATURELIST_FEATURE_DISABLE_TELNET_PROTOCOL:
        root::_tagINTERNETFEATURELIST = 25;
    pub const _tagINTERNETFEATURELIST_FEATURE_FEEDS: root::_tagINTERNETFEATURELIST = 26;
    pub const _tagINTERNETFEATURELIST_FEATURE_BLOCK_INPUT_PROMPTS: root::_tagINTERNETFEATURELIST =
        27;
    pub const _tagINTERNETFEATURELIST_FEATURE_ENTRY_COUNT: root::_tagINTERNETFEATURELIST = 28;
    pub type _tagINTERNETFEATURELIST = i32;
    pub use self::super::root::_tagINTERNETFEATURELIST as INTERNETFEATURELIST;
    extern "C" {
        pub fn CoInternetSetFeatureEnabled(
            FeatureEntry: root::INTERNETFEATURELIST,
            dwFlags: u32,
            fEnable: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetIsFeatureEnabled(
            FeatureEntry: root::INTERNETFEATURELIST,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetIsFeatureEnabledForUrl(
            FeatureEntry: root::INTERNETFEATURELIST,
            dwFlags: u32,
            szURL: root::LPCWSTR,
            pSecMgr: *mut root::IInternetSecurityManager,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetIsFeatureEnabledForIUri(
            FeatureEntry: root::INTERNETFEATURELIST,
            dwFlags: u32,
            pIUri: *mut root::IUri,
            pSecMgr: *mut root::IInternetSecurityManagerEx2,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetIsFeatureZoneElevationEnabled(
            szFromURL: root::LPCWSTR,
            szToURL: root::LPCWSTR,
            pSecMgr: *mut root::IInternetSecurityManager,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CopyStgMedium(
            pcstgmedSrc: *const root::STGMEDIUM,
            pstgmedDest: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CopyBindInfo(
            pcbiSrc: *const root::BINDINFO,
            pbiDest: *mut root::BINDINFO,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ReleaseBindInfo(pbindinfo: *mut root::BINDINFO);
    }
    extern "C" {
        pub fn IEGetUserPrivateNamespaceName() -> *mut u16;
    }
    extern "C" {
        pub fn CoInternetCreateSecurityManager(
            pSP: *mut root::IServiceProvider,
            ppSM: *mut *mut root::IInternetSecurityManager,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoInternetCreateZoneManager(
            pSP: *mut root::IServiceProvider,
            ppZM: *mut *mut root::IInternetZoneManager,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static CLSID_InternetSecurityManager: root::IID;
    }
    extern "C" {
        pub static CLSID_InternetZoneManager: root::IID;
    }
    extern "C" {
        pub static CLSID_PersistentZoneIdentifier: root::IID;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetSecurityMgrSite: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetSecurityMgrSite {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_DEFAULT:
        root::__MIDL_IInternetSecurityManager_0001 = 0;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_NOUI:
        root::__MIDL_IInternetSecurityManager_0001 = 1;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_ISFILE:
        root::__MIDL_IInternetSecurityManager_0001 = 2;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_WARN_IF_DENIED:
        root::__MIDL_IInternetSecurityManager_0001 = 4;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_FORCEUI_FOREGROUND:
        root::__MIDL_IInternetSecurityManager_0001 = 8;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_CHECK_TIFS:
        root::__MIDL_IInternetSecurityManager_0001 = 16;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_DONTCHECKBOXINDIALOG:
        root::__MIDL_IInternetSecurityManager_0001 = 32;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_TRUSTED:
        root::__MIDL_IInternetSecurityManager_0001 = 64;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_ACCEPT_WILDCARD_SCHEME:
        root::__MIDL_IInternetSecurityManager_0001 = 128;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_ENFORCERESTRICTED:
        root::__MIDL_IInternetSecurityManager_0001 = 256;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_NOSAVEDFILECHECK:
        root::__MIDL_IInternetSecurityManager_0001 = 512;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_REQUIRESAVEDFILECHECK:
        root::__MIDL_IInternetSecurityManager_0001 = 1024;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_DONT_USE_CACHE:
        root::__MIDL_IInternetSecurityManager_0001 = 4096;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_RESERVED1:
        root::__MIDL_IInternetSecurityManager_0001 = 8192;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_RESERVED2:
        root::__MIDL_IInternetSecurityManager_0001 = 16384;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_LMZ_UNLOCKED:
        root::__MIDL_IInternetSecurityManager_0001 = 65536;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_LMZ_LOCKED:
        root::__MIDL_IInternetSecurityManager_0001 = 131072;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_DEFAULTZONEPOL:
        root::__MIDL_IInternetSecurityManager_0001 = 262144;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_NPL_USE_LOCKED_IF_RESTRICTED:
        root::__MIDL_IInternetSecurityManager_0001 = 524288;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_NOUIIFLOCKED:
        root::__MIDL_IInternetSecurityManager_0001 = 1048576;
    pub const __MIDL_IInternetSecurityManager_0001_PUAF_DRAGPROTOCOLCHECK:
        root::__MIDL_IInternetSecurityManager_0001 = 2097152;
    pub type __MIDL_IInternetSecurityManager_0001 = i32;
    pub use self::super::root::__MIDL_IInternetSecurityManager_0001 as PUAF;
    pub const __MIDL_IInternetSecurityManager_0002_PUAFOUT_DEFAULT:
        root::__MIDL_IInternetSecurityManager_0002 = 0;
    pub const __MIDL_IInternetSecurityManager_0002_PUAFOUT_ISLOCKZONEPOLICY:
        root::__MIDL_IInternetSecurityManager_0002 = 1;
    pub type __MIDL_IInternetSecurityManager_0002 = i32;
    pub use self::super::root::__MIDL_IInternetSecurityManager_0002 as PUAFOUT;
    pub const __MIDL_IInternetSecurityManager_0003_SZM_CREATE:
        root::__MIDL_IInternetSecurityManager_0003 = 0;
    pub const __MIDL_IInternetSecurityManager_0003_SZM_DELETE:
        root::__MIDL_IInternetSecurityManager_0003 = 1;
    pub type __MIDL_IInternetSecurityManager_0003 = i32;
    pub use self::super::root::__MIDL_IInternetSecurityManager_0003 as SZM_FLAGS;
    extern "C" {
        pub static IID_IInternetSecurityManager: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetSecurityManager {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetSecurityManagerEx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetSecurityManagerEx {
        pub _base: root::IInternetSecurityManager,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetSecurityManagerEx2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetSecurityManagerEx2 {
        pub _base: root::IInternetSecurityManagerEx,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IZoneIdentifier: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IZoneIdentifier {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IZoneIdentifier2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IZoneIdentifier2 {
        pub _base: root::IZoneIdentifier,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetHostSecurityManager: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetHostSecurityManager {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED: root::GUID;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPURLZONEMANAGER = *mut root::IInternetZoneManager;
    pub const tagURLZONE_URLZONE_INVALID: root::tagURLZONE = -1;
    pub const tagURLZONE_URLZONE_PREDEFINED_MIN: root::tagURLZONE = 0;
    pub const tagURLZONE_URLZONE_LOCAL_MACHINE: root::tagURLZONE = 0;
    pub const tagURLZONE_URLZONE_INTRANET: root::tagURLZONE = 1;
    pub const tagURLZONE_URLZONE_TRUSTED: root::tagURLZONE = 2;
    pub const tagURLZONE_URLZONE_INTERNET: root::tagURLZONE = 3;
    pub const tagURLZONE_URLZONE_UNTRUSTED: root::tagURLZONE = 4;
    pub const tagURLZONE_URLZONE_PREDEFINED_MAX: root::tagURLZONE = 999;
    pub const tagURLZONE_URLZONE_USER_MIN: root::tagURLZONE = 1000;
    pub const tagURLZONE_URLZONE_USER_MAX: root::tagURLZONE = 10000;
    pub type tagURLZONE = i32;
    pub use self::super::root::tagURLZONE as URLZONE;
    pub const tagURLTEMPLATE_URLTEMPLATE_CUSTOM: root::tagURLTEMPLATE = 0;
    pub const tagURLTEMPLATE_URLTEMPLATE_PREDEFINED_MIN: root::tagURLTEMPLATE = 65536;
    pub const tagURLTEMPLATE_URLTEMPLATE_LOW: root::tagURLTEMPLATE = 65536;
    pub const tagURLTEMPLATE_URLTEMPLATE_MEDLOW: root::tagURLTEMPLATE = 66816;
    pub const tagURLTEMPLATE_URLTEMPLATE_MEDIUM: root::tagURLTEMPLATE = 69632;
    pub const tagURLTEMPLATE_URLTEMPLATE_MEDHIGH: root::tagURLTEMPLATE = 70912;
    pub const tagURLTEMPLATE_URLTEMPLATE_HIGH: root::tagURLTEMPLATE = 73728;
    pub const tagURLTEMPLATE_URLTEMPLATE_PREDEFINED_MAX: root::tagURLTEMPLATE = 131072;
    pub type tagURLTEMPLATE = i32;
    pub use self::super::root::tagURLTEMPLATE as URLTEMPLATE;
    pub const __MIDL_IInternetZoneManager_0001_MAX_ZONE_PATH:
        root::__MIDL_IInternetZoneManager_0001 = 260;
    pub const __MIDL_IInternetZoneManager_0001_MAX_ZONE_DESCRIPTION:
        root::__MIDL_IInternetZoneManager_0001 = 200;
    pub type __MIDL_IInternetZoneManager_0001 = i32;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_CUSTOM_EDIT:
        root::__MIDL_IInternetZoneManager_0002 = 1;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_ADD_SITES:
        root::__MIDL_IInternetZoneManager_0002 = 2;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_REQUIRE_VERIFICATION:
        root::__MIDL_IInternetZoneManager_0002 = 4;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_INCLUDE_PROXY_OVERRIDE:
        root::__MIDL_IInternetZoneManager_0002 = 8;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_INCLUDE_INTRANET_SITES:
        root::__MIDL_IInternetZoneManager_0002 = 16;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_NO_UI:
        root::__MIDL_IInternetZoneManager_0002 = 32;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_SUPPORTS_VERIFICATION:
        root::__MIDL_IInternetZoneManager_0002 = 64;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_UNC_AS_INTRANET:
        root::__MIDL_IInternetZoneManager_0002 = 128;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_DETECT_INTRANET:
        root::__MIDL_IInternetZoneManager_0002 = 256;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_USE_LOCKED_ZONES:
        root::__MIDL_IInternetZoneManager_0002 = 65536;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_VERIFY_TEMPLATE_SETTINGS:
        root::__MIDL_IInternetZoneManager_0002 = 131072;
    pub const __MIDL_IInternetZoneManager_0002_ZAFLAGS_NO_CACHE:
        root::__MIDL_IInternetZoneManager_0002 = 262144;
    pub type __MIDL_IInternetZoneManager_0002 = i32;
    pub use self::super::root::__MIDL_IInternetZoneManager_0002 as ZAFLAGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ZONEATTRIBUTES {
        pub cbSize: root::ULONG,
        pub szDisplayName: [u16; 260usize],
        pub szDescription: [u16; 200usize],
        pub szIconPath: [u16; 260usize],
        pub dwTemplateMinLevel: u32,
        pub dwTemplateRecommended: u32,
        pub dwTemplateCurrentLevel: u32,
        pub dwFlags: u32,
    }
    pub type ZONEATTRIBUTES = root::_ZONEATTRIBUTES;
    pub type LPZONEATTRIBUTES = *mut root::_ZONEATTRIBUTES;
    pub const _URLZONEREG_URLZONEREG_DEFAULT: root::_URLZONEREG = 0;
    pub const _URLZONEREG_URLZONEREG_HKLM: root::_URLZONEREG = 1;
    pub const _URLZONEREG_URLZONEREG_HKCU: root::_URLZONEREG = 2;
    pub type _URLZONEREG = i32;
    pub use self::super::root::_URLZONEREG as URLZONEREG;
    extern "C" {
        pub static IID_IInternetZoneManager: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetZoneManager {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetZoneManagerEx: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetZoneManagerEx {
        pub _base: root::IInternetZoneManager,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IInternetZoneManagerEx2: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IInternetZoneManagerEx2 {
        pub _base: root::IInternetZoneManagerEx,
    }
    extern "C" {
        pub static CLSID_SoftDistExt: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagCODEBASEHOLD {
        pub cbSize: root::ULONG,
        pub szDistUnit: root::LPWSTR,
        pub szCodeBase: root::LPWSTR,
        pub dwVersionMS: u32,
        pub dwVersionLS: u32,
        pub dwStyle: u32,
    }
    pub type CODEBASEHOLD = root::_tagCODEBASEHOLD;
    pub type LPCODEBASEHOLD = *mut root::_tagCODEBASEHOLD;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagSOFTDISTINFO {
        pub cbSize: root::ULONG,
        pub dwFlags: u32,
        pub dwAdState: u32,
        pub szTitle: root::LPWSTR,
        pub szAbstract: root::LPWSTR,
        pub szHREF: root::LPWSTR,
        pub dwInstalledVersionMS: u32,
        pub dwInstalledVersionLS: u32,
        pub dwUpdateVersionMS: u32,
        pub dwUpdateVersionLS: u32,
        pub dwAdvertisedVersionMS: u32,
        pub dwAdvertisedVersionLS: u32,
        pub dwReserved: u32,
    }
    pub type SOFTDISTINFO = root::_tagSOFTDISTINFO;
    pub type LPSOFTDISTINFO = *mut root::_tagSOFTDISTINFO;
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_ISoftDistExt: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ISoftDistExt {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn GetSoftwareUpdateInfo(
            szDistUnit: root::LPCWSTR,
            psdi: root::LPSOFTDISTINFO,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SetSoftwareUpdateAdvertisementState(
            szDistUnit: root::LPCWSTR,
            dwAdState: u32,
            dwAdvertisedVersionMS: u32,
            dwAdvertisedVersionLS: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPCATALOGFILEINFO = *mut root::ICatalogFileInfo;
    extern "C" {
        pub static IID_ICatalogFileInfo: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ICatalogFileInfo {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPDATAFILTER = *mut root::IDataFilter;
    extern "C" {
        pub static IID_IDataFilter: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IDataFilter {
        pub _base: root::IUnknown,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagPROTOCOLFILTERDATA {
        pub cbSize: u32,
        pub pProtocolSink: *mut root::IInternetProtocolSink,
        pub pProtocol: *mut root::IInternetProtocol,
        pub pUnk: *mut root::IUnknown,
        pub dwFilterFlags: u32,
    }
    pub type PROTOCOLFILTERDATA = root::_tagPROTOCOLFILTERDATA;
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPENCODINGFILTERFACTORY = *mut root::IEncodingFilterFactory;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagDATAINFO {
        pub ulTotalSize: root::ULONG,
        pub ulavrPacketSize: root::ULONG,
        pub ulConnectSpeed: root::ULONG,
        pub ulProcessorSpeed: root::ULONG,
    }
    pub type DATAINFO = root::_tagDATAINFO;
    extern "C" {
        pub static IID_IEncodingFilterFactory: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IEncodingFilterFactory {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn IsLoggingEnabledA(pszUrl: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsLoggingEnabledW(pwszUrl: root::LPCWSTR) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagHIT_LOGGING_INFO {
        pub dwStructSize: u32,
        pub lpszLoggedUrlName: *mut i8,
        pub StartTime: root::SYSTEMTIME,
        pub EndTime: root::SYSTEMTIME,
        pub lpszExtendedInfo: *mut i8,
    }
    pub type HIT_LOGGING_INFO = root::_tagHIT_LOGGING_INFO;
    pub type LPHIT_LOGGING_INFO = *mut root::_tagHIT_LOGGING_INFO;
    extern "C" {
        pub fn WriteHitLogging(lpLogginginfo: root::LPHIT_LOGGING_INFO) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CONFIRMSAFETY {
        pub clsid: root::CLSID,
        pub pUnk: *mut root::IUnknown,
        pub dwFlags: u32,
    }
    extern "C" {
        pub static GUID_CUSTOM_CONFIRMOBJECTSAFETY: root::GUID;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPIWRAPPEDPROTOCOL = *mut root::IWrappedProtocol;
    extern "C" {
        pub static IID_IWrappedProtocol: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IWrappedProtocol {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPGETBINDHANDLE = *mut root::IGetBindHandle;
    pub const __MIDL_IGetBindHandle_0001_BINDHANDLETYPES_APPCACHE:
        root::__MIDL_IGetBindHandle_0001 = 0;
    pub const __MIDL_IGetBindHandle_0001_BINDHANDLETYPES_DEPENDENCY:
        root::__MIDL_IGetBindHandle_0001 = 1;
    pub const __MIDL_IGetBindHandle_0001_BINDHANDLETYPES_COUNT: root::__MIDL_IGetBindHandle_0001 =
        2;
    pub type __MIDL_IGetBindHandle_0001 = i32;
    pub use self::super::root::__MIDL_IGetBindHandle_0001 as BINDHANDLETYPES;
    extern "C" {
        pub static IID_IGetBindHandle: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IGetBindHandle {
        pub _base: root::IUnknown,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _tagPROTOCOL_ARGUMENT {
        pub szMethod: root::LPCWSTR,
        pub szTargetUrl: root::LPCWSTR,
    }
    pub type PROTOCOL_ARGUMENT = root::_tagPROTOCOL_ARGUMENT;
    pub type LPPROTOCOL_ARGUMENT = *mut root::_tagPROTOCOL_ARGUMENT;
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    pub type LPBINDCALLBACKREDIRECT = *mut root::IBindCallbackRedirect;
    extern "C" {
        pub static IID_IBindCallbackRedirect: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindCallbackRedirect {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static IID_IBindHttpSecurity: root::IID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IBindHttpSecurity {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn IBinding_GetBindResult_Proxy(
            This: *mut root::IBinding,
            pclsidProtocol: *mut root::CLSID,
            pdwResult: *mut u32,
            pszResult: *mut root::LPOLESTR,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBinding_GetBindResult_Stub(
            This: *mut root::IBinding,
            pclsidProtocol: *mut root::CLSID,
            pdwResult: *mut u32,
            pszResult: *mut root::LPOLESTR,
            dwReserved: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallback_GetBindInfo_Proxy(
            This: *mut root::IBindStatusCallback,
            grfBINDF: *mut u32,
            pbindinfo: *mut root::BINDINFO,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallback_GetBindInfo_Stub(
            This: *mut root::IBindStatusCallback,
            grfBINDF: *mut u32,
            pbindinfo: *mut root::RemBINDINFO,
            pstgmed: *mut root::RemSTGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallback_OnDataAvailable_Proxy(
            This: *mut root::IBindStatusCallback,
            grfBSCF: u32,
            dwSize: u32,
            pformatetc: *mut root::FORMATETC,
            pstgmed: *mut root::STGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallback_OnDataAvailable_Stub(
            This: *mut root::IBindStatusCallback,
            grfBSCF: u32,
            dwSize: u32,
            pformatetc: *mut root::RemFORMATETC,
            pstgmed: *mut root::RemSTGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallbackEx_GetBindInfoEx_Proxy(
            This: *mut root::IBindStatusCallbackEx,
            grfBINDF: *mut u32,
            pbindinfo: *mut root::BINDINFO,
            grfBINDF2: *mut u32,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindStatusCallbackEx_GetBindInfoEx_Stub(
            This: *mut root::IBindStatusCallbackEx,
            grfBINDF: *mut u32,
            pbindinfo: *mut root::RemBINDINFO,
            pstgmed: *mut root::RemSTGMEDIUM,
            grfBINDF2: *mut u32,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IWinInetInfo_QueryOption_Proxy(
            This: *mut root::IWinInetInfo,
            dwOption: u32,
            pBuffer: root::LPVOID,
            pcbBuf: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IWinInetInfo_QueryOption_Stub(
            This: *mut root::IWinInetInfo,
            dwOption: u32,
            pBuffer: *mut u8,
            pcbBuf: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IWinInetHttpInfo_QueryInfo_Proxy(
            This: *mut root::IWinInetHttpInfo,
            dwOption: u32,
            pBuffer: root::LPVOID,
            pcbBuf: *mut u32,
            pdwFlags: *mut u32,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IWinInetHttpInfo_QueryInfo_Stub(
            This: *mut root::IWinInetHttpInfo,
            dwOption: u32,
            pBuffer: *mut u8,
            pcbBuf: *mut u32,
            pdwFlags: *mut u32,
            pdwReserved: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindHost_MonikerBindToStorage_Proxy(
            This: *mut root::IBindHost,
            pMk: *mut root::IMoniker,
            pBC: *mut root::IBindCtx,
            pBSC: *mut root::IBindStatusCallback,
            riid: *const root::IID,
            ppvObj: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindHost_MonikerBindToStorage_Stub(
            This: *mut root::IBindHost,
            pMk: *mut root::IMoniker,
            pBC: *mut root::IBindCtx,
            pBSC: *mut root::IBindStatusCallback,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindHost_MonikerBindToObject_Proxy(
            This: *mut root::IBindHost,
            pMk: *mut root::IMoniker,
            pBC: *mut root::IBindCtx,
            pBSC: *mut root::IBindStatusCallback,
            riid: *const root::IID,
            ppvObj: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IBindHost_MonikerBindToObject_Stub(
            This: *mut root::IBindHost,
            pMk: *mut root::IMoniker,
            pBC: *mut root::IBindCtx,
            pBSC: *mut root::IBindStatusCallback,
            riid: *const root::IID,
            ppvObj: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_NORMAL: root::PIDMSI_STATUS_VALUE = 0;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_NEW: root::PIDMSI_STATUS_VALUE = 1;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_PRELIM: root::PIDMSI_STATUS_VALUE = 2;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_DRAFT: root::PIDMSI_STATUS_VALUE = 3;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_INPROGRESS: root::PIDMSI_STATUS_VALUE = 4;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_EDIT: root::PIDMSI_STATUS_VALUE = 5;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_REVIEW: root::PIDMSI_STATUS_VALUE = 6;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_PROOF: root::PIDMSI_STATUS_VALUE = 7;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_FINAL: root::PIDMSI_STATUS_VALUE = 8;
    pub const PIDMSI_STATUS_VALUE_PIDMSI_STATUS_OTHER: root::PIDMSI_STATUS_VALUE = 32767;
    pub type PIDMSI_STATUS_VALUE = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSERIALIZEDPROPERTYVALUE {
        pub dwType: u32,
        pub rgb: [u8; 1usize],
    }
    pub type SERIALIZEDPROPERTYVALUE = root::tagSERIALIZEDPROPERTYVALUE;
    extern "C" {
        pub fn StgConvertVariantToProperty(
            pvar: *const root::PROPVARIANT,
            CodePage: root::USHORT,
            pprop: *mut root::SERIALIZEDPROPERTYVALUE,
            pcb: *mut root::ULONG,
            pid: root::PROPID,
            fReserved: root::BOOLEAN,
            pcIndirect: *mut root::ULONG,
        ) -> *mut root::SERIALIZEDPROPERTYVALUE;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PMemoryAllocator {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn StgConvertPropertyToVariant(
            pprop: *const root::SERIALIZEDPROPERTYVALUE,
            CodePage: root::USHORT,
            pvar: *mut root::PROPVARIANT,
            pma: *mut root::PMemoryAllocator,
        ) -> root::BOOLEAN;
    }
    extern "C" {
        pub static mut __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn CreateStdProgressIndicator(
            hwndParent: root::HWND,
            pszTitle: root::LPCOLESTR,
            pIbscCaller: *mut root::IBindStatusCallback,
            ppIbsc: *mut *mut root::IBindStatusCallback,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static IID_StdOle: root::IID;
    }
    extern "C" {
        pub fn SysAllocString(psz: *const root::OLECHAR) -> root::BSTR;
    }
    extern "C" {
        pub fn SysReAllocString(pbstr: *mut root::BSTR, psz: *const root::OLECHAR) -> root::INT;
    }
    extern "C" {
        pub fn SysAllocStringLen(strIn: *const root::OLECHAR, ui: root::UINT) -> root::BSTR;
    }
    extern "C" {
        pub fn SysReAllocStringLen(
            pbstr: *mut root::BSTR,
            psz: *const root::OLECHAR,
            len: u32,
        ) -> root::INT;
    }
    extern "C" {
        pub fn SysAddRefString(bstrString: root::BSTR) -> root::HRESULT;
    }
    extern "C" {
        pub fn SysReleaseString(bstrString: root::BSTR);
    }
    extern "C" {
        pub fn SysFreeString(bstrString: root::BSTR);
    }
    extern "C" {
        pub fn SysStringLen(pbstr: root::BSTR) -> root::UINT;
    }
    extern "C" {
        pub fn SysStringByteLen(bstr: root::BSTR) -> root::UINT;
    }
    extern "C" {
        pub fn SysAllocStringByteLen(psz: *const i8, len: root::UINT) -> root::BSTR;
    }
    extern "C" {
        pub fn DosDateTimeToVariantTime(
            wDosDate: root::USHORT,
            wDosTime: root::USHORT,
            pvtime: *mut root::DOUBLE,
        ) -> root::INT;
    }
    extern "C" {
        pub fn VariantTimeToDosDateTime(
            vtime: root::DOUBLE,
            pwDosDate: *mut root::USHORT,
            pwDosTime: *mut root::USHORT,
        ) -> root::INT;
    }
    extern "C" {
        pub fn SystemTimeToVariantTime(
            lpSystemTime: root::LPSYSTEMTIME,
            pvtime: *mut root::DOUBLE,
        ) -> root::INT;
    }
    extern "C" {
        pub fn VariantTimeToSystemTime(
            vtime: root::DOUBLE,
            lpSystemTime: root::LPSYSTEMTIME,
        ) -> root::INT;
    }
    extern "C" {
        pub fn SafeArrayAllocDescriptor(
            cDims: root::UINT,
            ppsaOut: *mut *mut root::SAFEARRAY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayAllocDescriptorEx(
            vt: root::VARTYPE,
            cDims: root::UINT,
            ppsaOut: *mut *mut root::SAFEARRAY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayAllocData(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayCreate(
            vt: root::VARTYPE,
            cDims: root::UINT,
            rgsabound: *mut root::SAFEARRAYBOUND,
        ) -> *mut root::SAFEARRAY;
    }
    extern "C" {
        pub fn SafeArrayCreateEx(
            vt: root::VARTYPE,
            cDims: root::UINT,
            rgsabound: *mut root::SAFEARRAYBOUND,
            pvExtra: root::PVOID,
        ) -> *mut root::SAFEARRAY;
    }
    extern "C" {
        pub fn SafeArrayCopyData(
            psaSource: *mut root::SAFEARRAY,
            psaTarget: *mut root::SAFEARRAY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayReleaseDescriptor(psa: *mut root::SAFEARRAY);
    }
    extern "C" {
        pub fn SafeArrayDestroyDescriptor(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayReleaseData(pData: root::PVOID);
    }
    extern "C" {
        pub fn SafeArrayDestroyData(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayAddRef(
            psa: *mut root::SAFEARRAY,
            ppDataToRelease: *mut root::PVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayDestroy(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayRedim(
            psa: *mut root::SAFEARRAY,
            psaboundNew: *mut root::SAFEARRAYBOUND,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayGetDim(psa: *mut root::SAFEARRAY) -> root::UINT;
    }
    extern "C" {
        pub fn SafeArrayGetElemsize(psa: *mut root::SAFEARRAY) -> root::UINT;
    }
    extern "C" {
        pub fn SafeArrayGetUBound(
            psa: *mut root::SAFEARRAY,
            nDim: root::UINT,
            plUbound: *mut i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayGetLBound(
            psa: *mut root::SAFEARRAY,
            nDim: root::UINT,
            plLbound: *mut i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayLock(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayUnlock(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayAccessData(
            psa: *mut root::SAFEARRAY,
            ppvData: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayUnaccessData(psa: *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayGetElement(
            psa: *mut root::SAFEARRAY,
            rgIndices: *mut i32,
            pv: *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayPutElement(
            psa: *mut root::SAFEARRAY,
            rgIndices: *mut i32,
            pv: *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayCopy(
            psa: *mut root::SAFEARRAY,
            ppsaOut: *mut *mut root::SAFEARRAY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayPtrOfIndex(
            psa: *mut root::SAFEARRAY,
            rgIndices: *mut i32,
            ppvData: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArraySetRecordInfo(
            psa: *mut root::SAFEARRAY,
            prinfo: *mut root::IRecordInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayGetRecordInfo(
            psa: *mut root::SAFEARRAY,
            prinfo: *mut *mut root::IRecordInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArraySetIID(psa: *mut root::SAFEARRAY, guid: *const root::GUID)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayGetIID(psa: *mut root::SAFEARRAY, pguid: *mut root::GUID) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayGetVartype(
            psa: *mut root::SAFEARRAY,
            pvt: *mut root::VARTYPE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SafeArrayCreateVector(
            vt: root::VARTYPE,
            lLbound: i32,
            cElements: root::ULONG,
        ) -> *mut root::SAFEARRAY;
    }
    extern "C" {
        pub fn SafeArrayCreateVectorEx(
            vt: root::VARTYPE,
            lLbound: i32,
            cElements: root::ULONG,
            pvExtra: root::PVOID,
        ) -> *mut root::SAFEARRAY;
    }
    extern "C" {
        pub fn VariantInit(pvarg: *mut root::VARIANTARG);
    }
    extern "C" {
        pub fn VariantClear(pvarg: *mut root::VARIANTARG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VariantCopy(
            pvargDest: *mut root::VARIANTARG,
            pvargSrc: *const root::VARIANTARG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VariantCopyInd(
            pvarDest: *mut root::VARIANT,
            pvargSrc: *const root::VARIANTARG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VariantChangeType(
            pvargDest: *mut root::VARIANTARG,
            pvarSrc: *const root::VARIANTARG,
            wFlags: root::USHORT,
            vt: root::VARTYPE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VariantChangeTypeEx(
            pvargDest: *mut root::VARIANTARG,
            pvarSrc: *const root::VARIANTARG,
            lcid: root::LCID,
            wFlags: root::USHORT,
            vt: root::VARTYPE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VectorFromBstr(bstr: root::BSTR, ppsa: *mut *mut root::SAFEARRAY) -> root::HRESULT;
    }
    extern "C" {
        pub fn BstrFromVector(psa: *mut root::SAFEARRAY, pbstr: *mut root::BSTR) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromI2(sIn: i16, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromI4(lIn: i32, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromI8(i64In: root::LONG64, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromR4(fltIn: root::FLOAT, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromR8(dblIn: root::DOUBLE, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromCy(cyIn: root::CY, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromDate(dateIn: root::DATE, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbOut: *mut u8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pbOut: *mut u8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromBool(boolIn: root::VARIANT_BOOL, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromI1(cIn: i8, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromUI2(uiIn: root::USHORT, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromUI4(ulIn: root::ULONG, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromUI8(ui64In: root::ULONG64, pbOut: *mut u8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI1FromDec(pdecIn: *const root::DECIMAL, pbOut: *mut u8)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromUI1(bIn: u8, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromI4(lIn: i32, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromI8(i64In: root::LONG64, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromR4(fltIn: root::FLOAT, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromR8(dblIn: root::DOUBLE, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromCy(cyIn: root::CY, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromDate(dateIn: root::DATE, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            psOut: *mut i16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            psOut: *mut i16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromBool(boolIn: root::VARIANT_BOOL, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromI1(cIn: i8, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromUI2(uiIn: root::USHORT, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromUI4(ulIn: root::ULONG, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromUI8(ui64In: root::ULONG64, psOut: *mut i16) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI2FromDec(pdecIn: *const root::DECIMAL, psOut: *mut i16)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromUI1(bIn: u8, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromI2(sIn: i16, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromI8(i64In: root::LONG64, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromR4(fltIn: root::FLOAT, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromR8(dblIn: root::DOUBLE, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromCy(cyIn: root::CY, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromDate(dateIn: root::DATE, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            plOut: *mut i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            plOut: *mut i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromBool(boolIn: root::VARIANT_BOOL, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromI1(cIn: i8, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromUI2(uiIn: root::USHORT, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromUI4(ulIn: root::ULONG, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromUI8(ui64In: root::ULONG64, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI4FromDec(pdecIn: *const root::DECIMAL, plOut: *mut i32) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromUI1(bIn: u8, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromI2(sIn: i16, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromR4(fltIn: root::FLOAT, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromR8(dblIn: root::DOUBLE, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromCy(cyIn: root::CY, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromDate(dateIn: root::DATE, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pi64Out: *mut root::LONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pi64Out: *mut root::LONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromBool(
            boolIn: root::VARIANT_BOOL,
            pi64Out: *mut root::LONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromI1(cIn: i8, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromUI2(uiIn: root::USHORT, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromUI4(ulIn: root::ULONG, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromUI8(ui64In: root::ULONG64, pi64Out: *mut root::LONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI8FromDec(
            pdecIn: *const root::DECIMAL,
            pi64Out: *mut root::LONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromUI1(bIn: u8, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromI2(sIn: i16, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromI4(lIn: i32, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromI8(i64In: root::LONG64, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromR8(dblIn: root::DOUBLE, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromCy(cyIn: root::CY, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromDate(dateIn: root::DATE, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pfltOut: *mut root::FLOAT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pfltOut: *mut root::FLOAT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromBool(
            boolIn: root::VARIANT_BOOL,
            pfltOut: *mut root::FLOAT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromI1(cIn: i8, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromUI2(uiIn: root::USHORT, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromUI4(ulIn: root::ULONG, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromUI8(ui64In: root::ULONG64, pfltOut: *mut root::FLOAT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4FromDec(
            pdecIn: *const root::DECIMAL,
            pfltOut: *mut root::FLOAT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromUI1(bIn: u8, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromI2(sIn: i16, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromI4(lIn: i32, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromI8(i64In: root::LONG64, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromR4(fltIn: root::FLOAT, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromCy(cyIn: root::CY, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromDate(dateIn: root::DATE, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pdblOut: *mut root::DOUBLE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pdblOut: *mut root::DOUBLE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromBool(
            boolIn: root::VARIANT_BOOL,
            pdblOut: *mut root::DOUBLE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromI1(cIn: i8, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromUI2(uiIn: root::USHORT, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromUI4(ulIn: root::ULONG, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromUI8(ui64In: root::ULONG64, pdblOut: *mut root::DOUBLE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8FromDec(
            pdecIn: *const root::DECIMAL,
            pdblOut: *mut root::DOUBLE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromUI1(bIn: u8, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromI2(sIn: i16, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromI4(lIn: i32, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromI8(i64In: root::LONG64, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromR4(fltIn: root::FLOAT, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromR8(dblIn: root::DOUBLE, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromCy(cyIn: root::CY, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pdateOut: *mut root::DATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pdateOut: *mut root::DATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromBool(
            boolIn: root::VARIANT_BOOL,
            pdateOut: *mut root::DATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromI1(cIn: i8, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromUI2(uiIn: root::USHORT, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromUI4(ulIn: root::ULONG, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromUI8(ui64In: root::ULONG64, pdateOut: *mut root::DATE) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromDec(
            pdecIn: *const root::DECIMAL,
            pdateOut: *mut root::DATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromUI1(bIn: u8, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromI2(sIn: i16, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromI4(lIn: i32, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromI8(i64In: root::LONG64, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromR4(fltIn: root::FLOAT, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromR8(dblIn: root::DOUBLE, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromDate(dateIn: root::DATE, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pcyOut: *mut root::CY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pcyOut: *mut root::CY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromBool(boolIn: root::VARIANT_BOOL, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromI1(cIn: i8, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromUI2(uiIn: root::USHORT, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromUI4(ulIn: root::ULONG, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromUI8(ui64In: root::ULONG64, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFromDec(pdecIn: *const root::DECIMAL, pcyOut: *mut root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromUI1(
            bVal: u8,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromI2(
            iVal: i16,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromI4(
            lIn: i32,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromI8(
            i64In: root::LONG64,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromR4(
            fltIn: root::FLOAT,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromR8(
            dblIn: root::DOUBLE,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromCy(
            cyIn: root::CY,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromDate(
            dateIn: root::DATE,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromBool(
            boolIn: root::VARIANT_BOOL,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromI1(
            cIn: i8,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromUI2(
            uiIn: root::USHORT,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromUI4(
            ulIn: root::ULONG,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromUI8(
            ui64In: root::ULONG64,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrFromDec(
            pdecIn: *const root::DECIMAL,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromUI1(bIn: u8, pboolOut: *mut root::VARIANT_BOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromI2(sIn: i16, pboolOut: *mut root::VARIANT_BOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromI4(lIn: i32, pboolOut: *mut root::VARIANT_BOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromI8(
            i64In: root::LONG64,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromR4(
            fltIn: root::FLOAT,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromR8(
            dblIn: root::DOUBLE,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromDate(
            dateIn: root::DATE,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromCy(cyIn: root::CY, pboolOut: *mut root::VARIANT_BOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromI1(cIn: i8, pboolOut: *mut root::VARIANT_BOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromUI2(
            uiIn: root::USHORT,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromUI4(
            ulIn: root::ULONG,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromUI8(
            i64In: root::ULONG64,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBoolFromDec(
            pdecIn: *const root::DECIMAL,
            pboolOut: *mut root::VARIANT_BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromUI1(bIn: u8, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromI2(uiIn: i16, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromI4(lIn: i32, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromI8(i64In: root::LONG64, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromR4(fltIn: root::FLOAT, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromR8(dblIn: root::DOUBLE, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromDate(dateIn: root::DATE, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromCy(cyIn: root::CY, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pcOut: *mut i8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pcOut: *mut i8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromBool(boolIn: root::VARIANT_BOOL, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromUI2(uiIn: root::USHORT, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromUI4(ulIn: root::ULONG, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromUI8(i64In: root::ULONG64, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarI1FromDec(pdecIn: *const root::DECIMAL, pcOut: *mut i8) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromUI1(bIn: u8, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromI2(uiIn: i16, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromI4(lIn: i32, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromI8(i64In: root::LONG64, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromR4(fltIn: root::FLOAT, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromR8(dblIn: root::DOUBLE, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromDate(dateIn: root::DATE, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromCy(cyIn: root::CY, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            puiOut: *mut root::USHORT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            puiOut: *mut root::USHORT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromBool(
            boolIn: root::VARIANT_BOOL,
            puiOut: *mut root::USHORT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromI1(cIn: i8, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromUI4(ulIn: root::ULONG, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromUI8(i64In: root::ULONG64, puiOut: *mut root::USHORT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI2FromDec(
            pdecIn: *const root::DECIMAL,
            puiOut: *mut root::USHORT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromUI1(bIn: u8, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromI2(uiIn: i16, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromI4(lIn: i32, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromI8(i64In: root::LONG64, plOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromR4(fltIn: root::FLOAT, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromR8(dblIn: root::DOUBLE, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromDate(dateIn: root::DATE, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromCy(cyIn: root::CY, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pulOut: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pulOut: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromBool(
            boolIn: root::VARIANT_BOOL,
            pulOut: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromI1(cIn: i8, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromUI2(uiIn: root::USHORT, pulOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromUI8(ui64In: root::ULONG64, plOut: *mut root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI4FromDec(
            pdecIn: *const root::DECIMAL,
            pulOut: *mut root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromUI1(bIn: u8, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromI2(sIn: i16, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromI4(lIn: i32, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromI8(ui64In: root::LONG64, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromR4(fltIn: root::FLOAT, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromR8(dblIn: root::DOUBLE, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromCy(cyIn: root::CY, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromDate(dateIn: root::DATE, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pi64Out: *mut root::ULONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pi64Out: *mut root::ULONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromBool(
            boolIn: root::VARIANT_BOOL,
            pi64Out: *mut root::ULONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromI1(cIn: i8, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromUI2(uiIn: root::USHORT, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromUI4(ulIn: root::ULONG, pi64Out: *mut root::ULONG64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUI8FromDec(
            pdecIn: *const root::DECIMAL,
            pi64Out: *mut root::ULONG64,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromUI1(bIn: u8, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromI2(uiIn: i16, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromI4(lIn: i32, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromI8(i64In: root::LONG64, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromR4(fltIn: root::FLOAT, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromR8(dblIn: root::DOUBLE, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromDate(dateIn: root::DATE, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromCy(cyIn: root::CY, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pdecOut: *mut root::DECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromDisp(
            pdispIn: *mut root::IDispatch,
            lcid: root::LCID,
            pdecOut: *mut root::DECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromBool(
            boolIn: root::VARIANT_BOOL,
            pdecOut: *mut root::DECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromI1(cIn: i8, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromUI2(uiIn: root::USHORT, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromUI4(ulIn: root::ULONG, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFromUI8(ui64In: root::ULONG64, pdecOut: *mut root::DECIMAL) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NUMPARSE {
        pub cDig: root::INT,
        pub dwInFlags: root::ULONG,
        pub dwOutFlags: root::ULONG,
        pub cchUsed: root::INT,
        pub nBaseShift: root::INT,
        pub nPwr10: root::INT,
    }
    extern "C" {
        pub fn VarParseNumFromStr(
            strIn: root::LPCOLESTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pnumprs: *mut root::NUMPARSE,
            rgbDig: *mut u8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarNumFromParseNum(
            pnumprs: *mut root::NUMPARSE,
            rgbDig: *mut u8,
            dwVtBits: root::ULONG,
            pvar: *mut root::VARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarAdd(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarAnd(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCat(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDiv(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarEqv(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarIdiv(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarImp(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarMod(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarMul(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarOr(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarPow(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarSub(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarXor(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarAbs(pvarIn: root::LPVARIANT, pvarResult: root::LPVARIANT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFix(pvarIn: root::LPVARIANT, pvarResult: root::LPVARIANT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarInt(pvarIn: root::LPVARIANT, pvarResult: root::LPVARIANT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarNeg(pvarIn: root::LPVARIANT, pvarResult: root::LPVARIANT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarNot(pvarIn: root::LPVARIANT, pvarResult: root::LPVARIANT) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarRound(
            pvarIn: root::LPVARIANT,
            cDecimals: i32,
            pvarResult: root::LPVARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCmp(
            pvarLeft: root::LPVARIANT,
            pvarRight: root::LPVARIANT,
            lcid: root::LCID,
            dwFlags: root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecAdd(
            pdecLeft: root::LPDECIMAL,
            pdecRight: root::LPDECIMAL,
            pdecResult: root::LPDECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecDiv(
            pdecLeft: root::LPDECIMAL,
            pdecRight: root::LPDECIMAL,
            pdecResult: root::LPDECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecMul(
            pdecLeft: root::LPDECIMAL,
            pdecRight: root::LPDECIMAL,
            pdecResult: root::LPDECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecSub(
            pdecLeft: root::LPDECIMAL,
            pdecRight: root::LPDECIMAL,
            pdecResult: root::LPDECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecAbs(pdecIn: root::LPDECIMAL, pdecResult: root::LPDECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecFix(pdecIn: root::LPDECIMAL, pdecResult: root::LPDECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecInt(pdecIn: root::LPDECIMAL, pdecResult: root::LPDECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecNeg(pdecIn: root::LPDECIMAL, pdecResult: root::LPDECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecRound(
            pdecIn: root::LPDECIMAL,
            cDecimals: i32,
            pdecResult: root::LPDECIMAL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecCmp(pdecLeft: root::LPDECIMAL, pdecRight: root::LPDECIMAL) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDecCmpR8(pdecLeft: root::LPDECIMAL, dblRight: f64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyAdd(
            cyLeft: root::CY,
            cyRight: root::CY,
            pcyResult: root::LPCY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyMul(
            cyLeft: root::CY,
            cyRight: root::CY,
            pcyResult: root::LPCY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyMulI4(
            cyLeft: root::CY,
            lRight: i32,
            pcyResult: root::LPCY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyMulI8(
            cyLeft: root::CY,
            lRight: root::LONG64,
            pcyResult: root::LPCY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCySub(
            cyLeft: root::CY,
            cyRight: root::CY,
            pcyResult: root::LPCY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyAbs(cyIn: root::CY, pcyResult: root::LPCY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyFix(cyIn: root::CY, pcyResult: root::LPCY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyInt(cyIn: root::CY, pcyResult: root::LPCY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyNeg(cyIn: root::CY, pcyResult: root::LPCY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyRound(
            cyIn: root::CY,
            cDecimals: i32,
            pcyResult: root::LPCY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyCmp(cyLeft: root::CY, cyRight: root::CY) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarCyCmpR8(cyLeft: root::CY, dblRight: f64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrCat(
            bstrLeft: root::BSTR,
            bstrRight: root::BSTR,
            pbstrResult: root::LPBSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarBstrCmp(
            bstrLeft: root::BSTR,
            bstrRight: root::BSTR,
            lcid: root::LCID,
            dwFlags: root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8Pow(dblLeft: f64, dblRight: f64, pdblResult: *mut f64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR4CmpR8(fltLeft: f32, dblRight: f64) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarR8Round(
            dblIn: f64,
            cDecimals: i32,
            pdblResult: *mut f64,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct UDATE {
        pub st: root::SYSTEMTIME,
        pub wDayOfYear: root::USHORT,
    }
    extern "C" {
        pub fn VarDateFromUdate(
            pudateIn: *mut root::UDATE,
            dwFlags: root::ULONG,
            pdateOut: *mut root::DATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarDateFromUdateEx(
            pudateIn: *mut root::UDATE,
            lcid: root::LCID,
            dwFlags: root::ULONG,
            pdateOut: *mut root::DATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarUdateFromDate(
            dateIn: root::DATE,
            dwFlags: root::ULONG,
            pudateOut: *mut root::UDATE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetAltMonthNames(lcid: root::LCID, prgp: *mut *mut root::LPOLESTR) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFormat(
            pvarIn: root::LPVARIANT,
            pstrFormat: root::LPOLESTR,
            iFirstDay: i32,
            iFirstWeek: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFormatDateTime(
            pvarIn: root::LPVARIANT,
            iNamedFormat: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFormatNumber(
            pvarIn: root::LPVARIANT,
            iNumDig: i32,
            iIncLead: i32,
            iUseParens: i32,
            iGroup: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFormatPercent(
            pvarIn: root::LPVARIANT,
            iNumDig: i32,
            iIncLead: i32,
            iUseParens: i32,
            iGroup: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFormatCurrency(
            pvarIn: root::LPVARIANT,
            iNumDig: i32,
            iIncLead: i32,
            iUseParens: i32,
            iGroup: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarWeekdayName(
            iWeekday: i32,
            fAbbrev: i32,
            iFirstDay: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarMonthName(
            iMonth: i32,
            fAbbrev: i32,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarFormatFromTokens(
            pvarIn: root::LPVARIANT,
            pstrFormat: root::LPOLESTR,
            pbTokCur: root::LPBYTE,
            dwFlags: root::ULONG,
            pbstrOut: *mut root::BSTR,
            lcid: root::LCID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn VarTokenizeFormatString(
            pstrFormat: root::LPOLESTR,
            rgbTok: root::LPBYTE,
            cbTok: i32,
            iFirstDay: i32,
            iFirstWeek: i32,
            lcid: root::LCID,
            pcbActual: *mut i32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn LHashValOfNameSysA(
            syskind: root::SYSKIND,
            lcid: root::LCID,
            szName: *const i8,
        ) -> root::ULONG;
    }
    extern "C" {
        pub fn LHashValOfNameSys(
            syskind: root::SYSKIND,
            lcid: root::LCID,
            szName: *const root::OLECHAR,
        ) -> root::ULONG;
    }
    extern "C" {
        pub fn LoadTypeLib(
            szFile: root::LPCOLESTR,
            pptlib: *mut *mut root::ITypeLib,
        ) -> root::HRESULT;
    }
    pub const tagREGKIND_REGKIND_DEFAULT: root::tagREGKIND = 0;
    pub const tagREGKIND_REGKIND_REGISTER: root::tagREGKIND = 1;
    pub const tagREGKIND_REGKIND_NONE: root::tagREGKIND = 2;
    pub type tagREGKIND = i32;
    pub use self::super::root::tagREGKIND as REGKIND;
    extern "C" {
        pub fn LoadTypeLibEx(
            szFile: root::LPCOLESTR,
            regkind: root::REGKIND,
            pptlib: *mut *mut root::ITypeLib,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn LoadRegTypeLib(
            rguid: *const root::GUID,
            wVerMajor: u16,
            wVerMinor: u16,
            lcid: root::LCID,
            pptlib: *mut *mut root::ITypeLib,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn QueryPathOfRegTypeLib(
            guid: *const root::GUID,
            wMaj: root::USHORT,
            wMin: root::USHORT,
            lcid: root::LCID,
            lpbstrPathName: root::LPBSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterTypeLib(
            ptlib: *mut root::ITypeLib,
            szFullPath: root::LPCOLESTR,
            szHelpDir: root::LPCOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UnRegisterTypeLib(
            libID: *const root::GUID,
            wVerMajor: u16,
            wVerMinor: u16,
            lcid: root::LCID,
            syskind: root::SYSKIND,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterTypeLibForUser(
            ptlib: *mut root::ITypeLib,
            szFullPath: *mut root::OLECHAR,
            szHelpDir: *mut root::OLECHAR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UnRegisterTypeLibForUser(
            libID: *const root::GUID,
            wMajorVerNum: u16,
            wMinorVerNum: u16,
            lcid: root::LCID,
            syskind: root::SYSKIND,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateTypeLib(
            syskind: root::SYSKIND,
            szFile: root::LPCOLESTR,
            ppctlib: *mut *mut root::ICreateTypeLib,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateTypeLib2(
            syskind: root::SYSKIND,
            szFile: root::LPCOLESTR,
            ppctlib: *mut *mut root::ICreateTypeLib2,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPARAMDATA {
        pub szName: *mut root::OLECHAR,
        pub vt: root::VARTYPE,
    }
    pub type PARAMDATA = root::tagPARAMDATA;
    pub type LPPARAMDATA = *mut root::tagPARAMDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagMETHODDATA {
        pub szName: *mut root::OLECHAR,
        pub ppdata: *mut root::PARAMDATA,
        pub dispid: root::DISPID,
        pub iMeth: root::UINT,
        pub cc: root::CALLCONV,
        pub cArgs: root::UINT,
        pub wFlags: u16,
        pub vtReturn: root::VARTYPE,
    }
    pub type METHODDATA = root::tagMETHODDATA;
    pub type LPMETHODDATA = *mut root::tagMETHODDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagINTERFACEDATA {
        pub pmethdata: *mut root::METHODDATA,
        pub cMembers: root::UINT,
    }
    pub type INTERFACEDATA = root::tagINTERFACEDATA;
    pub type LPINTERFACEDATA = *mut root::tagINTERFACEDATA;
    extern "C" {
        pub fn DispGetParam(
            pdispparams: *mut root::DISPPARAMS,
            position: root::UINT,
            vtTarg: root::VARTYPE,
            pvarResult: *mut root::VARIANT,
            puArgErr: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DispGetIDsOfNames(
            ptinfo: *mut root::ITypeInfo,
            rgszNames: *mut root::LPOLESTR,
            cNames: root::UINT,
            rgdispid: *mut root::DISPID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DispInvoke(
            _this: *mut ::std::os::raw::c_void,
            ptinfo: *mut root::ITypeInfo,
            dispidMember: root::DISPID,
            wFlags: u16,
            pparams: *mut root::DISPPARAMS,
            pvarResult: *mut root::VARIANT,
            pexcepinfo: *mut root::EXCEPINFO,
            puArgErr: *mut root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateDispTypeInfo(
            pidata: *mut root::INTERFACEDATA,
            lcid: root::LCID,
            pptinfo: *mut *mut root::ITypeInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateStdDispatch(
            punkOuter: *mut root::IUnknown,
            pvThis: *mut ::std::os::raw::c_void,
            ptinfo: *mut root::ITypeInfo,
            ppunkStdDisp: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn DispCallFunc(
            pvInstance: *mut ::std::os::raw::c_void,
            oVft: u64,
            cc: root::CALLCONV,
            vtReturn: root::VARTYPE,
            cActuals: root::UINT,
            prgvt: *mut root::VARTYPE,
            prgpvarg: *mut *mut root::VARIANTARG,
            pvargResult: *mut root::VARIANT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterActiveObject(
            punk: *mut root::IUnknown,
            rclsid: *const root::IID,
            dwFlags: u32,
            pdwRegister: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RevokeActiveObject(
            dwRegister: u32,
            pvReserved: *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetActiveObject(
            rclsid: *const root::IID,
            pvReserved: *mut ::std::os::raw::c_void,
            ppunk: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SetErrorInfo(
            dwReserved: root::ULONG,
            perrinfo: *mut root::IErrorInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetErrorInfo(
            dwReserved: root::ULONG,
            pperrinfo: *mut *mut root::IErrorInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn CreateErrorInfo(pperrinfo: *mut *mut root::ICreateErrorInfo) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetRecordInfoFromTypeInfo(
            pTypeInfo: *mut root::ITypeInfo,
            ppRecInfo: *mut *mut root::IRecordInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetRecordInfoFromGuids(
            rGuidTypeLib: *const root::GUID,
            uVerMajor: root::ULONG,
            uVerMinor: root::ULONG,
            lcid: root::LCID,
            rGuidTypeInfo: *const root::GUID,
            ppRecInfo: *mut *mut root::IRecordInfo,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OaBuildVersion() -> root::ULONG;
    }
    extern "C" {
        pub fn ClearCustData(pCustData: root::LPCUSTDATA);
    }
    extern "C" {
        pub fn OaEnablePerUserTLibRegistration();
    }
    extern "C" {
        pub fn OleBuildVersion() -> u32;
    }
    extern "C" {
        pub fn WriteFmtUserTypeStg(
            pstg: root::LPSTORAGE,
            cf: root::CLIPFORMAT,
            lpszUserType: root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ReadFmtUserTypeStg(
            pstg: root::LPSTORAGE,
            pcf: *mut root::CLIPFORMAT,
            lplpszUserType: *mut root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleInitialize(pvReserved: root::LPVOID) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleUninitialize();
    }
    extern "C" {
        pub fn OleQueryLinkFromData(pSrcDataObject: root::LPDATAOBJECT) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleQueryCreateFromData(pSrcDataObject: root::LPDATAOBJECT) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreate(
            rclsid: *const root::IID,
            riid: *const root::IID,
            renderopt: u32,
            pFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateEx(
            rclsid: *const root::IID,
            riid: *const root::IID,
            dwFlags: u32,
            renderopt: u32,
            cFormats: root::ULONG,
            rgAdvf: *mut u32,
            rgFormatEtc: root::LPFORMATETC,
            lpAdviseSink: *mut root::IAdviseSink,
            rgdwConnection: *mut u32,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateFromData(
            pSrcDataObj: root::LPDATAOBJECT,
            riid: *const root::IID,
            renderopt: u32,
            pFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateFromDataEx(
            pSrcDataObj: root::LPDATAOBJECT,
            riid: *const root::IID,
            dwFlags: u32,
            renderopt: u32,
            cFormats: root::ULONG,
            rgAdvf: *mut u32,
            rgFormatEtc: root::LPFORMATETC,
            lpAdviseSink: *mut root::IAdviseSink,
            rgdwConnection: *mut u32,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateLinkFromData(
            pSrcDataObj: root::LPDATAOBJECT,
            riid: *const root::IID,
            renderopt: u32,
            pFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateLinkFromDataEx(
            pSrcDataObj: root::LPDATAOBJECT,
            riid: *const root::IID,
            dwFlags: u32,
            renderopt: u32,
            cFormats: root::ULONG,
            rgAdvf: *mut u32,
            rgFormatEtc: root::LPFORMATETC,
            lpAdviseSink: *mut root::IAdviseSink,
            rgdwConnection: *mut u32,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateStaticFromData(
            pSrcDataObj: root::LPDATAOBJECT,
            iid: *const root::IID,
            renderopt: u32,
            pFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateLink(
            pmkLinkSrc: root::LPMONIKER,
            riid: *const root::IID,
            renderopt: u32,
            lpFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateLinkEx(
            pmkLinkSrc: root::LPMONIKER,
            riid: *const root::IID,
            dwFlags: u32,
            renderopt: u32,
            cFormats: root::ULONG,
            rgAdvf: *mut u32,
            rgFormatEtc: root::LPFORMATETC,
            lpAdviseSink: *mut root::IAdviseSink,
            rgdwConnection: *mut u32,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateLinkToFile(
            lpszFileName: root::LPCOLESTR,
            riid: *const root::IID,
            renderopt: u32,
            lpFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateLinkToFileEx(
            lpszFileName: root::LPCOLESTR,
            riid: *const root::IID,
            dwFlags: u32,
            renderopt: u32,
            cFormats: root::ULONG,
            rgAdvf: *mut u32,
            rgFormatEtc: root::LPFORMATETC,
            lpAdviseSink: *mut root::IAdviseSink,
            rgdwConnection: *mut u32,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateFromFile(
            rclsid: *const root::IID,
            lpszFileName: root::LPCOLESTR,
            riid: *const root::IID,
            renderopt: u32,
            lpFormatEtc: root::LPFORMATETC,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateFromFileEx(
            rclsid: *const root::IID,
            lpszFileName: root::LPCOLESTR,
            riid: *const root::IID,
            dwFlags: u32,
            renderopt: u32,
            cFormats: root::ULONG,
            rgAdvf: *mut u32,
            rgFormatEtc: root::LPFORMATETC,
            lpAdviseSink: *mut root::IAdviseSink,
            rgdwConnection: *mut u32,
            pClientSite: root::LPOLECLIENTSITE,
            pStg: root::LPSTORAGE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleLoad(
            pStg: root::LPSTORAGE,
            riid: *const root::IID,
            pClientSite: root::LPOLECLIENTSITE,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleSave(
            pPS: root::LPPERSISTSTORAGE,
            pStg: root::LPSTORAGE,
            fSameAsLoad: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleLoadFromStream(
            pStm: root::LPSTREAM,
            iidInterface: *const root::IID,
            ppvObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleSaveToStream(pPStm: root::LPPERSISTSTREAM, pStm: root::LPSTREAM)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn OleSetContainedObject(
            pUnknown: root::LPUNKNOWN,
            fContained: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleNoteObjectVisible(
            pUnknown: root::LPUNKNOWN,
            fVisible: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn RegisterDragDrop(hwnd: root::HWND, pDropTarget: root::LPDROPTARGET)
            -> root::HRESULT;
    }
    extern "C" {
        pub fn RevokeDragDrop(hwnd: root::HWND) -> root::HRESULT;
    }
    extern "C" {
        pub fn DoDragDrop(
            pDataObj: root::LPDATAOBJECT,
            pDropSource: root::LPDROPSOURCE,
            dwOKEffects: u32,
            pdwEffect: root::LPDWORD,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleSetClipboard(pDataObj: root::LPDATAOBJECT) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleGetClipboard(ppDataObj: *mut root::LPDATAOBJECT) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleGetClipboardWithEnterpriseInfo(
            dataObject: *mut *mut root::IDataObject,
            dataEnterpriseId: *mut *mut u16,
            sourceDescription: *mut *mut u16,
            targetDescription: *mut *mut u16,
            dataDescription: *mut *mut u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleFlushClipboard() -> root::HRESULT;
    }
    extern "C" {
        pub fn OleIsCurrentClipboard(pDataObj: root::LPDATAOBJECT) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateMenuDescriptor(
            hmenuCombined: root::HMENU,
            lpMenuWidths: root::LPOLEMENUGROUPWIDTHS,
        ) -> root::HOLEMENU;
    }
    extern "C" {
        pub fn OleSetMenuDescriptor(
            holemenu: root::HOLEMENU,
            hwndFrame: root::HWND,
            hwndActiveObject: root::HWND,
            lpFrame: root::LPOLEINPLACEFRAME,
            lpActiveObj: root::LPOLEINPLACEACTIVEOBJECT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleDestroyMenuDescriptor(holemenu: root::HOLEMENU) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleTranslateAccelerator(
            lpFrame: root::LPOLEINPLACEFRAME,
            lpFrameInfo: root::LPOLEINPLACEFRAMEINFO,
            lpmsg: root::LPMSG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleDuplicateData(
            hSrc: root::HANDLE,
            cfFormat: root::CLIPFORMAT,
            uiFlags: root::UINT,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn OleDraw(
            pUnknown: root::LPUNKNOWN,
            dwAspect: u32,
            hdcDraw: root::HDC,
            lprcBounds: root::LPCRECT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleRun(pUnknown: root::LPUNKNOWN) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleIsRunning(pObject: root::LPOLEOBJECT) -> root::BOOL;
    }
    extern "C" {
        pub fn OleLockRunning(
            pUnknown: root::LPUNKNOWN,
            fLock: root::BOOL,
            fLastUnlockCloses: root::BOOL,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn ReleaseStgMedium(arg1: root::LPSTGMEDIUM);
    }
    extern "C" {
        pub fn CreateOleAdviseHolder(ppOAHolder: *mut root::LPOLEADVISEHOLDER) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateDefaultHandler(
            clsid: *const root::IID,
            pUnkOuter: root::LPUNKNOWN,
            riid: *const root::IID,
            lplpObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleCreateEmbeddingHelper(
            clsid: *const root::IID,
            pUnkOuter: root::LPUNKNOWN,
            flags: u32,
            pCF: root::LPCLASSFACTORY,
            riid: *const root::IID,
            lplpObj: *mut root::LPVOID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IsAccelerator(
            hAccel: root::HACCEL,
            cAccelEntries: i32,
            lpMsg: root::LPMSG,
            lpwCmd: *mut u16,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn OleGetIconOfFile(
            lpszPath: root::LPOLESTR,
            fUseFileAsLabel: root::BOOL,
        ) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn OleGetIconOfClass(
            rclsid: *const root::IID,
            lpszLabel: root::LPOLESTR,
            fUseTypeAsLabel: root::BOOL,
        ) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn OleMetafilePictFromIconAndLabel(
            hIcon: root::HICON,
            lpszLabel: root::LPOLESTR,
            lpszSourceFile: root::LPOLESTR,
            iIconIndex: root::UINT,
        ) -> root::HGLOBAL;
    }
    extern "C" {
        pub fn OleRegGetUserType(
            clsid: *const root::IID,
            dwFormOfType: u32,
            pszUserType: *mut root::LPOLESTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleRegGetMiscStatus(
            clsid: *const root::IID,
            dwAspect: u32,
            pdwStatus: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleRegEnumFormatEtc(
            clsid: *const root::IID,
            dwDirection: u32,
            ppenum: *mut root::LPENUMFORMATETC,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleRegEnumVerbs(
            clsid: *const root::IID,
            ppenum: *mut root::LPENUMOLEVERB,
        ) -> root::HRESULT;
    }
    pub type LPOLESTREAM = *mut root::_OLESTREAM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OLESTREAMVTBL {
        pub Get: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: root::LPOLESTREAM,
                arg2: *mut ::std::os::raw::c_void,
                arg3: u32,
            ) -> u32,
        >,
        pub Put: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: root::LPOLESTREAM,
                arg2: *const ::std::os::raw::c_void,
                arg3: u32,
            ) -> u32,
        >,
    }
    pub type OLESTREAMVTBL = root::_OLESTREAMVTBL;
    pub type LPOLESTREAMVTBL = *mut root::OLESTREAMVTBL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OLESTREAM {
        pub lpstbl: root::LPOLESTREAMVTBL,
    }
    pub type OLESTREAM = root::_OLESTREAM;
    extern "C" {
        pub fn OleConvertOLESTREAMToIStorage(
            lpolestream: root::LPOLESTREAM,
            pstg: root::LPSTORAGE,
            ptd: *const root::DVTARGETDEVICE,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleConvertIStorageToOLESTREAM(
            pstg: root::LPSTORAGE,
            lpolestream: root::LPOLESTREAM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleDoAutoConvert(pStg: root::LPSTORAGE, pClsidNew: root::LPCLSID) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleGetAutoConvert(
            clsidOld: *const root::IID,
            pClsidNew: root::LPCLSID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleSetAutoConvert(
            clsidOld: *const root::IID,
            clsidNew: *const root::IID,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SetConvertStg(pStg: root::LPSTORAGE, fConvert: root::BOOL) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleConvertIStorageToOLESTREAMEx(
            pstg: root::LPSTORAGE,
            cfFormat: root::CLIPFORMAT,
            lWidth: i32,
            lHeight: i32,
            dwSize: u32,
            pmedium: root::LPSTGMEDIUM,
            polestm: root::LPOLESTREAM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn OleConvertOLESTREAMToIStorageEx(
            polestm: root::LPOLESTREAM,
            pstg: root::LPSTORAGE,
            pcfFormat: *mut root::CLIPFORMAT,
            plwWidth: *mut i32,
            plHeight: *mut i32,
            pdwSize: *mut u32,
            pmedium: root::LPSTGMEDIUM,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub static IID_IPrintDialogCallback: root::GUID;
    }
    extern "C" {
        pub static IID_IPrintDialogServices: root::GUID;
    }
    pub type LPOFNHOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOFN_NT4A {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub lpstrFilter: *const i8,
        pub lpstrCustomFilter: *mut i8,
        pub nMaxCustFilter: u32,
        pub nFilterIndex: u32,
        pub lpstrFile: *mut i8,
        pub nMaxFile: u32,
        pub lpstrFileTitle: *mut i8,
        pub nMaxFileTitle: u32,
        pub lpstrInitialDir: *const i8,
        pub lpstrTitle: *const i8,
        pub Flags: u32,
        pub nFileOffset: u16,
        pub nFileExtension: u16,
        pub lpstrDefExt: *const i8,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPOFNHOOKPROC,
        pub lpTemplateName: *const i8,
    }
    pub type OPENFILENAME_NT4A = root::tagOFN_NT4A;
    pub type LPOPENFILENAME_NT4A = *mut root::tagOFN_NT4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOFN_NT4W {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub lpstrFilter: root::LPCWSTR,
        pub lpstrCustomFilter: root::LPWSTR,
        pub nMaxCustFilter: u32,
        pub nFilterIndex: u32,
        pub lpstrFile: root::LPWSTR,
        pub nMaxFile: u32,
        pub lpstrFileTitle: root::LPWSTR,
        pub nMaxFileTitle: u32,
        pub lpstrInitialDir: root::LPCWSTR,
        pub lpstrTitle: root::LPCWSTR,
        pub Flags: u32,
        pub nFileOffset: u16,
        pub nFileExtension: u16,
        pub lpstrDefExt: root::LPCWSTR,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPOFNHOOKPROC,
        pub lpTemplateName: root::LPCWSTR,
    }
    pub type OPENFILENAME_NT4W = root::tagOFN_NT4W;
    pub type LPOPENFILENAME_NT4W = *mut root::tagOFN_NT4W;
    pub type OPENFILENAME_NT4 = root::OPENFILENAME_NT4A;
    pub type LPOPENFILENAME_NT4 = root::LPOPENFILENAME_NT4A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOFNA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub lpstrFilter: *const i8,
        pub lpstrCustomFilter: *mut i8,
        pub nMaxCustFilter: u32,
        pub nFilterIndex: u32,
        pub lpstrFile: *mut i8,
        pub nMaxFile: u32,
        pub lpstrFileTitle: *mut i8,
        pub nMaxFileTitle: u32,
        pub lpstrInitialDir: *const i8,
        pub lpstrTitle: *const i8,
        pub Flags: u32,
        pub nFileOffset: u16,
        pub nFileExtension: u16,
        pub lpstrDefExt: *const i8,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPOFNHOOKPROC,
        pub lpTemplateName: *const i8,
        pub pvReserved: *mut ::std::os::raw::c_void,
        pub dwReserved: u32,
        pub FlagsEx: u32,
    }
    pub type OPENFILENAMEA = root::tagOFNA;
    pub type LPOPENFILENAMEA = *mut root::tagOFNA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagOFNW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub lpstrFilter: root::LPCWSTR,
        pub lpstrCustomFilter: root::LPWSTR,
        pub nMaxCustFilter: u32,
        pub nFilterIndex: u32,
        pub lpstrFile: root::LPWSTR,
        pub nMaxFile: u32,
        pub lpstrFileTitle: root::LPWSTR,
        pub nMaxFileTitle: u32,
        pub lpstrInitialDir: root::LPCWSTR,
        pub lpstrTitle: root::LPCWSTR,
        pub Flags: u32,
        pub nFileOffset: u16,
        pub nFileExtension: u16,
        pub lpstrDefExt: root::LPCWSTR,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPOFNHOOKPROC,
        pub lpTemplateName: root::LPCWSTR,
        pub pvReserved: *mut ::std::os::raw::c_void,
        pub dwReserved: u32,
        pub FlagsEx: u32,
    }
    pub type OPENFILENAMEW = root::tagOFNW;
    pub type LPOPENFILENAMEW = *mut root::tagOFNW;
    pub type OPENFILENAME = root::OPENFILENAMEA;
    pub type LPOPENFILENAME = root::LPOPENFILENAMEA;
    extern "C" {
        pub fn GetOpenFileNameA(arg1: root::LPOPENFILENAMEA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetOpenFileNameW(arg1: root::LPOPENFILENAMEW) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSaveFileNameA(arg1: root::LPOPENFILENAMEA) -> root::BOOL;
    }
    extern "C" {
        pub fn GetSaveFileNameW(arg1: root::LPOPENFILENAMEW) -> root::BOOL;
    }
    extern "C" {
        pub fn GetFileTitleA(
            arg1: *const i8,
            Buf: *mut i8,
            cchSize: u16,
        ) -> i16;
    }
    extern "C" {
        pub fn GetFileTitleW(
            arg1: root::LPCWSTR,
            Buf: root::LPWSTR,
            cchSize: u16,
        ) -> i16;
    }
    pub type LPCCHOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OFNOTIFYA {
        pub hdr: root::NMHDR,
        pub lpOFN: root::LPOPENFILENAMEA,
        pub pszFile: *mut i8,
    }
    pub type OFNOTIFYA = root::_OFNOTIFYA;
    pub type LPOFNOTIFYA = *mut root::_OFNOTIFYA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OFNOTIFYW {
        pub hdr: root::NMHDR,
        pub lpOFN: root::LPOPENFILENAMEW,
        pub pszFile: root::LPWSTR,
    }
    pub type OFNOTIFYW = root::_OFNOTIFYW;
    pub type LPOFNOTIFYW = *mut root::_OFNOTIFYW;
    pub type OFNOTIFY = root::OFNOTIFYA;
    pub type LPOFNOTIFY = root::LPOFNOTIFYA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OFNOTIFYEXA {
        pub hdr: root::NMHDR,
        pub lpOFN: root::LPOPENFILENAMEA,
        pub psf: root::LPVOID,
        pub pidl: root::LPVOID,
    }
    pub type OFNOTIFYEXA = root::_OFNOTIFYEXA;
    pub type LPOFNOTIFYEXA = *mut root::_OFNOTIFYEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _OFNOTIFYEXW {
        pub hdr: root::NMHDR,
        pub lpOFN: root::LPOPENFILENAMEW,
        pub psf: root::LPVOID,
        pub pidl: root::LPVOID,
    }
    pub type OFNOTIFYEXW = root::_OFNOTIFYEXW;
    pub type LPOFNOTIFYEXW = *mut root::_OFNOTIFYEXW;
    pub type OFNOTIFYEX = root::OFNOTIFYEXA;
    pub type LPOFNOTIFYEX = root::LPOFNOTIFYEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCHOOSECOLORA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HWND,
        pub rgbResult: root::COLORREF,
        pub lpCustColors: *mut root::COLORREF,
        pub Flags: u32,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPCCHOOKPROC,
        pub lpTemplateName: *const i8,
    }
    pub type CHOOSECOLORA = root::tagCHOOSECOLORA;
    pub type LPCHOOSECOLORA = *mut root::tagCHOOSECOLORA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCHOOSECOLORW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HWND,
        pub rgbResult: root::COLORREF,
        pub lpCustColors: *mut root::COLORREF,
        pub Flags: u32,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPCCHOOKPROC,
        pub lpTemplateName: root::LPCWSTR,
    }
    pub type CHOOSECOLORW = root::tagCHOOSECOLORW;
    pub type LPCHOOSECOLORW = *mut root::tagCHOOSECOLORW;
    pub type CHOOSECOLOR = root::CHOOSECOLORA;
    pub type LPCHOOSECOLOR = root::LPCHOOSECOLORA;
    extern "C" {
        pub fn ChooseColorA(arg1: root::LPCHOOSECOLORA) -> root::BOOL;
    }
    extern "C" {
        pub fn ChooseColorW(arg1: root::LPCHOOSECOLORW) -> root::BOOL;
    }
    pub type LPFRHOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagFINDREPLACEA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub Flags: u32,
        pub lpstrFindWhat: *mut i8,
        pub lpstrReplaceWith: *mut i8,
        pub wFindWhatLen: u16,
        pub wReplaceWithLen: u16,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPFRHOOKPROC,
        pub lpTemplateName: *const i8,
    }
    pub type FINDREPLACEA = root::tagFINDREPLACEA;
    pub type LPFINDREPLACEA = *mut root::tagFINDREPLACEA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagFINDREPLACEW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hInstance: root::HINSTANCE,
        pub Flags: u32,
        pub lpstrFindWhat: root::LPWSTR,
        pub lpstrReplaceWith: root::LPWSTR,
        pub wFindWhatLen: u16,
        pub wReplaceWithLen: u16,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPFRHOOKPROC,
        pub lpTemplateName: root::LPCWSTR,
    }
    pub type FINDREPLACEW = root::tagFINDREPLACEW;
    pub type LPFINDREPLACEW = *mut root::tagFINDREPLACEW;
    pub type FINDREPLACE = root::FINDREPLACEA;
    pub type LPFINDREPLACE = root::LPFINDREPLACEA;
    extern "C" {
        pub fn FindTextA(arg1: root::LPFINDREPLACEA) -> root::HWND;
    }
    extern "C" {
        pub fn FindTextW(arg1: root::LPFINDREPLACEW) -> root::HWND;
    }
    extern "C" {
        pub fn ReplaceTextA(arg1: root::LPFINDREPLACEA) -> root::HWND;
    }
    extern "C" {
        pub fn ReplaceTextW(arg1: root::LPFINDREPLACEW) -> root::HWND;
    }
    pub type LPCFHOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCHOOSEFONTA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDC: root::HDC,
        pub lpLogFont: root::LPLOGFONTA,
        pub iPointSize: root::INT,
        pub Flags: u32,
        pub rgbColors: root::COLORREF,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPCFHOOKPROC,
        pub lpTemplateName: *const i8,
        pub hInstance: root::HINSTANCE,
        pub lpszStyle: *mut i8,
        pub nFontType: u16,
        pub ___MISSING_ALIGNMENT__: u16,
        pub nSizeMin: root::INT,
        pub nSizeMax: root::INT,
    }
    pub type CHOOSEFONTA = root::tagCHOOSEFONTA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCHOOSEFONTW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDC: root::HDC,
        pub lpLogFont: root::LPLOGFONTW,
        pub iPointSize: root::INT,
        pub Flags: u32,
        pub rgbColors: root::COLORREF,
        pub lCustData: root::LPARAM,
        pub lpfnHook: root::LPCFHOOKPROC,
        pub lpTemplateName: root::LPCWSTR,
        pub hInstance: root::HINSTANCE,
        pub lpszStyle: root::LPWSTR,
        pub nFontType: u16,
        pub ___MISSING_ALIGNMENT__: u16,
        pub nSizeMin: root::INT,
        pub nSizeMax: root::INT,
    }
    pub type CHOOSEFONTW = root::tagCHOOSEFONTW;
    pub type CHOOSEFONT = root::CHOOSEFONTA;
    pub type LPCHOOSEFONTA = *mut root::CHOOSEFONTA;
    pub type LPCHOOSEFONTW = *mut root::CHOOSEFONTW;
    pub type LPCHOOSEFONT = root::LPCHOOSEFONTA;
    pub type PCCHOOSEFONTA = *const root::CHOOSEFONTA;
    pub type PCCHOOSEFONTW = *const root::CHOOSEFONTW;
    pub type PCCHOOSEFONT = root::PCCHOOSEFONTA;
    extern "C" {
        pub fn ChooseFontA(arg1: root::LPCHOOSEFONTA) -> root::BOOL;
    }
    extern "C" {
        pub fn ChooseFontW(arg1: root::LPCHOOSEFONTW) -> root::BOOL;
    }
    pub type LPPRINTHOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    pub type LPSETUPHOOKPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPDA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDevMode: root::HGLOBAL,
        pub hDevNames: root::HGLOBAL,
        pub hDC: root::HDC,
        pub Flags: u32,
        pub nFromPage: u16,
        pub nToPage: u16,
        pub nMinPage: u16,
        pub nMaxPage: u16,
        pub nCopies: u16,
        pub hInstance: root::HINSTANCE,
        pub lCustData: root::LPARAM,
        pub lpfnPrintHook: root::LPPRINTHOOKPROC,
        pub lpfnSetupHook: root::LPSETUPHOOKPROC,
        pub lpPrintTemplateName: *const i8,
        pub lpSetupTemplateName: *const i8,
        pub hPrintTemplate: root::HGLOBAL,
        pub hSetupTemplate: root::HGLOBAL,
    }
    pub type PRINTDLGA = root::tagPDA;
    pub type LPPRINTDLGA = *mut root::tagPDA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPDW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDevMode: root::HGLOBAL,
        pub hDevNames: root::HGLOBAL,
        pub hDC: root::HDC,
        pub Flags: u32,
        pub nFromPage: u16,
        pub nToPage: u16,
        pub nMinPage: u16,
        pub nMaxPage: u16,
        pub nCopies: u16,
        pub hInstance: root::HINSTANCE,
        pub lCustData: root::LPARAM,
        pub lpfnPrintHook: root::LPPRINTHOOKPROC,
        pub lpfnSetupHook: root::LPSETUPHOOKPROC,
        pub lpPrintTemplateName: root::LPCWSTR,
        pub lpSetupTemplateName: root::LPCWSTR,
        pub hPrintTemplate: root::HGLOBAL,
        pub hSetupTemplate: root::HGLOBAL,
    }
    pub type PRINTDLGW = root::tagPDW;
    pub type LPPRINTDLGW = *mut root::tagPDW;
    pub type PRINTDLG = root::PRINTDLGA;
    pub type LPPRINTDLG = root::LPPRINTDLGA;
    extern "C" {
        pub fn PrintDlgA(pPD: root::LPPRINTDLGA) -> root::BOOL;
    }
    extern "C" {
        pub fn PrintDlgW(pPD: root::LPPRINTDLGW) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPrintDialogCallback {
        pub _base: root::IUnknown,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IPrintDialogServices {
        pub _base: root::IUnknown,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPRINTPAGERANGE {
        pub nFromPage: u32,
        pub nToPage: u32,
    }
    pub type PRINTPAGERANGE = root::tagPRINTPAGERANGE;
    pub type LPPRINTPAGERANGE = *mut root::PRINTPAGERANGE;
    pub type PCPRINTPAGERANGE = *const root::PRINTPAGERANGE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPDEXA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDevMode: root::HGLOBAL,
        pub hDevNames: root::HGLOBAL,
        pub hDC: root::HDC,
        pub Flags: u32,
        pub Flags2: u32,
        pub ExclusionFlags: u32,
        pub nPageRanges: u32,
        pub nMaxPageRanges: u32,
        pub lpPageRanges: root::LPPRINTPAGERANGE,
        pub nMinPage: u32,
        pub nMaxPage: u32,
        pub nCopies: u32,
        pub hInstance: root::HINSTANCE,
        pub lpPrintTemplateName: *const i8,
        pub lpCallback: root::LPUNKNOWN,
        pub nPropertyPages: u32,
        pub lphPropertyPages: *mut root::HPROPSHEETPAGE,
        pub nStartPage: u32,
        pub dwResultAction: u32,
    }
    pub type PRINTDLGEXA = root::tagPDEXA;
    pub type LPPRINTDLGEXA = *mut root::tagPDEXA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPDEXW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDevMode: root::HGLOBAL,
        pub hDevNames: root::HGLOBAL,
        pub hDC: root::HDC,
        pub Flags: u32,
        pub Flags2: u32,
        pub ExclusionFlags: u32,
        pub nPageRanges: u32,
        pub nMaxPageRanges: u32,
        pub lpPageRanges: root::LPPRINTPAGERANGE,
        pub nMinPage: u32,
        pub nMaxPage: u32,
        pub nCopies: u32,
        pub hInstance: root::HINSTANCE,
        pub lpPrintTemplateName: root::LPCWSTR,
        pub lpCallback: root::LPUNKNOWN,
        pub nPropertyPages: u32,
        pub lphPropertyPages: *mut root::HPROPSHEETPAGE,
        pub nStartPage: u32,
        pub dwResultAction: u32,
    }
    pub type PRINTDLGEXW = root::tagPDEXW;
    pub type LPPRINTDLGEXW = *mut root::tagPDEXW;
    pub type PRINTDLGEX = root::PRINTDLGEXA;
    pub type LPPRINTDLGEX = root::LPPRINTDLGEXA;
    extern "C" {
        pub fn PrintDlgExA(pPD: root::LPPRINTDLGEXA) -> root::HRESULT;
    }
    extern "C" {
        pub fn PrintDlgExW(pPD: root::LPPRINTDLGEXW) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDEVNAMES {
        pub wDriverOffset: u16,
        pub wDeviceOffset: u16,
        pub wOutputOffset: u16,
        pub wDefault: u16,
    }
    pub type DEVNAMES = root::tagDEVNAMES;
    pub type LPDEVNAMES = *mut root::DEVNAMES;
    pub type PCDEVNAMES = *const root::DEVNAMES;
    extern "C" {
        pub fn CommDlgExtendedError() -> u32;
    }
    pub type LPPAGEPAINTHOOK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    pub type LPPAGESETUPHOOK = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> u64,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPSDA {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDevMode: root::HGLOBAL,
        pub hDevNames: root::HGLOBAL,
        pub Flags: u32,
        pub ptPaperSize: root::POINT,
        pub rtMinMargin: root::RECT,
        pub rtMargin: root::RECT,
        pub hInstance: root::HINSTANCE,
        pub lCustData: root::LPARAM,
        pub lpfnPageSetupHook: root::LPPAGESETUPHOOK,
        pub lpfnPagePaintHook: root::LPPAGEPAINTHOOK,
        pub lpPageSetupTemplateName: *const i8,
        pub hPageSetupTemplate: root::HGLOBAL,
    }
    pub type PAGESETUPDLGA = root::tagPSDA;
    pub type LPPAGESETUPDLGA = *mut root::tagPSDA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPSDW {
        pub lStructSize: u32,
        pub hwndOwner: root::HWND,
        pub hDevMode: root::HGLOBAL,
        pub hDevNames: root::HGLOBAL,
        pub Flags: u32,
        pub ptPaperSize: root::POINT,
        pub rtMinMargin: root::RECT,
        pub rtMargin: root::RECT,
        pub hInstance: root::HINSTANCE,
        pub lCustData: root::LPARAM,
        pub lpfnPageSetupHook: root::LPPAGESETUPHOOK,
        pub lpfnPagePaintHook: root::LPPAGEPAINTHOOK,
        pub lpPageSetupTemplateName: root::LPCWSTR,
        pub hPageSetupTemplate: root::HGLOBAL,
    }
    pub type PAGESETUPDLGW = root::tagPSDW;
    pub type LPPAGESETUPDLGW = *mut root::tagPSDW;
    pub type PAGESETUPDLG = root::PAGESETUPDLGA;
    pub type LPPAGESETUPDLG = root::LPPAGESETUPDLGA;
    extern "C" {
        pub fn PageSetupDlgA(arg1: root::LPPAGESETUPDLGA) -> root::BOOL;
    }
    extern "C" {
        pub fn PageSetupDlgW(arg1: root::LPPAGESETUPDLGW) -> root::BOOL;
    }
    extern "C" {
        pub fn uaw_CharUpperW(String: root::LPUWSTR) -> root::LPUWSTR;
    }
    extern "C" {
        pub fn uaw_lstrcmpW(
            String1: root::PCUWSTR,
            String2: root::PCUWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn uaw_lstrcmpiW(
            String1: root::PCUWSTR,
            String2: root::PCUWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn uaw_lstrlenW(String: root::LPCUWSTR) -> i32;
    }
    extern "C" {
        pub fn uaw_wcschr(String: root::PCUWSTR, Character: u16) -> root::PUWSTR;
    }
    extern "C" {
        pub fn uaw_wcscpy(Destination: root::PUWSTR, Source: root::PCUWSTR) -> root::PUWSTR;
    }
    extern "C" {
        pub fn uaw_wcsicmp(String1: root::PCUWSTR, String2: root::PCUWSTR)
            -> i32;
    }
    extern "C" {
        pub fn uaw_wcslen(String: root::PCUWSTR) -> root::size_t;
    }
    extern "C" {
        pub fn uaw_wcsrchr(String: root::PCUWSTR, Character: u16) -> root::PUWSTR;
    }
    pub type PUWSTR_C = *const u16;
    extern "C" {
        pub static NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: root::GUID;
    }
    extern "C" {
        pub static NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: root::GUID;
    }
    extern "C" {
        pub static DOMAIN_JOIN_GUID: root::GUID;
    }
    extern "C" {
        pub static DOMAIN_LEAVE_GUID: root::GUID;
    }
    extern "C" {
        pub static FIREWALL_PORT_OPEN_GUID: root::GUID;
    }
    extern "C" {
        pub static FIREWALL_PORT_CLOSE_GUID: root::GUID;
    }
    extern "C" {
        pub static MACHINE_POLICY_PRESENT_GUID: root::GUID;
    }
    extern "C" {
        pub static USER_POLICY_PRESENT_GUID: root::GUID;
    }
    extern "C" {
        pub static RPC_INTERFACE_EVENT_GUID: root::GUID;
    }
    extern "C" {
        pub static NAMED_PIPE_EVENT_GUID: root::GUID;
    }
    extern "C" {
        pub static CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID: root::GUID;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SERVICE_TRIGGER_CUSTOM_STATE_ID {
        pub Data: [u32; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
        pub u: root::_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1 {
        pub CustomStateId: root::SERVICE_TRIGGER_CUSTOM_STATE_ID,
        pub s: root::_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1 {
        pub DataOffset: u32,
        pub Data: [u8; 1usize],
    }
    pub type SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM =
        root::_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
    pub type LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM =
        *mut root::_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_DESCRIPTIONA {
        pub lpDescription: *mut i8,
    }
    pub type SERVICE_DESCRIPTIONA = root::_SERVICE_DESCRIPTIONA;
    pub type LPSERVICE_DESCRIPTIONA = *mut root::_SERVICE_DESCRIPTIONA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_DESCRIPTIONW {
        pub lpDescription: root::LPWSTR,
    }
    pub type SERVICE_DESCRIPTIONW = root::_SERVICE_DESCRIPTIONW;
    pub type LPSERVICE_DESCRIPTIONW = *mut root::_SERVICE_DESCRIPTIONW;
    pub type SERVICE_DESCRIPTION = root::SERVICE_DESCRIPTIONA;
    pub type LPSERVICE_DESCRIPTION = root::LPSERVICE_DESCRIPTIONA;
    pub const _SC_ACTION_TYPE_SC_ACTION_NONE: root::_SC_ACTION_TYPE = 0;
    pub const _SC_ACTION_TYPE_SC_ACTION_RESTART: root::_SC_ACTION_TYPE = 1;
    pub const _SC_ACTION_TYPE_SC_ACTION_REBOOT: root::_SC_ACTION_TYPE = 2;
    pub const _SC_ACTION_TYPE_SC_ACTION_RUN_COMMAND: root::_SC_ACTION_TYPE = 3;
    pub const _SC_ACTION_TYPE_SC_ACTION_OWN_RESTART: root::_SC_ACTION_TYPE = 4;
    pub type _SC_ACTION_TYPE = i32;
    pub use self::super::root::_SC_ACTION_TYPE as SC_ACTION_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SC_ACTION {
        pub Type: root::SC_ACTION_TYPE,
        pub Delay: u32,
    }
    pub type SC_ACTION = root::_SC_ACTION;
    pub type LPSC_ACTION = *mut root::_SC_ACTION;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_FAILURE_ACTIONSA {
        pub dwResetPeriod: u32,
        pub lpRebootMsg: *mut i8,
        pub lpCommand: *mut i8,
        pub cActions: u32,
        pub lpsaActions: *mut root::SC_ACTION,
    }
    pub type SERVICE_FAILURE_ACTIONSA = root::_SERVICE_FAILURE_ACTIONSA;
    pub type LPSERVICE_FAILURE_ACTIONSA = *mut root::_SERVICE_FAILURE_ACTIONSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_FAILURE_ACTIONSW {
        pub dwResetPeriod: u32,
        pub lpRebootMsg: root::LPWSTR,
        pub lpCommand: root::LPWSTR,
        pub cActions: u32,
        pub lpsaActions: *mut root::SC_ACTION,
    }
    pub type SERVICE_FAILURE_ACTIONSW = root::_SERVICE_FAILURE_ACTIONSW;
    pub type LPSERVICE_FAILURE_ACTIONSW = *mut root::_SERVICE_FAILURE_ACTIONSW;
    pub type SERVICE_FAILURE_ACTIONS = root::SERVICE_FAILURE_ACTIONSA;
    pub type LPSERVICE_FAILURE_ACTIONS = root::LPSERVICE_FAILURE_ACTIONSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_DELAYED_AUTO_START_INFO {
        pub fDelayedAutostart: root::BOOL,
    }
    pub type SERVICE_DELAYED_AUTO_START_INFO = root::_SERVICE_DELAYED_AUTO_START_INFO;
    pub type LPSERVICE_DELAYED_AUTO_START_INFO = *mut root::_SERVICE_DELAYED_AUTO_START_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_FAILURE_ACTIONS_FLAG {
        pub fFailureActionsOnNonCrashFailures: root::BOOL,
    }
    pub type SERVICE_FAILURE_ACTIONS_FLAG = root::_SERVICE_FAILURE_ACTIONS_FLAG;
    pub type LPSERVICE_FAILURE_ACTIONS_FLAG = *mut root::_SERVICE_FAILURE_ACTIONS_FLAG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_SID_INFO {
        pub dwServiceSidType: u32,
    }
    pub type SERVICE_SID_INFO = root::_SERVICE_SID_INFO;
    pub type LPSERVICE_SID_INFO = *mut root::_SERVICE_SID_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
        pub pmszRequiredPrivileges: *mut i8,
    }
    pub type SERVICE_REQUIRED_PRIVILEGES_INFOA = root::_SERVICE_REQUIRED_PRIVILEGES_INFOA;
    pub type LPSERVICE_REQUIRED_PRIVILEGES_INFOA = *mut root::_SERVICE_REQUIRED_PRIVILEGES_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
        pub pmszRequiredPrivileges: root::LPWSTR,
    }
    pub type SERVICE_REQUIRED_PRIVILEGES_INFOW = root::_SERVICE_REQUIRED_PRIVILEGES_INFOW;
    pub type LPSERVICE_REQUIRED_PRIVILEGES_INFOW = *mut root::_SERVICE_REQUIRED_PRIVILEGES_INFOW;
    pub type SERVICE_REQUIRED_PRIVILEGES_INFO = root::SERVICE_REQUIRED_PRIVILEGES_INFOA;
    pub type LPSERVICE_REQUIRED_PRIVILEGES_INFO = root::LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_PRESHUTDOWN_INFO {
        pub dwPreshutdownTimeout: u32,
    }
    pub type SERVICE_PRESHUTDOWN_INFO = root::_SERVICE_PRESHUTDOWN_INFO;
    pub type LPSERVICE_PRESHUTDOWN_INFO = *mut root::_SERVICE_PRESHUTDOWN_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
        pub dwDataType: u32,
        pub cbData: u32,
        pub pData: root::PBYTE,
    }
    pub type SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = root::_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
    pub type PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = *mut root::_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_TRIGGER {
        pub dwTriggerType: u32,
        pub dwAction: u32,
        pub pTriggerSubtype: *mut root::GUID,
        pub cDataItems: u32,
        pub pDataItems: root::PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM,
    }
    pub type SERVICE_TRIGGER = root::_SERVICE_TRIGGER;
    pub type PSERVICE_TRIGGER = *mut root::_SERVICE_TRIGGER;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_TRIGGER_INFO {
        pub cTriggers: u32,
        pub pTriggers: root::PSERVICE_TRIGGER,
        pub pReserved: root::PBYTE,
    }
    pub type SERVICE_TRIGGER_INFO = root::_SERVICE_TRIGGER_INFO;
    pub type PSERVICE_TRIGGER_INFO = *mut root::_SERVICE_TRIGGER_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_PREFERRED_NODE_INFO {
        pub usPreferredNode: root::USHORT,
        pub fDelete: root::BOOLEAN,
    }
    pub type SERVICE_PREFERRED_NODE_INFO = root::_SERVICE_PREFERRED_NODE_INFO;
    pub type LPSERVICE_PREFERRED_NODE_INFO = *mut root::_SERVICE_PREFERRED_NODE_INFO;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _SERVICE_TIMECHANGE_INFO {
        pub liNewTime: root::LARGE_INTEGER,
        pub liOldTime: root::LARGE_INTEGER,
    }
    pub type SERVICE_TIMECHANGE_INFO = root::_SERVICE_TIMECHANGE_INFO;
    pub type PSERVICE_TIMECHANGE_INFO = *mut root::_SERVICE_TIMECHANGE_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_LAUNCH_PROTECTED_INFO {
        pub dwLaunchProtected: u32,
    }
    pub type SERVICE_LAUNCH_PROTECTED_INFO = root::_SERVICE_LAUNCH_PROTECTED_INFO;
    pub type PSERVICE_LAUNCH_PROTECTED_INFO = *mut root::_SERVICE_LAUNCH_PROTECTED_INFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SC_HANDLE__ {
        pub unused: i32,
    }
    pub type SC_HANDLE = *mut root::SC_HANDLE__;
    pub type LPSC_HANDLE = *mut root::SC_HANDLE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SERVICE_STATUS_HANDLE__ {
        pub unused: i32,
    }
    pub type SERVICE_STATUS_HANDLE = *mut root::SERVICE_STATUS_HANDLE__;
    pub const _SC_STATUS_TYPE_SC_STATUS_PROCESS_INFO: root::_SC_STATUS_TYPE = 0;
    pub type _SC_STATUS_TYPE = i32;
    pub use self::super::root::_SC_STATUS_TYPE as SC_STATUS_TYPE;
    pub const _SC_ENUM_TYPE_SC_ENUM_PROCESS_INFO: root::_SC_ENUM_TYPE = 0;
    pub type _SC_ENUM_TYPE = i32;
    pub use self::super::root::_SC_ENUM_TYPE as SC_ENUM_TYPE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_STATUS {
        pub dwServiceType: u32,
        pub dwCurrentState: u32,
        pub dwControlsAccepted: u32,
        pub dwWin32ExitCode: u32,
        pub dwServiceSpecificExitCode: u32,
        pub dwCheckPoint: u32,
        pub dwWaitHint: u32,
    }
    pub type SERVICE_STATUS = root::_SERVICE_STATUS;
    pub type LPSERVICE_STATUS = *mut root::_SERVICE_STATUS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_STATUS_PROCESS {
        pub dwServiceType: u32,
        pub dwCurrentState: u32,
        pub dwControlsAccepted: u32,
        pub dwWin32ExitCode: u32,
        pub dwServiceSpecificExitCode: u32,
        pub dwCheckPoint: u32,
        pub dwWaitHint: u32,
        pub dwProcessId: u32,
        pub dwServiceFlags: u32,
    }
    pub type SERVICE_STATUS_PROCESS = root::_SERVICE_STATUS_PROCESS;
    pub type LPSERVICE_STATUS_PROCESS = *mut root::_SERVICE_STATUS_PROCESS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENUM_SERVICE_STATUSA {
        pub lpServiceName: *mut i8,
        pub lpDisplayName: *mut i8,
        pub ServiceStatus: root::SERVICE_STATUS,
    }
    pub type ENUM_SERVICE_STATUSA = root::_ENUM_SERVICE_STATUSA;
    pub type LPENUM_SERVICE_STATUSA = *mut root::_ENUM_SERVICE_STATUSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENUM_SERVICE_STATUSW {
        pub lpServiceName: root::LPWSTR,
        pub lpDisplayName: root::LPWSTR,
        pub ServiceStatus: root::SERVICE_STATUS,
    }
    pub type ENUM_SERVICE_STATUSW = root::_ENUM_SERVICE_STATUSW;
    pub type LPENUM_SERVICE_STATUSW = *mut root::_ENUM_SERVICE_STATUSW;
    pub type ENUM_SERVICE_STATUS = root::ENUM_SERVICE_STATUSA;
    pub type LPENUM_SERVICE_STATUS = root::LPENUM_SERVICE_STATUSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENUM_SERVICE_STATUS_PROCESSA {
        pub lpServiceName: *mut i8,
        pub lpDisplayName: *mut i8,
        pub ServiceStatusProcess: root::SERVICE_STATUS_PROCESS,
    }
    pub type ENUM_SERVICE_STATUS_PROCESSA = root::_ENUM_SERVICE_STATUS_PROCESSA;
    pub type LPENUM_SERVICE_STATUS_PROCESSA = *mut root::_ENUM_SERVICE_STATUS_PROCESSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ENUM_SERVICE_STATUS_PROCESSW {
        pub lpServiceName: root::LPWSTR,
        pub lpDisplayName: root::LPWSTR,
        pub ServiceStatusProcess: root::SERVICE_STATUS_PROCESS,
    }
    pub type ENUM_SERVICE_STATUS_PROCESSW = root::_ENUM_SERVICE_STATUS_PROCESSW;
    pub type LPENUM_SERVICE_STATUS_PROCESSW = *mut root::_ENUM_SERVICE_STATUS_PROCESSW;
    pub type ENUM_SERVICE_STATUS_PROCESS = root::ENUM_SERVICE_STATUS_PROCESSA;
    pub type LPENUM_SERVICE_STATUS_PROCESS = root::LPENUM_SERVICE_STATUS_PROCESSA;
    pub type SC_LOCK = root::LPVOID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_SERVICE_LOCK_STATUSA {
        pub fIsLocked: u32,
        pub lpLockOwner: *mut i8,
        pub dwLockDuration: u32,
    }
    pub type QUERY_SERVICE_LOCK_STATUSA = root::_QUERY_SERVICE_LOCK_STATUSA;
    pub type LPQUERY_SERVICE_LOCK_STATUSA = *mut root::_QUERY_SERVICE_LOCK_STATUSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_SERVICE_LOCK_STATUSW {
        pub fIsLocked: u32,
        pub lpLockOwner: root::LPWSTR,
        pub dwLockDuration: u32,
    }
    pub type QUERY_SERVICE_LOCK_STATUSW = root::_QUERY_SERVICE_LOCK_STATUSW;
    pub type LPQUERY_SERVICE_LOCK_STATUSW = *mut root::_QUERY_SERVICE_LOCK_STATUSW;
    pub type QUERY_SERVICE_LOCK_STATUS = root::QUERY_SERVICE_LOCK_STATUSA;
    pub type LPQUERY_SERVICE_LOCK_STATUS = root::LPQUERY_SERVICE_LOCK_STATUSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_SERVICE_CONFIGA {
        pub dwServiceType: u32,
        pub dwStartType: u32,
        pub dwErrorControl: u32,
        pub lpBinaryPathName: *mut i8,
        pub lpLoadOrderGroup: *mut i8,
        pub dwTagId: u32,
        pub lpDependencies: *mut i8,
        pub lpServiceStartName: *mut i8,
        pub lpDisplayName: *mut i8,
    }
    pub type QUERY_SERVICE_CONFIGA = root::_QUERY_SERVICE_CONFIGA;
    pub type LPQUERY_SERVICE_CONFIGA = *mut root::_QUERY_SERVICE_CONFIGA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _QUERY_SERVICE_CONFIGW {
        pub dwServiceType: u32,
        pub dwStartType: u32,
        pub dwErrorControl: u32,
        pub lpBinaryPathName: root::LPWSTR,
        pub lpLoadOrderGroup: root::LPWSTR,
        pub dwTagId: u32,
        pub lpDependencies: root::LPWSTR,
        pub lpServiceStartName: root::LPWSTR,
        pub lpDisplayName: root::LPWSTR,
    }
    pub type QUERY_SERVICE_CONFIGW = root::_QUERY_SERVICE_CONFIGW;
    pub type LPQUERY_SERVICE_CONFIGW = *mut root::_QUERY_SERVICE_CONFIGW;
    pub type QUERY_SERVICE_CONFIG = root::QUERY_SERVICE_CONFIGA;
    pub type LPQUERY_SERVICE_CONFIG = root::LPQUERY_SERVICE_CONFIGA;
    pub type LPSERVICE_MAIN_FUNCTIONW = ::std::option::Option<
        unsafe extern "C" fn(
            dwNumServicesArgs: u32,
            lpServiceArgVectors: *mut root::LPWSTR,
        ),
    >;
    pub type LPSERVICE_MAIN_FUNCTIONA = ::std::option::Option<
        unsafe extern "C" fn(dwNumServicesArgs: u32, lpServiceArgVectors: *mut *mut i8),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_TABLE_ENTRYA {
        pub lpServiceName: *mut i8,
        pub lpServiceProc: root::LPSERVICE_MAIN_FUNCTIONA,
    }
    pub type SERVICE_TABLE_ENTRYA = root::_SERVICE_TABLE_ENTRYA;
    pub type LPSERVICE_TABLE_ENTRYA = *mut root::_SERVICE_TABLE_ENTRYA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_TABLE_ENTRYW {
        pub lpServiceName: root::LPWSTR,
        pub lpServiceProc: root::LPSERVICE_MAIN_FUNCTIONW,
    }
    pub type SERVICE_TABLE_ENTRYW = root::_SERVICE_TABLE_ENTRYW;
    pub type LPSERVICE_TABLE_ENTRYW = *mut root::_SERVICE_TABLE_ENTRYW;
    pub type SERVICE_TABLE_ENTRY = root::SERVICE_TABLE_ENTRYA;
    pub type LPSERVICE_TABLE_ENTRY = root::LPSERVICE_TABLE_ENTRYA;
    pub type LPHANDLER_FUNCTION =
        ::std::option::Option<unsafe extern "C" fn(dwControl: u32)>;
    pub type LPHANDLER_FUNCTION_EX = ::std::option::Option<
        unsafe extern "C" fn(
            dwControl: u32,
            dwEventType: u32,
            lpEventData: root::LPVOID,
            lpContext: root::LPVOID,
        ) -> u32,
    >;
    pub type PFN_SC_NOTIFY_CALLBACK =
        ::std::option::Option<unsafe extern "C" fn(pParameter: root::PVOID)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_NOTIFY_1 {
        pub dwVersion: u32,
        pub pfnNotifyCallback: root::PFN_SC_NOTIFY_CALLBACK,
        pub pContext: root::PVOID,
        pub dwNotificationStatus: u32,
        pub ServiceStatus: root::SERVICE_STATUS_PROCESS,
    }
    pub type SERVICE_NOTIFY_1 = root::_SERVICE_NOTIFY_1;
    pub type PSERVICE_NOTIFY_1 = *mut root::_SERVICE_NOTIFY_1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_NOTIFY_2A {
        pub dwVersion: u32,
        pub pfnNotifyCallback: root::PFN_SC_NOTIFY_CALLBACK,
        pub pContext: root::PVOID,
        pub dwNotificationStatus: u32,
        pub ServiceStatus: root::SERVICE_STATUS_PROCESS,
        pub dwNotificationTriggered: u32,
        pub pszServiceNames: *mut i8,
    }
    pub type SERVICE_NOTIFY_2A = root::_SERVICE_NOTIFY_2A;
    pub type PSERVICE_NOTIFY_2A = *mut root::_SERVICE_NOTIFY_2A;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_NOTIFY_2W {
        pub dwVersion: u32,
        pub pfnNotifyCallback: root::PFN_SC_NOTIFY_CALLBACK,
        pub pContext: root::PVOID,
        pub dwNotificationStatus: u32,
        pub ServiceStatus: root::SERVICE_STATUS_PROCESS,
        pub dwNotificationTriggered: u32,
        pub pszServiceNames: root::LPWSTR,
    }
    pub type SERVICE_NOTIFY_2W = root::_SERVICE_NOTIFY_2W;
    pub type PSERVICE_NOTIFY_2W = *mut root::_SERVICE_NOTIFY_2W;
    pub type SERVICE_NOTIFY_2 = root::SERVICE_NOTIFY_2A;
    pub type PSERVICE_NOTIFY_2 = root::PSERVICE_NOTIFY_2A;
    pub type SERVICE_NOTIFYA = root::SERVICE_NOTIFY_2A;
    pub type PSERVICE_NOTIFYA = *mut root::SERVICE_NOTIFY_2A;
    pub type SERVICE_NOTIFYW = root::SERVICE_NOTIFY_2W;
    pub type PSERVICE_NOTIFYW = *mut root::SERVICE_NOTIFY_2W;
    pub type SERVICE_NOTIFY = root::SERVICE_NOTIFYA;
    pub type PSERVICE_NOTIFY = root::PSERVICE_NOTIFYA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
        pub dwReason: u32,
        pub pszComment: *mut i8,
        pub ServiceStatus: root::SERVICE_STATUS_PROCESS,
    }
    pub type SERVICE_CONTROL_STATUS_REASON_PARAMSA = root::_SERVICE_CONTROL_STATUS_REASON_PARAMSA;
    pub type PSERVICE_CONTROL_STATUS_REASON_PARAMSA =
        *mut root::_SERVICE_CONTROL_STATUS_REASON_PARAMSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
        pub dwReason: u32,
        pub pszComment: root::LPWSTR,
        pub ServiceStatus: root::SERVICE_STATUS_PROCESS,
    }
    pub type SERVICE_CONTROL_STATUS_REASON_PARAMSW = root::_SERVICE_CONTROL_STATUS_REASON_PARAMSW;
    pub type PSERVICE_CONTROL_STATUS_REASON_PARAMSW =
        *mut root::_SERVICE_CONTROL_STATUS_REASON_PARAMSW;
    pub type SERVICE_CONTROL_STATUS_REASON_PARAMS = root::SERVICE_CONTROL_STATUS_REASON_PARAMSA;
    pub type PSERVICE_CONTROL_STATUS_REASON_PARAMS = root::PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SERVICE_START_REASON {
        pub dwReason: u32,
    }
    pub type SERVICE_START_REASON = root::_SERVICE_START_REASON;
    pub type PSERVICE_START_REASON = *mut root::_SERVICE_START_REASON;
    extern "C" {
        pub fn ChangeServiceConfigA(
            hService: root::SC_HANDLE,
            dwServiceType: u32,
            dwStartType: u32,
            dwErrorControl: u32,
            lpBinaryPathName: *const i8,
            lpLoadOrderGroup: *const i8,
            lpdwTagId: root::LPDWORD,
            lpDependencies: *const i8,
            lpServiceStartName: *const i8,
            lpPassword: *const i8,
            lpDisplayName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeServiceConfigW(
            hService: root::SC_HANDLE,
            dwServiceType: u32,
            dwStartType: u32,
            dwErrorControl: u32,
            lpBinaryPathName: root::LPCWSTR,
            lpLoadOrderGroup: root::LPCWSTR,
            lpdwTagId: root::LPDWORD,
            lpDependencies: root::LPCWSTR,
            lpServiceStartName: root::LPCWSTR,
            lpPassword: root::LPCWSTR,
            lpDisplayName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeServiceConfig2A(
            hService: root::SC_HANDLE,
            dwInfoLevel: u32,
            lpInfo: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ChangeServiceConfig2W(
            hService: root::SC_HANDLE,
            dwInfoLevel: u32,
            lpInfo: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CloseServiceHandle(hSCObject: root::SC_HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn ControlService(
            hService: root::SC_HANDLE,
            dwControl: u32,
            lpServiceStatus: root::LPSERVICE_STATUS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateServiceA(
            hSCManager: root::SC_HANDLE,
            lpServiceName: *const i8,
            lpDisplayName: *const i8,
            dwDesiredAccess: u32,
            dwServiceType: u32,
            dwStartType: u32,
            dwErrorControl: u32,
            lpBinaryPathName: *const i8,
            lpLoadOrderGroup: *const i8,
            lpdwTagId: root::LPDWORD,
            lpDependencies: *const i8,
            lpServiceStartName: *const i8,
            lpPassword: *const i8,
        ) -> root::SC_HANDLE;
    }
    extern "C" {
        pub fn CreateServiceW(
            hSCManager: root::SC_HANDLE,
            lpServiceName: root::LPCWSTR,
            lpDisplayName: root::LPCWSTR,
            dwDesiredAccess: u32,
            dwServiceType: u32,
            dwStartType: u32,
            dwErrorControl: u32,
            lpBinaryPathName: root::LPCWSTR,
            lpLoadOrderGroup: root::LPCWSTR,
            lpdwTagId: root::LPDWORD,
            lpDependencies: root::LPCWSTR,
            lpServiceStartName: root::LPCWSTR,
            lpPassword: root::LPCWSTR,
        ) -> root::SC_HANDLE;
    }
    extern "C" {
        pub fn DeleteService(hService: root::SC_HANDLE) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDependentServicesA(
            hService: root::SC_HANDLE,
            dwServiceState: u32,
            lpServices: root::LPENUM_SERVICE_STATUSA,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
            lpServicesReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumDependentServicesW(
            hService: root::SC_HANDLE,
            dwServiceState: u32,
            lpServices: root::LPENUM_SERVICE_STATUSW,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
            lpServicesReturned: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumServicesStatusA(
            hSCManager: root::SC_HANDLE,
            dwServiceType: u32,
            dwServiceState: u32,
            lpServices: root::LPENUM_SERVICE_STATUSA,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
            lpServicesReturned: root::LPDWORD,
            lpResumeHandle: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumServicesStatusW(
            hSCManager: root::SC_HANDLE,
            dwServiceType: u32,
            dwServiceState: u32,
            lpServices: root::LPENUM_SERVICE_STATUSW,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
            lpServicesReturned: root::LPDWORD,
            lpResumeHandle: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumServicesStatusExA(
            hSCManager: root::SC_HANDLE,
            InfoLevel: root::SC_ENUM_TYPE,
            dwServiceType: u32,
            dwServiceState: u32,
            lpServices: root::LPBYTE,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
            lpServicesReturned: root::LPDWORD,
            lpResumeHandle: root::LPDWORD,
            pszGroupName: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn EnumServicesStatusExW(
            hSCManager: root::SC_HANDLE,
            InfoLevel: root::SC_ENUM_TYPE,
            dwServiceType: u32,
            dwServiceState: u32,
            lpServices: root::LPBYTE,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
            lpServicesReturned: root::LPDWORD,
            lpResumeHandle: root::LPDWORD,
            pszGroupName: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetServiceKeyNameA(
            hSCManager: root::SC_HANDLE,
            lpDisplayName: *const i8,
            lpServiceName: *mut i8,
            lpcchBuffer: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetServiceKeyNameW(
            hSCManager: root::SC_HANDLE,
            lpDisplayName: root::LPCWSTR,
            lpServiceName: root::LPWSTR,
            lpcchBuffer: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetServiceDisplayNameA(
            hSCManager: root::SC_HANDLE,
            lpServiceName: *const i8,
            lpDisplayName: *mut i8,
            lpcchBuffer: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetServiceDisplayNameW(
            hSCManager: root::SC_HANDLE,
            lpServiceName: root::LPCWSTR,
            lpDisplayName: root::LPWSTR,
            lpcchBuffer: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn LockServiceDatabase(hSCManager: root::SC_HANDLE) -> root::SC_LOCK;
    }
    extern "C" {
        pub fn NotifyBootConfigStatus(BootAcceptable: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn OpenSCManagerA(
            lpMachineName: *const i8,
            lpDatabaseName: *const i8,
            dwDesiredAccess: u32,
        ) -> root::SC_HANDLE;
    }
    extern "C" {
        pub fn OpenSCManagerW(
            lpMachineName: root::LPCWSTR,
            lpDatabaseName: root::LPCWSTR,
            dwDesiredAccess: u32,
        ) -> root::SC_HANDLE;
    }
    extern "C" {
        pub fn OpenServiceA(
            hSCManager: root::SC_HANDLE,
            lpServiceName: *const i8,
            dwDesiredAccess: u32,
        ) -> root::SC_HANDLE;
    }
    extern "C" {
        pub fn OpenServiceW(
            hSCManager: root::SC_HANDLE,
            lpServiceName: root::LPCWSTR,
            dwDesiredAccess: u32,
        ) -> root::SC_HANDLE;
    }
    extern "C" {
        pub fn QueryServiceConfigA(
            hService: root::SC_HANDLE,
            lpServiceConfig: root::LPQUERY_SERVICE_CONFIGA,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceConfigW(
            hService: root::SC_HANDLE,
            lpServiceConfig: root::LPQUERY_SERVICE_CONFIGW,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceConfig2A(
            hService: root::SC_HANDLE,
            dwInfoLevel: u32,
            lpBuffer: root::LPBYTE,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceConfig2W(
            hService: root::SC_HANDLE,
            dwInfoLevel: u32,
            lpBuffer: root::LPBYTE,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceLockStatusA(
            hSCManager: root::SC_HANDLE,
            lpLockStatus: root::LPQUERY_SERVICE_LOCK_STATUSA,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceLockStatusW(
            hSCManager: root::SC_HANDLE,
            lpLockStatus: root::LPQUERY_SERVICE_LOCK_STATUSW,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceObjectSecurity(
            hService: root::SC_HANDLE,
            dwSecurityInformation: root::SECURITY_INFORMATION,
            lpSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceStatus(
            hService: root::SC_HANDLE,
            lpServiceStatus: root::LPSERVICE_STATUS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceStatusEx(
            hService: root::SC_HANDLE,
            InfoLevel: root::SC_STATUS_TYPE,
            lpBuffer: root::LPBYTE,
            cbBufSize: u32,
            pcbBytesNeeded: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn RegisterServiceCtrlHandlerA(
            lpServiceName: *const i8,
            lpHandlerProc: root::LPHANDLER_FUNCTION,
        ) -> root::SERVICE_STATUS_HANDLE;
    }
    extern "C" {
        pub fn RegisterServiceCtrlHandlerW(
            lpServiceName: root::LPCWSTR,
            lpHandlerProc: root::LPHANDLER_FUNCTION,
        ) -> root::SERVICE_STATUS_HANDLE;
    }
    extern "C" {
        pub fn RegisterServiceCtrlHandlerExA(
            lpServiceName: *const i8,
            lpHandlerProc: root::LPHANDLER_FUNCTION_EX,
            lpContext: root::LPVOID,
        ) -> root::SERVICE_STATUS_HANDLE;
    }
    extern "C" {
        pub fn RegisterServiceCtrlHandlerExW(
            lpServiceName: root::LPCWSTR,
            lpHandlerProc: root::LPHANDLER_FUNCTION_EX,
            lpContext: root::LPVOID,
        ) -> root::SERVICE_STATUS_HANDLE;
    }
    extern "C" {
        pub fn SetServiceObjectSecurity(
            hService: root::SC_HANDLE,
            dwSecurityInformation: root::SECURITY_INFORMATION,
            lpSecurityDescriptor: root::PSECURITY_DESCRIPTOR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetServiceStatus(
            hServiceStatus: root::SERVICE_STATUS_HANDLE,
            lpServiceStatus: root::LPSERVICE_STATUS,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StartServiceCtrlDispatcherA(
            lpServiceStartTable: *const root::SERVICE_TABLE_ENTRYA,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StartServiceCtrlDispatcherW(
            lpServiceStartTable: *const root::SERVICE_TABLE_ENTRYW,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StartServiceA(
            hService: root::SC_HANDLE,
            dwNumServiceArgs: u32,
            lpServiceArgVectors: *mut *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StartServiceW(
            hService: root::SC_HANDLE,
            dwNumServiceArgs: u32,
            lpServiceArgVectors: *mut root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn UnlockServiceDatabase(ScLock: root::SC_LOCK) -> root::BOOL;
    }
    extern "C" {
        pub fn NotifyServiceStatusChangeA(
            hService: root::SC_HANDLE,
            dwNotifyMask: u32,
            pNotifyBuffer: root::PSERVICE_NOTIFYA,
        ) -> u32;
    }
    extern "C" {
        pub fn NotifyServiceStatusChangeW(
            hService: root::SC_HANDLE,
            dwNotifyMask: u32,
            pNotifyBuffer: root::PSERVICE_NOTIFYW,
        ) -> u32;
    }
    extern "C" {
        pub fn ControlServiceExA(
            hService: root::SC_HANDLE,
            dwControl: u32,
            dwInfoLevel: u32,
            pControlParams: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ControlServiceExW(
            hService: root::SC_HANDLE,
            dwControl: u32,
            dwInfoLevel: u32,
            pControlParams: root::PVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn QueryServiceDynamicInformation(
            hServiceStatus: root::SERVICE_STATUS_HANDLE,
            dwInfoLevel: u32,
            ppDynamicInfo: *mut root::PVOID,
        ) -> root::BOOL;
    }
    pub const _SC_EVENT_TYPE_SC_EVENT_DATABASE_CHANGE: root::_SC_EVENT_TYPE = 0;
    pub const _SC_EVENT_TYPE_SC_EVENT_PROPERTY_CHANGE: root::_SC_EVENT_TYPE = 1;
    pub const _SC_EVENT_TYPE_SC_EVENT_STATUS_CHANGE: root::_SC_EVENT_TYPE = 2;
    pub type _SC_EVENT_TYPE = i32;
    pub use self::super::root::_SC_EVENT_TYPE as SC_EVENT_TYPE;
    pub type PSC_EVENT_TYPE = *mut root::_SC_EVENT_TYPE;
    pub type PSC_NOTIFICATION_CALLBACK =
        ::std::option::Option<unsafe extern "C" fn(arg1: u32, arg2: root::PVOID)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SC_NOTIFICATION_REGISTRATION {
        _unused: [u8; 0],
    }
    pub type PSC_NOTIFICATION_REGISTRATION = *mut root::_SC_NOTIFICATION_REGISTRATION;
    extern "C" {
        pub fn SubscribeServiceChangeNotifications(
            hService: root::SC_HANDLE,
            eEventType: root::SC_EVENT_TYPE,
            pCallback: root::PSC_NOTIFICATION_CALLBACK,
            pCallbackContext: root::PVOID,
            pSubscription: *mut root::PSC_NOTIFICATION_REGISTRATION,
        ) -> u32;
    }
    extern "C" {
        pub fn UnsubscribeServiceChangeNotifications(
            pSubscription: root::PSC_NOTIFICATION_REGISTRATION,
        );
    }
    extern "C" {
        pub fn WaitServiceState(
            hService: root::SC_HANDLE,
            dwNotify: u32,
            dwTimeout: u32,
            hCancelEvent: root::HANDLE,
        ) -> u32;
    }
    pub const SERVICE_REGISTRY_STATE_TYPE_ServiceRegistryStateParameters:
        root::SERVICE_REGISTRY_STATE_TYPE = 0;
    pub const SERVICE_REGISTRY_STATE_TYPE_ServiceRegistryStatePersistent:
        root::SERVICE_REGISTRY_STATE_TYPE = 1;
    pub const SERVICE_REGISTRY_STATE_TYPE_MaxServiceRegistryStateType:
        root::SERVICE_REGISTRY_STATE_TYPE = 2;
    pub type SERVICE_REGISTRY_STATE_TYPE = i32;
    extern "C" {
        pub fn GetServiceRegistryStateKey(
            ServiceStatusHandle: root::SERVICE_STATUS_HANDLE,
            StateType: root::SERVICE_REGISTRY_STATE_TYPE,
            AccessMask: u32,
            ServiceStateKey: *mut root::HKEY,
        ) -> u32;
    }
    pub const SERVICE_DIRECTORY_TYPE_ServiceDirectoryPersistentState: root::SERVICE_DIRECTORY_TYPE =
        0;
    pub const SERVICE_DIRECTORY_TYPE_ServiceDirectoryTypeMax: root::SERVICE_DIRECTORY_TYPE = 1;
    pub type SERVICE_DIRECTORY_TYPE = i32;
    extern "C" {
        pub fn GetServiceDirectory(
            hServiceStatus: root::SERVICE_STATUS_HANDLE,
            eDirectoryType: root::SERVICE_DIRECTORY_TYPE,
            lpPathBuffer: root::PWCHAR,
            cchPathBufferLength: u32,
            lpcchRequiredBufferLength: *mut u32,
        ) -> u32;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MODEMDEVCAPS {
        pub dwActualSize: u32,
        pub dwRequiredSize: u32,
        pub dwDevSpecificOffset: u32,
        pub dwDevSpecificSize: u32,
        pub dwModemProviderVersion: u32,
        pub dwModemManufacturerOffset: u32,
        pub dwModemManufacturerSize: u32,
        pub dwModemModelOffset: u32,
        pub dwModemModelSize: u32,
        pub dwModemVersionOffset: u32,
        pub dwModemVersionSize: u32,
        pub dwDialOptions: u32,
        pub dwCallSetupFailTimer: u32,
        pub dwInactivityTimeout: u32,
        pub dwSpeakerVolume: u32,
        pub dwSpeakerMode: u32,
        pub dwModemOptions: u32,
        pub dwMaxDTERate: u32,
        pub dwMaxDCERate: u32,
        pub abVariablePortion: [u8; 1usize],
    }
    pub type MODEMDEVCAPS = root::_MODEMDEVCAPS;
    pub type PMODEMDEVCAPS = *mut root::_MODEMDEVCAPS;
    pub type LPMODEMDEVCAPS = *mut root::_MODEMDEVCAPS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _MODEMSETTINGS {
        pub dwActualSize: u32,
        pub dwRequiredSize: u32,
        pub dwDevSpecificOffset: u32,
        pub dwDevSpecificSize: u32,
        pub dwCallSetupFailTimer: u32,
        pub dwInactivityTimeout: u32,
        pub dwSpeakerVolume: u32,
        pub dwSpeakerMode: u32,
        pub dwPreferredModemOptions: u32,
        pub dwNegotiatedModemOptions: u32,
        pub dwNegotiatedDCERate: u32,
        pub abVariablePortion: [u8; 1usize],
    }
    pub type MODEMSETTINGS = root::_MODEMSETTINGS;
    pub type PMODEMSETTINGS = *mut root::_MODEMSETTINGS;
    pub type LPMODEMSETTINGS = *mut root::_MODEMSETTINGS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HIMC__ {
        pub unused: i32,
    }
    pub type HIMC = *mut root::HIMC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HIMCC__ {
        pub unused: i32,
    }
    pub type HIMCC = *mut root::HIMCC__;
    pub type LPHKL = *mut root::HKL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCOMPOSITIONFORM {
        pub dwStyle: u32,
        pub ptCurrentPos: root::POINT,
        pub rcArea: root::RECT,
    }
    pub type COMPOSITIONFORM = root::tagCOMPOSITIONFORM;
    pub type PCOMPOSITIONFORM = *mut root::tagCOMPOSITIONFORM;
    pub type NPCOMPOSITIONFORM = *mut root::tagCOMPOSITIONFORM;
    pub type LPCOMPOSITIONFORM = *mut root::tagCOMPOSITIONFORM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCANDIDATEFORM {
        pub dwIndex: u32,
        pub dwStyle: u32,
        pub ptCurrentPos: root::POINT,
        pub rcArea: root::RECT,
    }
    pub type CANDIDATEFORM = root::tagCANDIDATEFORM;
    pub type PCANDIDATEFORM = *mut root::tagCANDIDATEFORM;
    pub type NPCANDIDATEFORM = *mut root::tagCANDIDATEFORM;
    pub type LPCANDIDATEFORM = *mut root::tagCANDIDATEFORM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagCANDIDATELIST {
        pub dwSize: u32,
        pub dwStyle: u32,
        pub dwCount: u32,
        pub dwSelection: u32,
        pub dwPageStart: u32,
        pub dwPageSize: u32,
        pub dwOffset: [u32; 1usize],
    }
    pub type CANDIDATELIST = root::tagCANDIDATELIST;
    pub type PCANDIDATELIST = *mut root::tagCANDIDATELIST;
    pub type NPCANDIDATELIST = *mut root::tagCANDIDATELIST;
    pub type LPCANDIDATELIST = *mut root::tagCANDIDATELIST;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagREGISTERWORDA {
        pub lpReading: *mut i8,
        pub lpWord: *mut i8,
    }
    pub type REGISTERWORDA = root::tagREGISTERWORDA;
    pub type PREGISTERWORDA = *mut root::tagREGISTERWORDA;
    pub type NPREGISTERWORDA = *mut root::tagREGISTERWORDA;
    pub type LPREGISTERWORDA = *mut root::tagREGISTERWORDA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagREGISTERWORDW {
        pub lpReading: root::LPWSTR,
        pub lpWord: root::LPWSTR,
    }
    pub type REGISTERWORDW = root::tagREGISTERWORDW;
    pub type PREGISTERWORDW = *mut root::tagREGISTERWORDW;
    pub type NPREGISTERWORDW = *mut root::tagREGISTERWORDW;
    pub type LPREGISTERWORDW = *mut root::tagREGISTERWORDW;
    pub type REGISTERWORD = root::REGISTERWORDA;
    pub type PREGISTERWORD = root::PREGISTERWORDA;
    pub type NPREGISTERWORD = root::NPREGISTERWORDA;
    pub type LPREGISTERWORD = root::LPREGISTERWORDA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRECONVERTSTRING {
        pub dwSize: u32,
        pub dwVersion: u32,
        pub dwStrLen: u32,
        pub dwStrOffset: u32,
        pub dwCompStrLen: u32,
        pub dwCompStrOffset: u32,
        pub dwTargetStrLen: u32,
        pub dwTargetStrOffset: u32,
    }
    pub type RECONVERTSTRING = root::tagRECONVERTSTRING;
    pub type PRECONVERTSTRING = *mut root::tagRECONVERTSTRING;
    pub type NPRECONVERTSTRING = *mut root::tagRECONVERTSTRING;
    pub type LPRECONVERTSTRING = *mut root::tagRECONVERTSTRING;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTYLEBUFA {
        pub dwStyle: u32,
        pub szDescription: [i8; 32usize],
    }
    pub type STYLEBUFA = root::tagSTYLEBUFA;
    pub type PSTYLEBUFA = *mut root::tagSTYLEBUFA;
    pub type NPSTYLEBUFA = *mut root::tagSTYLEBUFA;
    pub type LPSTYLEBUFA = *mut root::tagSTYLEBUFA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagSTYLEBUFW {
        pub dwStyle: u32,
        pub szDescription: [u16; 32usize],
    }
    pub type STYLEBUFW = root::tagSTYLEBUFW;
    pub type PSTYLEBUFW = *mut root::tagSTYLEBUFW;
    pub type NPSTYLEBUFW = *mut root::tagSTYLEBUFW;
    pub type LPSTYLEBUFW = *mut root::tagSTYLEBUFW;
    pub type STYLEBUF = root::STYLEBUFA;
    pub type PSTYLEBUF = root::PSTYLEBUFA;
    pub type NPSTYLEBUF = root::NPSTYLEBUFA;
    pub type LPSTYLEBUF = root::LPSTYLEBUFA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagIMEMENUITEMINFOA {
        pub cbSize: root::UINT,
        pub fType: root::UINT,
        pub fState: root::UINT,
        pub wID: root::UINT,
        pub hbmpChecked: root::HBITMAP,
        pub hbmpUnchecked: root::HBITMAP,
        pub dwItemData: u32,
        pub szString: [i8; 80usize],
        pub hbmpItem: root::HBITMAP,
    }
    pub type IMEMENUITEMINFOA = root::tagIMEMENUITEMINFOA;
    pub type PIMEMENUITEMINFOA = *mut root::tagIMEMENUITEMINFOA;
    pub type NPIMEMENUITEMINFOA = *mut root::tagIMEMENUITEMINFOA;
    pub type LPIMEMENUITEMINFOA = *mut root::tagIMEMENUITEMINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagIMEMENUITEMINFOW {
        pub cbSize: root::UINT,
        pub fType: root::UINT,
        pub fState: root::UINT,
        pub wID: root::UINT,
        pub hbmpChecked: root::HBITMAP,
        pub hbmpUnchecked: root::HBITMAP,
        pub dwItemData: u32,
        pub szString: [u16; 80usize],
        pub hbmpItem: root::HBITMAP,
    }
    pub type IMEMENUITEMINFOW = root::tagIMEMENUITEMINFOW;
    pub type PIMEMENUITEMINFOW = *mut root::tagIMEMENUITEMINFOW;
    pub type NPIMEMENUITEMINFOW = *mut root::tagIMEMENUITEMINFOW;
    pub type LPIMEMENUITEMINFOW = *mut root::tagIMEMENUITEMINFOW;
    pub type IMEMENUITEMINFO = root::IMEMENUITEMINFOA;
    pub type PIMEMENUITEMINFO = root::PIMEMENUITEMINFOA;
    pub type NPIMEMENUITEMINFO = root::NPIMEMENUITEMINFOA;
    pub type LPIMEMENUITEMINFO = root::LPIMEMENUITEMINFOA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagIMECHARPOSITION {
        pub dwSize: u32,
        pub dwCharPos: u32,
        pub pt: root::POINT,
        pub cLineHeight: root::UINT,
        pub rcDocument: root::RECT,
    }
    pub type IMECHARPOSITION = root::tagIMECHARPOSITION;
    pub type PIMECHARPOSITION = *mut root::tagIMECHARPOSITION;
    pub type NPIMECHARPOSITION = *mut root::tagIMECHARPOSITION;
    pub type LPIMECHARPOSITION = *mut root::tagIMECHARPOSITION;
    pub type IMCENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: root::HIMC, arg2: root::LPARAM) -> root::BOOL,
    >;
    extern "C" {
        pub fn ImmInstallIMEA(
            lpszIMEFileName: *const i8,
            lpszLayoutText: *const i8,
        ) -> root::HKL;
    }
    extern "C" {
        pub fn ImmInstallIMEW(
            lpszIMEFileName: root::LPCWSTR,
            lpszLayoutText: root::LPCWSTR,
        ) -> root::HKL;
    }
    extern "C" {
        pub fn ImmGetDefaultIMEWnd(arg1: root::HWND) -> root::HWND;
    }
    extern "C" {
        pub fn ImmGetDescriptionA(
            arg1: root::HKL,
            lpszDescription: *mut i8,
            uBufLen: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmGetDescriptionW(
            arg1: root::HKL,
            lpszDescription: root::LPWSTR,
            uBufLen: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmGetIMEFileNameA(
            arg1: root::HKL,
            lpszFileName: *mut i8,
            uBufLen: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmGetIMEFileNameW(
            arg1: root::HKL,
            lpszFileName: root::LPWSTR,
            uBufLen: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmGetProperty(arg1: root::HKL, arg2: u32) -> u32;
    }
    extern "C" {
        pub fn ImmIsIME(arg1: root::HKL) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSimulateHotKey(arg1: root::HWND, arg2: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmCreateContext() -> root::HIMC;
    }
    extern "C" {
        pub fn ImmDestroyContext(arg1: root::HIMC) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetContext(arg1: root::HWND) -> root::HIMC;
    }
    extern "C" {
        pub fn ImmReleaseContext(arg1: root::HWND, arg2: root::HIMC) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmAssociateContext(arg1: root::HWND, arg2: root::HIMC) -> root::HIMC;
    }
    extern "C" {
        pub fn ImmAssociateContextEx(
            arg1: root::HWND,
            arg2: root::HIMC,
            arg3: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetCompositionStringA(
            arg1: root::HIMC,
            arg2: u32,
            lpBuf: root::LPVOID,
            dwBufLen: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn ImmGetCompositionStringW(
            arg1: root::HIMC,
            arg2: u32,
            lpBuf: root::LPVOID,
            dwBufLen: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn ImmSetCompositionStringA(
            arg1: root::HIMC,
            dwIndex: u32,
            lpComp: root::LPVOID,
            dwCompLen: u32,
            lpRead: root::LPVOID,
            dwReadLen: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetCompositionStringW(
            arg1: root::HIMC,
            dwIndex: u32,
            lpComp: root::LPVOID,
            dwCompLen: u32,
            lpRead: root::LPVOID,
            dwReadLen: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetCandidateListCountA(
            arg1: root::HIMC,
            lpdwListCount: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetCandidateListCountW(
            arg1: root::HIMC,
            lpdwListCount: root::LPDWORD,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetCandidateListA(
            arg1: root::HIMC,
            deIndex: u32,
            lpCandList: root::LPCANDIDATELIST,
            dwBufLen: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetCandidateListW(
            arg1: root::HIMC,
            deIndex: u32,
            lpCandList: root::LPCANDIDATELIST,
            dwBufLen: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetGuideLineA(
            arg1: root::HIMC,
            dwIndex: u32,
            lpBuf: *mut i8,
            dwBufLen: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetGuideLineW(
            arg1: root::HIMC,
            dwIndex: u32,
            lpBuf: root::LPWSTR,
            dwBufLen: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetConversionStatus(
            arg1: root::HIMC,
            lpfdwConversion: root::LPDWORD,
            lpfdwSentence: root::LPDWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetConversionStatus(
            arg1: root::HIMC,
            arg2: u32,
            arg3: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetOpenStatus(arg1: root::HIMC) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetOpenStatus(arg1: root::HIMC, arg2: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetCompositionFontA(arg1: root::HIMC, lplf: root::LPLOGFONTA) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetCompositionFontW(arg1: root::HIMC, lplf: root::LPLOGFONTW) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetCompositionFontA(arg1: root::HIMC, lplf: root::LPLOGFONTA) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetCompositionFontW(arg1: root::HIMC, lplf: root::LPLOGFONTW) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmConfigureIMEA(
            arg1: root::HKL,
            arg2: root::HWND,
            arg3: u32,
            arg4: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmConfigureIMEW(
            arg1: root::HKL,
            arg2: root::HWND,
            arg3: u32,
            arg4: root::LPVOID,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmEscapeA(
            arg1: root::HKL,
            arg2: root::HIMC,
            arg3: root::UINT,
            arg4: root::LPVOID,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn ImmEscapeW(
            arg1: root::HKL,
            arg2: root::HIMC,
            arg3: root::UINT,
            arg4: root::LPVOID,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn ImmGetConversionListA(
            arg1: root::HKL,
            arg2: root::HIMC,
            lpSrc: *const i8,
            lpDst: root::LPCANDIDATELIST,
            dwBufLen: u32,
            uFlag: root::UINT,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetConversionListW(
            arg1: root::HKL,
            arg2: root::HIMC,
            lpSrc: root::LPCWSTR,
            lpDst: root::LPCANDIDATELIST,
            dwBufLen: u32,
            uFlag: root::UINT,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmNotifyIME(
            arg1: root::HIMC,
            dwAction: u32,
            dwIndex: u32,
            dwValue: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetStatusWindowPos(arg1: root::HIMC, lpptPos: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetStatusWindowPos(arg1: root::HIMC, lpptPos: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetCompositionWindow(
            arg1: root::HIMC,
            lpCompForm: root::LPCOMPOSITIONFORM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetCompositionWindow(
            arg1: root::HIMC,
            lpCompForm: root::LPCOMPOSITIONFORM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetCandidateWindow(
            arg1: root::HIMC,
            arg2: u32,
            lpCandidate: root::LPCANDIDATEFORM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmSetCandidateWindow(
            arg1: root::HIMC,
            lpCandidate: root::LPCANDIDATEFORM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmIsUIMessageA(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmIsUIMessageW(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetVirtualKey(arg1: root::HWND) -> root::UINT;
    }
    pub type REGISTERWORDENUMPROCA = ::std::option::Option<
        unsafe extern "C" fn(
            lpszReading: *const i8,
            arg1: u32,
            lpszString: *const i8,
            arg2: root::LPVOID,
        ) -> i32,
    >;
    pub type REGISTERWORDENUMPROCW = ::std::option::Option<
        unsafe extern "C" fn(
            lpszReading: root::LPCWSTR,
            arg1: u32,
            lpszString: root::LPCWSTR,
            arg2: root::LPVOID,
        ) -> i32,
    >;
    extern "C" {
        pub fn ImmRegisterWordA(
            arg1: root::HKL,
            lpszReading: *const i8,
            arg2: u32,
            lpszRegister: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmRegisterWordW(
            arg1: root::HKL,
            lpszReading: root::LPCWSTR,
            arg2: u32,
            lpszRegister: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmUnregisterWordA(
            arg1: root::HKL,
            lpszReading: *const i8,
            arg2: u32,
            lpszUnregister: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmUnregisterWordW(
            arg1: root::HKL,
            lpszReading: root::LPCWSTR,
            arg2: u32,
            lpszUnregister: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetRegisterWordStyleA(
            arg1: root::HKL,
            nItem: root::UINT,
            lpStyleBuf: root::LPSTYLEBUFA,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmGetRegisterWordStyleW(
            arg1: root::HKL,
            nItem: root::UINT,
            lpStyleBuf: root::LPSTYLEBUFW,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmEnumRegisterWordA(
            arg1: root::HKL,
            arg2: root::REGISTERWORDENUMPROCA,
            lpszReading: *const i8,
            arg3: u32,
            lpszRegister: *const i8,
            arg4: root::LPVOID,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmEnumRegisterWordW(
            arg1: root::HKL,
            arg2: root::REGISTERWORDENUMPROCW,
            lpszReading: root::LPCWSTR,
            arg3: u32,
            lpszRegister: root::LPCWSTR,
            arg4: root::LPVOID,
        ) -> root::UINT;
    }
    extern "C" {
        pub fn ImmDisableIME(arg1: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmEnumInputContext(
            idThread: u32,
            lpfn: root::IMCENUMPROC,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmGetImeMenuItemsA(
            arg1: root::HIMC,
            arg2: u32,
            arg3: u32,
            lpImeParentMenu: root::LPIMEMENUITEMINFOA,
            lpImeMenu: root::LPIMEMENUITEMINFOA,
            dwSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmGetImeMenuItemsW(
            arg1: root::HIMC,
            arg2: u32,
            arg3: u32,
            lpImeParentMenu: root::LPIMEMENUITEMINFOW,
            lpImeMenu: root::LPIMEMENUITEMINFOW,
            dwSize: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn ImmDisableTextFrameService(idThread: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn ImmDisableLegacyIME() -> root::BOOL;
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct _SHITEMID {
        pub cb: root::USHORT,
        pub abID: [u8; 1usize],
    }
    pub type SHITEMID = root::_SHITEMID;
    pub type LPSHITEMID = *mut root::SHITEMID;
    pub type LPCSHITEMID = *const root::SHITEMID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ITEMIDLIST {
        pub mkid: root::SHITEMID,
    }
    pub type ITEMIDLIST = root::_ITEMIDLIST;
    pub type ITEMIDLIST_RELATIVE = root::ITEMIDLIST;
    pub type ITEMID_CHILD = root::ITEMIDLIST;
    pub type ITEMIDLIST_ABSOLUTE = root::ITEMIDLIST;
    pub type wirePIDL = *mut root::BYTE_BLOB;
    pub type LPITEMIDLIST = *mut root::ITEMIDLIST;
    pub type LPCITEMIDLIST = *const root::ITEMIDLIST;
    pub const tagSTRRET_TYPE_STRRET_WSTR: root::tagSTRRET_TYPE = 0;
    pub const tagSTRRET_TYPE_STRRET_OFFSET: root::tagSTRRET_TYPE = 1;
    pub const tagSTRRET_TYPE_STRRET_CSTR: root::tagSTRRET_TYPE = 2;
    pub type tagSTRRET_TYPE = i32;
    pub use self::super::root::tagSTRRET_TYPE as STRRET_TYPE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _STRRET {
        pub uType: root::UINT,
        pub __bindgen_anon_1: root::_STRRET__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _STRRET__bindgen_ty_1 {
        pub pOleStr: root::LPWSTR,
        pub uOffset: root::UINT,
        pub cStr: [i8; 260usize],
    }
    pub type STRRET = root::_STRRET;
    pub type LPSTRRET = *mut root::STRRET;
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct _SHELLDETAILS {
        pub fmt: i32,
        pub cxChar: i32,
        pub str_: root::STRRET,
    }
    pub type SHELLDETAILS = root::_SHELLDETAILS;
    pub type LPSHELLDETAILS = *mut root::_SHELLDETAILS;
    pub const tagPERCEIVED_PERCEIVED_TYPE_FIRST: root::tagPERCEIVED = -3;
    pub const tagPERCEIVED_PERCEIVED_TYPE_CUSTOM: root::tagPERCEIVED = -3;
    pub const tagPERCEIVED_PERCEIVED_TYPE_UNSPECIFIED: root::tagPERCEIVED = -2;
    pub const tagPERCEIVED_PERCEIVED_TYPE_FOLDER: root::tagPERCEIVED = -1;
    pub const tagPERCEIVED_PERCEIVED_TYPE_UNKNOWN: root::tagPERCEIVED = 0;
    pub const tagPERCEIVED_PERCEIVED_TYPE_TEXT: root::tagPERCEIVED = 1;
    pub const tagPERCEIVED_PERCEIVED_TYPE_IMAGE: root::tagPERCEIVED = 2;
    pub const tagPERCEIVED_PERCEIVED_TYPE_AUDIO: root::tagPERCEIVED = 3;
    pub const tagPERCEIVED_PERCEIVED_TYPE_VIDEO: root::tagPERCEIVED = 4;
    pub const tagPERCEIVED_PERCEIVED_TYPE_COMPRESSED: root::tagPERCEIVED = 5;
    pub const tagPERCEIVED_PERCEIVED_TYPE_DOCUMENT: root::tagPERCEIVED = 6;
    pub const tagPERCEIVED_PERCEIVED_TYPE_SYSTEM: root::tagPERCEIVED = 7;
    pub const tagPERCEIVED_PERCEIVED_TYPE_APPLICATION: root::tagPERCEIVED = 8;
    pub const tagPERCEIVED_PERCEIVED_TYPE_GAMEMEDIA: root::tagPERCEIVED = 9;
    pub const tagPERCEIVED_PERCEIVED_TYPE_CONTACTS: root::tagPERCEIVED = 10;
    pub const tagPERCEIVED_PERCEIVED_TYPE_LAST: root::tagPERCEIVED = 10;
    pub type tagPERCEIVED = i32;
    pub use self::super::root::tagPERCEIVED as PERCEIVED;
    pub type PERCEIVEDFLAG = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COMDLG_FILTERSPEC {
        pub pszName: root::LPCWSTR,
        pub pszSpec: root::LPCWSTR,
    }
    pub type COMDLG_FILTERSPEC = root::_COMDLG_FILTERSPEC;
    pub type KNOWNFOLDERID = root::GUID;
    pub type KF_REDIRECT_FLAGS = u32;
    pub type FOLDERTYPEID = root::GUID;
    pub type TASKOWNERID = root::GUID;
    pub type ELEMENTID = root::GUID;
    pub const tagSHCOLSTATE_SHCOLSTATE_DEFAULT: root::tagSHCOLSTATE = 0;
    pub const tagSHCOLSTATE_SHCOLSTATE_TYPE_STR: root::tagSHCOLSTATE = 1;
    pub const tagSHCOLSTATE_SHCOLSTATE_TYPE_INT: root::tagSHCOLSTATE = 2;
    pub const tagSHCOLSTATE_SHCOLSTATE_TYPE_DATE: root::tagSHCOLSTATE = 3;
    pub const tagSHCOLSTATE_SHCOLSTATE_TYPEMASK: root::tagSHCOLSTATE = 15;
    pub const tagSHCOLSTATE_SHCOLSTATE_ONBYDEFAULT: root::tagSHCOLSTATE = 16;
    pub const tagSHCOLSTATE_SHCOLSTATE_SLOW: root::tagSHCOLSTATE = 32;
    pub const tagSHCOLSTATE_SHCOLSTATE_EXTENDED: root::tagSHCOLSTATE = 64;
    pub const tagSHCOLSTATE_SHCOLSTATE_SECONDARYUI: root::tagSHCOLSTATE = 128;
    pub const tagSHCOLSTATE_SHCOLSTATE_HIDDEN: root::tagSHCOLSTATE = 256;
    pub const tagSHCOLSTATE_SHCOLSTATE_PREFER_VARCMP: root::tagSHCOLSTATE = 512;
    pub const tagSHCOLSTATE_SHCOLSTATE_PREFER_FMTCMP: root::tagSHCOLSTATE = 1024;
    pub const tagSHCOLSTATE_SHCOLSTATE_NOSORTBYFOLDERNESS: root::tagSHCOLSTATE = 2048;
    pub const tagSHCOLSTATE_SHCOLSTATE_VIEWONLY: root::tagSHCOLSTATE = 65536;
    pub const tagSHCOLSTATE_SHCOLSTATE_BATCHREAD: root::tagSHCOLSTATE = 131072;
    pub const tagSHCOLSTATE_SHCOLSTATE_NO_GROUPBY: root::tagSHCOLSTATE = 262144;
    pub const tagSHCOLSTATE_SHCOLSTATE_FIXED_WIDTH: root::tagSHCOLSTATE = 4096;
    pub const tagSHCOLSTATE_SHCOLSTATE_NODPISCALE: root::tagSHCOLSTATE = 8192;
    pub const tagSHCOLSTATE_SHCOLSTATE_FIXED_RATIO: root::tagSHCOLSTATE = 16384;
    pub const tagSHCOLSTATE_SHCOLSTATE_DISPLAYMASK: root::tagSHCOLSTATE = 61440;
    pub type tagSHCOLSTATE = i32;
    pub use self::super::root::tagSHCOLSTATE as SHCOLSTATE;
    pub type SHCOLSTATEF = u32;
    pub type SHCOLUMNID = root::PROPERTYKEY;
    pub type LPCSHCOLUMNID = *const root::SHCOLUMNID;
    pub const DEVICE_SCALE_FACTOR_DEVICE_SCALE_FACTOR_INVALID: root::DEVICE_SCALE_FACTOR = 0;
    pub const DEVICE_SCALE_FACTOR_SCALE_100_PERCENT: root::DEVICE_SCALE_FACTOR = 100;
    pub const DEVICE_SCALE_FACTOR_SCALE_120_PERCENT: root::DEVICE_SCALE_FACTOR = 120;
    pub const DEVICE_SCALE_FACTOR_SCALE_125_PERCENT: root::DEVICE_SCALE_FACTOR = 125;
    pub const DEVICE_SCALE_FACTOR_SCALE_140_PERCENT: root::DEVICE_SCALE_FACTOR = 140;
    pub const DEVICE_SCALE_FACTOR_SCALE_150_PERCENT: root::DEVICE_SCALE_FACTOR = 150;
    pub const DEVICE_SCALE_FACTOR_SCALE_160_PERCENT: root::DEVICE_SCALE_FACTOR = 160;
    pub const DEVICE_SCALE_FACTOR_SCALE_175_PERCENT: root::DEVICE_SCALE_FACTOR = 175;
    pub const DEVICE_SCALE_FACTOR_SCALE_180_PERCENT: root::DEVICE_SCALE_FACTOR = 180;
    pub const DEVICE_SCALE_FACTOR_SCALE_200_PERCENT: root::DEVICE_SCALE_FACTOR = 200;
    pub const DEVICE_SCALE_FACTOR_SCALE_225_PERCENT: root::DEVICE_SCALE_FACTOR = 225;
    pub const DEVICE_SCALE_FACTOR_SCALE_250_PERCENT: root::DEVICE_SCALE_FACTOR = 250;
    pub const DEVICE_SCALE_FACTOR_SCALE_300_PERCENT: root::DEVICE_SCALE_FACTOR = 300;
    pub const DEVICE_SCALE_FACTOR_SCALE_350_PERCENT: root::DEVICE_SCALE_FACTOR = 350;
    pub const DEVICE_SCALE_FACTOR_SCALE_400_PERCENT: root::DEVICE_SCALE_FACTOR = 400;
    pub const DEVICE_SCALE_FACTOR_SCALE_450_PERCENT: root::DEVICE_SCALE_FACTOR = 450;
    pub const DEVICE_SCALE_FACTOR_SCALE_500_PERCENT: root::DEVICE_SCALE_FACTOR = 500;
    pub type DEVICE_SCALE_FACTOR = i32;
    extern "C" {
        pub static mut __MIDL_itf_shtypes_0000_0000_v0_0_c_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub static mut __MIDL_itf_shtypes_0000_0000_v0_0_s_ifspec: root::RPC_IF_HANDLE;
    }
    extern "C" {
        pub fn StrChrA(pszStart: *const i8, wMatch: u16) -> *mut i8;
    }
    extern "C" {
        pub fn StrChrW(pszStart: *const u16, wMatch: u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrChrIA(pszStart: *const i8, wMatch: u16) -> *mut i8;
    }
    extern "C" {
        pub fn StrChrIW(pszStart: *const u16, wMatch: u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrChrNW(
            pszStart: *const u16,
            wMatch: u16,
            cchMax: root::UINT,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrChrNIW(
            pszStart: *const u16,
            wMatch: u16,
            cchMax: root::UINT,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrCmpNA(
            psz1: *const i8,
            psz2: *const i8,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCmpNW(
            psz1: *const u16,
            psz2: *const u16,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCmpNIA(
            psz1: *const i8,
            psz2: *const i8,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCmpNIW(
            psz1: *const u16,
            psz2: *const u16,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCSpnA(pszStr: *const i8, pszSet: *const i8) -> i32;
    }
    extern "C" {
        pub fn StrCSpnW(pszStr: *const u16, pszSet: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrCSpnIA(pszStr: *const i8, pszSet: *const i8) -> i32;
    }
    extern "C" {
        pub fn StrCSpnIW(pszStr: *const u16, pszSet: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrDupA(pszSrch: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn StrDupW(pszSrch: *const u16) -> *mut u16;
    }
    pub const tagSFBS_FLAGS_SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT: root::tagSFBS_FLAGS = 1;
    pub const tagSFBS_FLAGS_SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS: root::tagSFBS_FLAGS = 2;
    pub type tagSFBS_FLAGS = i32;
    pub type SFBS_FLAGS = i32;
    extern "C" {
        pub fn StrFormatByteSizeEx(
            ull: root::ULONGLONG,
            flags: root::SFBS_FLAGS,
            pszBuf: *mut u16,
            cchBuf: root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StrFormatByteSizeA(
            dw: u32,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrFormatByteSize64A(
            qdw: root::LONGLONG,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrFormatByteSizeW(
            qdw: root::LONGLONG,
            pszBuf: *mut u16,
            cchBuf: root::UINT,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrFormatKBSizeW(
            qdw: root::LONGLONG,
            pszBuf: *mut u16,
            cchBuf: root::UINT,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrFormatKBSizeA(
            qdw: root::LONGLONG,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrFromTimeIntervalA(
            pszOut: *mut i8,
            cchMax: root::UINT,
            dwTimeMS: u32,
            digits: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrFromTimeIntervalW(
            pszOut: *mut u16,
            cchMax: root::UINT,
            dwTimeMS: u32,
            digits: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrIsIntlEqualA(
            fCaseSens: root::BOOL,
            pszString1: *const i8,
            pszString2: *const i8,
            nChar: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StrIsIntlEqualW(
            fCaseSens: root::BOOL,
            pszString1: *const u16,
            pszString2: *const u16,
            nChar: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StrNCatA(
            psz1: *mut i8,
            psz2: *const i8,
            cchMax: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrNCatW(
            psz1: *mut u16,
            psz2: *const u16,
            cchMax: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrPBrkA(psz: *const i8, pszSet: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn StrPBrkW(psz: *const u16, pszSet: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrRChrA(
            pszStart: *const i8,
            pszEnd: *const i8,
            wMatch: u16,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrRChrW(
            pszStart: *const u16,
            pszEnd: *const u16,
            wMatch: u16,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrRChrIA(
            pszStart: *const i8,
            pszEnd: *const i8,
            wMatch: u16,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrRChrIW(
            pszStart: *const u16,
            pszEnd: *const u16,
            wMatch: u16,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrRStrIA(
            pszSource: *const i8,
            pszLast: *const i8,
            pszSrch: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn StrRStrIW(
            pszSource: *const u16,
            pszLast: *const u16,
            pszSrch: *const u16,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrSpnA(psz: *const i8, pszSet: *const i8) -> i32;
    }
    extern "C" {
        pub fn StrSpnW(psz: *const u16, pszSet: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrStrA(pszFirst: *const i8, pszSrch: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn StrStrW(pszFirst: *const u16, pszSrch: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrStrIA(pszFirst: *const i8, pszSrch: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn StrStrIW(pszFirst: *const u16, pszSrch: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrStrNW(
            pszFirst: *const u16,
            pszSrch: *const u16,
            cchMax: root::UINT,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrStrNIW(
            pszFirst: *const u16,
            pszSrch: *const u16,
            cchMax: root::UINT,
        ) -> *mut u16;
    }
    pub type STIF_FLAGS = i32;
    extern "C" {
        pub fn StrToIntA(pszSrc: *const i8) -> i32;
    }
    extern "C" {
        pub fn StrToIntW(pszSrc: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrToIntExA(
            pszString: *const i8,
            dwFlags: root::STIF_FLAGS,
            piRet: *mut i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StrToIntExW(
            pszString: *const u16,
            dwFlags: root::STIF_FLAGS,
            piRet: *mut i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StrToInt64ExA(
            pszString: *const i8,
            dwFlags: root::STIF_FLAGS,
            pllRet: *mut root::LONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StrToInt64ExW(
            pszString: *const u16,
            dwFlags: root::STIF_FLAGS,
            pllRet: *mut root::LONGLONG,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn StrTrimA(psz: *mut i8, pszTrimChars: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn StrTrimW(psz: *mut u16, pszTrimChars: *const u16) -> root::BOOL;
    }
    extern "C" {
        pub fn StrCatW(psz1: *mut u16, psz2: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrCmpW(psz1: *const u16, psz2: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrCmpIW(psz1: *const u16, psz2: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrCpyW(psz1: *mut u16, psz2: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn StrCpyNW(
            pszDst: *mut u16,
            pszSrc: *const u16,
            cchMax: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrCatBuffW(
            pszDest: *mut u16,
            pszSrc: *const u16,
            cchDestBuffSize: i32,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn StrCatBuffA(
            pszDest: *mut i8,
            pszSrc: *const i8,
            cchDestBuffSize: i32,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn ChrCmpIA(w1: u16, w2: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn ChrCmpIW(w1: u16, w2: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn wvnsprintfA(
            pszDest: *mut i8,
            cchDest: i32,
            pszFmt: *const i8,
            arglist: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn wvnsprintfW(
            pszDest: *mut u16,
            cchDest: i32,
            pszFmt: *const u16,
            arglist: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn wnsprintfA(
            pszDest: *mut i8,
            cchDest: i32,
            pszFmt: *const i8,
            ...
        ) -> i32;
    }
    extern "C" {
        pub fn wnsprintfW(
            pszDest: *mut u16,
            cchDest: i32,
            pszFmt: *const u16,
            ...
        ) -> i32;
    }
    extern "C" {
        pub fn StrRetToStrA(
            pstr: *mut root::STRRET,
            pidl: root::LPCITEMIDLIST,
            ppsz: *mut *mut i8,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StrRetToStrW(
            pstr: *mut root::STRRET,
            pidl: root::LPCITEMIDLIST,
            ppsz: *mut root::LPWSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StrRetToBufA(
            pstr: *mut root::STRRET,
            pidl: root::LPCITEMIDLIST,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn StrRetToBufW(
            pstr: *mut root::STRRET,
            pidl: root::LPCITEMIDLIST,
            pszBuf: root::LPWSTR,
            cchBuf: root::UINT,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHStrDupA(psz: *const i8, ppwsz: *mut root::LPWSTR) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHStrDupW(psz: root::LPCWSTR, ppwsz: *mut root::LPWSTR) -> root::HRESULT;
    }
    extern "C" {
        pub fn StrCmpLogicalW(psz1: *const u16, psz2: *const u16) -> i32;
    }
    extern "C" {
        pub fn StrCatChainW(
            pszDst: *mut u16,
            cchDst: u32,
            ichAt: u32,
            pszSrc: *const u16,
        ) -> u32;
    }
    extern "C" {
        pub fn StrRetToBSTR(
            pstr: *mut root::STRRET,
            pidl: root::LPCITEMIDLIST,
            pbstr: *mut root::BSTR,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHLoadIndirectString(
            pszSource: *const u16,
            pszOutBuf: *mut u16,
            cchOutBuf: root::UINT,
            ppvReserved: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IsCharSpaceA(wch: i8) -> root::BOOL;
    }
    extern "C" {
        pub fn IsCharSpaceW(wch: u16) -> root::BOOL;
    }
    extern "C" {
        pub fn StrCmpCA(pszStr1: *const i8, pszStr2: *const i8) -> i32;
    }
    extern "C" {
        pub fn StrCmpCW(pszStr1: root::LPCWSTR, pszStr2: root::LPCWSTR) -> i32;
    }
    extern "C" {
        pub fn StrCmpICA(pszStr1: *const i8, pszStr2: *const i8) -> i32;
    }
    extern "C" {
        pub fn StrCmpICW(pszStr1: root::LPCWSTR, pszStr2: root::LPCWSTR) -> i32;
    }
    extern "C" {
        pub fn StrCmpNCA(
            pszStr1: *const i8,
            pszStr2: *const i8,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCmpNCW(
            pszStr1: root::LPCWSTR,
            pszStr2: root::LPCWSTR,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCmpNICA(
            pszStr1: *const i8,
            pszStr2: *const i8,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn StrCmpNICW(
            pszStr1: root::LPCWSTR,
            pszStr2: root::LPCWSTR,
            nChar: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn IntlStrEqWorkerA(
            fCaseSens: root::BOOL,
            lpString1: *const i8,
            lpString2: *const i8,
            nChar: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn IntlStrEqWorkerW(
            fCaseSens: root::BOOL,
            lpString1: root::LPCWSTR,
            lpString2: root::LPCWSTR,
            nChar: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathAddBackslashA(pszPath: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathAddBackslashW(pszPath: root::LPWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathAddExtensionA(pszPath: *mut i8, pszExt: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathAddExtensionW(pszPath: root::LPWSTR, pszExt: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathAppendA(pszPath: *mut i8, pszMore: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathAppendW(pszPath: root::LPWSTR, pszMore: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathBuildRootA(pszRoot: *mut i8, iDrive: i32) -> *mut i8;
    }
    extern "C" {
        pub fn PathBuildRootW(pszRoot: root::LPWSTR, iDrive: i32)
            -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathCanonicalizeA(pszBuf: *mut i8, pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathCanonicalizeW(pszBuf: root::LPWSTR, pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathCombineA(
            pszDest: *mut i8,
            pszDir: *const i8,
            pszFile: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn PathCombineW(
            pszDest: root::LPWSTR,
            pszDir: root::LPCWSTR,
            pszFile: root::LPCWSTR,
        ) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathCompactPathA(hDC: root::HDC, pszPath: *mut i8, dx: root::UINT)
            -> root::BOOL;
    }
    extern "C" {
        pub fn PathCompactPathW(
            hDC: root::HDC,
            pszPath: root::LPWSTR,
            dx: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathCompactPathExA(
            pszOut: *mut i8,
            pszSrc: *const i8,
            cchMax: root::UINT,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathCompactPathExW(
            pszOut: root::LPWSTR,
            pszSrc: root::LPCWSTR,
            cchMax: root::UINT,
            dwFlags: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathCommonPrefixA(
            pszFile1: *const i8,
            pszFile2: *const i8,
            achPath: *mut i8,
        ) -> i32;
    }
    extern "C" {
        pub fn PathCommonPrefixW(
            pszFile1: root::LPCWSTR,
            pszFile2: root::LPCWSTR,
            achPath: root::LPWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn PathFileExistsA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathFileExistsW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathFindExtensionA(pszPath: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathFindExtensionW(pszPath: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathFindFileNameA(pszPath: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathFindFileNameW(pszPath: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathFindNextComponentA(pszPath: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathFindNextComponentW(pszPath: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathFindOnPathA(pszPath: *mut i8, ppszOtherDirs: root::PZPCSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathFindOnPathW(pszPath: root::LPWSTR, ppszOtherDirs: root::PZPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathFindSuffixArrayA(
            pszPath: *const i8,
            apszSuffix: *const *const i8,
            iArraySize: i32,
        ) -> *const i8;
    }
    extern "C" {
        pub fn PathFindSuffixArrayW(
            pszPath: root::LPCWSTR,
            apszSuffix: *const root::LPCWSTR,
            iArraySize: i32,
        ) -> root::LPCWSTR;
    }
    extern "C" {
        pub fn PathGetArgsA(pszPath: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathGetArgsW(pszPath: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathIsLFNFileSpecA(pszName: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsLFNFileSpecW(pszName: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathGetCharTypeA(ch: root::UCHAR) -> root::UINT;
    }
    extern "C" {
        pub fn PathGetCharTypeW(ch: u16) -> root::UINT;
    }
    extern "C" {
        pub fn PathGetDriveNumberA(pszPath: *const i8) -> i32;
    }
    extern "C" {
        pub fn PathGetDriveNumberW(pszPath: root::LPCWSTR) -> i32;
    }
    extern "C" {
        pub fn PathIsDirectoryA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsDirectoryW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsDirectoryEmptyA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsDirectoryEmptyW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsFileSpecA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsFileSpecW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsPrefixA(pszPrefix: *const i8, pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsPrefixW(pszPrefix: root::LPCWSTR, pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsRelativeA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsRelativeW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsRootA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsRootW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsSameRootA(pszPath1: *const i8, pszPath2: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsSameRootW(pszPath1: root::LPCWSTR, pszPath2: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsUNCA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsUNCW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsNetworkPathA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsNetworkPathW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsUNCServerA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsUNCServerW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsUNCServerShareA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsUNCServerShareW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsContentTypeA(
            pszPath: *const i8,
            pszContentType: *const i8,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsContentTypeW(
            pszPath: root::LPCWSTR,
            pszContentType: root::LPCWSTR,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsURLA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsURLW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMakePrettyA(pszPath: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMakePrettyW(pszPath: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMatchSpecA(pszFile: *const i8, pszSpec: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMatchSpecW(pszFile: root::LPCWSTR, pszSpec: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMatchSpecExA(
            pszFile: *const i8,
            pszSpec: *const i8,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PathMatchSpecExW(
            pszFile: root::LPCWSTR,
            pszSpec: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PathParseIconLocationA(pszIconFile: *mut i8) -> i32;
    }
    extern "C" {
        pub fn PathParseIconLocationW(pszIconFile: root::LPWSTR) -> i32;
    }
    extern "C" {
        pub fn PathQuoteSpacesA(lpsz: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathQuoteSpacesW(lpsz: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathRelativePathToA(
            pszPath: *mut i8,
            pszFrom: *const i8,
            dwAttrFrom: u32,
            pszTo: *const i8,
            dwAttrTo: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathRelativePathToW(
            pszPath: root::LPWSTR,
            pszFrom: root::LPCWSTR,
            dwAttrFrom: u32,
            pszTo: root::LPCWSTR,
            dwAttrTo: u32,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathRemoveArgsA(pszPath: *mut i8);
    }
    extern "C" {
        pub fn PathRemoveArgsW(pszPath: root::LPWSTR);
    }
    extern "C" {
        pub fn PathRemoveBackslashA(pszPath: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathRemoveBackslashW(pszPath: root::LPWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathRemoveBlanksA(pszPath: *mut i8);
    }
    extern "C" {
        pub fn PathRemoveBlanksW(pszPath: root::LPWSTR);
    }
    extern "C" {
        pub fn PathRemoveExtensionA(pszPath: *mut i8);
    }
    extern "C" {
        pub fn PathRemoveExtensionW(pszPath: root::LPWSTR);
    }
    extern "C" {
        pub fn PathRemoveFileSpecA(pszPath: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathRemoveFileSpecW(pszPath: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathRenameExtensionA(pszPath: *mut i8, pszExt: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathRenameExtensionW(pszPath: root::LPWSTR, pszExt: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathSearchAndQualifyA(
            pszPath: *const i8,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathSearchAndQualifyW(
            pszPath: root::LPCWSTR,
            pszBuf: root::LPWSTR,
            cchBuf: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathSetDlgItemPathA(
            hDlg: root::HWND,
            id: i32,
            pszPath: *const i8,
        );
    }
    extern "C" {
        pub fn PathSetDlgItemPathW(
            hDlg: root::HWND,
            id: i32,
            pszPath: root::LPCWSTR,
        );
    }
    extern "C" {
        pub fn PathSkipRootA(pszPath: *const i8) -> *mut i8;
    }
    extern "C" {
        pub fn PathSkipRootW(pszPath: root::LPCWSTR) -> root::LPWSTR;
    }
    extern "C" {
        pub fn PathStripPathA(pszPath: *mut i8);
    }
    extern "C" {
        pub fn PathStripPathW(pszPath: root::LPWSTR);
    }
    extern "C" {
        pub fn PathStripToRootA(pszPath: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathStripToRootW(pszPath: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathUnquoteSpacesA(lpsz: *mut i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathUnquoteSpacesW(lpsz: root::LPWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMakeSystemFolderA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathMakeSystemFolderW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathUnmakeSystemFolderA(pszPath: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn PathUnmakeSystemFolderW(pszPath: root::LPCWSTR) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsSystemFolderA(pszPath: *const i8, dwAttrb: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn PathIsSystemFolderW(pszPath: root::LPCWSTR, dwAttrb: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn PathUndecorateA(pszPath: *mut i8);
    }
    extern "C" {
        pub fn PathUndecorateW(pszPath: root::LPWSTR);
    }
    extern "C" {
        pub fn PathUnExpandEnvStringsA(
            pszPath: *const i8,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn PathUnExpandEnvStringsW(
            pszPath: root::LPCWSTR,
            pszBuf: root::LPWSTR,
            cchBuf: root::UINT,
        ) -> root::BOOL;
    }
    pub const URL_SCHEME_URL_SCHEME_INVALID: root::URL_SCHEME = -1;
    pub const URL_SCHEME_URL_SCHEME_UNKNOWN: root::URL_SCHEME = 0;
    pub const URL_SCHEME_URL_SCHEME_FTP: root::URL_SCHEME = 1;
    pub const URL_SCHEME_URL_SCHEME_HTTP: root::URL_SCHEME = 2;
    pub const URL_SCHEME_URL_SCHEME_GOPHER: root::URL_SCHEME = 3;
    pub const URL_SCHEME_URL_SCHEME_MAILTO: root::URL_SCHEME = 4;
    pub const URL_SCHEME_URL_SCHEME_NEWS: root::URL_SCHEME = 5;
    pub const URL_SCHEME_URL_SCHEME_NNTP: root::URL_SCHEME = 6;
    pub const URL_SCHEME_URL_SCHEME_TELNET: root::URL_SCHEME = 7;
    pub const URL_SCHEME_URL_SCHEME_WAIS: root::URL_SCHEME = 8;
    pub const URL_SCHEME_URL_SCHEME_FILE: root::URL_SCHEME = 9;
    pub const URL_SCHEME_URL_SCHEME_MK: root::URL_SCHEME = 10;
    pub const URL_SCHEME_URL_SCHEME_HTTPS: root::URL_SCHEME = 11;
    pub const URL_SCHEME_URL_SCHEME_SHELL: root::URL_SCHEME = 12;
    pub const URL_SCHEME_URL_SCHEME_SNEWS: root::URL_SCHEME = 13;
    pub const URL_SCHEME_URL_SCHEME_LOCAL: root::URL_SCHEME = 14;
    pub const URL_SCHEME_URL_SCHEME_JAVASCRIPT: root::URL_SCHEME = 15;
    pub const URL_SCHEME_URL_SCHEME_VBSCRIPT: root::URL_SCHEME = 16;
    pub const URL_SCHEME_URL_SCHEME_ABOUT: root::URL_SCHEME = 17;
    pub const URL_SCHEME_URL_SCHEME_RES: root::URL_SCHEME = 18;
    pub const URL_SCHEME_URL_SCHEME_MSSHELLROOTED: root::URL_SCHEME = 19;
    pub const URL_SCHEME_URL_SCHEME_MSSHELLIDLIST: root::URL_SCHEME = 20;
    pub const URL_SCHEME_URL_SCHEME_MSHELP: root::URL_SCHEME = 21;
    pub const URL_SCHEME_URL_SCHEME_MSSHELLDEVICE: root::URL_SCHEME = 22;
    pub const URL_SCHEME_URL_SCHEME_WILDCARD: root::URL_SCHEME = 23;
    pub const URL_SCHEME_URL_SCHEME_SEARCH_MS: root::URL_SCHEME = 24;
    pub const URL_SCHEME_URL_SCHEME_SEARCH: root::URL_SCHEME = 25;
    pub const URL_SCHEME_URL_SCHEME_KNOWNFOLDER: root::URL_SCHEME = 26;
    pub const URL_SCHEME_URL_SCHEME_MAXVALUE: root::URL_SCHEME = 27;
    pub type URL_SCHEME = i32;
    pub const URL_PART_URL_PART_NONE: root::URL_PART = 0;
    pub const URL_PART_URL_PART_SCHEME: root::URL_PART = 1;
    pub const URL_PART_URL_PART_HOSTNAME: root::URL_PART = 2;
    pub const URL_PART_URL_PART_USERNAME: root::URL_PART = 3;
    pub const URL_PART_URL_PART_PASSWORD: root::URL_PART = 4;
    pub const URL_PART_URL_PART_PORT: root::URL_PART = 5;
    pub const URL_PART_URL_PART_QUERY: root::URL_PART = 6;
    pub type URL_PART = i32;
    pub const URLIS_URLIS_URL: root::URLIS = 0;
    pub const URLIS_URLIS_OPAQUE: root::URLIS = 1;
    pub const URLIS_URLIS_NOHISTORY: root::URLIS = 2;
    pub const URLIS_URLIS_FILEURL: root::URLIS = 3;
    pub const URLIS_URLIS_APPLIABLE: root::URLIS = 4;
    pub const URLIS_URLIS_DIRECTORY: root::URLIS = 5;
    pub const URLIS_URLIS_HASQUERY: root::URLIS = 6;
    pub type URLIS = i32;
    extern "C" {
        pub fn UrlCompareA(
            psz1: *const i8,
            psz2: *const i8,
            fIgnoreSlash: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn UrlCompareW(
            psz1: *const u16,
            psz2: *const u16,
            fIgnoreSlash: root::BOOL,
        ) -> i32;
    }
    extern "C" {
        pub fn UrlCombineA(
            pszBase: *const i8,
            pszRelative: *const i8,
            pszCombined: *mut i8,
            pcchCombined: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlCombineW(
            pszBase: *const u16,
            pszRelative: *const u16,
            pszCombined: *mut u16,
            pcchCombined: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlCanonicalizeA(
            pszUrl: *const i8,
            pszCanonicalized: *mut i8,
            pcchCanonicalized: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlCanonicalizeW(
            pszUrl: *const u16,
            pszCanonicalized: *mut u16,
            pcchCanonicalized: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlIsOpaqueA(pszURL: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn UrlIsOpaqueW(pszURL: *const u16) -> root::BOOL;
    }
    extern "C" {
        pub fn UrlIsNoHistoryA(pszURL: *const i8) -> root::BOOL;
    }
    extern "C" {
        pub fn UrlIsNoHistoryW(pszURL: *const u16) -> root::BOOL;
    }
    extern "C" {
        pub fn UrlIsA(pszUrl: *const i8, UrlIs: root::URLIS) -> root::BOOL;
    }
    extern "C" {
        pub fn UrlIsW(pszUrl: *const u16, UrlIs: root::URLIS) -> root::BOOL;
    }
    extern "C" {
        pub fn UrlGetLocationA(pszURL: *const i8) -> *const i8;
    }
    extern "C" {
        pub fn UrlGetLocationW(pszURL: *const u16) -> root::LPCWSTR;
    }
    extern "C" {
        pub fn UrlUnescapeA(
            pszUrl: *mut i8,
            pszUnescaped: *mut i8,
            pcchUnescaped: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlUnescapeW(
            pszUrl: *mut u16,
            pszUnescaped: *mut u16,
            pcchUnescaped: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlEscapeA(
            pszUrl: *const i8,
            pszEscaped: *mut i8,
            pcchEscaped: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlEscapeW(
            pszUrl: *const u16,
            pszEscaped: *mut u16,
            pcchEscaped: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlCreateFromPathA(
            pszPath: *const i8,
            pszUrl: *mut i8,
            pcchUrl: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlCreateFromPathW(
            pszPath: *const u16,
            pszUrl: *mut u16,
            pcchUrl: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PathCreateFromUrlA(
            pszUrl: *const i8,
            pszPath: *mut i8,
            pcchPath: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PathCreateFromUrlW(
            pszUrl: *const u16,
            pszPath: *mut u16,
            pcchPath: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn PathCreateFromUrlAlloc(
            pszIn: *const u16,
            ppszOut: *mut *mut u16,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlHashA(
            pszUrl: *const i8,
            pbHash: *mut u8,
            cbHash: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlHashW(
            pszUrl: *const u16,
            pbHash: *mut u8,
            cbHash: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlGetPartW(
            pszIn: *const u16,
            pszOut: *mut u16,
            pcchOut: *mut u32,
            dwPart: u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlGetPartA(
            pszIn: *const i8,
            pszOut: *mut i8,
            pcchOut: *mut u32,
            dwPart: u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlApplySchemeA(
            pszIn: *const i8,
            pszOut: *mut i8,
            pcchOut: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlApplySchemeW(
            pszIn: *const u16,
            pszOut: *mut u16,
            pcchOut: *mut u32,
            dwFlags: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn HashData(
            pbData: *mut u8,
            cbData: u32,
            pbHash: *mut u8,
            cbHash: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn UrlFixupW(
            pcszUrl: *const u16,
            pszTranslatedUrl: *mut u16,
            cchMax: u32,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPARSEDURLA {
        pub cbSize: u32,
        pub pszProtocol: *const i8,
        pub cchProtocol: root::UINT,
        pub pszSuffix: *const i8,
        pub cchSuffix: root::UINT,
        pub nScheme: root::UINT,
    }
    pub type PARSEDURLA = root::tagPARSEDURLA;
    pub type PPARSEDURLA = *mut root::tagPARSEDURLA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagPARSEDURLW {
        pub cbSize: u32,
        pub pszProtocol: root::LPCWSTR,
        pub cchProtocol: root::UINT,
        pub pszSuffix: root::LPCWSTR,
        pub cchSuffix: root::UINT,
        pub nScheme: root::UINT,
    }
    pub type PARSEDURLW = root::tagPARSEDURLW;
    pub type PPARSEDURLW = *mut root::tagPARSEDURLW;
    pub type PARSEDURL = root::PARSEDURLA;
    pub type PPARSEDURL = root::PPARSEDURLA;
    extern "C" {
        pub fn ParseURLA(pcszURL: *const i8, ppu: *mut root::PARSEDURLA) -> root::HRESULT;
    }
    extern "C" {
        pub fn ParseURLW(pcszURL: root::LPCWSTR, ppu: *mut root::PARSEDURLW) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHDeleteEmptyKeyA(hkey: root::HKEY, pszSubKey: *const i8) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHDeleteEmptyKeyW(hkey: root::HKEY, pszSubKey: root::LPCWSTR) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHDeleteKeyA(hkey: root::HKEY, pszSubKey: *const i8) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHDeleteKeyW(hkey: root::HKEY, pszSubKey: root::LPCWSTR) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegDuplicateHKey(hkey: root::HKEY) -> root::HKEY;
    }
    extern "C" {
        pub fn SHDeleteValueA(
            hkey: root::HKEY,
            pszSubKey: *const i8,
            pszValue: *const i8,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHDeleteValueW(
            hkey: root::HKEY,
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHGetValueA(
            hkey: root::HKEY,
            pszSubKey: *const i8,
            pszValue: *const i8,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHGetValueW(
            hkey: root::HKEY,
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHSetValueA(
            hkey: root::HKEY,
            pszSubKey: *const i8,
            pszValue: *const i8,
            dwType: u32,
            pvData: root::LPCVOID,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHSetValueW(
            hkey: root::HKEY,
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            dwType: u32,
            pvData: root::LPCVOID,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    pub type SRRF = i32;
    extern "C" {
        pub fn SHRegGetValueA(
            hkey: root::HKEY,
            pszSubKey: *const i8,
            pszValue: *const i8,
            srrfFlags: root::SRRF,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetValueW(
            hkey: root::HKEY,
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            srrfFlags: root::SRRF,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegSetValue(
            hkey: root::HKEY,
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            srrfFlags: root::SRRF,
            dwType: u32,
            pvData: root::LPCVOID,
            cbData: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetValueFromHKCUHKLM(
            pwszKey: *const u16,
            pwszValue: *const u16,
            srrfFlags: root::SRRF,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetBoolValueFromHKCUHKLM(
            pszKey: *const u16,
            pszValue: *const u16,
            fDefault: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHQueryValueExA(
            hkey: root::HKEY,
            pszValue: *const i8,
            pdwReserved: *mut u32,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHQueryValueExW(
            hkey: root::HKEY,
            pszValue: root::LPCWSTR,
            pdwReserved: *mut u32,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHEnumKeyExA(
            hkey: root::HKEY,
            dwIndex: u32,
            pszName: *mut i8,
            pcchName: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHEnumKeyExW(
            hkey: root::HKEY,
            dwIndex: u32,
            pszName: root::LPWSTR,
            pcchName: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHEnumValueA(
            hkey: root::HKEY,
            dwIndex: u32,
            pszValueName: *mut i8,
            pcchValueName: root::LPDWORD,
            pdwType: root::LPDWORD,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHEnumValueW(
            hkey: root::HKEY,
            dwIndex: u32,
            pszValueName: *mut u16,
            pcchValueName: root::LPDWORD,
            pdwType: root::LPDWORD,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHQueryInfoKeyA(
            hkey: root::HKEY,
            pcSubKeys: root::LPDWORD,
            pcchMaxSubKeyLen: root::LPDWORD,
            pcValues: root::LPDWORD,
            pcchMaxValueNameLen: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHQueryInfoKeyW(
            hkey: root::HKEY,
            pcSubKeys: root::LPDWORD,
            pcchMaxSubKeyLen: root::LPDWORD,
            pcValues: root::LPDWORD,
            pcchMaxValueNameLen: root::LPDWORD,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHCopyKeyA(
            hkeySrc: root::HKEY,
            pszSrcSubKey: *const i8,
            hkeyDest: root::HKEY,
            fReserved: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHCopyKeyW(
            hkeySrc: root::HKEY,
            pszSrcSubKey: root::LPCWSTR,
            hkeyDest: root::HKEY,
            fReserved: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetPathA(
            hKey: root::HKEY,
            pcszSubKey: *const i8,
            pcszValue: *const i8,
            pszPath: *mut i8,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetPathW(
            hKey: root::HKEY,
            pcszSubKey: root::LPCWSTR,
            pcszValue: root::LPCWSTR,
            pszPath: root::LPWSTR,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegSetPathA(
            hKey: root::HKEY,
            pcszSubKey: *const i8,
            pcszValue: *const i8,
            pcszPath: *const i8,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegSetPathW(
            hKey: root::HKEY,
            pcszSubKey: root::LPCWSTR,
            pcszValue: root::LPCWSTR,
            pcszPath: root::LPCWSTR,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    pub const SHREGDEL_FLAGS_SHREGDEL_DEFAULT: root::SHREGDEL_FLAGS = 0;
    pub const SHREGDEL_FLAGS_SHREGDEL_HKCU: root::SHREGDEL_FLAGS = 1;
    pub const SHREGDEL_FLAGS_SHREGDEL_HKLM: root::SHREGDEL_FLAGS = 16;
    pub const SHREGDEL_FLAGS_SHREGDEL_BOTH: root::SHREGDEL_FLAGS = 17;
    pub type SHREGDEL_FLAGS = i32;
    pub const SHREGENUM_FLAGS_SHREGENUM_DEFAULT: root::SHREGENUM_FLAGS = 0;
    pub const SHREGENUM_FLAGS_SHREGENUM_HKCU: root::SHREGENUM_FLAGS = 1;
    pub const SHREGENUM_FLAGS_SHREGENUM_HKLM: root::SHREGENUM_FLAGS = 16;
    pub const SHREGENUM_FLAGS_SHREGENUM_BOTH: root::SHREGENUM_FLAGS = 17;
    pub type SHREGENUM_FLAGS = i32;
    pub type HUSKEY = root::HANDLE;
    pub type PHUSKEY = *mut root::HUSKEY;
    extern "C" {
        pub fn SHRegCreateUSKeyA(
            pszPath: *const i8,
            samDesired: root::REGSAM,
            hRelativeUSKey: root::HUSKEY,
            phNewUSKey: root::PHUSKEY,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegCreateUSKeyW(
            pwzPath: root::LPCWSTR,
            samDesired: root::REGSAM,
            hRelativeUSKey: root::HUSKEY,
            phNewUSKey: root::PHUSKEY,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegOpenUSKeyA(
            pszPath: *const i8,
            samDesired: root::REGSAM,
            hRelativeUSKey: root::HUSKEY,
            phNewUSKey: root::PHUSKEY,
            fIgnoreHKCU: root::BOOL,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegOpenUSKeyW(
            pwzPath: root::LPCWSTR,
            samDesired: root::REGSAM,
            hRelativeUSKey: root::HUSKEY,
            phNewUSKey: root::PHUSKEY,
            fIgnoreHKCU: root::BOOL,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegQueryUSValueA(
            hUSKey: root::HUSKEY,
            pszValue: *const i8,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
            fIgnoreHKCU: root::BOOL,
            pvDefaultData: *mut ::std::os::raw::c_void,
            dwDefaultDataSize: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegQueryUSValueW(
            hUSKey: root::HUSKEY,
            pszValue: root::LPCWSTR,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
            fIgnoreHKCU: root::BOOL,
            pvDefaultData: *mut ::std::os::raw::c_void,
            dwDefaultDataSize: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegWriteUSValueA(
            hUSKey: root::HUSKEY,
            pszValue: *const i8,
            dwType: u32,
            pvData: *const ::std::os::raw::c_void,
            cbData: u32,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegWriteUSValueW(
            hUSKey: root::HUSKEY,
            pwzValue: root::LPCWSTR,
            dwType: u32,
            pvData: *const ::std::os::raw::c_void,
            cbData: u32,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegDeleteUSValueA(
            hUSKey: root::HUSKEY,
            pszValue: *const i8,
            delRegFlags: root::SHREGDEL_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegDeleteUSValueW(
            hUSKey: root::HUSKEY,
            pwzValue: root::LPCWSTR,
            delRegFlags: root::SHREGDEL_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegDeleteEmptyUSKeyW(
            hUSKey: root::HUSKEY,
            pwzSubKey: root::LPCWSTR,
            delRegFlags: root::SHREGDEL_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegDeleteEmptyUSKeyA(
            hUSKey: root::HUSKEY,
            pszSubKey: *const i8,
            delRegFlags: root::SHREGDEL_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegEnumUSKeyA(
            hUSKey: root::HUSKEY,
            dwIndex: u32,
            pszName: *mut i8,
            pcchName: root::LPDWORD,
            enumRegFlags: root::SHREGENUM_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegEnumUSKeyW(
            hUSKey: root::HUSKEY,
            dwIndex: u32,
            pwzName: root::LPWSTR,
            pcchName: root::LPDWORD,
            enumRegFlags: root::SHREGENUM_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegEnumUSValueA(
            hUSkey: root::HUSKEY,
            dwIndex: u32,
            pszValueName: *mut i8,
            pcchValueName: root::LPDWORD,
            pdwType: root::LPDWORD,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: root::LPDWORD,
            enumRegFlags: root::SHREGENUM_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegEnumUSValueW(
            hUSkey: root::HUSKEY,
            dwIndex: u32,
            pszValueName: root::LPWSTR,
            pcchValueName: root::LPDWORD,
            pdwType: root::LPDWORD,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: root::LPDWORD,
            enumRegFlags: root::SHREGENUM_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegQueryInfoUSKeyA(
            hUSKey: root::HUSKEY,
            pcSubKeys: root::LPDWORD,
            pcchMaxSubKeyLen: root::LPDWORD,
            pcValues: root::LPDWORD,
            pcchMaxValueNameLen: root::LPDWORD,
            enumRegFlags: root::SHREGENUM_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegQueryInfoUSKeyW(
            hUSKey: root::HUSKEY,
            pcSubKeys: root::LPDWORD,
            pcchMaxSubKeyLen: root::LPDWORD,
            pcValues: root::LPDWORD,
            pcchMaxValueNameLen: root::LPDWORD,
            enumRegFlags: root::SHREGENUM_FLAGS,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegCloseUSKey(hUSKey: root::HUSKEY) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetUSValueA(
            pszSubKey: *const i8,
            pszValue: *const i8,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
            fIgnoreHKCU: root::BOOL,
            pvDefaultData: *mut ::std::os::raw::c_void,
            dwDefaultDataSize: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetUSValueW(
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            pdwType: *mut u32,
            pvData: *mut ::std::os::raw::c_void,
            pcbData: *mut u32,
            fIgnoreHKCU: root::BOOL,
            pvDefaultData: *mut ::std::os::raw::c_void,
            dwDefaultDataSize: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegSetUSValueA(
            pszSubKey: *const i8,
            pszValue: *const i8,
            dwType: u32,
            pvData: *const ::std::os::raw::c_void,
            cbData: u32,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegSetUSValueW(
            pwzSubKey: root::LPCWSTR,
            pwzValue: root::LPCWSTR,
            dwType: u32,
            pvData: *const ::std::os::raw::c_void,
            cbData: u32,
            dwFlags: u32,
        ) -> root::LSTATUS;
    }
    extern "C" {
        pub fn SHRegGetIntW(
            hk: root::HKEY,
            pwzKey: *const u16,
            iDefault: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SHRegGetBoolUSValueA(
            pszSubKey: *const i8,
            pszValue: *const i8,
            fIgnoreHKCU: root::BOOL,
            fDefault: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHRegGetBoolUSValueW(
            pszSubKey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            fIgnoreHKCU: root::BOOL,
            fDefault: root::BOOL,
        ) -> root::BOOL;
    }
    pub const ASSOCF_NONE: i32 = 0;
    pub const ASSOCF_INIT_NOREMAPCLSID: i32 = 1;
    pub const ASSOCF_INIT_BYEXENAME: i32 = 2;
    pub const ASSOCF_OPEN_BYEXENAME: i32 = 2;
    pub const ASSOCF_INIT_DEFAULTTOSTAR: i32 = 4;
    pub const ASSOCF_INIT_DEFAULTTOFOLDER: i32 = 8;
    pub const ASSOCF_NOUSERSETTINGS: i32 = 16;
    pub const ASSOCF_NOTRUNCATE: i32 = 32;
    pub const ASSOCF_VERIFY: i32 = 64;
    pub const ASSOCF_REMAPRUNDLL: i32 = 128;
    pub const ASSOCF_NOFIXUPS: i32 = 256;
    pub const ASSOCF_IGNOREBASECLASS: i32 = 512;
    pub const ASSOCF_INIT_IGNOREUNKNOWN: i32 = 1024;
    pub const ASSOCF_INIT_FIXED_PROGID: i32 = 2048;
    pub const ASSOCF_IS_PROTOCOL: i32 = 4096;
    pub const ASSOCF_INIT_FOR_FILE: i32 = 8192;
    pub const ASSOCF_IS_FULL_URI: i32 = 16384;
    pub const ASSOCF_PER_MACHINE_ONLY: i32 = 32768;
    pub const ASSOCF_APP_TO_APP: i32 = 65536;
    pub type _bindgen_ty_4 = i32;
    pub type ASSOCF = u32;
    pub const ASSOCSTR_ASSOCSTR_COMMAND: root::ASSOCSTR = 1;
    pub const ASSOCSTR_ASSOCSTR_EXECUTABLE: root::ASSOCSTR = 2;
    pub const ASSOCSTR_ASSOCSTR_FRIENDLYDOCNAME: root::ASSOCSTR = 3;
    pub const ASSOCSTR_ASSOCSTR_FRIENDLYAPPNAME: root::ASSOCSTR = 4;
    pub const ASSOCSTR_ASSOCSTR_NOOPEN: root::ASSOCSTR = 5;
    pub const ASSOCSTR_ASSOCSTR_SHELLNEWVALUE: root::ASSOCSTR = 6;
    pub const ASSOCSTR_ASSOCSTR_DDECOMMAND: root::ASSOCSTR = 7;
    pub const ASSOCSTR_ASSOCSTR_DDEIFEXEC: root::ASSOCSTR = 8;
    pub const ASSOCSTR_ASSOCSTR_DDEAPPLICATION: root::ASSOCSTR = 9;
    pub const ASSOCSTR_ASSOCSTR_DDETOPIC: root::ASSOCSTR = 10;
    pub const ASSOCSTR_ASSOCSTR_INFOTIP: root::ASSOCSTR = 11;
    pub const ASSOCSTR_ASSOCSTR_QUICKTIP: root::ASSOCSTR = 12;
    pub const ASSOCSTR_ASSOCSTR_TILEINFO: root::ASSOCSTR = 13;
    pub const ASSOCSTR_ASSOCSTR_CONTENTTYPE: root::ASSOCSTR = 14;
    pub const ASSOCSTR_ASSOCSTR_DEFAULTICON: root::ASSOCSTR = 15;
    pub const ASSOCSTR_ASSOCSTR_SHELLEXTENSION: root::ASSOCSTR = 16;
    pub const ASSOCSTR_ASSOCSTR_DROPTARGET: root::ASSOCSTR = 17;
    pub const ASSOCSTR_ASSOCSTR_DELEGATEEXECUTE: root::ASSOCSTR = 18;
    pub const ASSOCSTR_ASSOCSTR_SUPPORTED_URI_PROTOCOLS: root::ASSOCSTR = 19;
    pub const ASSOCSTR_ASSOCSTR_PROGID: root::ASSOCSTR = 20;
    pub const ASSOCSTR_ASSOCSTR_APPID: root::ASSOCSTR = 21;
    pub const ASSOCSTR_ASSOCSTR_APPPUBLISHER: root::ASSOCSTR = 22;
    pub const ASSOCSTR_ASSOCSTR_APPICONREFERENCE: root::ASSOCSTR = 23;
    pub const ASSOCSTR_ASSOCSTR_MAX: root::ASSOCSTR = 24;
    pub type ASSOCSTR = i32;
    pub const ASSOCKEY_ASSOCKEY_SHELLEXECCLASS: root::ASSOCKEY = 1;
    pub const ASSOCKEY_ASSOCKEY_APP: root::ASSOCKEY = 2;
    pub const ASSOCKEY_ASSOCKEY_CLASS: root::ASSOCKEY = 3;
    pub const ASSOCKEY_ASSOCKEY_BASECLASS: root::ASSOCKEY = 4;
    pub const ASSOCKEY_ASSOCKEY_MAX: root::ASSOCKEY = 5;
    pub type ASSOCKEY = i32;
    pub const ASSOCDATA_ASSOCDATA_MSIDESCRIPTOR: root::ASSOCDATA = 1;
    pub const ASSOCDATA_ASSOCDATA_NOACTIVATEHANDLER: root::ASSOCDATA = 2;
    pub const ASSOCDATA_ASSOCDATA_UNUSED1: root::ASSOCDATA = 3;
    pub const ASSOCDATA_ASSOCDATA_HASPERUSERASSOC: root::ASSOCDATA = 4;
    pub const ASSOCDATA_ASSOCDATA_EDITFLAGS: root::ASSOCDATA = 5;
    pub const ASSOCDATA_ASSOCDATA_VALUE: root::ASSOCDATA = 6;
    pub const ASSOCDATA_ASSOCDATA_MAX: root::ASSOCDATA = 7;
    pub type ASSOCDATA = i32;
    pub const ASSOCENUM_ASSOCENUM_NONE: root::ASSOCENUM = 0;
    pub type ASSOCENUM = i32;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_None: root::FILETYPEATTRIBUTEFLAGS = 0;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_Exclude: root::FILETYPEATTRIBUTEFLAGS = 1;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_Show: root::FILETYPEATTRIBUTEFLAGS = 2;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_HasExtension: root::FILETYPEATTRIBUTEFLAGS = 4;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEdit: root::FILETYPEATTRIBUTEFLAGS = 8;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoRemove: root::FILETYPEATTRIBUTEFLAGS = 16;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoNewVerb: root::FILETYPEATTRIBUTEFLAGS = 32;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditVerb: root::FILETYPEATTRIBUTEFLAGS = 64;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoRemoveVerb: root::FILETYPEATTRIBUTEFLAGS = 128;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditDesc: root::FILETYPEATTRIBUTEFLAGS = 256;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditIcon: root::FILETYPEATTRIBUTEFLAGS = 512;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditDflt: root::FILETYPEATTRIBUTEFLAGS = 1024;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditVerbCmd: root::FILETYPEATTRIBUTEFLAGS = 2048;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditVerbExe: root::FILETYPEATTRIBUTEFLAGS = 4096;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoDDE: root::FILETYPEATTRIBUTEFLAGS = 8192;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoEditMIME: root::FILETYPEATTRIBUTEFLAGS = 32768;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_OpenIsSafe: root::FILETYPEATTRIBUTEFLAGS = 65536;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_AlwaysUnsafe: root::FILETYPEATTRIBUTEFLAGS = 131072;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_NoRecentDocs: root::FILETYPEATTRIBUTEFLAGS = 1048576;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_SafeForElevation: root::FILETYPEATTRIBUTEFLAGS = 2097152;
    pub const FILETYPEATTRIBUTEFLAGS_FTA_AlwaysUseDirectInvoke: root::FILETYPEATTRIBUTEFLAGS =
        4194304;
    pub type FILETYPEATTRIBUTEFLAGS = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IQueryAssociations {
        pub _base: root::IUnknown,
    }
    extern "C" {
        pub fn AssocCreate(
            clsid: root::CLSID,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetAssocKeys(
            pqa: *mut root::IQueryAssociations,
            rgKeys: *mut root::HKEY,
            cKeys: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn AssocQueryStringA(
            flags: root::ASSOCF,
            str_: root::ASSOCSTR,
            pszAssoc: *const i8,
            pszExtra: *const i8,
            pszOut: *mut i8,
            pcchOut: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AssocQueryStringW(
            flags: root::ASSOCF,
            str_: root::ASSOCSTR,
            pszAssoc: root::LPCWSTR,
            pszExtra: root::LPCWSTR,
            pszOut: root::LPWSTR,
            pcchOut: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AssocQueryStringByKeyA(
            flags: root::ASSOCF,
            str_: root::ASSOCSTR,
            hkAssoc: root::HKEY,
            pszExtra: *const i8,
            pszOut: *mut i8,
            pcchOut: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AssocQueryStringByKeyW(
            flags: root::ASSOCF,
            str_: root::ASSOCSTR,
            hkAssoc: root::HKEY,
            pszExtra: root::LPCWSTR,
            pszOut: root::LPWSTR,
            pcchOut: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AssocQueryKeyA(
            flags: root::ASSOCF,
            key: root::ASSOCKEY,
            pszAssoc: *const i8,
            pszExtra: *const i8,
            phkeyOut: *mut root::HKEY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AssocQueryKeyW(
            flags: root::ASSOCF,
            key: root::ASSOCKEY,
            pszAssoc: root::LPCWSTR,
            pszExtra: root::LPCWSTR,
            phkeyOut: *mut root::HKEY,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn AssocIsDangerous(pszAssoc: *const u16) -> root::BOOL;
    }
    extern "C" {
        pub fn AssocGetPerceivedType(
            pszExt: *const u16,
            ptype: *mut root::PERCEIVED,
            pflag: *mut root::PERCEIVEDFLAG,
            ppszType: *mut *mut u16,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHOpenRegStreamA(
            hkey: root::HKEY,
            pszSubkey: *const i8,
            pszValue: *const i8,
            grfMode: u32,
        ) -> *mut root::IStream;
    }
    extern "C" {
        pub fn SHOpenRegStreamW(
            hkey: root::HKEY,
            pszSubkey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            grfMode: u32,
        ) -> *mut root::IStream;
    }
    extern "C" {
        pub fn SHOpenRegStream2A(
            hkey: root::HKEY,
            pszSubkey: *const i8,
            pszValue: *const i8,
            grfMode: u32,
        ) -> *mut root::IStream;
    }
    extern "C" {
        pub fn SHOpenRegStream2W(
            hkey: root::HKEY,
            pszSubkey: root::LPCWSTR,
            pszValue: root::LPCWSTR,
            grfMode: u32,
        ) -> *mut root::IStream;
    }
    extern "C" {
        pub fn SHCreateStreamOnFileA(
            pszFile: *const i8,
            grfMode: u32,
            ppstm: *mut *mut root::IStream,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHCreateStreamOnFileW(
            pszFile: root::LPCWSTR,
            grfMode: u32,
            ppstm: *mut *mut root::IStream,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHCreateStreamOnFileEx(
            pszFile: root::LPCWSTR,
            grfMode: u32,
            dwAttributes: u32,
            fCreate: root::BOOL,
            pstmTemplate: *mut root::IStream,
            ppstm: *mut *mut root::IStream,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHCreateMemStream(
            pInit: *const u8,
            cbInit: root::UINT,
        ) -> *mut root::IStream;
    }
    extern "C" {
        pub fn GetAcceptLanguagesA(
            pszLanguages: *mut i8,
            pcchLanguages: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn GetAcceptLanguagesW(
            pszLanguages: root::LPWSTR,
            pcchLanguages: *mut u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IUnknown_Set(ppunk: *mut *mut root::IUnknown, punk: *mut root::IUnknown);
    }
    extern "C" {
        pub fn IUnknown_AtomicRelease(ppunk: *mut *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn IUnknown_GetWindow(
            punk: *mut root::IUnknown,
            phwnd: *mut root::HWND,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IUnknown_SetSite(
            punk: *mut root::IUnknown,
            punkSite: *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IUnknown_GetSite(
            punk: *mut root::IUnknown,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IUnknown_QueryService(
            punk: *mut root::IUnknown,
            guidService: *const root::GUID,
            riid: *const root::IID,
            ppvOut: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Read(
            pstm: *mut root::IStream,
            pv: *mut ::std::os::raw::c_void,
            cb: root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Write(
            pstm: *mut root::IStream,
            pv: *const ::std::os::raw::c_void,
            cb: root::ULONG,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Reset(pstm: *mut root::IStream) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Size(
            pstm: *mut root::IStream,
            pui: *mut root::ULARGE_INTEGER,
        ) -> root::HRESULT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IConnectionPoint {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn ConnectToConnectionPoint(
            punk: *mut root::IUnknown,
            riidEvent: *const root::IID,
            fConnect: root::BOOL,
            punkTarget: *mut root::IUnknown,
            pdwCookie: *mut u32,
            ppcpOut: *mut *mut root::IConnectionPoint,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_ReadPidl(
            pstm: *mut root::IStream,
            ppidlOut: *mut root::LPITEMIDLIST,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_WritePidl(
            pstm: *mut root::IStream,
            pidlWrite: root::LPCITEMIDLIST,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_ReadStr(pstm: *mut root::IStream, ppsz: *mut *mut u16) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_WriteStr(pstm: *mut root::IStream, psz: *const u16) -> root::HRESULT;
    }
    extern "C" {
        pub fn IStream_Copy(
            pstmFrom: *mut root::IStream,
            pstmTo: *mut root::IStream,
            cb: u32,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetViewStatePropertyBag(
            pidl: root::LPCITEMIDLIST,
            pszBagName: *const u16,
            dwFlags: u32,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHFormatDateTimeA(
            pft: *const root::FILETIME,
            pdwFlags: *mut u32,
            pszBuf: *mut i8,
            cchBuf: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn SHFormatDateTimeW(
            pft: *const root::FILETIME,
            pdwFlags: *mut u32,
            pszBuf: root::LPWSTR,
            cchBuf: root::UINT,
        ) -> i32;
    }
    extern "C" {
        pub fn SHAnsiToUnicode(
            pszSrc: *const i8,
            pwszDst: *mut u16,
            cwchBuf: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SHAnsiToAnsi(
            pszSrc: *const i8,
            pszDst: *mut i8,
            cchBuf: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SHUnicodeToAnsi(
            pwszSrc: *const u16,
            pszDst: *mut i8,
            cchBuf: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SHUnicodeToUnicode(
            pwzSrc: *const u16,
            pwzDst: *mut u16,
            cwchBuf: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn SHMessageBoxCheckA(
            hwnd: root::HWND,
            pszText: *const i8,
            pszCaption: *const i8,
            uType: root::UINT,
            iDefault: i32,
            pszRegVal: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn SHMessageBoxCheckW(
            hwnd: root::HWND,
            pszText: root::LPCWSTR,
            pszCaption: root::LPCWSTR,
            uType: root::UINT,
            iDefault: i32,
            pszRegVal: root::LPCWSTR,
        ) -> i32;
    }
    extern "C" {
        pub fn SHSendMessageBroadcastA(
            uMsg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SHSendMessageBroadcastW(
            uMsg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn SHStripMneumonicA(pszMenu: *mut i8) -> i8;
    }
    extern "C" {
        pub fn SHStripMneumonicW(pszMenu: root::LPWSTR) -> u16;
    }
    extern "C" {
        pub fn IsOS(dwOS: u32) -> root::BOOL;
    }
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_SEARCHMANAGER: root::SHGLOBALCOUNTER = 0;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_SEARCHOPTIONS: root::SHGLOBALCOUNTER = 1;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_FOLDERSETTINGSCHANGE: root::SHGLOBALCOUNTER = 2;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RATINGS: root::SHGLOBALCOUNTER = 3;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_APPROVEDSITES: root::SHGLOBALCOUNTER = 4;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RESTRICTIONS: root::SHGLOBALCOUNTER = 5;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_SHELLSETTINGSCHANGED: root::SHGLOBALCOUNTER = 6;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_SYSTEMPIDLCHANGE: root::SHGLOBALCOUNTER = 7;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_OVERLAYMANAGER: root::SHGLOBALCOUNTER = 8;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_QUERYASSOCIATIONS: root::SHGLOBALCOUNTER = 9;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_IESESSIONS: root::SHGLOBALCOUNTER = 10;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_IEONLY_SESSIONS: root::SHGLOBALCOUNTER = 11;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_APPLICATION_DESTINATIONS: root::SHGLOBALCOUNTER = 12;
    pub const SHGLOBALCOUNTER___UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS:
        root::SHGLOBALCOUNTER = 13;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_BITBUCKETNUMDELETERS: root::SHGLOBALCOUNTER = 14;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES: root::SHGLOBALCOUNTER = 15;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A: root::SHGLOBALCOUNTER = 16;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B: root::SHGLOBALCOUNTER = 17;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C: root::SHGLOBALCOUNTER = 18;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D: root::SHGLOBALCOUNTER = 19;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E: root::SHGLOBALCOUNTER = 20;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F: root::SHGLOBALCOUNTER = 21;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G: root::SHGLOBALCOUNTER = 22;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H: root::SHGLOBALCOUNTER = 23;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I: root::SHGLOBALCOUNTER = 24;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J: root::SHGLOBALCOUNTER = 25;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K: root::SHGLOBALCOUNTER = 26;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L: root::SHGLOBALCOUNTER = 27;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M: root::SHGLOBALCOUNTER = 28;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N: root::SHGLOBALCOUNTER = 29;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O: root::SHGLOBALCOUNTER = 30;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P: root::SHGLOBALCOUNTER = 31;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q: root::SHGLOBALCOUNTER = 32;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R: root::SHGLOBALCOUNTER = 33;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S: root::SHGLOBALCOUNTER = 34;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T: root::SHGLOBALCOUNTER = 35;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U: root::SHGLOBALCOUNTER = 36;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V: root::SHGLOBALCOUNTER = 37;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W: root::SHGLOBALCOUNTER = 38;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X: root::SHGLOBALCOUNTER = 39;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y: root::SHGLOBALCOUNTER = 40;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z: root::SHGLOBALCOUNTER = 41;
    pub const SHGLOBALCOUNTER___UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE:
        root::SHGLOBALCOUNTER = 42;
    pub const SHGLOBALCOUNTER___UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT:
        root::SHGLOBALCOUNTER = 43;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEBINENUM: root::SHGLOBALCOUNTER = 44;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RECYCLEBINCORRUPTED: root::SHGLOBALCOUNTER = 45;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_RATINGS_STATECOUNTER: root::SHGLOBALCOUNTER = 46;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_PRIVATE_PROFILE_CACHE: root::SHGLOBALCOUNTER = 47;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT: root::SHGLOBALCOUNTER = 48;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_FOLDERDEFINITION_CACHE: root::SHGLOBALCOUNTER = 49;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_COMMONPLACES_LIST_CACHE: root::SHGLOBALCOUNTER = 50;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE:
        root::SHGLOBALCOUNTER = 51;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_ASSOCCHANGED: root::SHGLOBALCOUNTER = 52;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE: root::SHGLOBALCOUNTER = 53;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_SETTINGSYNC_ENABLED: root::SHGLOBALCOUNTER = 54;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER:
        root::SHGLOBALCOUNTER = 55;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_USERINFOCHANGED: root::SHGLOBALCOUNTER = 56;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE:
        root::SHGLOBALCOUNTER = 57;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE:
        root::SHGLOBALCOUNTER = 58;
    pub const SHGLOBALCOUNTER_GLOBALCOUNTER_MAXIMUMVALUE: root::SHGLOBALCOUNTER = 59;
    pub type SHGLOBALCOUNTER = i32;
    extern "C" {
        pub fn SHGlobalCounterGetValue(id: root::SHGLOBALCOUNTER) -> i32;
    }
    extern "C" {
        pub fn SHGlobalCounterIncrement(id: root::SHGLOBALCOUNTER) -> i32;
    }
    extern "C" {
        pub fn SHGlobalCounterDecrement(id: root::SHGLOBALCOUNTER) -> i32;
    }
    extern "C" {
        pub fn SHAllocShared(
            pvData: *const ::std::os::raw::c_void,
            dwSize: u32,
            dwProcessId: u32,
        ) -> root::HANDLE;
    }
    extern "C" {
        pub fn SHFreeShared(hData: root::HANDLE, dwProcessId: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn SHLockShared(
            hData: root::HANDLE,
            dwProcessId: u32,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn SHUnlockShared(pvData: *mut ::std::os::raw::c_void) -> root::BOOL;
    }
    extern "C" {
        pub fn WhichPlatform() -> root::UINT;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct QITAB {
        pub piid: *const root::IID,
        pub dwOffset: u32,
    }
    pub type LPQITAB = *mut root::QITAB;
    pub type LPCQITAB = *const root::QITAB;
    extern "C" {
        pub fn QISearch(
            that: *mut ::std::os::raw::c_void,
            pqit: root::LPCQITAB,
            riid: *const root::IID,
            ppv: *mut *mut ::std::os::raw::c_void,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHIsLowMemoryMachine(dwType: u32) -> root::BOOL;
    }
    extern "C" {
        pub fn GetMenuPosFromID(hmenu: root::HMENU, id: root::UINT) -> i32;
    }
    extern "C" {
        pub fn SHGetInverseCMAP(pbMap: *mut u8, cbMap: root::ULONG) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHAutoComplete(hwndEdit: root::HWND, dwFlags: u32) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHCreateThreadRef(
            pcRef: *mut i32,
            ppunk: *mut *mut root::IUnknown,
        ) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHSetThreadRef(punk: *mut root::IUnknown) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHGetThreadRef(ppunk: *mut *mut root::IUnknown) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHSkipJunction(pbc: *mut root::IBindCtx, pclsid: *const root::CLSID) -> root::BOOL;
    }
    pub const CTF_INSIST: i32 = 1;
    pub const CTF_THREAD_REF: i32 = 2;
    pub const CTF_PROCESS_REF: i32 = 4;
    pub const CTF_COINIT_STA: i32 = 8;
    pub const CTF_COINIT: i32 = 8;
    pub const CTF_FREELIBANDEXIT: i32 = 16;
    pub const CTF_REF_COUNTED: i32 = 32;
    pub const CTF_WAIT_ALLOWCOM: i32 = 64;
    pub const CTF_UNUSED: i32 = 128;
    pub const CTF_INHERITWOW64: i32 = 256;
    pub const CTF_WAIT_NO_REENTRANCY: i32 = 512;
    pub const CTF_KEYBOARD_LOCALE: i32 = 1024;
    pub const CTF_OLEINITIALIZE: i32 = 2048;
    pub const CTF_COINIT_MTA: i32 = 4096;
    pub const CTF_NOADDREFLIB: i32 = 8192;
    pub type _bindgen_ty_5 = i32;
    pub type SHCT_FLAGS = u32;
    extern "C" {
        pub fn SHCreateThread(
            pfnThreadProc: root::LPTHREAD_START_ROUTINE,
            pData: *mut ::std::os::raw::c_void,
            flags: root::SHCT_FLAGS,
            pfnCallback: root::LPTHREAD_START_ROUTINE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SHCreateThreadWithHandle(
            pfnThreadProc: root::LPTHREAD_START_ROUTINE,
            pData: *mut ::std::os::raw::c_void,
            flags: root::SHCT_FLAGS,
            pfnCallback: root::LPTHREAD_START_ROUTINE,
            pHandle: *mut root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetProcessReference(punk: *mut root::IUnknown);
    }
    extern "C" {
        pub fn GetProcessReference(punk: *mut *mut root::IUnknown) -> root::HRESULT;
    }
    extern "C" {
        pub fn SHReleaseThreadRef() -> root::HRESULT;
    }
    extern "C" {
        pub fn SHCreateShellPalette(hdc: root::HDC) -> root::HPALETTE;
    }
    extern "C" {
        pub fn ColorRGBToHLS(
            clrRGB: root::COLORREF,
            pwHue: *mut u16,
            pwLuminance: *mut u16,
            pwSaturation: *mut u16,
        );
    }
    extern "C" {
        pub fn ColorHLSToRGB(
            wHue: u16,
            wLuminance: u16,
            wSaturation: u16,
        ) -> root::COLORREF;
    }
    extern "C" {
        pub fn ColorAdjustLuma(
            clrRGB: root::COLORREF,
            n: i32,
            fScale: root::BOOL,
        ) -> root::COLORREF;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DLLVERSIONINFO {
        pub cbSize: u32,
        pub dwMajorVersion: u32,
        pub dwMinorVersion: u32,
        pub dwBuildNumber: u32,
        pub dwPlatformID: u32,
    }
    pub type DLLVERSIONINFO = root::_DLLVERSIONINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DLLVERSIONINFO2 {
        pub info1: root::DLLVERSIONINFO,
        pub dwFlags: u32,
        pub ullVersion: root::ULONGLONG,
    }
    pub type DLLVERSIONINFO2 = root::_DLLVERSIONINFO2;
    pub type DLLGETVERSIONPROC = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut root::DLLVERSIONINFO) -> root::HRESULT,
    >;
    extern "C" {
        pub fn DllInstall(bInstall: root::BOOL, pszCmdLine: *const u16) -> root::HRESULT;
    }
    extern "C" {
        pub fn IsInternetESCEnabled() -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _iobuf {
        pub _Placeholder: *mut ::std::os::raw::c_void,
    }
    pub type FILE = root::_iobuf;
    extern "C" {
        pub fn __acrt_iob_func(_Ix: u32) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fgetwc(_Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _fgetwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc(_Character: u16, _Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _fputwchar(_Character: u16) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc(_Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws(
            _Buffer: *mut u16,
            _BufferCount: i32,
            _Stream: *mut root::FILE,
        ) -> *mut u16;
    }
    extern "C" {
        pub fn fputws(_Buffer: *const u16, _Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _getws_s(_Buffer: *mut u16, _BufferCount: root::size_t) -> *mut u16;
    }
    extern "C" {
        pub fn putwc(_Character: u16, _Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar(_Character: u16) -> root::wint_t;
    }
    extern "C" {
        pub fn _putws(_Buffer: *const u16) -> i32;
    }
    extern "C" {
        pub fn ungetwc(_Character: root::wint_t, _Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _wfdopen(_FileHandle: i32, _Mode: *const u16) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wfopen(_FileName: *const u16, _Mode: *const u16) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wfopen_s(
            _Stream: *mut *mut root::FILE,
            _FileName: *const u16,
            _Mode: *const u16,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wfreopen(
            _FileName: *const u16,
            _Mode: *const u16,
            _OldStream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wfreopen_s(
            _Stream: *mut *mut root::FILE,
            _FileName: *const u16,
            _Mode: *const u16,
            _OldStream: *mut root::FILE,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn _wfsopen(
            _FileName: *const u16,
            _Mode: *const u16,
            _ShFlag: i32,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wpopen(_Command: *const u16, _Mode: *const u16) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wremove(_FileName: *const u16) -> i32;
    }
    extern "C" {
        pub fn _wtempnam(_Directory: *const u16, _FilePrefix: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wtmpnam_s(_Buffer: *mut u16, _BufferCount: root::size_t) -> root::errno_t;
    }
    extern "C" {
        pub fn _wtmpnam(_Buffer: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _fgetwc_nolock(_Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _fputwc_nolock(_Character: u16, _Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _getwc_nolock(_Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _putwc_nolock(_Character: u16, _Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _ungetwc_nolock(_Character: root::wint_t, _Stream: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn __stdio_common_vfwprintf(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vfwprintf_s(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vfwprintf_p(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vfwscanf(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vswprintf(
            _Options: u64,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vswprintf_s(
            _Options: u64,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vsnwprintf_s(
            _Options: u64,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _MaxCount: root::size_t,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vswprintf_p(
            _Options: u64,
            _Buffer: *mut u16,
            _BufferCount: root::size_t,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vswscanf(
            _Options: u64,
            _Buffer: *const u16,
            _BufferCount: root::size_t,
            _Format: *const u16,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    pub type fpos_t = i64;
    extern "C" {
        pub fn _get_stream_buffer_pointers(
            _Stream: *mut root::FILE,
            _Base: *mut *mut *mut i8,
            _Pointer: *mut *mut *mut i8,
            _Count: *mut *mut i32,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn clearerr_s(_Stream: *mut root::FILE) -> root::errno_t;
    }
    extern "C" {
        pub fn fopen_s(
            _Stream: *mut *mut root::FILE,
            _FileName: *const i8,
            _Mode: *const i8,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn fread_s(
            _Buffer: *mut ::std::os::raw::c_void,
            _BufferSize: root::size_t,
            _ElementSize: root::size_t,
            _ElementCount: root::size_t,
            _Stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn freopen_s(
            _Stream: *mut *mut root::FILE,
            _FileName: *const i8,
            _Mode: *const i8,
            _OldStream: *mut root::FILE,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn gets_s(
            _Buffer: *mut i8,
            _Size: root::rsize_t,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn tmpfile_s(_Stream: *mut *mut root::FILE) -> root::errno_t;
    }
    extern "C" {
        pub fn tmpnam_s(
            _Buffer: *mut i8,
            _Size: root::rsize_t,
        ) -> root::errno_t;
    }
    extern "C" {
        pub fn clearerr(_Stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fclose(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _fcloseall() -> i32;
    }
    extern "C" {
        pub fn _fdopen(
            _FileHandle: i32,
            _Mode: *const i8,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn feof(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn ferror(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn fflush(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn fgetc(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _fgetchar() -> i32;
    }
    extern "C" {
        pub fn fgetpos(
            _Stream: *mut root::FILE,
            _Position: *mut root::fpos_t,
        ) -> i32;
    }
    extern "C" {
        pub fn fgets(
            _Buffer: *mut i8,
            _MaxCount: i32,
            _Stream: *mut root::FILE,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn _fileno(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _flushall() -> i32;
    }
    extern "C" {
        pub fn fopen(
            _FileName: *const i8,
            _Mode: *const i8,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fputc(
            _Character: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn _fputchar(_Character: i32) -> i32;
    }
    extern "C" {
        pub fn fputs(
            _Buffer: *const i8,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn fread(
            _Buffer: *mut ::std::os::raw::c_void,
            _ElementSize: root::size_t,
            _ElementCount: root::size_t,
            _Stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn freopen(
            _FileName: *const i8,
            _Mode: *const i8,
            _Stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _fsopen(
            _FileName: *const i8,
            _Mode: *const i8,
            _ShFlag: i32,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fsetpos(
            _Stream: *mut root::FILE,
            _Position: *const root::fpos_t,
        ) -> i32;
    }
    extern "C" {
        pub fn fseek(
            _Stream: *mut root::FILE,
            _Offset: i32,
            _Origin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _fseeki64(
            _Stream: *mut root::FILE,
            _Offset: i64,
            _Origin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn ftell(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _ftelli64(_Stream: *mut root::FILE) -> i64;
    }
    extern "C" {
        pub fn fwrite(
            _Buffer: *const ::std::os::raw::c_void,
            _ElementSize: root::size_t,
            _ElementCount: root::size_t,
            _Stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn getc(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn getchar() -> i32;
    }
    extern "C" {
        pub fn _getmaxstdio() -> i32;
    }
    extern "C" {
        pub fn _getw(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _pclose(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _popen(
            _Command: *const i8,
            _Mode: *const i8,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn putc(
            _Character: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn putchar(_Character: i32) -> i32;
    }
    extern "C" {
        pub fn puts(_Buffer: *const i8) -> i32;
    }
    extern "C" {
        pub fn _putw(
            _Word: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn remove(_FileName: *const i8) -> i32;
    }
    extern "C" {
        pub fn rename(
            _OldFileName: *const i8,
            _NewFileName: *const i8,
        ) -> i32;
    }
    extern "C" {
        pub fn _unlink(_FileName: *const i8) -> i32;
    }
    extern "C" {
        pub fn unlink(_FileName: *const i8) -> i32;
    }
    extern "C" {
        pub fn rewind(_Stream: *mut root::FILE);
    }
    extern "C" {
        pub fn _rmtmp() -> i32;
    }
    extern "C" {
        pub fn setbuf(_Stream: *mut root::FILE, _Buffer: *mut i8);
    }
    extern "C" {
        pub fn _setmaxstdio(_Maximum: i32) -> i32;
    }
    extern "C" {
        pub fn setvbuf(
            _Stream: *mut root::FILE,
            _Buffer: *mut i8,
            _Mode: i32,
            _Size: root::size_t,
        ) -> i32;
    }
    extern "C" {
        pub fn _tempnam(
            _DirectoryName: *const i8,
            _FilePrefix: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(_Buffer: *mut i8) -> *mut i8;
    }
    extern "C" {
        pub fn ungetc(
            _Character: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn _lock_file(_Stream: *mut root::FILE);
    }
    extern "C" {
        pub fn _unlock_file(_Stream: *mut root::FILE);
    }
    extern "C" {
        pub fn _fclose_nolock(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _fflush_nolock(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _fgetc_nolock(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _fputc_nolock(
            _Character: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn _fread_nolock(
            _Buffer: *mut ::std::os::raw::c_void,
            _ElementSize: root::size_t,
            _ElementCount: root::size_t,
            _Stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _fread_nolock_s(
            _Buffer: *mut ::std::os::raw::c_void,
            _BufferSize: root::size_t,
            _ElementSize: root::size_t,
            _ElementCount: root::size_t,
            _Stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _fseek_nolock(
            _Stream: *mut root::FILE,
            _Offset: i32,
            _Origin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _fseeki64_nolock(
            _Stream: *mut root::FILE,
            _Offset: i64,
            _Origin: i32,
        ) -> i32;
    }
    extern "C" {
        pub fn _ftell_nolock(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _ftelli64_nolock(_Stream: *mut root::FILE) -> i64;
    }
    extern "C" {
        pub fn _fwrite_nolock(
            _Buffer: *const ::std::os::raw::c_void,
            _ElementSize: root::size_t,
            _ElementCount: root::size_t,
            _Stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _getc_nolock(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn _putc_nolock(
            _Character: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn _ungetc_nolock(
            _Character: i32,
            _Stream: *mut root::FILE,
        ) -> i32;
    }
    extern "C" {
        pub fn __p__commode() -> *mut i32;
    }
    extern "C" {
        pub fn __stdio_common_vfprintf(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vfprintf_s(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vfprintf_p(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn _set_printf_count_output(_Value: i32) -> i32;
    }
    extern "C" {
        pub fn _get_printf_count_output() -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vfscanf(
            _Options: u64,
            _Stream: *mut root::FILE,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _Arglist: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vsprintf(
            _Options: u64,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vsprintf_s(
            _Options: u64,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vsnprintf_s(
            _Options: u64,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _MaxCount: root::size_t,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vsprintf_p(
            _Options: u64,
            _Buffer: *mut i8,
            _BufferCount: root::size_t,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn __stdio_common_vsscanf(
            _Options: u64,
            _Buffer: *const i8,
            _BufferCount: root::size_t,
            _Format: *const i8,
            _Locale: root::_locale_t,
            _ArgList: root::va_list,
        ) -> i32;
    }
    extern "C" {
        pub fn tempnam(
            _Directory: *const i8,
            _FilePrefix: *const i8,
        ) -> *mut i8;
    }
    extern "C" {
        pub fn fcloseall() -> i32;
    }
    extern "C" {
        pub fn fdopen(
            _FileHandle: i32,
            _Format: *const i8,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fgetchar() -> i32;
    }
    extern "C" {
        pub fn fileno(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn flushall() -> i32;
    }
    extern "C" {
        pub fn fputchar(_Ch: i32) -> i32;
    }
    extern "C" {
        pub fn getw(_Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn putw(_Ch: i32, _Stream: *mut root::FILE) -> i32;
    }
    extern "C" {
        pub fn rmtmp() -> i32;
    }
    pub type STRSAFE_LPSTR = *mut i8;
    pub type STRSAFE_LPCSTR = *const i8;
    pub type STRSAFE_LPWSTR = *mut u16;
    pub type STRSAFE_LPCWSTR = *const u16;
    pub type STRSAFE_LPCUWSTR = *const u16;
    pub type STRSAFE_PCNZCH = *const i8;
    pub type STRSAFE_PCNZWCH = *const u16;
    pub type STRSAFE_PCUNZWCH = *const u16;
    pub type _TCHAR = i8;
    pub type _TSCHAR = i8;
    pub type _TUCHAR = u8;
    pub type _TXCHAR = i8;
    pub type _TINT = i32;
    pub mod yulib {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct auto_cast_t<T> {
            pub v: *mut T,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct format {
            pub buf: [i8; 256usize],
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CFile {
            pub file: root::HANDLE,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CMemory<T> {
            pub mem: *mut T,
            pub size: u32,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CVector<T> {
            pub mem: *mut T,
            pub size: root::size_t,
            pub capacity: root::size_t,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CTextBuffer {
            pub mem: *mut i8,
            pub ptr: *mut i8,
            pub end: *mut i8,
            pub size: u32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorYCbCr {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorRGB {
            pub __bindgen_anon_1: root::yulib::ColorRGB__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorRGB__bindgen_ty_1 {
            pub b: u8,
            pub g: u8,
            pub r: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct ColorRGBA {
            pub __bindgen_anon_1: root::yulib::ColorRGBA__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union ColorRGBA__bindgen_ty_1 {
            pub val: u32,
            pub __bindgen_anon_1: root::yulib::ColorRGBA__bindgen_ty_1__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorRGBA__bindgen_ty_1__bindgen_ty_1 {
            pub b: u8,
            pub g: u8,
            pub r: u8,
            pub a: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorHSV {
            pub h: u16,
            pub s: u8,
            pub v: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorYCbCrA {
            pub y: i16,
            pub cb: i16,
            pub cr: i16,
            pub a: i16,
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PIXEL_YC {
        pub y: i16,
        pub cb: i16,
        pub cr: i16,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PIXEL {
        pub b: u8,
        pub g: u8,
        pub r: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FILTER_PROC_INFO {
        pub flag: i32,
        pub ycp_edit: *mut root::PIXEL_YC,
        pub ycp_temp: *mut root::PIXEL_YC,
        pub w: i32,
        pub h: i32,
        pub max_w: i32,
        pub max_h: i32,
        pub frame: i32,
        pub frame_n: i32,
        pub org_w: i32,
        pub org_h: i32,
        pub audiop: *mut i16,
        pub audio_n: i32,
        pub audio_ch: i32,
        pub pixelp: *mut root::PIXEL,
        pub editp: *mut ::std::os::raw::c_void,
        pub yc_size: i32,
        pub line_size: i32,
        pub reserve: [i32; 8usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FRAME_STATUS {
        pub video: i32,
        pub audio: i32,
        pub inter: i32,
        pub index24fps: i32,
        pub config: i32,
        pub vcm: i32,
        pub edit_flag: i32,
        pub reserve: [i32; 9usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FILE_INFO {
        pub flag: i32,
        pub name: *mut i8,
        pub w: i32,
        pub h: i32,
        pub video_rate: i32,
        pub video_scale: i32,
        pub audio_rate: i32,
        pub audio_ch: i32,
        pub frame_n: i32,
        pub video_decode_format: u32,
        pub video_decode_bit: i32,
        pub audio_n: i32,
        pub reserve: [i32; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SYS_INFO {
        pub flag: i32,
        pub info: *mut i8,
        pub filter_n: i32,
        pub min_w: i32,
        pub min_h: i32,
        pub max_w: i32,
        pub max_h: i32,
        pub max_frame: i32,
        pub edit_name: *mut i8,
        pub project_name: *mut i8,
        pub output_name: *mut i8,
        pub vram_w: i32,
        pub vram_h: i32,
        pub vram_yc_size: i32,
        pub vram_line_size: i32,
        pub hfont: isize,
        pub build: i32,
        pub reserve: [i32; 2usize],
    }
    pub type MULTI_THREAD_FUNC = ::std::option::Option<
        unsafe extern "C" fn(
            thread_id: i32,
            thread_num: i32,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
    >;
    pub type AVI_FILE_HANDLE = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct EXFUNC {
        pub get_ycp_ofs: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                ofs: i32,
            ),
        >,
        pub get_ycp: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_pixelp: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_audio: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                buf: *mut ::std::os::raw::c_void,
            ) -> i32,
        >,
        pub is_editing: ::std::option::Option<
            unsafe extern "C" fn(editp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub is_saving: ::std::option::Option<
            unsafe extern "C" fn(editp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub get_frame: ::std::option::Option<
            unsafe extern "C" fn(editp: *mut ::std::os::raw::c_void) -> i32,
        >,
        pub get_frame_n: ::std::option::Option<
            unsafe extern "C" fn(editp: *mut ::std::os::raw::c_void) -> i32,
        >,
        pub get_frame_size: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                w: *mut i32,
                h: *mut i32,
            ) -> root::BOOL,
        >,
        pub set_frame: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> i32,
        >,
        pub set_frame_n: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> i32,
        >,
        pub copy_frame: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                d: i32,
                s: i32,
            ) -> root::BOOL,
        >,
        pub copy_video: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                d: i32,
                s: i32,
            ) -> root::BOOL,
        >,
        pub copy_audio: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                d: i32,
                s: i32,
            ) -> root::BOOL,
        >,
        pub copy_clip: ::std::option::Option<
            unsafe extern "C" fn(
                hwnd: root::HWND,
                pixelp: *mut ::std::os::raw::c_void,
                w: i32,
                h: i32,
            ) -> root::BOOL,
        >,
        pub paste_clip: ::std::option::Option<
            unsafe extern "C" fn(
                hwnd: root::HWND,
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> root::BOOL,
        >,
        pub get_frame_status: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                fsp: *mut root::FRAME_STATUS,
            ) -> root::BOOL,
        >,
        pub set_frame_status: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                fsp: *mut root::FRAME_STATUS,
            ) -> root::BOOL,
        >,
        pub is_saveframe: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> root::BOOL,
        >,
        pub is_keyframe: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> root::BOOL,
        >,
        pub is_recompress: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> root::BOOL,
        >,
        pub filter_window_update: ::std::option::Option<
            unsafe extern "C" fn(fp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub is_filter_window_disp: ::std::option::Option<
            unsafe extern "C" fn(fp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub get_file_info: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                fip: *mut root::FILE_INFO,
            ) -> root::BOOL,
        >,
        pub get_config_name: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> *mut i8,
        >,
        pub is_filter_active: ::std::option::Option<
            unsafe extern "C" fn(fp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub get_pixel_filtered: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                pixelp: *mut ::std::os::raw::c_void,
                w: *mut i32,
                h: *mut i32,
            ) -> root::BOOL,
        >,
        pub get_audio_filtered: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                buf: *mut ::std::os::raw::c_void,
            ) -> i32,
        >,
        pub get_select_frame: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                s: *mut i32,
                e: *mut i32,
            ) -> root::BOOL,
        >,
        pub set_select_frame: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                s: i32,
                e: i32,
            ) -> root::BOOL,
        >,
        pub rgb2yc: ::std::option::Option<
            unsafe extern "C" fn(
                ycp: *mut root::PIXEL_YC,
                pixelp: *mut root::PIXEL,
                w: i32,
            ) -> root::BOOL,
        >,
        pub yc2rgb: ::std::option::Option<
            unsafe extern "C" fn(
                pixelp: *mut root::PIXEL,
                ycp: *mut root::PIXEL_YC,
                w: i32,
            ) -> root::BOOL,
        >,
        pub dlg_get_load_name: ::std::option::Option<
            unsafe extern "C" fn(
                name: *mut i8,
                filter: *mut i8,
                def: *mut i8,
            ) -> root::BOOL,
        >,
        pub dlg_get_save_name: ::std::option::Option<
            unsafe extern "C" fn(
                name: *mut i8,
                filter: *mut i8,
                def: *mut i8,
            ) -> root::BOOL,
        >,
        pub ini_load_int: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                key: *mut i8,
                n: i32,
            ) -> i32,
        >,
        pub ini_save_int: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                key: *mut i8,
                n: i32,
            ) -> i32,
        >,
        pub ini_load_str: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                key: *mut i8,
                str_: *mut i8,
                def: *mut i8,
            ) -> root::BOOL,
        >,
        pub ini_save_str: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                key: *mut i8,
                str_: *mut i8,
            ) -> root::BOOL,
        >,
        pub get_source_file_info: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                fip: *mut root::FILE_INFO,
                source_file_id: i32,
            ) -> root::BOOL,
        >,
        pub get_source_video_number: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                source_file_id: *mut i32,
                source_video_number: *mut i32,
            ) -> root::BOOL,
        >,
        pub get_sys_info: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                sip: *mut root::SYS_INFO,
            ) -> root::BOOL,
        >,
        pub get_filterp: ::std::option::Option<
            unsafe extern "C" fn(filter_id: i32) -> *mut ::std::os::raw::c_void,
        >,
        pub get_ycp_filtering: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                reserve: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_audio_filtering: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                buf: *mut ::std::os::raw::c_void,
            ) -> i32,
        >,
        pub set_ycp_filtering_cache_size: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                w: i32,
                h: i32,
                d: i32,
                flag: i32,
            ) -> root::BOOL,
        >,
        pub get_ycp_filtering_cache: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_ycp_source_cache: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                ofs: i32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_disp_pixelp: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                format: u32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_pixel_source: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                pixelp: *mut ::std::os::raw::c_void,
                format: u32,
            ) -> root::BOOL,
        >,
        pub get_pixel_filtered_ex: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                pixelp: *mut ::std::os::raw::c_void,
                w: *mut i32,
                h: *mut i32,
                format: u32,
            ) -> root::BOOL,
        >,
        pub get_ycp_filtering_cache_ex: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                w: *mut i32,
                h: *mut i32,
            ) -> *mut root::PIXEL_YC,
        >,
        pub exec_multi_thread_func: ::std::option::Option<
            unsafe extern "C" fn(
                func: root::MULTI_THREAD_FUNC,
                param1: *mut ::std::os::raw::c_void,
                param2: *mut ::std::os::raw::c_void,
            ) -> root::BOOL,
        >,
        pub create_yc: ::std::option::Option<unsafe extern "C" fn() -> *mut root::PIXEL_YC>,
        pub delete_yc: ::std::option::Option<unsafe extern "C" fn(ycp: *mut root::PIXEL_YC)>,
        pub load_image: ::std::option::Option<
            unsafe extern "C" fn(
                ycp: *mut root::PIXEL_YC,
                file: *mut i8,
                w: *mut i32,
                h: *mut i32,
                flag: i32,
            ) -> root::BOOL,
        >,
        pub resize_yc: ::std::option::Option<
            unsafe extern "C" fn(
                ycp: *mut root::PIXEL_YC,
                w: i32,
                h: i32,
                ycp_src: *mut root::PIXEL_YC,
                sx: i32,
                sy: i32,
                sw: i32,
                sh: i32,
            ),
        >,
        pub copy_yc: ::std::option::Option<
            unsafe extern "C" fn(
                ycp: *mut root::PIXEL_YC,
                x: i32,
                y: i32,
                ycp_src: *mut root::PIXEL_YC,
                sx: i32,
                sy: i32,
                sw: i32,
                sh: i32,
                tr: i32,
            ),
        >,
        pub draw_text: ::std::option::Option<
            unsafe extern "C" fn(
                ycp: *mut root::PIXEL_YC,
                x: i32,
                y: i32,
                text: *mut i8,
                r: i32,
                g: i32,
                b: i32,
                tr: i32,
                hfont: isize,
                w: *mut i32,
                h: *mut i32,
            ),
        >,
        pub avi_file_open: ::std::option::Option<
            unsafe extern "C" fn(
                file: *mut i8,
                fip: *mut root::FILE_INFO,
                flag: i32,
            ) -> root::AVI_FILE_HANDLE,
        >,
        pub avi_file_close: ::std::option::Option<unsafe extern "C" fn(afh: root::AVI_FILE_HANDLE)>,
        pub avi_file_read_video: ::std::option::Option<
            unsafe extern "C" fn(
                afh: root::AVI_FILE_HANDLE,
                ycp: *mut root::PIXEL_YC,
                n: i32,
            ) -> root::BOOL,
        >,
        pub avi_file_read_audio: ::std::option::Option<
            unsafe extern "C" fn(
                afh: root::AVI_FILE_HANDLE,
                buf: *mut ::std::os::raw::c_void,
                n: i32,
            ) -> i32,
        >,
        pub avi_file_get_video_pixelp: ::std::option::Option<
            unsafe extern "C" fn(
                afh: root::AVI_FILE_HANDLE,
                n: i32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub get_avi_file_filter: ::std::option::Option<
            unsafe extern "C" fn(type_: i32) -> *mut i8,
        >,
        pub avi_file_read_audio_sample: ::std::option::Option<
            unsafe extern "C" fn(
                afh: root::AVI_FILE_HANDLE,
                start: i32,
                length: i32,
                buf: *mut ::std::os::raw::c_void,
            ) -> i32,
        >,
        pub avi_file_set_audio_sample_rate: ::std::option::Option<
            unsafe extern "C" fn(
                afh: root::AVI_FILE_HANDLE,
                audio_rate: i32,
                audio_ch: i32,
            ) -> i32,
        >,
        pub get_frame_status_table: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                type_: i32,
            ) -> *mut u8,
        >,
        pub set_undo: ::std::option::Option<
            unsafe extern "C" fn(editp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub add_menu_item: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                name: *mut i8,
                hwnd: root::HWND,
                id: i32,
                def_key: i32,
                flag: i32,
            ) -> root::BOOL,
        >,
        pub edit_open: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                file: *mut i8,
                flag: i32,
            ) -> root::BOOL,
        >,
        pub edit_close: ::std::option::Option<
            unsafe extern "C" fn(editp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub edit_output: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                file: *mut i8,
                flag: i32,
                type_: *mut i8,
            ) -> root::BOOL,
        >,
        pub set_config: ::std::option::Option<
            unsafe extern "C" fn(
                editp: *mut ::std::os::raw::c_void,
                n: i32,
                name: *mut i8,
            ) -> root::BOOL,
        >,
        pub reserve: [i32; 7usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FILTER {
        pub flag: i32,
        pub x: i32,
        pub y: i32,
        pub name: *mut root::TCHAR,
        pub track_n: i32,
        pub track_name: *mut *mut root::TCHAR,
        pub track_default: *mut i32,
        pub track_s: *mut i32,
        pub track_e: *mut i32,
        pub check_n: i32,
        pub check_name: *mut *mut root::TCHAR,
        pub check_default: *mut i32,
        pub func_proc: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                fpip: *mut root::FILTER_PROC_INFO,
            ) -> root::BOOL,
        >,
        pub func_init: ::std::option::Option<
            unsafe extern "C" fn(fp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub func_exit: ::std::option::Option<
            unsafe extern "C" fn(fp: *mut ::std::os::raw::c_void) -> root::BOOL,
        >,
        pub func_update: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                status: i32,
            ) -> root::BOOL,
        >,
        pub func_WndProc: ::std::option::Option<
            unsafe extern "C" fn(
                hwnd: root::HWND,
                message: root::UINT,
                wparam: root::WPARAM,
                lparam: root::LPARAM,
                editp: *mut ::std::os::raw::c_void,
                fp: *mut ::std::os::raw::c_void,
            ) -> root::BOOL,
        >,
        pub track: *mut i32,
        pub check: *mut i32,
        pub ex_data_ptr: *mut ::std::os::raw::c_void,
        pub ex_data_size: i32,
        pub information: *mut root::TCHAR,
        pub func_save_start: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                s: i32,
                e: i32,
                editp: *mut ::std::os::raw::c_void,
            ) -> root::BOOL,
        >,
        pub func_save_end: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
            ) -> root::BOOL,
        >,
        pub exfunc: *mut root::EXFUNC,
        pub hwnd: root::HWND,
        pub dll_hinst: root::HINSTANCE,
        pub ex_data_def: *mut ::std::os::raw::c_void,
        pub func_is_saveframe: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                saveno: i32,
                frame: i32,
                fps: i32,
                edit_flag: i32,
                inter: i32,
            ) -> root::BOOL,
        >,
        pub func_project_load: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                data: *mut ::std::os::raw::c_void,
                size: i32,
            ) -> root::BOOL,
        >,
        pub func_project_save: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                data: *mut ::std::os::raw::c_void,
                size: *mut i32,
            ) -> root::BOOL,
        >,
        pub func_modify_title: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut ::std::os::raw::c_void,
                editp: *mut ::std::os::raw::c_void,
                frame: i32,
                title: *mut i8,
                max_title: i32,
            ) -> root::BOOL,
        >,
        pub dll_path: *mut root::TCHAR,
        pub reserve: [i32; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FILTER_DLL {
        pub flag: i32,
        pub x: i32,
        pub y: i32,
        pub name: *mut root::TCHAR,
        pub track_n: i32,
        pub track_name: *mut *mut root::TCHAR,
        pub track_default: *mut i32,
        pub track_s: *mut i32,
        pub track_e: *mut i32,
        pub check_n: i32,
        pub check_name: *mut *mut root::TCHAR,
        pub check_default: *mut i32,
        pub func_proc: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                fpip: *mut root::FILTER_PROC_INFO,
            ) -> root::BOOL,
        >,
        pub func_init:
            ::std::option::Option<unsafe extern "C" fn(fp: *mut root::FILTER) -> root::BOOL>,
        pub func_exit:
            ::std::option::Option<unsafe extern "C" fn(fp: *mut root::FILTER) -> root::BOOL>,
        pub func_update: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                status: i32,
            ) -> root::BOOL,
        >,
        pub func_WndProc: ::std::option::Option<
            unsafe extern "C" fn(
                hwnd: root::HWND,
                message: root::UINT,
                wparam: root::WPARAM,
                lparam: root::LPARAM,
                editp: *mut ::std::os::raw::c_void,
                fp: *mut root::FILTER,
            ) -> root::BOOL,
        >,
        pub track: *mut i32,
        pub check: *mut i32,
        pub ex_data_ptr: *mut ::std::os::raw::c_void,
        pub ex_data_size: i32,
        pub information: *mut root::TCHAR,
        pub func_save_start: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                s: i32,
                e: i32,
                editp: *mut ::std::os::raw::c_void,
            ) -> root::BOOL,
        >,
        pub func_save_end: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                editp: *mut ::std::os::raw::c_void,
            ) -> root::BOOL,
        >,
        pub exfunc: *mut root::EXFUNC,
        pub hwnd: root::HWND,
        pub dll_hinst: root::HINSTANCE,
        pub ex_data_def: *mut ::std::os::raw::c_void,
        pub func_is_saveframe: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                editp: *mut ::std::os::raw::c_void,
                saveno: i32,
                frame: i32,
                fps: i32,
                edit_flag: i32,
                inter: i32,
            ) -> root::BOOL,
        >,
        pub func_project_load: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                editp: *mut ::std::os::raw::c_void,
                data: *mut ::std::os::raw::c_void,
                size: i32,
            ) -> root::BOOL,
        >,
        pub func_project_save: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                editp: *mut ::std::os::raw::c_void,
                data: *mut ::std::os::raw::c_void,
                size: *mut i32,
            ) -> root::BOOL,
        >,
        pub func_modify_title: ::std::option::Option<
            unsafe extern "C" fn(
                fp: *mut root::FILTER,
                editp: *mut ::std::os::raw::c_void,
                frame: i32,
                title: *mut i8,
                max_title: i32,
            ) -> root::BOOL,
        >,
        pub dll_path: *mut root::TCHAR,
        pub reserve: [i32; 2usize],
    }
    extern "C" {
        #[link_name = "\u{1}?func_proc@@YAHPEAUFILTER@@PEAUFILTER_PROC_INFO@@@Z"]
        pub fn func_proc(fp: *mut root::FILTER, fpip: *mut root::FILTER_PROC_INFO) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_init@@YAHPEAUFILTER@@@Z"]
        pub fn func_init(fp: *mut root::FILTER) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_exit@@YAHPEAUFILTER@@@Z"]
        pub fn func_exit(fp: *mut root::FILTER) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_update@@YAHPEAUFILTER@@H@Z"]
        pub fn func_update(fp: *mut root::FILTER, status: i32) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_WndProc@@YAHPEAUHWND__@@I_K_JPEAXPEAUFILTER@@@Z"]
        pub fn func_WndProc(
            hwnd: root::HWND,
            message: root::UINT,
            wparam: root::WPARAM,
            lparam: root::LPARAM,
            editp: *mut ::std::os::raw::c_void,
            fp: *mut root::FILTER,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_save_start@@YAHPEAUFILTER@@HHPEAX@Z"]
        pub fn func_save_start(
            fp: *mut root::FILTER,
            s: i32,
            e: i32,
            editp: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_save_end@@YAHPEAUFILTER@@PEAX@Z"]
        pub fn func_save_end(
            fp: *mut root::FILTER,
            editp: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_is_saveframe@@YAHPEAUFILTER@@PEAXHHHHH@Z"]
        pub fn func_is_saveframe(
            fp: *mut root::FILTER,
            editp: *mut ::std::os::raw::c_void,
            saveno: i32,
            frame: i32,
            fps: i32,
            edit_flag: i32,
            inter: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_project_load@@YAHPEAUFILTER@@PEAX1H@Z"]
        pub fn func_project_load(
            fp: *mut root::FILTER,
            editp: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
            size: i32,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_project_save@@YAHPEAUFILTER@@PEAX1PEAH@Z"]
        pub fn func_project_save(
            fp: *mut root::FILTER,
            editp: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
            size: *mut i32,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}?func_modify_title@@YAHPEAUFILTER@@PEAXHPEADH@Z"]
        pub fn func_modify_title(
            fp: *mut root::FILTER,
            editp: *mut ::std::os::raw::c_void,
            frame: i32,
            title: *mut i8,
            max_title: i32,
        ) -> root::BOOL;
    }
    pub mod auls {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            #[link_name = "\u{1}?AVIUTL_EXFUNC_NAME@auls@@3QBQEBDB"]
            pub static AVIUTL_EXFUNC_NAME: [*const i8; 80usize];
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AVIUTL_SYSTEM_SETTING {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EDIT_HANDLE {
            pub flag: u32,
            pub edit_filename: [i8; 260usize],
            pub output_filename: [i8; 260usize],
            pub project_filename: [i8; 260usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CFilterWrapper {
            pub fp: *mut root::auls::CFilterWrapper_wrap,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CFilterWrapper_wrap {
            pub _base: root::FILTER,
        }
        pub const EXEDIT_NAME: &[u8; 17usize] =
            b"\xEF\xBF\xBDg\xEF\xBF\xBD\xEF\xBF\xBD\xEF\xBF\xBD\xD2\x8FW\0";
        pub const OBJDLG_CLASSNAME: &[u8; 20usize] = b"ExtendedFilterClass\0";
        pub const EXEDIT_FILTER_ID_BEGIN: i32 = 2000;
        pub const EXEDIT_ALIAS_ID_BEGIN: i32 = 3000;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct OBJDLG_COMMAND {
            pub _address: u8,
        }
        pub const OBJDLG_COMMAND_FILTER_SET_DEFVALUE: u32 = 1108;
        pub const OBJDLG_COMMAND_FILTER_MAKE_ALIAS: u32 = 1109;
        pub const OBJDLG_COMMAND_FILTER_MOVEUP: u32 = 1116;
        pub const OBJDLG_COMMAND_FILTER_MOVEDOWN: u32 = 1117;
        pub const OBJDLG_COMMAND_FILTER_DELETE: u32 = 4300;
        pub const OBJDLG_COMMAND_FILTER_INIT: u32 = 1105;
        pub const OBJDLG_COMMAND_FILTER_VALIDATE: u32 = 4400;
        pub const OBJDLG_COMMAND_FILTER_FOLD: u32 = 4500;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_OBJECT {
            pub exists: u8,
            pub flag: u8,
            pub type_: u8,
            pub padding_: u8,
            pub layer_disp: i32,
            pub frame_begin: i32,
            pub frame_end: i32,
            pub dispname: [i8; 64usize],
            pub index_midpt_leader: i32,
            pub filter_param: [root::auls::EXEDIT_OBJECT_FILTER_PARAM; 12usize],
            pub filter_status: [u8; 12usize],
            pub track_sum: i16,
            pub check_sum: i16,
            pub exdata_sum: u32,
            pub track_value_left: [i32; 64usize],
            pub track_value_right: [i32; 64usize],
            pub track_mode: [root::auls::EXEDIT_OBJECT_TRACK_MODE; 64usize],
            pub check_value: [i32; 48usize],
            pub exdata_offset: u32,
            pub group_belong: i32,
            pub track_param: [i32; 64usize],
            pub layer_set: i32,
            pub scene_set: i32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_OBJECT_FILTER_PARAM {
            pub id: i32,
            pub track_begin: i16,
            pub check_begin: i16,
            pub exdata_offset: u32,
        }
        pub const EXEDIT_OBJECT_FILTER_PARAM_INVALID_ID: i32 = -1;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_OBJECT_TRACK_MODE {
            pub num: i16,
            pub script_num: i16,
        }
        pub const EXEDIT_OBJECT_TRACK_MODE_NUM_USE_SCRIPT: i16 = 15;
        pub const EXEDIT_OBJECT_TRACK_MODE_NUM_DECELERATE: i16 = 32;
        pub const EXEDIT_OBJECT_TRACK_MODE_NUM_ACCELERATE: i16 = 64;
        pub const EXEDIT_OBJECT_FLAG_CLIPPING: u8 = 1;
        pub const EXEDIT_OBJECT_FLAG_CAMERA: u8 = 2;
        pub const EXEDIT_OBJECT_TYPE_OVERLAY: u8 = 1;
        pub const EXEDIT_OBJECT_TYPE_SOUND: u8 = 2;
        pub const EXEDIT_OBJECT_TYPE_EFFECT: u8 = 4;
        pub const EXEDIT_OBJECT_TYPE_LIGHTBLUE: u8 = 8;
        pub const EXEDIT_OBJECT_TYPE_CONTROL: u8 = 16;
        pub const EXEDIT_OBJECT_MAX_DISPNAME: root::size_t = 64;
        pub const EXEDIT_OBJECT_MAX_FILTER: i32 = 12;
        pub const EXEDIT_OBJECT_MAX_TRACK: i32 = 64;
        pub const EXEDIT_OBJECT_MAX_CHECK: i32 = 48;
        pub const EXEDIT_OBJECT_FILTER_STATUS_VALID: u8 = 1;
        pub const EXEDIT_OBJECT_FILTER_STATUS_FOLD: u8 = 2;
        pub const EXEDIT_OBJECT_FILTER_STATUS_GUI_VALID: u8 = 4;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_FILTER {
            pub flag: u32,
            pub x: i32,
            pub y: i32,
            pub name: *const i8,
            pub track_num: i32,
            pub track_name: *mut *const i8,
            pub track_def: *mut i32,
            pub track_min: *mut i32,
            pub track_max: *mut i32,
            pub check_num: i32,
            pub check_name: *mut *const i8,
            pub check_def: *mut i32,
            pub func_proc: *mut ::std::os::raw::c_void,
            pub func_init: *mut ::std::os::raw::c_void,
            pub func_exit: *mut ::std::os::raw::c_void,
            pub func_update: *mut ::std::os::raw::c_void,
            pub func_WndProc: *mut ::std::os::raw::c_void,
            pub track_value: *mut ::std::os::raw::c_void,
            pub check_value: *mut i32,
            pub exdata_ptr: *mut ::std::os::raw::c_void,
            pub exdata_size: u32,
            pub information: *mut ::std::os::raw::c_void,
            pub func_save_start: *mut ::std::os::raw::c_void,
            pub func_save_end: *mut ::std::os::raw::c_void,
            pub aviutl_exfunc: *mut root::EXFUNC,
            pub exedit_exfunc: *mut ::std::os::raw::c_void,
            pub dll_inst: *mut ::std::os::raw::c_void,
            pub exdata_def: *mut ::std::os::raw::c_void,
            pub exdata_use: *mut root::auls::EXEDIT_FILTER_EXDATA_USE,
            pub track_extra: *mut root::auls::EXEDIT_FILTER_TRACK_EXTRA,
            pub track_gui: *mut root::auls::EXEDIT_FILTER_TRACK_GUI,
            pub unknown: [i32; 20usize],
            pub track_scale: *mut i32,
            pub track_link: *mut ::std::os::raw::c_void,
            pub track_drag_min: *mut i32,
            pub track_drag_max: *mut i32,
            pub exedit_filter: *mut root::FILTER,
            pub object_data: *mut root::auls::EXEDIT_OBJECT,
            pub object_index_processing: i16,
            pub filter_pos_processing: i16,
            pub object_index_objdlg: i16,
            pub filter_pos_objdlg: i16,
            pub frame_start: i32,
            pub frame_end: i32,
            pub track_value_left: *mut i32,
            pub track_value_right: *mut i32,
            pub track_mode: *mut i32,
            pub check_value_: *mut i32,
            pub exdata_: *mut ::std::os::raw::c_void,
            pub track_param: *mut i32,
            pub offset_10C: *mut ::std::os::raw::c_void,
            pub offset_110: *mut ::std::os::raw::c_void,
            pub offset_114: *mut ::std::os::raw::c_void,
            pub frame_start_chain: i32,
            pub frame_end_chain: i32,
            pub layer_set: i32,
            pub scene_set: i32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_FILTER_EXDATA_USE {
            pub type_: u16,
            pub size: u16,
            pub name: *const i8,
        }
        pub const EXEDIT_FILTER_EXDATA_USE_TYPE_UNKNOWN: u16 = 0;
        pub const EXEDIT_FILTER_EXDATA_USE_TYPE_NUMBER: u16 = 1;
        pub const EXEDIT_FILTER_EXDATA_USE_TYPE_STRING: u16 = 2;
        pub const EXEDIT_FILTER_EXDATA_USE_TYPE_BYTEARRAY: u16 = 3;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_FILTER_TRACK_EXTRA {
            pub track_scale: *mut i32,
            pub track_link: *mut i32,
            pub track_drag_min: *mut i32,
            pub track_drag_max: *mut i32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EXEDIT_FILTER_TRACK_GUI {
            pub bx: i32,
            pub by: i32,
            pub bz: i32,
            pub rx: i32,
            pub ry: i32,
            pub rz: i32,
            pub cx: i32,
            pub cy: i32,
            pub cz: i32,
            pub zoom: i32,
            pub aspect: i32,
            pub alpha: i32,
        }
        pub const EXEDIT_FILTER_TRACK_GUI_INVALID: i32 = -1;
        pub const EXEDIT_FILTER_FLAG_INPUT_FILTER: u32 = 8;
        pub const EXEDIT_FILTER_FLAG_OUTPUT_FILTER: u32 = 16;
        pub const EXEDIT_FILTER_FLAG_EFFECT: u32 = 32;
        pub const EXEDIT_FILTER_FLAG_DISABLE_PUT: u32 = 128;
        pub const EXEDIT_FILTER_FLAG_DISABLE_ADDING: u32 = 256;
        pub const EXEDIT_FILTER_FLAG_UNKNOWN1: u32 = 512;
        pub const EXEDIT_FILTER_FLAG_BASIC_EFFECT: u32 = 32768;
        pub const EXEDIT_FILTER_FLAG_SOUND_FILTER: u32 = 2097152;
        pub const EXEDIT_FILTER_FLAG_CONTROL_FILTER: u32 = 16777216;
        pub const EXEDIT_FILTER_FLAG_UNKNOWN_RUNTIME: u32 = 67108864;
        pub const EXEDIT_FILTER_FLAG_UNKNOWN: u32 = 1073741824;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct OBJECT_BUFFER_INFO {
            pub exdata_size: u32,
            pub max_data_num: u32,
            pub data: *mut root::auls::EXEDIT_OBJECT,
            pub exdata: *mut ::std::os::raw::c_void,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LAYER_SETTING {
            pub flag: u32,
            pub name: *const i8,
        }
        pub const LAYER_SETTING_FLAG_UNDISP: u32 = 1;
        pub const LAYER_SETTING_FLAG_LOCKED: u32 = 2;
        pub const LAYER_SETTING_FLAG_COORDLINK: u32 = 16;
        pub const LAYER_SETTING_FLAG_CLIP: u32 = 32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SCENE_SETTING {
            pub flag: u32,
            pub name: *const i8,
            pub width: i32,
            pub height: i32,
            pub max_frame: i32,
            pub current_frame: i32,
            pub timeline_scale: i32,
            pub timeline_disp_begin_pos: i32,
            pub selected_object: i32,
            pub selected_frame_begin: i32,
            pub selected_frame_end: i32,
            pub disp_bpm_grid: root::BOOL,
            pub bpm_grid_tempo: i32,
            pub bpm_grid_base: i32,
            pub disp_xy_grid: root::BOOL,
            pub xy_grid_width: i32,
            pub xy_grid_height: i32,
            pub disp_camera_grid: root::BOOL,
            pub camera_grid_size: i32,
            pub camera_grid_num: i32,
            pub disp_out_of_frame: root::BOOL,
            pub out_of_frame_scale: i32,
            pub bpm_grid_beat: i32,
            pub disp_begin_layer: i32,
        }
        pub const SCENE_SETTING_FLAG_DISPED: u32 = 1;
        pub const SCENE_SETTING_FLAG_ALPHA: u32 = 2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CAMERA_ZBUFFER {
            pub distance: u32,
            pub rotate: u32,
            pub distance_overlapped: u32,
            pub color: root::yulib::ColorYCbCrA,
        }
        pub const CAMERA_ZBUFFER_DISTANCE_BASE: u32 = 2000000000;
        pub const CAMERA_ZBUFFER_ROTATE_MAX: u32 = 16384;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct UNDO_INFO {
            pub object_num: i32,
            pub buffer_ptr: *mut ::std::os::raw::c_void,
            pub write_offset: u32,
            pub current_id: i32,
            pub buffer_size: u32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct UNDO_DATA_HEADER {
            pub data_id: i32,
            pub object_id: i32,
            pub data_size: u32,
            pub data: *mut ::std::os::raw::c_void,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CACHE_BUFFER {
            pub width: i32,
            pub height: i32,
            pub flag: u32,
            pub data: *mut root::yulib::ColorYCbCrA,
            pub path: [i8; 260usize],
        }
        pub const CACHE_BUFFER_FLAG_IMAGE_FILE: u32 = 32;
        pub const CACHE_BUFFER_FLAG_IMAGE_COPY: u32 = 64;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CMemref {
            pub m_exedit: u64,
            pub m_Exedit_StaticFilterTable: u32,
            pub m_Exedit_SortedObjectTable_LayerIndexEnd: u32,
            pub m_Exedit_AliasNameBuffer: u32,
            pub m_Exedit_SortedObjectCount: u32,
            pub m_Exedit_ObjDlg_CommandTarget: u32,
            pub m_Exedit_SortedObjectTable_LayerIndexBegin: u32,
            pub m_Exedit_ObjDlg_FilterStatus: u32,
            pub m_Exedit_SortedObjectTable: u32,
            pub m_Exedit_ObjDlg_ObjectIndex: u32,
            pub m_Exedit_SceneSetting: u32,
            pub m_Exedit_LoadedFilterTable: u32,
            pub m_Exedit_LayerSetting: u32,
            pub m_Exedit_SceneDisplaying: u32,
            pub m_Exedit_TextBuffer: u32,
            pub m_Exedit_TraScript_ProcessingTrackBarIndex: u32,
            pub m_Exedit_TraScript_ProcessingObjectIndex: u32,
            pub m_Exedit_ScriptProcessingFilter: u32,
            pub m_Exedit_LuaState: u32,
            pub m_Exedit_ObjectBufferInfo: u32,
            pub m_Exedit_CameraZBuffer: u32,
            pub m_Exedit_UndoInfo: u32,
            pub m_Exedit_ObjectBufferInfo_exdata_size: u32,
            pub m_Exedit_ObjectBufferInfo_max_data_num: u32,
            pub m_Exedit_ObjectBufferInfo_data: u32,
            pub m_Exedit_ObjectBufferInfo_exdata: u32,
            pub m_Exedit_UndoInfo_current_id: u32,
            pub m_Exedit_UndoInfo_write_offset: u32,
            pub m_Exedit_UndoInfo_object_num: u32,
            pub m_Exedit_UndoInfo_buffer_ptr: u32,
            pub m_Exedit_UndoInfo_buffer_size: u32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CObjectBufferInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CUndoInfo {
            pub _address: u8,
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lua_State {
        _unused: [u8; 0],
    }
    pub type __builtin_va_list = *mut i8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __crt_locale_data {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __crt_multibyte_data {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ACTIVATION_CONTEXT {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NET_ADDRESS_INFO_ {
        pub _address: u8,
    }
}
